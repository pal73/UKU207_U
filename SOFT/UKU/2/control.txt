; generated by ARM C/C++ Compiler, 4.1 [Build 644]
; commandline ArmCC [--list --debug -c --asm --interleave -o.\EXE\control.o --asm_dir=.\ --list_dir=.\ --depend=.\EXE\control.d --feedback=.\EXE\UKU_220_IPS_TERMOKOMPENSAT.fed --cpu=Cortex-M3 --apcs=interwork -O1 -IC:\Keil\ARM\CMSIS\Include -IC:\Keil\ARM\INC\NXP\LPC17xx -D__MICROLIB -DUKU_220_IPS_TERMOKOMPENSAT -DUKU2071x -DUKU_ZVU --omf_browse=.\EXE\control.crf control.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  bat_flag PROC
;;;305    // заполнение флагов для АКБ
;;;306    void bat_flag (void)
000000  e92d5ff0          PUSH     {r4-r12,lr}
;;;307    {  
;;;308    if(spc_stat!=spcVZ) 
000004  4efc              LDR      r6,|L1.1016|
;;;309    	{
;;;310    	vz_error=0;
000006  2700              MOVS     r7,#0
000008  f8960023          LDRB     r0,[r6,#0x23]         ;308  ; spc_stat
00000c  2802              CMP      r0,#2                 ;308
00000e  d003              BEQ      |L1.24|
000010  7077              STRB     r7,[r6,#1]
;;;311    	sp_ch_error=0;
000012  70b7              STRB     r7,[r6,#2]
;;;312    	vz1_error=0;
000014  70f7              STRB     r7,[r6,#3]
;;;313    	vz2_error=0;
000016  7137              STRB     r7,[r6,#4]
                  |L1.24|
;;;314    	}
;;;315    
;;;316    if(!snmp_bat_status[0])	 			//Батарея №1
000018  f8dfa3e0          LDR      r10,|L1.1020|
;;;317    	{
;;;318    	if((bat[0]._Ub<(USIGN*10)))		//Снижение напряжения батареи ниже Uбсигн 
00001c  f8dfb3e0          LDR      r11,|L1.1024|
000020  f8df83e0          LDR      r8,|L1.1028|
000024  f8ba0000          LDRH     r0,[r10,#0]           ;316  ; snmp_bat_status
;;;319    		{
;;;320    		snmp_bat_flag[0]|=0x0001; 
;;;321    		if((snmp_bat_flag_puts[0]&0x0001)==0) 
;;;322    			{
;;;323    			snmp_trap_send("BAT #1 Alarm, battery is low",5,8,0); 
;;;324    			snmp_bat_flag_puts[0]|=0x0001;
;;;325    			}
;;;326    		}
;;;327    	else 
;;;328    		{
;;;329    		snmp_bat_flag[0]&=~0x0001; 
;;;330    		if(snmp_bat_flag_puts[0]&0x0001) 
;;;331    			{
;;;332    			snmp_trap_send("BAT #1 Alarm clear, battery is not low",5,8,1);
;;;333    			snmp_bat_flag_puts[0]&=~0x0001;
;;;334    			}
;;;335    		}
;;;336    
;;;337    	if(bat[0]._temper_stat&0x01)	//Повышенная температура батареи, первый порог - предупреждение
;;;338    		{
;;;339    		snmp_bat_flag[0]|=0x0002;
;;;340    		if((snmp_bat_flag_puts[0]&0x0002)==0) 
;;;341    			{
;;;342    			snmp_trap_send("BAT #1 Warning, high battery temperature",5,8,2); 
;;;343    			snmp_bat_flag_puts[0]|=0x0002;
;;;344    			}
;;;345    		}
;;;346    	else 
;;;347    		{
;;;348    		snmp_bat_flag[0]&=~0x0002;
;;;349    		if(snmp_bat_flag_puts[0]&0x0002) 
;;;350    			{
;;;351    			snmp_trap_send("BAT #1 Warning clear, battery temperature is normal",5,8,3);
;;;352    			snmp_bat_flag_puts[0]&=~0x02;
;;;353    			}
;;;354    		}
;;;355    
;;;356    	if(bat[0]._temper_stat&0x02)  	//Повышенная температура батареи, второй порог - авария
;;;357    		{
;;;358    		snmp_bat_flag[0]|=0x0004;
;;;359    		if((snmp_bat_flag_puts[0]&0x0004)==0) 
;;;360    			{
;;;361    			snmp_trap_send("BAT #1 Alarm, high battery temperature",5,8,4); 
;;;362    			snmp_bat_flag_puts[0]|=0x0004;
;;;363    			}
;;;364    		}
;;;365    	else 
;;;366    		{
;;;367    		snmp_bat_flag[0]&=~0x0004;
;;;368    		if(snmp_bat_flag_puts[0]&0x0004) 
;;;369    			{
;;;370    			snmp_trap_send("BAT #1 Alarm clear, battery temperature is normal",5,8,5);
;;;371    			snmp_bat_flag_puts[0]&=~0x0004;
;;;372    			}
;;;373    		}
;;;374    
;;;375    	if(bat[0]._Ib<(-IKB)) snmp_bat_flag[0]|=0x0008;		//Разряд батареи
000028  f8df93dc          LDR      r9,|L1.1032|
00002c  4cf7              LDR      r4,|L1.1036|
00002e  4df8              LDR      r5,|L1.1040|
000030  b148              CBZ      r0,|L1.70|
;;;376    	else if(bat[0]._Ib>IKB) snmp_bat_flag[0]&=~0x0008;	//Заряд батареи
;;;377    
;;;378    	if((spc_stat==spcKE)&&(spc_bat==0))					//Контроль емкости батареи №1 
;;;379    		{
;;;380    		snmp_bat_flag[0]|=0x0010;
;;;381    		if((snmp_bat_flag_puts[0]&0x0010)==0) 
;;;382    			{
;;;383    			snmp_trap_send("BAT #1, capacity test started",5,8,6); 
;;;384    			snmp_bat_flag_puts[0]|=0x0010;
;;;385    			}
;;;386    		}
;;;387    	else 
;;;388    		{
;;;389    		snmp_bat_flag[0]&=~0x0010;
;;;390    		if(snmp_bat_flag_puts[0]&0x0010) 
;;;391    			{
;;;392    			snmp_trap_send("BAT #1, capacity test stopped",5,8,7);
;;;393    			snmp_bat_flag_puts[0]&=~0x0010;
;;;394    			}
;;;395    		}
;;;396    		
;;;397    	if(spc_stat==spcVZ)									//Выравнивающий заряд 
;;;398    		{
;;;399    		snmp_bat_flag[0]|=0x0020;
;;;400    		if((snmp_bat_flag_puts[0]&0x0020)==0) 
;;;401    			{
;;;402    			snmp_trap_send("BAT #1,leveling charge is started",5,8,8); 
;;;403    			snmp_bat_flag_puts[0]|=0x0020;
;;;404    			}
;;;405    		}
;;;406    	else 
;;;407    		{
;;;408    		snmp_bat_flag[0]&=~0x0020;
;;;409    		if(snmp_bat_flag_puts[0]&0x0020) 
;;;410    			{
;;;411    			snmp_trap_send("BAT #1,leveling charge is stopped",5,8,9);
;;;412    			snmp_bat_flag_puts[0]&=~0x0020;
;;;413    			}
;;;414    		}
;;;415    
;;;416    	if(vz_error)										 //Выравнивающий заряд заблокирован по вентиляции
;;;417    		{
;;;418    		snmp_bat_flag[0]|=0x0040;
;;;419    		if((snmp_bat_flag_puts[0]&0x0040)==0) 
;;;420    			{
;;;421    			snmp_trap_send("BAT #1,leveling charge is blocked",5,8,10); 
;;;422    			snmp_bat_flag_puts[0]|=0x0040;
;;;423    			}
;;;424    		}
;;;425    	else 
;;;426    		{
;;;427    		snmp_bat_flag[0]&=~0x0040;
;;;428    		if(snmp_bat_flag_puts[0]&0x0040) 
;;;429    			{
;;;430    			snmp_trap_send("BAT #1,leveling charge is unblocked",5,8,11);
;;;431    			snmp_bat_flag_puts[0]&=~0x0040;
;;;432    			} 
;;;433    		}
;;;434    
;;;435    	if(sp_ch_stat==scsWRK) 								//Ускореннный заряд
;;;436    		{
;;;437    		snmp_bat_flag[0]|=0x0080;
;;;438    		if((snmp_bat_flag_puts[0]&0x0080)==0) 
;;;439    			{
;;;440    			snmp_trap_send("BAT #1,speed charge is started",5,8,10); 
;;;441    			snmp_bat_flag_puts[0]|=0x0080;
;;;442    			}
;;;443    		}
;;;444    	else 
;;;445    		{
;;;446    		snmp_bat_flag[0]&=~0x0080;
;;;447    		if(snmp_bat_flag_puts[0]&0x0080) 
;;;448    			{
;;;449    			snmp_trap_send("BAT #1,speed charge is stopped",5,8,11);
;;;450    			snmp_bat_flag_puts[0]&=~0x0080;
;;;451    			}
;;;452    		}
;;;453    
;;;454    	if(sp_ch_error) 									//Ускореннный заряд заблокирован по вентиляции
;;;455    		{
;;;456    		snmp_bat_flag[0]|=0x0100;
;;;457    		if((snmp_bat_flag_puts[0]&0x0100)==0) 
;;;458    			{
;;;459    			snmp_trap_send("BAT #1,speed charge is blocked",5,8,12); 
;;;460    			snmp_bat_flag_puts[0]|=0x0100;
;;;461    			}
;;;462    		}
;;;463    	else 
;;;464    		{
;;;465    		snmp_bat_flag[0]&=~0x0100;
;;;466    		if(snmp_bat_flag_puts[0]&0x0100) 
;;;467    			{
;;;468    			snmp_trap_send("BAT #1,speed charge is unblocked",5,8,13);
;;;469    			snmp_bat_flag_puts[0]&=~0x0100;
;;;470    			} 
;;;471    		}
;;;472    
;;;473    	if(vz1_stat!=vz1sOFF)								//Уравнительный заряд 
;;;474    		{
;;;475    		snmp_bat_flag[0]|=0x0200;
;;;476    		if((snmp_bat_flag_puts[0]&0x0200)==0) 
;;;477    			{
;;;478    			snmp_trap_send("BAT #1,equalising charge is on",5,8,14); 
;;;479    			snmp_bat_flag_puts[0]|=0x0200;
;;;480    			}
;;;481    		}
;;;482    	else 
;;;483    		{
;;;484    		snmp_bat_flag[0]&=~0x0200;
;;;485    		if(snmp_bat_flag_puts[0]&0x0200) 
;;;486    			{
;;;487    			snmp_trap_send("BAT #1,equalising charge is off",5,8,15);
;;;488    			snmp_bat_flag_puts[0]&=~0x0200;
;;;489    			}
;;;490    		}
;;;491    
;;;492    	if(vz1_error)										//Уравнительный заряд заблокирован по вентиляции 
;;;493    		{
;;;494    		snmp_bat_flag[0]|=0x0400;
;;;495    		if((snmp_bat_flag_puts[0]&0x0400)==0) 
;;;496    			{
;;;497    			snmp_trap_send("BAT #1,equalising charge is blocked",5,8,16); 
;;;498    			snmp_bat_flag_puts[0]|=0x0400;
;;;499    			}
;;;500    		}
;;;501    	else 
;;;502    		{
;;;503    		snmp_bat_flag[0]&=~0x0400;
;;;504    		if(snmp_bat_flag_puts[0]&0x0400) 
;;;505    			{
;;;506    			snmp_trap_send("BAT #1,equalising charge is unblocked",5,8,17);
;;;507    			snmp_bat_flag_puts[0]&=~0x0400;
;;;508    			} 
;;;509    		}
;;;510    
;;;511    	if(vz2_stat!=vz2sOFF)								//Формовочный заряд 
;;;512    		{
;;;513    		snmp_bat_flag[0]|=0x0800;
;;;514    		if((snmp_bat_flag_puts[0]&0x0800)==0) 
;;;515    			{
;;;516    			snmp_trap_send("BAT #1,molding charge is on",5,8,18); 
;;;517    			snmp_bat_flag_puts[0]|=0x0800;
;;;518    			}
;;;519    		}
;;;520    	else 
;;;521    		{
;;;522    		snmp_bat_flag[0]&=~0x0800;
;;;523    		if(snmp_bat_flag_puts[0]&0x0800) 
;;;524    			{
;;;525    			snmp_trap_send("BAT #1,molding charge is off",5,8,19);
;;;526    			snmp_bat_flag_puts[0]&=~0x0800;
;;;527    			}
;;;528    		}
;;;529    
;;;530    	if(vz2_error) 										//Формовочный заряд заблокирован по вентиляции
;;;531    		{
;;;532    		snmp_bat_flag[0]|=0x1000;
;;;533    		if((snmp_bat_flag_puts[0]&0x1000)==0) 
;;;534    			{
;;;535    			snmp_trap_send("BAT #1,molding charge is blocked",5,8,20); 
;;;536    			snmp_bat_flag_puts[0]|=0x1000;
;;;537    			}
;;;538    		}
;;;539    	else 
;;;540    		{
;;;541    		snmp_bat_flag[0]&=~0x1000;
;;;542    		if(snmp_bat_flag_puts[0]&0x1000) 
;;;543    			{
;;;544    			snmp_trap_send("BAT #1,molding charge is unblocked",5,8,21);
;;;545    			snmp_bat_flag_puts[0]&=~0x1000;
;;;546    			} 
;;;547    		}
;;;548    	}
;;;549    else 
;;;550    	{
;;;551    	snmp_bat_flag[0]=0; 
000032  8027              STRH     r7,[r4,#0]
;;;552    	snmp_bat_flag_puts[0]=0;
000034  802f              STRH     r7,[r5,#0]
                  |L1.54|
;;;553    	}
;;;554    
;;;555    if(!snmp_bat_status[1])	 			//Батарея №2
000036  f8ba0002          LDRH     r0,[r10,#2]  ; snmp_bat_status
00003a  2800              CMP      r0,#0
00003c  d07d              BEQ      |L1.314|
;;;556    	{
;;;557    	if((bat[1]._Ub<(USIGN*10)))		//Снижение напряжения батареи ниже Uбсигн 
;;;558    		{
;;;559    		snmp_bat_flag[1]|=0x0001; 
;;;560    		if((snmp_bat_flag_puts[1]&0x0001)==0) 
;;;561    			{
;;;562    			snmp_trap_send("BAT #1 Alarm, battery is low",5,8,22); 
;;;563    			snmp_bat_flag_puts[1]|=0x0001;
;;;564    			}
;;;565    		}
;;;566    	else 
;;;567    		{
;;;568    		snmp_bat_flag[1]&=~0x0001; 
;;;569    		if(snmp_bat_flag_puts[1]&0x0001) 
;;;570    			{
;;;571    			snmp_trap_send("BAT #1 Alarm clear, battery is not low",5,8,23);
;;;572    			snmp_bat_flag_puts[1]&=~0x0001;
;;;573    			}
;;;574    		}
;;;575    
;;;576    	if(bat[1]._temper_stat&0x01)	//Повышенная температура батареи, первый порог - предупреждение
;;;577    		{
;;;578    		snmp_bat_flag[1]|=0x0002;
;;;579    		if((snmp_bat_flag_puts[0]&0x0002)==0) 
;;;580    			{
;;;581    			snmp_trap_send("BAT #1 Warning, high battery temperature",5,8,24); 
;;;582    			snmp_bat_flag_puts[1]|=0x0002;
;;;583    			}
;;;584    		}
;;;585    	else 
;;;586    		{
;;;587    		snmp_bat_flag[1]&=~0x0002;
;;;588    		if(snmp_bat_flag_puts[1]&0x0002) 
;;;589    			{
;;;590    			snmp_trap_send("BAT #1 Warning clear, battery temperature is normal",5,8,25);
;;;591    			snmp_bat_flag_puts[1]&=~0x02;
;;;592    			}
;;;593    		}
;;;594    
;;;595    	if(bat[1]._temper_stat&0x02)  	//Повышенная температура батареи, второй порог - авария
;;;596    		{
;;;597    		snmp_bat_flag[1]|=0x0004;
;;;598    		if((snmp_bat_flag_puts[1]&0x0004)==0) 
;;;599    			{
;;;600    			snmp_trap_send("BAT #1 Alarm, high battery temperature",5,8,26); 
;;;601    			snmp_bat_flag_puts[1]|=0x0004;
;;;602    			}
;;;603    		}
;;;604    	else 
;;;605    		{
;;;606    		snmp_bat_flag[1]&=~0x0004;
;;;607    		if(snmp_bat_flag_puts[1]&0x0004) 
;;;608    			{
;;;609    			snmp_trap_send("BAT #1 Alarm clear, battery temperature is normal",5,8,27);
;;;610    			snmp_bat_flag_puts[1]&=~0x0004;
;;;611    			}
;;;612    		}
;;;613    
;;;614    	if(bat[1]._Ib<(-IKB)) snmp_bat_flag[1]|=0x0008;		//Разряд батареи
;;;615    	else if(bat[1]._Ib>IKB) snmp_bat_flag[1]&=~0x0008;	//Заряд батареи
;;;616    
;;;617    	if((spc_stat==spcKE)&&(spc_bat==0))					//Контроль емкости батареи №1 
;;;618    		{
;;;619    		snmp_bat_flag[1]|=0x0010;
;;;620    		if((snmp_bat_flag_puts[1]&0x0010)==0) 
;;;621    			{
;;;622    			snmp_trap_send("BAT #1, capacity test started",5,8,28); 
;;;623    			snmp_bat_flag_puts[1]|=0x0010;
;;;624    			}
;;;625    		}
;;;626    	else 
;;;627    		{
;;;628    		snmp_bat_flag[1]&=~0x0010;
;;;629    		if(snmp_bat_flag_puts[1]&0x0010) 
;;;630    			{
;;;631    			snmp_trap_send("BAT #1, capacity test stopped",5,8,29);
;;;632    			snmp_bat_flag_puts[1]&=~0x0010;
;;;633    			}
;;;634    		}
;;;635    		
;;;636    	if(spc_stat==spcVZ)									//Выравнивающий заряд 
;;;637    		{
;;;638    		snmp_bat_flag[1]|=0x0020;
;;;639    		if((snmp_bat_flag_puts[1]&0x0020)==0) 
;;;640    			{
;;;641    			snmp_trap_send("BAT #1,leveling charge is started",5,8,30); 
;;;642    			snmp_bat_flag_puts[1]|=0x0020;
;;;643    			}
;;;644    		}
;;;645    	else 
;;;646    		{
;;;647    		snmp_bat_flag[1]&=~0x0020;
;;;648    		if(snmp_bat_flag_puts[1]&0x0020) 
;;;649    			{
;;;650    			snmp_trap_send("BAT #1,leveling charge is stopped",5,8,31);
;;;651    			snmp_bat_flag_puts[1]&=~0x0020;
;;;652    			}
;;;653    		}
;;;654    
;;;655    	if(vz_error)										 //Выравнивающий заряд заблокирован по вентиляции
;;;656    		{
;;;657    		snmp_bat_flag[1]|=0x0040;
;;;658    		if((snmp_bat_flag_puts[1]&0x0040)==0) 
;;;659    			{
;;;660    			snmp_trap_send("BAT #1,leveling charge is blocked",5,8,32); 
;;;661    			snmp_bat_flag_puts[1]|=0x0040;
;;;662    			}
;;;663    		}
;;;664    	else 
;;;665    		{
;;;666    		snmp_bat_flag[1]&=~0x0040;
;;;667    		if(snmp_bat_flag_puts[1]&0x0040) 
;;;668    			{
;;;669    			snmp_trap_send("BAT #1,leveling charge is unblocked",5,8,33);
;;;670    			snmp_bat_flag_puts[1]&=~0x0040;
;;;671    			} 
;;;672    		}
;;;673    
;;;674    	if(sp_ch_stat==scsWRK) 								//Ускореннный заряд
;;;675    		{
;;;676    		snmp_bat_flag[1]|=0x0080;
;;;677    		if((snmp_bat_flag_puts[1]&0x0080)==0) 
;;;678    			{
;;;679    			snmp_trap_send("BAT #1,speed charge is started",5,8,34); 
;;;680    			snmp_bat_flag_puts[1]|=0x0080;
;;;681    			}
;;;682    		}
;;;683    	else 
;;;684    		{
;;;685    		snmp_bat_flag[1]&=~0x0080;
;;;686    		if(snmp_bat_flag_puts[1]&0x0080) 
;;;687    			{
;;;688    			snmp_trap_send("BAT #1,speed charge is stopped",5,8,35);
;;;689    			snmp_bat_flag_puts[1]&=~0x0080;
;;;690    			}
;;;691    		}
;;;692    
;;;693    	if(sp_ch_error) 									//Ускореннный заряд заблокирован по вентиляции
;;;694    		{
;;;695    		snmp_bat_flag[1]|=0x0100;
;;;696    		if((snmp_bat_flag_puts[1]&0x0100)==0) 
;;;697    			{
;;;698    			snmp_trap_send("BAT #1,speed charge is blocked",5,8,36); 
;;;699    			snmp_bat_flag_puts[1]|=0x0100;
;;;700    			}
;;;701    		}
;;;702    	else 
;;;703    		{
;;;704    		snmp_bat_flag[1]&=~0x0100;
;;;705    		if(snmp_bat_flag_puts[1]&0x0100) 
;;;706    			{
;;;707    			snmp_trap_send("BAT #1,speed charge is unblocked",5,8,37);
;;;708    			snmp_bat_flag_puts[1]&=~0x0100;
;;;709    			} 
;;;710    		}
;;;711    
;;;712    	if(vz1_stat!=vz1sOFF)								//Уравнительный заряд 
;;;713    		{
;;;714    		snmp_bat_flag[1]|=0x0200;
;;;715    		if((snmp_bat_flag_puts[1]&0x0200)==0) 
;;;716    			{
;;;717    			snmp_trap_send("BAT #1,equalising charge is on",5,8,38); 
;;;718    			snmp_bat_flag_puts[1]|=0x0200;
;;;719    			}
;;;720    		}
;;;721    	else 
;;;722    		{
;;;723    		snmp_bat_flag[1]&=~0x0200;
;;;724    		if(snmp_bat_flag_puts[1]&0x0200) 
;;;725    			{
;;;726    			snmp_trap_send("BAT #1,equalising charge is off",5,8,39);
;;;727    			snmp_bat_flag_puts[1]&=~0x0200;
;;;728    			}
;;;729    		}
;;;730    
;;;731    	if(vz1_error)										//Уравнительный заряд заблокирован по вентиляции 
;;;732    		{
;;;733    		snmp_bat_flag[1]|=0x0400;
;;;734    		if((snmp_bat_flag_puts[1]&0x0400)==0) 
;;;735    			{
;;;736    			snmp_trap_send("BAT #1,equalising charge is blocked",5,8,40); 
;;;737    			snmp_bat_flag_puts[1]|=0x0400;
;;;738    			}
;;;739    		}
;;;740    	else 
;;;741    		{
;;;742    		snmp_bat_flag[1]&=~0x0400;
;;;743    		if(snmp_bat_flag_puts[1]&0x0400) 
;;;744    			{
;;;745    			snmp_trap_send("BAT #1,equalising charge is unblocked",5,8,41);
;;;746    			snmp_bat_flag_puts[1]&=~0x0400;
;;;747    			} 
;;;748    		}
;;;749    
;;;750    	if(vz2_stat!=vz2sOFF)								//Формовочный заряд 
;;;751    		{
;;;752    		snmp_bat_flag[1]|=0x0800;
;;;753    		if((snmp_bat_flag_puts[1]&0x0800)==0) 
;;;754    			{
;;;755    			snmp_trap_send("BAT #1,molding charge is on",5,8,42); 
;;;756    			snmp_bat_flag_puts[1]|=0x0800;
;;;757    			}
;;;758    		}
;;;759    	else 
;;;760    		{
;;;761    		snmp_bat_flag[1]&=~0x0800;
;;;762    		if(snmp_bat_flag_puts[1]&0x0800) 
;;;763    			{
;;;764    			snmp_trap_send("BAT #1,molding charge is off",5,8,43);
;;;765    			snmp_bat_flag_puts[1]&=~0x0800;
;;;766    			}
;;;767    		}
;;;768    
;;;769    	if(vz2_error) 										//Формовочный заряд заблокирован по вентиляции
;;;770    		{
;;;771    		snmp_bat_flag[1]|=0x1000;
;;;772    		if((snmp_bat_flag_puts[1]&0x1000)==0) 
;;;773    			{
;;;774    			snmp_trap_send("BAT #1,molding charge is blocked",5,8,44); 
;;;775    			snmp_bat_flag_puts[1]|=0x1000;
;;;776    			}
;;;777    		}
;;;778    	else 
;;;779    		{
;;;780    		snmp_bat_flag[1]&=~0x1000;
;;;781    		if(snmp_bat_flag_puts[1]&0x1000) 
;;;782    			{
;;;783    			snmp_trap_send("BAT #1,molding charge is unblocked",5,8,45);
;;;784    			snmp_bat_flag_puts[1]&=~0x1000;
;;;785    			} 
;;;786    		}
;;;787    	}
;;;788    else 
;;;789    	{
;;;790    	snmp_bat_flag[1]=0; 
00003e  8067              STRH     r7,[r4,#2]
;;;791    	snmp_bat_flag_puts[1]=0;
000040  806f              STRH     r7,[r5,#2]
                  |L1.66|
;;;792    	}
;;;793    /*
;;;794    if(!snmp_bat_status[1])
;;;795    	{
;;;796    	if((bat[1]._Ub<(USIGN*10))) 
;;;797    		{
;;;798    		snmp_bat_flag[1]|=0x01; 
;;;799    		if((snmp_bat_flag_puts[1]&0x01)==0) 
;;;800    			{
;;;801    			snmp_trap_send("BAT #2 Alarm, battery is low",5,8,0); 
;;;802    			snmp_bat_flag_puts[1]|=0x01;
;;;803    			}
;;;804    		}
;;;805    	else 
;;;806    		{
;;;807    		snmp_bat_flag[1]&=~0x01; 
;;;808    		if(snmp_bat_flag_puts[1]&0x01) 
;;;809    			{
;;;810    			snmp_trap_send("BAT #2 Alarm clear, battery is not low",5,8,1);
;;;811    			snmp_bat_flag_puts[1]&=~0x01;
;;;812    			}
;;;813    		}
;;;814    	if(bat[1]._temper_stat&0x01) 
;;;815    		{
;;;816    		snmp_bat_flag[1]|=0x02;
;;;817    		if((snmp_bat_flag_puts[1]&0x02)==0) 
;;;818    			{
;;;819    			snmp_trap_send("BAT #2 Alarm, high battery temperature",5,8,2); 
;;;820    			snmp_bat_flag_puts[1]|=0x02;
;;;821    			}
;;;822    		}
;;;823    	else 
;;;824    		{
;;;825    		snmp_bat_flag[1]&=~0x02;
;;;826    		if(snmp_bat_flag_puts[1]&0x02) 
;;;827    			{
;;;828    			snmp_trap_send("BAT #2 Alarm clear, battery temperature is normal",5,8,3);
;;;829    			snmp_bat_flag_puts[1]&=~0x02;
;;;830    			}
;;;831    		}
;;;832    	if(bat[1]._temper_stat&0x02) 
;;;833    		{
;;;834    		snmp_bat_flag[1]|=0x04;
;;;835    		if((snmp_bat_flag_puts[1]&0x04)==0) 
;;;836    			{
;;;837    			snmp_trap_send("BAT #2 Alarm, maximum battery temperature",5,8,4); 
;;;838    			snmp_bat_flag_puts[1]|=0x04;
;;;839    			}
;;;840    		}
;;;841    	else 
;;;842    		{
;;;843    		snmp_bat_flag[1]&=~0x04;
;;;844    		if(snmp_bat_flag_puts[1]&0x04) 
;;;845    			{
;;;846    			snmp_trap_send("BAT #2 Alarm clear, battery temperature is normal",5,8,5);
;;;847    			snmp_bat_flag_puts[1]&=~0x04;
;;;848    			}
;;;849    		}
;;;850    		
;;;851    	if(bat[1]._Ib<(-IKB))	snmp_bat_flag[1]|=0x80;
;;;852    	else if(bat[1]._Ib>IKB)snmp_bat_flag[1]&=~0x80;
;;;853    
;;;854    	if((spc_stat==spcKE)&&(spc_bat==1)) 
;;;855    		{
;;;856    		snmp_bat_flag[1]|=0x10;
;;;857    		if((snmp_bat_flag_puts[1]&0x10)==0) 
;;;858    			{
;;;859    			snmp_trap_send("BAT #2, capacity check enabled",5,8,6); 
;;;860    			snmp_bat_flag_puts[1]|=0x10;
;;;861    			}
;;;862    		}
;;;863    	else 
;;;864    		{
;;;865    		snmp_bat_flag[1]&=~0x10;
;;;866    		if(snmp_bat_flag_puts[1]&0x10) 
;;;867    			{
;;;868    			snmp_trap_send("BAT #2, capacity check disabled",5,8,7);
;;;869    			snmp_bat_flag_puts[1]&=~0x10;
;;;870    			}
;;;871    		}
;;;872    		
;;;873    	if(spc_stat==spcVZ) 
;;;874    		{
;;;875    		snmp_bat_flag[1]|=0x20;
;;;876    		if((snmp_bat_flag_puts[1]&0x20)==0) 
;;;877    			{
;;;878    			snmp_trap_send("BAT #2,equalizing charge is on",5,8,8); 
;;;879    			snmp_bat_flag_puts[1]|=0x20;
;;;880    			}
;;;881    		}
;;;882    	else 
;;;883    		{
;;;884    		snmp_bat_flag[1]&=~0x20;
;;;885    		if(snmp_bat_flag_puts[1]&0x20) 
;;;886    			{
;;;887    			snmp_trap_send("BAT #2,equalizing charge is off",5,8,9);
;;;888    			snmp_bat_flag_puts[1]&=~0x20;
;;;889    			}
;;;890    		}
;;;891    
;;;892    	if(vz_error) 
;;;893    		{
;;;894    		snmp_bat_flag[1]|=0x40;
;;;895    		if((snmp_bat_flag_puts[1]&0x40)==0) 
;;;896    			{
;;;897    			snmp_trap_send("BAT #2,equalizing charge blocked",5,8,10); 
;;;898    			snmp_bat_flag_puts[1]|=0x40;
;;;899    			}
;;;900    		}
;;;901    	else 
;;;902    		{
;;;903    		snmp_bat_flag[1]&=~0x40;
;;;904    		if(snmp_bat_flag_puts[1]&0x40) 
;;;905    			{
;;;906    			snmp_trap_send("BAT #2,equalizing charge is not blocked",5,8,11);
;;;907    			snmp_bat_flag_puts[1]&=~0x40;
;;;908    			} 
;;;909    		}
;;;910       }
;;;911    else 
;;;912    	{
;;;913    	snmp_bat_flag[1]=0; 
;;;914    	snmp_bat_flag_puts[1]=0;
;;;915    	} */
;;;916    }
000042  e8bd9ff0          POP      {r4-r12,pc}
                  |L1.70|
000046  f9bb0000          LDRSH    r0,[r11,#0]           ;318  ; USIGN
00004a  f9b82002          LDRSH    r2,[r8,#2]            ;318  ; bat
00004e  eb000380          ADD      r3,r0,r0,LSL #2       ;318
000052  48ee              LDR      r0,|L1.1036|
000054  ebb20f43          CMP      r2,r3,LSL #1          ;318
000058  f9b01000          LDRSH    r1,[r0,#0]            ;320
00005c  48ec              LDR      r0,|L1.1040|
00005e  f9b00000          LDRSH    r0,[r0,#0]            ;321
000062  da0f              BGE      |L1.132|
000064  f0410101          ORR      r1,r1,#1              ;320
000068  8021              STRH     r1,[r4,#0]            ;320
00006a  07c0              LSLS     r0,r0,#31             ;321
00006c  d119              BNE      |L1.162|
00006e  2300              MOVS     r3,#0                 ;323
000070  2208              MOVS     r2,#8                 ;323
000072  2105              MOVS     r1,#5                 ;323
000074  a0e7              ADR      r0,|L1.1044|
000076  f7fffffe          BL       snmp_trap_send
00007a  8828              LDRH     r0,[r5,#0]            ;324  ; snmp_bat_flag_puts
00007c  f0400001          ORR      r0,r0,#1              ;324
000080  8028              STRH     r0,[r5,#0]            ;324
000082  e00e              B        |L1.162|
                  |L1.132|
000084  f0210101          BIC      r1,r1,#1              ;329
000088  8021              STRH     r1,[r4,#0]            ;329
00008a  07c0              LSLS     r0,r0,#31             ;330
00008c  d009              BEQ      |L1.162|
00008e  2301              MOVS     r3,#1                 ;332
000090  2208              MOVS     r2,#8                 ;332
000092  2105              MOVS     r1,#5                 ;332
000094  a0e7              ADR      r0,|L1.1076|
000096  f7fffffe          BL       snmp_trap_send
00009a  8828              LDRH     r0,[r5,#0]            ;333  ; snmp_bat_flag_puts
00009c  f0200001          BIC      r0,r0,#1              ;333
0000a0  8028              STRH     r0,[r5,#0]            ;333
                  |L1.162|
0000a2  f898003f          LDRB     r0,[r8,#0x3f]         ;337  ; bat
0000a6  07c0              LSLS     r0,r0,#31             ;337
0000a8  d011              BEQ      |L1.206|
0000aa  8820              LDRH     r0,[r4,#0]            ;339  ; snmp_bat_flag
0000ac  f0400002          ORR      r0,r0,#2              ;339
0000b0  8020              STRH     r0,[r4,#0]            ;339
0000b2  8828              LDRH     r0,[r5,#0]            ;340  ; snmp_bat_flag_puts
0000b4  0780              LSLS     r0,r0,#30             ;340
0000b6  d41b              BMI      |L1.240|
0000b8  2302              MOVS     r3,#2                 ;342
0000ba  2208              MOVS     r2,#8                 ;342
0000bc  2105              MOVS     r1,#5                 ;342
0000be  a0e7              ADR      r0,|L1.1116|
0000c0  f7fffffe          BL       snmp_trap_send
0000c4  8828              LDRH     r0,[r5,#0]            ;343  ; snmp_bat_flag_puts
0000c6  f0400002          ORR      r0,r0,#2              ;343
0000ca  8028              STRH     r0,[r5,#0]            ;343
0000cc  e010              B        |L1.240|
                  |L1.206|
0000ce  8820              LDRH     r0,[r4,#0]            ;348  ; snmp_bat_flag
0000d0  f0200002          BIC      r0,r0,#2              ;348
0000d4  8020              STRH     r0,[r4,#0]            ;348
0000d6  8828              LDRH     r0,[r5,#0]            ;349  ; snmp_bat_flag_puts
0000d8  0780              LSLS     r0,r0,#30             ;349
0000da  d509              BPL      |L1.240|
0000dc  2303              MOVS     r3,#3                 ;351
0000de  2208              MOVS     r2,#8                 ;351
0000e0  2105              MOVS     r1,#5                 ;351
0000e2  a0e9              ADR      r0,|L1.1160|
0000e4  f7fffffe          BL       snmp_trap_send
0000e8  8828              LDRH     r0,[r5,#0]            ;352  ; snmp_bat_flag_puts
0000ea  f0200002          BIC      r0,r0,#2              ;352
0000ee  8028              STRH     r0,[r5,#0]            ;352
                  |L1.240|
0000f0  f898003f          LDRB     r0,[r8,#0x3f]         ;356  ; bat
0000f4  0780              LSLS     r0,r0,#30             ;356
0000f6  d511              BPL      |L1.284|
0000f8  8820              LDRH     r0,[r4,#0]            ;358  ; snmp_bat_flag
0000fa  f0400004          ORR      r0,r0,#4              ;358
0000fe  8020              STRH     r0,[r4,#0]            ;358
000100  8828              LDRH     r0,[r5,#0]            ;359  ; snmp_bat_flag_puts
000102  0740              LSLS     r0,r0,#29             ;359
000104  d41d              BMI      |L1.322|
000106  2304              MOVS     r3,#4                 ;361
000108  2208              MOVS     r2,#8                 ;361
00010a  2105              MOVS     r1,#5                 ;361
00010c  a0eb              ADR      r0,|L1.1212|
00010e  f7fffffe          BL       snmp_trap_send
000112  8828              LDRH     r0,[r5,#0]            ;362  ; snmp_bat_flag_puts
000114  f0400004          ORR      r0,r0,#4              ;362
000118  8028              STRH     r0,[r5,#0]            ;362
00011a  e012              B        |L1.322|
                  |L1.284|
00011c  8820              LDRH     r0,[r4,#0]            ;367  ; snmp_bat_flag
00011e  f0200004          BIC      r0,r0,#4              ;367
000122  8020              STRH     r0,[r4,#0]            ;367
000124  8828              LDRH     r0,[r5,#0]            ;368  ; snmp_bat_flag_puts
000126  0740              LSLS     r0,r0,#29             ;368
000128  d50b              BPL      |L1.322|
00012a  2305              MOVS     r3,#5                 ;370
00012c  2208              MOVS     r2,#8                 ;370
00012e  4619              MOV      r1,r3                 ;370
000130  a0ec              ADR      r0,|L1.1252|
000132  f7fffffe          BL       snmp_trap_send
000136  8828              LDRH     r0,[r5,#0]            ;371  ; snmp_bat_flag_puts
000138  e000              B        |L1.316|
                  |L1.314|
00013a  e322              B        |L1.1922|
                  |L1.316|
00013c  f0200004          BIC      r0,r0,#4              ;371
000140  8028              STRH     r0,[r5,#0]            ;371
                  |L1.322|
000142  f9b91000          LDRSH    r1,[r9,#0]            ;375  ; IKB
000146  f9b80008          LDRSH    r0,[r8,#8]            ;375  ; bat
00014a  424a              RSBS     r2,r1,#0              ;375
00014c  4290              CMP      r0,r2                 ;375
00014e  da04              BGE      |L1.346|
000150  8820              LDRH     r0,[r4,#0]            ;375  ; snmp_bat_flag
000152  f0400008          ORR      r0,r0,#8              ;375
000156  8020              STRH     r0,[r4,#0]            ;375
000158  e005              B        |L1.358|
                  |L1.346|
00015a  4288              CMP      r0,r1                 ;376
00015c  dd03              BLE      |L1.358|
00015e  8820              LDRH     r0,[r4,#0]            ;376  ; snmp_bat_flag
000160  f0200008          BIC      r0,r0,#8              ;376
000164  8020              STRH     r0,[r4,#0]            ;376
                  |L1.358|
000166  f8960023          LDRB     r0,[r6,#0x23]         ;378  ; spc_stat
00016a  2801              CMP      r0,#1                 ;378
00016c  d103              BNE      |L1.374|
00016e  f8960024          LDRB     r0,[r6,#0x24]         ;378  ; spc_bat
000172  2800              CMP      r0,#0                 ;378
000174  d03a              BEQ      |L1.492|
                  |L1.374|
000176  8820              LDRH     r0,[r4,#0]            ;389  ; snmp_bat_flag
000178  f0200010          BIC      r0,r0,#0x10           ;389
00017c  8020              STRH     r0,[r4,#0]            ;389
00017e  8828              LDRH     r0,[r5,#0]            ;390  ; snmp_bat_flag_puts
000180  06c0              LSLS     r0,r0,#27             ;390
000182  d509              BPL      |L1.408|
000184  2307              MOVS     r3,#7                 ;392
000186  2208              MOVS     r2,#8                 ;392
000188  2105              MOVS     r1,#5                 ;392
00018a  a0e3              ADR      r0,|L1.1304|
00018c  f7fffffe          BL       snmp_trap_send
000190  8828              LDRH     r0,[r5,#0]            ;393  ; snmp_bat_flag_puts
000192  f0200010          BIC      r0,r0,#0x10           ;393
000196  8028              STRH     r0,[r5,#0]            ;393
                  |L1.408|
000198  f8960023          LDRB     r0,[r6,#0x23]         ;397  ; spc_stat
00019c  2802              CMP      r0,#2                 ;397
00019e  d037              BEQ      |L1.528|
0001a0  8820              LDRH     r0,[r4,#0]            ;408  ; snmp_bat_flag
0001a2  f0200020          BIC      r0,r0,#0x20           ;408
0001a6  8020              STRH     r0,[r4,#0]            ;408
0001a8  8828              LDRH     r0,[r5,#0]            ;409  ; snmp_bat_flag_puts
0001aa  0680              LSLS     r0,r0,#26             ;409
0001ac  d509              BPL      |L1.450|
0001ae  2309              MOVS     r3,#9                 ;411
0001b0  2208              MOVS     r2,#8                 ;411
0001b2  2105              MOVS     r1,#5                 ;411
0001b4  a0e0              ADR      r0,|L1.1336|
0001b6  f7fffffe          BL       snmp_trap_send
0001ba  8828              LDRH     r0,[r5,#0]            ;412  ; snmp_bat_flag_puts
0001bc  f0200020          BIC      r0,r0,#0x20           ;412
0001c0  8028              STRH     r0,[r5,#0]            ;412
                  |L1.450|
0001c2  7870              LDRB     r0,[r6,#1]            ;416  ; vz_error
0001c4  2800              CMP      r0,#0                 ;416
0001c6  d035              BEQ      |L1.564|
0001c8  8820              LDRH     r0,[r4,#0]            ;418  ; snmp_bat_flag
0001ca  f0400040          ORR      r0,r0,#0x40           ;418
0001ce  8020              STRH     r0,[r4,#0]            ;418
0001d0  8828              LDRH     r0,[r5,#0]            ;419  ; snmp_bat_flag_puts
0001d2  0640              LSLS     r0,r0,#25             ;419
0001d4  d43f              BMI      |L1.598|
0001d6  230a              MOVS     r3,#0xa               ;421
0001d8  2208              MOVS     r2,#8                 ;421
0001da  2105              MOVS     r1,#5                 ;421
0001dc  a0df              ADR      r0,|L1.1372|
0001de  f7fffffe          BL       snmp_trap_send
0001e2  8828              LDRH     r0,[r5,#0]            ;422  ; snmp_bat_flag_puts
0001e4  f0400040          ORR      r0,r0,#0x40           ;422
0001e8  8028              STRH     r0,[r5,#0]            ;422
0001ea  e034              B        |L1.598|
                  |L1.492|
0001ec  8820              LDRH     r0,[r4,#0]            ;380  ; snmp_bat_flag
0001ee  f0400010          ORR      r0,r0,#0x10           ;380
0001f2  8020              STRH     r0,[r4,#0]            ;380
0001f4  8828              LDRH     r0,[r5,#0]            ;381  ; snmp_bat_flag_puts
0001f6  06c0              LSLS     r0,r0,#27             ;381
0001f8  d4ce              BMI      |L1.408|
0001fa  2306              MOVS     r3,#6                 ;383
0001fc  2208              MOVS     r2,#8                 ;383
0001fe  2105              MOVS     r1,#5                 ;383
000200  a0df              ADR      r0,|L1.1408|
000202  f7fffffe          BL       snmp_trap_send
000206  8828              LDRH     r0,[r5,#0]            ;384  ; snmp_bat_flag_puts
000208  f0400010          ORR      r0,r0,#0x10           ;384
00020c  8028              STRH     r0,[r5,#0]            ;384
00020e  e7c3              B        |L1.408|
                  |L1.528|
000210  8820              LDRH     r0,[r4,#0]            ;399  ; snmp_bat_flag
000212  f0400020          ORR      r0,r0,#0x20           ;399
000216  8020              STRH     r0,[r4,#0]            ;399
000218  8828              LDRH     r0,[r5,#0]            ;400  ; snmp_bat_flag_puts
00021a  0680              LSLS     r0,r0,#26             ;400
00021c  d4d1              BMI      |L1.450|
00021e  2308              MOVS     r3,#8                 ;402
000220  461a              MOV      r2,r3                 ;402
000222  2105              MOVS     r1,#5                 ;402
000224  a0de              ADR      r0,|L1.1440|
000226  f7fffffe          BL       snmp_trap_send
00022a  8828              LDRH     r0,[r5,#0]            ;403  ; snmp_bat_flag_puts
00022c  f0400020          ORR      r0,r0,#0x20           ;403
000230  8028              STRH     r0,[r5,#0]            ;403
000232  e7c6              B        |L1.450|
                  |L1.564|
000234  8820              LDRH     r0,[r4,#0]            ;427  ; snmp_bat_flag
000236  f0200040          BIC      r0,r0,#0x40           ;427
00023a  8020              STRH     r0,[r4,#0]            ;427
00023c  8828              LDRH     r0,[r5,#0]            ;428  ; snmp_bat_flag_puts
00023e  0640              LSLS     r0,r0,#25             ;428
000240  d509              BPL      |L1.598|
000242  230b              MOVS     r3,#0xb               ;430
000244  2208              MOVS     r2,#8                 ;430
000246  2105              MOVS     r1,#5                 ;430
000248  a0de              ADR      r0,|L1.1476|
00024a  f7fffffe          BL       snmp_trap_send
00024e  8828              LDRH     r0,[r5,#0]            ;431  ; snmp_bat_flag_puts
000250  f0200040          BIC      r0,r0,#0x40           ;431
000254  8028              STRH     r0,[r5,#0]            ;431
                  |L1.598|
000256  48e4              LDR      r0,|L1.1512|
000258  7800              LDRB     r0,[r0,#0]            ;435  ; sp_ch_stat
00025a  2802              CMP      r0,#2                 ;435
00025c  d024              BEQ      |L1.680|
00025e  8820              LDRH     r0,[r4,#0]            ;446  ; snmp_bat_flag
000260  f0200080          BIC      r0,r0,#0x80           ;446
000264  8020              STRH     r0,[r4,#0]            ;446
000266  8828              LDRH     r0,[r5,#0]            ;447  ; snmp_bat_flag_puts
000268  0600              LSLS     r0,r0,#24             ;447
00026a  d509              BPL      |L1.640|
00026c  230b              MOVS     r3,#0xb               ;449
00026e  2208              MOVS     r2,#8                 ;449
000270  2105              MOVS     r1,#5                 ;449
000272  a0de              ADR      r0,|L1.1516|
000274  f7fffffe          BL       snmp_trap_send
000278  8828              LDRH     r0,[r5,#0]            ;450  ; snmp_bat_flag_puts
00027a  f0200080          BIC      r0,r0,#0x80           ;450
00027e  8028              STRH     r0,[r5,#0]            ;450
                  |L1.640|
000280  78b0              LDRB     r0,[r6,#2]            ;454  ; sp_ch_error
000282  b318              CBZ      r0,|L1.716|
000284  8820              LDRH     r0,[r4,#0]            ;456  ; snmp_bat_flag
000286  f4407080          ORR      r0,r0,#0x100          ;456
00028a  8020              STRH     r0,[r4,#0]            ;456
00028c  8828              LDRH     r0,[r5,#0]            ;457  ; snmp_bat_flag_puts
00028e  05c0              LSLS     r0,r0,#23             ;457
000290  d42d              BMI      |L1.750|
000292  230c              MOVS     r3,#0xc               ;459
000294  2208              MOVS     r2,#8                 ;459
000296  2105              MOVS     r1,#5                 ;459
000298  a0dc              ADR      r0,|L1.1548|
00029a  f7fffffe          BL       snmp_trap_send
00029e  8828              LDRH     r0,[r5,#0]            ;460  ; snmp_bat_flag_puts
0002a0  f4407080          ORR      r0,r0,#0x100          ;460
0002a4  8028              STRH     r0,[r5,#0]            ;460
0002a6  e022              B        |L1.750|
                  |L1.680|
0002a8  8820              LDRH     r0,[r4,#0]            ;437  ; snmp_bat_flag
0002aa  f0400080          ORR      r0,r0,#0x80           ;437
0002ae  8020              STRH     r0,[r4,#0]            ;437
0002b0  8828              LDRH     r0,[r5,#0]            ;438  ; snmp_bat_flag_puts
0002b2  0600              LSLS     r0,r0,#24             ;438
0002b4  d4e4              BMI      |L1.640|
0002b6  230a              MOVS     r3,#0xa               ;440
0002b8  2208              MOVS     r2,#8                 ;440
0002ba  2105              MOVS     r1,#5                 ;440
0002bc  a0db              ADR      r0,|L1.1580|
0002be  f7fffffe          BL       snmp_trap_send
0002c2  8828              LDRH     r0,[r5,#0]            ;441  ; snmp_bat_flag_puts
0002c4  f0400080          ORR      r0,r0,#0x80           ;441
0002c8  8028              STRH     r0,[r5,#0]            ;441
0002ca  e7d9              B        |L1.640|
                  |L1.716|
0002cc  8820              LDRH     r0,[r4,#0]            ;465  ; snmp_bat_flag
0002ce  f4207080          BIC      r0,r0,#0x100          ;465
0002d2  8020              STRH     r0,[r4,#0]            ;465
0002d4  8828              LDRH     r0,[r5,#0]            ;466  ; snmp_bat_flag_puts
0002d6  05c0              LSLS     r0,r0,#23             ;466
0002d8  d509              BPL      |L1.750|
0002da  230d              MOVS     r3,#0xd               ;468
0002dc  2208              MOVS     r2,#8                 ;468
0002de  2105              MOVS     r1,#5                 ;468
0002e0  a0da              ADR      r0,|L1.1612|
0002e2  f7fffffe          BL       snmp_trap_send
0002e6  8828              LDRH     r0,[r5,#0]            ;469  ; snmp_bat_flag_puts
0002e8  f4207080          BIC      r0,r0,#0x100          ;469
0002ec  8028              STRH     r0,[r5,#0]            ;469
                  |L1.750|
0002ee  7970              LDRB     r0,[r6,#5]            ;473  ; vz1_stat
0002f0  b188              CBZ      r0,|L1.790|
0002f2  8820              LDRH     r0,[r4,#0]            ;475  ; snmp_bat_flag
0002f4  f4407000          ORR      r0,r0,#0x200          ;475
0002f8  8020              STRH     r0,[r4,#0]            ;475
0002fa  8828              LDRH     r0,[r5,#0]            ;476  ; snmp_bat_flag_puts
0002fc  0580              LSLS     r0,r0,#22             ;476
0002fe  d41b              BMI      |L1.824|
000300  230e              MOVS     r3,#0xe               ;478
000302  2208              MOVS     r2,#8                 ;478
000304  2105              MOVS     r1,#5                 ;478
000306  a0da              ADR      r0,|L1.1648|
000308  f7fffffe          BL       snmp_trap_send
00030c  8828              LDRH     r0,[r5,#0]            ;479  ; snmp_bat_flag_puts
00030e  f4407000          ORR      r0,r0,#0x200          ;479
000312  8028              STRH     r0,[r5,#0]            ;479
000314  e010              B        |L1.824|
                  |L1.790|
000316  8820              LDRH     r0,[r4,#0]            ;484  ; snmp_bat_flag
000318  f4207000          BIC      r0,r0,#0x200          ;484
00031c  8020              STRH     r0,[r4,#0]            ;484
00031e  8828              LDRH     r0,[r5,#0]            ;485  ; snmp_bat_flag_puts
000320  0580              LSLS     r0,r0,#22             ;485
000322  d509              BPL      |L1.824|
000324  230f              MOVS     r3,#0xf               ;487
000326  2208              MOVS     r2,#8                 ;487
000328  2105              MOVS     r1,#5                 ;487
00032a  a0d9              ADR      r0,|L1.1680|
00032c  f7fffffe          BL       snmp_trap_send
000330  8828              LDRH     r0,[r5,#0]            ;488  ; snmp_bat_flag_puts
000332  f4207000          BIC      r0,r0,#0x200          ;488
000336  8028              STRH     r0,[r5,#0]            ;488
                  |L1.824|
000338  78f0              LDRB     r0,[r6,#3]            ;492  ; vz1_error
00033a  b188              CBZ      r0,|L1.864|
00033c  8820              LDRH     r0,[r4,#0]            ;494  ; snmp_bat_flag
00033e  f4406080          ORR      r0,r0,#0x400          ;494
000342  8020              STRH     r0,[r4,#0]            ;494
000344  8828              LDRH     r0,[r5,#0]            ;495  ; snmp_bat_flag_puts
000346  0540              LSLS     r0,r0,#21             ;495
000348  d41b              BMI      |L1.898|
00034a  2310              MOVS     r3,#0x10              ;497
00034c  2208              MOVS     r2,#8                 ;497
00034e  2105              MOVS     r1,#5                 ;497
000350  a0d7              ADR      r0,|L1.1712|
000352  f7fffffe          BL       snmp_trap_send
000356  8828              LDRH     r0,[r5,#0]            ;498  ; snmp_bat_flag_puts
000358  f4406080          ORR      r0,r0,#0x400          ;498
00035c  8028              STRH     r0,[r5,#0]            ;498
00035e  e010              B        |L1.898|
                  |L1.864|
000360  8820              LDRH     r0,[r4,#0]            ;503  ; snmp_bat_flag
000362  f4206080          BIC      r0,r0,#0x400          ;503
000366  8020              STRH     r0,[r4,#0]            ;503
000368  8828              LDRH     r0,[r5,#0]            ;504  ; snmp_bat_flag_puts
00036a  0540              LSLS     r0,r0,#21             ;504
00036c  d509              BPL      |L1.898|
00036e  2311              MOVS     r3,#0x11              ;506
000370  2208              MOVS     r2,#8                 ;506
000372  2105              MOVS     r1,#5                 ;506
000374  a0d7              ADR      r0,|L1.1748|
000376  f7fffffe          BL       snmp_trap_send
00037a  8828              LDRH     r0,[r5,#0]            ;507  ; snmp_bat_flag_puts
00037c  f4206080          BIC      r0,r0,#0x400          ;507
000380  8028              STRH     r0,[r5,#0]            ;507
                  |L1.898|
000382  79f0              LDRB     r0,[r6,#7]            ;511  ; vz2_stat
000384  b188              CBZ      r0,|L1.938|
000386  8820              LDRH     r0,[r4,#0]            ;513  ; snmp_bat_flag
000388  f4406000          ORR      r0,r0,#0x800          ;513
00038c  8020              STRH     r0,[r4,#0]            ;513
00038e  8828              LDRH     r0,[r5,#0]            ;514  ; snmp_bat_flag_puts
000390  0500              LSLS     r0,r0,#20             ;514
000392  d41b              BMI      |L1.972|
000394  2312              MOVS     r3,#0x12              ;516
000396  2208              MOVS     r2,#8                 ;516
000398  2105              MOVS     r1,#5                 ;516
00039a  a0d8              ADR      r0,|L1.1788|
00039c  f7fffffe          BL       snmp_trap_send
0003a0  8828              LDRH     r0,[r5,#0]            ;517  ; snmp_bat_flag_puts
0003a2  f4406000          ORR      r0,r0,#0x800          ;517
0003a6  8028              STRH     r0,[r5,#0]            ;517
0003a8  e010              B        |L1.972|
                  |L1.938|
0003aa  8820              LDRH     r0,[r4,#0]            ;522  ; snmp_bat_flag
0003ac  f4206000          BIC      r0,r0,#0x800          ;522
0003b0  8020              STRH     r0,[r4,#0]            ;522
0003b2  8828              LDRH     r0,[r5,#0]            ;523  ; snmp_bat_flag_puts
0003b4  0500              LSLS     r0,r0,#20             ;523
0003b6  d509              BPL      |L1.972|
0003b8  2313              MOVS     r3,#0x13              ;525
0003ba  2208              MOVS     r2,#8                 ;525
0003bc  2105              MOVS     r1,#5                 ;525
0003be  a0d6              ADR      r0,|L1.1816|
0003c0  f7fffffe          BL       snmp_trap_send
0003c4  8828              LDRH     r0,[r5,#0]            ;526  ; snmp_bat_flag_puts
0003c6  f4206000          BIC      r0,r0,#0x800          ;526
0003ca  8028              STRH     r0,[r5,#0]            ;526
                  |L1.972|
0003cc  7930              LDRB     r0,[r6,#4]            ;530  ; vz2_error
0003ce  b190              CBZ      r0,|L1.1014|
0003d0  8820              LDRH     r0,[r4,#0]            ;532  ; snmp_bat_flag
0003d2  f4405080          ORR      r0,r0,#0x1000         ;532
0003d6  8020              STRH     r0,[r4,#0]            ;532
0003d8  8828              LDRH     r0,[r5,#0]            ;533  ; snmp_bat_flag_puts
0003da  04c0              LSLS     r0,r0,#19             ;533
0003dc  f53fae2b          BMI      |L1.54|
0003e0  2314              MOVS     r3,#0x14              ;535
0003e2  2208              MOVS     r2,#8                 ;535
0003e4  2105              MOVS     r1,#5                 ;535
0003e6  a0d4              ADR      r0,|L1.1848|
0003e8  f7fffffe          BL       snmp_trap_send
0003ec  8828              LDRH     r0,[r5,#0]            ;536  ; snmp_bat_flag_puts
0003ee  f4405080          ORR      r0,r0,#0x1000         ;536
0003f2  8028              STRH     r0,[r5,#0]            ;536
                  |L1.1012|
0003f4  e61f              B        |L1.54|
                  |L1.1014|
0003f6  e1b1              B        |L1.1884|
                  |L1.1016|
                          DCD      ||area_number.25||
                  |L1.1020|
                          DCD      snmp_bat_status
                  |L1.1024|
                          DCD      USIGN
                  |L1.1028|
                          DCD      bat
                  |L1.1032|
                          DCD      IKB
                  |L1.1036|
                          DCD      snmp_bat_flag
                  |L1.1040|
                          DCD      snmp_bat_flag_puts
                  |L1.1044|
000414  42415420          DCB      "BAT #1 Alarm, battery is low",0
000418  23312041
00041c  6c61726d
000420  2c206261
000424  74746572
000428  79206973
00042c  206c6f77
000430  00      
000431  00                DCB      0
000432  00                DCB      0
000433  00                DCB      0
                  |L1.1076|
000434  42415420          DCB      "BAT #1 Alarm clear, battery is not low",0
000438  23312041
00043c  6c61726d
000440  20636c65
000444  61722c20
000448  62617474
00044c  65727920
000450  6973206e
000454  6f74206c
000458  6f7700  
00045b  00                DCB      0
                  |L1.1116|
00045c  42415420          DCB      "BAT #1 Warning, high battery temperature",0
000460  23312057
000464  61726e69
000468  6e672c20
00046c  68696768
000470  20626174
000474  74657279
000478  2074656d
00047c  70657261
000480  74757265
000484  00      
000485  00                DCB      0
000486  00                DCB      0
000487  00                DCB      0
                  |L1.1160|
000488  42415420          DCB      "BAT #1 Warning clear, battery temperature is normal",0
00048c  23312057
000490  61726e69
000494  6e672063
000498  6c656172
00049c  2c206261
0004a0  74746572
0004a4  79207465
0004a8  6d706572
0004ac  61747572
0004b0  65206973
0004b4  206e6f72
0004b8  6d616c00
                  |L1.1212|
0004bc  42415420          DCB      "BAT #1 Alarm, high battery temperature",0
0004c0  23312041
0004c4  6c61726d
0004c8  2c206869
0004cc  67682062
0004d0  61747465
0004d4  72792074
0004d8  656d7065
0004dc  72617475
0004e0  726500  
0004e3  00                DCB      0
                  |L1.1252|
0004e4  42415420          DCB      "BAT #1 Alarm clear, battery temperature is normal",0
0004e8  23312041
0004ec  6c61726d
0004f0  20636c65
0004f4  61722c20
0004f8  62617474
0004fc  65727920
000500  74656d70
000504  65726174
000508  75726520
00050c  6973206e
000510  6f726d61
000514  6c00    
000516  00                DCB      0
000517  00                DCB      0
                  |L1.1304|
000518  42415420          DCB      "BAT #1, capacity test stopped",0
00051c  23312c20
000520  63617061
000524  63697479
000528  20746573
00052c  74207374
000530  6f707065
000534  6400    
000536  00                DCB      0
000537  00                DCB      0
                  |L1.1336|
000538  42415420          DCB      "BAT #1,leveling charge is stopped",0
00053c  23312c6c
000540  6576656c
000544  696e6720
000548  63686172
00054c  67652069
000550  73207374
000554  6f707065
000558  6400    
00055a  00                DCB      0
00055b  00                DCB      0
                  |L1.1372|
00055c  42415420          DCB      "BAT #1,leveling charge is blocked",0
000560  23312c6c
000564  6576656c
000568  696e6720
00056c  63686172
000570  67652069
000574  7320626c
000578  6f636b65
00057c  6400    
00057e  00                DCB      0
00057f  00                DCB      0
                  |L1.1408|
000580  42415420          DCB      "BAT #1, capacity test started",0
000584  23312c20
000588  63617061
00058c  63697479
000590  20746573
000594  74207374
000598  61727465
00059c  6400    
00059e  00                DCB      0
00059f  00                DCB      0
                  |L1.1440|
0005a0  42415420          DCB      "BAT #1,leveling charge is started",0
0005a4  23312c6c
0005a8  6576656c
0005ac  696e6720
0005b0  63686172
0005b4  67652069
0005b8  73207374
0005bc  61727465
0005c0  6400    
0005c2  00                DCB      0
0005c3  00                DCB      0
                  |L1.1476|
0005c4  42415420          DCB      "BAT #1,leveling charge is unblocked",0
0005c8  23312c6c
0005cc  6576656c
0005d0  696e6720
0005d4  63686172
0005d8  67652069
0005dc  7320756e
0005e0  626c6f63
0005e4  6b656400
                  |L1.1512|
                          DCD      sp_ch_stat
                  |L1.1516|
0005ec  42415420          DCB      "BAT #1,speed charge is stopped",0
0005f0  23312c73
0005f4  70656564
0005f8  20636861
0005fc  72676520
000600  69732073
000604  746f7070
000608  656400  
00060b  00                DCB      0
                  |L1.1548|
00060c  42415420          DCB      "BAT #1,speed charge is blocked",0
000610  23312c73
000614  70656564
000618  20636861
00061c  72676520
000620  69732062
000624  6c6f636b
000628  656400  
00062b  00                DCB      0
                  |L1.1580|
00062c  42415420          DCB      "BAT #1,speed charge is started",0
000630  23312c73
000634  70656564
000638  20636861
00063c  72676520
000640  69732073
000644  74617274
000648  656400  
00064b  00                DCB      0
                  |L1.1612|
00064c  42415420          DCB      "BAT #1,speed charge is unblocked",0
000650  23312c73
000654  70656564
000658  20636861
00065c  72676520
000660  69732075
000664  6e626c6f
000668  636b6564
00066c  00      
00066d  00                DCB      0
00066e  00                DCB      0
00066f  00                DCB      0
                  |L1.1648|
000670  42415420          DCB      "BAT #1,equalising charge is on",0
000674  23312c65
000678  7175616c
00067c  6973696e
000680  67206368
000684  61726765
000688  20697320
00068c  6f6e00  
00068f  00                DCB      0
                  |L1.1680|
000690  42415420          DCB      "BAT #1,equalising charge is off",0
000694  23312c65
000698  7175616c
00069c  6973696e
0006a0  67206368
0006a4  61726765
0006a8  20697320
0006ac  6f666600
                  |L1.1712|
0006b0  42415420          DCB      "BAT #1,equalising charge is blocked",0
0006b4  23312c65
0006b8  7175616c
0006bc  6973696e
0006c0  67206368
0006c4  61726765
0006c8  20697320
0006cc  626c6f63
0006d0  6b656400
                  |L1.1748|
0006d4  42415420          DCB      "BAT #1,equalising charge is unblocked",0
0006d8  23312c65
0006dc  7175616c
0006e0  6973696e
0006e4  67206368
0006e8  61726765
0006ec  20697320
0006f0  756e626c
0006f4  6f636b65
0006f8  6400    
0006fa  00                DCB      0
0006fb  00                DCB      0
                  |L1.1788|
0006fc  42415420          DCB      "BAT #1,molding charge is on",0
000700  23312c6d
000704  6f6c6469
000708  6e672063
00070c  68617267
000710  65206973
000714  206f6e00
                  |L1.1816|
000718  42415420          DCB      "BAT #1,molding charge is off",0
00071c  23312c6d
000720  6f6c6469
000724  6e672063
000728  68617267
00072c  65206973
000730  206f6666
000734  00      
000735  00                DCB      0
000736  00                DCB      0
000737  00                DCB      0
                  |L1.1848|
000738  42415420          DCB      "BAT #1,molding charge is blocked",0
00073c  23312c6d
000740  6f6c6469
000744  6e672063
000748  68617267
00074c  65206973
000750  20626c6f
000754  636b6564
000758  00      
000759  00                DCB      0
00075a  00                DCB      0
00075b  00                DCB      0
                  |L1.1884|
00075c  8820              LDRH     r0,[r4,#0]            ;541  ; snmp_bat_flag
00075e  f4205080          BIC      r0,r0,#0x1000         ;541
000762  8020              STRH     r0,[r4,#0]            ;541
000764  8828              LDRH     r0,[r5,#0]            ;542  ; snmp_bat_flag_puts
000766  04c0              LSLS     r0,r0,#19             ;542
000768  f57fae44          BPL      |L1.1012|
00076c  2315              MOVS     r3,#0x15              ;544
00076e  2208              MOVS     r2,#8                 ;544
000770  2105              MOVS     r1,#5                 ;544
000772  a0fa              ADR      r0,|L1.2908|
000774  f7fffffe          BL       snmp_trap_send
000778  8828              LDRH     r0,[r5,#0]            ;545  ; snmp_bat_flag_puts
00077a  f4205080          BIC      r0,r0,#0x1000         ;545
00077e  8028              STRH     r0,[r5,#0]            ;545
000780  e459              B        |L1.54|
                  |L1.1922|
000782  f9bb0000          LDRSH    r0,[r11,#0]           ;557  ; USIGN
000786  f9b8104e          LDRSH    r1,[r8,#0x4e]         ;557  ; bat
00078a  eb000080          ADD      r0,r0,r0,LSL #2       ;557
00078e  ebb10f40          CMP      r1,r0,LSL #1          ;557
000792  da12              BGE      |L1.1978|
000794  8860              LDRH     r0,[r4,#2]            ;559  ; snmp_bat_flag
000796  f0400001          ORR      r0,r0,#1              ;559
00079a  8060              STRH     r0,[r4,#2]            ;559
00079c  8868              LDRH     r0,[r5,#2]            ;560  ; snmp_bat_flag_puts
00079e  07c0              LSLS     r0,r0,#31             ;560
0007a0  d11d              BNE      |L1.2014|
0007a2  2316              MOVS     r3,#0x16              ;562
0007a4  2208              MOVS     r2,#8                 ;562
0007a6  2105              MOVS     r1,#5                 ;562
0007a8  f2af3098          ADR      r0,|L1.1044|
0007ac  f7fffffe          BL       snmp_trap_send
0007b0  8868              LDRH     r0,[r5,#2]            ;563  ; snmp_bat_flag_puts
0007b2  f0400001          ORR      r0,r0,#1              ;563
0007b6  8068              STRH     r0,[r5,#2]            ;563
0007b8  e011              B        |L1.2014|
                  |L1.1978|
0007ba  8860              LDRH     r0,[r4,#2]            ;568  ; snmp_bat_flag
0007bc  f0200001          BIC      r0,r0,#1              ;568
0007c0  8060              STRH     r0,[r4,#2]            ;568
0007c2  8868              LDRH     r0,[r5,#2]            ;569  ; snmp_bat_flag_puts
0007c4  07c0              LSLS     r0,r0,#31             ;569
0007c6  d00a              BEQ      |L1.2014|
0007c8  2317              MOVS     r3,#0x17              ;571
0007ca  2208              MOVS     r2,#8                 ;571
0007cc  2105              MOVS     r1,#5                 ;571
0007ce  f2af309c          ADR      r0,|L1.1076|
0007d2  f7fffffe          BL       snmp_trap_send
0007d6  8868              LDRH     r0,[r5,#2]            ;572  ; snmp_bat_flag_puts
0007d8  f0200001          BIC      r0,r0,#1              ;572
0007dc  8068              STRH     r0,[r5,#2]            ;572
                  |L1.2014|
0007de  f898008b          LDRB     r0,[r8,#0x8b]         ;576  ; bat
0007e2  07c0              LSLS     r0,r0,#31             ;576
0007e4  d012              BEQ      |L1.2060|
0007e6  8860              LDRH     r0,[r4,#2]            ;578  ; snmp_bat_flag
0007e8  f0400002          ORR      r0,r0,#2              ;578
0007ec  8060              STRH     r0,[r4,#2]            ;578
0007ee  8828              LDRH     r0,[r5,#0]            ;579  ; snmp_bat_flag_puts
0007f0  0780              LSLS     r0,r0,#30             ;579
0007f2  d41d              BMI      |L1.2096|
0007f4  2318              MOVS     r3,#0x18              ;581
0007f6  2208              MOVS     r2,#8                 ;581
0007f8  2105              MOVS     r1,#5                 ;581
0007fa  f2af30a0          ADR      r0,|L1.1116|
0007fe  f7fffffe          BL       snmp_trap_send
000802  8868              LDRH     r0,[r5,#2]            ;582  ; snmp_bat_flag_puts
000804  f0400002          ORR      r0,r0,#2              ;582
000808  8068              STRH     r0,[r5,#2]            ;582
00080a  e011              B        |L1.2096|
                  |L1.2060|
00080c  8860              LDRH     r0,[r4,#2]            ;587  ; snmp_bat_flag
00080e  f0200002          BIC      r0,r0,#2              ;587
000812  8060              STRH     r0,[r4,#2]            ;587
000814  8868              LDRH     r0,[r5,#2]            ;588  ; snmp_bat_flag_puts
000816  0780              LSLS     r0,r0,#30             ;588
000818  d50a              BPL      |L1.2096|
00081a  2319              MOVS     r3,#0x19              ;590
00081c  2208              MOVS     r2,#8                 ;590
00081e  2105              MOVS     r1,#5                 ;590
000820  f2af309c          ADR      r0,|L1.1160|
000824  f7fffffe          BL       snmp_trap_send
000828  8868              LDRH     r0,[r5,#2]            ;591  ; snmp_bat_flag_puts
00082a  f0200002          BIC      r0,r0,#2              ;591
00082e  8068              STRH     r0,[r5,#2]            ;591
                  |L1.2096|
000830  f898008b          LDRB     r0,[r8,#0x8b]         ;595  ; bat
000834  0780              LSLS     r0,r0,#30             ;595
000836  d512              BPL      |L1.2142|
000838  8860              LDRH     r0,[r4,#2]            ;597  ; snmp_bat_flag
00083a  f0400004          ORR      r0,r0,#4              ;597
00083e  8060              STRH     r0,[r4,#2]            ;597
000840  8868              LDRH     r0,[r5,#2]            ;598  ; snmp_bat_flag_puts
000842  0740              LSLS     r0,r0,#29             ;598
000844  d41d              BMI      |L1.2178|
000846  231a              MOVS     r3,#0x1a              ;600
000848  2208              MOVS     r2,#8                 ;600
00084a  2105              MOVS     r1,#5                 ;600
00084c  f2af3094          ADR      r0,|L1.1212|
000850  f7fffffe          BL       snmp_trap_send
000854  8868              LDRH     r0,[r5,#2]            ;601  ; snmp_bat_flag_puts
000856  f0400004          ORR      r0,r0,#4              ;601
00085a  8068              STRH     r0,[r5,#2]            ;601
00085c  e011              B        |L1.2178|
                  |L1.2142|
00085e  8860              LDRH     r0,[r4,#2]            ;606  ; snmp_bat_flag
000860  f0200004          BIC      r0,r0,#4              ;606
000864  8060              STRH     r0,[r4,#2]            ;606
000866  8868              LDRH     r0,[r5,#2]            ;607  ; snmp_bat_flag_puts
000868  0740              LSLS     r0,r0,#29             ;607
00086a  d50a              BPL      |L1.2178|
00086c  231b              MOVS     r3,#0x1b              ;609
00086e  2208              MOVS     r2,#8                 ;609
000870  2105              MOVS     r1,#5                 ;609
000872  f2af3090          ADR      r0,|L1.1252|
000876  f7fffffe          BL       snmp_trap_send
00087a  8868              LDRH     r0,[r5,#2]            ;610  ; snmp_bat_flag_puts
00087c  f0200004          BIC      r0,r0,#4              ;610
000880  8068              STRH     r0,[r5,#2]            ;610
                  |L1.2178|
000882  f9b91000          LDRSH    r1,[r9,#0]            ;614  ; IKB
000886  f9b80054          LDRSH    r0,[r8,#0x54]         ;614  ; bat
00088a  424a              RSBS     r2,r1,#0              ;614
00088c  4290              CMP      r0,r2                 ;614
00088e  da04              BGE      |L1.2202|
000890  8860              LDRH     r0,[r4,#2]            ;614  ; snmp_bat_flag
000892  f0400008          ORR      r0,r0,#8              ;614
000896  8060              STRH     r0,[r4,#2]            ;614
000898  e005              B        |L1.2214|
                  |L1.2202|
00089a  4288              CMP      r0,r1                 ;615
00089c  dd03              BLE      |L1.2214|
00089e  8860              LDRH     r0,[r4,#2]            ;615  ; snmp_bat_flag
0008a0  f0200008          BIC      r0,r0,#8              ;615
0008a4  8060              STRH     r0,[r4,#2]            ;615
                  |L1.2214|
0008a6  f8960023          LDRB     r0,[r6,#0x23]         ;617  ; spc_stat
0008aa  2801              CMP      r0,#1                 ;617
0008ac  d102              BNE      |L1.2228|
0008ae  f8960024          LDRB     r0,[r6,#0x24]         ;617  ; spc_bat
0008b2  b3e0              CBZ      r0,|L1.2350|
                  |L1.2228|
0008b4  8860              LDRH     r0,[r4,#2]            ;628  ; snmp_bat_flag
0008b6  f0200010          BIC      r0,r0,#0x10           ;628
0008ba  8060              STRH     r0,[r4,#2]            ;628
0008bc  8868              LDRH     r0,[r5,#2]            ;629  ; snmp_bat_flag_puts
0008be  06c0              LSLS     r0,r0,#27             ;629
0008c0  d50a              BPL      |L1.2264|
0008c2  231d              MOVS     r3,#0x1d              ;631
0008c4  2208              MOVS     r2,#8                 ;631
0008c6  2105              MOVS     r1,#5                 ;631
0008c8  f2af30b4          ADR      r0,|L1.1304|
0008cc  f7fffffe          BL       snmp_trap_send
0008d0  8868              LDRH     r0,[r5,#2]            ;632  ; snmp_bat_flag_puts
0008d2  f0200010          BIC      r0,r0,#0x10           ;632
0008d6  8068              STRH     r0,[r5,#2]            ;632
                  |L1.2264|
0008d8  f8960023          LDRB     r0,[r6,#0x23]         ;636  ; spc_stat
0008dc  2802              CMP      r0,#2                 ;636
0008de  d03a              BEQ      |L1.2390|
0008e0  8860              LDRH     r0,[r4,#2]            ;647  ; snmp_bat_flag
0008e2  f0200020          BIC      r0,r0,#0x20           ;647
0008e6  8060              STRH     r0,[r4,#2]            ;647
0008e8  8868              LDRH     r0,[r5,#2]            ;648  ; snmp_bat_flag_puts
0008ea  0680              LSLS     r0,r0,#26             ;648
0008ec  d50a              BPL      |L1.2308|
0008ee  231f              MOVS     r3,#0x1f              ;650
0008f0  2208              MOVS     r2,#8                 ;650
0008f2  2105              MOVS     r1,#5                 ;650
0008f4  f2af30c0          ADR      r0,|L1.1336|
0008f8  f7fffffe          BL       snmp_trap_send
0008fc  8868              LDRH     r0,[r5,#2]            ;651  ; snmp_bat_flag_puts
0008fe  f0200020          BIC      r0,r0,#0x20           ;651
000902  8068              STRH     r0,[r5,#2]            ;651
                  |L1.2308|
000904  7870              LDRB     r0,[r6,#1]            ;655  ; vz_error
000906  b3c8              CBZ      r0,|L1.2428|
000908  8860              LDRH     r0,[r4,#2]            ;657  ; snmp_bat_flag
00090a  f0400040          ORR      r0,r0,#0x40           ;657
00090e  8060              STRH     r0,[r4,#2]            ;657
000910  8868              LDRH     r0,[r5,#2]            ;658  ; snmp_bat_flag_puts
000912  0640              LSLS     r0,r0,#25             ;658
000914  d445              BMI      |L1.2466|
000916  2320              MOVS     r3,#0x20              ;660
000918  2208              MOVS     r2,#8                 ;660
00091a  2105              MOVS     r1,#5                 ;660
00091c  f2af30c4          ADR      r0,|L1.1372|
000920  f7fffffe          BL       snmp_trap_send
000924  8868              LDRH     r0,[r5,#2]            ;661  ; snmp_bat_flag_puts
000926  f0400040          ORR      r0,r0,#0x40           ;661
00092a  8068              STRH     r0,[r5,#2]            ;661
00092c  e039              B        |L1.2466|
                  |L1.2350|
00092e  e7ff              B        |L1.2352|
                  |L1.2352|
000930  8860              LDRH     r0,[r4,#2]            ;619  ; snmp_bat_flag
000932  f0400010          ORR      r0,r0,#0x10           ;619
000936  8060              STRH     r0,[r4,#2]            ;619
000938  8868              LDRH     r0,[r5,#2]            ;620  ; snmp_bat_flag_puts
00093a  06c0              LSLS     r0,r0,#27             ;620
00093c  d4cc              BMI      |L1.2264|
00093e  231c              MOVS     r3,#0x1c              ;622
000940  2208              MOVS     r2,#8                 ;622
000942  2105              MOVS     r1,#5                 ;622
000944  f2af30c8          ADR      r0,|L1.1408|
000948  f7fffffe          BL       snmp_trap_send
00094c  8868              LDRH     r0,[r5,#2]            ;623  ; snmp_bat_flag_puts
00094e  f0400010          ORR      r0,r0,#0x10           ;623
000952  8068              STRH     r0,[r5,#2]            ;623
000954  e7c0              B        |L1.2264|
                  |L1.2390|
000956  8860              LDRH     r0,[r4,#2]            ;638  ; snmp_bat_flag
000958  f0400020          ORR      r0,r0,#0x20           ;638
00095c  8060              STRH     r0,[r4,#2]            ;638
00095e  8868              LDRH     r0,[r5,#2]            ;639  ; snmp_bat_flag_puts
000960  0680              LSLS     r0,r0,#26             ;639
000962  d4cf              BMI      |L1.2308|
000964  231e              MOVS     r3,#0x1e              ;641
000966  2208              MOVS     r2,#8                 ;641
000968  2105              MOVS     r1,#5                 ;641
00096a  f2af30cc          ADR      r0,|L1.1440|
00096e  f7fffffe          BL       snmp_trap_send
000972  8868              LDRH     r0,[r5,#2]            ;642  ; snmp_bat_flag_puts
000974  f0400020          ORR      r0,r0,#0x20           ;642
000978  8068              STRH     r0,[r5,#2]            ;642
00097a  e7c3              B        |L1.2308|
                  |L1.2428|
00097c  e7ff              B        |L1.2430|
                  |L1.2430|
00097e  8860              LDRH     r0,[r4,#2]            ;666  ; snmp_bat_flag
000980  f0200040          BIC      r0,r0,#0x40           ;666
000984  8060              STRH     r0,[r4,#2]            ;666
000986  8868              LDRH     r0,[r5,#2]            ;667  ; snmp_bat_flag_puts
000988  0640              LSLS     r0,r0,#25             ;667
00098a  d50a              BPL      |L1.2466|
00098c  2321              MOVS     r3,#0x21              ;669
00098e  2208              MOVS     r2,#8                 ;669
000990  2105              MOVS     r1,#5                 ;669
000992  f2af30d0          ADR      r0,|L1.1476|
000996  f7fffffe          BL       snmp_trap_send
00099a  8868              LDRH     r0,[r5,#2]            ;670  ; snmp_bat_flag_puts
00099c  f0200040          BIC      r0,r0,#0x40           ;670
0009a0  8068              STRH     r0,[r5,#2]            ;670
                  |L1.2466|
0009a2  4877              LDR      r0,|L1.2944|
0009a4  7800              LDRB     r0,[r0,#0]            ;674  ; sp_ch_stat
0009a6  2802              CMP      r0,#2                 ;674
0009a8  d026              BEQ      |L1.2552|
0009aa  8860              LDRH     r0,[r4,#2]            ;685  ; snmp_bat_flag
0009ac  f0200080          BIC      r0,r0,#0x80           ;685
0009b0  8060              STRH     r0,[r4,#2]            ;685
0009b2  8868              LDRH     r0,[r5,#2]            ;686  ; snmp_bat_flag_puts
0009b4  0600              LSLS     r0,r0,#24             ;686
0009b6  d50a              BPL      |L1.2510|
0009b8  2323              MOVS     r3,#0x23              ;688
0009ba  2208              MOVS     r2,#8                 ;688
0009bc  2105              MOVS     r1,#5                 ;688
0009be  f2af30d4          ADR      r0,|L1.1516|
0009c2  f7fffffe          BL       snmp_trap_send
0009c6  8868              LDRH     r0,[r5,#2]            ;689  ; snmp_bat_flag_puts
0009c8  f0200080          BIC      r0,r0,#0x80           ;689
0009cc  8068              STRH     r0,[r5,#2]            ;689
                  |L1.2510|
0009ce  78b0              LDRB     r0,[r6,#2]            ;693  ; sp_ch_error
0009d0  b328              CBZ      r0,|L1.2590|
0009d2  8860              LDRH     r0,[r4,#2]            ;695  ; snmp_bat_flag
0009d4  f4407080          ORR      r0,r0,#0x100          ;695
0009d8  8060              STRH     r0,[r4,#2]            ;695
0009da  8868              LDRH     r0,[r5,#2]            ;696  ; snmp_bat_flag_puts
0009dc  05c0              LSLS     r0,r0,#23             ;696
0009de  d430              BMI      |L1.2626|
0009e0  2324              MOVS     r3,#0x24              ;698
0009e2  2208              MOVS     r2,#8                 ;698
0009e4  2105              MOVS     r1,#5                 ;698
0009e6  f2af30dc          ADR      r0,|L1.1548|
0009ea  f7fffffe          BL       snmp_trap_send
0009ee  8868              LDRH     r0,[r5,#2]            ;699  ; snmp_bat_flag_puts
0009f0  f4407080          ORR      r0,r0,#0x100          ;699
0009f4  8068              STRH     r0,[r5,#2]            ;699
0009f6  e024              B        |L1.2626|
                  |L1.2552|
0009f8  8860              LDRH     r0,[r4,#2]            ;676  ; snmp_bat_flag
0009fa  f0400080          ORR      r0,r0,#0x80           ;676
0009fe  8060              STRH     r0,[r4,#2]            ;676
000a00  8868              LDRH     r0,[r5,#2]            ;677  ; snmp_bat_flag_puts
000a02  0600              LSLS     r0,r0,#24             ;677
000a04  d4e3              BMI      |L1.2510|
000a06  2322              MOVS     r3,#0x22              ;679
000a08  2208              MOVS     r2,#8                 ;679
000a0a  2105              MOVS     r1,#5                 ;679
000a0c  f2af30e4          ADR      r0,|L1.1580|
000a10  f7fffffe          BL       snmp_trap_send
000a14  8868              LDRH     r0,[r5,#2]            ;680  ; snmp_bat_flag_puts
000a16  f0400080          ORR      r0,r0,#0x80           ;680
000a1a  8068              STRH     r0,[r5,#2]            ;680
000a1c  e7d7              B        |L1.2510|
                  |L1.2590|
000a1e  8860              LDRH     r0,[r4,#2]            ;704  ; snmp_bat_flag
000a20  f4207080          BIC      r0,r0,#0x100          ;704
000a24  8060              STRH     r0,[r4,#2]            ;704
000a26  8868              LDRH     r0,[r5,#2]            ;705  ; snmp_bat_flag_puts
000a28  05c0              LSLS     r0,r0,#23             ;705
000a2a  d50a              BPL      |L1.2626|
000a2c  2325              MOVS     r3,#0x25              ;707
000a2e  2208              MOVS     r2,#8                 ;707
000a30  2105              MOVS     r1,#5                 ;707
000a32  f2af30e8          ADR      r0,|L1.1612|
000a36  f7fffffe          BL       snmp_trap_send
000a3a  8868              LDRH     r0,[r5,#2]            ;708  ; snmp_bat_flag_puts
000a3c  f4207080          BIC      r0,r0,#0x100          ;708
000a40  8068              STRH     r0,[r5,#2]            ;708
                  |L1.2626|
000a42  7970              LDRB     r0,[r6,#5]            ;712  ; vz1_stat
000a44  b190              CBZ      r0,|L1.2668|
000a46  8860              LDRH     r0,[r4,#2]            ;714  ; snmp_bat_flag
000a48  f4407000          ORR      r0,r0,#0x200          ;714
000a4c  8060              STRH     r0,[r4,#2]            ;714
000a4e  8868              LDRH     r0,[r5,#2]            ;715  ; snmp_bat_flag_puts
000a50  0580              LSLS     r0,r0,#22             ;715
000a52  d41d              BMI      |L1.2704|
000a54  2326              MOVS     r3,#0x26              ;717
000a56  2208              MOVS     r2,#8                 ;717
000a58  2105              MOVS     r1,#5                 ;717
000a5a  f2af30ec          ADR      r0,|L1.1648|
000a5e  f7fffffe          BL       snmp_trap_send
000a62  8868              LDRH     r0,[r5,#2]            ;718  ; snmp_bat_flag_puts
000a64  f4407000          ORR      r0,r0,#0x200          ;718
000a68  8068              STRH     r0,[r5,#2]            ;718
000a6a  e011              B        |L1.2704|
                  |L1.2668|
000a6c  8860              LDRH     r0,[r4,#2]            ;723  ; snmp_bat_flag
000a6e  f4207000          BIC      r0,r0,#0x200          ;723
000a72  8060              STRH     r0,[r4,#2]            ;723
000a74  8868              LDRH     r0,[r5,#2]            ;724  ; snmp_bat_flag_puts
000a76  0580              LSLS     r0,r0,#22             ;724
000a78  d50a              BPL      |L1.2704|
000a7a  2327              MOVS     r3,#0x27              ;726
000a7c  2208              MOVS     r2,#8                 ;726
000a7e  2105              MOVS     r1,#5                 ;726
000a80  f2af30f4          ADR      r0,|L1.1680|
000a84  f7fffffe          BL       snmp_trap_send
000a88  8868              LDRH     r0,[r5,#2]            ;727  ; snmp_bat_flag_puts
000a8a  f4207000          BIC      r0,r0,#0x200          ;727
000a8e  8068              STRH     r0,[r5,#2]            ;727
                  |L1.2704|
000a90  78f0              LDRB     r0,[r6,#3]            ;731  ; vz1_error
000a92  b190              CBZ      r0,|L1.2746|
000a94  8860              LDRH     r0,[r4,#2]            ;733  ; snmp_bat_flag
000a96  f4406080          ORR      r0,r0,#0x400          ;733
000a9a  8060              STRH     r0,[r4,#2]            ;733
000a9c  8868              LDRH     r0,[r5,#2]            ;734  ; snmp_bat_flag_puts
000a9e  0540              LSLS     r0,r0,#21             ;734
000aa0  d41d              BMI      |L1.2782|
000aa2  2328              MOVS     r3,#0x28              ;736
000aa4  2208              MOVS     r2,#8                 ;736
000aa6  2105              MOVS     r1,#5                 ;736
000aa8  f2af30fc          ADR      r0,|L1.1712|
000aac  f7fffffe          BL       snmp_trap_send
000ab0  8868              LDRH     r0,[r5,#2]            ;737  ; snmp_bat_flag_puts
000ab2  f4406080          ORR      r0,r0,#0x400          ;737
000ab6  8068              STRH     r0,[r5,#2]            ;737
000ab8  e011              B        |L1.2782|
                  |L1.2746|
000aba  8860              LDRH     r0,[r4,#2]            ;742  ; snmp_bat_flag
000abc  f4206080          BIC      r0,r0,#0x400          ;742
000ac0  8060              STRH     r0,[r4,#2]            ;742
000ac2  8868              LDRH     r0,[r5,#2]            ;743  ; snmp_bat_flag_puts
000ac4  0540              LSLS     r0,r0,#21             ;743
000ac6  d50a              BPL      |L1.2782|
000ac8  2329              MOVS     r3,#0x29              ;745
000aca  2208              MOVS     r2,#8                 ;745
000acc  2105              MOVS     r1,#5                 ;745
000ace  f2af30fc          ADR      r0,|L1.1748|
000ad2  f7fffffe          BL       snmp_trap_send
000ad6  8868              LDRH     r0,[r5,#2]            ;746  ; snmp_bat_flag_puts
000ad8  f4206080          BIC      r0,r0,#0x400          ;746
000adc  8068              STRH     r0,[r5,#2]            ;746
                  |L1.2782|
000ade  79f0              LDRB     r0,[r6,#7]            ;750  ; vz2_stat
000ae0  b190              CBZ      r0,|L1.2824|
000ae2  8860              LDRH     r0,[r4,#2]            ;752  ; snmp_bat_flag
000ae4  f4406000          ORR      r0,r0,#0x800          ;752
000ae8  8060              STRH     r0,[r4,#2]            ;752
000aea  8868              LDRH     r0,[r5,#2]            ;753  ; snmp_bat_flag_puts
000aec  0500              LSLS     r0,r0,#20             ;753
000aee  d41d              BMI      |L1.2860|
000af0  232a              MOVS     r3,#0x2a              ;755
000af2  2208              MOVS     r2,#8                 ;755
000af4  2105              MOVS     r1,#5                 ;755
000af6  f2af30fc          ADR      r0,|L1.1788|
000afa  f7fffffe          BL       snmp_trap_send
000afe  8868              LDRH     r0,[r5,#2]            ;756  ; snmp_bat_flag_puts
000b00  f4406000          ORR      r0,r0,#0x800          ;756
000b04  8068              STRH     r0,[r5,#2]            ;756
000b06  e011              B        |L1.2860|
                  |L1.2824|
000b08  8860              LDRH     r0,[r4,#2]            ;761  ; snmp_bat_flag
000b0a  f4206000          BIC      r0,r0,#0x800          ;761
000b0e  8060              STRH     r0,[r4,#2]            ;761
000b10  8868              LDRH     r0,[r5,#2]            ;762  ; snmp_bat_flag_puts
000b12  0500              LSLS     r0,r0,#20             ;762
000b14  d50a              BPL      |L1.2860|
000b16  232b              MOVS     r3,#0x2b              ;764
000b18  2208              MOVS     r2,#8                 ;764
000b1a  2105              MOVS     r1,#5                 ;764
000b1c  f2af4008          ADR      r0,|L1.1816|
000b20  f7fffffe          BL       snmp_trap_send
000b24  8868              LDRH     r0,[r5,#2]            ;765  ; snmp_bat_flag_puts
000b26  f4206000          BIC      r0,r0,#0x800          ;765
000b2a  8068              STRH     r0,[r5,#2]            ;765
                  |L1.2860|
000b2c  7930              LDRB     r0,[r6,#4]            ;769  ; vz2_error
000b2e  b1a0              CBZ      r0,|L1.2906|
000b30  8860              LDRH     r0,[r4,#2]            ;771  ; snmp_bat_flag
000b32  f4405080          ORR      r0,r0,#0x1000         ;771
000b36  8060              STRH     r0,[r4,#2]            ;771
000b38  8868              LDRH     r0,[r5,#2]            ;772  ; snmp_bat_flag_puts
000b3a  04c0              LSLS     r0,r0,#19             ;772
000b3c  f53faa81          BMI      |L1.66|
000b40  232c              MOVS     r3,#0x2c              ;774
000b42  2208              MOVS     r2,#8                 ;774
000b44  2105              MOVS     r1,#5                 ;774
000b46  f2af4010          ADR      r0,|L1.1848|
000b4a  f7fffffe          BL       snmp_trap_send
000b4e  8868              LDRH     r0,[r5,#2]            ;775  ; snmp_bat_flag_puts
000b50  f4405080          ORR      r0,r0,#0x1000         ;775
000b54  8068              STRH     r0,[r5,#2]            ;775
                  |L1.2902|
000b56  e8bd9ff0          POP      {r4-r12,pc}
                  |L1.2906|
000b5a  e013              B        |L1.2948|
                  |L1.2908|
000b5c  42415420          DCB      "BAT #1,molding charge is unblocked",0
000b60  23312c6d
000b64  6f6c6469
000b68  6e672063
000b6c  68617267
000b70  65206973
000b74  20756e62
000b78  6c6f636b
000b7c  656400  
000b7f  00                DCB      0
                  |L1.2944|
                          DCD      sp_ch_stat
                  |L1.2948|
000b84  8860              LDRH     r0,[r4,#2]            ;780  ; snmp_bat_flag
000b86  f4205080          BIC      r0,r0,#0x1000         ;780
000b8a  8060              STRH     r0,[r4,#2]            ;780
000b8c  8868              LDRH     r0,[r5,#2]            ;781  ; snmp_bat_flag_puts
000b8e  04c0              LSLS     r0,r0,#19             ;781
000b90  d5e1              BPL      |L1.2902|
000b92  232d              MOVS     r3,#0x2d              ;783
000b94  2208              MOVS     r2,#8                 ;783
000b96  2105              MOVS     r1,#5                 ;783
000b98  f2af0040          ADR      r0,|L1.2908|
000b9c  f7fffffe          BL       snmp_trap_send
000ba0  8868              LDRH     r0,[r5,#2]            ;784  ; snmp_bat_flag_puts
000ba2  f4205080          BIC      r0,r0,#0x1000         ;784
000ba6  8068              STRH     r0,[r5,#2]            ;784
000ba8  e7d5              B        |L1.2902|
;;;917    
                          ENDP

                  ke_start PROC
;;;920    //-----------------------------------------------
;;;921    void ke_start(char in)
000baa  e92d41fc          PUSH     {r2-r8,lr}
;;;922    {          
000bae  4606              MOV      r6,r0
;;;923    ke_start_stat=(enum_ke_start_stat)0;		 
000bb0  f04f0400          MOV      r4,#0
000bb4  4dff              LDR      r5,|L1.4020|
;;;924    /*
;;;925    if(spc_stat==spcVZ)ke_start_stat=kssNOT_VZ;
;;;926    #ifndef UKU_220_IPS_TERMOKOMPENSAT
;;;927    else if(BAT_IS_ON[in]!=bisON)ke_start_stat=kssNOT_BAT;
;;;928    #endif
;;;929    else if(bat[in]._av&(1<<0))ke_start_stat=kssNOT_BAT_AV;
;;;930    else if(bat[in]._temper_stat&(1<<1))ke_start_stat=kssNOT_BAT_AV_T;
;;;931    else if(bat[in]._av&(1<<1))ke_start_stat=kssNOT_BAT_AV_ASS;
;;;932    else if(bat[in]._Ib>IKB)ke_start_stat=kssNOT_BAT_ZAR;
;;;933    else if(bat[in]._Ib<-IKB)ke_start_stat=kssNOT_BAT_RAZR;
;;;934    else if((spc_stat==spcKE)&&(spc_bat==0))ke_start_stat=kssNOT_KE1;
;;;935    else if((spc_stat==spcKE)&&(spc_bat==1))ke_start_stat=kssNOT_KE2;
;;;936    else */
;;;937    	{
;;;938    
;;;939    	ke_start_stat=kssYES;
000bb6  f04f0064          MOV      r0,#0x64
000bba  f105050a          ADD      r5,r5,#0xa
000bbe  7768              STRB     r0,[r5,#0x1d]
;;;940    
;;;941    	spc_stat=spcKE;
000bc0  f04f0701          MOV      r7,#1
000bc4  766f              STRB     r7,[r5,#0x19]
;;;942    	__ee_spc_stat=spcKE;
000bc6  f8a57064          STRH     r7,[r5,#0x64]
;;;943    	lc640_write_int(EE_SPC_STAT,__ee_spc_stat);
000bca  4639              MOV      r1,r7
000bcc  f240209a          MOV      r0,#0x29a
000bd0  f7fffffe          BL       lc640_write_int
;;;944    	
;;;945    	spc_bat=0;
000bd4  76ac              STRB     r4,[r5,#0x1a]
;;;946    	__ee_spc_bat=0;
000bd6  f8a54066          STRH     r4,[r5,#0x66]
;;;947    	lc640_write_int(EE_SPC_BAT,__ee_spc_bat);
000bda  4621              MOV      r1,r4
000bdc  f240209e          MOV      r0,#0x29e
000be0  f7fffffe          BL       lc640_write_int
;;;948    
;;;949    	bat[0]._zar_cnt_ke=0;
000be4  f8df83d0          LDR      r8,|L1.4024|
000be8  f8c84018          STR      r4,[r8,#0x18]  ; bat
;;;950    	lc640_write_int(ADR_EE_BAT_ZAR_CNT_KE[0],0);
000bec  48f3              LDR      r0,|L1.4028|
000bee  2100              MOVS     r1,#0
000bf0  f9b00000          LDRSH    r0,[r0,#0]  ; ADR_EE_BAT_ZAR_CNT_KE
000bf4  f7fffffe          BL       lc640_write_int
;;;951    
;;;952    	bat[0]._time_min_cnt_ke=0;
000bf8  f8a8404a          STRH     r4,[r8,#0x4a]
;;;953    	lc640_write_int(EE_ZVU_BAT_MIN_CNT_KE,0);
000bfc  2100              MOVS     r1,#0
000bfe  f44f70e3          MOV      r0,#0x1c6
000c02  f7fffffe          BL       lc640_write_int
;;;954    
;;;955    	
;;;956    	spc_phase=0;
000c06  76ec              STRB     r4,[r5,#0x1b]
;;;957    	__ee_spc_phase=0;
000c08  f8a54068          STRH     r4,[r5,#0x68]
;;;958    	lc640_write_int(EE_SPC_PHASE,__ee_spc_phase);
000c0c  4621              MOV      r1,r4
000c0e  f44f7028          MOV      r0,#0x2a0
000c12  f7fffffe          BL       lc640_write_int
;;;959    
;;;960    	//ke_mem_hndl(in,lc640_read_int(ADR_EE_BAT_ZAR_CNT_KE[spc_bat]));
;;;961    
;;;962    		{					
;;;963    		signed short temp_temp;
;;;964    		signed char temp;
;;;965    		temp_temp=bat[in]._u_old[((bat_u_old_cnt+1)&0x07)]; 
000c16  eb060046          ADD      r0,r6,r6,LSL #1
000c1a  eb001006          ADD      r0,r0,r6,LSL #4
000c1e  eb080180          ADD      r1,r8,r0,LSL #2
000c22  48e7              LDR      r0,|L1.4032|
000c24  8800              LDRH     r0,[r0,#0]  ; bat_u_old_cnt
000c26  f1000001          ADD      r0,r0,#1
000c2a  f0000007          AND      r0,r0,#7
000c2e  eb010040          ADD      r0,r1,r0,LSL #1
000c32  8c00              LDRH     r0,[r0,#0x20]
000c34  9001              STR      r0,[sp,#4]
;;;966    		    
;;;967    		temp=LPC_RTC->YEAR;
000c36  4ee3              LDR      r6,|L1.4036|
000c38  8bb0              LDRH     r0,[r6,#0x1c]
000c3a  9000              STR      r0,[sp,#0]
;;;968    		gran_char(&temp,1,99);
000c3c  f04f0263          MOV      r2,#0x63
000c40  f04f0101          MOV      r1,#1
000c44  4668              MOV      r0,sp
000c46  f7fffffe          BL       gran_char
;;;969    		*((char*)(&(ke_date[0])))=temp;
000c4a  4cda              LDR      r4,|L1.4020|
000c4c  f89d0000          LDRB     r0,[sp,#0]
000c50  34fc              ADDS     r4,r4,#0xfc
000c52  7020              STRB     r0,[r4,#0]
;;;970    			
;;;971    		temp=LPC_RTC->MONTH;
000c54  7e30              LDRB     r0,[r6,#0x18]
000c56  9000              STR      r0,[sp,#0]
;;;972    		gran_char(&temp,1,12);
000c58  220c              MOVS     r2,#0xc
000c5a  2101              MOVS     r1,#1
000c5c  4668              MOV      r0,sp
000c5e  f7fffffe          BL       gran_char
;;;973    		*(((char*)(&(ke_date[0])))+1)=temp;
000c62  f89d0000          LDRB     r0,[sp,#0]
000c66  7060              STRB     r0,[r4,#1]
;;;974    		
;;;975    		temp=LPC_RTC->DOM;
000c68  7b30              LDRB     r0,[r6,#0xc]
000c6a  9000              STR      r0,[sp,#0]
;;;976    		gran_char(&temp,1,31);
000c6c  221f              MOVS     r2,#0x1f
000c6e  2101              MOVS     r1,#1
000c70  4668              MOV      r0,sp
000c72  f7fffffe          BL       gran_char
;;;977    		*(((char*)(&(ke_date[0])))+2)=temp;			
000c76  f89d0000          LDRB     r0,[sp,#0]
000c7a  70a0              STRB     r0,[r4,#2]
;;;978    				
;;;979    		*(((char*)(&(ke_date[0])))+3)=*((char*)&temp_temp);
000c7c  f89d0004          LDRB     r0,[sp,#4]
000c80  70e0              STRB     r0,[r4,#3]
;;;980    		lc640_write_long(EE_SPC_KE_DATE0,ke_date[0]);
000c82  f24020a2          MOV      r0,#0x2a2
000c86  6821              LDR      r1,[r4,#0]  ; ke_date
000c88  f7fffffe          BL       lc640_write_long
;;;981    
;;;982    		temp=LPC_RTC->HOUR;
000c8c  7a30              LDRB     r0,[r6,#8]
000c8e  9000              STR      r0,[sp,#0]
;;;983    		gran_char(&temp,0,23);
000c90  2217              MOVS     r2,#0x17
000c92  2100              MOVS     r1,#0
000c94  4668              MOV      r0,sp
000c96  f7fffffe          BL       gran_char
;;;984    		*((char*)(&(ke_date[1])))=temp;
000c9a  f89d0000          LDRB     r0,[sp,#0]
000c9e  7120              STRB     r0,[r4,#4]
;;;985                   
;;;986    		temp=LPC_RTC->MIN;
000ca0  7930              LDRB     r0,[r6,#4]
000ca2  9000              STR      r0,[sp,#0]
;;;987    		gran_char(&temp,0,59);
000ca4  223b              MOVS     r2,#0x3b
000ca6  2100              MOVS     r1,#0
000ca8  4668              MOV      r0,sp
000caa  f7fffffe          BL       gran_char
;;;988    		*(((char*)(&(ke_date[1])))+1)=temp;
000cae  f89d0000          LDRB     r0,[sp,#0]
000cb2  7160              STRB     r0,[r4,#5]
;;;989    	          
;;;990    		temp=LPC_RTC->SEC;
000cb4  7830              LDRB     r0,[r6,#0]
000cb6  9000              STR      r0,[sp,#0]
;;;991    		gran_char(&temp,0,59);
000cb8  223b              MOVS     r2,#0x3b
000cba  2100              MOVS     r1,#0
000cbc  4668              MOV      r0,sp
000cbe  f7fffffe          BL       gran_char
;;;992    		*(((char*)(&(ke_date[1])))+2)=temp;
000cc2  f89d0000          LDRB     r0,[sp,#0]
000cc6  71a0              STRB     r0,[r4,#6]
;;;993    			
;;;994    		*(((char*)(&(ke_date[1])))+3)=*(((char*)&temp_temp)+1);
000cc8  f89d0005          LDRB     r0,[sp,#5]
000ccc  71e0              STRB     r0,[r4,#7]
;;;995    		lc640_write_long(EE_SPC_KE_DATE1,ke_date[1]);
000cce  f24020a6          MOV      r0,#0x2a6
000cd2  6861              LDR      r1,[r4,#4]  ; ke_date
000cd4  f7fffffe          BL       lc640_write_long
;;;996    		}
;;;997    	bat_hndl_zvu_ke_init=1;
000cd8  702f              STRB     r7,[r5,#0]
;;;998    	}
;;;999    }
000cda  e8bd81fc          POP      {r2-r8,pc}
;;;1000   #endif
                          ENDP

                  ke_drv PROC
;;;1082   //-----------------------------------------------
;;;1083   void ke_drv(void)
000cde  e92d47f0          PUSH     {r4-r10,lr}
;;;1084   {
000ce2  b088              SUB      sp,sp,#0x20
;;;1085   static char ke_drv_cnt_10s;
;;;1086   static short i_bat_buff[6];
;;;1087   static char i_bat_buff_cnt;
;;;1088   short ke_drv_i_temp;
;;;1089   short ke_drv_i_avg;
;;;1090   char i;
;;;1091   short ke_drv_i_temp_temp;
;;;1092   const long bat_hndl_t_razr_const[7]={600L,1800L,3600L,10800L,18000L,36000L,72000L};
000ce4  f04f021c          MOV      r2,#0x1c
000ce8  49b7              LDR      r1,|L1.4040|
000cea  a801              ADD      r0,sp,#4
000cec  f7fffffe          BL       __aeabi_memcpy4
;;;1093   
;;;1094   if(bat_hndl_zvu_ke_init==1)	  //Инициализация при включении контроля емкости 
000cf0  4eb0              LDR      r6,|L1.4020|
;;;1095   	{
;;;1096   	
;;;1097   	i_bat_buff[0]=0;
000cf2  4bb6              LDR      r3,|L1.4044|
000cf4  2500              MOVS     r5,#0
000cf6  7ab0              LDRB     r0,[r6,#0xa]          ;1094  ; bat_hndl_zvu_ke_init
000cf8  2801              CMP      r0,#1                 ;1094
000cfa  d102              BNE      |L1.3330|
000cfc  801d              STRH     r5,[r3,#0]
;;;1098   	i_bat_buff[0]=0;
;;;1099   	i_bat_buff[0]=0;
;;;1100   	i_bat_buff[0]=0;
;;;1101   	i_bat_buff[0]=0;
;;;1102   	i_bat_buff[0]=0;
;;;1103   	i_bat_buff_cnt=0;
000cfe  73b5              STRB     r5,[r6,#0xe]
;;;1104   
;;;1105   	bat_hndl_zvu_ke_init=0;
000d00  72b5              STRB     r5,[r6,#0xa]
                  |L1.3330|
;;;1106   	}
;;;1107   
;;;1108   
;;;1109   
;;;1110   
;;;1111   if(spc_stat==spcKE)
000d02  f8960023          LDRB     r0,[r6,#0x23]  ; spc_stat
000d06  2801              CMP      r0,#1
000d08  d17e              BNE      |L1.3592|
;;;1112   	{
;;;1113   	ke_drv_i_temp=-Ib_ips_termokompensat/10;
000d0a  48b1              LDR      r0,|L1.4048|
000d0c  f04f070a          MOV      r7,#0xa
000d10  f9b00000          LDRSH    r0,[r0,#0]  ; Ib_ips_termokompensat
000d14  f1c00000          RSB      r0,r0,#0
000d18  fb90f0f7          SDIV     r0,r0,r7
000d1c  b200              SXTH     r0,r0
;;;1114   	if(ke_drv_i_temp<0)ke_drv_i_temp=0;
000d1e  2800              CMP      r0,#0
000d20  da01              BGE      |L1.3366|
000d22  f04f0000          MOV      r0,#0
                  |L1.3366|
;;;1115   
;;;1116   	bat_hndl_plazma[3]=ke_drv_cnt_10s;
000d26  4aab              LDR      r2,|L1.4052|
000d28  7b71              LDRB     r1,[r6,#0xd]  ; ke_drv_cnt_10s
000d2a  60d1              STR      r1,[r2,#0xc]  ; bat_hndl_plazma
;;;1117   	if(++ke_drv_cnt_10s>10)
000d2c  1c49              ADDS     r1,r1,#1
;;;1118   		{
;;;1119   		ke_drv_cnt_10s=0;
;;;1120   
;;;1121   		i_bat_buff_cnt++;
;;;1122   		if(i_bat_buff_cnt>=6)i_bat_buff_cnt=0;
;;;1123   		bat_hndl_plazma[2]=i_bat_buff_cnt;
;;;1124   		i_bat_buff[i_bat_buff_cnt]=ke_drv_i_temp;
;;;1125   		ke_drv_i_temp_temp=0;
;;;1126   		for(i=0;i<6;i++)
;;;1127   			{
;;;1128   			ke_drv_i_temp_temp+=i_bat_buff[i];
;;;1129   			}
;;;1130   		ke_drv_i_avg=ke_drv_i_temp_temp/6;
;;;1131   
;;;1132   		I_from_t_table[0]=BAT_C_POINT_1_6*6; 	//Ток при котором батарея разрядится за 1/6 часа (0.1А)
;;;1133   		I_from_t_table[1]=BAT_C_POINT_1_2*2; 	//Ток при котором батарея разрядится за 1/2 часа (0.1А)
;;;1134   		I_from_t_table[2]=BAT_C_POINT_1; 		//Ток при котором батарея разрядится за 1 час (0.1А)
;;;1135   		I_from_t_table[3]=BAT_C_POINT_3/3; 		//Ток при котором батарея разрядится за 3 часа (0.1А)
;;;1136   		I_from_t_table[4]=BAT_C_POINT_5/5; 		//Ток при котором батарея разрядится за 5 часов (0.1А)
;;;1137   		I_from_t_table[5]=BAT_C_POINT_10/10; 	//Ток при котором батарея разрядится за 10 часов (0.1А)
;;;1138   		I_from_t_table[6]=BAT_C_POINT_20/20; 	//Ток при котором батарея разрядится за 20 часов (0.1А)
;;;1139   		
;;;1140   		U_end_from_i_table[0]=BAT_U_END_1_6;	//Конечное напряжение контроля емкости при разряде за 1/6 часа
;;;1141   		U_end_from_i_table[1]=BAT_U_END_1_2;	//Конечное напряжение контроля емкости при разряде за 1/2 часа
;;;1142   		U_end_from_i_table[2]=BAT_U_END_1;		//Конечное напряжение контроля емкости при разряде за 1 час
;;;1143   		U_end_from_i_table[3]=BAT_U_END_3;		//Конечное напряжение контроля емкости при разряде за 3 часа
;;;1144   		U_end_from_i_table[4]=BAT_U_END_5;		//Конечное напряжение контроля емкости при разряде за 5 часов
;;;1145   		U_end_from_i_table[5]=BAT_U_END_10;		//Конечное напряжение контроля емкости при разряде за 10 часов
;;;1146   		U_end_from_i_table[6]=BAT_U_END_20;		//Конечное напряжение контроля емкости при разряде за 20 часов		
;;;1147   
;;;1148   		bat_hndl_plazma[1]=ke_drv_i_avg;
;;;1149   		bat_hndl_i_temp=ke_drv_i_avg;
000d2e  4ca1              LDR      r4,|L1.4020|
000d30  b2c9              UXTB     r1,r1                 ;1117
000d32  3480              ADDS     r4,r4,#0x80
000d34  7371              STRB     r1,[r6,#0xd]          ;1117
000d36  290a              CMP      r1,#0xa               ;1117
000d38  d967              BLS      |L1.3594|
000d3a  7375              STRB     r5,[r6,#0xd]          ;1119
000d3c  7bb1              LDRB     r1,[r6,#0xe]          ;1121  ; i_bat_buff_cnt
000d3e  f1010101          ADD      r1,r1,#1              ;1121
000d42  b2c9              UXTB     r1,r1                 ;1121
000d44  73b1              STRB     r1,[r6,#0xe]          ;1121
000d46  2906              CMP      r1,#6                 ;1122
000d48  d300              BCC      |L1.3404|
000d4a  73b5              STRB     r5,[r6,#0xe]          ;1122
                  |L1.3404|
000d4c  7bb1              LDRB     r1,[r6,#0xe]          ;1123  ; i_bat_buff_cnt
000d4e  6091              STR      r1,[r2,#8]            ;1123  ; bat_hndl_plazma
000d50  f8230011          STRH     r0,[r3,r1,LSL #1]     ;1124
000d54  f04f0100          MOV      r1,#0                 ;1125
000d58  4608              MOV      r0,r1                 ;1126
                  |L1.3418|
000d5a  f833c010          LDRH     r12,[r3,r0,LSL #1]    ;1128
000d5e  4461              ADD      r1,r1,r12             ;1128
000d60  b209              SXTH     r1,r1                 ;1128
000d62  f1000001          ADD      r0,r0,#1              ;1126
000d66  b2c0              UXTB     r0,r0                 ;1126
000d68  2806              CMP      r0,#6                 ;1126
000d6a  d3f6              BCC      |L1.3418|
000d6c  f04f0006          MOV      r0,#6                 ;1130
000d70  fb91f0f0          SDIV     r0,r1,r0              ;1130
000d74  b201              SXTH     r1,r0                 ;1130
000d76  4898              LDR      r0,|L1.4056|
000d78  f8df8258          LDR      r8,|L1.4052|
000d7c  8800              LDRH     r0,[r0,#0]            ;1132  ; BAT_C_POINT_1_6
000d7e  f1a8081c          SUB      r8,r8,#0x1c           ;1132
000d82  eb000040          ADD      r0,r0,r0,LSL #1       ;1132
000d86  ea4f0040          LSL      r0,r0,#1              ;1132
000d8a  f8a80000          STRH     r0,[r8,#0]            ;1132
000d8e  4893              LDR      r0,|L1.4060|
000d90  8800              LDRH     r0,[r0,#0]            ;1133  ; BAT_C_POINT_1_2
000d92  ea4f0040          LSL      r0,r0,#1              ;1133
000d96  f8a80002          STRH     r0,[r8,#2]            ;1133
000d9a  4891              LDR      r0,|L1.4064|
000d9c  8800              LDRH     r0,[r0,#0]            ;1134  ; BAT_C_POINT_1
000d9e  f8a80004          STRH     r0,[r8,#4]            ;1134
000da2  4890              LDR      r0,|L1.4068|
000da4  f04f0303          MOV      r3,#3                 ;1135
000da8  f9b00000          LDRSH    r0,[r0,#0]            ;1135  ; BAT_C_POINT_3
000dac  fb90f0f3          SDIV     r0,r0,r3              ;1135
000db0  f8a80006          STRH     r0,[r8,#6]            ;1135
000db4  488c              LDR      r0,|L1.4072|
000db6  f04f0305          MOV      r3,#5                 ;1136
000dba  f9b00000          LDRSH    r0,[r0,#0]            ;1136  ; BAT_C_POINT_5
000dbe  fb90f0f3          SDIV     r0,r0,r3              ;1136
000dc2  f8a80008          STRH     r0,[r8,#8]            ;1136
000dc6  4889              LDR      r0,|L1.4076|
000dc8  f9b00000          LDRSH    r0,[r0,#0]            ;1137  ; BAT_C_POINT_10
000dcc  fb90f0f7          SDIV     r0,r0,r7              ;1137
000dd0  f8a8000a          STRH     r0,[r8,#0xa]          ;1137
000dd4  4886              LDR      r0,|L1.4080|
000dd6  f04f0314          MOV      r3,#0x14              ;1138
000dda  f9b00000          LDRSH    r0,[r0,#0]            ;1138  ; BAT_C_POINT_20
000dde  fb90f0f3          SDIV     r0,r0,r3              ;1138
000de2  f8a8000c          STRH     r0,[r8,#0xc]          ;1138
000de6  4883              LDR      r0,|L1.4084|
000de8  f108090e          ADD      r9,r8,#0xe            ;1140
000dec  f9b07000          LDRSH    r7,[r0,#0]            ;1140  ; BAT_U_END_1_6
000df0  f8a97000          STRH     r7,[r9,#0]            ;1140
000df4  4880              LDR      r0,|L1.4088|
000df6  8800              LDRH     r0,[r0,#0]            ;1141  ; BAT_U_END_1_2
000df8  f8a90002          STRH     r0,[r9,#2]            ;1141
000dfc  487f              LDR      r0,|L1.4092|
000dfe  8800              LDRH     r0,[r0,#0]            ;1142  ; BAT_U_END_1
000e00  f8a90004          STRH     r0,[r9,#4]            ;1142
000e04  487e              LDR      r0,|L1.4096|
000e06  e001              B        |L1.3596|
                  |L1.3592|
000e08  e11e              B        |L1.4168|
                  |L1.3594|
000e0a  e061              B        |L1.3792|
                  |L1.3596|
000e0c  8800              LDRH     r0,[r0,#0]            ;1143  ; BAT_U_END_3
000e0e  f8a90006          STRH     r0,[r9,#6]            ;1143
000e12  487c              LDR      r0,|L1.4100|
000e14  8800              LDRH     r0,[r0,#0]            ;1144  ; BAT_U_END_5
000e16  f8a90008          STRH     r0,[r9,#8]            ;1144
000e1a  487b              LDR      r0,|L1.4104|
000e1c  8800              LDRH     r0,[r0,#0]            ;1145  ; BAT_U_END_10
000e1e  f8a9000a          STRH     r0,[r9,#0xa]          ;1145
000e22  487a              LDR      r0,|L1.4108|
000e24  f9b0c000          LDRSH    r12,[r0,#0]           ;1146  ; BAT_U_END_20
000e28  f8a9c00c          STRH     r12,[r9,#0xc]         ;1146
000e2c  6051              STR      r1,[r2,#4]            ;1148  ; bat_hndl_plazma
000e2e  81a1              STRH     r1,[r4,#0xc]
;;;1150   		
;;;1151   		for(i=0;i<7;i++)
000e30  f04f0000          MOV      r0,#0
                  |L1.3636|
;;;1152   			{
;;;1153   			if(bat_hndl_i_temp>=I_from_t_table[i])
000e34  f9383010          LDRSH    r3,[r8,r0,LSL #1]
000e38  428b              CMP      r3,r1
000e3a  dd04              BLE      |L1.3654|
000e3c  f1000001          ADD      r0,r0,#1              ;1151
000e40  b2c0              UXTB     r0,r0                 ;1151
000e42  2807              CMP      r0,#7                 ;1151
000e44  d3f6              BCC      |L1.3636|
                  |L1.3654|
;;;1154   				{
;;;1155   				break;
;;;1156   				}
;;;1157   			}
;;;1158   
;;;1159   		bat_hndl_plazma[0]=i;
000e46  6010              STR      r0,[r2,#0]  ; bat_hndl_plazma
000e48  f10d0a04          ADD      r10,sp,#4             ;1092
;;;1160   
;;;1161   		 if(i==0) bat_hndl_t_razr_ke=bat_hndl_t_razr_const[0];
000e4c  b1c8              CBZ      r0,|L1.3714|
;;;1162   		 else if((i>=1)&&(i<7))
000e4e  1e42              SUBS     r2,r0,#1
000e50  2a06              CMP      r2,#6
000e52  d219              BCS      |L1.3720|
;;;1163   		 	{
;;;1164   			short i1,i2;
;;;1165   			i1=I_from_t_table[i-1]-bat_hndl_i_temp;
000e54  f8383012          LDRH     r3,[r8,r2,LSL #1]
000e58  eba30101          SUB      r1,r3,r1
000e5c  b209              SXTH     r1,r1
;;;1166   			i2=I_from_t_table[i-1]-I_from_t_table[i];
000e5e  f8388010          LDRH     r8,[r8,r0,LSL #1]
000e62  eba30308          SUB      r3,r3,r8
000e66  b21b              SXTH     r3,r3
;;;1167   			bat_hndl_t_razr_ke=bat_hndl_t_razr_const[i]-bat_hndl_t_razr_const[i-1];
000e68  f85a8020          LDR      r8,[r10,r0,LSL #2]
000e6c  f85a2022          LDR      r2,[r10,r2,LSL #2]
000e70  eba80802          SUB      r8,r8,r2
;;;1168   			bat_hndl_t_razr_ke*=(long)i1;
000e74  fb08f801          MUL      r8,r8,r1
;;;1169   			bat_hndl_t_razr_ke/=(long)i2;
000e78  fb98f1f3          SDIV     r1,r8,r3
;;;1170   			bat_hndl_t_razr_ke+=bat_hndl_t_razr_const[i-1];
000e7c  4411              ADD      r1,r1,r2
000e7e  6521              STR      r1,[r4,#0x50]  ; bat_hndl_t_razr_ke
;;;1171   			}
000e80  e006              B        |L1.3728|
                  |L1.3714|
000e82  9901              LDR      r1,[sp,#4]            ;1161
000e84  6521              STR      r1,[r4,#0x50]         ;1161  ; bat_hndl_t_razr_ke
000e86  e003              B        |L1.3728|
                  |L1.3720|
;;;1172   		else if(i>=7)
000e88  2807              CMP      r0,#7
000e8a  d301              BCC      |L1.3728|
;;;1173   			{
;;;1174   			bat_hndl_t_razr_ke=bat_hndl_t_razr_const[6];
000e8c  9907              LDR      r1,[sp,#0x1c]
000e8e  6521              STR      r1,[r4,#0x50]  ; bat_hndl_t_razr_ke
                  |L1.3728|
;;;1175   			}
;;;1176   
;;;1177   		 if(i==0) bat_hndl_u_end=U_end_from_i_table[0];
000e90  b1c0              CBZ      r0,|L1.3780|
;;;1178   		 else if((i>=1)&&(i<7))
000e92  1e41              SUBS     r1,r0,#1
000e94  2906              CMP      r1,#6
000e96  d217              BCS      |L1.3784|
;;;1179   		 	{
;;;1180   			long u1,tempL;
;;;1181   
;;;1182   			tempL=(long)U_end_from_i_table[i]-(long)U_end_from_i_table[i-1];
000e98  f9393010          LDRSH    r3,[r9,r0,LSL #1]
000e9c  f9392011          LDRSH    r2,[r9,r1,LSL #1]
000ea0  eba30302          SUB      r3,r3,r2
;;;1183   			u1=bat_hndl_t_razr_ke-bat_hndl_t_razr_const[i-1];
000ea4  f85a1021          LDR      r1,[r10,r1,LSL #2]
000ea8  6d27              LDR      r7,[r4,#0x50]  ; bat_hndl_t_razr_ke
000eaa  eba70701          SUB      r7,r7,r1
;;;1184   			tempL*=u1;
000eae  fb03f307          MUL      r3,r3,r7
;;;1185   			u1=bat_hndl_t_razr_const[i]-bat_hndl_t_razr_const[i-1];
000eb2  f85a0020          LDR      r0,[r10,r0,LSL #2]
000eb6  eba00001          SUB      r0,r0,r1
;;;1186   			tempL/=u1;
000eba  fb93f0f0          SDIV     r0,r3,r0
;;;1187   			tempL+=(long)U_end_from_i_table[i-1];
000ebe  4410              ADD      r0,r0,r2
;;;1188   			bat_hndl_u_end=(short)tempL;
000ec0  81e0              STRH     r0,[r4,#0xe]
;;;1189   			}
000ec2  e005              B        |L1.3792|
                  |L1.3780|
000ec4  81e7              STRH     r7,[r4,#0xe]          ;1177
000ec6  e003              B        |L1.3792|
                  |L1.3784|
;;;1190   		else if(i>=7)
000ec8  2807              CMP      r0,#7
000eca  d301              BCC      |L1.3792|
;;;1191   			{
;;;1192   			bat_hndl_u_end=U_end_from_i_table[6];
000ecc  f8a4c00e          STRH     r12,[r4,#0xe]
                  |L1.3792|
;;;1193   			}
;;;1194   
;;;1195   		}
;;;1196   
;;;1197   
;;;1198   
;;;1199   	if(spc_phase==0)
000ed0  f8960025          LDRB     r0,[r6,#0x25]  ; spc_phase
;;;1200   		{
;;;1201   		//mess_send(MESS2BAT_HNDL,PARAM_BAT_MASK_OFF_AFTER_2SEC,(1<<(1-spc_bat)),20);
;;;1202   		mess_send(MESS2BPS_HNDL,PARAM_BPS_ALL_OFF_AFTER_2SEC,0xffff,20);
;;;1203   
;;;1204   		bat[0]._zar_cnt_ke+=abs(bat[spc_bat]._Ib);
;;;1205   	    	
;;;1206   		if(bat[0]._zar_cnt_ke>=AH_CONSTANT)
;;;1207   			{
;;;1208   			bat[0]._zar_cnt_ke-=AH_CONSTANT;
;;;1209   			lc640_write_int(ADR_EE_BAT_ZAR_CNT_KE[0],lc640_read_int(ADR_EE_BAT_ZAR_CNT_KE[0])+1);
000ed4  4f39              LDR      r7,|L1.4028|
;;;1210   			}
;;;1211   
;;;1212   		bat[0]._time_min_cnt_ke++;
;;;1213   		if(bat[0]._time_min_cnt_ke>=60)
;;;1214   			{
;;;1215   			lc640_write_int(EE_ZVU_BAT_MIN_CNT_KE,lc640_read_int(EE_ZVU_BAT_MIN_CNT_KE)+1);
000ed6  f44f78e3          MOV      r8,#0x1c6
000eda  bbe8              CBNZ     r0,|L1.3928|
000edc  2314              MOVS     r3,#0x14              ;1202
000ede  f04f32ff          MOV      r2,#0xffffffff        ;1202
000ee2  21ce              MOVS     r1,#0xce              ;1202
000ee4  20cd              MOVS     r0,#0xcd              ;1202
000ee6  f7fffffe          BL       mess_send
000eea  f8961024          LDRB     r1,[r6,#0x24]         ;1204  ; spc_bat
000eee  f8df90c8          LDR      r9,|L1.4024|
000ef2  eb010041          ADD      r0,r1,r1,LSL #1       ;1204
000ef6  eb001001          ADD      r0,r0,r1,LSL #4       ;1204
000efa  eb090080          ADD      r0,r9,r0,LSL #2       ;1204
000efe  f9b00008          LDRSH    r0,[r0,#8]            ;1204
000f02  f7fffffe          BL       abs
000f06  f8d91018          LDR      r1,[r9,#0x18]         ;1204  ; bat
000f0a  4401              ADD      r1,r1,r0              ;1204
000f0c  f8c91018          STR      r1,[r9,#0x18]         ;1204  ; bat
000f10  f64840a0          MOV      r0,#0x8ca0            ;1206
000f14  4281              CMP      r1,r0                 ;1206
000f16  db0c              BLT      |L1.3890|
000f18  eba10100          SUB      r1,r1,r0              ;1208
000f1c  f8c91018          STR      r1,[r9,#0x18]         ;1208  ; bat
000f20  8838              LDRH     r0,[r7,#0]            ;1209  ; ADR_EE_BAT_ZAR_CNT_KE
000f22  f7fffffe          BL       lc640_read_int
000f26  1c40              ADDS     r0,r0,#1              ;1209
000f28  b201              SXTH     r1,r0                 ;1209
000f2a  f9b70000          LDRSH    r0,[r7,#0]            ;1209  ; ADR_EE_BAT_ZAR_CNT_KE
000f2e  f7fffffe          BL       lc640_write_int
                  |L1.3890|
000f32  f8b9004a          LDRH     r0,[r9,#0x4a]         ;1212  ; bat
000f36  f1000001          ADD      r0,r0,#1              ;1212
000f3a  b281              UXTH     r1,r0                 ;1212
000f3c  f8a9104a          STRH     r1,[r9,#0x4a]         ;1212
000f40  293c              CMP      r1,#0x3c              ;1213
000f42  d309              BCC      |L1.3928|
000f44  4640              MOV      r0,r8
000f46  f7fffffe          BL       lc640_read_int
000f4a  1c40              ADDS     r0,r0,#1
000f4c  b201              SXTH     r1,r0
000f4e  4640              MOV      r0,r8
000f50  f7fffffe          BL       lc640_write_int
;;;1216   			bat[0]._time_min_cnt_ke=0;
000f54  f8a9504a          STRH     r5,[r9,#0x4a]
                  |L1.3928|
;;;1217   			}
;;;1218   		}
;;;1219   
;;;1220   	else if(spc_phase==1)
;;;1221   		{
;;;1222   		//mess_send(MESS2BAT_HNDL,PARAM_BAT_MASK_OFF_AFTER_2SEC,(1<<(1-spc_bat)),20);
;;;1223   		}
;;;1224   
;;;1225   	if(out_U<bat_hndl_u_end)
000f58  482d              LDR      r0,|L1.4112|
000f5a  f9b4100e          LDRSH    r1,[r4,#0xe]  ; bat_hndl_u_end
000f5e  f9b00000          LDRSH    r0,[r0,#0]  ; out_U
000f62  4288              CMP      r0,r1
000f64  da6e              BGE      |L1.4164|
;;;1226   		{
;;;1227   		cnt_end_ke++;
000f66  f8b6006a          LDRH     r0,[r6,#0x6a]  ; cnt_end_ke
000f6a  f1000001          ADD      r0,r0,#1
000f6e  b200              SXTH     r0,r0
000f70  f8a6006a          STRH     r0,[r6,#0x6a]
;;;1228   		if(cnt_end_ke>=30)
000f74  281e              CMP      r0,#0x1e
000f76  db67              BLT      |L1.4168|
;;;1229   			{
;;;1230   			
;;;1231   			if((spc_stat==spcKE)&&(spc_phase==0))
000f78  f8960023          LDRB     r0,[r6,#0x23]  ; spc_stat
000f7c  2801              CMP      r0,#1
000f7e  d155              BNE      |L1.4140|
000f80  f8960025          LDRB     r0,[r6,#0x25]  ; spc_phase
000f84  b9a8              CBNZ     r0,|L1.4018|
;;;1232   				{
;;;1233   				lc640_write_int(ADR_EE_BAT_C_REAL[0],lc640_read_int(ADR_EE_BAT_ZAR_CNT_KE[0]));
000f86  8838              LDRH     r0,[r7,#0]  ; ADR_EE_BAT_ZAR_CNT_KE
000f88  f7fffffe          BL       lc640_read_int
000f8c  b201              SXTH     r1,r0
000f8e  4821              LDR      r0,|L1.4116|
000f90  f9b00000          LDRSH    r0,[r0,#0]  ; ADR_EE_BAT_C_REAL
000f94  f7fffffe          BL       lc640_write_int
;;;1234   				ke_zvu_mem_hndl(0,lc640_read_int(ADR_EE_BAT_ZAR_CNT_KE[0]),lc640_read_int(EE_ZVU_BAT_MIN_CNT_KE));
000f98  4640              MOV      r0,r8
000f9a  f7fffffe          BL       lc640_read_int
000f9e  b284              UXTH     r4,r0
000fa0  8838              LDRH     r0,[r7,#0]  ; ADR_EE_BAT_ZAR_CNT_KE
000fa2  f7fffffe          BL       lc640_read_int
000fa6  b281              UXTH     r1,r0
000fa8  4622              MOV      r2,r4
000faa  2000              MOVS     r0,#0
000fac  f7fffffe          BL       ke_zvu_mem_hndl
;;;1235   				lc640_write_int(ADR_EE_BAT_ZAR_CNT[0],0);
000fb0  e032              B        |L1.4120|
                  |L1.4018|
000fb2  e03b              B        |L1.4140|
                  |L1.4020|
                          DCD      ||area_number.25||
                  |L1.4024|
                          DCD      bat
                  |L1.4028|
                          DCD      ADR_EE_BAT_ZAR_CNT_KE
                  |L1.4032|
                          DCD      bat_u_old_cnt
                  |L1.4036|
                          DCD      0x40024020
                  |L1.4040|
                          DCD      ||area_number.19||+0x4
                  |L1.4044|
                          DCD      ||.bss||
                  |L1.4048|
                          DCD      Ib_ips_termokompensat
                  |L1.4052|
                          DCD      ||.bss||+0x468
                  |L1.4056|
                          DCD      BAT_C_POINT_1_6
                  |L1.4060|
                          DCD      BAT_C_POINT_1_2
                  |L1.4064|
                          DCD      BAT_C_POINT_1
                  |L1.4068|
                          DCD      BAT_C_POINT_3
                  |L1.4072|
                          DCD      BAT_C_POINT_5
                  |L1.4076|
                          DCD      BAT_C_POINT_10
                  |L1.4080|
                          DCD      BAT_C_POINT_20
                  |L1.4084|
                          DCD      BAT_U_END_1_6
                  |L1.4088|
                          DCD      BAT_U_END_1_2
                  |L1.4092|
                          DCD      BAT_U_END_1
                  |L1.4096|
                          DCD      BAT_U_END_3
                  |L1.4100|
                          DCD      BAT_U_END_5
                  |L1.4104|
                          DCD      BAT_U_END_10
                  |L1.4108|
                          DCD      BAT_U_END_20
                  |L1.4112|
                          DCD      out_U
                  |L1.4116|
                          DCD      ADR_EE_BAT_C_REAL
                  |L1.4120|
001018  48ff              LDR      r0,|L1.5144|
00101a  2100              MOVS     r1,#0
00101c  f9b00000          LDRSH    r0,[r0,#0]  ; ADR_EE_BAT_ZAR_CNT
001020  f7fffffe          BL       lc640_write_int
;;;1236   				cntrl_stat=50;
001024  f04f0032          MOV      r0,#0x32
001028  8670              STRH     r0,[r6,#0x32]
;;;1237   				cntrl_stat_old=50;
00102a  86b0              STRH     r0,[r6,#0x34]
                  |L1.4140|
;;;1238   				}
;;;1239   
;;;1240   			spc_stat=spcOFF;
00102c  f8865023          STRB     r5,[r6,#0x23]
;;;1241   			__ee_spc_stat=spcOFF;
001030  f8a6506e          STRH     r5,[r6,#0x6e]
;;;1242   			lc640_write_int(EE_SPC_STAT,spcOFF);
001034  b008              ADD      sp,sp,#0x20
001036  2100              MOVS     r1,#0
001038  e8bd47f0          POP      {r4-r10,lr}
00103c  f240209a          MOV      r0,#0x29a
001040  f7ffbffe          B.W      lc640_write_int
                  |L1.4164|
;;;1243   
;;;1244   			}
;;;1245   		}
;;;1246   	else cnt_end_ke=0;
001044  f8a6506a          STRH     r5,[r6,#0x6a]
                  |L1.4168|
;;;1247   
;;;1248   	}
;;;1249   			
;;;1250   }
001048  b008              ADD      sp,sp,#0x20
00104a  e8bd87f0          POP      {r4-r10,pc}
;;;1251   #endif
                          ENDP

                  vz_start PROC
;;;1321   //-----------------------------------------------
;;;1322   char vz_start(char hour)
00104e  b570              PUSH     {r4-r6,lr}
;;;1323   {          
001050  4605              MOV      r5,r0
;;;1324   char out;
;;;1325   out=0;
001052  f04f0600          MOV      r6,#0
;;;1326   if((spc_stat==spcOFF)&&(speedChrgBlckStat!=1))
001056  4cf1              LDR      r4,|L1.5148|
001058  f8940023          LDRB     r0,[r4,#0x23]  ; spc_stat
00105c  bba0              CBNZ     r0,|L1.4296|
00105e  48f0              LDR      r0,|L1.5152|
001060  8800              LDRH     r0,[r0,#0]  ; speedChrgBlckStat
001062  2801              CMP      r0,#1
001064  d030              BEQ      |L1.4296|
;;;1327   	{
;;;1328   	spc_stat=spcVZ;
001066  f1040430          ADD      r4,r4,#0x30
00106a  f04f0102          MOV      r1,#2
00106e  f8041c0d          STRB     r1,[r4,#-0xd]
;;;1329   	__ee_spc_stat=spcVZ; 
001072  87e1              STRH     r1,[r4,#0x3e]
;;;1330   	lc640_write_int(EE_SPC_STAT,__ee_spc_stat);   
001074  f240209a          MOV      r0,#0x29a
001078  f7fffffe          BL       lc640_write_int
;;;1331   	vz_cnt_h=hour;
00107c  86e5              STRH     r5,[r4,#0x36]
;;;1332   	__ee_vz_cnt=hour*60;
00107e  ebc51005          RSB      r0,r5,r5,LSL #4
001082  ea4f0080          LSL      r0,r0,#2
001086  87a0              STRH     r0,[r4,#0x3c]
001088  f1a40430          SUB      r4,r4,#0x30
;;;1333   	if(hour==0)__ee_vz_cnt=30;
00108c  b91d              CBNZ     r5,|L1.4246|
00108e  f04f001e          MOV      r0,#0x1e
001092  f8a4006c          STRH     r0,[r4,#0x6c]
                  |L1.4246|
;;;1334   	lc640_write_int(EE_VZ_CNT,__ee_vz_cnt);
001096  f1040462          ADD      r4,r4,#0x62
00109a  f44f7027          MOV      r0,#0x29c
00109e  f9b4100a          LDRSH    r1,[r4,#0xa]  ; __ee_vz_cnt
0010a2  f7fffffe          BL       lc640_write_int
;;;1335   	lc640_write_int(EE_SPC_VZ_LENGT,__ee_vz_cnt);	
0010a6  f9b4100a          LDRSH    r1,[r4,#0xa]  ; __ee_vz_cnt
0010aa  f44f702a          MOV      r0,#0x2a8
0010ae  f7fffffe          BL       lc640_write_int
;;;1336   	vz_cnt_h_=0;
0010b2  f04f0000          MOV      r0,#0
0010b6  80e0              STRH     r0,[r4,#6]
;;;1337   	vz_cnt_s=0;
0010b8  8020              STRH     r0,[r4,#0]
;;;1338   	vz_cnt_s_=0;
0010ba  8060              STRH     r0,[r4,#2]
;;;1339   	out=1;
0010bc  f04f0601          MOV      r6,#1
;;;1340   	vz_mem_hndl(1);
0010c0  f04f0001          MOV      r0,#1
0010c4  f7fffffe          BL       vz_mem_hndl
                  |L1.4296|
;;;1341   	}
;;;1342   //else if((spc_stat==spc_KE1p1)||(spc_stat==spc_KE1p2)) out=22; 
;;;1343   //else if((spc_stat==spc_KE2p1)||(spc_stat==spc_KE2p2)) out=33;
;;;1344   //plazma=out;	
;;;1345   return out;
0010c8  4630              MOV      r0,r6
;;;1346   }
0010ca  bd70              POP      {r4-r6,pc}
;;;1347   
                          ENDP

                  vz_stop PROC
;;;1348   //-----------------------------------------------
;;;1349   void vz_stop(void)
0010cc  b510              PUSH     {r4,lr}
;;;1350   {
;;;1351   if(spc_stat==spcVZ)
0010ce  4cd3              LDR      r4,|L1.5148|
0010d0  f8940023          LDRB     r0,[r4,#0x23]  ; spc_stat
0010d4  2802              CMP      r0,#2
0010d6  d113              BNE      |L1.4352|
;;;1352        {
;;;1353   vz_mem_hndl(vz_cnt_h);          
0010d8  f1040430          ADD      r4,r4,#0x30
0010dc  8ee0              LDRH     r0,[r4,#0x36]  ; vz_cnt_h
0010de  f7fffffe          BL       vz_mem_hndl
;;;1354   vz_cnt_s=0;
0010e2  f04f0000          MOV      r0,#0
0010e6  8660              STRH     r0,[r4,#0x32]
;;;1355   vz_cnt_h=0;
0010e8  86e0              STRH     r0,[r4,#0x36]
;;;1356   vz_cnt_h_=0;
0010ea  8720              STRH     r0,[r4,#0x38]
;;;1357   spc_stat=spcOFF;
0010ec  f8040c0d          STRB     r0,[r4,#-0xd]
;;;1358   
;;;1359   		__ee_spc_stat=spcOFF;
0010f0  87e0              STRH     r0,[r4,#0x3e]
;;;1360   		lc640_write_int(EE_SPC_STAT,spcOFF);
0010f2  4601              MOV      r1,r0
0010f4  e8bd4010          POP      {r4,lr}
0010f8  f240209a          MOV      r0,#0x29a
0010fc  f7ffbffe          B.W      lc640_write_int
                  |L1.4352|
;;;1361        }
;;;1362   
;;;1363   }
001100  bd10              POP      {r4,pc}
;;;1364   
                          ENDP

                  amper_chas_cnt_drv PROC
;;;1366   //-----------------------------------------------
;;;1367   void amper_chas_cnt_drv(void)
001102  b510              PUSH     {r4,lr}
;;;1368   {
;;;1369   
;;;1370   amper_chas_cnt_drv_summ+=(long)Ib_ips_termokompensat;
001104  4ac5              LDR      r2,|L1.5148|
001106  49c7              LDR      r1,|L1.5156|
001108  3280              ADDS     r2,r2,#0x80
00110a  f9b11000          LDRSH    r1,[r1,#0]  ; Ib_ips_termokompensat
00110e  6e10              LDR      r0,[r2,#0x60]  ; amper_chas_cnt_drv_summ
001110  4401              ADD      r1,r1,r0
001112  6611              STR      r1,[r2,#0x60]  ; amper_chas_cnt_drv_summ
;;;1371   
;;;1372   if(amper_chas_cnt_drv_summ>=36000L)
001114  f64843a0          MOV      r3,#0x8ca0
;;;1373   	{
;;;1374   	amper_chas_cnt_drv_summ-=36000L;
;;;1375   	lc640_write_int(EE_AMPER_CHAS_CNT,lc640_read_int(EE_AMPER_CHAS_CNT)+1);
001118  f44f74e4          MOV      r4,#0x1c8
00111c  4299              CMP      r1,r3                 ;1372
00111e  db0c              BLT      |L1.4410|
001120  eba10103          SUB      r1,r1,r3              ;1374
001124  6611              STR      r1,[r2,#0x60]         ;1374  ; amper_chas_cnt_drv_summ
001126  4620              MOV      r0,r4
001128  f7fffffe          BL       lc640_read_int
00112c  1c40              ADDS     r0,r0,#1
00112e  b201              SXTH     r1,r0
001130  4620              MOV      r0,r4
001132  e8bd4010          POP      {r4,lr}
001136  f7ffbffe          B.W      lc640_write_int
                  |L1.4410|
;;;1376   	}
;;;1377   else if(amper_chas_cnt_drv_summ<=-36000L)
00113a  48bb              LDR      r0,|L1.5160|
00113c  4281              CMP      r1,r0
00113e  dc0c              BGT      |L1.4442|
;;;1378   	{
;;;1379   	amper_chas_cnt_drv_summ+=36000L;
001140  eb010003          ADD      r0,r1,r3
001144  6610              STR      r0,[r2,#0x60]  ; amper_chas_cnt_drv_summ
;;;1380   	lc640_write_int(EE_AMPER_CHAS_CNT,lc640_read_int(EE_AMPER_CHAS_CNT)-1);
001146  4620              MOV      r0,r4
001148  f7fffffe          BL       lc640_read_int
00114c  1e40              SUBS     r0,r0,#1
00114e  b201              SXTH     r1,r0
001150  4620              MOV      r0,r4
001152  e8bd4010          POP      {r4,lr}
001156  f7ffbffe          B.W      lc640_write_int
                  |L1.4442|
;;;1381   	}
;;;1382   }
00115a  bd10              POP      {r4,pc}
;;;1383   #endif
                          ENDP

                  avz_next_date_hndl PROC
;;;1385   //-----------------------------------------------
;;;1386   void avz_next_date_hndl(void)
00115c  b570              PUSH     {r4-r6,lr}
;;;1387   {
;;;1388   if((LPC_RTC->MONTH+AVZ)>12)lc640_write_int(EE_YEAR_AVZ,LPC_RTC->YEAR+1);
00115e  4cb3              LDR      r4,|L1.5164|
001160  f8940038          LDRB     r0,[r4,#0x38]
001164  4db2              LDR      r5,|L1.5168|
001166  7829              LDRB     r1,[r5,#0]  ; AVZ
001168  4408              ADD      r0,r0,r1
00116a  280c              CMP      r0,#0xc
00116c  d906              BLS      |L1.4476|
00116e  8fa0              LDRH     r0,[r4,#0x3c]
001170  1c40              ADDS     r0,r0,#1
001172  b201              SXTH     r1,r0
001174  20b8              MOVS     r0,#0xb8
001176  f7fffffe          BL       lc640_write_int
00117a  e004              B        |L1.4486|
                  |L1.4476|
;;;1389   else lc640_write_int(EE_YEAR_AVZ,LPC_RTC->YEAR);
00117c  f9b4103c          LDRSH    r1,[r4,#0x3c]
001180  20b8              MOVS     r0,#0xb8
001182  f7fffffe          BL       lc640_write_int
                  |L1.4486|
;;;1390   
;;;1391   //lc640_write_int(EE_YEAR_AVZ,6);
;;;1392   
;;;1393   if((LPC_RTC->MONTH+AVZ)>12)lc640_write_int(EE_MONTH_AVZ,(LPC_RTC->MONTH+AVZ)-12);
001186  f8941038          LDRB     r1,[r4,#0x38]
00118a  7828              LDRB     r0,[r5,#0]  ; AVZ
00118c  4401              ADD      r1,r1,r0
00118e  290c              CMP      r1,#0xc
001190  d907              BLS      |L1.4514|
001192  f8941038          LDRB     r1,[r4,#0x38]
001196  380c              SUBS     r0,r0,#0xc
001198  4401              ADD      r1,r1,r0
00119a  20b6              MOVS     r0,#0xb6
00119c  f7fffffe          BL       lc640_write_int
0011a0  e005              B        |L1.4526|
                  |L1.4514|
;;;1394   else lc640_write_int(EE_MONTH_AVZ,LPC_RTC->MONTH+AVZ);                                                 
0011a2  f8941038          LDRB     r1,[r4,#0x38]
0011a6  4401              ADD      r1,r1,r0
0011a8  20b6              MOVS     r0,#0xb6
0011aa  f7fffffe          BL       lc640_write_int
                  |L1.4526|
;;;1395   
;;;1396   //lc640_write_int(EE_MONTH_AVZ,5);
;;;1397   
;;;1398   if(LPC_RTC->DOM>28) lc640_write_int(EE_DATE_AVZ,28);
0011ae  f894002c          LDRB     r0,[r4,#0x2c]
0011b2  281c              CMP      r0,#0x1c
0011b4  d904              BLS      |L1.4544|
0011b6  211c              MOVS     r1,#0x1c
0011b8  20b4              MOVS     r0,#0xb4
0011ba  f7fffffe          BL       lc640_write_int
0011be  e004              B        |L1.4554|
                  |L1.4544|
;;;1399   else lc640_write_int(EE_DATE_AVZ,LPC_RTC->DOM);
0011c0  f894102c          LDRB     r1,[r4,#0x2c]
0011c4  20b4              MOVS     r0,#0xb4
0011c6  f7fffffe          BL       lc640_write_int
                  |L1.4554|
;;;1400   
;;;1401   //lc640_write_int(EE_DATE_AVZ,4);
;;;1402   
;;;1403   lc640_write_int(EE_HOUR_AVZ,LPC_RTC->HOUR);
0011ca  f1040420          ADD      r4,r4,#0x20
0011ce  7a21              LDRB     r1,[r4,#8]
0011d0  f04f00ae          MOV      r0,#0xae
0011d4  f7fffffe          BL       lc640_write_int
;;;1404   lc640_write_int(EE_MIN_AVZ,LPC_RTC->MIN);
0011d8  7921              LDRB     r1,[r4,#4]
0011da  20b0              MOVS     r0,#0xb0
0011dc  f7fffffe          BL       lc640_write_int
;;;1405   lc640_write_int(EE_SEC_AVZ,LPC_RTC->SEC);
0011e0  7821              LDRB     r1,[r4,#0]
0011e2  e8bd4070          POP      {r4-r6,lr}
0011e6  20b2              MOVS     r0,#0xb2
0011e8  f7ffbffe          B.W      lc640_write_int
;;;1406   
;;;1407   }
;;;1408   
                          ENDP

                  avz_drv PROC
;;;1409   //-----------------------------------------------
;;;1410   void avz_drv(void)                               
0011ec  b510              PUSH     {r4,lr}
;;;1411   {                
;;;1412   if(AVZ!=AVZ_OFF)
0011ee  4890              LDR      r0,|L1.5168|
;;;1413   	{
;;;1414   	if((LPC_RTC->YEAR==YEAR_AVZ)&&(LPC_RTC->MONTH==MONTH_AVZ)&&(LPC_RTC->DOM==DATE_AVZ)&&(LPC_RTC->HOUR==HOUR_AVZ)&&(LPC_RTC->MIN==MIN_AVZ)&&(LPC_RTC->SEC==SEC_AVZ))
;;;1415   		{
;;;1416   		bAVZ=1;
0011f0  4c8a              LDR      r4,|L1.5148|
0011f2  7800              LDRB     r0,[r0,#0]            ;1412  ; AVZ
0011f4  b338              CBZ      r0,|L1.4678|
0011f6  488d              LDR      r0,|L1.5164|
0011f8  8f82              LDRH     r2,[r0,#0x3c]         ;1414
0011fa  498e              LDR      r1,|L1.5172|
0011fc  8809              LDRH     r1,[r1,#0]            ;1414  ; YEAR_AVZ
0011fe  428a              CMP      r2,r1                 ;1414
001200  d121              BNE      |L1.4678|
001202  f8902038          LDRB     r2,[r0,#0x38]         ;1414
001206  498c              LDR      r1,|L1.5176|
001208  8809              LDRH     r1,[r1,#0]            ;1414  ; MONTH_AVZ
00120a  428a              CMP      r2,r1                 ;1414
00120c  d11b              BNE      |L1.4678|
00120e  f890102c          LDRB     r1,[r0,#0x2c]         ;1414
001212  4a8a              LDR      r2,|L1.5180|
001214  8812              LDRH     r2,[r2,#0]            ;1414  ; DATE_AVZ
001216  4291              CMP      r1,r2                 ;1414
001218  d115              BNE      |L1.4678|
00121a  f8901028          LDRB     r1,[r0,#0x28]         ;1414
00121e  4a88              LDR      r2,|L1.5184|
001220  8812              LDRH     r2,[r2,#0]            ;1414  ; HOUR_AVZ
001222  4291              CMP      r1,r2                 ;1414
001224  d10f              BNE      |L1.4678|
001226  f8901024          LDRB     r1,[r0,#0x24]         ;1414
00122a  4a86              LDR      r2,|L1.5188|
00122c  8812              LDRH     r2,[r2,#0]            ;1414  ; MIN_AVZ
00122e  4291              CMP      r1,r2                 ;1414
001230  d109              BNE      |L1.4678|
001232  f8900020          LDRB     r0,[r0,#0x20]         ;1414
001236  4984              LDR      r1,|L1.5192|
001238  8809              LDRH     r1,[r1,#0]            ;1414  ; SEC_AVZ
00123a  4288              CMP      r0,r1                 ;1414
00123c  d103              BNE      |L1.4678|
00123e  f04f0001          MOV      r0,#1
001242  f8840026          STRB     r0,[r4,#0x26]
                  |L1.4678|
;;;1417   		}
;;;1418   	}
;;;1419   if(bAVZ)
001246  f8940026          LDRB     r0,[r4,#0x26]  ; bAVZ
00124a  2800              CMP      r0,#0
00124c  d00d              BEQ      |L1.4714|
;;;1420   	{
;;;1421   	if(vz_start(AVZ_TIME))
00124e  487f              LDR      r0,|L1.5196|
001250  8800              LDRH     r0,[r0,#0]  ; AVZ_TIME
001252  b2c0              UXTB     r0,r0
001254  f7fffffe          BL       vz_start
001258  2800              CMP      r0,#0
00125a  d006              BEQ      |L1.4714|
;;;1422   		{
;;;1423   		bAVZ=0;
00125c  f04f0000          MOV      r0,#0
001260  f8840026          STRB     r0,[r4,#0x26]
;;;1424   		avz_next_date_hndl();
001264  e8bd4010          POP      {r4,lr}
001268  e7fe              B        avz_next_date_hndl
                  |L1.4714|
;;;1425   		}
;;;1426   	}	
;;;1427   
;;;1428   }
00126a  bd10              POP      {r4,pc}
;;;1429   
                          ENDP

                  vz_drv PROC
;;;1430   //-----------------------------------------------
;;;1431   void vz_drv(void)
00126c  b538              PUSH     {r3-r5,lr}
;;;1432   { 
;;;1433   if(spc_stat==spcVZ)
00126e  4c6b              LDR      r4,|L1.5148|
001270  f8940023          LDRB     r0,[r4,#0x23]  ; spc_stat
001274  2802              CMP      r0,#2
001276  d11d              BNE      |L1.4788|
;;;1434   	{
;;;1435   	if((sk_stat[0]==1)||(VZ_CH_VENT_BLOK==0))
001278  4875              LDR      r0,|L1.5200|
00127a  7800              LDRB     r0,[r0,#0]  ; sk_stat
00127c  2801              CMP      r0,#1
00127e  d01a              BEQ      |L1.4790|
001280  4874              LDR      r0,|L1.5204|
001282  8800              LDRH     r0,[r0,#0]  ; VZ_CH_VENT_BLOK
001284  2800              CMP      r0,#0
001286  d016              BEQ      |L1.4790|
;;;1436   		{
;;;1437   
;;;1438   	if(vz_cnt_s_<3600)
;;;1439   		{
;;;1440   		vz_cnt_s_++;
;;;1441   		if(vz_cnt_s_>=3600)
;;;1442   			{
;;;1443   			vz_cnt_s_=0;
;;;1444   			if(vz_cnt_h)
;;;1445   				{
;;;1446   				vz_cnt_h--;
;;;1447   				vz_cnt_h_++;
;;;1448   				}
;;;1449   			}
;;;1450   		}
;;;1451   
;;;1452   
;;;1453   	if(vz_cnt_s<60)
;;;1454   		{
;;;1455   		vz_cnt_s++;
;;;1456   		if(vz_cnt_s>=60)
;;;1457   			{
;;;1458   			vz_cnt_s=0;
;;;1459   			
;;;1460   			__ee_vz_cnt--;
;;;1461   			lc640_write_int(EE_VZ_CNT,__ee_vz_cnt);
;;;1462   			if((!__ee_vz_cnt)||(speedChrgBlckStat==1))
;;;1463   				{
;;;1464   				spc_stat=spcOFF;
;;;1465   						__ee_spc_stat=spcOFF;
;;;1466   		lc640_write_int(EE_SPC_STAT,spcOFF);
;;;1467   
;;;1468   //				hv_vz_stat=hvsOFF;
;;;1469   //		lc640_write(EE_HV_VZ_STAT,hvsOFF);
;;;1470   				vz_mem_hndl(0);
;;;1471   				}
;;;1472   			}
;;;1473   		}
;;;1474   		vz_error=0; 
;;;1475   		}
;;;1476   	else 
;;;1477   		{
;;;1478   		vz_error=1; 
001288  f04f0001          MOV      r0,#1
00128c  7060              STRB     r0,[r4,#1]
;;;1479   		if(((LPC_RTC->SEC)%10)==0)
00128e  4872              LDR      r0,|L1.5208|
001290  7800              LDRB     r0,[r0,#0]
001292  f04f010a          MOV      r1,#0xa
001296  fbb0f2f1          UDIV     r2,r0,r1
00129a  fb010012          MLS      r0,r1,r2,r0
00129e  2800              CMP      r0,#0
0012a0  d108              BNE      |L1.4788|
;;;1480   			{
;;;1481   			show_mess(	"ВЫРАВНИВАЮЩИЙ ЗАРЯД ",
0012a2  f2413088          MOV      r0,#0x1388
0012a6  9000              STR      r0,[sp,#0]
0012a8  a36c              ADR      r3,|L1.5212|
0012aa  a272              ADR      r2,|L1.5236|
0012ac  a177              ADR      r1,|L1.5260|
0012ae  a07d              ADR      r0,|L1.5284|
0012b0  f7fffffe          BL       show_mess
                  |L1.4788|
;;;1482   						"    ЗАБЛОКИРОВАН    ",
;;;1483   						"     НЕИСПРАВНА     ",
;;;1484   						"    ВЕНТИЛЯЦИЯ!!!   ",
;;;1485   						5000);			
;;;1486   			}
;;;1487   		}
;;;1488   /*	if(vz_cnt_s_>=3)
;;;1489   		{
;;;1490   		if(sk_stat[0]==0)
;;;1491   		} */
;;;1492   
;;;1493   	}
;;;1494   
;;;1495   
;;;1496   } 
0012b4  bd38              POP      {r3-r5,pc}
                  |L1.4790|
0012b6  f8b40064          LDRH     r0,[r4,#0x64]         ;1438  ; vz_cnt_s_
0012ba  f44f6161          MOV      r1,#0xe10             ;1438
0012be  2500              MOVS     r5,#0                 ;1435
0012c0  4288              CMP      r0,r1                 ;1438
0012c2  d215              BCS      |L1.4848|
0012c4  f1000001          ADD      r0,r0,#1              ;1440
0012c8  b280              UXTH     r0,r0                 ;1440
0012ca  f8a40064          STRH     r0,[r4,#0x64]         ;1440
0012ce  4288              CMP      r0,r1                 ;1441
0012d0  d30e              BCC      |L1.4848|
0012d2  f8a45064          STRH     r5,[r4,#0x64]         ;1443
0012d6  f8b40066          LDRH     r0,[r4,#0x66]         ;1444  ; vz_cnt_h
0012da  b148              CBZ      r0,|L1.4848|
0012dc  f1a00001          SUB      r0,r0,#1              ;1446
0012e0  f8240f66          STRH     r0,[r4,#0x66]!        ;1446
0012e4  8860              LDRH     r0,[r4,#2]            ;1447  ; vz_cnt_h_
0012e6  f1000001          ADD      r0,r0,#1              ;1447
0012ea  8060              STRH     r0,[r4,#2]            ;1447
0012ec  f1a40466          SUB      r4,r4,#0x66           ;1447
                  |L1.4848|
0012f0  f8b40062          LDRH     r0,[r4,#0x62]         ;1453  ; vz_cnt_s
0012f4  283c              CMP      r0,#0x3c              ;1453
0012f6  d225              BCS      |L1.4932|
0012f8  f1000001          ADD      r0,r0,#1              ;1455
0012fc  b280              UXTH     r0,r0                 ;1455
0012fe  f8a40062          STRH     r0,[r4,#0x62]         ;1455
001302  283c              CMP      r0,#0x3c              ;1456
001304  d31e              BCC      |L1.4932|
001306  f8245f62          STRH     r5,[r4,#0x62]!        ;1458
00130a  8960              LDRH     r0,[r4,#0xa]          ;1460  ; __ee_vz_cnt
00130c  f1a00001          SUB      r0,r0,#1              ;1460
001310  b201              SXTH     r1,r0                 ;1460
001312  8161              STRH     r1,[r4,#0xa]          ;1460
001314  f44f7027          MOV      r0,#0x29c             ;1461
001318  f7fffffe          BL       lc640_write_int
00131c  8960              LDRH     r0,[r4,#0xa]          ;1462  ; __ee_vz_cnt
00131e  f1a40462          SUB      r4,r4,#0x62           ;1462
001322  b118              CBZ      r0,|L1.4908|
001324  483e              LDR      r0,|L1.5152|
001326  8800              LDRH     r0,[r0,#0]            ;1462  ; speedChrgBlckStat
001328  2801              CMP      r0,#1                 ;1462
00132a  d10b              BNE      |L1.4932|
                  |L1.4908|
00132c  f8845023          STRB     r5,[r4,#0x23]         ;1464
001330  f8a4506e          STRH     r5,[r4,#0x6e]         ;1465
001334  2100              MOVS     r1,#0                 ;1466
001336  f240209a          MOV      r0,#0x29a             ;1466
00133a  f7fffffe          BL       lc640_write_int
00133e  2000              MOVS     r0,#0                 ;1470
001340  f7fffffe          BL       vz_mem_hndl
                  |L1.4932|
001344  7065              STRB     r5,[r4,#1]            ;1474
001346  bd38              POP      {r3-r5,pc}
;;;1497   
                          ENDP

                  vz1_drv PROC
;;;1499   //драйвер уравнительного заряда
;;;1500   void vz1_drv(void)
001348  e92d4ff8          PUSH     {r3-r11,lr}
;;;1501   {
;;;1502   if(volt_region_cnt)volt_region_cnt--;
00134c  f8df80cc          LDR      r8,|L1.5148|
001350  f9b8007c          LDRSH    r0,[r8,#0x7c]  ; volt_region_cnt
001354  b118              CBZ      r0,|L1.4958|
001356  f1a00001          SUB      r0,r0,#1
00135a  f8a8007c          STRH     r0,[r8,#0x7c]
                  |L1.4958|
;;;1503   if(vz1_stat==vz1sOFF)
00135e  f8980005          LDRB     r0,[r8,#5]  ; vz1_stat
001362  b928              CBNZ     r0,|L1.4976|
;;;1504   	{
;;;1505   	mess_send(MESS2RELE_HNDL,PARAM_RELE_SAMOKALIBR,0,20);
001364  2314              MOVS     r3,#0x14
001366  2200              MOVS     r2,#0
001368  2164              MOVS     r1,#0x64
00136a  20d2              MOVS     r0,#0xd2
00136c  f7fffffe          BL       mess_send
                  |L1.4976|
;;;1506   	}
;;;1507   if(vz1_stat==vz1sSTEP1)
001370  f8980005          LDRB     r0,[r8,#5]  ; vz1_stat
;;;1508   	{
;;;1509   	if(vz1_stat_old!=vz1_stat)
;;;1510   		{
;;;1511   		vz1_stat_cnt=5;
;;;1512   		}
;;;1513   	if(vz1_stat_cnt)
;;;1514   		{
;;;1515   		vz1_stat_cnt--;
;;;1516   		if(vz1_stat_cnt==0)
;;;1517   			{
;;;1518   			vz1_stat=vz1sERR1; 	//Не включилась вентиляция;
;;;1519   			lc640_write(EE_VZ1_STAT,vz1sERR1);
;;;1520   			}
;;;1521   		}
;;;1522   	if(sk_stat[0]==1)
001374  4d36              LDR      r5,|L1.5200|
001376  f44f7bc9          MOV      r11,#0x192            ;1519
00137a  2801              CMP      r0,#1                 ;1507
00137c  d139              BNE      |L1.5106|
00137e  f8980006          LDRB     r0,[r8,#6]            ;1509  ; vz1_stat_old
001382  2801              CMP      r0,#1                 ;1509
001384  d003              BEQ      |L1.5006|
001386  f04f0005          MOV      r0,#5                 ;1511
00138a  f8a8007a          STRH     r0,[r8,#0x7a]         ;1511
                  |L1.5006|
00138e  f9b8007a          LDRSH    r0,[r8,#0x7a]         ;1513  ; vz1_stat_cnt
001392  b168              CBZ      r0,|L1.5040|
001394  f1a00001          SUB      r0,r0,#1              ;1515
001398  b200              SXTH     r0,r0                 ;1515
00139a  f8a8007a          STRH     r0,[r8,#0x7a]         ;1515
00139e  b938              CBNZ     r0,|L1.5040|
0013a0  f04f000b          MOV      r0,#0xb               ;1518
0013a4  f8880005          STRB     r0,[r8,#5]            ;1518
0013a8  4601              MOV      r1,r0                 ;1519
0013aa  4658              MOV      r0,r11                ;1519
0013ac  f7fffffe          BL       lc640_write
                  |L1.5040|
0013b0  7828              LDRB     r0,[r5,#0]  ; sk_stat
0013b2  2801              CMP      r0,#1
0013b4  d117              BNE      |L1.5094|
;;;1523   		{
;;;1524   		vz1_stat=vz1sSTEP2;
0013b6  f04f0002          MOV      r0,#2
0013ba  f8880005          STRB     r0,[r8,#5]
;;;1525   		lc640_write(EE_VZ1_STAT,vz1sSTEP2);
0013be  4601              MOV      r1,r0
0013c0  4658              MOV      r0,r11
0013c2  f7fffffe          BL       lc640_write
;;;1526   		tree_up(iVZ1_STEP2_2,1,0,0);
0013c6  2300              MOVS     r3,#0
0013c8  461a              MOV      r2,r3
0013ca  2101              MOVS     r1,#1
0013cc  20df              MOVS     r0,#0xdf
0013ce  f7fffffe          BL       tree_up
;;;1527   		tree_up(iVZ1_STEP2_1,0,0,0);
0013d2  2300              MOVS     r3,#0
0013d4  461a              MOV      r2,r3
0013d6  4619              MOV      r1,r3
0013d8  20de              MOVS     r0,#0xde
0013da  f7fffffe          BL       tree_up
;;;1528   		ret(1200);
0013de  f44f6096          MOV      r0,#0x4b0
0013e2  f7fffffe          BL       ||ret||
                  |L1.5094|
;;;1529   		}
;;;1530   	mess_send(MESS2RELE_HNDL,PARAM_RELE_SAMOKALIBR,0,20);
0013e6  2314              MOVS     r3,#0x14
0013e8  2200              MOVS     r2,#0
0013ea  2164              MOVS     r1,#0x64
0013ec  20d2              MOVS     r0,#0xd2
0013ee  f7fffffe          BL       mess_send
                  |L1.5106|
;;;1531   	}
;;;1532   
;;;1533   if(vz1_stat==vz1sSTEP2)
0013f2  f8980005          LDRB     r0,[r8,#5]  ; vz1_stat
;;;1534   	{
;;;1535   	if((vz1_stat_old!=vz1_stat)||(vz1_stat_cnt==0))
;;;1536   		{
;;;1537   		vz1_stat_cnt=15;
0013f6  f04f090f          MOV      r9,#0xf
0013fa  2802              CMP      r0,#2                 ;1533
0013fc  d16c              BNE      |L1.5336|
0013fe  f8980006          LDRB     r0,[r8,#6]            ;1535  ; vz1_stat_old
001402  2802              CMP      r0,#2                 ;1535
001404  d102              BNE      |L1.5132|
001406  f8b8007a          LDRH     r0,[r8,#0x7a]         ;1535  ; vz1_stat_cnt
00140a  b908              CBNZ     r0,|L1.5136|
                  |L1.5132|
00140c  f8a8907a          STRH     r9,[r8,#0x7a]
                  |L1.5136|
;;;1538   		}
;;;1539   	vz1_stat_cnt--;
001410  f8b8007a          LDRH     r0,[r8,#0x7a]  ; vz1_stat_cnt
001414  e052              B        |L1.5308|
001416  0000              DCW      0x0000
                  |L1.5144|
                          DCD      ADR_EE_BAT_ZAR_CNT
                  |L1.5148|
                          DCD      ||area_number.25||
                  |L1.5152|
                          DCD      speedChrgBlckStat
                  |L1.5156|
                          DCD      Ib_ips_termokompensat
                  |L1.5160|
                          DCD      0xffff7360
                  |L1.5164|
                          DCD      0x40024000
                  |L1.5168|
                          DCD      AVZ
                  |L1.5172|
                          DCD      YEAR_AVZ
                  |L1.5176|
                          DCD      MONTH_AVZ
                  |L1.5180|
                          DCD      DATE_AVZ
                  |L1.5184|
                          DCD      HOUR_AVZ
                  |L1.5188|
                          DCD      MIN_AVZ
                  |L1.5192|
                          DCD      SEC_AVZ
                  |L1.5196|
                          DCD      AVZ_TIME
                  |L1.5200|
                          DCD      sk_stat
                  |L1.5204|
                          DCD      VZ_CH_VENT_BLOK
                  |L1.5208|
                          DCD      0x40024020
                  |L1.5212|
00145c  20202020          DCB      "    ",194,197,205,210,200,203,223,214,200,223,"!!!   ",0
001460  c2c5cdd2
001464  c8cbdfd6
001468  c8df2121
00146c  21202020
001470  00      
001471  00                DCB      0
001472  00                DCB      0
001473  00                DCB      0
                  |L1.5236|
001474  20202020          DCB      "     ",205,197,200,209,207,208,192,194,205,192,"     ",0
001478  20cdc5c8
00147c  d1cfd0c0
001480  c2cdc020
001484  20202020
001488  00      
001489  00                DCB      0
00148a  00                DCB      0
00148b  00                DCB      0
                  |L1.5260|
00148c  20202020          DCB      "    ",199,192,193,203,206,202,200,208,206,194,192,205," "
001490  c7c0c1cb
001494  cecac8d0
001498  cec2c0cd
00149c  20      
00149d  20202000          DCB      "   ",0
0014a1  00                DCB      0
0014a2  00                DCB      0
0014a3  00                DCB      0
                  |L1.5284|
0014a4  c2dbd0c0          DCB      194,219,208,192,194,205,200,194,192,222,217,200,201," ",199
0014a8  c2cdc8c2
0014ac  c0ded9c8
0014b0  c920c7  
0014b3  c0d0dfc4          DCB      192,208,223,196," ",0
0014b7  2000    
0014b9  00                DCB      0
0014ba  00                DCB      0
0014bb  00                DCB      0
                  |L1.5308|
0014bc  f1a00001          SUB      r0,r0,#1
0014c0  f8a8007a          STRH     r0,[r8,#0x7a]
;;;1540   	mess_send(MESS2RELE_HNDL,PARAM_RELE_SAMOKALIBR,0,20);
0014c4  f04f0314          MOV      r3,#0x14
0014c8  f04f0200          MOV      r2,#0
0014cc  f04f0164          MOV      r1,#0x64
0014d0  f04f00d2          MOV      r0,#0xd2
0014d4  f7fffffe          BL       mess_send
                  |L1.5336|
;;;1541   	}
;;;1542   
;;;1543   if(vz1_stat==vz1sSTEP3)
0014d8  f8980005          LDRB     r0,[r8,#5]  ; vz1_stat
;;;1544   	{
;;;1545   	if((vz1_stat_old!=vz1_stat)||(vz1_stat_cnt==0))
;;;1546   		{
;;;1547   		vz1_stat_cnt=10;
0014dc  240a              MOVS     r4,#0xa
0014de  2600              MOVS     r6,#0                 ;1502
0014e0  f04f0a01          MOV      r10,#1                ;1503
;;;1548   
;;;1549   		}
;;;1550   	vz1_stat_cnt--;
;;;1551   	if((vz1_stat_cnt==10)||(vz1_stat_cnt==9))
;;;1552   		{
;;;1553   		show_mess(	"     ВКЛЮЧИТЕ       ",
0014e4  f2413788          MOV      r7,#0x1388
0014e8  2803              CMP      r0,#3                 ;1543
0014ea  d131              BNE      |L1.5456|
0014ec  f8980006          LDRB     r0,[r8,#6]            ;1545  ; vz1_stat_old
0014f0  2803              CMP      r0,#3                 ;1545
0014f2  d102              BNE      |L1.5370|
0014f4  f8b8007a          LDRH     r0,[r8,#0x7a]         ;1545  ; vz1_stat_cnt
0014f8  b908              CBNZ     r0,|L1.5374|
                  |L1.5370|
0014fa  f8a8407a          STRH     r4,[r8,#0x7a]         ;1547
                  |L1.5374|
0014fe  f8b8007a          LDRH     r0,[r8,#0x7a]         ;1550  ; vz1_stat_cnt
001502  f1a00001          SUB      r0,r0,#1              ;1550
001506  b200              SXTH     r0,r0                 ;1550
001508  f8a8007a          STRH     r0,[r8,#0x7a]         ;1550
00150c  280a              CMP      r0,#0xa               ;1551
00150e  d001              BEQ      |L1.5396|
001510  2809              CMP      r0,#9                 ;1551
001512  d106              BNE      |L1.5410|
                  |L1.5396|
001514  a3e7              ADR      r3,|L1.6324|
001516  a2ed              ADR      r2,|L1.6348|
001518  a1f2              ADR      r1,|L1.6372|
00151a  a0f8              ADR      r0,|L1.6396|
00151c  9700              STR      r7,[sp,#0]
00151e  f7fffffe          BL       show_mess
                  |L1.5410|
;;;1554   					"      ТУМБЛЕР       ",
;;;1555   					"     ВЫСОКОГО       ",
;;;1556   					"    НАПРЯЖЕНИЯ      ",
;;;1557   					5000);
;;;1558   		}
;;;1559   	if(sk_stat[1]==1)
001522  7868              LDRB     r0,[r5,#1]  ; sk_stat
001524  2801              CMP      r0,#1
001526  d10d              BNE      |L1.5444|
;;;1560   		{
;;;1561   		vz1_stat=vz1sWRK;
001528  f8884005          STRB     r4,[r8,#5]
;;;1562   		lc640_write(EE_VZ1_STAT,vz1sWRK);
00152c  210a              MOVS     r1,#0xa
00152e  4658              MOV      r0,r11
001530  f7fffffe          BL       lc640_write
;;;1563   		volt_region=1;
001534  f888a02f          STRB     r10,[r8,#0x2f]
;;;1564   		cntrl_stat=0;
001538  f8a86032          STRH     r6,[r8,#0x32]
;;;1565   		cntrl_stat_new=0;
00153c  f8a86048          STRH     r6,[r8,#0x48]
;;;1566   		cntrl_stat_old=0;
001540  f8a86034          STRH     r6,[r8,#0x34]
                  |L1.5444|
;;;1567   		}
;;;1568   	mess_send(MESS2RELE_HNDL,PARAM_RELE_SAMOKALIBR,0,20);
001544  2314              MOVS     r3,#0x14
001546  2200              MOVS     r2,#0
001548  2164              MOVS     r1,#0x64
00154a  20d2              MOVS     r0,#0xd2
00154c  f7fffffe          BL       mess_send
                  |L1.5456|
;;;1569   	}
;;;1570   
;;;1571   if(vz1_stat==vz1sWRK)
001550  f8980005          LDRB     r0,[r8,#5]  ; vz1_stat
001554  280a              CMP      r0,#0xa
001556  d17d              BNE      |L1.5716|
;;;1572   	{
;;;1573   	if(vz1_stat_old!=vz1_stat)
001558  f8980006          LDRB     r0,[r8,#6]  ; vz1_stat_old
;;;1574   		{
;;;1575   		vz1_wrk_cnt=3600L/*100L*/*((long)UZ_T);
00155c  49ed              LDR      r1,|L1.6420|
00155e  280a              CMP      r0,#0xa               ;1573
001560  d008              BEQ      |L1.5492|
001562  48ed              LDR      r0,|L1.6424|
001564  f44f6261          MOV      r2,#0xe10
001568  f9b00000          LDRSH    r0,[r0,#0]  ; UZ_T
00156c  fb00f002          MUL      r0,r0,r2
001570  63c8              STR      r0,[r1,#0x3c]  ; vz1_wrk_cnt
;;;1576   		//if(VZ_HR==0)  	hv_vz_wrk_cnt=1800L;
;;;1577   		vz1_up_cnt=0L;
001572  640e              STR      r6,[r1,#0x40]  ; vz1_up_cnt
                  |L1.5492|
;;;1578   
;;;1579   		}
;;;1580   	vz1_wrk_cnt--;
001574  6bc8              LDR      r0,[r1,#0x3c]  ; vz1_wrk_cnt
001576  f1a00001          SUB      r0,r0,#1
00157a  63c8              STR      r0,[r1,#0x3c]  ; vz1_wrk_cnt
;;;1581   	vz1_up_cnt++;
00157c  6c0a              LDR      r2,[r1,#0x40]  ; vz1_up_cnt
00157e  f1020201          ADD      r2,r2,#1
001582  640a              STR      r2,[r1,#0x40]  ; vz1_up_cnt
;;;1582   
;;;1583   	if(vz1_wrk_cnt==0)
001584  b940              CBNZ     r0,|L1.5528|
;;;1584   		{
;;;1585   		vz1_stat=vz1sFINE;
001586  f8889005          STRB     r9,[r8,#5]
;;;1586   		lc640_write(EE_VZ1_STAT,vz1sFINE);
00158a  210f              MOVS     r1,#0xf
00158c  4658              MOV      r0,r11
00158e  f7fffffe          BL       lc640_write
;;;1587   		uz_mem_hndl(0);
001592  2000              MOVS     r0,#0
001594  f7fffffe          BL       uz_mem_hndl
                  |L1.5528|
;;;1588   		}
;;;1589   	if(sk_stat[0]==0)
001598  7828              LDRB     r0,[r5,#0]  ; sk_stat
00159a  b938              CBNZ     r0,|L1.5548|
;;;1590   		{
;;;1591   		vz1_stat=vz1sERR2;
00159c  f04f000c          MOV      r0,#0xc
0015a0  f8880005          STRB     r0,[r8,#5]
;;;1592   		lc640_write(EE_VZ1_STAT,vz1sERR2);
0015a4  4601              MOV      r1,r0
0015a6  4658              MOV      r0,r11
0015a8  f7fffffe          BL       lc640_write
                  |L1.5548|
;;;1593   		}
;;;1594   	if(sk_stat[1]==0)
0015ac  7868              LDRB     r0,[r5,#1]  ; sk_stat
0015ae  b938              CBNZ     r0,|L1.5568|
;;;1595   		{
;;;1596   		vz1_stat=vz1sERR3;
0015b0  f04f000d          MOV      r0,#0xd
0015b4  f8880005          STRB     r0,[r8,#5]
;;;1597   		lc640_write(EE_VZ1_STAT,vz1sERR3);
0015b8  4601              MOV      r1,r0
0015ba  4658              MOV      r0,r11
0015bc  f7fffffe          BL       lc640_write
                  |L1.5568|
;;;1598   		}
;;;1599   	if(((Ibmax/10)>IZMAX_)&&(cntrl_stat<=20)&&(volt_region==1)&&(volt_region_cnt==0))
0015c0  f9b8004a          LDRSH    r0,[r8,#0x4a]  ; Ibmax
0015c4  f8b8104c          LDRH     r1,[r8,#0x4c]  ; IZMAX_
0015c8  fb90f0f4          SDIV     r0,r0,r4
;;;1600   		{
;;;1601   		volt_region=0;
;;;1602   		cntrl_stat=1000;
0015cc  f44f727a          MOV      r2,#0x3e8
0015d0  4288              CMP      r0,r1                 ;1599
0015d2  dd16              BLE      |L1.5634|
0015d4  f9b83032          LDRSH    r3,[r8,#0x32]         ;1599  ; cntrl_stat
0015d8  2b14              CMP      r3,#0x14              ;1599
0015da  dc12              BGT      |L1.5634|
0015dc  f898302f          LDRB     r3,[r8,#0x2f]         ;1599  ; volt_region
0015e0  2b01              CMP      r3,#1                 ;1599
0015e2  d10e              BNE      |L1.5634|
0015e4  f8b8307c          LDRH     r3,[r8,#0x7c]         ;1599  ; volt_region_cnt
0015e8  b95b              CBNZ     r3,|L1.5634|
0015ea  f888602f          STRB     r6,[r8,#0x2f]         ;1601
0015ee  f8a82032          STRH     r2,[r8,#0x32]
;;;1603   		cntrl_stat_new=1000;
0015f2  f8a82048          STRH     r2,[r8,#0x48]
;;;1604   		cntrl_stat_old=1000;
0015f6  f8a82034          STRH     r2,[r8,#0x34]
;;;1605   		volt_region_cnt=110;
0015fa  f04f036e          MOV      r3,#0x6e
0015fe  f8a8307c          STRH     r3,[r8,#0x7c]
                  |L1.5634|
;;;1606   		}
;;;1607   	if(((Ibmax/10)<IZMAX_)&&(cntrl_stat>=1000)&&(volt_region==0)&&(volt_region_cnt==0))
001602  4288              CMP      r0,r1
001604  da13              BGE      |L1.5678|
001606  f9b80032          LDRSH    r0,[r8,#0x32]  ; cntrl_stat
00160a  4290              CMP      r0,r2
00160c  db0f              BLT      |L1.5678|
00160e  f898002f          LDRB     r0,[r8,#0x2f]  ; volt_region
001612  b960              CBNZ     r0,|L1.5678|
001614  f8b8007c          LDRH     r0,[r8,#0x7c]  ; volt_region_cnt
001618  b948              CBNZ     r0,|L1.5678|
;;;1608   		{
;;;1609   		volt_region=1;
00161a  f888a02f          STRB     r10,[r8,#0x2f]
;;;1610   		cntrl_stat=10;
00161e  f8a84032          STRH     r4,[r8,#0x32]
;;;1611   		cntrl_stat_new=10;
001622  f8a84048          STRH     r4,[r8,#0x48]
;;;1612   		cntrl_stat_old=10;
001626  f8a84034          STRH     r4,[r8,#0x34]
;;;1613   		volt_region_cnt=10;
00162a  f8a8407c          STRH     r4,[r8,#0x7c]
                  |L1.5678|
;;;1614   		}
;;;1615   	if(volt_region==0) 		mess_send(MESS2RELE_HNDL,PARAM_RELE_SAMOKALIBR,0,20);
00162e  f898002f          LDRB     r0,[r8,#0x2f]  ; volt_region
001632  b110              CBZ      r0,|L1.5690|
;;;1616   	else if(volt_region==1) mess_send(MESS2RELE_HNDL,PARAM_RELE_SAMOKALIBR,1,20);
001634  2801              CMP      r0,#1
001636  d007              BEQ      |L1.5704|
001638  e00c              B        |L1.5716|
                  |L1.5690|
00163a  2314              MOVS     r3,#0x14              ;1615
00163c  2200              MOVS     r2,#0                 ;1615
00163e  2164              MOVS     r1,#0x64              ;1615
001640  20d2              MOVS     r0,#0xd2              ;1615
001642  f7fffffe          BL       mess_send
001646  e005              B        |L1.5716|
                  |L1.5704|
001648  2314              MOVS     r3,#0x14
00164a  2201              MOVS     r2,#1
00164c  2164              MOVS     r1,#0x64
00164e  20d2              MOVS     r0,#0xd2
001650  f7fffffe          BL       mess_send
                  |L1.5716|
;;;1617   	}
;;;1618   
;;;1619   if(vz1_stat==vz1sERR1)		//Отсутствует вентиляция при включении
001654  f8980005          LDRB     r0,[r8,#5]  ; vz1_stat
001658  280b              CMP      r0,#0xb
00165a  d120              BNE      |L1.5790|
;;;1620   	{
;;;1621   	if((vz1_stat_old!=vz1_stat)||(vz1_stat_cnt==0))
00165c  f8980006          LDRB     r0,[r8,#6]  ; vz1_stat_old
001660  280b              CMP      r0,#0xb
001662  d102              BNE      |L1.5738|
001664  f8b8007a          LDRH     r0,[r8,#0x7a]  ; vz1_stat_cnt
001668  b908              CBNZ     r0,|L1.5742|
                  |L1.5738|
;;;1622   		{
;;;1623   		vz1_stat_cnt=10;
00166a  f8a8407a          STRH     r4,[r8,#0x7a]
                  |L1.5742|
;;;1624   		}
;;;1625   	vz1_stat_cnt--;
00166e  f8b8007a          LDRH     r0,[r8,#0x7a]  ; vz1_stat_cnt
001672  f1a00001          SUB      r0,r0,#1
001676  b200              SXTH     r0,r0
001678  f8a8007a          STRH     r0,[r8,#0x7a]
;;;1626   	if((vz1_stat_cnt==10)||(vz1_stat_cnt==9))
00167c  280a              CMP      r0,#0xa
00167e  d001              BEQ      |L1.5764|
001680  2809              CMP      r0,#9
001682  d106              BNE      |L1.5778|
                  |L1.5764|
;;;1627   		{
;;;1628   		show_mess(	"УРАВНИТЕЛЬНЫЙ ЗАРЯД ",
001684  a3a5              ADR      r3,|L1.6428|
001686  a2ab              ADR      r2,|L1.6452|
001688  a1b0              ADR      r1,|L1.6476|
00168a  a0b6              ADR      r0,|L1.6500|
00168c  9700              STR      r7,[sp,#0]
00168e  f7fffffe          BL       show_mess
                  |L1.5778|
;;;1629   					"   НЕ МОЖЕТ БЫТЬ    ",
;;;1630   					"      ВКЛЮЧЕН       ",
;;;1631   					"  БЕЗ ВЕНТИЛЯЦИИ!!  ",
;;;1632   					5000);
;;;1633   		}
;;;1634   	mess_send(MESS2RELE_HNDL,PARAM_RELE_SAMOKALIBR,0,20);
001692  2314              MOVS     r3,#0x14
001694  2200              MOVS     r2,#0
001696  2164              MOVS     r1,#0x64
001698  20d2              MOVS     r0,#0xd2
00169a  f7fffffe          BL       mess_send
                  |L1.5790|
;;;1635   	}
;;;1636   if(vz1_stat==vz1sERR2)		//Пропала вентиляция при работе
00169e  f8980005          LDRB     r0,[r8,#5]  ; vz1_stat
0016a2  280c              CMP      r0,#0xc
0016a4  d12c              BNE      |L1.5888|
;;;1637   	{
;;;1638   	if((vz1_stat_old!=vz1_stat)||(vz1_stat_cnt==0))
0016a6  f8980006          LDRB     r0,[r8,#6]  ; vz1_stat_old
0016aa  280c              CMP      r0,#0xc
0016ac  d102              BNE      |L1.5812|
0016ae  f8b8007a          LDRH     r0,[r8,#0x7a]  ; vz1_stat_cnt
0016b2  b908              CBNZ     r0,|L1.5816|
                  |L1.5812|
;;;1639   		{
;;;1640   		vz1_stat_cnt=10;
0016b4  f8a8407a          STRH     r4,[r8,#0x7a]
                  |L1.5816|
;;;1641   		}
;;;1642   	vz1_stat_cnt--;
0016b8  f8b8007a          LDRH     r0,[r8,#0x7a]  ; vz1_stat_cnt
0016bc  f1a00001          SUB      r0,r0,#1
0016c0  b200              SXTH     r0,r0
0016c2  f8a8007a          STRH     r0,[r8,#0x7a]
;;;1643   	if((vz1_stat_cnt==10)||(vz1_stat_cnt==9))
0016c6  280a              CMP      r0,#0xa
0016c8  d001              BEQ      |L1.5838|
0016ca  2809              CMP      r0,#9
0016cc  d109              BNE      |L1.5858|
                  |L1.5838|
;;;1644   		{
;;;1645   		show_mess(	"УРАВНИТЕЛЬНЫЙ ЗАРЯД ",
0016ce  f2af2374          ADR      r3,|L1.5212|
0016d2  f2af2260          ADR      r2,|L1.5236|
0016d6  f2af214c          ADR      r1,|L1.5260|
0016da  a0a2              ADR      r0,|L1.6500|
0016dc  9700              STR      r7,[sp,#0]
0016de  f7fffffe          BL       show_mess
                  |L1.5858|
;;;1646   					"    ЗАБЛОКИРОВАН    ",
;;;1647   					"     НЕИСПРАВНА     ",
;;;1648   					"    ВЕНТИЛЯЦИЯ!!!   ",
;;;1649   					5000);
;;;1650   		}
;;;1651   	if(sk_stat[0]==1)
0016e2  7828              LDRB     r0,[r5,#0]  ; sk_stat
0016e4  2801              CMP      r0,#1
0016e6  d105              BNE      |L1.5876|
;;;1652   		{
;;;1653   		vz1_stat=vz1sWRK;
0016e8  f8884005          STRB     r4,[r8,#5]
;;;1654   		lc640_write(EE_VZ1_STAT,vz1sWRK);
0016ec  210a              MOVS     r1,#0xa
0016ee  4658              MOV      r0,r11
0016f0  f7fffffe          BL       lc640_write
                  |L1.5876|
;;;1655   		}
;;;1656   	mess_send(MESS2RELE_HNDL,PARAM_RELE_SAMOKALIBR,0,20);
0016f4  2314              MOVS     r3,#0x14
0016f6  2200              MOVS     r2,#0
0016f8  2164              MOVS     r1,#0x64
0016fa  20d2              MOVS     r0,#0xd2
0016fc  f7fffffe          BL       mess_send
                  |L1.5888|
;;;1657   	}
;;;1658   
;;;1659   if(vz1_stat==vz1sERR3)		//Отключен тумблер "Высокое напряжение"
001700  f8980005          LDRB     r0,[r8,#5]  ; vz1_stat
001704  280d              CMP      r0,#0xd
001706  d129              BNE      |L1.5980|
;;;1660   	{
;;;1661   	if((vz1_stat_old!=vz1_stat)||(vz1_stat_cnt==0))
001708  f8980006          LDRB     r0,[r8,#6]  ; vz1_stat_old
00170c  280d              CMP      r0,#0xd
00170e  d102              BNE      |L1.5910|
001710  f8b8007a          LDRH     r0,[r8,#0x7a]  ; vz1_stat_cnt
001714  b908              CBNZ     r0,|L1.5914|
                  |L1.5910|
;;;1662   		{
;;;1663   		vz1_stat_cnt=10;
001716  f8a8407a          STRH     r4,[r8,#0x7a]
                  |L1.5914|
;;;1664   		}
;;;1665   	vz1_stat_cnt--;
00171a  f8b8007a          LDRH     r0,[r8,#0x7a]  ; vz1_stat_cnt
00171e  f1a00001          SUB      r0,r0,#1
001722  b200              SXTH     r0,r0
001724  f8a8007a          STRH     r0,[r8,#0x7a]
;;;1666   	if((vz1_stat_cnt==10)||(vz1_stat_cnt==9))
001728  280a              CMP      r0,#0xa
00172a  d001              BEQ      |L1.5936|
00172c  2809              CMP      r0,#9
00172e  d106              BNE      |L1.5950|
                  |L1.5936|
;;;1667   		{
;;;1668   		show_mess(	"УРАВНИТЕЛЬНЫЙ ЗАРЯД ",
001730  a392              ADR      r3,|L1.6524|
001732  a298              ADR      r2,|L1.6548|
001734  a19d              ADR      r1,|L1.6572|
001736  a08b              ADR      r0,|L1.6500|
001738  9700              STR      r7,[sp,#0]
00173a  f7fffffe          BL       show_mess
                  |L1.5950|
;;;1669   					"  БУДЕТ ПРОДОЛЖЕН   ",
;;;1670   					"  ПОСЛЕ ВКЛЮЧЕНИЯ   ",
;;;1671   					"*   ТУМБЛЕРА!!!     ",
;;;1672   					5000);
;;;1673   		}
;;;1674   	if(sk_stat[1]==1)
00173e  7868              LDRB     r0,[r5,#1]  ; sk_stat
001740  2801              CMP      r0,#1
001742  d105              BNE      |L1.5968|
;;;1675   		{
;;;1676   		vz1_stat=vz1sWRK;
001744  f8884005          STRB     r4,[r8,#5]
;;;1677   		lc640_write(EE_VZ1_STAT,vz1sWRK);
001748  210a              MOVS     r1,#0xa
00174a  4658              MOV      r0,r11
00174c  f7fffffe          BL       lc640_write
                  |L1.5968|
;;;1678   		}
;;;1679   	mess_send(MESS2RELE_HNDL,PARAM_RELE_SAMOKALIBR,0,20);
001750  2314              MOVS     r3,#0x14
001752  2200              MOVS     r2,#0
001754  2164              MOVS     r1,#0x64
001756  20d2              MOVS     r0,#0xd2
001758  f7fffffe          BL       mess_send
                  |L1.5980|
;;;1680   	}
;;;1681   if(vz1_stat==vz1sERR4)		//ВЗ закончился а тумблер включен
00175c  f8980005          LDRB     r0,[r8,#5]  ; vz1_stat
001760  280e              CMP      r0,#0xe
001762  d12a              BNE      |L1.6074|
;;;1682   	{
;;;1683   	if((vz1_stat_old!=vz1_stat)||(vz1_stat_cnt==0))
001764  f8980006          LDRB     r0,[r8,#6]  ; vz1_stat_old
001768  280e              CMP      r0,#0xe
00176a  d102              BNE      |L1.6002|
00176c  f8b8007a          LDRH     r0,[r8,#0x7a]  ; vz1_stat_cnt
001770  b908              CBNZ     r0,|L1.6006|
                  |L1.6002|
;;;1684   		{
;;;1685   		vz1_stat_cnt=10;
001772  f8a8407a          STRH     r4,[r8,#0x7a]
                  |L1.6006|
;;;1686   		}
;;;1687   	vz1_stat_cnt--;
001776  f8b8007a          LDRH     r0,[r8,#0x7a]  ; vz1_stat_cnt
00177a  f1a00001          SUB      r0,r0,#1
00177e  b200              SXTH     r0,r0
001780  f8a8007a          STRH     r0,[r8,#0x7a]
;;;1688   	if((vz1_stat_cnt==10)||(vz1_stat_cnt==9))
001784  280a              CMP      r0,#0xa
001786  d001              BEQ      |L1.6028|
001788  2809              CMP      r0,#9
00178a  d106              BNE      |L1.6042|
                  |L1.6028|
;;;1689   		{
;;;1690   		show_mess(	"*    ВЫКЛЮЧИТЕ      ",
00178c  a349              ADR      r3,|L1.6324|
00178e  a24f              ADR      r2,|L1.6348|
001790  a154              ADR      r1,|L1.6372|
001792  a08c              ADR      r0,|L1.6596|
001794  9700              STR      r7,[sp,#0]
001796  f7fffffe          BL       show_mess
                  |L1.6042|
;;;1691   					"      ТУМБЛЕР       ",
;;;1692   					"     ВЫСОКОГО       ",
;;;1693   					"    НАПРЯЖЕНИЯ      ",
;;;1694   					5000);
;;;1695   		}
;;;1696   	if(sk_stat[1]==0)
00179a  7868              LDRB     r0,[r5,#1]  ; sk_stat
00179c  b938              CBNZ     r0,|L1.6062|
;;;1697   		{
;;;1698   		vz1_stat=vz1sOFF;
00179e  f8886005          STRB     r6,[r8,#5]
;;;1699   		lc640_write(EE_VZ1_STAT,vz1sOFF);
0017a2  2100              MOVS     r1,#0
0017a4  4658              MOV      r0,r11
0017a6  f7fffffe          BL       lc640_write
;;;1700   		vz_stop();
0017aa  f7fffffe          BL       vz_stop
                  |L1.6062|
;;;1701   
;;;1702   		}
;;;1703   	mess_send(MESS2RELE_HNDL,PARAM_RELE_SAMOKALIBR,1,20);
0017ae  2314              MOVS     r3,#0x14
0017b0  2201              MOVS     r2,#1
0017b2  2164              MOVS     r1,#0x64
0017b4  20d2              MOVS     r0,#0xd2
0017b6  f7fffffe          BL       mess_send
                  |L1.6074|
;;;1704   	}
;;;1705   if(vz1_stat==vz1sFINE)		//УЗ закончился, напоминание
0017ba  f8980005          LDRB     r0,[r8,#5]  ; vz1_stat
;;;1706   	{
;;;1707   	if((vz1_stat_old!=vz1_stat)||(vz1_stat_cnt==0))
;;;1708   		{
;;;1709   		vz1_stat_cnt=10;
;;;1710   		}
;;;1711   	vz1_stat_cnt--;
;;;1712   	if((vz1_stat_cnt==10)||(vz1_stat_cnt==9))
;;;1713   		{
;;;1714   		show_mess(	"   УРАВНИТЕЛЬНЫЙ    ",
0017be  f64037b8          MOV      r7,#0xbb8
0017c2  280f              CMP      r0,#0xf               ;1705
0017c4  d135              BNE      |L1.6194|
0017c6  f8980006          LDRB     r0,[r8,#6]            ;1707  ; vz1_stat_old
0017ca  280f              CMP      r0,#0xf               ;1707
0017cc  d102              BNE      |L1.6100|
0017ce  f8b8007a          LDRH     r0,[r8,#0x7a]         ;1707  ; vz1_stat_cnt
0017d2  b908              CBNZ     r0,|L1.6104|
                  |L1.6100|
0017d4  f8a8407a          STRH     r4,[r8,#0x7a]         ;1709
                  |L1.6104|
0017d8  f8b8007a          LDRH     r0,[r8,#0x7a]         ;1711  ; vz1_stat_cnt
0017dc  f1a00001          SUB      r0,r0,#1              ;1711
0017e0  b200              SXTH     r0,r0                 ;1711
0017e2  f8a8007a          STRH     r0,[r8,#0x7a]         ;1711
0017e6  280a              CMP      r0,#0xa               ;1712
0017e8  d001              BEQ      |L1.6126|
0017ea  2809              CMP      r0,#9                 ;1712
0017ec  d106              BNE      |L1.6140|
                  |L1.6126|
0017ee  a37b              ADR      r3,|L1.6620|
0017f0  a280              ADR      r2,|L1.6644|
0017f2  a186              ADR      r1,|L1.6668|
0017f4  a08b              ADR      r0,|L1.6692|
0017f6  9700              STR      r7,[sp,#0]
0017f8  f7fffffe          BL       show_mess
                  |L1.6140|
;;;1715   					"       ЗАРЯД        ",
;;;1716   					"      УСПЕШНО       ",
;;;1717   					"     ЗАВЕРШЕН       ",
;;;1718   					3000);
;;;1719   		}
;;;1720   	if((vz1_stat_cnt==6)||(vz1_stat_cnt==5))
0017fc  f9b8007a          LDRSH    r0,[r8,#0x7a]  ; vz1_stat_cnt
001800  2806              CMP      r0,#6
001802  d001              BEQ      |L1.6152|
001804  2805              CMP      r0,#5
001806  d106              BNE      |L1.6166|
                  |L1.6152|
;;;1721   		{
;;;1722   		show_mess(	"     ВЫКЛЮЧИТЕ      ",
001808  a32a              ADR      r3,|L1.6324|
00180a  a230              ADR      r2,|L1.6348|
00180c  a135              ADR      r1,|L1.6372|
00180e  a08b              ADR      r0,|L1.6716|
001810  9700              STR      r7,[sp,#0]
001812  f7fffffe          BL       show_mess
                  |L1.6166|
;;;1723   					"      ТУМБЛЕР       ",
;;;1724   					"     ВЫСОКОГО       ",
;;;1725   					"    НАПРЯЖЕНИЯ      ",
;;;1726   					3000);
;;;1727   		}
;;;1728   	if(sk_stat[1]==0)
001816  7868              LDRB     r0,[r5,#1]  ; sk_stat
001818  b928              CBNZ     r0,|L1.6182|
;;;1729   		{
;;;1730   		vz1_stat=vz1sOFF;
00181a  f8886005          STRB     r6,[r8,#5]
;;;1731   		lc640_write(EE_VZ1_STAT,vz1sOFF);
00181e  2100              MOVS     r1,#0
001820  4658              MOV      r0,r11
001822  f7fffffe          BL       lc640_write
                  |L1.6182|
;;;1732   		}
;;;1733   	mess_send(MESS2RELE_HNDL,PARAM_RELE_SAMOKALIBR,0,20);
001826  2314              MOVS     r3,#0x14
001828  2200              MOVS     r2,#0
00182a  2164              MOVS     r1,#0x64
00182c  20d2              MOVS     r0,#0xd2
00182e  f7fffffe          BL       mess_send
                  |L1.6194|
;;;1734   	}
;;;1735   
;;;1736   if(vz1_stat==vz1sSTOP)		//УЗ прекращен, напоминание
001832  f8980005          LDRB     r0,[r8,#5]  ; vz1_stat
001836  2810              CMP      r0,#0x10
001838  d135              BNE      |L1.6310|
;;;1737   	{
;;;1738   	if((vz1_stat_old!=vz1_stat)||(vz1_stat_cnt==0))
00183a  f8980006          LDRB     r0,[r8,#6]  ; vz1_stat_old
00183e  2810              CMP      r0,#0x10
001840  d102              BNE      |L1.6216|
001842  f8b8007a          LDRH     r0,[r8,#0x7a]  ; vz1_stat_cnt
001846  b908              CBNZ     r0,|L1.6220|
                  |L1.6216|
;;;1739   		{
;;;1740   		vz1_stat_cnt=10;
001848  f8a8407a          STRH     r4,[r8,#0x7a]
                  |L1.6220|
;;;1741   		}
;;;1742   	vz1_stat_cnt--;
00184c  f8b8007a          LDRH     r0,[r8,#0x7a]  ; vz1_stat_cnt
001850  f1a00001          SUB      r0,r0,#1
001854  b200              SXTH     r0,r0
001856  f8a8007a          STRH     r0,[r8,#0x7a]
;;;1743   	if((vz1_stat_cnt==10)||(vz1_stat_cnt==9))
00185a  280a              CMP      r0,#0xa
00185c  d001              BEQ      |L1.6242|
00185e  2809              CMP      r0,#9
001860  d106              BNE      |L1.6256|
                  |L1.6242|
;;;1744   		{
;;;1745   		show_mess(	"   УРАВНИТЕЛЬНЫЙ    ",
001862  a37c              ADR      r3,|L1.6740|
001864  a281              ADR      r2,|L1.6764|
001866  a169              ADR      r1,|L1.6668|
001868  a06e              ADR      r0,|L1.6692|
00186a  9700              STR      r7,[sp,#0]
00186c  f7fffffe          BL       show_mess
                  |L1.6256|
;;;1746   					"       ЗАРЯД        ",
;;;1747   					"     ПРЕКРАЩЕН      ",
;;;1748   					"                    ",
;;;1749   					3000);
;;;1750   		}
;;;1751   	if((vz1_stat_cnt==6)||(vz1_stat_cnt==5))
001870  f9b8007a          LDRSH    r0,[r8,#0x7a]  ; vz1_stat_cnt
001874  2806              CMP      r0,#6
001876  d001              BEQ      |L1.6268|
001878  2805              CMP      r0,#5
00187a  d106              BNE      |L1.6282|
                  |L1.6268|
;;;1752   		{
;;;1753   		show_mess(	"     ВЫКЛЮЧИТЕ      ",
00187c  a30d              ADR      r3,|L1.6324|
00187e  a213              ADR      r2,|L1.6348|
001880  a118              ADR      r1,|L1.6372|
001882  a06e              ADR      r0,|L1.6716|
001884  9700              STR      r7,[sp,#0]
001886  f7fffffe          BL       show_mess
                  |L1.6282|
;;;1754   					"      ТУМБЛЕР       ",
;;;1755   					"     ВЫСОКОГО       ",
;;;1756   					"    НАПРЯЖЕНИЯ      ",
;;;1757   					3000);
;;;1758   		}
;;;1759   	if(sk_stat[1]==0)
00188a  7868              LDRB     r0,[r5,#1]  ; sk_stat
00188c  b928              CBNZ     r0,|L1.6298|
;;;1760   		{
;;;1761   		vz1_stat=vz1sOFF;
00188e  f8886005          STRB     r6,[r8,#5]
;;;1762   		lc640_write(EE_VZ1_STAT,vz1sOFF);
001892  2100              MOVS     r1,#0
001894  4658              MOV      r0,r11
001896  f7fffffe          BL       lc640_write
                  |L1.6298|
;;;1763   		}
;;;1764   	mess_send(MESS2RELE_HNDL,PARAM_RELE_SAMOKALIBR,0,20);
00189a  2314              MOVS     r3,#0x14
00189c  2200              MOVS     r2,#0
00189e  2164              MOVS     r1,#0x64
0018a0  20d2              MOVS     r0,#0xd2
0018a2  f7fffffe          BL       mess_send
                  |L1.6310|
;;;1765   	}
;;;1766   
;;;1767   vz1_stat_old=vz1_stat;
0018a6  f8980005          LDRB     r0,[r8,#5]  ; vz1_stat
0018aa  f8880006          STRB     r0,[r8,#6]
;;;1768   
;;;1769   
;;;1770   
;;;1771   }
0018ae  e8bd8ff8          POP      {r3-r11,pc}
0018b2  0000              DCW      0x0000
                  |L1.6324|
0018b4  20202020          DCB      "    ",205,192,207,208,223,198,197,205,200,223,"      ",0
0018b8  cdc0cfd0
0018bc  dfc6c5cd
0018c0  c8df2020
0018c4  20202020
0018c8  00      
0018c9  00                DCB      0
0018ca  00                DCB      0
0018cb  00                DCB      0
                  |L1.6348|
0018cc  20202020          DCB      "     ",194,219,209,206,202,206,195,206,"       ",0
0018d0  20c2dbd1
0018d4  cecacec3
0018d8  ce202020
0018dc  20202020
0018e0  00      
0018e1  00                DCB      0
0018e2  00                DCB      0
0018e3  00                DCB      0
                  |L1.6372|
0018e4  20202020          DCB      "      ",210,211,204,193,203,197,208,"       ",0
0018e8  2020d2d3
0018ec  ccc1cbc5
0018f0  d0202020
0018f4  20202020
0018f8  00      
0018f9  00                DCB      0
0018fa  00                DCB      0
0018fb  00                DCB      0
                  |L1.6396|
0018fc  20202020          DCB      "     ",194,202,203,222,215,200,210,197,"       ",0
001900  20c2cacb
001904  ded7c8d2
001908  c5202020
00190c  20202020
001910  00      
001911  00                DCB      0
001912  00                DCB      0
001913  00                DCB      0
                  |L1.6420|
                          DCD      ||area_number.25||+0x80
                  |L1.6424|
                          DCD      UZ_T
                  |L1.6428|
00191c  2020c1c5          DCB      "  ",193,197,199," ",194,197,205,210,200,203,223,214,200
001920  c720c2c5
001924  cdd2c8cb
001928  dfd6c8  
00192b  c8212120          DCB      200,"!!  ",0
00192f  2000    
001931  00                DCB      0
001932  00                DCB      0
001933  00                DCB      0
                  |L1.6452|
001934  20202020          DCB      "      ",194,202,203,222,215,197,205,"       ",0
001938  2020c2ca
00193c  cbded7c5
001940  cd202020
001944  20202020
001948  00      
001949  00                DCB      0
00194a  00                DCB      0
00194b  00                DCB      0
                  |L1.6476|
00194c  202020cd          DCB      "   ",205,197," ",204,206,198,197,210," ",193,219,210,220
001950  c520ccce
001954  c6c5d220
001958  c1dbd2dc
00195c  20202020          DCB      "    ",0
001960  00      
001961  00                DCB      0
001962  00                DCB      0
001963  00                DCB      0
                  |L1.6500|
001964  d3d0c0c2          DCB      211,208,192,194,205,200,210,197,203,220,205,219,201," ",199
001968  cdc8d2c5
00196c  cbdccddb
001970  c920c7  
001973  c0d0dfc4          DCB      192,208,223,196," ",0
001977  2000    
001979  00                DCB      0
00197a  00                DCB      0
00197b  00                DCB      0
                  |L1.6524|
00197c  2a202020          DCB      "*   ",210,211,204,193,203,197,208,192,"!!!     ",0
001980  d2d3ccc1
001984  cbc5d0c0
001988  21212120
00198c  20202020
001990  00      
001991  00                DCB      0
001992  00                DCB      0
001993  00                DCB      0
                  |L1.6548|
001994  2020cfce          DCB      "  ",207,206,209,203,197," ",194,202,203,222,215,197,205
001998  d1cbc520
00199c  c2cacbde
0019a0  d7c5cd  
0019a3  c8df2020          DCB      200,223,"   ",0
0019a7  2000    
0019a9  00                DCB      0
0019aa  00                DCB      0
0019ab  00                DCB      0
                  |L1.6572|
0019ac  2020c1d3          DCB      "  ",193,211,196,197,210," ",207,208,206,196,206,203,198
0019b0  c4c5d220
0019b4  cfd0cec4
0019b8  cecbc6  
0019bb  c5cd2020          DCB      197,205,"   ",0
0019bf  2000    
0019c1  00                DCB      0
0019c2  00                DCB      0
0019c3  00                DCB      0
                  |L1.6596|
0019c4  2a202020          DCB      "*    ",194,219,202,203,222,215,200,210,197,"      ",0
0019c8  20c2dbca
0019cc  cbded7c8
0019d0  d2c52020
0019d4  20202020
0019d8  00      
0019d9  00                DCB      0
0019da  00                DCB      0
0019db  00                DCB      0
                  |L1.6620|
0019dc  20202020          DCB      "     ",199,192,194,197,208,216,197,205,"       ",0
0019e0  20c7c0c2
0019e4  c5d0d8c5
0019e8  cd202020
0019ec  20202020
0019f0  00      
0019f1  00                DCB      0
0019f2  00                DCB      0
0019f3  00                DCB      0
                  |L1.6644|
0019f4  20202020          DCB      "      ",211,209,207,197,216,205,206,"       ",0
0019f8  2020d3d1
0019fc  cfc5d8cd
001a00  ce202020
001a04  20202020
001a08  00      
001a09  00                DCB      0
001a0a  00                DCB      0
001a0b  00                DCB      0
                  |L1.6668|
001a0c  20202020          DCB      "       ",199,192,208,223,196,"        ",0
001a10  202020c7
001a14  c0d0dfc4
001a18  20202020
001a1c  20202020
001a20  00      
001a21  00                DCB      0
001a22  00                DCB      0
001a23  00                DCB      0
                  |L1.6692|
001a24  202020d3          DCB      "   ",211,208,192,194,205,200,210,197,203,220,205,219,201
001a28  d0c0c2cd
001a2c  c8d2c5cb
001a30  dccddbc9
001a34  20202020          DCB      "    ",0
001a38  00      
001a39  00                DCB      0
001a3a  00                DCB      0
001a3b  00                DCB      0
                  |L1.6716|
001a3c  20202020          DCB      "     ",194,219,202,203,222,215,200,210,197,"      ",0
001a40  20c2dbca
001a44  cbded7c8
001a48  d2c52020
001a4c  20202020
001a50  00      
001a51  00                DCB      0
001a52  00                DCB      0
001a53  00                DCB      0
                  |L1.6740|
001a54  20202020          DCB      "                    ",0
001a58  20202020
001a5c  20202020
001a60  20202020
001a64  20202020
001a68  00      
001a69  00                DCB      0
001a6a  00                DCB      0
001a6b  00                DCB      0
                  |L1.6764|
001a6c  20202020          DCB      "     ",207,208,197,202,208,192,217,197,205,"      ",0
001a70  20cfd0c5
001a74  cad0c0d9
001a78  c5cd2020
001a7c  20202020
001a80  00      
001a81  00                DCB      0
001a82  00                DCB      0
001a83  00                DCB      0
                          ENDP

                  vz1_start PROC
;;;1774   //старт уравнительног заряда
;;;1775   char vz1_start(char hour)
001a84  b510              PUSH     {r4,lr}
;;;1776   {          
;;;1777   char out;
;;;1778   out=0;
001a86  f04f0000          MOV      r0,#0
;;;1779   if((spc_stat==spcOFF)&&(speedChrgBlckStat!=1)&&(vz1_stat==vz1sOFF))
001a8a  49fe              LDR      r1,|L1.7812|
001a8c  f8912023          LDRB     r2,[r1,#0x23]  ; spc_stat
001a90  2a00              CMP      r2,#0
001a92  d110              BNE      |L1.6838|
001a94  4afc              LDR      r2,|L1.7816|
001a96  8812              LDRH     r2,[r2,#0]  ; speedChrgBlckStat
001a98  2a01              CMP      r2,#1
001a9a  d00c              BEQ      |L1.6838|
001a9c  794a              LDRB     r2,[r1,#5]  ; vz1_stat
001a9e  2a00              CMP      r2,#0
001aa0  d109              BNE      |L1.6838|
;;;1780   	{
;;;1781   	if(vz1_stat==vz1sOFF)
;;;1782   		{
;;;1783   		vz1_stat=vz1sSTEP1;
001aa2  f04f0001          MOV      r0,#1
001aa6  7148              STRB     r0,[r1,#5]
;;;1784   		lc640_write(EE_VZ1_STAT,vz1sSTEP1);
001aa8  4601              MOV      r1,r0
001aaa  f44f70c9          MOV      r0,#0x192
001aae  f7fffffe          BL       lc640_write
;;;1785   		out=1;
001ab2  f04f0001          MOV      r0,#1
                  |L1.6838|
;;;1786   		
;;;1787   		}
;;;1788   /*	spc_stat=spcVZ;
;;;1789   	__ee_spc_stat=spcVZ; 
;;;1790   	lc640_write_int(EE_SPC_STAT,__ee_spc_stat);   
;;;1791   	vz_cnt_h=hour;
;;;1792   	__ee_vz_cnt=hour*60;
;;;1793   	if(hour==0)__ee_vz_cnt=30;
;;;1794   	lc640_write_int(EE_VZ_CNT,__ee_vz_cnt);
;;;1795   	lc640_write_int(EE_SPC_VZ_LENGT,__ee_vz_cnt);	
;;;1796   	vz_cnt_h_=0;
;;;1797   	vz_cnt_s=0;
;;;1798   	vz_cnt_s_=0;
;;;1799   	
;;;1800   		*/
;;;1801   	}
;;;1802   //else if((spc_stat==spc_KE1p1)||(spc_stat==spc_KE1p2)) out=22; 
;;;1803   //else if((spc_stat==spc_KE2p1)||(spc_stat==spc_KE2p2)) out=33;
;;;1804   //plazma=out;	
;;;1805   return out;
;;;1806   }
001ab6  bd10              POP      {r4,pc}
;;;1807   
                          ENDP

                  vz1_stop PROC
;;;1809   //стоп уравнительног заряда
;;;1810   void vz1_stop(void)
001ab8  48f2              LDR      r0,|L1.7812|
;;;1811   {
;;;1812   if(vz1_stat!=vz1sOFF)
001aba  7941              LDRB     r1,[r0,#5]  ; vz1_stat
001abc  2900              CMP      r1,#0
001abe  d006              BEQ      |L1.6862|
;;;1813   	{
;;;1814   	vz1_stat=vz1sSTOP;
001ac0  f04f0110          MOV      r1,#0x10
001ac4  7141              STRB     r1,[r0,#5]
;;;1815   	lc640_write(EE_VZ1_STAT,vz1sSTOP);
001ac6  f44f70c9          MOV      r0,#0x192
001aca  f7ffbffe          B.W      lc640_write
                  |L1.6862|
;;;1816   	}
;;;1817   }
001ace  4770              BX       lr
;;;1818   
                          ENDP

                  vz2_drv PROC
;;;1820   //драйвер формовочного заряда
;;;1821   void vz2_drv(void)
001ad0  e92d4ff8          PUSH     {r3-r11,lr}
;;;1822   {
;;;1823   
;;;1824   if(vz2_stat==vz2sSTEP1)
001ad4  f8df83ac          LDR      r8,|L1.7812|
;;;1825   	{
;;;1826   	if(vz2_stat_old!=vz2_stat)
;;;1827   		{
;;;1828   		vz2_stat_cnt=5;
;;;1829   		}
;;;1830   	if(vz2_stat_cnt)
;;;1831   		{
;;;1832   		vz2_stat_cnt--;
;;;1833   		if(vz2_stat_cnt==0)
;;;1834   			{
;;;1835   			vz2_stat=vz2sERR1; 	//Не включилась вентиляция;
;;;1836   			lc640_write(EE_VZ2_STAT,vz2sERR1);
;;;1837   			}
;;;1838   		}
;;;1839   	if(sk_stat[0]==1)
001ad8  4dec              LDR      r5,|L1.7820|
001ada  f8980007          LDRB     r0,[r8,#7]            ;1824  ; vz2_stat
001ade  2801              CMP      r0,#1                 ;1824
001ae0  d13b              BNE      |L1.7002|
001ae2  f8980008          LDRB     r0,[r8,#8]            ;1826  ; vz2_stat_old
001ae6  2801              CMP      r0,#1                 ;1826
001ae8  d003              BEQ      |L1.6898|
001aea  f04f0005          MOV      r0,#5                 ;1828
001aee  f8a8007e          STRH     r0,[r8,#0x7e]         ;1828
                  |L1.6898|
001af2  f9b8007e          LDRSH    r0,[r8,#0x7e]         ;1830  ; vz2_stat_cnt
001af6  b170              CBZ      r0,|L1.6934|
001af8  f1a00001          SUB      r0,r0,#1              ;1832
001afc  b200              SXTH     r0,r0                 ;1832
001afe  f8a8007e          STRH     r0,[r8,#0x7e]         ;1832
001b02  b940              CBNZ     r0,|L1.6934|
001b04  f04f000c          MOV      r0,#0xc               ;1835
001b08  f8880007          STRB     r0,[r8,#7]            ;1835
001b0c  4601              MOV      r1,r0                 ;1836
001b0e  f44f70ca          MOV      r0,#0x194             ;1836
001b12  f7fffffe          BL       lc640_write
                  |L1.6934|
001b16  7828              LDRB     r0,[r5,#0]  ; sk_stat
001b18  2801              CMP      r0,#1
001b1a  d118              BNE      |L1.6990|
;;;1840   		{
;;;1841   		vz2_stat=vz2sSTEP2;
001b1c  f04f0002          MOV      r0,#2
001b20  f8880007          STRB     r0,[r8,#7]
;;;1842   		lc640_write(EE_VZ2_STAT,vz2sSTEP2);
001b24  4601              MOV      r1,r0
001b26  f44f70ca          MOV      r0,#0x194
001b2a  f7fffffe          BL       lc640_write
;;;1843   		tree_up(iVZ2_STEP2_2,1,0,0);
001b2e  2300              MOVS     r3,#0
001b30  461a              MOV      r2,r3
001b32  2101              MOVS     r1,#1
001b34  20e1              MOVS     r0,#0xe1
001b36  f7fffffe          BL       tree_up
;;;1844   		tree_up(iVZ2_STEP2_1,0,0,0);
001b3a  2300              MOVS     r3,#0
001b3c  461a              MOV      r2,r3
001b3e  4619              MOV      r1,r3
001b40  20e0              MOVS     r0,#0xe0
001b42  f7fffffe          BL       tree_up
;;;1845   		ret(1200);
001b46  f44f6096          MOV      r0,#0x4b0
001b4a  f7fffffe          BL       ||ret||
                  |L1.6990|
;;;1846   		}
;;;1847   	mess_send(MESS2RELE_HNDL,PARAM_RELE_SAMOKALIBR,0,20);
001b4e  2314              MOVS     r3,#0x14
001b50  2200              MOVS     r2,#0
001b52  2164              MOVS     r1,#0x64
001b54  20d2              MOVS     r0,#0xd2
001b56  f7fffffe          BL       mess_send
                  |L1.7002|
;;;1848   	}
;;;1849   
;;;1850   if(vz2_stat==vz2sSTEP2)
001b5a  f8980007          LDRB     r0,[r8,#7]  ; vz2_stat
001b5e  2802              CMP      r0,#2
001b60  d11a              BNE      |L1.7064|
;;;1851   	{
;;;1852   	if((vz2_stat_old!=vz2_stat)||(vz2_stat_cnt==0))
001b62  f8980008          LDRB     r0,[r8,#8]  ; vz2_stat_old
001b66  2802              CMP      r0,#2
001b68  d102              BNE      |L1.7024|
001b6a  f8b8007e          LDRH     r0,[r8,#0x7e]  ; vz2_stat_cnt
001b6e  b918              CBNZ     r0,|L1.7032|
                  |L1.7024|
;;;1853   		{
;;;1854   		vz2_stat_cnt=15;
001b70  f04f000f          MOV      r0,#0xf
001b74  f8a8007e          STRH     r0,[r8,#0x7e]
                  |L1.7032|
;;;1855   		}
;;;1856   	vz2_stat_cnt--;
001b78  f8b8007e          LDRH     r0,[r8,#0x7e]  ; vz2_stat_cnt
001b7c  f1a00001          SUB      r0,r0,#1
001b80  f8a8007e          STRH     r0,[r8,#0x7e]
;;;1857   	mess_send(MESS2RELE_HNDL,PARAM_RELE_SAMOKALIBR,0,20);
001b84  f04f0314          MOV      r3,#0x14
001b88  f04f0200          MOV      r2,#0
001b8c  f04f0164          MOV      r1,#0x64
001b90  f04f00d2          MOV      r0,#0xd2
001b94  f7fffffe          BL       mess_send
                  |L1.7064|
;;;1858   	}
;;;1859   
;;;1860   if(vz2_stat==vz2sSTEP3)
001b98  f8980007          LDRB     r0,[r8,#7]  ; vz2_stat
;;;1861   	{
;;;1862   	if((vz2_stat_old!=vz2_stat)||(vz2_stat_cnt==0))
;;;1863   		{
;;;1864   		vz2_stat_cnt=10;
001b9c  240a              MOVS     r4,#0xa
001b9e  2600              MOVS     r6,#0
;;;1865   		cntrl_stat=0;
;;;1866   		cntrl_stat_new=0;
;;;1867   		cntrl_stat_old=0;
;;;1868   		}
;;;1869   	vz2_stat_cnt--;
;;;1870   	if((vz2_stat_cnt==10)||(vz2_stat_cnt==9))
;;;1871   		{
;;;1872   		show_mess(	"     ВКЛЮЧИТЕ       ",
001ba0  f2413788          MOV      r7,#0x1388
001ba4  2803              CMP      r0,#3                 ;1860
001ba6  d13e              BNE      |L1.7206|
001ba8  f8980008          LDRB     r0,[r8,#8]            ;1862  ; vz2_stat_old
001bac  2803              CMP      r0,#3                 ;1862
001bae  d102              BNE      |L1.7094|
001bb0  f8b8007e          LDRH     r0,[r8,#0x7e]         ;1862  ; vz2_stat_cnt
001bb4  b938              CBNZ     r0,|L1.7110|
                  |L1.7094|
001bb6  f8a8407e          STRH     r4,[r8,#0x7e]         ;1864
001bba  f8a86032          STRH     r6,[r8,#0x32]         ;1865
001bbe  f8a86048          STRH     r6,[r8,#0x48]         ;1866
001bc2  f8a86034          STRH     r6,[r8,#0x34]         ;1867
                  |L1.7110|
001bc6  f8b8007e          LDRH     r0,[r8,#0x7e]         ;1869  ; vz2_stat_cnt
001bca  f1a00001          SUB      r0,r0,#1              ;1869
001bce  b200              SXTH     r0,r0                 ;1869
001bd0  f8a8007e          STRH     r0,[r8,#0x7e]         ;1869
001bd4  280a              CMP      r0,#0xa               ;1870
001bd6  d001              BEQ      |L1.7132|
001bd8  2809              CMP      r0,#9                 ;1870
001bda  d10a              BNE      |L1.7154|
                  |L1.7132|
001bdc  f2af332c          ADR      r3,|L1.6324|
001be0  f2af3218          ADR      r2,|L1.6348|
001be4  f2af3104          ADR      r1,|L1.6372|
001be8  f2af20f0          ADR      r0,|L1.6396|
001bec  9700              STR      r7,[sp,#0]
001bee  f7fffffe          BL       show_mess
                  |L1.7154|
;;;1873   					"      ТУМБЛЕР       ",
;;;1874   					"     ВЫСОКОГО       ",
;;;1875   					"    НАПРЯЖЕНИЯ      ",
;;;1876   					5000);
;;;1877   		}
;;;1878   	if(sk_stat[1]==1)
001bf2  7868              LDRB     r0,[r5,#1]  ; sk_stat
001bf4  2801              CMP      r0,#1
001bf6  d110              BNE      |L1.7194|
;;;1879   		{
;;;1880   		vz2_stat=vz2sWRK1;
001bf8  f8884007          STRB     r4,[r8,#7]
;;;1881   		lc640_write(EE_VZ2_STAT,vz2sWRK1);
001bfc  210a              MOVS     r1,#0xa
001bfe  f44f70ca          MOV      r0,#0x194
001c02  f7fffffe          BL       lc640_write
;;;1882   		volt_region=1;
001c06  f04f0001          MOV      r0,#1
001c0a  f888002f          STRB     r0,[r8,#0x2f]
;;;1883   		cntrl_stat=0;
001c0e  f8a86032          STRH     r6,[r8,#0x32]
;;;1884   		cntrl_stat_new=0;
001c12  f8a86048          STRH     r6,[r8,#0x48]
;;;1885   		cntrl_stat_old=0;
001c16  f8a86034          STRH     r6,[r8,#0x34]
                  |L1.7194|
;;;1886   		}
;;;1887   	mess_send(MESS2RELE_HNDL,PARAM_RELE_SAMOKALIBR,0,20);
001c1a  2314              MOVS     r3,#0x14
001c1c  2200              MOVS     r2,#0
001c1e  2164              MOVS     r1,#0x64
001c20  20d2              MOVS     r0,#0xd2
001c22  f7fffffe          BL       mess_send
                  |L1.7206|
;;;1888   	}
;;;1889   
;;;1890   if(vz2_stat==vz2sWRK1)
001c26  f8980007          LDRB     r0,[r8,#7]  ; vz2_stat
;;;1891   	{
;;;1892   
;;;1893   	if(vz2_stat_old!=vz2_stat)
;;;1894   		{
;;;1895   		vz2_wrk_cnt=3600L/*100L*/*((long)FZ_T1);
001c2a  f8df9258          LDR      r9,|L1.7812|
;;;1896   		//if(VZ_HR==0)  	hv_vz_wrk_cnt=1800L;
;;;1897   		vz2_up_cnt=0L;
;;;1898   
;;;1899   		}
;;;1900   	vz2_wrk_cnt--;
;;;1901   	vz2_up_cnt++;
;;;1902   
;;;1903   	if(vz2_wrk_cnt==0)
;;;1904   		{
;;;1905   		vz2_stat=vz2sWRK2;
;;;1906   		lc640_write(EE_VZ2_STAT,vz2sWRK2);
;;;1907   		}
;;;1908   	if(sk_stat[0]==0)
;;;1909   		{
;;;1910   		vz2_stat=vz2sERR2;
;;;1911   		lc640_write(EE_VZ2_STAT,vz2sERR2);
;;;1912   		}
;;;1913   	if(sk_stat[1]==0)
;;;1914   		{
;;;1915   		vz2_stat=vz2sERR3;
;;;1916   		lc640_write(EE_VZ2_STAT,vz2sERR3);
;;;1917   		}
;;;1918   	//if(abs(out_U-FZ_U1)<10)
;;;1919   	if((out_U<(FZ_U1+30))&&(out_U>(FZ_U1-10)))
;;;1920   		{
;;;1921   		if((Ib_ips_termokompensat/10)<FZ_ISW12)
;;;1922   			{
;;;1923   			if(vz2_stat_ph2_cnt)
;;;1924   				{
;;;1925   				vz2_stat_ph2_cnt--;
;;;1926   				if(vz2_stat_ph2_cnt==0)
;;;1927   					{
;;;1928   					vz2_stat=vz2sWRK2;
;;;1929   					lc640_write(EE_VZ2_STAT,vz2sWRK2);
;;;1930   					}
;;;1931   				}
;;;1932   			}
;;;1933   		else
;;;1934   			{
;;;1935   			vz2_stat_ph2_cnt=60;
;;;1936   			}
;;;1937   		}
;;;1938   	else
;;;1939   		{
;;;1940   		vz2_stat_ph2_cnt=60;
;;;1941   		}
;;;1942   	if(((Ibmax/10)>IZMAX_)&&(cntrl_stat<=20)&&(volt_region==1)&&(volt_region_cnt==0))
;;;1943   		{
;;;1944   		volt_region=0;
;;;1945   		cntrl_stat=1000;
001c2e  f44f7b7a          MOV      r11,#0x3e8
001c32  f1090980          ADD      r9,r9,#0x80           ;1895
001c36  f04f0a0b          MOV      r10,#0xb              ;1905
001c3a  280a              CMP      r0,#0xa               ;1890
001c3c  d17e              BNE      |L1.7484|
001c3e  f8980008          LDRB     r0,[r8,#8]            ;1893  ; vz2_stat_old
001c42  280a              CMP      r0,#0xa               ;1893
001c44  d00a              BEQ      |L1.7260|
001c46  4892              LDR      r0,|L1.7824|
001c48  f44f6161          MOV      r1,#0xe10             ;1895
001c4c  f9b00000          LDRSH    r0,[r0,#0]            ;1895  ; FZ_T1
001c50  fb00f001          MUL      r0,r0,r1              ;1895
001c54  f8c90044          STR      r0,[r9,#0x44]         ;1895  ; vz2_wrk_cnt
001c58  f8c96048          STR      r6,[r9,#0x48]         ;1897  ; vz2_up_cnt
                  |L1.7260|
001c5c  f8d90044          LDR      r0,[r9,#0x44]         ;1900  ; vz2_wrk_cnt
001c60  f1a00001          SUB      r0,r0,#1              ;1900
001c64  f8c90044          STR      r0,[r9,#0x44]         ;1900  ; vz2_wrk_cnt
001c68  f8d91048          LDR      r1,[r9,#0x48]         ;1901  ; vz2_up_cnt
001c6c  f1010101          ADD      r1,r1,#1              ;1901
001c70  f8c91048          STR      r1,[r9,#0x48]         ;1901  ; vz2_up_cnt
001c74  b930              CBNZ     r0,|L1.7300|
001c76  f888a007          STRB     r10,[r8,#7]           ;1905
001c7a  210b              MOVS     r1,#0xb               ;1906
001c7c  f44f70ca          MOV      r0,#0x194             ;1906
001c80  f7fffffe          BL       lc640_write
                  |L1.7300|
001c84  7828              LDRB     r0,[r5,#0]            ;1908  ; sk_stat
001c86  b940              CBNZ     r0,|L1.7322|
001c88  f04f000d          MOV      r0,#0xd               ;1910
001c8c  f8880007          STRB     r0,[r8,#7]            ;1910
001c90  4601              MOV      r1,r0                 ;1911
001c92  f44f70ca          MOV      r0,#0x194             ;1911
001c96  f7fffffe          BL       lc640_write
                  |L1.7322|
001c9a  7868              LDRB     r0,[r5,#1]            ;1913  ; sk_stat
001c9c  b940              CBNZ     r0,|L1.7344|
001c9e  f04f000e          MOV      r0,#0xe               ;1915
001ca2  f8880007          STRB     r0,[r8,#7]            ;1915
001ca6  4601              MOV      r1,r0                 ;1916
001ca8  f44f70ca          MOV      r0,#0x194             ;1916
001cac  f7fffffe          BL       lc640_write
                  |L1.7344|
001cb0  4979              LDR      r1,|L1.7832|
001cb2  4878              LDR      r0,|L1.7828|
001cb4  233c              MOVS     r3,#0x3c              ;1935
001cb6  f9b11000          LDRSH    r1,[r1,#0]            ;1919  ; FZ_U1
001cba  f9b00000          LDRSH    r0,[r0,#0]            ;1919  ; out_U
001cbe  f101021e          ADD      r2,r1,#0x1e           ;1919
001cc2  4290              CMP      r0,r2                 ;1919
001cc4  da20              BGE      |L1.7432|
001cc6  390a              SUBS     r1,r1,#0xa            ;1919
001cc8  4288              CMP      r0,r1                 ;1919
001cca  dd1d              BLE      |L1.7432|
001ccc  4873              LDR      r0,|L1.7836|
001cce  4974              LDR      r1,|L1.7840|
001cd0  f9b00000          LDRSH    r0,[r0,#0]            ;1921  ; Ib_ips_termokompensat
001cd4  f9b11000          LDRSH    r1,[r1,#0]            ;1921  ; FZ_ISW12
001cd8  fb90f0f4          SDIV     r0,r0,r4              ;1921
001cdc  4288              CMP      r0,r1                 ;1921
001cde  da10              BGE      |L1.7426|
001ce0  f9b90000          LDRSH    r0,[r9,#0]            ;1923  ; vz2_stat_ph2_cnt
001ce4  b190              CBZ      r0,|L1.7436|
001ce6  f1a00001          SUB      r0,r0,#1              ;1925
001cea  b200              SXTH     r0,r0                 ;1925
001cec  f8a90000          STRH     r0,[r9,#0]            ;1925
001cf0  b960              CBNZ     r0,|L1.7436|
001cf2  f888a007          STRB     r10,[r8,#7]           ;1928
001cf6  210b              MOVS     r1,#0xb               ;1929
001cf8  f44f70ca          MOV      r0,#0x194             ;1929
001cfc  f7fffffe          BL       lc640_write
001d00  e004              B        |L1.7436|
                  |L1.7426|
001d02  f8a93000          STRH     r3,[r9,#0]            ;1935
001d06  e001              B        |L1.7436|
                  |L1.7432|
001d08  f8a93000          STRH     r3,[r9,#0]            ;1940
                  |L1.7436|
001d0c  f9b8004a          LDRSH    r0,[r8,#0x4a]         ;1942  ; Ibmax
001d10  f8b8104c          LDRH     r1,[r8,#0x4c]         ;1942  ; IZMAX_
001d14  fb90f0f4          SDIV     r0,r0,r4              ;1942
001d18  4288              CMP      r0,r1                 ;1942
001d1a  dd18              BLE      |L1.7502|
001d1c  f9b82032          LDRSH    r2,[r8,#0x32]         ;1942  ; cntrl_stat
001d20  2a14              CMP      r2,#0x14              ;1942
001d22  dc14              BGT      |L1.7502|
001d24  f898202f          LDRB     r2,[r8,#0x2f]         ;1942  ; volt_region
001d28  2a01              CMP      r2,#1                 ;1942
001d2a  d110              BNE      |L1.7502|
001d2c  f8b8207c          LDRH     r2,[r8,#0x7c]         ;1942  ; volt_region_cnt
001d30  b96a              CBNZ     r2,|L1.7502|
001d32  f888602f          STRB     r6,[r8,#0x2f]         ;1944
001d36  f8a8b032          STRH     r11,[r8,#0x32]
;;;1946   		cntrl_stat_new=1000;
001d3a  e000              B        |L1.7486|
                  |L1.7484|
001d3c  e032              B        |L1.7588|
                  |L1.7486|
001d3e  f8a8b048          STRH     r11,[r8,#0x48]
;;;1947   		cntrl_stat_old=1000;
001d42  f8a8b034          STRH     r11,[r8,#0x34]
;;;1948   		volt_region_cnt=110;
001d46  f04f026e          MOV      r2,#0x6e
001d4a  f8a8207c          STRH     r2,[r8,#0x7c]
                  |L1.7502|
;;;1949   		}
;;;1950   	if(((Ibmax/10)<IZMAX_)&&(cntrl_stat>=1000)&&(volt_region==0)&&(volt_region_cnt==0))
001d4e  4288              CMP      r0,r1
001d50  da15              BGE      |L1.7550|
001d52  f9b80032          LDRSH    r0,[r8,#0x32]  ; cntrl_stat
001d56  4558              CMP      r0,r11
001d58  db11              BLT      |L1.7550|
001d5a  f898002f          LDRB     r0,[r8,#0x2f]  ; volt_region
001d5e  b970              CBNZ     r0,|L1.7550|
001d60  f8b8007c          LDRH     r0,[r8,#0x7c]  ; volt_region_cnt
001d64  b958              CBNZ     r0,|L1.7550|
;;;1951   		{
;;;1952   		volt_region=1;
001d66  f04f0001          MOV      r0,#1
001d6a  f888002f          STRB     r0,[r8,#0x2f]
;;;1953   		cntrl_stat=10;
001d6e  f8a84032          STRH     r4,[r8,#0x32]
;;;1954   		cntrl_stat_new=10;
001d72  f8a84048          STRH     r4,[r8,#0x48]
;;;1955   		cntrl_stat_old=10;
001d76  f8a84034          STRH     r4,[r8,#0x34]
;;;1956   		volt_region_cnt=10;
001d7a  f8a8407c          STRH     r4,[r8,#0x7c]
                  |L1.7550|
;;;1957   		}
;;;1958   	if(volt_region==0) 		mess_send(MESS2RELE_HNDL,PARAM_RELE_SAMOKALIBR,0,20);
001d7e  f898002f          LDRB     r0,[r8,#0x2f]  ; volt_region
001d82  b110              CBZ      r0,|L1.7562|
;;;1959   	else if(volt_region==1) mess_send(MESS2RELE_HNDL,PARAM_RELE_SAMOKALIBR,1,20);
001d84  2801              CMP      r0,#1
001d86  d007              BEQ      |L1.7576|
001d88  e00c              B        |L1.7588|
                  |L1.7562|
001d8a  2314              MOVS     r3,#0x14              ;1958
001d8c  2200              MOVS     r2,#0                 ;1958
001d8e  2164              MOVS     r1,#0x64              ;1958
001d90  20d2              MOVS     r0,#0xd2              ;1958
001d92  f7fffffe          BL       mess_send
001d96  e005              B        |L1.7588|
                  |L1.7576|
001d98  2314              MOVS     r3,#0x14
001d9a  2201              MOVS     r2,#1
001d9c  2164              MOVS     r1,#0x64
001d9e  20d2              MOVS     r0,#0xd2
001da0  f7fffffe          BL       mess_send
                  |L1.7588|
;;;1960   	}
;;;1961   
;;;1962   if(vz2_stat==vz2sWRK2)
001da4  f8980007          LDRB     r0,[r8,#7]  ; vz2_stat
001da8  280b              CMP      r0,#0xb
001daa  d17d              BNE      |L1.7848|
;;;1963   	{
;;;1964   	if(vz2_stat_old!=vz2_stat)
001dac  f8980008          LDRB     r0,[r8,#8]  ; vz2_stat_old
001db0  280b              CMP      r0,#0xb
001db2  d008              BEQ      |L1.7622|
;;;1965   		{
;;;1966   		vz2_wrk_cnt=3600L/*100L*/*((long)FZ_T2);
001db4  483b              LDR      r0,|L1.7844|
001db6  f44f6161          MOV      r1,#0xe10
001dba  f9b00000          LDRSH    r0,[r0,#0]  ; FZ_T2
001dbe  fb00f001          MUL      r0,r0,r1
001dc2  f8c90044          STR      r0,[r9,#0x44]  ; vz2_wrk_cnt
                  |L1.7622|
;;;1967   		//if(VZ_HR==0)  	hv_vz_wrk_cnt=1800L;
;;;1968   		//vz2_up_cnt=0L;
;;;1969   		}
;;;1970   	vz2_wrk_cnt--;
001dc6  f8d90044          LDR      r0,[r9,#0x44]  ; vz2_wrk_cnt
001dca  f1a00001          SUB      r0,r0,#1
001dce  f8c90044          STR      r0,[r9,#0x44]  ; vz2_wrk_cnt
;;;1971   	vz2_up_cnt++;
001dd2  f8d91048          LDR      r1,[r9,#0x48]  ; vz2_up_cnt
001dd6  f1010101          ADD      r1,r1,#1
001dda  f8c91048          STR      r1,[r9,#0x48]  ; vz2_up_cnt
;;;1972   
;;;1973   	if(vz2_wrk_cnt==0)
001dde  b958              CBNZ     r0,|L1.7672|
;;;1974   		{
;;;1975   		vz2_stat=vz2sFINE;
001de0  f04f0012          MOV      r0,#0x12
001de4  f8880007          STRB     r0,[r8,#7]
;;;1976   		lc640_write(EE_VZ2_STAT,vz2sFINE);
001de8  4601              MOV      r1,r0
001dea  f44f70ca          MOV      r0,#0x194
001dee  f7fffffe          BL       lc640_write
;;;1977   		fz_mem_hndl(0);
001df2  2000              MOVS     r0,#0
001df4  f7fffffe          BL       fz_mem_hndl
                  |L1.7672|
;;;1978   		}
;;;1979   	if(sk_stat[0]==0)
001df8  7828              LDRB     r0,[r5,#0]  ; sk_stat
001dfa  b940              CBNZ     r0,|L1.7694|
;;;1980   		{
;;;1981   		vz2_stat=vz2sERR5;
001dfc  f04f0010          MOV      r0,#0x10
001e00  f8880007          STRB     r0,[r8,#7]
;;;1982   		lc640_write(EE_VZ2_STAT,vz2sERR5);
001e04  4601              MOV      r1,r0
001e06  f44f70ca          MOV      r0,#0x194
001e0a  f7fffffe          BL       lc640_write
                  |L1.7694|
;;;1983   		}
;;;1984   	if(sk_stat[1]==0)
001e0e  7868              LDRB     r0,[r5,#1]  ; sk_stat
001e10  b940              CBNZ     r0,|L1.7716|
;;;1985   		{
;;;1986   		vz2_stat=vz2sERR6;
001e12  f04f0011          MOV      r0,#0x11
001e16  f8880007          STRB     r0,[r8,#7]
;;;1987   		lc640_write(EE_VZ2_STAT,vz2sERR6);
001e1a  4601              MOV      r1,r0
001e1c  f44f70ca          MOV      r0,#0x194
001e20  f7fffffe          BL       lc640_write
                  |L1.7716|
;;;1988   		}
;;;1989   	if(((Ibmax/10)>IZMAX_)&&(cntrl_stat<=20)&&(volt_region==1)&&(volt_region_cnt==0))
001e24  f9b8004a          LDRSH    r0,[r8,#0x4a]  ; Ibmax
001e28  f8b8104c          LDRH     r1,[r8,#0x4c]  ; IZMAX_
001e2c  fb90f0f4          SDIV     r0,r0,r4
001e30  4288              CMP      r0,r1
001e32  dd16              BLE      |L1.7778|
001e34  f9b82032          LDRSH    r2,[r8,#0x32]  ; cntrl_stat
001e38  2a14              CMP      r2,#0x14
001e3a  dc12              BGT      |L1.7778|
001e3c  f898202f          LDRB     r2,[r8,#0x2f]  ; volt_region
001e40  2a01              CMP      r2,#1
001e42  d10e              BNE      |L1.7778|
001e44  f8b8207c          LDRH     r2,[r8,#0x7c]  ; volt_region_cnt
001e48  b95a              CBNZ     r2,|L1.7778|
;;;1990   		{
;;;1991   		volt_region=0;
001e4a  f888602f          STRB     r6,[r8,#0x2f]
;;;1992   		cntrl_stat=1000;
001e4e  f8a8b032          STRH     r11,[r8,#0x32]
;;;1993   		cntrl_stat_new=1000;
001e52  f8a8b048          STRH     r11,[r8,#0x48]
;;;1994   		cntrl_stat_old=1000;
001e56  f8a8b034          STRH     r11,[r8,#0x34]
;;;1995   		volt_region_cnt=110;
001e5a  f04f026e          MOV      r2,#0x6e
001e5e  f8a8207c          STRH     r2,[r8,#0x7c]
                  |L1.7778|
;;;1996   		}
;;;1997   	if(((Ibmax/10)<IZMAX_)&&(cntrl_stat>=1000)&&(volt_region==0)&&(volt_region_cnt==0))
001e62  4288              CMP      r0,r1
001e64  da29              BGE      |L1.7866|
001e66  f9b80032          LDRSH    r0,[r8,#0x32]  ; cntrl_stat
001e6a  4558              CMP      r0,r11
001e6c  db25              BLT      |L1.7866|
001e6e  f898002f          LDRB     r0,[r8,#0x2f]  ; volt_region
001e72  bb10              CBNZ     r0,|L1.7866|
001e74  f8b8007c          LDRH     r0,[r8,#0x7c]  ; volt_region_cnt
001e78  b9f8              CBNZ     r0,|L1.7866|
;;;1998   		{
;;;1999   		volt_region=1;
001e7a  f04f0001          MOV      r0,#1
001e7e  f888002f          STRB     r0,[r8,#0x2f]
;;;2000   		cntrl_stat=10;
001e82  e012              B        |L1.7850|
                  |L1.7812|
                          DCD      ||area_number.25||
                  |L1.7816|
                          DCD      speedChrgBlckStat
                  |L1.7820|
                          DCD      sk_stat
                  |L1.7824|
                          DCD      FZ_T1
                  |L1.7828|
                          DCD      out_U
                  |L1.7832|
                          DCD      FZ_U1
                  |L1.7836|
                          DCD      Ib_ips_termokompensat
                  |L1.7840|
                          DCD      FZ_ISW12
                  |L1.7844|
                          DCD      FZ_T2
                  |L1.7848|
001ea8  e01a              B        |L1.7904|
                  |L1.7850|
001eaa  f8a84032          STRH     r4,[r8,#0x32]
;;;2001   		cntrl_stat_new=10;
001eae  f8a84048          STRH     r4,[r8,#0x48]
;;;2002   		cntrl_stat_old=10;
001eb2  f8a84034          STRH     r4,[r8,#0x34]
;;;2003   		volt_region_cnt=10;
001eb6  f8a8407c          STRH     r4,[r8,#0x7c]
                  |L1.7866|
;;;2004   		}
;;;2005   	if(volt_region==0) 		mess_send(MESS2RELE_HNDL,PARAM_RELE_SAMOKALIBR,0,20);
001eba  f898002f          LDRB     r0,[r8,#0x2f]  ; volt_region
001ebe  b110              CBZ      r0,|L1.7878|
;;;2006   	else if(volt_region==1) mess_send(MESS2RELE_HNDL,PARAM_RELE_SAMOKALIBR,1,20);
001ec0  2801              CMP      r0,#1
001ec2  d007              BEQ      |L1.7892|
001ec4  e00c              B        |L1.7904|
                  |L1.7878|
001ec6  2314              MOVS     r3,#0x14              ;2005
001ec8  2200              MOVS     r2,#0                 ;2005
001eca  2164              MOVS     r1,#0x64              ;2005
001ecc  20d2              MOVS     r0,#0xd2              ;2005
001ece  f7fffffe          BL       mess_send
001ed2  e005              B        |L1.7904|
                  |L1.7892|
001ed4  2314              MOVS     r3,#0x14
001ed6  2201              MOVS     r2,#1
001ed8  2164              MOVS     r1,#0x64
001eda  20d2              MOVS     r0,#0xd2
001edc  f7fffffe          BL       mess_send
                  |L1.7904|
;;;2007   	}
;;;2008   
;;;2009   if(vz2_stat==vz2sERR1)		//Отсутствует вентиляция при включении
001ee0  f8980007          LDRB     r0,[r8,#7]  ; vz2_stat
001ee4  280c              CMP      r0,#0xc
001ee6  d123              BNE      |L1.7984|
;;;2010   	{
;;;2011   	if((vz2_stat_old!=vz2_stat)||(vz2_stat_cnt==0))
001ee8  f8980008          LDRB     r0,[r8,#8]  ; vz2_stat_old
001eec  280c              CMP      r0,#0xc
001eee  d102              BNE      |L1.7926|
001ef0  f8b8007e          LDRH     r0,[r8,#0x7e]  ; vz2_stat_cnt
001ef4  b908              CBNZ     r0,|L1.7930|
                  |L1.7926|
;;;2012   		{
;;;2013   		vz2_stat_cnt=10;
001ef6  f8a8407e          STRH     r4,[r8,#0x7e]
                  |L1.7930|
;;;2014   		}
;;;2015   	vz2_stat_cnt--;
001efa  f8b8007e          LDRH     r0,[r8,#0x7e]  ; vz2_stat_cnt
001efe  f1a00001          SUB      r0,r0,#1
001f02  b200              SXTH     r0,r0
001f04  f8a8007e          STRH     r0,[r8,#0x7e]
;;;2016   	if((vz2_stat_cnt==10)||(vz2_stat_cnt==9))
001f08  280a              CMP      r0,#0xa
001f0a  d001              BEQ      |L1.7952|
001f0c  2809              CMP      r0,#9
001f0e  d109              BNE      |L1.7972|
                  |L1.7952|
;;;2017   		{
;;;2018   		show_mess(	" ФОРМОВОЧНЫЙ ЗАРЯД  ",
001f10  f2af53f8          ADR      r3,|L1.6428|
001f14  f2af52e4          ADR      r2,|L1.6452|
001f18  f2af51d0          ADR      r1,|L1.6476|
001f1c  a0ff              ADR      r0,|L1.8988|
001f1e  9700              STR      r7,[sp,#0]
001f20  f7fffffe          BL       show_mess
                  |L1.7972|
;;;2019   					"   НЕ МОЖЕТ БЫТЬ    ",
;;;2020   					"      ВКЛЮЧЕН       ",
;;;2021   					"  БЕЗ ВЕНТИЛЯЦИИ!!  ",
;;;2022   					5000);
;;;2023   		}
;;;2024   	mess_send(MESS2RELE_HNDL,PARAM_RELE_SAMOKALIBR,0,20);
001f24  2314              MOVS     r3,#0x14
001f26  2200              MOVS     r2,#0
001f28  2164              MOVS     r1,#0x64
001f2a  20d2              MOVS     r0,#0xd2
001f2c  f7fffffe          BL       mess_send
                  |L1.7984|
;;;2025   	}
;;;2026   if(vz2_stat==vz2sERR2)		//Пропала вентиляция при работе в первой фазе ФЗ
001f30  f8980007          LDRB     r0,[r8,#7]  ; vz2_stat
001f34  280d              CMP      r0,#0xd
001f36  d12d              BNE      |L1.8084|
;;;2027   	{
;;;2028   	if((vz2_stat_old!=vz2_stat)||(vz2_stat_cnt==0))
001f38  f8980008          LDRB     r0,[r8,#8]  ; vz2_stat_old
001f3c  280d              CMP      r0,#0xd
001f3e  d102              BNE      |L1.8006|
001f40  f8b8007e          LDRH     r0,[r8,#0x7e]  ; vz2_stat_cnt
001f44  b908              CBNZ     r0,|L1.8010|
                  |L1.8006|
;;;2029   		{
;;;2030   		vz2_stat_cnt=10;
001f46  f8a8407e          STRH     r4,[r8,#0x7e]
                  |L1.8010|
;;;2031   		}
;;;2032   	vz2_stat_cnt--;
001f4a  f8b8007e          LDRH     r0,[r8,#0x7e]  ; vz2_stat_cnt
001f4e  f1a00001          SUB      r0,r0,#1
001f52  b200              SXTH     r0,r0
001f54  f8a8007e          STRH     r0,[r8,#0x7e]
;;;2033   	if((vz2_stat_cnt==10)||(vz2_stat_cnt==9))
001f58  280a              CMP      r0,#0xa
001f5a  d001              BEQ      |L1.8032|
001f5c  2809              CMP      r0,#9
001f5e  d109              BNE      |L1.8052|
                  |L1.8032|
;;;2034   		{
;;;2035   		show_mess(	" ФОРМОВОЧНЫЙ ЗАРЯД  ",
001f60  f6af3308          ADR      r3,|L1.5212|
001f64  f6af22f4          ADR      r2,|L1.5236|
001f68  f6af21e0          ADR      r1,|L1.5260|
001f6c  a0eb              ADR      r0,|L1.8988|
001f6e  9700              STR      r7,[sp,#0]
001f70  f7fffffe          BL       show_mess
                  |L1.8052|
;;;2036   					"    ЗАБЛОКИРОВАН    ",
;;;2037   					"     НЕИСПРАВНА     ",
;;;2038   					"    ВЕНТИЛЯЦИЯ!!!   ",
;;;2039   					5000);
;;;2040   		}
;;;2041   	if(sk_stat[0]==1)
001f74  7828              LDRB     r0,[r5,#0]  ; sk_stat
001f76  2801              CMP      r0,#1
001f78  d106              BNE      |L1.8072|
;;;2042   		{
;;;2043   		vz2_stat=vz2sWRK1;
001f7a  f8884007          STRB     r4,[r8,#7]
;;;2044   		lc640_write(EE_VZ2_STAT,vz2sWRK1);
001f7e  210a              MOVS     r1,#0xa
001f80  f44f70ca          MOV      r0,#0x194
001f84  f7fffffe          BL       lc640_write
                  |L1.8072|
;;;2045   		}
;;;2046   	mess_send(MESS2RELE_HNDL,PARAM_RELE_SAMOKALIBR,0,20);
001f88  2314              MOVS     r3,#0x14
001f8a  2200              MOVS     r2,#0
001f8c  2164              MOVS     r1,#0x64
001f8e  20d2              MOVS     r0,#0xd2
001f90  f7fffffe          BL       mess_send
                  |L1.8084|
;;;2047   	}
;;;2048   
;;;2049   if(vz2_stat==vz2sERR3)		//Отключен тумблер "Выравнивающий заряд" при работе в первой фазе ФЗ
001f94  f8980007          LDRB     r0,[r8,#7]  ; vz2_stat
001f98  280e              CMP      r0,#0xe
001f9a  d12c              BNE      |L1.8182|
;;;2050   	{
;;;2051   	if((vz2_stat_old!=vz2_stat)||(vz2_stat_cnt==0))
001f9c  f8980008          LDRB     r0,[r8,#8]  ; vz2_stat_old
001fa0  280e              CMP      r0,#0xe
001fa2  d102              BNE      |L1.8106|
001fa4  f8b8007e          LDRH     r0,[r8,#0x7e]  ; vz2_stat_cnt
001fa8  b908              CBNZ     r0,|L1.8110|
                  |L1.8106|
;;;2052   		{
;;;2053   		vz2_stat_cnt=10;
001faa  f8a8407e          STRH     r4,[r8,#0x7e]
                  |L1.8110|
;;;2054   		}
;;;2055   	vz2_stat_cnt--;
001fae  f8b8007e          LDRH     r0,[r8,#0x7e]  ; vz2_stat_cnt
001fb2  f1a00001          SUB      r0,r0,#1
001fb6  b200              SXTH     r0,r0
001fb8  f8a8007e          STRH     r0,[r8,#0x7e]
;;;2056   	if((vz2_stat_cnt==10)||(vz2_stat_cnt==9))
001fbc  280a              CMP      r0,#0xa
001fbe  d001              BEQ      |L1.8132|
001fc0  2809              CMP      r0,#9
001fc2  d108              BNE      |L1.8150|
                  |L1.8132|
;;;2057   		{
;;;2058   		show_mess(	" ФОРМОВОЧНЫЙ ЗАРЯД  ",
001fc4  a3db              ADR      r3,|L1.9012|
001fc6  f2af6234          ADR      r2,|L1.6548|
001fca  f2af6120          ADR      r1,|L1.6572|
001fce  a0d3              ADR      r0,|L1.8988|
001fd0  9700              STR      r7,[sp,#0]
001fd2  f7fffffe          BL       show_mess
                  |L1.8150|
;;;2059   					"  БУДЕТ ПРОДОЛЖЕН   ",
;;;2060   					"  ПОСЛЕ ВКЛЮЧЕНИЯ   ",
;;;2061   					"    ТУМБЛЕРА!!!     ",
;;;2062   					5000);
;;;2063   		}
;;;2064   	if(sk_stat[1]==1)
001fd6  7868              LDRB     r0,[r5,#1]  ; sk_stat
001fd8  2801              CMP      r0,#1
001fda  d106              BNE      |L1.8170|
;;;2065   		{
;;;2066   		vz2_stat=vz2sWRK1;
001fdc  f8884007          STRB     r4,[r8,#7]
;;;2067   		lc640_write(EE_VZ2_STAT,vz2sWRK1);
001fe0  210a              MOVS     r1,#0xa
001fe2  f44f70ca          MOV      r0,#0x194
001fe6  f7fffffe          BL       lc640_write
                  |L1.8170|
;;;2068   		}
;;;2069   	mess_send(MESS2RELE_HNDL,PARAM_RELE_SAMOKALIBR,0,20);
001fea  2314              MOVS     r3,#0x14
001fec  2200              MOVS     r2,#0
001fee  2164              MOVS     r1,#0x64
001ff0  20d2              MOVS     r0,#0xd2
001ff2  f7fffffe          BL       mess_send
                  |L1.8182|
;;;2070   	}
;;;2071   if(vz2_stat==vz2sERR5)		//Пропала вентиляция при работе
001ff6  f8980007          LDRB     r0,[r8,#7]  ; vz2_stat
001ffa  2810              CMP      r0,#0x10
001ffc  d12d              BNE      |L1.8282|
;;;2072   	{
;;;2073   	if((vz2_stat_old!=vz2_stat)||(vz2_stat_cnt==0))
001ffe  f8980008          LDRB     r0,[r8,#8]  ; vz2_stat_old
002002  2810              CMP      r0,#0x10
002004  d102              BNE      |L1.8204|
002006  f8b8007e          LDRH     r0,[r8,#0x7e]  ; vz2_stat_cnt
00200a  b908              CBNZ     r0,|L1.8208|
                  |L1.8204|
;;;2074   		{
;;;2075   		vz2_stat_cnt=10;
00200c  f8a8407e          STRH     r4,[r8,#0x7e]
                  |L1.8208|
;;;2076   		}
;;;2077   	vz2_stat_cnt--;
002010  f8b8007e          LDRH     r0,[r8,#0x7e]  ; vz2_stat_cnt
002014  f1a00001          SUB      r0,r0,#1
002018  b200              SXTH     r0,r0
00201a  f8a8007e          STRH     r0,[r8,#0x7e]
;;;2078   	if((vz2_stat_cnt==10)||(vz2_stat_cnt==9))
00201e  280a              CMP      r0,#0xa
002020  d001              BEQ      |L1.8230|
002022  2809              CMP      r0,#9
002024  d109              BNE      |L1.8250|
                  |L1.8230|
;;;2079   		{
;;;2080   		show_mess(	" ФОРМОВОЧНЫЙ ЗАРЯД  ",
002026  f6af33cc          ADR      r3,|L1.5212|
00202a  f6af32b8          ADR      r2,|L1.5236|
00202e  f6af31a4          ADR      r1,|L1.5260|
002032  a0ba              ADR      r0,|L1.8988|
002034  9700              STR      r7,[sp,#0]
002036  f7fffffe          BL       show_mess
                  |L1.8250|
;;;2081   					"    ЗАБЛОКИРОВАН    ",
;;;2082   					"     НЕИСПРАВНА     ",
;;;2083   					"    ВЕНТИЛЯЦИЯ!!!   ",
;;;2084   					5000);
;;;2085   		}
;;;2086   	if(sk_stat[0]==1)
00203a  7828              LDRB     r0,[r5,#0]  ; sk_stat
00203c  2801              CMP      r0,#1
00203e  d106              BNE      |L1.8270|
;;;2087   		{
;;;2088   		vz2_stat=vz2sWRK2;
002040  f888a007          STRB     r10,[r8,#7]
;;;2089   		lc640_write(EE_VZ2_STAT,vz2sWRK2);
002044  210b              MOVS     r1,#0xb
002046  f44f70ca          MOV      r0,#0x194
00204a  f7fffffe          BL       lc640_write
                  |L1.8270|
;;;2090   		}
;;;2091   	mess_send(MESS2RELE_HNDL,PARAM_RELE_SAMOKALIBR,0,20);
00204e  2314              MOVS     r3,#0x14
002050  2200              MOVS     r2,#0
002052  2164              MOVS     r1,#0x64
002054  20d2              MOVS     r0,#0xd2
002056  f7fffffe          BL       mess_send
                  |L1.8282|
;;;2092   	}
;;;2093   
;;;2094   if(vz2_stat==vz2sERR6)		//Отключен тумблер "Выравнивающий заряд"
00205a  f8980007          LDRB     r0,[r8,#7]  ; vz2_stat
00205e  2811              CMP      r0,#0x11
002060  d12c              BNE      |L1.8380|
;;;2095   	{
;;;2096   	if((vz2_stat_old!=vz2_stat)||(vz2_stat_cnt==0))
002062  f8980008          LDRB     r0,[r8,#8]  ; vz2_stat_old
002066  2811              CMP      r0,#0x11
002068  d102              BNE      |L1.8304|
00206a  f8b8007e          LDRH     r0,[r8,#0x7e]  ; vz2_stat_cnt
00206e  b908              CBNZ     r0,|L1.8308|
                  |L1.8304|
;;;2097   		{
;;;2098   		vz2_stat_cnt=10;
002070  f8a8407e          STRH     r4,[r8,#0x7e]
                  |L1.8308|
;;;2099   		}
;;;2100   	vz2_stat_cnt--;
002074  f8b8007e          LDRH     r0,[r8,#0x7e]  ; vz2_stat_cnt
002078  f1a00001          SUB      r0,r0,#1
00207c  b200              SXTH     r0,r0
00207e  f8a8007e          STRH     r0,[r8,#0x7e]
;;;2101   	if((vz2_stat_cnt==10)||(vz2_stat_cnt==9))
002082  280a              CMP      r0,#0xa
002084  d001              BEQ      |L1.8330|
002086  2809              CMP      r0,#9
002088  d108              BNE      |L1.8348|
                  |L1.8330|
;;;2102   		{
;;;2103   		show_mess(	" ФОРМОВОЧНЫЙ ЗАРЯД  ",
00208a  a3aa              ADR      r3,|L1.9012|
00208c  f2af62fc          ADR      r2,|L1.6548|
002090  f2af61e8          ADR      r1,|L1.6572|
002094  a0a1              ADR      r0,|L1.8988|
002096  9700              STR      r7,[sp,#0]
002098  f7fffffe          BL       show_mess
                  |L1.8348|
;;;2104   					"  БУДЕТ ПРОДОЛЖЕН   ",
;;;2105   					"  ПОСЛЕ ВКЛЮЧЕНИЯ   ",
;;;2106   					"    ТУМБЛЕРА!!!     ",
;;;2107   					5000);
;;;2108   		}
;;;2109   	if(sk_stat[1]==1)
00209c  7868              LDRB     r0,[r5,#1]  ; sk_stat
00209e  2801              CMP      r0,#1
0020a0  d106              BNE      |L1.8368|
;;;2110   		{
;;;2111   		vz2_stat=vz2sWRK2;
0020a2  f888a007          STRB     r10,[r8,#7]
;;;2112   		lc640_write(EE_VZ2_STAT,vz2sWRK2);
0020a6  210b              MOVS     r1,#0xb
0020a8  f44f70ca          MOV      r0,#0x194
0020ac  f7fffffe          BL       lc640_write
                  |L1.8368|
;;;2113   		}
;;;2114   	mess_send(MESS2RELE_HNDL,PARAM_RELE_SAMOKALIBR,0,20);
0020b0  2314              MOVS     r3,#0x14
0020b2  2200              MOVS     r2,#0
0020b4  2164              MOVS     r1,#0x64
0020b6  20d2              MOVS     r0,#0xd2
0020b8  f7fffffe          BL       mess_send
                  |L1.8380|
;;;2115   	}
;;;2116   if(vz2_stat==vz2sERR4)		//ВЗ закончился а тумблер включен
0020bc  f8980007          LDRB     r0,[r8,#7]  ; vz2_stat
0020c0  280f              CMP      r0,#0xf
0020c2  d12f              BNE      |L1.8484|
;;;2117   	{
;;;2118   	if((vz2_stat_old!=vz2_stat)||(vz2_stat_cnt==0))
0020c4  f8980008          LDRB     r0,[r8,#8]  ; vz2_stat_old
0020c8  280f              CMP      r0,#0xf
0020ca  d102              BNE      |L1.8402|
0020cc  f8b8007e          LDRH     r0,[r8,#0x7e]  ; vz2_stat_cnt
0020d0  b908              CBNZ     r0,|L1.8406|
                  |L1.8402|
;;;2119   		{
;;;2120   		vz2_stat_cnt=10;
0020d2  f8a8407e          STRH     r4,[r8,#0x7e]
                  |L1.8406|
;;;2121   		}
;;;2122   	vz2_stat_cnt--;
0020d6  f8b8007e          LDRH     r0,[r8,#0x7e]  ; vz2_stat_cnt
0020da  f1a00001          SUB      r0,r0,#1
0020de  b200              SXTH     r0,r0
0020e0  f8a8007e          STRH     r0,[r8,#0x7e]
;;;2123   	if((vz2_stat_cnt==10)||(vz2_stat_cnt==9))
0020e4  280a              CMP      r0,#0xa
0020e6  d001              BEQ      |L1.8428|
0020e8  2809              CMP      r0,#9
0020ea  d10a              BNE      |L1.8450|
                  |L1.8428|
;;;2124   		{
;;;2125   		show_mess(	"     ВЫКЛЮЧИТЕ      ",
0020ec  f6af033c          ADR      r3,|L1.6324|
0020f0  f6af0228          ADR      r2,|L1.6348|
0020f4  f6af0114          ADR      r1,|L1.6372|
0020f8  f2af60c0          ADR      r0,|L1.6716|
0020fc  9700              STR      r7,[sp,#0]
0020fe  f7fffffe          BL       show_mess
                  |L1.8450|
;;;2126   					"      ТУМБЛЕР       ",
;;;2127   					"     ВЫСОКОГО       ",
;;;2128   					"    НАПРЯЖЕНИЯ      ",
;;;2129   					5000);
;;;2130   		}
;;;2131   	if(sk_stat[1]==0)
002102  7868              LDRB     r0,[r5,#1]  ; sk_stat
002104  b940              CBNZ     r0,|L1.8472|
;;;2132   		{
;;;2133   		vz2_stat=vz2sOFF;
002106  f8886007          STRB     r6,[r8,#7]
;;;2134   		lc640_write(EE_VZ2_STAT,vz2sOFF);
00210a  2100              MOVS     r1,#0
00210c  f44f70ca          MOV      r0,#0x194
002110  f7fffffe          BL       lc640_write
;;;2135   		vz_stop();
002114  f7fffffe          BL       vz_stop
                  |L1.8472|
;;;2136   
;;;2137   		}
;;;2138   	mess_send(MESS2RELE_HNDL,PARAM_RELE_SAMOKALIBR,0,20);
002118  2314              MOVS     r3,#0x14
00211a  2200              MOVS     r2,#0
00211c  2164              MOVS     r1,#0x64
00211e  20d2              MOVS     r0,#0xd2
002120  f7fffffe          BL       mess_send
                  |L1.8484|
;;;2139   	}
;;;2140   if(vz2_stat==vz2sFINE)		//ФЗ закончился, напоминание
002124  f8980007          LDRB     r0,[r8,#7]  ; vz2_stat
;;;2141   	{
;;;2142   	if((vz2_stat_old!=vz2_stat)||(vz2_stat_cnt==0))
;;;2143   		{
;;;2144   		vz2_stat_cnt=10;
;;;2145   		}
;;;2146   	vz2_stat_cnt--;
;;;2147   	if((vz2_stat_cnt==10)||(vz2_stat_cnt==9))
;;;2148   		{
;;;2149   		show_mess(	"    ФОРМОВОЧНЫЙ     ",
002128  f64037b8          MOV      r7,#0xbb8
00212c  2812              CMP      r0,#0x12              ;2140
00212e  d13d              BNE      |L1.8620|
002130  f8980008          LDRB     r0,[r8,#8]            ;2142  ; vz2_stat_old
002134  2812              CMP      r0,#0x12              ;2142
002136  d102              BNE      |L1.8510|
002138  f8b8007e          LDRH     r0,[r8,#0x7e]         ;2142  ; vz2_stat_cnt
00213c  b908              CBNZ     r0,|L1.8514|
                  |L1.8510|
00213e  f8a8407e          STRH     r4,[r8,#0x7e]         ;2144
                  |L1.8514|
002142  f8b8007e          LDRH     r0,[r8,#0x7e]         ;2146  ; vz2_stat_cnt
002146  f1a00001          SUB      r0,r0,#1              ;2146
00214a  b200              SXTH     r0,r0                 ;2146
00214c  f8a8007e          STRH     r0,[r8,#0x7e]         ;2146
002150  280a              CMP      r0,#0xa               ;2147
002152  d001              BEQ      |L1.8536|
002154  2809              CMP      r0,#9                 ;2147
002156  d109              BNE      |L1.8556|
                  |L1.8536|
002158  f2af7380          ADR      r3,|L1.6620|
00215c  f2af726c          ADR      r2,|L1.6644|
002160  f2af7158          ADR      r1,|L1.6668|
002164  a079              ADR      r0,|L1.9036|
002166  9700              STR      r7,[sp,#0]
002168  f7fffffe          BL       show_mess
                  |L1.8556|
;;;2150   					"       ЗАРЯД        ",
;;;2151   					"      УСПЕШНО       ",
;;;2152   					"     ЗАВЕРШЕН       ",
;;;2153   					3000);
;;;2154   		}
;;;2155   	if((vz2_stat_cnt==6)||(vz2_stat_cnt==5))
00216c  f9b8007e          LDRSH    r0,[r8,#0x7e]  ; vz2_stat_cnt
002170  2806              CMP      r0,#6
002172  d001              BEQ      |L1.8568|
002174  2805              CMP      r0,#5
002176  d10a              BNE      |L1.8590|
                  |L1.8568|
;;;2156   		{
;;;2157   		show_mess(	"     ВЫКЛЮЧИТЕ      ",
002178  f6af03c8          ADR      r3,|L1.6324|
00217c  f6af02b4          ADR      r2,|L1.6348|
002180  f6af01a0          ADR      r1,|L1.6372|
002184  f2af704c          ADR      r0,|L1.6716|
002188  9700              STR      r7,[sp,#0]
00218a  f7fffffe          BL       show_mess
                  |L1.8590|
;;;2158   					"      ТУМБЛЕР       ",
;;;2159   					"     ВЫСОКОГО       ",
;;;2160   					"    НАПРЯЖЕНИЯ      ",
;;;2161   					3000);
;;;2162   		}
;;;2163   	if(sk_stat[1]==0)
00218e  7868              LDRB     r0,[r5,#1]  ; sk_stat
002190  b930              CBNZ     r0,|L1.8608|
;;;2164   		{
;;;2165   		vz2_stat=vz2sOFF;
002192  f8886007          STRB     r6,[r8,#7]
;;;2166   		lc640_write(EE_VZ2_STAT,vz2sOFF);
002196  2100              MOVS     r1,#0
002198  f44f70ca          MOV      r0,#0x194
00219c  f7fffffe          BL       lc640_write
                  |L1.8608|
;;;2167   		}
;;;2168   	mess_send(MESS2RELE_HNDL,PARAM_RELE_SAMOKALIBR,0,20);
0021a0  2314              MOVS     r3,#0x14
0021a2  2200              MOVS     r2,#0
0021a4  2164              MOVS     r1,#0x64
0021a6  20d2              MOVS     r0,#0xd2
0021a8  f7fffffe          BL       mess_send
                  |L1.8620|
;;;2169   	}
;;;2170   if(vz2_stat==vz2sSTOP)		//ФЗ прекращен, напоминание
0021ac  f8980007          LDRB     r0,[r8,#7]  ; vz2_stat
0021b0  2813              CMP      r0,#0x13
0021b2  d13d              BNE      |L1.8752|
;;;2171   	{
;;;2172   	if((vz2_stat_old!=vz2_stat)||(vz2_stat_cnt==0))
0021b4  f8980008          LDRB     r0,[r8,#8]  ; vz2_stat_old
0021b8  2813              CMP      r0,#0x13
0021ba  d102              BNE      |L1.8642|
0021bc  f8b8007e          LDRH     r0,[r8,#0x7e]  ; vz2_stat_cnt
0021c0  b908              CBNZ     r0,|L1.8646|
                  |L1.8642|
;;;2173   		{
;;;2174   		vz2_stat_cnt=10;
0021c2  f8a8407e          STRH     r4,[r8,#0x7e]
                  |L1.8646|
;;;2175   		}
;;;2176   	vz2_stat_cnt--;
0021c6  f8b8007e          LDRH     r0,[r8,#0x7e]  ; vz2_stat_cnt
0021ca  f1a00001          SUB      r0,r0,#1
0021ce  b200              SXTH     r0,r0
0021d0  f8a8007e          STRH     r0,[r8,#0x7e]
;;;2177   	if((vz2_stat_cnt==10)||(vz2_stat_cnt==9))
0021d4  280a              CMP      r0,#0xa
0021d6  d001              BEQ      |L1.8668|
0021d8  2809              CMP      r0,#9
0021da  d109              BNE      |L1.8688|
                  |L1.8668|
;;;2178   		{
;;;2179   		show_mess(	"    ФОРМОВОЧНЫЙ     ",
0021dc  f2af738c          ADR      r3,|L1.6740|
0021e0  f2af7278          ADR      r2,|L1.6764|
0021e4  f2af71dc          ADR      r1,|L1.6668|
0021e8  a058              ADR      r0,|L1.9036|
0021ea  9700              STR      r7,[sp,#0]
0021ec  f7fffffe          BL       show_mess
                  |L1.8688|
;;;2180   					"       ЗАРЯД        ",
;;;2181   					"     ПРЕКРАЩЕН      ",
;;;2182   					"                    ",
;;;2183   					3000);
;;;2184   		}
;;;2185   	if((vz2_stat_cnt==6)||(vz2_stat_cnt==5))
0021f0  f9b8007e          LDRSH    r0,[r8,#0x7e]  ; vz2_stat_cnt
0021f4  2806              CMP      r0,#6
0021f6  d001              BEQ      |L1.8700|
0021f8  2805              CMP      r0,#5
0021fa  d10a              BNE      |L1.8722|
                  |L1.8700|
;;;2186   		{
;;;2187   		show_mess(	"     ВЫКЛЮЧИТЕ      ",
0021fc  f6af134c          ADR      r3,|L1.6324|
002200  f6af1238          ADR      r2,|L1.6348|
002204  f6af1124          ADR      r1,|L1.6372|
002208  f2af70d0          ADR      r0,|L1.6716|
00220c  9700              STR      r7,[sp,#0]
00220e  f7fffffe          BL       show_mess
                  |L1.8722|
;;;2188   					"      ТУМБЛЕР       ",
;;;2189   					"     ВЫСОКОГО       ",
;;;2190   					"    НАПРЯЖЕНИЯ      ",
;;;2191   					3000);
;;;2192   		}
;;;2193   	if(sk_stat[1]==0)
002212  7868              LDRB     r0,[r5,#1]  ; sk_stat
002214  b930              CBNZ     r0,|L1.8740|
;;;2194   		{
;;;2195   		vz2_stat=vz2sOFF;
002216  f8886007          STRB     r6,[r8,#7]
;;;2196   		lc640_write(EE_VZ2_STAT,vz2sOFF);
00221a  2100              MOVS     r1,#0
00221c  f44f70ca          MOV      r0,#0x194
002220  f7fffffe          BL       lc640_write
                  |L1.8740|
;;;2197   		}
;;;2198   	mess_send(MESS2RELE_HNDL,PARAM_RELE_SAMOKALIBR,0,20);
002224  2314              MOVS     r3,#0x14
002226  2200              MOVS     r2,#0
002228  2164              MOVS     r1,#0x64
00222a  20d2              MOVS     r0,#0xd2
00222c  f7fffffe          BL       mess_send
                  |L1.8752|
;;;2199   	}
;;;2200   vz2_stat_old=vz2_stat;
002230  f8980007          LDRB     r0,[r8,#7]  ; vz2_stat
002234  f8880008          STRB     r0,[r8,#8]
;;;2201   
;;;2202   }
002238  e8bd8ff8          POP      {r3-r11,pc}
;;;2203   
                          ENDP

                  vz2_start PROC
;;;2205   //старт уравнительног заряда
;;;2206   char vz2_start(char hour)
00223c  b510              PUSH     {r4,lr}
;;;2207   {          
;;;2208   char out;
;;;2209   out=0;
00223e  f04f0000          MOV      r0,#0
;;;2210   if((spc_stat==spcOFF)&&(speedChrgBlckStat!=1)&&(vz1_stat==vz1sOFF))
002242  4948              LDR      r1,|L1.9060|
002244  f8912023          LDRB     r2,[r1,#0x23]  ; spc_stat
002248  2a00              CMP      r2,#0
00224a  d110              BNE      |L1.8814|
00224c  4a46              LDR      r2,|L1.9064|
00224e  8812              LDRH     r2,[r2,#0]  ; speedChrgBlckStat
002250  2a01              CMP      r2,#1
002252  d00c              BEQ      |L1.8814|
002254  794a              LDRB     r2,[r1,#5]  ; vz1_stat
002256  2a00              CMP      r2,#0
002258  d109              BNE      |L1.8814|
;;;2211   	{
;;;2212   	if(vz1_stat==vz1sOFF)
;;;2213   		{
;;;2214   		vz2_stat=vz2sSTEP1;
00225a  f04f0001          MOV      r0,#1
00225e  71c8              STRB     r0,[r1,#7]
;;;2215   		lc640_write(EE_VZ2_STAT,vz2sSTEP1);
002260  4601              MOV      r1,r0
002262  f44f70ca          MOV      r0,#0x194
002266  f7fffffe          BL       lc640_write
;;;2216   		out=1;
00226a  f04f0001          MOV      r0,#1
                  |L1.8814|
;;;2217   		
;;;2218   		}
;;;2219   /*	spc_stat=spcVZ;
;;;2220   	__ee_spc_stat=spcVZ; 
;;;2221   	lc640_write_int(EE_SPC_STAT,__ee_spc_stat);   
;;;2222   	vz_cnt_h=hour;
;;;2223   	__ee_vz_cnt=hour*60;
;;;2224   	if(hour==0)__ee_vz_cnt=30;
;;;2225   	lc640_write_int(EE_VZ_CNT,__ee_vz_cnt);
;;;2226   	lc640_write_int(EE_SPC_VZ_LENGT,__ee_vz_cnt);	
;;;2227   	vz_cnt_h_=0;
;;;2228   	vz_cnt_s=0;
;;;2229   	vz_cnt_s_=0;
;;;2230   	
;;;2231   		*/
;;;2232   	}
;;;2233   //else if((spc_stat==spc_KE1p1)||(spc_stat==spc_KE1p2)) out=22; 
;;;2234   //else if((spc_stat==spc_KE2p1)||(spc_stat==spc_KE2p2)) out=33;
;;;2235   //plazma=out;	
;;;2236   return out;
;;;2237   }
00226e  bd10              POP      {r4,pc}
;;;2238   //-----------------------------------------------
                          ENDP

                  vz2_stop PROC
;;;2239   //стоп формовочного заряда
;;;2240   void vz2_stop(void)
002270  483c              LDR      r0,|L1.9060|
;;;2241   {
;;;2242   if(vz2_stat!=vz2sOFF)
002272  79c1              LDRB     r1,[r0,#7]  ; vz2_stat
002274  2900              CMP      r1,#0
002276  d006              BEQ      |L1.8838|
;;;2243   	{
;;;2244   	vz2_stat=vz2sSTOP;
002278  f04f0113          MOV      r1,#0x13
00227c  71c1              STRB     r1,[r0,#7]
;;;2245   	lc640_write(EE_VZ2_STAT,vz2sSTOP);
00227e  f44f70ca          MOV      r0,#0x194
002282  f7ffbffe          B.W      lc640_write
                  |L1.8838|
;;;2246   	}
;;;2247   }
002286  4770              BX       lr
;;;2248   
                          ENDP

                  kb_init PROC
;;;2249   //-----------------------------------------------
;;;2250   void kb_init(void)
002288  4838              LDR      r0,|L1.9068|
;;;2251   {
;;;2252   main_kb_cnt=(TBAT*60)-60/*120*/;
00228a  f06f013b          MVN      r1,#0x3b
00228e  8800              LDRH     r0,[r0,#0]  ; TBAT
002290  ebc01000          RSB      r0,r0,r0,LSL #4
002294  eb010080          ADD      r0,r1,r0,LSL #2
002298  4932              LDR      r1,|L1.9060|
00229a  f8a10052          STRH     r0,[r1,#0x52]
;;;2253   }
00229e  4770              BX       lr
;;;2254   
                          ENDP

                  kb_hndl PROC
;;;2255   //-----------------------------------------------
;;;2256   void kb_hndl(void)
0022a0  e92d5ff0          PUSH     {r4-r12,lr}
;;;2257   {
;;;2258   
;;;2259   static signed short ibat[2],ibat_[2];
;;;2260   #ifdef UKU_TELECORE2015
;;;2261   if(((++main_kb_cnt>=TBAT*60)&&(TBAT))&&(BAT_TYPE==0 ))
;;;2262   #else 
;;;2263   if(((++main_kb_cnt>=TBAT*60)&&(TBAT)))
0022a4  f8df80bc          LDR      r8,|L1.9060|
;;;2264   #endif
;;;2265   	{
;;;2266   	main_kb_cnt=0;
;;;2267   	
;;;2268   	kb_start[0]=0;
;;;2269   	kb_start[1]=0;
;;;2270   	kb_start_ips=0;
;;;2271   
;;;2272   	if( (BAT_IS_ON[0]==bisON) && (bat[0]._Ub>80) && ( (abs(bat[0]._Ib)<IKB) || (bat[0]._av&1) ) ) kb_start[0]=1;
;;;2273   	if( (BAT_IS_ON[1]==bisON) && (bat[1]._Ub>80) && ( (abs(bat[1]._Ib)<IKB) || (bat[1]._av&1) ) ) kb_start[1]=1;
;;;2274   #ifdef UKU_220_IPS_TERMOKOMPENSAT
;;;2275   	if( (!ips_bat_av_vzvod)                      && ((abs(Ib_ips_termokompensat)<IKB) || (bat_ips._av&1) ) ) kb_start_ips=1;
0022a8  f8dfa0c4          LDR      r10,|L1.9072|
0022ac  2500              MOVS     r5,#0                 ;2263
0022ae  f8b80052          LDRH     r0,[r8,#0x52]         ;2263  ; main_kb_cnt
0022b2  4e30              LDR      r6,|L1.9076|
0022b4  1c40              ADDS     r0,r0,#1              ;2263
0022b6  b201              SXTH     r1,r0                 ;2263
0022b8  482c              LDR      r0,|L1.9068|
0022ba  f8a81052          STRH     r1,[r8,#0x52]         ;2263
0022be  f8df90b8          LDR      r9,|L1.9080|
0022c2  f9b00000          LDRSH    r0,[r0,#0]            ;2263  ; TBAT
;;;2276   #endif	
;;;2277   	if( (net_av) || (num_of_wrks_bps==0) || ( (spc_stat!=spcOFF) && (spc_stat!=spcVZ) ) 
;;;2278   #ifdef UKU_220_IPS_TERMOKOMPENSAT
;;;2279   	  ||(((vz1_stat!=vz1sOFF)||(vz2_stat!=vz2sOFF))&&SMART_SPC)
;;;2280   #endif
;;;2281   	  ||(sp_ch_stat!=scsOFF) 	)
;;;2282    
;;;2283   		{
;;;2284   		kb_start[0]=0;
;;;2285   		kb_start[1]=0;
;;;2286   		kb_start_ips=0;
;;;2287   		}
;;;2288   
;;;2289   	if((kb_start[0]==1)||(kb_start[1]==1)||(kb_start_ips==1))
;;;2290   		{
;;;2291   		kb_cnt_1lev=10;
0022c6  270a              MOVS     r7,#0xa
0022c8  ebc01200          RSB      r2,r0,r0,LSL #4       ;2263
0022cc  f04f0b01          MOV      r11,#1                ;2272
0022d0  f1080458          ADD      r4,r8,#0x58           ;2268
0022d4  ebb10f82          CMP      r1,r2,LSL #2          ;2263
0022d8  db7e              BLT      |L1.9176|
0022da  2800              CMP      r0,#0                 ;2263
0022dc  d07c              BEQ      |L1.9176|
0022de  f8a85052          STRH     r5,[r8,#0x52]         ;2266
0022e2  7025              STRB     r5,[r4,#0]            ;2268
0022e4  7065              STRB     r5,[r4,#1]            ;2269
0022e6  f888501d          STRB     r5,[r8,#0x1d]         ;2270
0022ea  4824              LDR      r0,|L1.9084|
0022ec  7800              LDRB     r0,[r0,#0]            ;2272  ; BAT_IS_ON
0022ee  2855              CMP      r0,#0x55              ;2272
0022f0  d111              BNE      |L1.8982|
0022f2  f9b60002          LDRSH    r0,[r6,#2]            ;2272  ; bat
0022f6  2850              CMP      r0,#0x50              ;2272
0022f8  dd0d              BLE      |L1.8982|
0022fa  f9b60008          LDRSH    r0,[r6,#8]            ;2272  ; bat
0022fe  f7fffffe          BL       abs
002302  f9b91000          LDRSH    r1,[r9,#0]            ;2272  ; IKB
002306  4288              CMP      r0,r1                 ;2272
002308  db03              BLT      |L1.8978|
00230a  f896003d          LDRB     r0,[r6,#0x3d]         ;2272  ; bat
00230e  07c0              LSLS     r0,r0,#31             ;2272
002310  d001              BEQ      |L1.8982|
                  |L1.8978|
002312  f884b000          STRB     r11,[r4,#0]           ;2272
                  |L1.8982|
002316  4819              LDR      r0,|L1.9084|
002318  7840              LDRB     r0,[r0,#1]            ;2273  ; BAT_IS_ON
00231a  e031              B        |L1.9088|
                  |L1.8988|
00231c  20d4ced0          DCB      " ",212,206,208,204,206,194,206,215,205,219,201," ",199,192
002320  cccec2ce
002324  d7cddbc9
002328  20c7c0  
00232b  d0dfc420          DCB      208,223,196,"  ",0
00232f  2000    
002331  00                DCB      0
002332  00                DCB      0
002333  00                DCB      0
                  |L1.9012|
002334  20202020          DCB      "    ",210,211,204,193,203,197,208,192,"!!!     ",0
002338  d2d3ccc1
00233c  cbc5d0c0
002340  21212120
002344  20202020
002348  00      
002349  00                DCB      0
00234a  00                DCB      0
00234b  00                DCB      0
                  |L1.9036|
00234c  20202020          DCB      "    ",212,206,208,204,206,194,206,215,205,219,201,"    "
002350  d4ced0cc
002354  cec2ced7
002358  cddbc920
00235c  202020  
00235f  2000              DCB      " ",0
002361  00                DCB      0
002362  00                DCB      0
002363  00                DCB      0
                  |L1.9060|
                          DCD      ||area_number.25||
                  |L1.9064|
                          DCD      speedChrgBlckStat
                  |L1.9068|
                          DCD      TBAT
                  |L1.9072|
                          DCD      Ib_ips_termokompensat
                  |L1.9076|
                          DCD      bat
                  |L1.9080|
                          DCD      IKB
                  |L1.9084|
                          DCD      BAT_IS_ON
                  |L1.9088|
002380  2855              CMP      r0,#0x55              ;2273
002382  d111              BNE      |L1.9128|
002384  f9b6004e          LDRSH    r0,[r6,#0x4e]         ;2273  ; bat
002388  2850              CMP      r0,#0x50              ;2273
00238a  dd0d              BLE      |L1.9128|
00238c  f9b60054          LDRSH    r0,[r6,#0x54]         ;2273  ; bat
002390  f7fffffe          BL       abs
002394  f9b91000          LDRSH    r1,[r9,#0]            ;2273  ; IKB
002398  4288              CMP      r0,r1                 ;2273
00239a  db03              BLT      |L1.9124|
00239c  f8960089          LDRB     r0,[r6,#0x89]         ;2273  ; bat
0023a0  07c0              LSLS     r0,r0,#31             ;2273
0023a2  d001              BEQ      |L1.9128|
                  |L1.9124|
0023a4  f884b001          STRB     r11,[r4,#1]           ;2273
                  |L1.9128|
0023a8  48ff              LDR      r0,|L1.10152|
0023aa  7800              LDRB     r0,[r0,#0]            ;2275  ; ips_bat_av_vzvod
0023ac  b970              CBNZ     r0,|L1.9164|
0023ae  f9ba0000          LDRSH    r0,[r10,#0]           ;2275  ; Ib_ips_termokompensat
0023b2  f7fffffe          BL       abs
0023b6  f9b91000          LDRSH    r1,[r9,#0]            ;2275  ; IKB
0023ba  4288              CMP      r0,r1                 ;2275
0023bc  db04              BLT      |L1.9160|
0023be  48fb              LDR      r0,|L1.10156|
0023c0  f890003d          LDRB     r0,[r0,#0x3d]         ;2275  ; bat_ips
0023c4  07c0              LSLS     r0,r0,#31             ;2275
0023c6  d001              BEQ      |L1.9164|
                  |L1.9160|
0023c8  f888b01d          STRB     r11,[r8,#0x1d]        ;2275
                  |L1.9164|
0023cc  48f8              LDR      r0,|L1.10160|
0023ce  7800              LDRB     r0,[r0,#0]            ;2277  ; net_av
0023d0  b9a8              CBNZ     r0,|L1.9214|
0023d2  f898001e          LDRB     r0,[r8,#0x1e]         ;2277  ; num_of_wrks_bps
0023d6  e000              B        |L1.9178|
                  |L1.9176|
0023d8  e021              B        |L1.9246|
                  |L1.9178|
0023da  b180              CBZ      r0,|L1.9214|
0023dc  f8980023          LDRB     r0,[r8,#0x23]         ;2277  ; spc_stat
0023e0  b108              CBZ      r0,|L1.9190|
0023e2  2802              CMP      r0,#2                 ;2277
0023e4  d10b              BNE      |L1.9214|
                  |L1.9190|
0023e6  f8980005          LDRB     r0,[r8,#5]            ;2279  ; vz1_stat
0023ea  f8981007          LDRB     r1,[r8,#7]            ;2279  ; vz2_stat
0023ee  4308              ORRS     r0,r0,r1              ;2279
0023f0  d002              BEQ      |L1.9208|
0023f2  48f0              LDR      r0,|L1.10164|
0023f4  8800              LDRH     r0,[r0,#0]            ;2279  ; SMART_SPC
0023f6  b910              CBNZ     r0,|L1.9214|
                  |L1.9208|
0023f8  48ef              LDR      r0,|L1.10168|
0023fa  7800              LDRB     r0,[r0,#0]            ;2281  ; sp_ch_stat
0023fc  b118              CBZ      r0,|L1.9222|
                  |L1.9214|
0023fe  7025              STRB     r5,[r4,#0]            ;2284
002400  7065              STRB     r5,[r4,#1]            ;2285
002402  f888501d          STRB     r5,[r8,#0x1d]         ;2286
                  |L1.9222|
002406  7820              LDRB     r0,[r4,#0]            ;2289  ; kb_start
002408  2801              CMP      r0,#1                 ;2289
00240a  d01e              BEQ      |L1.9290|
00240c  7860              LDRB     r0,[r4,#1]            ;2289  ; kb_start
00240e  2801              CMP      r0,#1                 ;2289
002410  d01b              BEQ      |L1.9290|
002412  f898001d          LDRB     r0,[r8,#0x1d]         ;2289  ; kb_start_ips
002416  2801              CMP      r0,#1                 ;2289
002418  d017              BEQ      |L1.9290|
;;;2292   		}
;;;2293   	else kb_cnt_1lev=0;
00241a  f8a85054          STRH     r5,[r8,#0x54]
                  |L1.9246|
;;;2294   	}
;;;2295   
;;;2296   if(kb_cnt_1lev)
00241e  4641              MOV      r1,r8
002420  f9b80054          LDRSH    r0,[r8,#0x54]  ; kb_cnt_1lev
;;;2297   	{
;;;2298   	kb_cnt_1lev--;
;;;2299   
;;;2300   	if(kb_cnt_1lev>5)mess_send(MESS2CNTRL_HNDL,PARAM_CNTRL_STAT_PLUS,30,15);
;;;2301   	else if(kb_cnt_1lev>0) mess_send(MESS2CNTRL_HNDL,PARAM_CNTRL_STAT_MINUS,30,15);
;;;2302   
;;;2303   
;;;2304   	if(kb_cnt_1lev==5)
;;;2305   		{
;;;2306   		ibat[0]=abs(bat[0]._Ib);
002424  f8df8394          LDR      r8,|L1.10172|
002428  2800              CMP      r0,#0                 ;2296
00242a  d07e              BEQ      |L1.9514|
00242c  f1a00001          SUB      r0,r0,#1              ;2298
002430  b200              SXTH     r0,r0                 ;2298
002432  468b              MOV      r11,r1                ;2298
002434  f8a10054          STRH     r0,[r1,#0x54]         ;2298
002438  2805              CMP      r0,#5                 ;2300
00243a  dd09              BLE      |L1.9296|
00243c  230f              MOVS     r3,#0xf               ;2300
00243e  221e              MOVS     r2,#0x1e              ;2300
002440  2164              MOVS     r1,#0x64              ;2300
002442  20e1              MOVS     r0,#0xe1              ;2300
002444  f7fffffe          BL       mess_send
002448  e00a              B        |L1.9312|
                  |L1.9290|
00244a  f8a87054          STRH     r7,[r8,#0x54]         ;2291
00244e  e7e6              B        |L1.9246|
                  |L1.9296|
002450  2800              CMP      r0,#0                 ;2301
002452  dd05              BLE      |L1.9312|
002454  230f              MOVS     r3,#0xf               ;2301
002456  221e              MOVS     r2,#0x1e              ;2301
002458  2169              MOVS     r1,#0x69              ;2301
00245a  20e1              MOVS     r0,#0xe1              ;2301
00245c  f7fffffe          BL       mess_send
                  |L1.9312|
002460  f8bb0054          LDRH     r0,[r11,#0x54]        ;2304  ; kb_cnt_1lev
002464  2805              CMP      r0,#5                 ;2304
002466  d111              BNE      |L1.9356|
002468  f9b60008          LDRSH    r0,[r6,#8]  ; bat
00246c  f7fffffe          BL       abs
002470  f8a80000          STRH     r0,[r8,#0]
;;;2307   		ibat[1]=abs(bat[1]._Ib);
002474  f9b60054          LDRSH    r0,[r6,#0x54]  ; bat
002478  f7fffffe          BL       abs
00247c  f8a80002          STRH     r0,[r8,#2]
;;;2308   		ibat_ips=abs(Ib_ips_termokompensat);
002480  f9ba0000          LDRSH    r0,[r10,#0]  ; Ib_ips_termokompensat
002484  f7fffffe          BL       abs
002488  f8ab005a          STRH     r0,[r11,#0x5a]
                  |L1.9356|
;;;2309   		}
;;;2310   	
;;;2311   	if(kb_cnt_1lev==0)
00248c  48cb              LDR      r0,|L1.10172|
00248e  3894              SUBS     r0,r0,#0x94
002490  f8b00054          LDRH     r0,[r0,#0x54]  ; kb_cnt_1lev
002494  2800              CMP      r0,#0
002496  d158              BNE      |L1.9546|
;;;2312   		{
;;;2313   		ibat_[0]=abs(bat[0]._Ib);
002498  f9b60008          LDRSH    r0,[r6,#8]  ; bat
00249c  f7fffffe          BL       abs
0024a0  f8dfb318          LDR      r11,|L1.10172|
0024a4  f10b0b04          ADD      r11,r11,#4
0024a8  f8ab0000          STRH     r0,[r11,#0]
;;;2314   		ibat_[1]=abs(bat[1]._Ib);
0024ac  f9b60054          LDRSH    r0,[r6,#0x54]  ; bat
0024b0  f7fffffe          BL       abs
0024b4  f8ab0002          STRH     r0,[r11,#2]
;;;2315   		ibat_ips_=abs(Ib_ips_termokompensat);
0024b8  f9ba0000          LDRSH    r0,[r10,#0]  ; Ib_ips_termokompensat
0024bc  f7fffffe          BL       abs
0024c0  f1ab0a98          SUB      r10,r11,#0x98
0024c4  f8aa005c          STRH     r0,[r10,#0x5c]
;;;2316   
;;;2317   		kb_cnt_2lev=0;
0024c8  f8aa5056          STRH     r5,[r10,#0x56]
;;;2318   
;;;2319   
;;;2320   		if(( (ibat[0]+ibat_[0]) < IKB )&& (kb_start[0]==1))
0024cc  f9b80000          LDRSH    r0,[r8,#0]  ; ibat
0024d0  f9bb1000          LDRSH    r1,[r11,#0]  ; ibat_
0024d4  4408              ADD      r0,r0,r1
0024d6  f9b91000          LDRSH    r1,[r9,#0]  ; IKB
0024da  4288              CMP      r0,r1
0024dc  da02              BGE      |L1.9444|
0024de  7820              LDRB     r0,[r4,#0]  ; kb_start
0024e0  2801              CMP      r0,#1
0024e2  d034              BEQ      |L1.9550|
                  |L1.9444|
;;;2321   			{
;;;2322   			kb_cnt_2lev=10;  
;;;2323   			}
;;;2324   		else if(bat[0]._Ub>200)
0024e4  f9b60002          LDRSH    r0,[r6,#2]  ; bat
0024e8  28c8              CMP      r0,#0xc8
0024ea  dd04              BLE      |L1.9462|
;;;2325   			{
;;;2326   			kb_start[0]=0;
0024ec  7025              STRB     r5,[r4,#0]
;;;2327   			avar_bat_hndl(0,0);
0024ee  2100              MOVS     r1,#0
0024f0  4608              MOV      r0,r1
0024f2  f7fffffe          BL       avar_bat_hndl
                  |L1.9462|
;;;2328   			}
;;;2329   		
;;;2330   		if(( (ibat[1]+ibat_[1]) < IKB ) && (kb_start[1]==1))
0024f6  f9b80002          LDRSH    r0,[r8,#2]  ; ibat
0024fa  f9bb1002          LDRSH    r1,[r11,#2]  ; ibat_
0024fe  4408              ADD      r0,r0,r1
002500  f9b91000          LDRSH    r1,[r9,#0]  ; IKB
002504  4288              CMP      r0,r1
002506  da02              BGE      |L1.9486|
002508  7860              LDRB     r0,[r4,#1]  ; kb_start
00250a  2801              CMP      r0,#1
00250c  d022              BEQ      |L1.9556|
                  |L1.9486|
;;;2331   			{
;;;2332   			kb_cnt_2lev=10;     
;;;2333   			}
;;;2334   		else  if(bat[1]._Ub>200)
00250e  f9b6004e          LDRSH    r0,[r6,#0x4e]  ; bat
002512  28c8              CMP      r0,#0xc8
002514  dd04              BLE      |L1.9504|
;;;2335   			{
;;;2336   			kb_start[1]=0;
002516  7065              STRB     r5,[r4,#1]
;;;2337   			avar_bat_hndl(1,0);
002518  2100              MOVS     r1,#0
00251a  2001              MOVS     r0,#1
00251c  f7fffffe          BL       avar_bat_hndl
                  |L1.9504|
;;;2338   			}
;;;2339   #ifdef UKU_220_IPS_TERMOKOMPENSAT
;;;2340   		if(( (ibat_ips+ibat_ips_) < IKB ) && (kb_start_ips==1))
002520  f9ba005a          LDRSH    r0,[r10,#0x5a]  ; ibat_ips
002524  f9ba105c          LDRSH    r1,[r10,#0x5c]  ; ibat_ips_
002528  e000              B        |L1.9516|
                  |L1.9514|
00252a  e01c              B        |L1.9574|
                  |L1.9516|
00252c  4408              ADD      r0,r0,r1
00252e  f9b91000          LDRSH    r1,[r9,#0]  ; IKB
002532  4288              CMP      r0,r1
002534  da09              BGE      |L1.9546|
002536  f89a001d          LDRB     r0,[r10,#0x1d]  ; kb_start_ips
00253a  2801              CMP      r0,#1
00253c  d105              BNE      |L1.9546|
;;;2341   			{
;;;2342   			if(KB_ALGORITM==1)
00253e  48a0              LDR      r0,|L1.10176|
002540  8800              LDRH     r0,[r0,#0]  ; KB_ALGORITM
002542  2801              CMP      r0,#1
002544  d009              BEQ      |L1.9562|
;;;2343   				{
;;;2344   				avar_bat_ips_hndl(1);
;;;2345   				kb_start_ips=0;
;;;2346   				}
;;;2347   			else
;;;2348   				{
;;;2349   				kb_cnt_2lev=10;     
002546  f8aa7056          STRH     r7,[r10,#0x56]
                  |L1.9546|
;;;2350   				}
;;;2351   			}
;;;2352   #endif
;;;2353   		}	
;;;2354   
;;;2355   
;;;2356   	}
;;;2357   else if(kb_cnt_2lev)
;;;2358   	{
;;;2359   	kb_cnt_2lev--;
;;;2360   
;;;2361   	if(kb_cnt_2lev>5)mess_send(MESS2CNTRL_HNDL,PARAM_CNTRL_STAT_PLUS,200,15);
;;;2362   	else if(kb_cnt_2lev>0) mess_send(MESS2CNTRL_HNDL,PARAM_CNTRL_STAT_MINUS,200,15);
;;;2363   
;;;2364   
;;;2365   	if(kb_cnt_2lev==5)
;;;2366   		{
;;;2367   		ibat[0]=abs(bat[0]._Ib);
;;;2368   		ibat[1]=abs(bat[1]._Ib);
;;;2369   		ibat_ips=abs(Ib_ips_termokompensat);
;;;2370   		}
;;;2371   	
;;;2372   	if(kb_cnt_2lev==0)
;;;2373   		{
;;;2374   		ibat_[0]=abs(bat[0]._Ib);
;;;2375   		ibat_[1]=abs(bat[1]._Ib);
;;;2376   		ibat_ips_=abs(Ib_ips_termokompensat);
;;;2377   
;;;2378   		kb_full_ver=0;
;;;2379   
;;;2380   		if(( (ibat[0]+ibat_[0]) < IKB ) && (kb_start[0]==1))
;;;2381   			{
;;;2382   			kb_full_ver=1;  
;;;2383   			}
;;;2384   		else if(bat[0]._Ub>200)			
;;;2385   			{
;;;2386   			kb_start[0]=0;
;;;2387   			avar_bat_hndl(0,0);
;;;2388   			}
;;;2389   
;;;2390   		if(( (ibat[1]+ibat_[1]) < IKB ) && (kb_start[1]==1))
;;;2391   			{
;;;2392   			kb_full_ver=1;     
;;;2393   			}
;;;2394   		else	if(bat[1]._Ub>200)		
;;;2395   			{
;;;2396   			kb_start[1]=0;
;;;2397   			avar_bat_hndl(1,0);
;;;2398   			}
;;;2399   #ifdef UKU_220_IPS_TERMOKOMPENSAT
;;;2400   		if(( (ibat_ips+ibat_ips_) < IKB )  && (kb_start_ips==1))
;;;2401   			{
;;;2402   			if(KB_ALGORITM==2)
;;;2403   				{
;;;2404   				avar_bat_ips_hndl(1);
;;;2405   				kb_start_ips=0;
;;;2406   				}
;;;2407   			else
;;;2408   				{
;;;2409   				kb_full_ver=1;     
;;;2410   				}
;;;2411   			}
;;;2412   #endif
;;;2413   		}	
;;;2414   	}
;;;2415   
;;;2416   else if(kb_full_ver)
;;;2417   	{
;;;2418   	
;;;2419   	mess_send(MESS2CNTRL_HNDL,PARAM_CNTRL_STAT_STEP_DOWN,0,15);
;;;2420   
;;;2421   	if( abs(bat[0]._Ib) > IKB ) 
;;;2422   		{
;;;2423   		if(kb_start[0]==1)
;;;2424   			{
;;;2425   			kb_start[0]=0;
;;;2426   			avar_bat_hndl(0,0);
;;;2427   			}
;;;2428   		}
;;;2429   
;;;2430   	if( abs(bat[1]._Ib) > IKB ) 
;;;2431   		{
;;;2432   		if(kb_start[1]==1)
;;;2433   			{
;;;2434   			kb_start[1]=0;
;;;2435   			avar_bat_hndl(1,0);
;;;2436   			}
;;;2437   		}
;;;2438   #ifdef UKU_220_IPS_TERMOKOMPENSAT
;;;2439   	if( abs(Ib_ips_termokompensat) > IKB ) 
;;;2440   		{
;;;2441   		if(kb_start_ips==1)
;;;2442   			{
;;;2443   			kb_start_ips=0;
;;;2444   			avar_bat_ips_hndl(0);
;;;2445   			}
;;;2446   		}
;;;2447   #endif
;;;2448   
;;;2449   	if ((kb_start[0]==0) && (kb_start[1]==0) && (kb_start_ips==0)) 
;;;2450   		{
;;;2451   		kb_full_ver=0;
;;;2452   		}
;;;2453   
;;;2454   	if(( (mess_find(MESS2KB_HNDL))	&& (mess_data[0]==PARAM_CNTRL_IS_DOWN) ) || (load_U<(USIGN*10)) )
;;;2455   		{
;;;2456   		kb_full_ver=0;
;;;2457   		if((kb_start[0]==1)&&((load_I>(2*IKB)/10))&&(!(bat[0]._av&0x01))) avar_bat_hndl(0,1);
;;;2458   		if((kb_start[1]==1)&&((load_I>(2*IKB)/10))&&(!(bat[1]._av&0x01))) avar_bat_hndl(1,1);
;;;2459   #ifdef UKU_220_IPS_TERMOKOMPENSAT
;;;2460   		if((kb_start_ips==1)&&((load_I>(2*IKB)/10))&&(!(bat_ips._av&0x01))) avar_bat_ips_hndl(1);
;;;2461   #endif
;;;2462   		}
;;;2463   	}
;;;2464   
;;;2465   }
00254a  e8bd9ff0          POP      {r4-r12,pc}
                  |L1.9550|
00254e  f8aa7056          STRH     r7,[r10,#0x56]        ;2322
002552  e7d0              B        |L1.9462|
                  |L1.9556|
002554  f8aa7056          STRH     r7,[r10,#0x56]        ;2332
002558  e7e2              B        |L1.9504|
                  |L1.9562|
00255a  2001              MOVS     r0,#1                 ;2344
00255c  f7fffffe          BL       avar_bat_ips_hndl
002560  f88a501d          STRB     r5,[r10,#0x1d]        ;2345
                  |L1.9572|
002564  e7f1              B        |L1.9546|
                  |L1.9574|
002566  f9b10056          LDRSH    r0,[r1,#0x56]         ;2357  ; kb_cnt_2lev
00256a  b3f0              CBZ      r0,|L1.9706|
00256c  f1a00001          SUB      r0,r0,#1              ;2359
002570  b200              SXTH     r0,r0                 ;2359
002572  460f              MOV      r7,r1                 ;2359
002574  f8a10056          STRH     r0,[r1,#0x56]         ;2359
002578  2805              CMP      r0,#5                 ;2361
00257a  dd06              BLE      |L1.9610|
00257c  230f              MOVS     r3,#0xf               ;2361
00257e  22c8              MOVS     r2,#0xc8              ;2361
002580  2164              MOVS     r1,#0x64              ;2361
002582  20e1              MOVS     r0,#0xe1              ;2361
002584  f7fffffe          BL       mess_send
002588  e007              B        |L1.9626|
                  |L1.9610|
00258a  2800              CMP      r0,#0                 ;2362
00258c  dd05              BLE      |L1.9626|
00258e  230f              MOVS     r3,#0xf               ;2362
002590  22c8              MOVS     r2,#0xc8              ;2362
002592  2169              MOVS     r1,#0x69              ;2362
002594  20e1              MOVS     r0,#0xe1              ;2362
002596  f7fffffe          BL       mess_send
                  |L1.9626|
00259a  f8b70056          LDRH     r0,[r7,#0x56]         ;2365  ; kb_cnt_2lev
00259e  2805              CMP      r0,#5                 ;2365
0025a0  d111              BNE      |L1.9670|
0025a2  f9b60008          LDRSH    r0,[r6,#8]            ;2367  ; bat
0025a6  f7fffffe          BL       abs
0025aa  f8a80000          STRH     r0,[r8,#0]            ;2367
0025ae  f9b60054          LDRSH    r0,[r6,#0x54]         ;2368  ; bat
0025b2  f7fffffe          BL       abs
0025b6  f8a80002          STRH     r0,[r8,#2]            ;2368
0025ba  f9ba0000          LDRSH    r0,[r10,#0]           ;2369  ; Ib_ips_termokompensat
0025be  f7fffffe          BL       abs
0025c2  f8a7005a          STRH     r0,[r7,#0x5a]         ;2369
                  |L1.9670|
0025c6  487d              LDR      r0,|L1.10172|
0025c8  3894              SUBS     r0,r0,#0x94           ;2372
0025ca  f8b00056          LDRH     r0,[r0,#0x56]         ;2372  ; kb_cnt_2lev
0025ce  2800              CMP      r0,#0                 ;2372
                  |L1.9680|
0025d0  d1bb              BNE      |L1.9546|
0025d2  f9b60008          LDRSH    r0,[r6,#8]            ;2374  ; bat
0025d6  f7fffffe          BL       abs
0025da  4f78              LDR      r7,|L1.10172|
0025dc  1d3f              ADDS     r7,r7,#4              ;2374
0025de  8038              STRH     r0,[r7,#0]            ;2374
0025e0  f9b60054          LDRSH    r0,[r6,#0x54]         ;2375  ; bat
0025e4  f7fffffe          BL       abs
0025e8  e000              B        |L1.9708|
                  |L1.9706|
0025ea  e055              B        |L1.9880|
                  |L1.9708|
0025ec  8078              STRH     r0,[r7,#2]            ;2375
0025ee  f9ba0000          LDRSH    r0,[r10,#0]           ;2376  ; Ib_ips_termokompensat
0025f2  f7fffffe          BL       abs
0025f6  f1a70a98          SUB      r10,r7,#0x98          ;2376
0025fa  f8aa005c          STRH     r0,[r10,#0x5c]        ;2376
0025fe  f88a501c          STRB     r5,[r10,#0x1c]        ;2378
002602  f9b80000          LDRSH    r0,[r8,#0]            ;2380  ; ibat
002606  f9b71000          LDRSH    r1,[r7,#0]            ;2380  ; ibat_
00260a  4408              ADD      r0,r0,r1              ;2380
00260c  f9b91000          LDRSH    r1,[r9,#0]            ;2380  ; IKB
002610  4288              CMP      r0,r1                 ;2380
002612  da02              BGE      |L1.9754|
002614  7820              LDRB     r0,[r4,#0]            ;2380  ; kb_start
002616  2801              CMP      r0,#1                 ;2380
002618  d032              BEQ      |L1.9856|
                  |L1.9754|
00261a  f9b60002          LDRSH    r0,[r6,#2]            ;2384  ; bat
00261e  28c8              CMP      r0,#0xc8              ;2384
002620  dd04              BLE      |L1.9772|
002622  7025              STRB     r5,[r4,#0]            ;2386
002624  2100              MOVS     r1,#0                 ;2387
002626  4608              MOV      r0,r1                 ;2387
002628  f7fffffe          BL       avar_bat_hndl
                  |L1.9772|
00262c  f9b80002          LDRSH    r0,[r8,#2]            ;2390  ; ibat
002630  f9b71002          LDRSH    r1,[r7,#2]            ;2390  ; ibat_
002634  4408              ADD      r0,r0,r1              ;2390
002636  f9b91000          LDRSH    r1,[r9,#0]            ;2390  ; IKB
00263a  4288              CMP      r0,r1                 ;2390
00263c  da02              BGE      |L1.9796|
00263e  7860              LDRB     r0,[r4,#1]            ;2390  ; kb_start
002640  2801              CMP      r0,#1                 ;2390
002642  d020              BEQ      |L1.9862|
                  |L1.9796|
002644  f9b6004e          LDRSH    r0,[r6,#0x4e]         ;2394  ; bat
002648  28c8              CMP      r0,#0xc8              ;2394
00264a  dd04              BLE      |L1.9814|
00264c  7065              STRB     r5,[r4,#1]            ;2396
00264e  2100              MOVS     r1,#0                 ;2397
002650  2001              MOVS     r0,#1                 ;2397
002652  f7fffffe          BL       avar_bat_hndl
                  |L1.9814|
002656  f9ba005a          LDRSH    r0,[r10,#0x5a]        ;2400  ; ibat_ips
00265a  f9ba105c          LDRSH    r1,[r10,#0x5c]        ;2400  ; ibat_ips_
00265e  4408              ADD      r0,r0,r1              ;2400
002660  f9b91000          LDRSH    r1,[r9,#0]            ;2400  ; IKB
002664  4288              CMP      r0,r1                 ;2400
002666  f6bfaf7d          BGE      |L1.9572|
00266a  f89a001d          LDRB     r0,[r10,#0x1d]        ;2400  ; kb_start_ips
00266e  2801              CMP      r0,#1                 ;2400
002670  d1ae              BNE      |L1.9680|
002672  4853              LDR      r0,|L1.10176|
002674  8800              LDRH     r0,[r0,#0]            ;2402  ; KB_ALGORITM
002676  2802              CMP      r0,#2                 ;2402
002678  d008              BEQ      |L1.9868|
00267a  f88ab01c          STRB     r11,[r10,#0x1c]       ;2409
                  |L1.9854|
00267e  e764              B        |L1.9546|
                  |L1.9856|
002680  f88ab01c          STRB     r11,[r10,#0x1c]       ;2382
002684  e7d2              B        |L1.9772|
                  |L1.9862|
002686  f88ab01c          STRB     r11,[r10,#0x1c]       ;2392
00268a  e7e4              B        |L1.9814|
                  |L1.9868|
00268c  2001              MOVS     r0,#1                 ;2404
00268e  f7fffffe          BL       avar_bat_ips_hndl
002692  f88a501d          STRB     r5,[r10,#0x1d]        ;2405
002696  e758              B        |L1.9546|
                  |L1.9880|
002698  7f08              LDRB     r0,[r1,#0x1c]         ;2416  ; kb_full_ver
00269a  4688              MOV      r8,r1                 ;2416
00269c  2800              CMP      r0,#0                 ;2416
00269e  d0ee              BEQ      |L1.9854|
0026a0  230f              MOVS     r3,#0xf               ;2419
0026a2  2200              MOVS     r2,#0                 ;2419
0026a4  216e              MOVS     r1,#0x6e              ;2419
0026a6  20e1              MOVS     r0,#0xe1              ;2419
0026a8  f7fffffe          BL       mess_send
0026ac  f9b60008          LDRSH    r0,[r6,#8]            ;2421  ; bat
0026b0  f7fffffe          BL       abs
0026b4  f9b91000          LDRSH    r1,[r9,#0]            ;2421  ; IKB
0026b8  4288              CMP      r0,r1                 ;2421
0026ba  dd07              BLE      |L1.9932|
0026bc  7820              LDRB     r0,[r4,#0]            ;2423  ; kb_start
0026be  2801              CMP      r0,#1                 ;2423
0026c0  d104              BNE      |L1.9932|
0026c2  7025              STRB     r5,[r4,#0]            ;2425
0026c4  2100              MOVS     r1,#0                 ;2426
0026c6  4608              MOV      r0,r1                 ;2426
0026c8  f7fffffe          BL       avar_bat_hndl
                  |L1.9932|
0026cc  f9b60054          LDRSH    r0,[r6,#0x54]         ;2430  ; bat
0026d0  f7fffffe          BL       abs
0026d4  f9b91000          LDRSH    r1,[r9,#0]            ;2430  ; IKB
0026d8  4288              CMP      r0,r1                 ;2430
0026da  dd06              BLE      |L1.9962|
0026dc  7860              LDRB     r0,[r4,#1]            ;2432  ; kb_start
0026de  2801              CMP      r0,#1                 ;2432
0026e0  d103              BNE      |L1.9962|
0026e2  7065              STRB     r5,[r4,#1]            ;2434
0026e4  2100              MOVS     r1,#0                 ;2435
0026e6  f7fffffe          BL       avar_bat_hndl
                  |L1.9962|
0026ea  f9ba0000          LDRSH    r0,[r10,#0]           ;2439  ; Ib_ips_termokompensat
0026ee  f7fffffe          BL       abs
0026f2  f9b91000          LDRSH    r1,[r9,#0]            ;2439  ; IKB
0026f6  4288              CMP      r0,r1                 ;2439
0026f8  dd08              BLE      |L1.9996|
0026fa  f898001d          LDRB     r0,[r8,#0x1d]         ;2441  ; kb_start_ips
0026fe  2801              CMP      r0,#1                 ;2441
002700  d104              BNE      |L1.9996|
002702  f888501d          STRB     r5,[r8,#0x1d]         ;2443
002706  2000              MOVS     r0,#0                 ;2444
002708  f7fffffe          BL       avar_bat_ips_hndl
                  |L1.9996|
00270c  7820              LDRB     r0,[r4,#0]            ;2449  ; kb_start
00270e  b930              CBNZ     r0,|L1.10014|
002710  7860              LDRB     r0,[r4,#1]            ;2449  ; kb_start
002712  b920              CBNZ     r0,|L1.10014|
002714  f898001d          LDRB     r0,[r8,#0x1d]         ;2449  ; kb_start_ips
002718  b908              CBNZ     r0,|L1.10014|
00271a  f888501c          STRB     r5,[r8,#0x1c]         ;2451
                  |L1.10014|
00271e  20e6              MOVS     r0,#0xe6              ;2454
002720  f7fffffe          BL       mess_find
002724  b118              CBZ      r0,|L1.10030|
002726  4827              LDR      r0,|L1.10180|
002728  6800              LDR      r0,[r0,#0]            ;2454  ; mess_data
00272a  28e7              CMP      r0,#0xe7              ;2454
00272c  d00a              BEQ      |L1.10052|
                  |L1.10030|
00272e  4826              LDR      r0,|L1.10184|
002730  4926              LDR      r1,|L1.10188|
002732  f9b00000          LDRSH    r0,[r0,#0]            ;2454  ; USIGN
002736  f9b11000          LDRSH    r1,[r1,#0]            ;2454  ; load_U
00273a  eb000080          ADD      r0,r0,r0,LSL #2       ;2454
00273e  ebb10f40          CMP      r1,r0,LSL #1          ;2454
                  |L1.10050|
002742  da9c              BGE      |L1.9854|
                  |L1.10052|
002744  f888501c          STRB     r5,[r8,#0x1c]         ;2456
002748  7820              LDRB     r0,[r4,#0]            ;2457  ; kb_start
00274a  4d21              LDR      r5,|L1.10192|
00274c  2801              CMP      r0,#1                 ;2457
00274e  d10f              BNE      |L1.10096|
002750  f9b90000          LDRSH    r0,[r9,#0]            ;2457  ; IKB
002754  f9b51000          LDRSH    r1,[r5,#0]            ;2457  ; load_I
002758  0040              LSLS     r0,r0,#1              ;2457
00275a  fb90f0f7          SDIV     r0,r0,r7              ;2457
00275e  4288              CMP      r0,r1                 ;2457
002760  da06              BGE      |L1.10096|
002762  f896003d          LDRB     r0,[r6,#0x3d]         ;2457  ; bat
002766  07c0              LSLS     r0,r0,#31             ;2457
002768  d102              BNE      |L1.10096|
00276a  2101              MOVS     r1,#1                 ;2457
00276c  f7fffffe          BL       avar_bat_hndl
                  |L1.10096|
002770  7860              LDRB     r0,[r4,#1]            ;2458  ; kb_start
002772  2801              CMP      r0,#1                 ;2458
002774  d110              BNE      |L1.10136|
002776  f9b90000          LDRSH    r0,[r9,#0]            ;2458  ; IKB
00277a  f9b51000          LDRSH    r1,[r5,#0]            ;2458  ; load_I
00277e  0040              LSLS     r0,r0,#1              ;2458
002780  fb90f0f7          SDIV     r0,r0,r7              ;2458
002784  4288              CMP      r0,r1                 ;2458
002786  da07              BGE      |L1.10136|
002788  f8960089          LDRB     r0,[r6,#0x89]         ;2458  ; bat
00278c  07c0              LSLS     r0,r0,#31             ;2458
00278e  d103              BNE      |L1.10136|
002790  2101              MOVS     r1,#1                 ;2458
002792  4608              MOV      r0,r1                 ;2458
002794  f7fffffe          BL       avar_bat_hndl
                  |L1.10136|
002798  f898001d          LDRB     r0,[r8,#0x1d]         ;2460  ; kb_start_ips
00279c  2801              CMP      r0,#1                 ;2460
                  |L1.10142|
00279e  f47faee1          BNE      |L1.9572|
0027a2  f9b90000          LDRSH    r0,[r9,#0]            ;2460  ; IKB
0027a6  e015              B        |L1.10196|
                  |L1.10152|
                          DCD      ips_bat_av_vzvod
                  |L1.10156|
                          DCD      bat_ips
                  |L1.10160|
                          DCD      net_av
                  |L1.10164|
                          DCD      SMART_SPC
                  |L1.10168|
                          DCD      sp_ch_stat
                  |L1.10172|
                          DCD      ||area_number.25||+0x94
                  |L1.10176|
                          DCD      KB_ALGORITM
                  |L1.10180|
                          DCD      mess_data
                  |L1.10184|
                          DCD      USIGN
                  |L1.10188|
                          DCD      load_U
                  |L1.10192|
                          DCD      load_I
                  |L1.10196|
0027d4  0040              LSLS     r0,r0,#1              ;2460
0027d6  fb90f0f7          SDIV     r0,r0,r7              ;2460
0027da  f9b51000          LDRSH    r1,[r5,#0]            ;2460  ; load_I
0027de  4288              CMP      r0,r1                 ;2460
0027e0  daaf              BGE      |L1.10050|
0027e2  48ff              LDR      r0,|L1.11232|
0027e4  f890003d          LDRB     r0,[r0,#0x3d]         ;2460  ; bat_ips
0027e8  07c0              LSLS     r0,r0,#31             ;2460
0027ea  d1d8              BNE      |L1.10142|
0027ec  e8bd5ff0          POP      {r4-r12,lr}           ;2460
0027f0  2001              MOVS     r0,#1                 ;2460
0027f2  f7ffbffe          B.W      avar_bat_ips_hndl
;;;2466   
                          ENDP

                  samokalibr_hndl PROC
;;;2475   //-----------------------------------------------
;;;2476   void samokalibr_hndl(void)
0027f6  4770              BX       lr
;;;2477   {
;;;2478   #ifndef UKU_220_IPS_TERMOKOMPENSAT
;;;2479   if(++samokalibr_cnt>=1800)samokalibr_cnt=0;
;;;2480   
;;;2481   if((samokalibr_cnt>=1785U)&&(vz2_stat==vz2sOFF))
;;;2482   	{
;;;2483   	mess_send(MESS2RELE_HNDL,PARAM_RELE_SAMOKALIBR,1,15);
;;;2484   	mess_send(MESS2IND_HNDL,PARAM_SAMOKALIBR,0,15);
;;;2485   	mess_send(MESS2MATEMAT,PARAM_SAMOKALIBR,0,15);
;;;2486   	} 
;;;2487   
;;;2488   if((samokalibr_cnt==1799U)&&(vz2_stat==vz2sOFF))
;;;2489   	{
;;;2490   	if((Kibat0[0]!=ad7705_buff_[0])&&(abs(bat[0]._Ib/10)<IZMAX)) lc640_write_int(ADR_KI0BAT[0],ad7705_buff_[0]);
;;;2491   	if((Kibat0[1]!=ad7705_buff_[1])&&(abs(bat[0]._Ib/10)<IZMAX)) lc640_write_int(ADR_KI0BAT[1],ad7705_buff_[1]);
;;;2492   	
;;;2493   	}
;;;2494   #endif	 	
;;;2495   }
;;;2496   
                          ENDP

                  ubat_old_drv PROC
;;;2499   //-----------------------------------------------
;;;2500   void ubat_old_drv(void)
0027f8  b510              PUSH     {r4,lr}
;;;2501   {        
;;;2502   bat_u_old_cnt++;
0027fa  4cfa              LDR      r4,|L1.11236|
0027fc  8820              LDRH     r0,[r4,#0]  ; bat_u_old_cnt
0027fe  f1000001          ADD      r0,r0,#1
002802  8020              STRH     r0,[r4,#0]
;;;2503   gran_ring(&bat_u_old_cnt,0,8);
002804  f04f0208          MOV      r2,#8
002808  f04f0100          MOV      r1,#0
00280c  4620              MOV      r0,r4
00280e  f7fffffe          BL       gran_ring
;;;2504   
;;;2505   bat[0]._u_old[bat_u_old_cnt]=bat[0]._Ub;
002812  49f5              LDR      r1,|L1.11240|
002814  f9b40000          LDRSH    r0,[r4,#0]  ; bat_u_old_cnt
002818  eb010040          ADD      r0,r1,r0,LSL #1
00281c  884a              LDRH     r2,[r1,#2]  ; bat
00281e  8402              STRH     r2,[r0,#0x20]
;;;2506   bat[1]._u_old[bat_u_old_cnt]=bat[1]._Ub;
002820  f8b1104e          LDRH     r1,[r1,#0x4e]  ; bat
002824  f8a0106c          STRH     r1,[r0,#0x6c]
;;;2507   }
002828  bd10              POP      {r4,pc}
;;;2508   
                          ENDP

                  unet_drv PROC
;;;2509   //-----------------------------------------------
;;;2510   void unet_drv(void)
00282a  b570              PUSH     {r4-r6,lr}
;;;2511   {
;;;2512   if(net_U<UMN)
00282c  4def              LDR      r5,|L1.11244|
00282e  48f0              LDR      r0,|L1.11248|
;;;2513   	{
;;;2514   	if((unet_drv_cnt<10)&&(main_1Hz_cnt>15))
002830  4af0              LDR      r2,|L1.11252|
002832  f9b51000          LDRSH    r1,[r5,#0]            ;2512  ; net_U
002836  f9b03000          LDRSH    r3,[r0,#0]            ;2512  ; UMN
00283a  f9920000          LDRSB    r0,[r2,#0]
00283e  4299              CMP      r1,r3                 ;2512
002840  da1f              BGE      |L1.10370|
;;;2515   		{
;;;2516   		unet_drv_cnt++;
;;;2517   		if(unet_drv_cnt>=10)
;;;2518   			{
;;;2519   			net_Ustore=net_U;
002842  4ced              LDR      r4,|L1.11256|
002844  280a              CMP      r0,#0xa               ;2514
002846  da0f              BGE      |L1.10344|
002848  4bec              LDR      r3,|L1.11260|
00284a  f9b33000          LDRSH    r3,[r3,#0]            ;2514  ; main_1Hz_cnt
00284e  2b0f              CMP      r3,#0xf               ;2514
002850  dd0a              BLE      |L1.10344|
002852  f1000001          ADD      r0,r0,#1              ;2516
002856  b240              SXTB     r0,r0                 ;2516
002858  7010              STRB     r0,[r2,#0]            ;2516
00285a  280a              CMP      r0,#0xa               ;2517
00285c  db09              BLT      |L1.10354|
00285e  8021              STRH     r1,[r4,#0]
;;;2520   		 	avar_unet_hndl(1);
002860  2001              MOVS     r0,#1
002862  f7fffffe          BL       avar_unet_hndl
002866  e004              B        |L1.10354|
                  |L1.10344|
;;;2521   			
;;;2522   			}
;;;2523   		}
;;;2524   	else if(unet_drv_cnt>=10)unet_drv_cnt=10;
002868  280a              CMP      r0,#0xa
00286a  db02              BLT      |L1.10354|
00286c  f04f000a          MOV      r0,#0xa
002870  7010              STRB     r0,[r2,#0]
                  |L1.10354|
;;;2525   
;;;2526   	if(net_U<net_Ustore) net_Ustore=net_U;	
002872  f9b50000          LDRSH    r0,[r5,#0]  ; net_U
002876  f9b41000          LDRSH    r1,[r4,#0]  ; net_Ustore
00287a  4288              CMP      r0,r1
00287c  da00              BGE      |L1.10368|
00287e  8020              STRH     r0,[r4,#0]
                  |L1.10368|
;;;2527   	}
;;;2528   
;;;2529   else if(net_U>UMN)
;;;2530   	{                 
;;;2531   	if(unet_drv_cnt)
;;;2532   		{
;;;2533   		unet_drv_cnt--;
;;;2534   		if(unet_drv_cnt<=0)
;;;2535   			{
;;;2536   			avar_unet_hndl(0);
;;;2537   			}
;;;2538   		}
;;;2539   	else if(unet_drv_cnt<0)unet_drv_cnt=0;
;;;2540   	
;;;2541   	}
;;;2542   #ifdef UKU_6U
;;;2543   if(net_U>UMAXN)
;;;2544   	{
;;;2545   	if((unet_max_drv_cnt<10)&&(main_1Hz_cnt>15))
;;;2546   		{
;;;2547   		unet_max_drv_cnt++;
;;;2548   		if(unet_max_drv_cnt>=10)
;;;2549   			{
;;;2550   			net_Ustore=net_U;
;;;2551   		 	avar_unet_hndl(2);
;;;2552   			
;;;2553   			}
;;;2554   		}
;;;2555   	else if(unet_max_drv_cnt>=10)unet_max_drv_cnt=10;
;;;2556   
;;;2557   	if(net_U>net_Ustore) net_Ustore=net_U;	
;;;2558   	}
;;;2559   
;;;2560   else if(net_U<UMAXN)
;;;2561   	{                 
;;;2562   	if(unet_max_drv_cnt)
;;;2563   		{
;;;2564   		unet_max_drv_cnt--;
;;;2565   		if(unet_max_drv_cnt<=0)
;;;2566   			{
;;;2567   			avar_unet_hndl(0);
;;;2568   			}
;;;2569   		}
;;;2570   	else if(unet_max_drv_cnt<0)unet_max_drv_cnt=0;
;;;2571   	
;;;2572   	}
;;;2573   #endif /*UKU_6U*/
;;;2574   }
002880  bd70              POP      {r4-r6,pc}
                  |L1.10370|
002882  ddfd              BLE      |L1.10368|
002884  2800              CMP      r0,#0                 ;2531
002886  d0fb              BEQ      |L1.10368|
002888  f1a00001          SUB      r0,r0,#1              ;2533
00288c  b240              SXTB     r0,r0                 ;2533
00288e  7010              STRB     r0,[r2,#0]            ;2533
002890  2800              CMP      r0,#0                 ;2534
002892  dcf5              BGT      |L1.10368|
002894  e8bd4070          POP      {r4-r6,lr}            ;2536
002898  2000              MOVS     r0,#0                 ;2536
00289a  f7ffbffe          B.W      avar_unet_hndl
;;;2575   
                          ENDP

                  matemat PROC
;;;2577   //-----------------------------------------------
;;;2578   void matemat(void)
00289e  e92d4ff0          PUSH     {r4-r11,lr}
;;;2579   {
0028a2  b087              SUB      sp,sp,#0x1c
;;;2580   //signed short temp_SS;
;;;2581   signed long temp_SL/*,temp_SL_*/;
;;;2582   char /*temp,*/i;
;;;2583   //signed short temp_SS;
;;;2584   
;;;2585   #ifdef UKU_MGTS
;;;2586   //напряжение сети
;;;2587   temp_SL=(signed long)net_buff_;
;;;2588   temp_SL*=Kunet;
;;;2589   temp_SL/=110000L;
;;;2590   net_U=(signed short)temp_SL;
;;;2591   #endif
;;;2592   
;;;2593   #ifdef UKU_RSTKM
;;;2594   //напряжение сети
;;;2595   temp_SL=(signed long)net_buff_;
;;;2596   temp_SL*=Kunet;
;;;2597   temp_SL/=110000L;
;;;2598   net_U=(signed short)temp_SL;
;;;2599   #endif
;;;2600   
;;;2601   #ifdef UKU_3U
;;;2602   //напряжение сети
;;;2603   temp_SL=(signed long)net_buff_;
;;;2604   temp_SL*=Kunet;
;;;2605   temp_SL/=36000L;
;;;2606   net_U=(signed short)temp_SL;
;;;2607   #endif
;;;2608   
;;;2609   #ifdef UKU_6U
;;;2610   //напряжение сети
;;;2611   
;;;2612   if((AUSW_MAIN%10)||(AUSW_MAIN==2400)||(AUSW_MAIN==4800)||(AUSW_MAIN==6000))
;;;2613   	{
;;;2614   
;;;2615   	if(bps[11]._device==dNET_METR)
;;;2616   		{
;;;2617   		net_metr_buff_[0]=((signed short)bps[11]._buff[0])+(((signed short)bps[11]._buff[1])<<8);
;;;2618   		net_metr_buff_[1]=((signed short)bps[11]._buff[2])+(((signed short)bps[11]._buff[3])<<8);
;;;2619   		net_metr_buff_[2]=((signed short)bps[11]._buff[4])+(((signed short)bps[11]._buff[5])<<8);
;;;2620   
;;;2621   		temp_SL=(signed long)net_metr_buff_[0];
;;;2622   		temp_SL*=KunetA;
;;;2623   		temp_SL/=6000L;
;;;2624   		net_Ua=(signed short)temp_SL;
;;;2625   	
;;;2626   		temp_SL=(signed long)net_metr_buff_[1];
;;;2627   		temp_SL*=KunetB;
;;;2628   		temp_SL/=6000L;
;;;2629   		net_Ub=(signed short)temp_SL;
;;;2630   	
;;;2631   		temp_SL=(signed long)net_metr_buff_[2];
;;;2632   		temp_SL*=KunetC;
;;;2633   		temp_SL/=6000L;
;;;2634   		net_Uc=(signed short)temp_SL;
;;;2635   		}
;;;2636   	else
;;;2637   		{
;;;2638   		temp_SL=(signed long)net_buff_;
;;;2639   		temp_SL*=KunetA;
;;;2640   		temp_SL/=110000L;
;;;2641   		net_Ua=(signed short)temp_SL;
;;;2642   	
;;;2643   		temp_SL=(signed long)adc_buff_[3];
;;;2644   		temp_SL*=KunetB;
;;;2645   		temp_SL/=6000L;
;;;2646   		net_Ub=(signed short)temp_SL;
;;;2647   	
;;;2648   		temp_SL=(signed long)adc_buff_[10];
;;;2649   		temp_SL*=KunetC;
;;;2650   		temp_SL/=6000L;
;;;2651   		net_Uc=(signed short)temp_SL;
;;;2652   		}
;;;2653   
;;;2654   	net_U=net_Ua;
;;;2655   	if(net_Ub<net_U)net_U=net_Ub;
;;;2656   	if(net_Uc<net_U)net_U=net_Uc;
;;;2657   	}
;;;2658   else 
;;;2659   	{
;;;2660   	temp_SL=(signed long)net_buff_;
;;;2661   	temp_SL*=Kunet;
;;;2662   	temp_SL/=110000L;
;;;2663   	net_U=(signed short)temp_SL;
;;;2664   	}
;;;2665   
;;;2666   
;;;2667   
;;;2668   
;;;2669   #endif
;;;2670   
;;;2671   #ifdef UKU_GLONASS
;;;2672   //напряжение сети
;;;2673   temp_SL=(signed long)net_buff_;
;;;2674   temp_SL*=Kunet;
;;;2675   temp_SL/=110000L;
;;;2676   net_U=(signed short)temp_SL;
;;;2677   #endif
;;;2678   
;;;2679   #ifdef UKU_KONTUR
;;;2680   //напряжение сети
;;;2681   temp_SL=(signed long)net_buff_;
;;;2682   temp_SL*=Kunet;
;;;2683   temp_SL/=110000L;
;;;2684   net_U=(signed short)temp_SL;
;;;2685   #endif
;;;2686   
;;;2687   #ifdef IPS_SGEP_GAZPROM
;;;2688   //напряжение сети
;;;2689   temp_SL=(signed long)net_buff_;
;;;2690   temp_SL*=Kunet;
;;;2691   temp_SL/=110000L;
;;;2692   net_U=(signed short)temp_SL;
;;;2693   #endif
;;;2694   
;;;2695   #ifdef UKU_220_V2
;;;2696   //напряжение сети
;;;2697   
;;;2698   if(AUSW_MAIN==22033)
;;;2699   	{
;;;2700   	temp_SL=(signed long)net_buff_;
;;;2701   	temp_SL*=KunetA;
;;;2702   	temp_SL/=6000L;
;;;2703   	net_Ua=(signed short)temp_SL;
;;;2704   
;;;2705   	temp_SL=(signed long)adc_buff_[3];
;;;2706   	temp_SL*=KunetB;
;;;2707   	temp_SL/=6000L;
;;;2708   	net_Ub=(signed short)temp_SL;
;;;2709   
;;;2710   	temp_SL=(signed long)adc_buff_[10];
;;;2711   	temp_SL*=KunetC;
;;;2712   	temp_SL/=6000L;
;;;2713   	net_Uc=(signed short)temp_SL;
;;;2714   
;;;2715   	net_U=net_Ua;
;;;2716   	if(net_Ub<net_U)net_U=net_Ub;
;;;2717   	if(net_Uc<net_U)net_U=net_Uc;
;;;2718   	}
;;;2719   else
;;;2720   	{
;;;2721   	temp_SL=(signed long)net_buff_;
;;;2722   	temp_SL*=Kunet;
;;;2723   	temp_SL/=5000L;
;;;2724   	net_U=(signed short)temp_SL;
;;;2725   	}
;;;2726   #endif
;;;2727   
;;;2728   
;;;2729   #ifdef UKU_220
;;;2730   //напряжение сети
;;;2731   
;;;2732   if(AUSW_MAIN==22035)
;;;2733   	{
;;;2734   	temp_SL=(signed long)net_buff_;
;;;2735   	temp_SL*=KunetA;
;;;2736   	temp_SL/=6000L;
;;;2737   	net_Ua=(signed short)temp_SL;
;;;2738   
;;;2739   	temp_SL=(signed long)adc_buff_[3];
;;;2740   	temp_SL*=KunetB;
;;;2741   	temp_SL/=6000L;
;;;2742   	net_Ub=(signed short)temp_SL;
;;;2743   
;;;2744   	temp_SL=(signed long)adc_buff_[10];
;;;2745   	temp_SL*=KunetC;
;;;2746   	temp_SL/=6000L;
;;;2747   	net_Uc=(signed short)temp_SL;
;;;2748   
;;;2749   	net_U=net_Ua;
;;;2750   	if(net_Ub<net_U)net_U=net_Ub;
;;;2751   	if(net_Uc<net_U)net_U=net_Uc;
;;;2752   	}
;;;2753   else
;;;2754   	{
;;;2755   	temp_SL=(signed long)net_buff_;
;;;2756   	temp_SL*=Kunet;
;;;2757   	#ifdef _ACDC_
;;;2758   	temp_SL/=500L;
;;;2759   	#else
;;;2760   	temp_SL/=5000L;
;;;2761   	#endif
;;;2762   	net_U=(signed short)temp_SL;
;;;2763   	
;;;2764   	}
;;;2765   #endif
;;;2766   
;;;2767   #ifdef UKU_220_IPS_TERMOKOMPENSAT
;;;2768   //напряжение сети
;;;2769   
;;;2770   
;;;2771   	if(bps[11]._device==dNET_METR)
0028a4  48d6              LDR      r0,|L1.11264|
;;;2772   		{
;;;2773   		net_metr_buff_[0]=((signed short)bps[11]._buff[0])+(((signed short)bps[11]._buff[1])<<8);
;;;2774   		net_metr_buff_[1]=((signed short)bps[11]._buff[2])+(((signed short)bps[11]._buff[3])<<8);
;;;2775   		net_metr_buff_[2]=((signed short)bps[11]._buff[4])+(((signed short)bps[11]._buff[5])<<8);
;;;2776   
;;;2777   		temp_SL=(signed long)net_metr_buff_[2];
;;;2778   		temp_SL*=KunetA;
0028a6  4bd7              LDR      r3,|L1.11268|
;;;2779   		temp_SL/=6000L;
;;;2780   		net_Ua=(signed short)temp_SL;
;;;2781   	
;;;2782   		temp_SL=(signed long)net_metr_buff_[1];
;;;2783   		temp_SL*=KunetB;
0028a8  49d8              LDR      r1,|L1.11276|
0028aa  f89003f4          LDRB     r0,[r0,#0x3f4]        ;2771  ; bps
;;;2784   		temp_SL/=6000L;
;;;2785   		net_Ub=(signed short)temp_SL;
;;;2786   	
;;;2787   		temp_SL=(signed long)net_metr_buff_[0];
;;;2788   		temp_SL*=KunetC;
0028ae  4ad8              LDR      r2,|L1.11280|
0028b0  9006              STR      r0,[sp,#0x18]         ;2778
0028b2  f8dfc354          LDR      r12,|L1.11272|
0028b6  f9b39000          LDRSH    r9,[r3,#0]            ;2778
0028ba  f9b1b000          LDRSH    r11,[r1,#0]           ;2783
0028be  f9b2a000          LDRSH    r10,[r2,#0]
0028c2  4fd4              LDR      r7,|L1.11284|
;;;2789   		temp_SL/=6000L;
;;;2790   		net_Uc=(signed short)temp_SL;
0028c4  4cd4              LDR      r4,|L1.11288|
;;;2791   
;;;2792   		net_F3=((signed short)bps[11]._buff[6])+(((signed short)bps[11]._buff[7])<<8);
;;;2793   
;;;2794   		net_U=net_Ua;
;;;2795   		if(net_Ub<net_U)net_U=net_Ub;
;;;2796   		if(net_Uc<net_U)net_U=net_Uc;
;;;2797   		}
;;;2798   	  else if(AUSW_MAIN==22033)
;;;2799   	{
;;;2800   	temp_SL=(signed long)net_buff_;
0028c6  4ed5              LDR      r6,|L1.11292|
0028c8  f2456511          MOV      r5,#0x5611            ;2798
0028cc  2807              CMP      r0,#7                 ;2771
0028ce  d036              BEQ      |L1.10558|
0028d0  4631              MOV      r1,r6
0028d2  f8df8338          LDR      r8,|L1.11276|
0028d6  8f4a              LDRH     r2,[r1,#0x3a]
0028d8  4619              MOV      r1,r3                 ;2778
;;;2801   	temp_SL*=KunetA;
;;;2802   	temp_SL/=4000L;
;;;2803   	net_Ua=(signed short)temp_SL;
;;;2804   
;;;2805   	temp_SL=(signed long)adc_buff_[3];
0028da  4bd2              LDR      r3,|L1.11300|
0028dc  f9b11000          LDRSH    r1,[r1,#0]            ;2778
0028e0  f9b88000          LDRSH    r8,[r8,#0]            ;2783
0028e4  434a              MULS     r2,r1,r2              ;2801
0028e6  f9b31006          LDRSH    r1,[r3,#6]
0028ea  f8df9324          LDR      r9,|L1.11280|
;;;2806   	temp_SL*=KunetB;
0028ee  fb01f108          MUL      r1,r1,r8
0028f2  f2417870          MOV      r8,#0x1770            ;2779
;;;2807   	temp_SL/=6000L;
;;;2808   	net_Ub=(signed short)temp_SL;
;;;2809   
;;;2810   	temp_SL=(signed long)adc_buff_[10];
0028f6  f9b33014          LDRSH    r3,[r3,#0x14]
0028fa  f9b99000          LDRSH    r9,[r9,#0]            ;2788
0028fe  fb91f1f8          SDIV     r1,r1,r8              ;2807
;;;2811   	temp_SL*=KunetC;
002902  fb03f309          MUL      r3,r3,r9
;;;2812   	temp_SL/=6000L;
002906  fb93f3f8          SDIV     r3,r3,r8
00290a  48c5              LDR      r0,|L1.11296|
00290c  b209              SXTH     r1,r1                 ;2808
;;;2813   	net_Uc=(signed short)temp_SL;
00290e  b21b              SXTH     r3,r3
002910  8800              LDRH     r0,[r0,#0]            ;2798  ; AUSW_MAIN
002912  42a8              CMP      r0,r5                 ;2798
002914  d154              BNE      |L1.10688|
002916  f44f607a          MOV      r0,#0xfa0             ;2802
00291a  fb92f0f0          SDIV     r0,r2,r0              ;2802
00291e  b200              SXTH     r0,r0                 ;2803
002920  f8ac0000          STRH     r0,[r12,#0]           ;2803
002924  8039              STRH     r1,[r7,#0]            ;2808
002926  8023              STRH     r3,[r4,#0]
;;;2814   
;;;2815   	net_U=net_Ua;
002928  4ab0              LDR      r2,|L1.11244|
00292a  8010              STRH     r0,[r2,#0]
;;;2816   	if(net_Ub<net_U)net_U=net_Ub;
00292c  4281              CMP      r1,r0
00292e  da00              BGE      |L1.10546|
002930  8011              STRH     r1,[r2,#0]
                  |L1.10546|
;;;2817   	if(net_Uc<net_U)net_U=net_Uc;
002932  f9b20000          LDRSH    r0,[r2,#0]  ; net_U
002936  4283              CMP      r3,r0
002938  da00              BGE      |L1.10556|
00293a  8013              STRH     r3,[r2,#0]
                  |L1.10556|
00293c  e07e              B        |L1.10812|
                  |L1.10558|
00293e  48ba              LDR      r0,|L1.11304|
002940  4bb6              LDR      r3,|L1.11292|
002942  7801              LDRB     r1,[r0,#0]            ;2773  ; bps
002944  7842              LDRB     r2,[r0,#1]            ;2773  ; bps
002946  f10303e8          ADD      r3,r3,#0xe8           ;2773
00294a  eb012102          ADD      r1,r1,r2,LSL #8       ;2773
00294e  fa1ff881          UXTH     r8,r1                 ;2773
002952  f8a38000          STRH     r8,[r3,#0]            ;2773
002956  7881              LDRB     r1,[r0,#2]            ;2774  ; bps
002958  78c2              LDRB     r2,[r0,#3]            ;2774  ; bps
00295a  eb012102          ADD      r1,r1,r2,LSL #8       ;2774
00295e  b289              UXTH     r1,r1                 ;2774
002960  8059              STRH     r1,[r3,#2]            ;2774
002962  7902              LDRB     r2,[r0,#4]            ;2775  ; bps
002964  f890e005          LDRB     lr,[r0,#5]            ;2775  ; bps
002968  eb02220e          ADD      r2,r2,lr,LSL #8       ;2775
00296c  b292              UXTH     r2,r2                 ;2775
00296e  809a              STRH     r2,[r3,#4]            ;2775
002970  fb02f209          MUL      r2,r2,r9              ;2778
002974  f2417370          MOV      r3,#0x1770            ;2779
002978  fb92f2f3          SDIV     r2,r2,r3              ;2779
00297c  fa0ff982          SXTH     r9,r2                 ;2780
002980  f8ac9000          STRH     r9,[r12,#0]           ;2780
002984  fb01f10b          MUL      r1,r1,r11             ;2783
002988  fb91f1f3          SDIV     r1,r1,r3              ;2784
00298c  b209              SXTH     r1,r1                 ;2785
00298e  8039              STRH     r1,[r7,#0]            ;2785
002990  fb08f80a          MUL      r8,r8,r10             ;2788
002994  fb98f2f3          SDIV     r2,r8,r3              ;2789
002998  b212              SXTH     r2,r2                 ;2790
00299a  8022              STRH     r2,[r4,#0]            ;2790
00299c  7983              LDRB     r3,[r0,#6]            ;2792  ; bps
00299e  79c0              LDRB     r0,[r0,#7]            ;2792  ; bps
0029a0  eb032000          ADD      r0,r3,r0,LSL #8       ;2792
0029a4  4ba1              LDR      r3,|L1.11308|
0029a6  8018              STRH     r0,[r3,#0]            ;2792
0029a8  4890              LDR      r0,|L1.11244|
0029aa  f8a09000          STRH     r9,[r0,#0]            ;2794
0029ae  4549              CMP      r1,r9                 ;2795
0029b0  da00              BGE      |L1.10676|
0029b2  8001              STRH     r1,[r0,#0]            ;2795
                  |L1.10676|
0029b4  f9b01000          LDRSH    r1,[r0,#0]            ;2796  ; net_U
0029b8  428a              CMP      r2,r1                 ;2796
0029ba  da3f              BGE      |L1.10812|
0029bc  8002              STRH     r2,[r0,#0]            ;2796
0029be  e03d              B        |L1.10812|
                  |L1.10688|
;;;2818   	}
;;;2819   else if((AUSW_MAIN==22063)||(AUSW_MAIN==22023)||(AUSW_MAIN==22043)||(AUSW_MAIN==22044)||(AUSW_MAIN==22018))
0029c0  f5a048ac          SUB      r8,r0,#0x5600
0029c4  f1b8082f          SUBS     r8,r8,#0x2f
0029c8  d00b              BEQ      |L1.10722|
0029ca  f1180828          ADDS     r8,r8,#0x28
0029ce  d008              BEQ      |L1.10722|
0029d0  f1b80814          SUBS     r8,r8,#0x14
0029d4  d005              BEQ      |L1.10722|
0029d6  f1b80801          SUBS     r8,r8,#1
0029da  d002              BEQ      |L1.10722|
0029dc  f118081a          ADDS     r8,r8,#0x1a
0029e0  d113              BNE      |L1.10762|
                  |L1.10722|
;;;2820   	{
;;;2821   	temp_SL=(signed long)net_buff_;
;;;2822   	temp_SL*=KunetA;
;;;2823   	temp_SL/=40000L;
0029e2  f6494040          MOV      r0,#0x9c40
0029e6  fb92f0f0          SDIV     r0,r2,r0
;;;2824   	net_Ua=(signed short)temp_SL;
0029ea  b200              SXTH     r0,r0
0029ec  f8ac0000          STRH     r0,[r12,#0]
;;;2825   
;;;2826   	temp_SL=(signed long)adc_buff_[3];
;;;2827   	temp_SL*=KunetB;
;;;2828   	temp_SL/=6000L;
;;;2829   	net_Ub=(signed short)temp_SL;
0029f0  8039              STRH     r1,[r7,#0]
;;;2830   
;;;2831   	temp_SL=(signed long)adc_buff_[10];
;;;2832   	temp_SL*=KunetC;
;;;2833   	temp_SL/=6000L;
;;;2834   	net_Uc=(signed short)temp_SL;
0029f2  8023              STRH     r3,[r4,#0]
;;;2835   
;;;2836   	net_U=net_Ua;
0029f4  4a7d              LDR      r2,|L1.11244|
0029f6  8010              STRH     r0,[r2,#0]
;;;2837   	if(net_Ub<net_U)net_U=net_Ub;
0029f8  4281              CMP      r1,r0
0029fa  da00              BGE      |L1.10750|
0029fc  8011              STRH     r1,[r2,#0]
                  |L1.10750|
;;;2838   	if(net_Uc<net_U)net_U=net_Uc;
0029fe  f9b20000          LDRSH    r0,[r2,#0]  ; net_U
002a02  4283              CMP      r3,r0
002a04  da1a              BGE      |L1.10812|
002a06  8013              STRH     r3,[r2,#0]
002a08  e018              B        |L1.10812|
                  |L1.10762|
;;;2839   	}
;;;2840   else	if((AUSW_MAIN==22010)||(AUSW_MAIN==22011) )
;;;2841   	{
;;;2842   	temp_SL=(signed long)net_buff_;
;;;2843   	temp_SL*=Kunet;
002a0a  4989              LDR      r1,|L1.11312|
002a0c  f5a043aa          SUB      r3,r0,#0x5500         ;2840
002a10  f9b12000          LDRSH    r2,[r1,#0]
002a14  4981              LDR      r1,|L1.11292|
002a16  8f49              LDRH     r1,[r1,#0x3a]         ;2800
002a18  4351              MULS     r1,r2,r1
002a1a  3bfa              SUBS     r3,r3,#0xfa           ;2840
002a1c  d001              BEQ      |L1.10786|
002a1e  1e5a              SUBS     r2,r3,#1              ;2840
002a20  d106              BNE      |L1.10800|
                  |L1.10786|
;;;2844   	temp_SL/=35000L;
002a22  f64800b8          MOV      r0,#0x88b8
002a26  fb91f0f0          SDIV     r0,r1,r0
;;;2845   	net_U=(signed short)temp_SL;
002a2a  4970              LDR      r1,|L1.11244|
002a2c  8008              STRH     r0,[r1,#0]
002a2e  e005              B        |L1.10812|
                  |L1.10800|
;;;2846   	
;;;2847   	}
;;;2848   else
;;;2849   	{
;;;2850   	temp_SL=(signed long)net_buff_;
;;;2851   	temp_SL*=Kunet;
;;;2852   	#ifdef _ACDC_
;;;2853   	temp_SL/=500L;
002a30  f44f70fa          MOV      r0,#0x1f4
002a34  fb91f0f0          SDIV     r0,r1,r0
;;;2854   	#else
;;;2855   	temp_SL/=5000L;
;;;2856   	#endif
;;;2857   	net_U=(signed short)temp_SL;
002a38  496c              LDR      r1,|L1.11244|
002a3a  8008              STRH     r0,[r1,#0]
                  |L1.10812|
;;;2858   	
;;;2859   	}
;;;2860   if(bps[11]._device!=dNET_METR) net_F3=net_F;
002a3c  9806              LDR      r0,[sp,#0x18]
002a3e  2807              CMP      r0,#7
002a40  d003              BEQ      |L1.10826|
002a42  487c              LDR      r0,|L1.11316|
002a44  8801              LDRH     r1,[r0,#0]  ; net_F
002a46  4879              LDR      r0,|L1.11308|
002a48  8001              STRH     r1,[r0,#0]
                  |L1.10826|
;;;2861   #endif
;;;2862   
;;;2863   #ifdef UKU_TELECORE2015
;;;2864   //напряжение сети
;;;2865   temp_SL=(signed long)net_buff_;
;;;2866   temp_SL*=Kunet;
;;;2867   temp_SL/=110000L;
;;;2868   net_U=(signed short)temp_SL;
;;;2869   #endif
;;;2870   
;;;2871   #ifdef UKU_TELECORE2017
;;;2872   //напряжение сети
;;;2873   temp_SL=(signed long)net_buff_;
;;;2874   temp_SL*=Kunet;
;;;2875   temp_SL/=110000L;
;;;2876   net_U=(signed short)temp_SL;
;;;2877   #endif
;;;2878   
;;;2879   //Напряжения батарей
;;;2880   temp_SL=(signed long)adc_buff_[0];
002a4a  4f76              LDR      r7,|L1.11300|
002a4c  f9b72000          LDRSH    r2,[r7,#0]  ; adc_buff_
;;;2881   temp_SL*=Kubat[0];
002a50  4979              LDR      r1,|L1.11320|
002a52  f9b10000          LDRSH    r0,[r1,#0]  ; Kubat
002a56  4350              MULS     r0,r2,r0
;;;2882   temp_SL/=2000L;
002a58  f44f68fa          MOV      r8,#0x7d0
002a5c  fb90f0f8          SDIV     r0,r0,r8
;;;2883   bat[0]._Ub=(signed short)temp_SL;
002a60  4c61              LDR      r4,|L1.11240|
002a62  8060              STRH     r0,[r4,#2]
;;;2884   
;;;2885   #ifdef UKU_220
;;;2886   //Напряжения батарей
;;;2887   temp_SL=(signed long)adc_buff_[0];
;;;2888   temp_SL*=Kubat[0];
;;;2889   temp_SL/=400L;
;;;2890   bat[0]._Ub=(signed short)temp_SL;
;;;2891   #endif
;;;2892   
;;;2893   #ifdef UKU_220_V2
;;;2894   //Напряжения батарей
;;;2895   temp_SL=(signed long)adc_buff_[0];
;;;2896   temp_SL*=Kubat[0];
;;;2897   temp_SL/=400L;
;;;2898   bat[0]._Ub=(signed short)temp_SL;
;;;2899   #endif
;;;2900   
;;;2901   //adc_buff_[4]=300;
;;;2902   
;;;2903   temp_SL=(signed long)adc_buff_[4];
002a64  f9b73008          LDRSH    r3,[r7,#8]  ; adc_buff_
;;;2904   temp_SL*=Kubatm[0];
002a68  4a74              LDR      r2,|L1.11324|
002a6a  f9b20000          LDRSH    r0,[r2,#0]  ; Kubatm
002a6e  fb00f003          MUL      r0,r0,r3
;;;2905   temp_SL/=700L;
002a72  f44f732f          MOV      r3,#0x2bc
002a76  fb90f0f3          SDIV     r0,r0,r3
;;;2906   bat[0]._Ubm=(signed short)temp_SL;
002a7a  80a0              STRH     r0,[r4,#4]
;;;2907   
;;;2908   #ifdef UKU_KONTUR
;;;2909   temp_SL=(signed long)adc_buff_[4];
;;;2910   temp_SL*=Kubatm[0];
;;;2911   temp_SL/=2000L;
;;;2912   bat[0]._Ubm=(signed short)temp_SL;
;;;2913   #endif
;;;2914   
;;;2915   #ifdef UKU_6U
;;;2916   temp_SL=(signed long)adc_buff_[4];
;;;2917   temp_SL*=Kubatm[0];
;;;2918   temp_SL/=2000L;
;;;2919   bat[0]._Ubm=(signed short)temp_SL;
;;;2920   #endif
;;;2921   
;;;2922   temp_SL=(signed long)adc_buff_[12];
002a7c  f9b70018          LDRSH    r0,[r7,#0x18]  ; adc_buff_
;;;2923   temp_SL*=Kubat[1];
002a80  f9b11002          LDRSH    r1,[r1,#2]  ; Kubat
002a84  fb01f100          MUL      r1,r1,r0
;;;2924   temp_SL/=2000L;
002a88  fb91f0f8          SDIV     r0,r1,r8
;;;2925   bat[1]._Ub=(signed short)temp_SL;
002a8c  f8a4004e          STRH     r0,[r4,#0x4e]
;;;2926   
;;;2927   #ifdef UKU_220
;;;2928   temp_SL=(signed long)adc_buff_[12];
;;;2929   temp_SL*=Kubat[1];
;;;2930   temp_SL/=400L;
;;;2931   bat[1]._Ub=(signed short)temp_SL;
;;;2932   #endif
;;;2933   
;;;2934   #ifdef UKU_220_V2
;;;2935   temp_SL=(signed long)adc_buff_[12];
;;;2936   temp_SL*=Kubat[1];
;;;2937   temp_SL/=400L;
;;;2938   bat[1]._Ub=(signed short)temp_SL;
;;;2939   #endif
;;;2940   
;;;2941   //adc_buff_[1]=300;
;;;2942   
;;;2943   temp_SL=(signed long)adc_buff_[1];
002a90  f9b71002          LDRSH    r1,[r7,#2]  ; adc_buff_
;;;2944   temp_SL*=Kubatm[1];
002a94  f9b20002          LDRSH    r0,[r2,#2]  ; Kubatm
002a98  fb00f001          MUL      r0,r0,r1
;;;2945   temp_SL/=700L;
002a9c  fb90f0f3          SDIV     r0,r0,r3
;;;2946   bat[1]._Ubm=(signed short)temp_SL;
002aa0  f8a40050          STRH     r0,[r4,#0x50]
;;;2947   #ifdef UKU_KONTUR
;;;2948   temp_SL=(signed long)adc_buff_[1];
;;;2949   temp_SL*=Kubatm[1];
;;;2950   temp_SL/=2000L;
;;;2951   bat[1]._Ubm=(signed short)temp_SL;
;;;2952   #endif
;;;2953   #ifdef UKU_6U
;;;2954   temp_SL=(signed long)adc_buff_[1];
;;;2955   temp_SL*=Kubatm[1];
;;;2956   temp_SL/=2000L;
;;;2957   bat[1]._Ubm=(signed short)temp_SL;
;;;2958   #endif
;;;2959   
;;;2960   #ifdef UKU_TELECORE2015
;;;2961   temp_SL=(signed long)adc_buff_[2];
;;;2962   temp_SL*=Kubat[0];
;;;2963   temp_SL/=2000L;
;;;2964   bat[0]._Ub=(signed short)temp_SL;
;;;2965   #endif
;;;2966   
;;;2967   /*
;;;2968   //Токи батарей
;;;2969   if(!mess_find_unvol(MESS2MATEMAT))
;;;2970   	{
;;;2971   	temp_SL=(signed long)ad7705_buff_[0];
;;;2972   	temp_SL-=(signed long)Kibat0[0];
;;;2973   	temp_SL*=(signed long)Kibat1[0];
;;;2974   	if((AUSW_MAIN==24120)||(AUSW_MAIN==24210))temp_SL/=300L;
;;;2975   	else temp_SL/=1000L;
;;;2976   	bat[0]._Ib=(signed short)temp_SL;
;;;2977   
;;;2978   	temp_SL=(signed long)ad7705_buff_[1];
;;;2979   	temp_SL-=(signed long)Kibat0[1];
;;;2980   	temp_SL*=(signed long)Kibat1[1];
;;;2981   	if((AUSW_MAIN==24120)||(AUSW_MAIN==24210))temp_SL/=300L;
;;;2982   	else temp_SL/=1000L;
;;;2983   	bat[1]._Ib=(signed short)temp_SL;
;;;2984   	}
;;;2985   */
;;;2986   
;;;2987   
;;;2988   //Токи батарей
;;;2989   if(!mess_find_unvol(MESS2MATEMAT))
002aa4  f04f00dc          MOV      r0,#0xdc
002aa8  f7fffffe          BL       mess_find_unvol
;;;2990   	{
;;;2991   	temp_SL=(signed long)ad7705_buff_[0];
;;;2992   	temp_SL-=(signed long)Kibat0[0];
;;;2993   	temp_SL*=(signed long)Kibat1[0];
;;;2994   	if((AUSW_MAIN==24120)||(AUSW_MAIN==24210))temp_SL/=300L;
;;;2995   	else if((AUSW_MAIN==22010)||(AUSW_MAIN==22035)||(AUSW_MAIN==22033))temp_SL/=2000L;
002aac  f2456c13          MOV      r12,#0x5613
002ab0  bbe8              CBNZ     r0,|L1.11054|
002ab2  f8dfa18c          LDR      r10,|L1.11328|
002ab6  f8ba0000          LDRH     r0,[r10,#0]           ;2991  ; ad7705_buff_
002aba  f8dfb188          LDR      r11,|L1.11332|
002abe  f8bb1000          LDRH     r1,[r11,#0]           ;2992  ; Kibat0
002ac2  eba00001          SUB      r0,r0,r1              ;2992
002ac6  4a60              LDR      r2,|L1.11336|
002ac8  f9b21000          LDRSH    r1,[r2,#0]            ;2993  ; Kibat1
002acc  fb01f100          MUL      r1,r1,r0              ;2993
002ad0  4853              LDR      r0,|L1.11296|
002ad2  f6456338          MOV      r3,#0x5e38            ;2994
002ad6  f6456992          MOV      r9,#0x5e92            ;2994
002ada  8800              LDRH     r0,[r0,#0]            ;2994  ; AUSW_MAIN
002adc  4298              CMP      r0,r3                 ;2994
002ade  d001              BEQ      |L1.10980|
002ae0  4548              CMP      r0,r9                 ;2994
002ae2  d104              BNE      |L1.10990|
                  |L1.10980|
002ae4  f44f7e96          MOV      lr,#0x12c             ;2994
002ae8  fb91f1fe          SDIV     r1,r1,lr              ;2994
002aec  e00f              B        |L1.11022|
                  |L1.10990|
002aee  f5a04ea8          SUB      lr,r0,#0x5400
002af2  f5be7efd          SUBS     lr,lr,#0x1fa
002af6  d003              BEQ      |L1.11008|
002af8  4560              CMP      r0,r12
002afa  d001              BEQ      |L1.11008|
002afc  42a8              CMP      r0,r5
002afe  d102              BNE      |L1.11014|
                  |L1.11008|
002b00  fb91f1f8          SDIV     r1,r1,r8
002b04  e003              B        |L1.11022|
                  |L1.11014|
;;;2996   	else temp_SL/=1000L;
002b06  f44f7e7a          MOV      lr,#0x3e8
002b0a  fb91f1fe          SDIV     r1,r1,lr
                  |L1.11022|
;;;2997   	#ifdef UKU_TELECORE2015
;;;2998   	temp_SL/=2L;
;;;2999   	//temp_SL=-temp_SL;
;;;3000   	#endif
;;;3001   	//#ifdef UKU_TELECORE2017
;;;3002   	//temp_SL/=-2L;
;;;3003   	//temp_SL=-temp_SL;
;;;3004   	//#endif
;;;3005   	bat[0]._Ib=(signed short)temp_SL;
002b0e  8121              STRH     r1,[r4,#8]
;;;3006   
;;;3007   	temp_SL=(signed long)ad7705_buff_[1];
002b10  f8ba1002          LDRH     r1,[r10,#2]  ; ad7705_buff_
;;;3008   	temp_SL-=(signed long)Kibat0[1];
002b14  f8bba002          LDRH     r10,[r11,#2]  ; Kibat0
002b18  eba10a0a          SUB      r10,r1,r10
;;;3009   	temp_SL*=(signed long)Kibat1[1];
002b1c  f9b21002          LDRSH    r1,[r2,#2]  ; Kibat1
002b20  fb01f10a          MUL      r1,r1,r10
;;;3010   	if((AUSW_MAIN==24120)||(AUSW_MAIN==24210))temp_SL/=300L;
002b24  4298              CMP      r0,r3
002b26  d001              BEQ      |L1.11052|
002b28  4548              CMP      r0,r9
002b2a  d106              BNE      |L1.11066|
                  |L1.11052|
002b2c  e000              B        |L1.11056|
                  |L1.11054|
002b2e  e015              B        |L1.11100|
                  |L1.11056|
002b30  f44f7096          MOV      r0,#0x12c
002b34  fb91f0f0          SDIV     r0,r1,r0
002b38  e00e              B        |L1.11096|
                  |L1.11066|
;;;3011   	else if((AUSW_MAIN==22010)||(AUSW_MAIN==22035)||(AUSW_MAIN==22033))temp_SL/=2000L;
002b3a  f5a042aa          SUB      r2,r0,#0x5500
002b3e  3afa              SUBS     r2,r2,#0xfa
002b40  d003              BEQ      |L1.11082|
002b42  4560              CMP      r0,r12
002b44  d001              BEQ      |L1.11082|
002b46  42a8              CMP      r0,r5
002b48  d102              BNE      |L1.11088|
                  |L1.11082|
002b4a  fb91f0f8          SDIV     r0,r1,r8
002b4e  e003              B        |L1.11096|
                  |L1.11088|
;;;3012   	else temp_SL/=1000L;
002b50  f44f707a          MOV      r0,#0x3e8
002b54  fb91f0f0          SDIV     r0,r1,r0
                  |L1.11096|
;;;3013   	bat[1]._Ib=(signed short)temp_SL;
002b58  f8a40054          STRH     r0,[r4,#0x54]
                  |L1.11100|
;;;3014   	}
;;;3015   
;;;3016   
;;;3017   
;;;3018   
;;;3019   
;;;3020   //Температуры батарей
;;;3021   
;;;3022   #ifdef UKU_KONTUR
;;;3023   if((adc_buff_[6]>800)&&(adc_buff_[6]<3800))bat[0]._nd=0;
;;;3024   else bat[0]._nd=1;
;;;3025   temp_SL=(signed long)adc_buff_[6];
;;;3026   temp_SL*=Ktbat[0];
;;;3027   temp_SL/=20000L;
;;;3028   temp_SL-=273L;
;;;3029   bat[0]._Tb=(signed short)temp_SL;
;;;3030   #else
;;;3031   if((adc_buff_[6]>800)&&(adc_buff_[6]<3800))bat[0]._nd=0;
002b5c  f9b7000c          LDRSH    r0,[r7,#0xc]  ; adc_buff_
002b60  f6403ab7          MOV      r10,#0xbb7
002b64  4681              MOV      r9,r0
002b66  f2a03021          SUB      r0,r0,#0x321
;;;3032   else bat[0]._nd=1;
002b6a  2201              MOVS     r2,#1
002b6c  2300              MOVS     r3,#0                 ;3031
002b6e  9005              STR      r0,[sp,#0x14]         ;3031
002b70  4550              CMP      r0,r10                ;3031
002b72  d201              BCS      |L1.11128|
002b74  7323              STRB     r3,[r4,#0xc]          ;3031
002b76  e000              B        |L1.11130|
                  |L1.11128|
002b78  7322              STRB     r2,[r4,#0xc]
                  |L1.11130|
;;;3033   temp_SL=(signed long)adc_buff_[6];
;;;3034   temp_SL*=Ktbat[0];
002b7a  4934              LDR      r1,|L1.11340|
002b7c  f9b10000          LDRSH    r0,[r1,#0]  ; Ktbat
002b80  fb00f009          MUL      r0,r0,r9
;;;3035   temp_SL/=20000L;
002b84  f6446e20          MOV      lr,#0x4e20
002b88  fb90f0fe          SDIV     r0,r0,lr
;;;3036   temp_SL-=273L;
002b8c  f2a01011          SUB      r0,r0,#0x111
;;;3037   bat[0]._Tb=(signed short)temp_SL;
002b90  8160              STRH     r0,[r4,#0xa]
;;;3038   #endif
;;;3039   
;;;3040   #ifdef UKU_KONTUR
;;;3041   if((adc_buff_[7]>800)&&(adc_buff_[7]<3800))bat[1]._nd=0;
;;;3042   else bat[1]._nd=1;
;;;3043   temp_SL=(signed long)adc_buff_[7];
;;;3044   temp_SL*=Ktbat[1];
;;;3045   temp_SL/=20000L;
;;;3046   temp_SL-=273L;
;;;3047   bat[1]._Tb=(signed short)temp_SL;
;;;3048   #else
;;;3049   if((adc_buff_[7]>800)&&(adc_buff_[7]<3800))bat[1]._nd=0;
002b92  f9b7000e          LDRSH    r0,[r7,#0xe]  ; adc_buff_
002b96  f2a03b21          SUB      r11,r0,#0x321
002b9a  45d3              CMP      r11,r10
002b9c  d202              BCS      |L1.11172|
002b9e  f8843058          STRB     r3,[r4,#0x58]
002ba2  e001              B        |L1.11176|
                  |L1.11172|
;;;3050   else bat[1]._nd=1;
002ba4  f8842058          STRB     r2,[r4,#0x58]
                  |L1.11176|
;;;3051   temp_SL=(signed long)adc_buff_[7];
;;;3052   temp_SL*=Ktbat[1];
002ba8  f9b11002          LDRSH    r1,[r1,#2]  ; Ktbat
002bac  4341              MULS     r1,r0,r1
;;;3053   temp_SL/=20000L;
002bae  f6446020          MOV      r0,#0x4e20
002bb2  fb91f0f0          SDIV     r0,r1,r0
;;;3054   temp_SL-=273L;
002bb6  f2a01011          SUB      r0,r0,#0x111
;;;3055   bat[1]._Tb=(signed short)temp_SL;
002bba  490b              LDR      r1,|L1.11240|
002bbc  f8a10056          STRH     r0,[r1,#0x56]
;;;3056   #endif
;;;3057   
;;;3058   #ifdef UKU_6U
;;;3059   
;;;3060   if(NUMMAKB==2)
;;;3061   	{
;;;3062   	if(makb[0]._cnt<5)
;;;3063   		{
;;;3064   		if(makb[0]._T_nd[0]==0)
;;;3065   			{
;;;3066   			bat[0]._Tb=makb[0]._T[0];
;;;3067   			bat[0]._nd=0;
;;;3068   			}
;;;3069   		}
;;;3070   
;;;3071   	if(makb[1]._cnt<5)
;;;3072   		{
;;;3073   		if(makb[1]._T_nd[0]==0)
;;;3074   			{
;;;3075   			bat[1]._Tb=makb[1]._T[0];
;;;3076   			bat[1]._nd=0;
;;;3077   			}
;;;3078   		}
;;;3079   
;;;3080   	}
;;;3081   else if(NUMMAKB==4)
;;;3082   	{
;;;3083   	signed short temp_t;
;;;3084   	temp_t=-20;
;;;3085   	if(makb[0]._cnt<5)
;;;3086   		{
;;;3087   		if(makb[0]._T_nd[0]==0)
;;;3088   			{
;;;3089   			temp_t=makb[0]._T[0];
;;;3090   			bat[0]._nd=0;
;;;3091   			}
;;;3092   		}
;;;3093   	if(makb[1]._cnt<5)
;;;3094   		{
;;;3095   		if(makb[1]._T_nd[0]==0)
;;;3096   			{
;;;3097   			if(temp_t<makb[1]._T[0])
;;;3098   				{
;;;3099   				bat[0]._nd=0;
;;;3100   				temp_t=makb[1]._T[0];
;;;3101   				}
;;;3102   			}
;;;3103   		}
;;;3104   	if(temp_t!=-20)bat[0]._Tb = temp_t;
;;;3105   
;;;3106    	temp_t=-20;
;;;3107   	if(makb[2]._cnt<5)
;;;3108   		{
;;;3109   		if(makb[2]._T_nd[0]==0)
;;;3110   			{
;;;3111   			temp_t=makb[2]._T[0];
;;;3112   			bat[1]._nd=0;
;;;3113   			}
;;;3114   		}
;;;3115   	if(makb[3]._cnt<5)
;;;3116   		{
;;;3117   		if(makb[3]._T_nd[0]==0)
;;;3118   			{
;;;3119   			if(temp_t<makb[3]._T[0])
;;;3120   				{
;;;3121   				bat[1]._nd=0;
;;;3122   				temp_t=makb[3]._T[0];
;;;3123   				}
;;;3124   			}
;;;3125   		}
;;;3126   	if(temp_t!=-20)bat[1]._Tb = temp_t;
;;;3127   	}
;;;3128   
;;;3129   #endif
;;;3130   
;;;3131   
;;;3132   //Напряжение нагрузки
;;;3133   temp_SL=(signed long)adc_buff_[2];
002bc0  f9b71004          LDRSH    r1,[r7,#4]  ; adc_buff_
;;;3134   temp_SL*=Kuload;
002bc4  4822              LDR      r0,|L1.11344|
002bc6  f9b00000          LDRSH    r0,[r0,#0]  ; Kuload
002bca  fb01f000          MUL      r0,r1,r0
;;;3135   temp_SL/=2000L;
002bce  f44f64fa          MOV      r4,#0x7d0
002bd2  fb90f0f4          SDIV     r0,r0,r4
;;;3136   load_U=(signed short)temp_SL;
002bd6  4c1f              LDR      r4,|L1.11348|
002bd8  8020              STRH     r0,[r4,#0]
;;;3137   
;;;3138   #ifdef UKU_220 
;;;3139   //Напряжение нагрузки
;;;3140   temp_SL=(signed long)adc_buff_[2];
;;;3141   temp_SL*=Kuload;
;;;3142   temp_SL/=350L;
;;;3143   load_U=(signed short)temp_SL;
;;;3144   #endif
;;;3145   
;;;3146   #ifdef UKU_220_V2 
;;;3147   //Напряжение нагрузки
;;;3148   temp_SL=(signed long)adc_buff_[2];
;;;3149   temp_SL*=Kuload;
;;;3150   temp_SL/=350L;
;;;3151   load_U=(signed short)temp_SL;
;;;3152   #endif
;;;3153   
;;;3154   #ifdef UKU_220_IPS_TERMOKOMPENSAT
;;;3155   //Напряжение шины
;;;3156   temp_SL=(signed long)adc_buff_[1];
002bda  f9b78002          LDRSH    r8,[r7,#2]  ; adc_buff_
;;;3157   temp_SL*=Kuout;
002bde  e03b              B        |L1.11352|
                  |L1.11232|
                          DCD      bat_ips
                  |L1.11236|
                          DCD      bat_u_old_cnt
                  |L1.11240|
                          DCD      bat
                  |L1.11244|
                          DCD      net_U
                  |L1.11248|
                          DCD      UMN
                  |L1.11252|
                          DCD      unet_drv_cnt
                  |L1.11256|
                          DCD      net_Ustore
                  |L1.11260|
                          DCD      main_1Hz_cnt
                  |L1.11264|
                          DCD      bps
                  |L1.11268|
                          DCD      KunetA
                  |L1.11272|
                          DCD      net_Ua
                  |L1.11276|
                          DCD      KunetB
                  |L1.11280|
                          DCD      KunetC
                  |L1.11284|
                          DCD      net_Ub
                  |L1.11288|
                          DCD      net_Uc
                  |L1.11292|
                          DCD      ||area_number.25||
                  |L1.11296|
                          DCD      AUSW_MAIN
                  |L1.11300|
                          DCD      ||.bss||+0x40c
                  |L1.11304|
                          DCD      bps+0x3fa
                  |L1.11308|
                          DCD      net_F3
                  |L1.11312|
                          DCD      Kunet
                  |L1.11316|
                          DCD      net_F
                  |L1.11320|
                          DCD      Kubat
                  |L1.11324|
                          DCD      Kubatm
                  |L1.11328|
                          DCD      ad7705_buff_
                  |L1.11332|
                          DCD      Kibat0
                  |L1.11336|
                          DCD      Kibat1
                  |L1.11340|
                          DCD      Ktbat
                  |L1.11344|
                          DCD      Kuload
                  |L1.11348|
                          DCD      load_U
                  |L1.11352|
002c58  48fc              LDR      r0,|L1.12364|
002c5a  f9b00000          LDRSH    r0,[r0,#0]  ; Kuout
002c5e  fb08f800          MUL      r8,r8,r0
;;;3158   if(AUSW_MAIN==22010)temp_SL/=400L;
002c62  48fb              LDR      r0,|L1.12368|
002c64  f24554fa          MOV      r4,#0x55fa
002c68  f44f7bc8          MOV      r11,#0x190
002c6c  8800              LDRH     r0,[r0,#0]  ; AUSW_MAIN
002c6e  42a0              CMP      r0,r4
002c70  d102              BNE      |L1.11384|
002c72  fb98f8fb          SDIV     r8,r8,r11
002c76  e003              B        |L1.11392|
                  |L1.11384|
;;;3159   else temp_SL/=500L;
002c78  f44f7efa          MOV      lr,#0x1f4
002c7c  fb98f8fe          SDIV     r8,r8,lr
                  |L1.11392|
;;;3160   out_U=(signed short)temp_SL;
002c80  f8dfe3d0          LDR      lr,|L1.12372|
002c84  fa0ff888          SXTH     r8,r8
002c88  f8ae8000          STRH     r8,[lr,#0]
;;;3161   load_U=out_U;
002c8c  f8dfe3c8          LDR      lr,|L1.12376|
002c90  f8ae8000          STRH     r8,[lr,#0]
;;;3162   
;;;3163   //Напряжение выпрямителей
;;;3164   temp_SL=(signed long)adc_buff_[2];
;;;3165   temp_SL*=Kubps;
002c94  4ff1              LDR      r7,|L1.12380|
002c96  f9b77000          LDRSH    r7,[r7,#0]  ; Kubps
002c9a  fb01f107          MUL      r1,r1,r7
;;;3166   if(AUSW_MAIN==22010)temp_SL/=400L;
002c9e  d102              BNE      |L1.11430|
002ca0  fb91f1fb          SDIV     r1,r1,r11
002ca4  e003              B        |L1.11438|
                  |L1.11430|
;;;3167   else temp_SL/=500L;
002ca6  f44f74fa          MOV      r4,#0x1f4
002caa  fb91f1f4          SDIV     r1,r1,r4
                  |L1.11438|
;;;3168   bps_U=(signed short)temp_SL;
002cae  4cec              LDR      r4,|L1.12384|
002cb0  b209              SXTH     r1,r1
002cb2  8021              STRH     r1,[r4,#0]
;;;3169   
;;;3170   if(bps_U<100)
002cb4  2964              CMP      r1,#0x64
002cb6  da19              BGE      |L1.11500|
;;;3171   	{
;;;3172   	char i;
;;;3173   	for(i=0;i<NUMIST;i++)
002cb8  f04f0100          MOV      r1,#0
002cbc  46a6              MOV      lr,r4                 ;3168
002cbe  4ce9              LDR      r4,|L1.12388|
002cc0  f9b4b000          LDRSH    r11,[r4,#0]
002cc4  e010              B        |L1.11496|
                  |L1.11462|
;;;3174   		{
;;;3175   		if(bps[i]._Uin>bps_U)bps_U=bps[i]._Uin;
002cc6  ebc104c1          RSB      r4,r1,r1,LSL #3
002cca  eb041701          ADD      r7,r4,r1,LSL #4
002cce  4ce6              LDR      r4,|L1.12392|
002cd0  eb040487          ADD      r4,r4,r7,LSL #2
002cd4  f9be7000          LDRSH    r7,[lr,#0]  ; bps_U
002cd8  6a24              LDR      r4,[r4,#0x20]
002cda  42bc              CMP      r4,r7
002cdc  dd01              BLE      |L1.11490|
002cde  f8ae4000          STRH     r4,[lr,#0]
                  |L1.11490|
002ce2  f1010101          ADD      r1,r1,#1              ;3173
002ce6  b2c9              UXTB     r1,r1                 ;3173
                  |L1.11496|
002ce8  4559              CMP      r1,r11                ;3173
002cea  dbec              BLT      |L1.11462|
                  |L1.11500|
;;;3176   		}
;;;3177   	}
;;;3178   
;;;3179   //Суммарный ток выпрямителей
;;;3180   temp_SL=0;
002cec  f04f0b00          MOV      r11,#0
;;;3181   for (i=0;i<NUMIST;i++)
002cf0  4659              MOV      r1,r11
002cf2  4cdc              LDR      r4,|L1.12388|
002cf4  f9b47000          LDRSH    r7,[r4,#0]            ;3173
002cf8  4cdb              LDR      r4,|L1.12392|
002cfa  e00b              B        |L1.11540|
                  |L1.11516|
;;;3182   	{
;;;3183   	temp_SL+=((signed long)bps[i]._Ii);
002cfc  ebc10ec1          RSB      lr,r1,r1,LSL #3
002d00  eb0e1e01          ADD      lr,lr,r1,LSL #4
002d04  eb040e8e          ADD      lr,r4,lr,LSL #2
002d08  f8dee024          LDR      lr,[lr,#0x24]
002d0c  44f3              ADD      r11,r11,lr
002d0e  f1010101          ADD      r1,r1,#1              ;3181
002d12  b2c9              UXTB     r1,r1                 ;3181
                  |L1.11540|
002d14  42b9              CMP      r1,r7                 ;3181
002d16  dbf1              BLT      |L1.11516|
;;;3184   	}
;;;3185   bps_I=(signed short)temp_SL;
002d18  49d4              LDR      r1,|L1.12396|
002d1a  f8a1b000          STRH     r11,[r1,#0]
;;;3186   
;;;3187   
;;;3188   #endif
;;;3189   
;;;3190   
;;;3191   #ifdef UKU_KONTUR
;;;3192   //Внешний датчик температуры №1(температура внешнего воздуха)
;;;3193   if((adc_buff_[5]>800)&&(adc_buff_[5]<3800))ND_EXT[0]=0;
;;;3194   else ND_EXT[0]=1;
;;;3195   temp_SL=(signed long)adc_buff_[5];
;;;3196   temp_SL*=Ktext[0];
;;;3197   temp_SL/=20000L;
;;;3198   temp_SL-=273L;
;;;3199   t_ext[0]=(signed short)temp_SL;
;;;3200   #else 
;;;3201   //Внешний датчик температуры №1(температура внешнего воздуха)
;;;3202   if((adc_buff_[5]>800)&&(adc_buff_[5]<3800))ND_EXT[0]=0;
002d1e  49d4              LDR      r1,|L1.12400|
002d20  f6403ab7          MOV      r10,#0xbb7
002d24  f9b1b00a          LDRSH    r11,[r1,#0xa]  ; adc_buff_
002d28  49d2              LDR      r1,|L1.12404|
002d2a  f2ab3e21          SUB      lr,r11,#0x321
002d2e  f8cde010          STR      lr,[sp,#0x10]
002d32  45d6              CMP      lr,r10
002d34  d201              BCS      |L1.11578|
002d36  700b              STRB     r3,[r1,#0]
002d38  e000              B        |L1.11580|
                  |L1.11578|
;;;3203   else ND_EXT[0]=1;
002d3a  700a              STRB     r2,[r1,#0]
                  |L1.11580|
;;;3204   temp_SL=(signed long)adc_buff_[5];
;;;3205   temp_SL*=Ktext[0];
002d3c  f8dfa338          LDR      r10,|L1.12408|
002d40  f9baa000          LDRSH    r10,[r10,#0]  ; Ktext
002d44  f8cda00c          STR      r10,[sp,#0xc]
002d48  fb0afa0b          MUL      r10,r10,r11
;;;3206   temp_SL/=20000L;
002d4c  f6446e20          MOV      lr,#0x4e20
002d50  fb9afafe          SDIV     r10,r10,lr
;;;3207   temp_SL-=273L;
002d54  f2aa1a11          SUB      r10,r10,#0x111
;;;3208   t_ext[0]=(signed short)temp_SL;
002d58  f8dfe320          LDR      lr,|L1.12412|
002d5c  f8aea000          STRH     r10,[lr,#0]
;;;3209   /*
;;;3210   if((adc_buff_[6]>800)&&(adc_buff_[6]<3800))ND_EXT[1]=0;
;;;3211   else ND_EXT[1]=1;
;;;3212   temp_SL=(signed long)adc_buff_[6];
;;;3213   temp_SL*=Ktext[1];
;;;3214   temp_SL/=20000L;
;;;3215   temp_SL-=273L;
;;;3216   t_ext[1]=(signed short)temp_SL;	*/
;;;3217   #endif
;;;3218   
;;;3219   #ifdef UKU_220
;;;3220   
;;;3221   //Внешний датчик температуры №2(температура отсека ЭПУ)
;;;3222   if((adc_buff_[3]>800)&&(adc_buff_[3]<3800))ND_EXT[1]=0;
;;;3223   else ND_EXT[1]=1;
;;;3224   temp_SL=(signed long)adc_buff_[3];
;;;3225   temp_SL*=Ktext[1];
;;;3226   temp_SL/=20000L;
;;;3227   temp_SL-=273L;
;;;3228   t_ext[1]=(signed short)temp_SL;
;;;3229   
;;;3230   //Внешний датчик температуры №3(температура отсека MSAN)
;;;3231   if((adc_buff_[10]>800)&&(adc_buff_[10]<3800))ND_EXT[2]=0;
;;;3232   else ND_EXT[2]=1;
;;;3233   temp_SL=(signed long)adc_buff_[10];
;;;3234   temp_SL*=Ktext[2];
;;;3235   temp_SL/=20000L;
;;;3236   temp_SL-=273L;
;;;3237   t_ext[2]=(signed short)temp_SL;
;;;3238   
;;;3239   #else
;;;3240   
;;;3241   
;;;3242   #ifdef UKU_220_IPS_TERMOKOMPENSAT
;;;3243   
;;;3244   //Внешний датчик температуры 
;;;3245   if((adc_buff_[6]>800)&&(adc_buff_[6]<3800))ND_EXT[0]=0;
002d60  f8dda014          LDR      r10,[sp,#0x14]
002d64  f6403eb7          MOV      lr,#0xbb7
002d68  45f2              CMP      r10,lr
002d6a  d201              BCS      |L1.11632|
002d6c  700b              STRB     r3,[r1,#0]
002d6e  e000              B        |L1.11634|
                  |L1.11632|
;;;3246   else ND_EXT[0]=1;
002d70  700a              STRB     r2,[r1,#0]
                  |L1.11634|
;;;3247   temp_SL=(signed long)adc_buff_[6];
;;;3248   temp_SL*=Ktext[0];
002d72  f8dda00c          LDR      r10,[sp,#0xc]
002d76  fb0afa09          MUL      r10,r10,r9
;;;3249   temp_SL/=20000L;
002d7a  f6446920          MOV      r9,#0x4e20
002d7e  fb9af9f9          SDIV     r9,r10,r9
;;;3250   temp_SL-=273L;
002d82  f2a91911          SUB      r9,r9,#0x111
;;;3251   t_ext[0]=(signed short)temp_SL;
002d86  f8dfe2f4          LDR      lr,|L1.12412|
002d8a  f8ae9000          STRH     r9,[lr,#0]
;;;3252   
;;;3253   //Внешний датчик температуры №2
;;;3254   if((adc_buff_[5]>800)&&(adc_buff_[5]<3800))ND_EXT[1]=0;
002d8e  f8dd9010          LDR      r9,[sp,#0x10]
002d92  f6403ab7          MOV      r10,#0xbb7
002d96  45d1              CMP      r9,r10
002d98  d201              BCS      |L1.11678|
002d9a  704b              STRB     r3,[r1,#1]
002d9c  e000              B        |L1.11680|
                  |L1.11678|
;;;3255   else ND_EXT[1]=1;
002d9e  704a              STRB     r2,[r1,#1]
                  |L1.11680|
;;;3256   temp_SL=(signed long)adc_buff_[5];
;;;3257   temp_SL*=Ktext[1];
002da0  4ab5              LDR      r2,|L1.12408|
002da2  f9b22002          LDRSH    r2,[r2,#2]  ; Ktext
002da6  fb02f20b          MUL      r2,r2,r11
;;;3258   temp_SL/=20000L;
002daa  f6446920          MOV      r9,#0x4e20
002dae  fb92f2f9          SDIV     r2,r2,r9
;;;3259   temp_SL-=273L;
002db2  f2a21211          SUB      r2,r2,#0x111
;;;3260   t_ext[1]=(signed short)temp_SL;
002db6  fa0ffa82          SXTH     r10,r2
002dba  4ab0              LDR      r2,|L1.12412|
002dbc  f8a2a002          STRH     r10,[r2,#2]
;;;3261   #else
;;;3262   
;;;3263   
;;;3264   
;;;3265   //Внешний датчик температуры №2(температура отсека ЭПУ)
;;;3266   if((adc_buff_[6]>800)&&(adc_buff_[6]<3800))ND_EXT[1]=0;
;;;3267   else ND_EXT[1]=1;
;;;3268   temp_SL=(signed long)adc_buff_[6];
;;;3269   temp_SL*=Ktext[1];
;;;3270   temp_SL/=20000L;
;;;3271   temp_SL-=273L;
;;;3272   t_ext[1]=(signed short)temp_SL;
;;;3273   
;;;3274   //Внешний датчик температуры №3(температура отсека MSAN)
;;;3275   if((adc_buff_[3]>800)&&(adc_buff_[3]<3800))ND_EXT[2]=0;
;;;3276   else ND_EXT[2]=1;
;;;3277   temp_SL=(signed long)adc_buff_[3];
;;;3278   temp_SL*=Ktext[2];
;;;3279   temp_SL/=20000L;
;;;3280   temp_SL-=273L;
;;;3281   t_ext[2]=(signed short)temp_SL;
;;;3282   
;;;3283   #endif
;;;3284   #endif
;;;3285   
;;;3286   #ifdef UKU_220_V2
;;;3287   
;;;3288   //Внешний датчик температуры №2(температура отсека ЭПУ)
;;;3289   if((adc_buff_[3]>800)&&(adc_buff_[3]<3800))ND_EXT[1]=0;
;;;3290   else ND_EXT[1]=1;
;;;3291   temp_SL=(signed long)adc_buff_[3];
;;;3292   temp_SL*=Ktext[1];
;;;3293   temp_SL/=20000L;
;;;3294   temp_SL-=273L;
;;;3295   t_ext[1]=(signed short)temp_SL;
;;;3296   
;;;3297   //Внешний датчик температуры №3(температура отсека MSAN)
;;;3298   if((adc_buff_[10]>800)&&(adc_buff_[10]<3800))ND_EXT[2]=0;
;;;3299   else ND_EXT[2]=1;
;;;3300   temp_SL=(signed long)adc_buff_[10];
;;;3301   temp_SL*=Ktext[2];
;;;3302   temp_SL/=20000L;
;;;3303   temp_SL-=273L;
;;;3304   t_ext[2]=(signed short)temp_SL;
;;;3305   
;;;3306   #else
;;;3307   
;;;3308   #ifdef UKU_220_IPS_TERMOKOMPENSAT
;;;3309   //Ток батареи
;;;3310   if(bps[8]._device==dIBAT_METR)
002dc0  f89422e0          LDRB     r2,[r4,#0x2e0]  ; bps
;;;3311   	{
;;;3312   	ibat_metr_buff_[0]=((signed long)bps[8]._buff[0])+(((signed long)bps[8]._buff[1])<<8);
;;;3313   	ibat_metr_buff_[1]=((signed long)bps[8]._buff[2])+(((signed long)bps[8]._buff[3])<<8);
;;;3314   	bIBAT_SMKLBR=((signed short)bps[8]._buff[4])+(((signed short)bps[8]._buff[5])<<8);
;;;3315   	if(bIBAT_SMKLBR) bIBAT_SMKLBR_cnt=50;
;;;3316   	if(!bIBAT_SMKLBR)
;;;3317   		{
;;;3318   		signed long temp_SL;
;;;3319   		temp_SL=(signed long)ibat_metr_buff_[0];
;;;3320   		temp_SL-=(signed long)ibat_metr_buff_[1];
;;;3321   		temp_SL*=(signed long)Kibat1[0];
;;;3322   		if((AUSW_MAIN==22010)||(AUSW_MAIN==22011)||(AUSW_MAIN==22035)||(AUSW_MAIN==22033)||(AUSW_MAIN==22063)||(AUSW_MAIN==22023)||(AUSW_MAIN==22043)||(AUSW_MAIN==22044))temp_SL/=2000L;
;;;3323   	
;;;3324   		Ib_ips_termokompensat =(signed short)temp_SL;
002dc4  f8df92b8          LDR      r9,|L1.12416|
002dc8  2a09              CMP      r2,#9                 ;3310
002dca  d15f              BNE      |L1.11916|
002dcc  f89422e6          LDRB     r2,[r4,#0x2e6]        ;3312  ; bps
002dd0  f894b2e7          LDRB     r11,[r4,#0x2e7]       ;3312  ; bps
002dd4  f8dfe2ac          LDR      lr,|L1.12420|
002dd8  eb02220b          ADD      r2,r2,r11,LSL #8      ;3312
002ddc  f8ce2000          STR      r2,[lr,#0]            ;3312  ; ibat_metr_buff_
002de0  9202              STR      r2,[sp,#8]            ;3312
002de2  f89422e8          LDRB     r2,[r4,#0x2e8]        ;3313  ; bps
002de6  f894b2e9          LDRB     r11,[r4,#0x2e9]       ;3313  ; bps
002dea  eb02220b          ADD      r2,r2,r11,LSL #8      ;3313
002dee  f8ce2004          STR      r2,[lr,#4]            ;3313  ; ibat_metr_buff_
002df2  f894b2ea          LDRB     r11,[r4,#0x2ea]       ;3314  ; bps
002df6  f894e2eb          LDRB     lr,[r4,#0x2eb]        ;3314  ; bps
002dfa  eb0b2b0e          ADD      r11,r11,lr,LSL #8     ;3314
002dfe  f8dfe288          LDR      lr,|L1.12424|
002e02  fa0ffb8b          SXTH     r11,r11               ;3314
002e06  f8aeb000          STRH     r11,[lr,#0]           ;3314
002e0a  f1bb0f00          CMP      r11,#0                ;3315
002e0e  d005              BEQ      |L1.11804|
002e10  f8dfb278          LDR      r11,|L1.12428|
002e14  f04f0e32          MOV      lr,#0x32              ;3315
002e18  f8abe000          STRH     lr,[r11,#0]           ;3315
                  |L1.11804|
002e1c  d136              BNE      |L1.11916|
002e1e  f8ddb008          LDR      r11,[sp,#8]           ;3319
002e22  ebab0b02          SUB      r11,r11,r2            ;3320
002e26  4a9a              LDR      r2,|L1.12432|
002e28  f9b22000          LDRSH    r2,[r2,#0]            ;3321  ; Kibat1
002e2c  fb02f20b          MUL      r2,r2,r11             ;3321
002e30  f5a04ba8          SUB      r11,r0,#0x5400        ;3322
002e34  f5bb7bfd          SUBS     r11,r11,#0x1fa        ;3322
002e38  d00f              BEQ      |L1.11866|
002e3a  f1bb0b01          SUBS     r11,r11,#1            ;3322
002e3e  d00c              BEQ      |L1.11866|
002e40  4560              CMP      r0,r12                ;3322
002e42  d00a              BEQ      |L1.11866|
002e44  42a8              CMP      r0,r5                 ;3322
002e46  d008              BEQ      |L1.11866|
002e48  f1bb0534          SUBS     r5,r11,#0x34          ;3322
002e4c  d005              BEQ      |L1.11866|
002e4e  3528              ADDS     r5,r5,#0x28           ;3322
002e50  d003              BEQ      |L1.11866|
002e52  3d14              SUBS     r5,r5,#0x14           ;3322
002e54  d001              BEQ      |L1.11866|
002e56  1e6d              SUBS     r5,r5,#1              ;3322
002e58  d103              BNE      |L1.11874|
                  |L1.11866|
002e5a  f44f65fa          MOV      r5,#0x7d0             ;3322
002e5e  fb92f2f5          SDIV     r2,r2,r5              ;3322
                  |L1.11874|
002e62  b215              SXTH     r5,r2
002e64  f8a95000          STRH     r5,[r9,#0]
;;;3325   		if(bIBAT_SMKLBR_cnt)
002e68  f8dfc220          LDR      r12,|L1.12428|
;;;3326   			{
;;;3327   			bIBAT_SMKLBR_cnt--;
;;;3328   			Ib_ips_termokompensat=Ib_ips_termokompensat_temp;
002e6c  f8dfb224          LDR      r11,|L1.12436|
002e70  f9bc2000          LDRSH    r2,[r12,#0]           ;3325  ; bIBAT_SMKLBR_cnt
002e74  b142              CBZ      r2,|L1.11912|
002e76  f1a20201          SUB      r2,r2,#1              ;3327
002e7a  f8ac2000          STRH     r2,[r12,#0]           ;3327
002e7e  f8bb2000          LDRH     r2,[r11,#0]  ; Ib_ips_termokompensat_temp
002e82  f8a92000          STRH     r2,[r9,#0]
002e86  e001              B        |L1.11916|
                  |L1.11912|
;;;3329   			}
;;;3330   		else 
;;;3331   			{
;;;3332   			Ib_ips_termokompensat_temp=Ib_ips_termokompensat;
002e88  f8ab5000          STRH     r5,[r11,#0]
                  |L1.11916|
;;;3333   			}
;;;3334   		}
;;;3335   	}
;;;3336   
;;;3337   bat[0]._Ub=load_U;
002e8c  4a82              LDR      r2,|L1.12440|
002e8e  f8a28002          STRH     r8,[r2,#2]
002e92  f8cd8004          STR      r8,[sp,#4]
;;;3338   if(AUSW_MAIN==22018) Ib_ips_termokompensat=bat[0]._Ib;
002e96  f5a045ac          SUB      r5,r0,#0x5600
002e9a  3d02              SUBS     r5,#2
002e9c  d103              BNE      |L1.11942|
002e9e  8910              LDRH     r0,[r2,#8]  ; bat
002ea0  f8a90000          STRH     r0,[r9,#0]
002ea4  e002              B        |L1.11948|
                  |L1.11942|
;;;3339   else bat[0]._Ib=Ib_ips_termokompensat;
002ea6  f8b90000          LDRH     r0,[r9,#0]  ; Ib_ips_termokompensat
002eaa  8110              STRH     r0,[r2,#8]
                  |L1.11948|
;;;3340   
;;;3341   #endif
;;;3342   #endif
;;;3343   
;;;3344   
;;;3345   #ifdef UKU_TELECORE2015
;;;3346   
;;;3347   //Внешний датчик температуры №1
;;;3348   if((adc_buff_[7]>800)&&(adc_buff_[7]<3800))ND_EXT[0]=0;
;;;3349   else ND_EXT[0]=1;
;;;3350   temp_SL=(signed long)adc_buff_[7];
;;;3351   temp_SL*=Ktext[0];
;;;3352   temp_SL/=20000L;
;;;3353   temp_SL-=273L;
;;;3354   t_ext[0]=(signed short)temp_SL;
;;;3355   
;;;3356   
;;;3357   //Внешний датчик температуры №2
;;;3358   if((adc_buff_[6]>800)&&(adc_buff_[6]<3800))ND_EXT[1]=0;
;;;3359   else ND_EXT[1]=1;
;;;3360   temp_SL=(signed long)adc_buff_[6];
;;;3361   temp_SL*=Ktext[1];
;;;3362   temp_SL/=20000L;
;;;3363   temp_SL-=273L;
;;;3364   t_ext[1]=(signed short)temp_SL;
;;;3365   
;;;3366   #endif
;;;3367   
;;;3368   #ifdef UKU_TELECORE2017
;;;3369   
;;;3370   //Внешний датчик температуры №1
;;;3371   if((adc_buff_[7]>800)&&(adc_buff_[7]<3800))ND_EXT[0]=0;
;;;3372   else ND_EXT[0]=1;
;;;3373   temp_SL=(signed long)adc_buff_[7];
;;;3374   temp_SL*=Ktext[0];
;;;3375   temp_SL/=20000L;
;;;3376   temp_SL-=273L;
;;;3377   t_ext[0]=(signed short)temp_SL;
;;;3378   
;;;3379   
;;;3380   //Внешний датчик температуры №2
;;;3381   if((adc_buff_[6]>800)&&(adc_buff_[6]<3800))ND_EXT[1]=0;
;;;3382   else ND_EXT[1]=1;
;;;3383   temp_SL=(signed long)adc_buff_[6];
;;;3384   temp_SL*=Ktext[1];
;;;3385   temp_SL/=20000L;
;;;3386   temp_SL-=273L;
;;;3387   t_ext[1]=(signed short)temp_SL;
;;;3388   
;;;3389   #endif
;;;3390   
;;;3391   //напряжение ввода
;;;3392   temp_SL=(signed long)adc_buff_ext_[0];
002eac  f8dfc1ec          LDR      r12,|L1.12444|
002eb0  f8bc5000          LDRH     r5,[r12,#0]  ; adc_buff_ext_
;;;3393   temp_SL*=Kunet_ext[0];
002eb4  f8df81e8          LDR      r8,|L1.12448|
002eb8  f9b80000          LDRSH    r0,[r8,#0]  ; Kunet_ext
002ebc  4368              MULS     r0,r5,r0
;;;3394   temp_SL/=4000L;
002ebe  f44f6b7a          MOV      r11,#0xfa0
002ec2  fb90f0fb          SDIV     r0,r0,r11
;;;3395   Uvv[0]=(signed short)temp_SL;
002ec6  4d77              LDR      r5,|L1.12452|
002ec8  b280              UXTH     r0,r0
002eca  8028              STRH     r0,[r5,#0]
;;;3396   if(Uvv[0]<100) Uvv0=Uvv[0];
002ecc  f8dfe1d8          LDR      lr,|L1.12456|
002ed0  2864              CMP      r0,#0x64
002ed2  d202              BCS      |L1.11994|
002ed4  f8ae0000          STRH     r0,[lr,#0]
002ed8  e003              B        |L1.12002|
                  |L1.11994|
;;;3397   else Uvv0=net_U;
002eda  4874              LDR      r0,|L1.12460|
002edc  8800              LDRH     r0,[r0,#0]  ; net_U
002ede  f8ae0000          STRH     r0,[lr,#0]
                  |L1.12002|
;;;3398   
;;;3399   //напряжение пэс
;;;3400   temp_SL=(signed long)adc_buff_ext_[1];
002ee2  f8bcc002          LDRH     r12,[r12,#2]  ; adc_buff_ext_
;;;3401   temp_SL*=Kunet_ext[1];
002ee6  f9b80002          LDRSH    r0,[r8,#2]  ; Kunet_ext
002eea  fb00f00c          MUL      r0,r0,r12
;;;3402   temp_SL/=4000L;
002eee  fb90f0fb          SDIV     r0,r0,r11
;;;3403   Uvv[1]=(signed short)temp_SL;
002ef2  8068              STRH     r0,[r5,#2]
;;;3404   
;;;3405   
;;;3406   //напряжение ввода трехфазное
;;;3407   temp_SL=(signed long)eb2_data_short[0];
002ef4  4d6e              LDR      r5,|L1.12464|
002ef6  f9b50000          LDRSH    r0,[r5,#0]  ; eb2_data_short
;;;3408   temp_SL*=Kvv_eb2[0];
002efa  f8dfc1b8          LDR      r12,|L1.12468|
002efe  f9bc8000          LDRSH    r8,[r12,#0]  ; Kvv_eb2
002f02  fb08f800          MUL      r8,r8,r0
;;;3409   temp_SL/=6000L;
002f06  f2417070          MOV      r0,#0x1770
002f0a  fb98fbf0          SDIV     r11,r8,r0
;;;3410   Uvv_eb2[0]=(signed short)temp_SL;
002f0e  f8df81a8          LDR      r8,|L1.12472|
002f12  f8a8b000          STRH     r11,[r8,#0]
;;;3411   
;;;3412   temp_SL=(signed long)eb2_data_short[1];
002f16  f9b5b002          LDRSH    r11,[r5,#2]  ; eb2_data_short
;;;3413   temp_SL*=Kvv_eb2[1];
002f1a  f9bce002          LDRSH    lr,[r12,#2]  ; Kvv_eb2
002f1e  fb0efe0b          MUL      lr,lr,r11
;;;3414   temp_SL/=6000L;
002f22  fb9efbf0          SDIV     r11,lr,r0
;;;3415   Uvv_eb2[1]=(signed short)temp_SL;
002f26  f8a8b002          STRH     r11,[r8,#2]
;;;3416   
;;;3417   temp_SL=(signed long)eb2_data_short[2];
002f2a  f9b5b004          LDRSH    r11,[r5,#4]  ; eb2_data_short
;;;3418   temp_SL*=Kvv_eb2[2];
002f2e  f9bcc004          LDRSH    r12,[r12,#4]  ; Kvv_eb2
002f32  fb0cfc0b          MUL      r12,r12,r11
;;;3419   temp_SL/=6000L;
002f36  fb9cfcf0          SDIV     r12,r12,r0
;;;3420   Uvv_eb2[2]=(signed short)temp_SL;
002f3a  f8a8c004          STRH     r12,[r8,#4]
;;;3421   
;;;3422   //напряжение пэс трехфазное
;;;3423   temp_SL=(signed long)eb2_data_short[3];
002f3e  f9b5b006          LDRSH    r11,[r5,#6]  ; eb2_data_short
;;;3424   temp_SL*=Kpes_eb2[0];
002f42  f8dfc178          LDR      r12,|L1.12476|
002f46  f9bc8000          LDRSH    r8,[r12,#0]  ; Kpes_eb2
002f4a  fb08f80b          MUL      r8,r8,r11
;;;3425   temp_SL/=6000L;
002f4e  fb98fbf0          SDIV     r11,r8,r0
;;;3426   Upes_eb2[0]=(signed short)temp_SL;
002f52  f8df816c          LDR      r8,|L1.12480|
002f56  f8a8b000          STRH     r11,[r8,#0]
;;;3427   
;;;3428   temp_SL=(signed long)eb2_data_short[4];
002f5a  f9b5b008          LDRSH    r11,[r5,#8]  ; eb2_data_short
;;;3429   temp_SL*=Kpes_eb2[1];
002f5e  f9bce002          LDRSH    lr,[r12,#2]  ; Kpes_eb2
002f62  fb0efe0b          MUL      lr,lr,r11
;;;3430   temp_SL/=6000L;
002f66  fb9efbf0          SDIV     r11,lr,r0
;;;3431   Upes_eb2[1]=(signed short)temp_SL;
002f6a  f8a8b002          STRH     r11,[r8,#2]
;;;3432   
;;;3433   temp_SL=(signed long)eb2_data_short[5];
002f6e  f9b5b00a          LDRSH    r11,[r5,#0xa]  ; eb2_data_short
;;;3434   temp_SL*=Kpes_eb2[2];
002f72  f9bc5004          LDRSH    r5,[r12,#4]  ; Kpes_eb2
002f76  fb05f50b          MUL      r5,r5,r11
;;;3435   temp_SL/=6000L;
002f7a  fb95f0f0          SDIV     r0,r5,r0
;;;3436   Upes_eb2[2]=(signed short)temp_SL;
002f7e  f8a80004          STRH     r0,[r8,#4]
;;;3437   
;;;3438   //Вычисление температуры шкафа
;;;3439   
;;;3440   ibt._T[0]=t_ext[1]+273;
002f82  f20a1a11          ADD      r10,r10,#0x111
002f86  fa0ffc8a          SXTH     r12,r10
002f8a  f8dfa138          LDR      r10,|L1.12484|
002f8e  483b              LDR      r0,|L1.12412|
002f90  f8aac000          STRH     r12,[r10,#0]
;;;3441   ibt._T[1]=t_ext[2]+273;
002f94  8880              LDRH     r0,[r0,#4]  ; t_ext
002f96  f2001011          ADD      r0,r0,#0x111
002f9a  fa0ff880          SXTH     r8,r0
002f9e  f8aa8002          STRH     r8,[r10,#2]
;;;3442   
;;;3443   ibt._nd[0]=ND_EXT[1];
002fa2  784d              LDRB     r5,[r1,#1]  ; ND_EXT
002fa4  f88a5008          STRB     r5,[r10,#8]
;;;3444   ibt._nd[1]=ND_EXT[2];
002fa8  7888              LDRB     r0,[r1,#2]  ; ND_EXT
002faa  f88a0009          STRB     r0,[r10,#9]
;;;3445   
;;;3446   #ifndef UKU_TELECORE2015
;;;3447   if((ibt._nd[0]==0) &&  (ibt._nd[1]==0))
;;;3448   	{
;;;3449   	t_box=((ibt._T[0]+ibt._T[1])/2)-273;
002fae  4946              LDR      r1,|L1.12488|
002fb0  b905              CBNZ     r5,|L1.12212|
002fb2  b110              CBZ      r0,|L1.12218|
                  |L1.12212|
;;;3450   	}
;;;3451   else if((ibt._nd[0]==1) &&  (ibt._nd[1]==0))
002fb4  2d01              CMP      r5,#1
002fb6  d00a              BEQ      |L1.12238|
002fb8  e00a              B        |L1.12240|
                  |L1.12218|
002fba  eb0c0008          ADD      r0,r12,r8             ;3449
002fbe  eb0075d0          ADD      r5,r0,r0,LSR #31      ;3449
002fc2  f46f7088          MVN      r0,#0x110             ;3449
002fc6  eb000065          ADD      r0,r0,r5,ASR #1       ;3449
002fca  8008              STRH     r0,[r1,#0]            ;3449
002fcc  e01e              B        |L1.12300|
                  |L1.12238|
002fce  b108              CBZ      r0,|L1.12244|
                  |L1.12240|
;;;3452   	{
;;;3453   	t_box=ibt._T[1]-273;
;;;3454   	}
;;;3455   else if((ibt._nd[0]==0) &&  (ibt._nd[1]==1))
002fd0  b12d              CBZ      r5,|L1.12254|
002fd2  e006              B        |L1.12258|
                  |L1.12244|
002fd4  f2a81811          SUB      r8,r8,#0x111          ;3453
002fd8  f8a18000          STRH     r8,[r1,#0]            ;3453
002fdc  e016              B        |L1.12300|
                  |L1.12254|
002fde  2801              CMP      r0,#1
002fe0  d002              BEQ      |L1.12264|
                  |L1.12258|
;;;3456   	{
;;;3457   	t_box=ibt._T[0]-273;
;;;3458   	}
;;;3459   else if((ibt._nd[0]==1) &&  (ibt._nd[1]==1))
002fe2  2d01              CMP      r5,#1
002fe4  d005              BEQ      |L1.12274|
002fe6  e011              B        |L1.12300|
                  |L1.12264|
002fe8  f2ac1c11          SUB      r12,r12,#0x111        ;3457
002fec  f8a1c000          STRH     r12,[r1,#0]           ;3457
002ff0  e00c              B        |L1.12300|
                  |L1.12274|
002ff2  2801              CMP      r0,#1
002ff4  d10a              BNE      |L1.12300|
;;;3460   	{
;;;3461   	if(t_ext_can_nd<5)t_box= t_ext_can;
002ff6  4835              LDR      r0,|L1.12492|
002ff8  7800              LDRB     r0,[r0,#0]  ; t_ext_can_nd
002ffa  2805              CMP      r0,#5
002ffc  d203              BCS      |L1.12294|
002ffe  4834              LDR      r0,|L1.12496|
003000  8800              LDRH     r0,[r0,#0]  ; t_ext_can
003002  8008              STRH     r0,[r1,#0]
003004  e002              B        |L1.12300|
                  |L1.12294|
;;;3462   	else t_box=20;
003006  f04f0014          MOV      r0,#0x14
00300a  8008              STRH     r0,[r1,#0]
                  |L1.12300|
;;;3463   	}
;;;3464   #endif
;;;3465   /*
;;;3466   //Вычисление температуры шкафа
;;;3467   
;;;3468   ibt._T[0]=bat[0]._Tb+273;
;;;3469   ibt._T[1]=bat[1]._Tb+273;
;;;3470   ibt._T[2]=t_ext[1]+273;
;;;3471   ibt._T[3]=t_ext[2]+273;
;;;3472   
;;;3473   ibt._nd[0]=bat[0]._nd;
;;;3474   ibt._nd[1]=bat[1]._nd;
;;;3475   ibt._nd[2]=ND_EXT[1];
;;;3476   ibt._nd[3]=ND_EXT[2];
;;;3477   
;;;3478   ibt._avg1=0;
;;;3479   ibt._avg_cnt=4;
;;;3480   
;;;3481   if(ibt._nd[0]==0)
;;;3482   	{
;;;3483   	ibt._avg1+=ibt._T[0];
;;;3484   	}
;;;3485   else 
;;;3486   	{
;;;3487   	ibt._avg_cnt--;
;;;3488   	}
;;;3489   
;;;3490   if(ibt._nd[1]==0)
;;;3491   	{
;;;3492   	ibt._avg1+=ibt._T[1];
;;;3493   	}
;;;3494   else 
;;;3495   	{
;;;3496   	ibt._avg_cnt--;
;;;3497   	}
;;;3498   
;;;3499   if(ibt._nd[2]==0)
;;;3500   	{
;;;3501   	ibt._avg1+=ibt._T[2];
;;;3502   	}
;;;3503   else 
;;;3504   	{
;;;3505   	ibt._avg_cnt--;
;;;3506   	}
;;;3507   
;;;3508   if(ibt._nd[3]==0)
;;;3509   	{
;;;3510   	ibt._avg1+=ibt._T[3];
;;;3511   	}
;;;3512   else 
;;;3513   	{
;;;3514   	ibt._avg_cnt--;
;;;3515   	}
;;;3516   
;;;3517   if(ibt._avg_cnt==0)
;;;3518   	{
;;;3519   	}
;;;3520   else
;;;3521   	{
;;;3522   	ibt._avg1/=ibt._avg_cnt;
;;;3523   	}
;;;3524   
;;;3525   
;;;3526   if(ibt._nd[0]!=0)
;;;3527   	{
;;;3528   	ibt._T_dispers[0]=0;
;;;3529   	}
;;;3530   else 
;;;3531   	{
;;;3532   	ibt._T_dispers[0]=abs(ibt._T[0]-ibt._avg1);
;;;3533   	}
;;;3534   
;;;3535   if(ibt._nd[1]!=0)
;;;3536   	{
;;;3537   	ibt._T_dispers[1]=0;
;;;3538   	}
;;;3539   else 
;;;3540   	{
;;;3541   	ibt._T_dispers[1]=abs(ibt._T[1]-ibt._avg1);
;;;3542   	}
;;;3543   
;;;3544   if(ibt._nd[2]!=0)
;;;3545   	{
;;;3546   	ibt._T_dispers[2]=0;
;;;3547   	}
;;;3548   else 
;;;3549   	{
;;;3550   	ibt._T_dispers[2]=abs(ibt._T[2]-ibt._avg1);
;;;3551   	}
;;;3552   
;;;3553   if(ibt._nd[3]!=0)
;;;3554   	{
;;;3555   	ibt._T_dispers[3]=0;
;;;3556   	}
;;;3557   else 
;;;3558   	{
;;;3559   	ibt._T_dispers[3]=abs(ibt._T[3]-ibt._avg1);
;;;3560   	}
;;;3561   
;;;3562   if(	ibt._nd[0]&&
;;;3563   	ibt._nd[1]&&
;;;3564   	ibt._nd[2]&&
;;;3565   	ibt._nd[3]
;;;3566   	)
;;;3567   	{
;;;3568   	t_box=(bps[0]._Ti);
;;;3569   	}
;;;3570   
;;;3571   else if(	ibt._nd[0]||
;;;3572   	ibt._nd[1]||
;;;3573   	ibt._nd[2]||
;;;3574   	ibt._nd[3]
;;;3575   	)
;;;3576   	{
;;;3577   	t_box=(ibt._avg1-273);
;;;3578   	}
;;;3579   else 
;;;3580   	{
;;;3581   	ibt._max_dispers_num=0;
;;;3582   	ibt._max_dispers=ibt._T_dispers[0];
;;;3583   
;;;3584   	if(ibt._T_dispers[1]>ibt._max_dispers)
;;;3585   		{
;;;3586   		ibt._max_dispers_num=1;
;;;3587   		ibt._max_dispers=ibt._T_dispers[1];
;;;3588   		}
;;;3589   	if(ibt._T_dispers[2]>ibt._max_dispers)
;;;3590   		{
;;;3591   		ibt._max_dispers_num=2;
;;;3592   		ibt._max_dispers=ibt._T_dispers[2];
;;;3593   		}
;;;3594   	if(ibt._T_dispers[3]>ibt._max_dispers)
;;;3595   		{
;;;3596   		ibt._max_dispers_num=3;
;;;3597   		ibt._max_dispers=ibt._T_dispers[3];
;;;3598   		}
;;;3599   
;;;3600   	ibt._avg2=0;
;;;3601   
;;;3602   	if(ibt._max_dispers_num!=0)
;;;3603   		{
;;;3604   		ibt._avg2+=ibt._T[0];
;;;3605   		}
;;;3606   	if(ibt._max_dispers_num!=1)
;;;3607   		{
;;;3608   		ibt._avg2+=ibt._T[1];
;;;3609   		}
;;;3610   	if(ibt._max_dispers_num!=2)
;;;3611   		{
;;;3612   		ibt._avg2+=ibt._T[2];
;;;3613   		}
;;;3614   	if(ibt._max_dispers_num!=3)
;;;3615   		{
;;;3616   		ibt._avg2+=ibt._T[3];
;;;3617   		}
;;;3618   
;;;3619   	t_box=(ibt._avg2/3)-273;
;;;3620   
;;;3621   	}*/
;;;3622   
;;;3623   
;;;3624   //*********************************************
;;;3625   
;;;3626   #ifndef TELECORE
;;;3627   if((BAT_IS_ON[0]==bisON)&&(bat[0]._Ub>200)) Ibmax=bat[0]._Ib;
00300c  4931              LDR      r1,|L1.12500|
00300e  7808              LDRB     r0,[r1,#0]  ; BAT_IS_ON
003010  2855              CMP      r0,#0x55
003012  d105              BNE      |L1.12320|
003014  9801              LDR      r0,[sp,#4]
003016  28c8              CMP      r0,#0xc8
003018  dd02              BLE      |L1.12320|
00301a  8910              LDRH     r0,[r2,#8]  ; bat
00301c  f8a6004a          STRH     r0,[r6,#0x4a]
                  |L1.12320|
;;;3628   if((BAT_IS_ON[1]==bisON)&&(bat[1]._Ub>200)&&(bat[1]._Ib>bat[0]._Ib)) Ibmax=bat[1]._Ib;
003020  7848              LDRB     r0,[r1,#1]  ; BAT_IS_ON
003022  2855              CMP      r0,#0x55
003024  d10b              BNE      |L1.12350|
003026  f9b2004e          LDRSH    r0,[r2,#0x4e]  ; bat
00302a  28c8              CMP      r0,#0xc8
00302c  dd07              BLE      |L1.12350|
00302e  f9b20054          LDRSH    r0,[r2,#0x54]  ; bat
003032  f9b21008          LDRSH    r1,[r2,#8]  ; bat
003036  4288              CMP      r0,r1
003038  dd01              BLE      |L1.12350|
00303a  f8a6004a          STRH     r0,[r6,#0x4a]
                  |L1.12350|
;;;3629   #endif
;;;3630   
;;;3631   #ifdef TELECORE
;;;3632   Ibmax=0;
;;;3633   /*
;;;3634   if((NUMBAT_TELECORE>0)&&(lakb[0]._communicationFullErrorStat==0)&&(lakb[0]._ch_curr/10>Ibmax))Ibmax=lakb[0]._ch_curr/10;
;;;3635   if((NUMBAT_TELECORE>1)&&(lakb[1]._communicationFullErrorStat==0)&&(lakb[1]._ch_curr/10>Ibmax))Ibmax=lakb[1]._ch_curr/10;
;;;3636   if((NUMBAT_TELECORE>2)&&(lakb[2]._communicationFullErrorStat==0)&&(lakb[2]._ch_curr/10>Ibmax))Ibmax=lakb[2]._ch_curr/10;
;;;3637   */
;;;3638   if((NUMBAT_TELECORE>0)&&(bat[0]._Ib/10>Ibmax))Ibmax=bat[0]._Ib/10;
;;;3639   if((NUMBAT_TELECORE>1)&&(bat[1]._Ib/10>Ibmax))Ibmax=bat[1]._Ib/10;
;;;3640   //if((BAT_IS_ON[0]==bisON)&&(bat[0]._Ub>200)) Ibmax=bat[0]._Ib/1;
;;;3641   //if((BAT_IS_ON[1]==bisON)&&(bat[1]._Ub>200)&&(bat[1]._Ib>bat[0]._Ib)) Ibmax=bat[1]._Ib;
;;;3642   #endif
;;;3643   //Ibmax=bat[0]._Ib;
;;;3644   //if((AUSW_MAIN==22063)||(AUSW_MAIN==22023)||(AUSW_MAIN==22043))Ibmax=Ib_ips_termokompensat;
;;;3645   
;;;3646   #ifdef UKU_TELECORE2017
;;;3647   Ibmax=0;
;;;3648   if((NUMBAT_TELECORE>0)&&(bat[0]._Ib/10>Ibmax))Ibmax=bat[0]._Ib/10;
;;;3649   if((NUMBAT_TELECORE>1)&&(bat[1]._Ib/10>Ibmax))Ibmax=bat[1]._Ib/10;
;;;3650   #endif
;;;3651   
;;;3652   #ifdef UKU_220_IPS_TERMOKOMPENSAT
;;;3653   Ibmax=Ib_ips_termokompensat;
00303e  f8b90000          LDRH     r0,[r9,#0]  ; Ib_ips_termokompensat
003042  f8a6004a          STRH     r0,[r6,#0x4a]
;;;3654   #endif
;;;3655   for(i=0;i<NUMIST;i++)
003046  f04f0100          MOV      r1,#0
00304a  e075              B        |L1.12600|
                  |L1.12364|
                          DCD      Kuout
                  |L1.12368|
                          DCD      AUSW_MAIN
                  |L1.12372|
                          DCD      out_U
                  |L1.12376|
                          DCD      load_U
                  |L1.12380|
                          DCD      Kubps
                  |L1.12384|
                          DCD      bps_U
                  |L1.12388|
                          DCD      NUMIST
                  |L1.12392|
                          DCD      bps
                  |L1.12396|
                          DCD      bps_I
                  |L1.12400|
                          DCD      ||.bss||+0x40c
                  |L1.12404|
                          DCD      ND_EXT
                  |L1.12408|
                          DCD      Ktext
                  |L1.12412|
                          DCD      t_ext
                  |L1.12416|
                          DCD      Ib_ips_termokompensat
                  |L1.12420|
                          DCD      ibat_metr_buff_
                  |L1.12424|
                          DCD      bIBAT_SMKLBR
                  |L1.12428|
                          DCD      bIBAT_SMKLBR_cnt
                  |L1.12432|
                          DCD      Kibat1
                  |L1.12436|
                          DCD      Ib_ips_termokompensat_temp
                  |L1.12440|
                          DCD      bat
                  |L1.12444|
                          DCD      adc_buff_ext_
                  |L1.12448|
                          DCD      Kunet_ext
                  |L1.12452|
                          DCD      Uvv
                  |L1.12456|
                          DCD      Uvv0
                  |L1.12460|
                          DCD      net_U
                  |L1.12464|
                          DCD      eb2_data_short
                  |L1.12468|
                          DCD      Kvv_eb2
                  |L1.12472|
                          DCD      Uvv_eb2
                  |L1.12476|
                          DCD      Kpes_eb2
                  |L1.12480|
                          DCD      Upes_eb2
                  |L1.12484|
                          DCD      ibt
                  |L1.12488|
                          DCD      t_box
                  |L1.12492|
                          DCD      t_ext_can_nd
                  |L1.12496|
                          DCD      t_ext_can
                  |L1.12500|
                          DCD      BAT_IS_ON
                  |L1.12504|
;;;3656   	{
;;;3657   	if(bps[i]._cnt<25)
0030d8  ebc100c1          RSB      r0,r1,r1,LSL #3
0030dc  eb001001          ADD      r0,r0,r1,LSL #4
0030e0  eb040080          ADD      r0,r4,r0,LSL #2
0030e4  78c5              LDRB     r5,[r0,#3]
0030e6  2d19              CMP      r5,#0x19
0030e8  d21c              BCS      |L1.12580|
;;;3658        	{
;;;3659        	bps[i]._Ii=bps[i]._buff[0]+(bps[i]._buff[1]*256);
0030ea  7985              LDRB     r5,[r0,#6]
0030ec  79c6              LDRB     r6,[r0,#7]
0030ee  eb052506          ADD      r5,r5,r6,LSL #8
0030f2  6245              STR      r5,[r0,#0x24]
;;;3660        	bps[i]._Uin=bps[i]._buff[2]+(bps[i]._buff[3]*256);
0030f4  7a05              LDRB     r5,[r0,#8]
0030f6  7a46              LDRB     r6,[r0,#9]
0030f8  eb052506          ADD      r5,r5,r6,LSL #8
0030fc  6205              STR      r5,[r0,#0x20]
;;;3661        	bps[i]._Uii=bps[i]._buff[4]+(bps[i]._buff[5]*256);
0030fe  7a85              LDRB     r5,[r0,#0xa]
003100  7ac6              LDRB     r6,[r0,#0xb]
003102  eb052506          ADD      r5,r5,r6,LSL #8
003106  61c5              STR      r5,[r0,#0x1c]
;;;3662        	bps[i]._Ti=(signed)(bps[i]._buff[6]);
003108  7b05              LDRB     r5,[r0,#0xc]
00310a  6285              STR      r5,[r0,#0x28]
;;;3663        	bps[i]._adr_ee=bps[i]._buff[7];
00310c  7b45              LDRB     r5,[r0,#0xd]
00310e  f8805052          STRB     r5,[r0,#0x52]
;;;3664        	bps[i]._flags_tm=bps[i]._buff[8];
003112  7b85              LDRB     r5,[r0,#0xe]
003114  f8805042          STRB     r5,[r0,#0x42]
;;;3665   	    bps[i]._rotor=bps[i]._buff[10]+(bps[i]._buff[11]*256);    
003118  7c05              LDRB     r5,[r0,#0x10]
00311a  7c46              LDRB     r6,[r0,#0x11]
00311c  eb052506          ADD      r5,r5,r6,LSL #8
003120  64c5              STR      r5,[r0,#0x4c]
003122  e006              B        |L1.12594|
                  |L1.12580|
;;;3666        	} 
;;;3667   	else 
;;;3668        	{
;;;3669        	bps[i]._Uii=0; 
003124  61c3              STR      r3,[r0,#0x1c]
;;;3670        	bps[i]._Ii=0;
003126  6243              STR      r3,[r0,#0x24]
;;;3671        	bps[i]._Uin=0;
003128  6203              STR      r3,[r0,#0x20]
;;;3672        	bps[i]._Ti=0;
00312a  6283              STR      r3,[r0,#0x28]
;;;3673        	bps[i]._flags_tm=0; 
00312c  f8803042          STRB     r3,[r0,#0x42]
;;;3674   	     bps[i]._rotor=0;    
003130  64c3              STR      r3,[r0,#0x4c]
                  |L1.12594|
003132  f1010101          ADD      r1,r1,#1              ;3655
003136  b2c9              UXTB     r1,r1                 ;3655
                  |L1.12600|
003138  42b9              CMP      r1,r7                 ;3655
00313a  dbcd              BLT      |L1.12504|
;;;3675        	}
;;;3676        
;;;3677        }
;;;3678   
;;;3679   load_I=0;
00313c  4dfb              LDR      r5,|L1.13612|
;;;3680   #ifdef TELECORE
;;;3681   
;;;3682   /*for(i=0;i<NUMBAT_TELECORE;i++)
;;;3683   	{
;;;3684   	load_I-=lakb[i]._ch_curr/10;
;;;3685   	}*/
;;;3686   load_I=-(bat[0]._Ib/10)-(bat[1]._Ib/10);
;;;3687   #elif UKU_TELECORE2017
;;;3688   load_I=-(bat[0]._Ib/10)-(bat[1]._Ib/10);
;;;3689   #else
;;;3690   load_I=-(bat[0]._Ib/10)-(bat[1]._Ib/10);
00313e  f9b21008          LDRSH    r1,[r2,#8]  ; bat
003142  f04f000a          MOV      r0,#0xa
003146  fb91f1f0          SDIV     r1,r1,r0
00314a  f9b22054          LDRSH    r2,[r2,#0x54]  ; bat
00314e  fb92f0f0          SDIV     r0,r2,r0
003152  4408              ADD      r0,r0,r1
003154  f1c00000          RSB      r0,r0,#0
003158  b206              SXTH     r6,r0
00315a  802e              STRH     r6,[r5,#0]
;;;3691   #endif
;;;3692   Isumm=0;
00315c  4af4              LDR      r2,|L1.13616|
00315e  8013              STRH     r3,[r2,#0]
;;;3693   
;;;3694   for(i=0;i<NUMIST;i++)
003160  f04f0000          MOV      r0,#0
003164  e012              B        |L1.12684|
                  |L1.12646|
;;;3695        {
;;;3696        if(bps[i]._cnt<5)Isumm+=bps[i]._Ii;
003166  ebc001c0          RSB      r1,r0,r0,LSL #3
00316a  eb011100          ADD      r1,r1,r0,LSL #4
00316e  eb040181          ADD      r1,r4,r1,LSL #2
003172  f891c003          LDRB     r12,[r1,#3]
003176  f1bc0f05          CMP      r12,#5
00317a  d204              BCS      |L1.12678|
00317c  6a49              LDR      r1,[r1,#0x24]
00317e  f8b2c000          LDRH     r12,[r2,#0]  ; Isumm
003182  4461              ADD      r1,r1,r12
003184  8011              STRH     r1,[r2,#0]
                  |L1.12678|
003186  f1000001          ADD      r0,r0,#1              ;3694
00318a  b2c0              UXTB     r0,r0                 ;3694
                  |L1.12684|
00318c  42b8              CMP      r0,r7                 ;3694
00318e  dbea              BLT      |L1.12646|
;;;3697        }  
;;;3698        
;;;3699   load_I=load_I+Isumm;
003190  8810              LDRH     r0,[r2,#0]  ; Isumm
003192  4430              ADD      r0,r0,r6
003194  b200              SXTH     r0,r0
003196  8028              STRH     r0,[r5,#0]
;;;3700   if(load_I<0)load_I=0;
003198  2800              CMP      r0,#0
00319a  da00              BGE      |L1.12702|
00319c  802b              STRH     r3,[r5,#0]
                  |L1.12702|
;;;3701   
;;;3702   #ifdef UKU_220_IPS_TERMOKOMPENSAT
;;;3703   load_I=0;
00319e  802b              STRH     r3,[r5,#0]
;;;3704   
;;;3705   Isumm=0;
0031a0  8013              STRH     r3,[r2,#0]
;;;3706   
;;;3707   for(i=0;i<NUMIST;i++)
0031a2  f04f0000          MOV      r0,#0
0031a6  e00f              B        |L1.12744|
                  |L1.12712|
;;;3708        {
;;;3709        if(bps[i]._cnt<5)Isumm+=bps[i]._Ii;
0031a8  ebc001c0          RSB      r1,r0,r0,LSL #3
0031ac  eb011100          ADD      r1,r1,r0,LSL #4
0031b0  eb040181          ADD      r1,r4,r1,LSL #2
0031b4  78ce              LDRB     r6,[r1,#3]
0031b6  2e05              CMP      r6,#5
0031b8  d203              BCS      |L1.12738|
0031ba  6a49              LDR      r1,[r1,#0x24]
0031bc  8816              LDRH     r6,[r2,#0]  ; Isumm
0031be  4431              ADD      r1,r1,r6
0031c0  8011              STRH     r1,[r2,#0]
                  |L1.12738|
0031c2  f1000001          ADD      r0,r0,#1              ;3707
0031c6  b2c0              UXTB     r0,r0                 ;3707
                  |L1.12744|
0031c8  42b8              CMP      r0,r7                 ;3707
0031ca  dbed              BLT      |L1.12712|
;;;3710        }  
;;;3711        
;;;3712   load_I=load_I+Isumm;
0031cc  8811              LDRH     r1,[r2,#0]  ; Isumm
0031ce  eb030001          ADD      r0,r3,r1
0031d2  b200              SXTH     r0,r0
0031d4  8028              STRH     r0,[r5,#0]
;;;3713   if(load_I<0)load_I=0;
0031d6  2800              CMP      r0,#0
0031d8  da00              BGE      |L1.12764|
0031da  802b              STRH     r3,[r5,#0]
                  |L1.12764|
;;;3714   
;;;3715   #endif
;;;3716   #ifdef IPS_SGEP_GAZPROM
;;;3717   load_I=Isumm;
;;;3718   #endif
;;;3719   
;;;3720   
;;;3721   #ifdef UKU_GLONASS
;;;3722   inv[0]._Uio=6;
;;;3723   if (NUMINV)
;;;3724   	{
;;;3725   	for(i=0;i<NUMINV;i++)
;;;3726   		{
;;;3727   		if(bps[i+first_inv_slot]._cnt<25)
;;;3728        		{
;;;3729        		inv[i]._Ii=bps[i+first_inv_slot]._buff[0]+(bps[i+first_inv_slot]._buff[1]*256);
;;;3730        		inv[i]._Uin=bps[i+first_inv_slot]._buff[2]+(bps[i+first_inv_slot]._buff[3]*256);
;;;3731        		inv[i]._Uio=bps[i+first_inv_slot]._buff[4]+(bps[i+first_inv_slot]._buff[5]*256);
;;;3732        		inv[i]._Ti=(signed)(bps[i+first_inv_slot]._buff[6]);
;;;3733        		inv[i]._flags_tm=bps[i+first_inv_slot]._buff[8];
;;;3734   	    	//	inv[i]._rotor=bps[i+first_inv_slot]._buff[10]+(bps[i+first_inv_slot]._buff[11]*256);
;;;3735   			inv[i]._cnt=0;    
;;;3736        		} 
;;;3737   		else 
;;;3738        		{
;;;3739        		inv[i]._Uio=0; 
;;;3740        		inv[i]._Ii=0;
;;;3741        		inv[i]._Uin=0;
;;;3742        		inv[i]._Ti=0;
;;;3743        		inv[i]._flags_tm=0; 
;;;3744   //	     	inv[i]._rotor0;
;;;3745   			inv[i]._cnt=25;    
;;;3746        		}
;;;3747        	}
;;;3748      	}
;;;3749   #endif
;;;3750   
;;;3751   #ifndef UKU_GLONASS
;;;3752   if (NUMINV)
0031dc  48d5              LDR      r0,|L1.13620|
0031de  f9b05000          LDRSH    r5,[r0,#0]  ; NUMINV
0031e2  2d00              CMP      r5,#0
0031e4  d066              BEQ      |L1.12980|
;;;3753   	{
;;;3754   	for(i=0;i<NUMINV;i++)
0031e6  f04f0200          MOV      r2,#0
;;;3755   		{
;;;3756   		if(bps[i+20]._cnt<25)
;;;3757        		{
;;;3758        		inv[i]._Ii=bps[i+20]._buff[0]+(bps[i+20]._buff[1]*256);
0031ea  4ed3              LDR      r6,|L1.13624|
0031ec  e060              B        |L1.12976|
                  |L1.12782|
0031ee  f1020014          ADD      r0,r2,#0x14           ;3756
0031f2  ebc001c0          RSB      r1,r0,r0,LSL #3       ;3756
0031f6  eb011000          ADD      r0,r1,r0,LSL #4       ;3756
0031fa  eb040080          ADD      r0,r4,r0,LSL #2       ;3756
0031fe  78c1              LDRB     r1,[r0,#3]            ;3756
003200  2919              CMP      r1,#0x19              ;3756
003202  d239              BCS      |L1.12920|
003204  7981              LDRB     r1,[r0,#6]
003206  79c7              LDRB     r7,[r0,#7]
003208  eb012707          ADD      r7,r1,r7,LSL #8
00320c  eb020142          ADD      r1,r2,r2,LSL #1
003210  eb061141          ADD      r1,r6,r1,LSL #5
003214  61cf              STR      r7,[r1,#0x1c]
;;;3759        		inv[i]._Pio=bps[i+20]._buff[2]+(bps[i+20]._buff[3]*256);
003216  7a07              LDRB     r7,[r0,#8]
003218  f890c009          LDRB     r12,[r0,#9]
00321c  eb07270c          ADD      r7,r7,r12,LSL #8
003220  62cf              STR      r7,[r1,#0x2c]
;;;3760        		inv[i]._Uio=bps[i+20]._buff[4]+(bps[i+20]._buff[5]*256);
003222  7a87              LDRB     r7,[r0,#0xa]
003224  f890c00b          LDRB     r12,[r0,#0xb]
003228  eb07270c          ADD      r7,r7,r12,LSL #8
00322c  618f              STR      r7,[r1,#0x18]
;;;3761        		inv[i]._Ti=(signed)(bps[i+20]._buff[6]);
00322e  7b07              LDRB     r7,[r0,#0xc]
003230  620f              STR      r7,[r1,#0x20]
;;;3762        		inv[i]._flags_tm=bps[i+20]._buff[7];
003232  7b47              LDRB     r7,[r0,#0xd]
003234  f8817046          STRB     r7,[r1,#0x46]
;;;3763        		inv[i]._Uin=bps[i+20]._buff[8]+(bps[i+20]._buff[9]*256);
003238  7b87              LDRB     r7,[r0,#0xe]
00323a  f890c00f          LDRB     r12,[r0,#0xf]
00323e  eb07270c          ADD      r7,r7,r12,LSL #8
003242  628f              STR      r7,[r1,#0x28]
;;;3764        		inv[i]._Uil=bps[i+20]._buff[10]+(bps[i+20]._buff[11]*256);
003244  7c07              LDRB     r7,[r0,#0x10]
003246  f890c011          LDRB     r12,[r0,#0x11]
00324a  eb07270c          ADD      r7,r7,r12,LSL #8
00324e  624f              STR      r7,[r1,#0x24]
;;;3765   			inv[i]._cnt=0;
003250  708b              STRB     r3,[r1,#2]
;;;3766   			inv[i]._Uoutmin=bps[i+20]._buff[12]; 
003252  7c87              LDRB     r7,[r0,#0x12]
003254  f8817059          STRB     r7,[r1,#0x59]
;;;3767   			inv[i]._Uoutmax=bps[i+20]._buff[13]; 
003258  7cc7              LDRB     r7,[r0,#0x13]
00325a  f881705a          STRB     r7,[r1,#0x5a]
;;;3768   			inv[i]._Pnom=bps[i+20]._buff[14]; 
00325e  7d07              LDRB     r7,[r0,#0x14]
003260  f8817058          STRB     r7,[r1,#0x58]
;;;3769   			inv[i]._net_contr_en=bps[i+20]._buff[15];
003264  7d47              LDRB     r7,[r0,#0x15]
003266  f881705b          STRB     r7,[r1,#0x5b]
;;;3770   			inv[i]._pwm_en=bps[i+20]._buff[16];  
00326a  7d87              LDRB     r7,[r0,#0x16]
00326c  f881705c          STRB     r7,[r1,#0x5c]
;;;3771   			inv[i]._phase_mode=bps[i+20]._buff[17];  
003270  7dc0              LDRB     r0,[r0,#0x17]
003272  f881005d          STRB     r0,[r1,#0x5d]
003276  e018              B        |L1.12970|
                  |L1.12920|
;;;3772        		} 
;;;3773   		else 
;;;3774        		{
;;;3775         		inv[i]._Ii=0;
003278  eb020042          ADD      r0,r2,r2,LSL #1
00327c  eb061040          ADD      r0,r6,r0,LSL #5
003280  61c3              STR      r3,[r0,#0x1c]
;;;3776   			inv[i]._Pio=0;
003282  62c3              STR      r3,[r0,#0x2c]
;;;3777   			inv[i]._Uio=0;
003284  6183              STR      r3,[r0,#0x18]
;;;3778        		inv[i]._Ti=0;
003286  6203              STR      r3,[r0,#0x20]
;;;3779        		inv[i]._flags_tm=0; 
003288  f8803046          STRB     r3,[r0,#0x46]
;;;3780        		inv[i]._Uil=0;
00328c  6243              STR      r3,[r0,#0x24]
;;;3781        		inv[i]._Uin=0;
00328e  6283              STR      r3,[r0,#0x28]
;;;3782   			inv[i]._cnt=25; 
003290  f04f0119          MOV      r1,#0x19
003294  7081              STRB     r1,[r0,#2]
;;;3783   			inv[i]._Uoutmin=0; 
003296  f8803059          STRB     r3,[r0,#0x59]
;;;3784   			inv[i]._Uoutmax=0; 
00329a  f880305a          STRB     r3,[r0,#0x5a]
;;;3785   			inv[i]._Pnom=0; 
00329e  f8803058          STRB     r3,[r0,#0x58]
;;;3786   			inv[i]._net_contr_en=0;
0032a2  f880305b          STRB     r3,[r0,#0x5b]
;;;3787   			inv[i]._pwm_en=0;   
0032a6  f880305c          STRB     r3,[r0,#0x5c]
                  |L1.12970|
0032aa  f1020201          ADD      r2,r2,#1              ;3754
0032ae  b2d2              UXTB     r2,r2                 ;3754
                  |L1.12976|
0032b0  42aa              CMP      r2,r5                 ;3754
0032b2  db9c              BLT      |L1.12782|
                  |L1.12980|
;;;3788   			   
;;;3789        		}
;;;3790        	}
;;;3791      	}
;;;3792   #endif
;;;3793   
;;;3794   #ifdef GLADKOV
;;;3795   inv[0]._Ii=bps[4]._buff[0]+(bps[4]._buff[1]*256);
;;;3796   inv[0]._Pio=bps[4]._buff[2]+(bps[4]._buff[3]*256);
;;;3797   inv[0]._Uio=bps[4]._buff[4]+(bps[4]._buff[5]*256);
;;;3798   inv[0]._Ti=(signed)(bps[4]._buff[6]);
;;;3799   inv[0]._flags_tm=bps[4]._buff[7];
;;;3800   inv[0]._Uin=bps[4]._buff[8]+(bps[4]._buff[9]*256);
;;;3801   inv[0]._Uil=bps[4]._buff[10]+(bps[4]._buff[11]*256);
;;;3802   inv[0]._cnt=0;    
;;;3803   
;;;3804   inv[1]._Ii=bps[21]._buff[0]+(bps[21]._buff[1]*256);
;;;3805   inv[1]._Pio=bps[21]._buff[2]+(bps[21]._buff[3]*256);
;;;3806   inv[1]._Uio=bps[21]._buff[4]+(bps[21]._buff[5]*256);
;;;3807   inv[1]._Ti=(signed)(bps[21]._buff[6]);
;;;3808   inv[1]._flags_tm=bps[21]._buff[7];
;;;3809   inv[1]._Uin=bps[21]._buff[8]+(bps[21]._buff[9]*256);
;;;3810   inv[1]._Uil=bps[21]._buff[10]+(bps[21]._buff[11]*256);
;;;3811   inv[1]._cnt=0;    
;;;3812   #endif
;;;3813   
;;;3814   /*
;;;3815   if((BAT_IS_ON[0]==bisON)&&(BAT_TYPE==1))
;;;3816   	{
;;;3817   	lakb[0]._battCommState=0;
;;;3818   	if(lakb[0]._cnt>10)lakb[0]._battCommState=2;
;;;3819   	else if(lakb[0]._bRS485ERR==1)lakb[0]._battCommState=1;
;;;3820   	
;;;3821   	if(lakb[0]._battCommState==0)
;;;3822   		{	
;;;3823   		bat[0]._Ub=(signed short)((lakb[0]._tot_bat_volt+5)/10);
;;;3824   		bat[0]._Ib=(signed short)lakb[0]._ch_curr;
;;;3825   		if(lakb[0]._dsch_curr) bat[0]._Ib=(signed short) (-lakb[0]._dsch_curr);
;;;3826   		bat[0]._Tb=(signed short)lakb[0]._max_cell_temp;
;;;3827   		}
;;;3828   	}
;;;3829   */
;;;3830   
;;;3831   #ifdef UKU_TELECORE2015
;;;3832   
;;;3833   	if(BAT_TYPE==2)
;;;3834   		{
;;;3835   		lakb[0]._ch_curr/*temp_SS*/=((ascii2halFhex(liBatteryInBuff[113]))<<12)+
;;;3836   					 		((ascii2halFhex(liBatteryInBuff[114]))<<8)+
;;;3837   							((ascii2halFhex(liBatteryInBuff[115]))<<4)+
;;;3838   							((ascii2halFhex(liBatteryInBuff[116])));
;;;3839   		
;;;3840   		/*if(temp_SS&0x8000)		lakb[0]._ch_curr=~temp_SS;
;;;3841   		else 				lakb[0]._ch_curr=temp_SS;*/
;;;3842   	
;;;3843   		lakb[0]._tot_bat_volt=	(unsigned short)(((ascii2halFhex(liBatteryInBuff[117]))<<12)+
;;;3844   							((ascii2halFhex(liBatteryInBuff[118]))<<8)+
;;;3845   							((ascii2halFhex(liBatteryInBuff[119]))<<4)+
;;;3846   							((ascii2halFhex(liBatteryInBuff[120]))))/100;
;;;3847   	
;;;3848   		lakb[0]._max_cell_temp= 	(((ascii2halFhex(liBatteryInBuff[93]))<<12)+
;;;3849   							((ascii2halFhex(liBatteryInBuff[94]))<<8)+
;;;3850   							((ascii2halFhex(liBatteryInBuff[95]))<<4)+
;;;3851   							((ascii2halFhex(liBatteryInBuff[96]))))/10-273;
;;;3852   	
;;;3853   		lakb[0]._s_o_c_abs=		(unsigned short)((ascii2halFhex(liBatteryInBuff[121]))<<12)+
;;;3854   							((ascii2halFhex(liBatteryInBuff[122]))<<8)+
;;;3855   							((ascii2halFhex(liBatteryInBuff[123]))<<4)+
;;;3856   							((ascii2halFhex(liBatteryInBuff[124])));
;;;3857   	
;;;3858   		lakb[0]._rat_cap=		(unsigned short)((ascii2halFhex(liBatteryInBuff[127]))<<12)+
;;;3859   							((ascii2halFhex(liBatteryInBuff[128]))<<8)+
;;;3860   							((ascii2halFhex(liBatteryInBuff[129]))<<4)+
;;;3861   							((ascii2halFhex(liBatteryInBuff[130])));
;;;3862   	
;;;3863   		lakb[0]._s_o_c=		lakb[0]._s_o_c_abs/(lakb[0]._rat_cap/100);
;;;3864   	
;;;3865   	
;;;3866   	/*	lakb[0]._rat_cap= (lakb_damp[i][13]*256)+ lakb_damp[i][14];
;;;3867   		lakb[0]._max_cell_volt= (lakb_damp[i][0]*256)+ lakb_damp[i][1];
;;;3868   		lakb[0]._min_cell_volt= (lakb_damp[i][2]*256)+ lakb_damp[i][3];
;;;3869   		lakb[0]._max_cell_temp= lakb_damp[i][4];
;;;3870   		lakb[0]._min_cell_temp= lakb_damp[i][5];
;;;3871   		lakb[0]._tot_bat_volt= (lakb_damp[i][6]*256)+ lakb_damp[i][7];
;;;3872   		lakb[0]._ch_curr= (lakb_damp[i][8]*256)+ lakb_damp[i][8];
;;;3873   		lakb[0]._dsch_curr= (lakb_damp[i][10]*256)+ lakb_damp[i][11];
;;;3874   		lakb[0]._s_o_c= lakb_damp[i][12];
;;;3875   		lakb[0]._r_b_t= lakb_damp[i][15];
;;;3876   		lakb[0]._c_c_l_v= (lakb_damp[i][16]*256)+ lakb_damp[i][17];
;;;3877   		lakb[0]._s_o_h= lakb_damp[i][18];
;;;3878   	
;;;3879   		if(lakb[i]._rat_cap==0)
;;;3880   			{
;;;3881   			if(lakb[i]._isOnCnt)
;;;3882   				{
;;;3883   				lakb[i]._isOnCnt--;
;;;3884   				if(lakb[i]._isOnCnt==0)
;;;3885   					{
;;;3886   					if(lakb[i]._battIsOn!=0) bLAKB_KONF_CH=1;
;;;3887   					}
;;;3888   				}
;;;3889   			}
;;;3890   		else 
;;;3891   			{
;;;3892   			if(lakb[i]._isOnCnt<50)
;;;3893   				{
;;;3894   				lakb[i]._isOnCnt++;
;;;3895   				if(lakb[i]._isOnCnt==50)
;;;3896   					{
;;;3897   					if(lakb[i]._battIsOn!=1) bLAKB_KONF_CH=1;
;;;3898   					}
;;;3899   				}
;;;3900   			}
;;;3901   		gran(&lakb[i]._isOnCnt,0,50);*/
;;;3902   		}
;;;3903   	else if(BAT_TYPE==3)
;;;3904   		{
;;;3905   		//short numOfPacks;
;;;3906   		//short numOfCells, numOfTemperCells, baseOfData;
;;;3907   		
;;;3908   		#ifndef UKU_TELECORE2016
;;;3909   		numOfCells=((ascii2halFhex(liBatteryInBuff[17]))<<4)+((ascii2halFhex(liBatteryInBuff[18])));
;;;3910   		numOfTemperCells=((ascii2halFhex(liBatteryInBuff[17+(numOfCells*4)+2]))<<4)+((ascii2halFhex(liBatteryInBuff[18+(numOfCells*4)+2])));
;;;3911   		numOfPacks=((ascii2halFhex(liBatteryInBuff[15]))<<4)+((ascii2halFhex(liBatteryInBuff[16])));
;;;3912   		if(numOfPacks)numOfPacks-=1;
;;;3913   		if((numOfPacks<0)||(numOfPacks>NUMBAT_TELECORE))numOfPacks=0;
;;;3914   		plazma_numOfCells=numOfCells;
;;;3915   		plazma_numOfTemperCells=numOfTemperCells;
;;;3916   		plazma_numOfPacks=numOfPacks;
;;;3917   
;;;3918   
;;;3919   		baseOfData=16+(numOfCells*4)+2+(numOfTemperCells*4)+2;
;;;3920   
;;;3921   		lakb[numOfPacks]._ch_curr=(signed short)(
;;;3922   							((ascii2halFhex(liBatteryInBuff[1+baseOfData]))<<12)+
;;;3923   							((ascii2halFhex(liBatteryInBuff[2+baseOfData]))<<8)+
;;;3924   							((ascii2halFhex(liBatteryInBuff[3+baseOfData]))<<4)+
;;;3925   							((ascii2halFhex(liBatteryInBuff[4+baseOfData])))
;;;3926   							);	  
;;;3927   
;;;3928   		lakb[numOfPacks]._tot_bat_volt=(signed short)(
;;;3929   							((ascii2halFhex(liBatteryInBuff[1+baseOfData+4]))<<12)+
;;;3930   							((ascii2halFhex(liBatteryInBuff[2+baseOfData+4]))<<8)+
;;;3931   							((ascii2halFhex(liBatteryInBuff[3+baseOfData+4]))<<4)+
;;;3932   							((ascii2halFhex(liBatteryInBuff[4+baseOfData+4])))
;;;3933   							)/10;
;;;3934   
;;;3935   		lakb[numOfPacks]._max_cell_temp=(signed short)(
;;;3936   							((ascii2halFhex(liBatteryInBuff[1+baseOfData-4]))<<12)+
;;;3937   							((ascii2halFhex(liBatteryInBuff[2+baseOfData-4]))<<8)+
;;;3938   							((ascii2halFhex(liBatteryInBuff[3+baseOfData-4]))<<4)+
;;;3939   							((ascii2halFhex(liBatteryInBuff[4+baseOfData-4])))
;;;3940   							)-2730;
;;;3941   
;;;3942   		lakb[numOfPacks]._s_o_c=(signed short)(
;;;3943   							((ascii2halFhex(liBatteryInBuff[1+baseOfData+8]))<<12)+
;;;3944   							((ascii2halFhex(liBatteryInBuff[2+baseOfData+8]))<<8)+
;;;3945   							((ascii2halFhex(liBatteryInBuff[3+baseOfData+8]))<<4)+
;;;3946   							((ascii2halFhex(liBatteryInBuff[4+baseOfData+8])))
;;;3947   							)/10;
;;;3948   
;;;3949   		lakb[numOfPacks]._s_o_h=(signed short)(
;;;3950   							((ascii2halFhex(liBatteryInBuff[1+baseOfData+14]))<<12)+
;;;3951   							((ascii2halFhex(liBatteryInBuff[2+baseOfData+14]))<<8)+
;;;3952   							((ascii2halFhex(liBatteryInBuff[3+baseOfData+14]))<<4)+
;;;3953   							((ascii2halFhex(liBatteryInBuff[4+baseOfData+14])))
;;;3954   							)/10;
;;;3955   		#endif
;;;3956   		
;;;3957   		#ifdef UKU_TELECORE2016
;;;3958   		{
;;;3959   		char i;
;;;3960   		
;;;3961   		for(i=0;i<NUMBAT_TELECORE;i++)
;;;3962   			{
;;;3963   			lakb[i]._s_o_c_percent= (signed short)(((unsigned long)lakb[i]._s_o_c*100UL)/(unsigned long)lakb[i]._s_o_h);
;;;3964   			}
;;;3965   		}
;;;3966   		#endif
;;;3967   		
;;;3968   										  
;;;3969   		}
;;;3970   	
;;;3971   if(sacredSunSilentCnt<3) 
;;;3972   	{
;;;3973       	bat[0]._Ub=lakb[0]._tot_bat_volt;
;;;3974       	bat[0]._Tb=lakb[0]._max_cell_temp;
;;;3975      	//bat[0]._Ib=lakb[0]._ch_curr/10;
;;;3976   	}
;;;3977   else 
;;;3978   	{
;;;3979       	//bat[0]._Ub=0;
;;;3980       	//bat[0]._Tb=0;
;;;3981      	//bat[0]._Ib=0;
;;;3982   	}
;;;3983   
;;;3984   if(BAT_TYPE==1)
;;;3985   	{
;;;3986   	char i;
;;;3987   	for(i=0;i<1;i++)
;;;3988   		{
;;;3989   		lakb[i]._rat_cap= (lakb_damp[i][13]*256)+ lakb_damp[i][14];
;;;3990   		lakb[i]._max_cell_volt= (lakb_damp[i][0]*256)+ lakb_damp[i][1];
;;;3991   		lakb[i]._min_cell_volt= (lakb_damp[i][2]*256)+ lakb_damp[i][3];
;;;3992   		lakb[i]._max_cell_temp= lakb_damp[i][4];
;;;3993   		lakb[i]._min_cell_temp= lakb_damp[i][5];
;;;3994   		lakb[i]._tot_bat_volt= (lakb_damp[i][6]*256)+ lakb_damp[i][7];
;;;3995   		lakb[i]._ch_curr= (lakb_damp[i][8]*256)+ lakb_damp[i][9];
;;;3996   		lakb[i]._dsch_curr= (lakb_damp[i][10]*256)+ lakb_damp[i][11];
;;;3997   		lakb[i]._s_o_c= lakb_damp[i][12];
;;;3998   		lakb[i]._r_b_t= lakb_damp[i][15];
;;;3999   		lakb[i]._c_c_l_v= (lakb_damp[i][16]*256)+ lakb_damp[i][17];
;;;4000   		lakb[i]._s_o_h= lakb_damp[i][18];
;;;4001   		lakb[i]._flags1= lakb_damp[i][34];
;;;4002   		lakb[i]._flags2= lakb_damp[i][35];
;;;4003   		lakb[i]._b_p_ser_num= lakb_damp[i][36];
;;;4004   
;;;4005   /*		if(lakb[i]._rat_cap==0)
;;;4006   			{
;;;4007   			if(lakb[i]._isOnCnt)
;;;4008   				{
;;;4009   				lakb[i]._isOnCnt--;
;;;4010   				if(lakb[i]._isOnCnt==0)
;;;4011   					{
;;;4012   					if(lakb[i]._battIsOn!=0) bLAKB_KONF_CH=1;
;;;4013   					}
;;;4014   				}
;;;4015   			}
;;;4016   		else 
;;;4017   			{
;;;4018   			if(lakb[i]._isOnCnt<50)
;;;4019   				{
;;;4020   				lakb[i]._isOnCnt++;
;;;4021   				if(lakb[i]._isOnCnt==50)
;;;4022   					{
;;;4023   					if(lakb[i]._battIsOn!=1) bLAKB_KONF_CH=1;
;;;4024   					}
;;;4025   				}
;;;4026   			} */
;;;4027   		gran(&lakb[i]._isOnCnt,0,50);
;;;4028   	 	}
;;;4029   
;;;4030   	if(lakb_damp[0][41]==100)
;;;4031   		{
;;;4032   		li_bat._485Error=1;
;;;4033   		}
;;;4034   	if(lakb_damp[0][41]==0)
;;;4035   		{
;;;4036   		//if(bRS485ERR)bLAKB_KONF_CH=1;
;;;4037   		li_bat._485Error=0;
;;;4038   		}
;;;4039   	li_bat._485ErrorCnt=lakb_damp[0][41];
;;;4040   
;;;4041   
;;;4042   	}
;;;4043   
;;;4044   
;;;4045   #endif
;;;4046   
;;;4047   		#ifdef UKU_TELECORE2017
;;;4048   		{
;;;4049   		char i;
;;;4050   		
;;;4051   		for(i=0;i<NUMBAT_TELECORE;i++)
;;;4052   			{
;;;4053   			lakb[i]._s_o_c_percent= (signed short)(((unsigned long)lakb[i]._s_o_c*100UL)/(unsigned long)lakb[i]._s_o_h);
;;;4054   			}
;;;4055   		}
;;;4056   		#endif
;;;4057   #ifdef UKU_TELECORE2015
;;;4058   //вычисление параметров работы батареи
;;;4059   //TODO дописать для всех батарей все параметры и при отцепке батарей
;;;4060   li_bat._batStat=bsOK;
;;;4061   if(BAT_TYPE==1) //COSLIGHT
;;;4062   	{
;;;4063   	if(li_bat._batStat==bsOK)
;;;4064   		{
;;;4065   		li_bat._Ub=lakb[0]._tot_bat_volt/10;
;;;4066   
;;;4067   		if(lakb[0]._ch_curr)li_bat._Ib=lakb[0]._ch_curr/10;
;;;4068   		else if(lakb[0]._dsch_curr) li_bat._Ib=bat[0]._Ib/10;//lakb[0]._dsch_curr/10;
;;;4069   	
;;;4070   		li_bat._ratCap=lakb[0]._rat_cap/100;
;;;4071   		li_bat._soc=lakb[0]._s_o_c;
;;;4072   		li_bat._soh=lakb[0]._s_o_h;
;;;4073   		li_bat._cclv=lakb[0]._c_c_l_v/10;
;;;4074   		li_bat._Tb=lakb[0]._max_cell_temp;
;;;4075   		li_bat._rbt=lakb[0]._r_b_t;
;;;4076   		}
;;;4077   	else 
;;;4078   		{
;;;4079   		li_bat._Ub=bat[0]._Ub;
;;;4080   		li_bat._Ib=bat[0]._Ib/10;
;;;4081   		li_bat._Tb=bat[0]._Tb;
;;;4082   		}
;;;4083   
;;;4084   	if((li_bat._485Error)||(li_bat._canError))
;;;4085   		{
;;;4086   		li_bat._batStat=bsOFF;
;;;4087   		}
;;;4088   	else li_bat._batStat=bsOK;
;;;4089   	}
;;;4090   else if(BAT_TYPE==2) //SACRED SUN
;;;4091   	{
;;;4092   	}
;;;4093   else if(BAT_TYPE==3) //ZTT
;;;4094   	{
;;;4095   	if(li_bat._batStat==bsOK)
;;;4096   		{
;;;4097   
;;;4098   		}
;;;4099   	}
;;;4100   #endif
;;;4101   
;;;4102   
;;;4103   /*
;;;4104   if((BAT_IS_ON[0]==bisON)&&(BAT_TYPE[0]==1)&&(BAT_LINK==0))
;;;4105   	{
;;;4106   
;;;4107   
;;;4108   	if(bat_drv_rx_buff[13]<=0x39)bbb[0]=bat_drv_rx_buff[13]-0x30;
;;;4109   	else bbb[0]=bat_drv_rx_buff[13]-55;
;;;4110   	if(bat_drv_rx_buff[14]<=0x39)bbb[1]=bat_drv_rx_buff[14]-0x30;
;;;4111   	else bbb[1]=bat_drv_rx_buff[14]-55;
;;;4112   	if(bat_drv_rx_buff[15]<=0x39)bbb[2]=bat_drv_rx_buff[15]-0x30;
;;;4113   	else bbb[2]=bat_drv_rx_buff[15]-55;
;;;4114   	if(bat_drv_rx_buff[16]<=0x39)bbb[3]=bat_drv_rx_buff[16]-0x30;
;;;4115   	else bbb[3]=bat_drv_rx_buff[16]-55;
;;;4116   
;;;4117   	tempSS=0;
;;;4118   	tempSS=((bbb[0]*4096)+(bbb[1]*256)+(bbb[2]*16)+bbb[3]);
;;;4119   
;;;4120   	bat[0]._max_cell_volt=(tempSS+5)/10;
;;;4121   
;;;4122   	if(bat_drv_rx_buff[17]<=0x39)bbb[0]=bat_drv_rx_buff[17]-0x30;
;;;4123   	else bbb[0]=bat_drv_rx_buff[17]-55;
;;;4124   	if(bat_drv_rx_buff[18]<=0x39)bbb[1]=bat_drv_rx_buff[18]-0x30;
;;;4125   	else bbb[1]=bat_drv_rx_buff[18]-55;
;;;4126   	if(bat_drv_rx_buff[19]<=0x39)bbb[2]=bat_drv_rx_buff[19]-0x30;
;;;4127   	else bbb[2]=bat_drv_rx_buff[19]-55;
;;;4128   	if(bat_drv_rx_buff[20]<=0x39)bbb[3]=bat_drv_rx_buff[20]-0x30;
;;;4129   	else bbb[3]=bat_drv_rx_buff[20]-55;
;;;4130   
;;;4131   	tempSS=0;
;;;4132   	tempSS=((bbb[0]*4096)+(bbb[1]*256)+(bbb[2]*16)+bbb[3]);
;;;4133   
;;;4134   	bat[0]._min_cell_volt=(tempSS+5)/10;
;;;4135   
;;;4136   
;;;4137   	}*/
;;;4138   }
0032b4  b007              ADD      sp,sp,#0x1c
0032b6  e8bd8ff0          POP      {r4-r11,pc}
;;;4139   #endif	//UKU_6U_WEB
                          ENDP

                  mnemo_hndl PROC
;;;4199   //-----------------------------------------------
;;;4200   void mnemo_hndl(void)
0032ba  4aa0              LDR      r2,|L1.13628|
;;;4201   {
;;;4202   if(((ind==iMn_220)||(ind==iMn))&&(sub_ind==0)&&(MNEMO_ON==mnON))
;;;4203   	{
;;;4204   	if(mnemo_cnt)mnemo_cnt--;
0032bc  49a0              LDR      r1,|L1.13632|
0032be  7810              LDRB     r0,[r2,#0]            ;4202  ; a_ind
0032c0  2804              CMP      r0,#4                 ;4202
0032c2  d001              BEQ      |L1.13000|
0032c4  2801              CMP      r0,#1                 ;4202
0032c6  d105              BNE      |L1.13012|
                  |L1.13000|
0032c8  7850              LDRB     r0,[r2,#1]            ;4202  ; a_ind
0032ca  b918              CBNZ     r0,|L1.13012|
0032cc  489d              LDR      r0,|L1.13636|
0032ce  7800              LDRB     r0,[r0,#0]            ;4202  ; MNEMO_ON
0032d0  2855              CMP      r0,#0x55              ;4202
0032d2  d003              BEQ      |L1.13020|
                  |L1.13012|
;;;4205   	}
;;;4206   else mnemo_cnt=MNEMO_TIME;
0032d4  489c              LDR      r0,|L1.13640|
0032d6  8800              LDRH     r0,[r0,#0]  ; MNEMO_TIME
0032d8  7008              STRB     r0,[r1,#0]
                  |L1.13018|
;;;4207   }
0032da  4770              BX       lr
                  |L1.13020|
0032dc  7808              LDRB     r0,[r1,#0]            ;4204  ; mnemo_cnt
0032de  2800              CMP      r0,#0                 ;4204
0032e0  d0fb              BEQ      |L1.13018|
0032e2  f1a00001          SUB      r0,r0,#1              ;4204
0032e6  7008              STRB     r0,[r1,#0]            ;4204
0032e8  4770              BX       lr
;;;4208   
                          ENDP

                  adc_init PROC
;;;4209   //-----------------------------------------------
;;;4210   void adc_init(void)
0032ea  4898              LDR      r0,|L1.13644|
;;;4211   {
;;;4212   
;;;4213   SET_REG(LPC_PINCON->PINSEL1,1,(25-16)*2,2);
0032ec  6841              LDR      r1,[r0,#4]
0032ee  f4212140          BIC      r1,r1,#0xc0000
0032f2  f4412180          ORR      r1,r1,#0x40000
0032f6  6041              STR      r1,[r0,#4]
;;;4214   SET_REG(LPC_PINCON->PINSEL1,1,(24-16)*2,2);
0032f8  6841              LDR      r1,[r0,#4]
0032fa  f4213140          BIC      r1,r1,#0x30000
0032fe  f4413180          ORR      r1,r1,#0x10000
003302  6041              STR      r1,[r0,#4]
;;;4215   SET_REG(LPC_PINCON->PINSEL1,1,(23-16)*2,2);
003304  6841              LDR      r1,[r0,#4]
003306  f4214140          BIC      r1,r1,#0xc000
00330a  f4414180          ORR      r1,r1,#0x4000
00330e  6041              STR      r1,[r0,#4]
;;;4216   
;;;4217   
;;;4218   SET_REG(LPC_PINCON->PINMODE1,2,(25-16)*2,2);
003310  6c41              LDR      r1,[r0,#0x44]
003312  f4212140          BIC      r1,r1,#0xc0000
003316  f4412100          ORR      r1,r1,#0x80000
00331a  6441              STR      r1,[r0,#0x44]
;;;4219   SET_REG(LPC_PINCON->PINMODE1,2,(24-16)*2,2);
00331c  6c41              LDR      r1,[r0,#0x44]
00331e  f4213140          BIC      r1,r1,#0x30000
003322  f4413100          ORR      r1,r1,#0x20000
003326  6441              STR      r1,[r0,#0x44]
;;;4220   SET_REG(LPC_PINCON->PINMODE1,2,(23-16)*2,2);
003328  6c41              LDR      r1,[r0,#0x44]
00332a  f4214140          BIC      r1,r1,#0xc000
00332e  f4414100          ORR      r1,r1,#0x8000
003332  6441              STR      r1,[r0,#0x44]
;;;4221   
;;;4222   SET_REG(LPC_ADC->ADCR,0,24,3);
003334  4886              LDR      r0,|L1.13648|
003336  6801              LDR      r1,[r0,#0]
003338  f02161e0          BIC      r1,r1,#0x7000000
00333c  6001              STR      r1,[r0,#0]
;;;4223   
;;;4224   SET_REG(LPC_ADC->ADCR,1,21,1);
00333e  6801              LDR      r1,[r0,#0]
003340  f4411100          ORR      r1,r1,#0x200000
003344  6001              STR      r1,[r0,#0]
;;;4225   SET_REG(LPC_ADC->ADCR,0,16,1);
003346  6801              LDR      r1,[r0,#0]
003348  f4213180          BIC      r1,r1,#0x10000
00334c  6001              STR      r1,[r0,#0]
;;;4226   SET_REG(LPC_ADC->ADCR,1,8,8);
00334e  6801              LDR      r1,[r0,#0]
003350  f421417f          BIC      r1,r1,#0xff00
003354  f4417180          ORR      r1,r1,#0x100
003358  6001              STR      r1,[r0,#0]
;;;4227   
;;;4228   //SET_REG(LPC_GPIO0->FIODIR,7,5,3);
;;;4229   //SET_REG(LPC_GPIO0->FIOPIN,4,5,3);
;;;4230   	
;;;4231   	/*if(adc_ch<=7)*///SET_REG(LPC_ADC->ADCR,1<<5,0,8);
;;;4232        /*else if(adc_ch==8) SET_REG(LPC_ADC->ADCR,1<<2,0,8);
;;;4233        else SET_REG(LPC_ADC->ADCR,1<<4,0,8);*/
;;;4234   
;;;4235   LPC_ADC->ADINTEN     =  (1<< 8);      /* global enable interrupt            */
00335a  f44f7180          MOV      r1,#0x100
00335e  60c1              STR      r1,[r0,#0xc]
003360  487c              LDR      r0,|L1.13652|
003362  f44f0180          MOV      r1,#0x400000
003366  6001              STR      r1,[r0,#0]
;;;4236   
;;;4237   NVIC_EnableIRQ(ADC_IRQn);             /* enable ADC Interrupt               */
;;;4238   
;;;4239   
;;;4240   }
003368  4770              BX       lr
;;;4241   
                          ENDP

                  adc_drv7 PROC
;;;4242   //-----------------------------------------------
;;;4243   void adc_drv7(void) //(Uсети - постоянка)
00336a  e92d41f0          PUSH     {r4-r8,lr}
;;;4244   {
;;;4245   //int temp_S;
;;;4246   //char i;
;;;4247   //signed short temp_SS;
;;;4248   
;;;4249   adc_self_ch_disp[0]=abs_pal(adc_self_ch_buff[1]-adc_self_ch_buff[0]);//adc_self_ch_buff[0]&0x0f80;
00336e  4c7a              LDR      r4,|L1.13656|
003370  8860              LDRH     r0,[r4,#2]  ; adc_self_ch_buff
003372  8821              LDRH     r1,[r4,#0]  ; adc_self_ch_buff
003374  1a40              SUBS     r0,r0,r1
003376  b200              SXTH     r0,r0
003378  f7fffffe          BL       abs_pal
00337c  1da6              ADDS     r6,r4,#6
00337e  8030              STRH     r0,[r6,#0]
;;;4250   adc_self_ch_disp[1]=abs_pal(adc_self_ch_buff[2]-adc_self_ch_buff[1]);//adc_self_ch_buff[1]&0x0f80;
003380  88a0              LDRH     r0,[r4,#4]  ; adc_self_ch_buff
003382  8861              LDRH     r1,[r4,#2]  ; adc_self_ch_buff
003384  1a40              SUBS     r0,r0,r1
003386  b200              SXTH     r0,r0
003388  f7fffffe          BL       abs_pal
00338c  8070              STRH     r0,[r6,#2]
;;;4251   adc_self_ch_disp[2]=abs_pal(adc_self_ch_buff[2]-adc_self_ch_buff[0]);//adc_self_ch_buff[2]&0x0f80;
00338e  88a0              LDRH     r0,[r4,#4]  ; adc_self_ch_buff
003390  8821              LDRH     r1,[r4,#0]  ; adc_self_ch_buff
003392  1a40              SUBS     r0,r0,r1
003394  b200              SXTH     r0,r0
003396  f7fffffe          BL       abs_pal
00339a  80b0              STRH     r0,[r6,#4]
;;;4252   
;;;4253   //adc_self_ch_disp[0]=adc_self_ch_buff[0]&0x0ff0;
;;;4254   //adc_self_ch_disp[1]=adc_self_ch_buff[1]&0x0ff0;
;;;4255   //adc_self_ch_disp[2]=adc_self_ch_buff[2]&0x0ff0;
;;;4256   
;;;4257   
;;;4258   if(adc_self_ch_disp[2]<300)//==adc_self_ch_disp[2])
00339c  f44f7196          MOV      r1,#0x12c
;;;4259   	{
;;;4260   	adc_result=adc_self_ch_buff[2];
0033a0  f1a405ee          SUB      r5,r4,#0xee
0033a4  4288              CMP      r0,r1                 ;4258
0033a6  da02              BGE      |L1.13230|
0033a8  88a0              LDRH     r0,[r4,#4]  ; adc_self_ch_buff
0033aa  87a8              STRH     r0,[r5,#0x3c]
0033ac  e00c              B        |L1.13256|
                  |L1.13230|
;;;4261   	} 
;;;4262   else if(adc_self_ch_disp[1]<300)//==adc_self_ch_disp[2])
0033ae  f9b60002          LDRSH    r0,[r6,#2]  ; adc_self_ch_disp
0033b2  4288              CMP      r0,r1
0033b4  da02              BGE      |L1.13244|
;;;4263   	{
;;;4264   	adc_result=adc_self_ch_buff[1];
0033b6  8860              LDRH     r0,[r4,#2]  ; adc_self_ch_buff
0033b8  87a8              STRH     r0,[r5,#0x3c]
0033ba  e005              B        |L1.13256|
                  |L1.13244|
;;;4265   	}
;;;4266   else if(adc_self_ch_disp[0]<300)//==adc_self_ch_disp[1])
0033bc  f9b60000          LDRSH    r0,[r6,#0]  ; adc_self_ch_disp
0033c0  4288              CMP      r0,r1
0033c2  da01              BGE      |L1.13256|
;;;4267   	{
;;;4268   	adc_result=adc_self_ch_buff[0];
0033c4  8820              LDRH     r0,[r4,#0]  ; adc_self_ch_buff
0033c6  87a8              STRH     r0,[r5,#0x3c]
                  |L1.13256|
;;;4269   	}
;;;4270       //adc_result=92;
;;;4271   
;;;4272   if(adc_ch_net)
0033c8  7c6f              LDRB     r7,[r5,#0x11]  ; adc_ch_net
0033ca  2600              MOVS     r6,#0
0033cc  b347              CBZ      r7,|L1.13344|
;;;4273   	{
;;;4274   
;;;4275   	main_power_buffer[0]+=(long)(adc_result);
0033ce  4863              LDR      r0,|L1.13660|
0033d0  f9b5103c          LDRSH    r1,[r5,#0x3c]  ; adc_result
0033d4  6802              LDR      r2,[r0,#0]  ; main_power_buffer
0033d6  440a              ADD      r2,r2,r1
0033d8  6002              STR      r2,[r0,#0]  ; main_power_buffer
;;;4276   	main_power_buffer[1]+=(long)(adc_result);
0033da  6842              LDR      r2,[r0,#4]  ; main_power_buffer
0033dc  440a              ADD      r2,r2,r1
0033de  6042              STR      r2,[r0,#4]  ; main_power_buffer
;;;4277   	main_power_buffer[2]+=(long)(adc_result);
0033e0  6882              LDR      r2,[r0,#8]  ; main_power_buffer
0033e2  440a              ADD      r2,r2,r1
0033e4  6082              STR      r2,[r0,#8]  ; main_power_buffer
;;;4278   	main_power_buffer[3]+=(long)(adc_result);
0033e6  68c2              LDR      r2,[r0,#0xc]  ; main_power_buffer
0033e8  4411              ADD      r1,r1,r2
0033ea  60c1              STR      r1,[r0,#0xc]  ; main_power_buffer
;;;4279   
;;;4280   	adc_net_buff_cnt++;
0033ec  f8b51044          LDRH     r1,[r5,#0x44]  ; adc_net_buff_cnt
0033f0  f1010101          ADD      r1,r1,#1
0033f4  b209              SXTH     r1,r1
0033f6  f8a51044          STRH     r1,[r5,#0x44]
;;;4281   	if(adc_net_buff_cnt>=0x1000)
0033fa  f5b15f80          CMP      r1,#0x1000
0033fe  db01              BLT      |L1.13316|
;;;4282   		{
;;;4283   		adc_net_buff_cnt=0;
003400  f8a56044          STRH     r6,[r5,#0x44]
                  |L1.13316|
;;;4284   		}
;;;4285   	if((adc_net_buff_cnt&0x03ff)==0)
003404  f9b51044          LDRSH    r1,[r5,#0x44]  ; adc_net_buff_cnt
003408  058a              LSLS     r2,r1,#22
00340a  d131              BNE      |L1.13424|
;;;4286   		{
;;;4287   		#ifdef UKU_220
;;;4288   		net_buff_=(short)((main_power_buffer[adc_net_buff_cnt>>10])>>11);
;;;4289   		#else
;;;4290   		#ifdef UKU_220_V2
;;;4291   		net_buff_=(short)((main_power_buffer[adc_net_buff_cnt>>10])>>11);
;;;4292   		#else
;;;4293   		net_buff_=(short)((main_power_buffer[adc_net_buff_cnt>>10])>>8);
00340c  ea4f21a1          ASR      r1,r1,#10
003410  f8502021          LDR      r2,[r0,r1,LSL #2]
003414  ea4f2222          ASR      r2,r2,#8
003418  876a              STRH     r2,[r5,#0x3a]
;;;4294   		#endif
;;;4295   		#endif
;;;4296   		main_power_buffer[adc_net_buff_cnt>>10]=0;
00341a  f8406021          STR      r6,[r0,r1,LSL #2]
00341e  e027              B        |L1.13424|
                  |L1.13344|
;;;4297   		}
;;;4298   
;;;4299   
;;;4300   	} 
;;;4301   else if(!adc_ch_net)
;;;4302   	{
;;;4303   	adc_buff[adc_ch][adc_ch_cnt]=(long)adc_result;
003420  484f              LDR      r0,|L1.13664|
003422  7cac              LDRB     r4,[r5,#0x12]  ; adc_ch
003424  7cea              LDRB     r2,[r5,#0x13]  ; adc_ch_cnt
003426  eb001384          ADD      r3,r0,r4,LSL #6
00342a  f9b5103c          LDRSH    r1,[r5,#0x3c]  ; adc_result
00342e  f8431022          STR      r1,[r3,r2,LSL #2]
;;;4304   	
;;;4305   	if((adc_ch_cnt&0x03)==0)
003432  0790              LSLS     r0,r2,#30
003434  d10f              BNE      |L1.13398|
;;;4306   		{
;;;4307   		long temp_L;
;;;4308   		char i;
;;;4309   		temp_L=0;
003436  4601              MOV      r1,r0
                  |L1.13368|
;;;4310   		for(i=0;i<16;i++)
;;;4311   			{
;;;4312   			temp_L+=adc_buff[adc_ch][i];
003438  f853c020          LDR      r12,[r3,r0,LSL #2]
00343c  4461              ADD      r1,r1,r12
00343e  f1000001          ADD      r0,r0,#1              ;4310
003442  b2c0              UXTB     r0,r0                 ;4310
003444  2810              CMP      r0,#0x10              ;4310
003446  d3f7              BCC      |L1.13368|
;;;4313   			}
;;;4314   		adc_buff_[adc_ch]= (short)(temp_L>>4);
003448  ea4f1021          ASR      r0,r1,#4
00344c  4943              LDR      r1,|L1.13660|
00344e  f1a10120          SUB      r1,r1,#0x20
003452  f8210014          STRH     r0,[r1,r4,LSL #1]
                  |L1.13398|
;;;4315   
;;;4316   		//adc_buff_[3]=346;
;;;4317   		}
;;;4318   	if(++adc_ch>=16) 
003456  1c64              ADDS     r4,r4,#1
003458  b2e0              UXTB     r0,r4
00345a  74a8              STRB     r0,[r5,#0x12]
00345c  2810              CMP      r0,#0x10
00345e  d307              BCC      |L1.13424|
;;;4319   		{
;;;4320   		adc_ch=0;
003460  74ae              STRB     r6,[r5,#0x12]
;;;4321   		adc_ch_cnt++;
003462  f1020201          ADD      r2,r2,#1
003466  b2d0              UXTB     r0,r2
003468  74e8              STRB     r0,[r5,#0x13]
;;;4322   		if(adc_ch_cnt>=16)adc_ch_cnt=0;
00346a  2810              CMP      r0,#0x10
00346c  d300              BCC      |L1.13424|
00346e  74ee              STRB     r6,[r5,#0x13]
                  |L1.13424|
;;;4323   		}
;;;4324   	}
;;;4325   
;;;4326   //adc_buff[adc_ch][adc_cnt1]=(adc_self_ch_buff[2]+adc_self_ch_buff[1])/2;
;;;4327   
;;;4328   //if(adc_buff[adc_ch][adc_cnt1]<adc_buff_min[adc_ch])adc_buff_min[adc_ch]=adc_buff[adc_ch][adc_cnt1];
;;;4329   //if(adc_buff[adc_ch][adc_cnt1]>adc_buff_max[adc_ch])adc_buff_max[adc_ch]=adc_buff[adc_ch][adc_cnt1];
;;;4330   /*
;;;4331   	{
;;;4332   	if((adc_cnt1&0x03)==0)
;;;4333   		{
;;;4334   		temp_S=0;
;;;4335   		for(i=0;i<16;i++)
;;;4336   			{
;;;4337   			temp_S+=adc_buff[adc_ch][i];
;;;4338   			} 
;;;4339            	adc_buff_[adc_ch]=temp_S>>4;
;;;4340             }
;;;4341   	}*/
;;;4342   
;;;4343   
;;;4344   		  
;;;4345   
;;;4346   adc_self_ch_cnt=0;
003470  742e              STRB     r6,[r5,#0x10]
;;;4347   
;;;4348   adc_ch_net++;
003472  f1070701          ADD      r7,r7,#1
;;;4349   adc_ch_net&=1;
003476  f0070001          AND      r0,r7,#1
00347a  7468              STRB     r0,[r5,#0x11]
;;;4350   
;;;4351   //SET_REG(LPC_GPIO0->FIODIR,7,5,3);
;;;4352   //SET_REG(LPC_GPIO0->FIOPIN,adc_ch,5,3);
;;;4353   
;;;4354   if(adc_ch_net)
;;;4355   	{
;;;4356   	//LPC_GPIO2->FIODIR|=(1<<7);
;;;4357   	//LPC_GPIO2->FIOPIN|=(1<<7);
;;;4358   	SET_REG(LPC_ADC->ADCR,1<<2,0,8);
00347c  4a34              LDR      r2,|L1.13648|
00347e  b130              CBZ      r0,|L1.13454|
003480  6810              LDR      r0,[r2,#0]
003482  f02000ff          BIC      r0,r0,#0xff
003486  f1000004          ADD      r0,r0,#4
00348a  6010              STR      r0,[r2,#0]
00348c  e03d              B        |L1.13578|
                  |L1.13454|
;;;4359   	}
;;;4360   else
;;;4361   	{
;;;4362   	//LPC_GPIO2->FIODIR|=(1<<7);
;;;4363   	//LPC_GPIO2->FIOPIN&=~(1<<7);
;;;4364   	if(!(adc_ch&(1<<3)))SET_REG(LPC_ADC->ADCR,1<<0,0,8);
00348e  7ca9              LDRB     r1,[r5,#0x12]  ; adc_ch
003490  0708              LSLS     r0,r1,#28
003492  d406              BMI      |L1.13474|
003494  6810              LDR      r0,[r2,#0]
003496  f02000ff          BIC      r0,r0,#0xff
00349a  f1000001          ADD      r0,r0,#1
00349e  6010              STR      r0,[r2,#0]
0034a0  e005              B        |L1.13486|
                  |L1.13474|
;;;4365   	else 			SET_REG(LPC_ADC->ADCR,1<<1,0,8);
0034a2  6810              LDR      r0,[r2,#0]
0034a4  f02000ff          BIC      r0,r0,#0xff
0034a8  f1000002          ADD      r0,r0,#2
0034ac  6010              STR      r0,[r2,#0]
                  |L1.13486|
;;;4366   
;;;4367   
;;;4368   	SET_REG(LPC_GPIO0->FIODIR,1,28,1);
0034ae  482d              LDR      r0,|L1.13668|
0034b0  6803              LDR      r3,[r0,#0]
0034b2  f0435380          ORR      r3,r3,#0x10000000
0034b6  6003              STR      r3,[r0,#0]
;;;4369   	SET_REG(LPC_GPIO1->FIODIR,1,30,1);
0034b8  6a03              LDR      r3,[r0,#0x20]
0034ba  f0434380          ORR      r3,r3,#0x40000000
0034be  6203              STR      r3,[r0,#0x20]
;;;4370   	SET_REG(LPC_GPIO3->FIODIR,1,26,1);
0034c0  6e03              LDR      r3,[r0,#0x60]
0034c2  f0436380          ORR      r3,r3,#0x4000000
0034c6  6603              STR      r3,[r0,#0x60]
;;;4371   
;;;4372   	if(!(adc_ch&(1<<0)))SET_REG(LPC_GPIO0->FIOPIN,0,28,1);
0034c8  07cb              LSLS     r3,r1,#31
0034ca  d00a              BEQ      |L1.13538|
;;;4373   	else 			SET_REG(LPC_GPIO0->FIOPIN,1,28,1);
0034cc  6943              LDR      r3,[r0,#0x14]
0034ce  f0435380          ORR      r3,r3,#0x10000000
0034d2  6143              STR      r3,[r0,#0x14]
                  |L1.13524|
;;;4374   
;;;4375   	if(!(adc_ch&(1<<1)))SET_REG(LPC_GPIO1->FIOPIN,0,30,1);
0034d4  078b              LSLS     r3,r1,#30
0034d6  d409              BMI      |L1.13548|
0034d8  6b43              LDR      r3,[r0,#0x34]
0034da  f0234380          BIC      r3,r3,#0x40000000
0034de  6343              STR      r3,[r0,#0x34]
0034e0  e008              B        |L1.13556|
                  |L1.13538|
0034e2  6943              LDR      r3,[r0,#0x14]         ;4372
0034e4  f0235380          BIC      r3,r3,#0x10000000     ;4372
0034e8  6143              STR      r3,[r0,#0x14]         ;4372
0034ea  e7f3              B        |L1.13524|
                  |L1.13548|
;;;4376   	else 			SET_REG(LPC_GPIO1->FIOPIN,1,30,1);
0034ec  6b43              LDR      r3,[r0,#0x34]
0034ee  f0434380          ORR      r3,r3,#0x40000000
0034f2  6343              STR      r3,[r0,#0x34]
                  |L1.13556|
;;;4377   
;;;4378   	if(!(adc_ch&(1<<2)))SET_REG(LPC_GPIO3->FIOPIN,0,26,1);
0034f4  0749              LSLS     r1,r1,#29
0034f6  d404              BMI      |L1.13570|
0034f8  6f41              LDR      r1,[r0,#0x74]
0034fa  f0216180          BIC      r1,r1,#0x4000000
0034fe  6741              STR      r1,[r0,#0x74]
003500  e003              B        |L1.13578|
                  |L1.13570|
;;;4379   	else 			SET_REG(LPC_GPIO3->FIOPIN,1,26,1);
003502  6f41              LDR      r1,[r0,#0x74]
003504  f0416180          ORR      r1,r1,#0x4000000
003508  6741              STR      r1,[r0,#0x74]
                  |L1.13578|
;;;4380   	}
;;;4381   	
;;;4382   
;;;4383   
;;;4384   
;;;4385   LPC_ADC->ADCR |=  (1<<24);
00350a  6810              LDR      r0,[r2,#0]
00350c  f0407080          ORR      r0,r0,#0x1000000
003510  6010              STR      r0,[r2,#0]
                  |L1.13586|
;;;4386   
;;;4387   }
003512  e8bd81f0          POP      {r4-r8,pc}
;;;4388   
                          ENDP

                  avg_hndl PROC
;;;4645   //-----------------------------------------------
;;;4646   void avg_hndl(void)
003516  e92d41f0          PUSH     {r4-r8,lr}
;;;4647   { 
;;;4648   char i;
;;;4649   
;;;4650   //#define AVGCNTMAX	5
;;;4651   if(avg_main_cnt)
00351a  4d0f              LDR      r5,|L1.13656|
00351c  3dee              SUBS     r5,r5,#0xee
00351e  f9b50036          LDRSH    r0,[r5,#0x36]  ; avg_main_cnt
003522  b308              CBZ      r0,|L1.13672|
;;;4652   	{
;;;4653   	avg_main_cnt--;
003524  f1a00001          SUB      r0,r0,#1
003528  86e8              STRH     r0,[r5,#0x36]
;;;4654   	//goto avg_hndl_end;
;;;4655   	return;
;;;4656   	}                 
;;;4657   
;;;4658   avg_main_cnt=5;
;;;4659   avg_num=0;
;;;4660   
;;;4661   for(i=0;i<NUMIST;i++)
;;;4662   	{
;;;4663   	if((bps[i]._state==bsWRK)&&(bps[i]._cnt<20))avg_num++;
;;;4664   	}
;;;4665   
;;;4666   /*if((K[NUMI]>=1)&&(bps_state[0]==ssWRK))	avg_num++;
;;;4667   if((K[NUMI]>=2)&&(bps_state[1]==ssWRK))	avg_num++;
;;;4668   if((K[NUMI]>=3)&&(bps_state[2]==ssWRK))	avg_num++;*/
;;;4669   
;;;4670   if(avg_vektor) avg_vektor=0;
;;;4671   else avg_vektor=1;
;;;4672   	
;;;4673   if(avg_num<2)
;;;4674   	{
;;;4675   	//goto avg_hndl_end;
;;;4676   	return;
;;;4677   	}
;;;4678   	
;;;4679   else
;;;4680   	{
;;;4681   	i_avg_min=5000;
;;;4682   	i_avg_max=0;
;;;4683   	i_avg_summ=0;
;;;4684   	for(i=0;i<NUMIST;i++)
;;;4685   		{
;;;4686   		if(bps[i]._state==bsWRK)
;;;4687   			{
;;;4688   			if(bps[i]._Ii>i_avg_max)i_avg_max=bps[i]._Ii;
;;;4689   			if(bps[i]._Ii<i_avg_min)i_avg_min=bps[i]._Ii;
;;;4690   			
;;;4691   			i_avg_summ+=bps[i]._Ii;
;;;4692   			}
;;;4693   		}
;;;4694   	i_avg=i_avg_summ/avg_num;	
;;;4695   	
;;;4696   	if(i_avg_min==0)i_avg_min=1;
;;;4697   
;;;4698   	avg=i_avg_max;
;;;4699   	avg*=100;
;;;4700   	avg/=i_avg_min;
;;;4701   
;;;4702   	if(avg>130) bAVG=1;
;;;4703   	if(avg<110) bAVG=0;
;;;4704   
;;;4705   	if(bAVG==1)
;;;4706   		{
;;;4707   		for(i=0;i<NUMIST;i++)
;;;4708   			{
;;;4709   			if(bps[i]._state==bsWRK)
;;;4710   				{
;;;4711   				if((bps[i]._Ii>i_avg)&&(!avg_vektor))bps[i]._x_--;
;;;4712   				if((bps[i]._Ii<i_avg)&&(avg_vektor))bps[i]._x_++;
;;;4713   			
;;;4714   				if(bps[i]._x_<-50)bps[i]._x_=-50;
;;;4715   				if(bps[i]._x_>50)bps[i]._x_=50;	
;;;4716   				}
;;;4717   			}		
;;;4718   		}			
;;;4719   	}   	 
;;;4720   
;;;4721   
;;;4722   avg_hndl_end:
;;;4723   __nop();  
;;;4724   }
00352a  e7f2              B        |L1.13586|
                  |L1.13612|
                          DCD      load_I
                  |L1.13616|
                          DCD      Isumm
                  |L1.13620|
                          DCD      NUMINV
                  |L1.13624|
                          DCD      inv
                  |L1.13628|
                          DCD      a_ind
                  |L1.13632|
                          DCD      mnemo_cnt
                  |L1.13636|
                          DCD      MNEMO_ON
                  |L1.13640|
                          DCD      MNEMO_TIME
                  |L1.13644|
                          DCD      0x4002c000
                  |L1.13648|
                          DCD      0x40034000
                  |L1.13652|
                          DCD      0xe000e100
                  |L1.13656|
                          DCD      ||area_number.25||+0xee
                  |L1.13660|
                          DCD      ||.bss||+0x42c
                  |L1.13664|
                          DCD      ||.bss||+0xc
                  |L1.13668|
                          DCD      0x2009c000
                  |L1.13672|
003568  f04f0005          MOV      r0,#5                 ;4658
00356c  86e8              STRH     r0,[r5,#0x36]         ;4658
00356e  f04f0700          MOV      r7,#0                 ;4659
003572  76af              STRB     r7,[r5,#0x1a]         ;4659
003574  f04f0000          MOV      r0,#0                 ;4661
003578  49f8              LDR      r1,|L1.14684|
00357a  4cf7              LDR      r4,|L1.14680|
00357c  f9b12000          LDRSH    r2,[r1,#0]            ;4661
003580  e012              B        |L1.13736|
                  |L1.13698|
003582  ebc001c0          RSB      r1,r0,r0,LSL #3       ;4663
003586  eb011100          ADD      r1,r1,r0,LSL #4       ;4663
00358a  eb040181          ADD      r1,r4,r1,LSL #2       ;4663
00358e  788b              LDRB     r3,[r1,#2]            ;4663
003590  2b01              CMP      r3,#1                 ;4663
003592  d106              BNE      |L1.13730|
003594  78c9              LDRB     r1,[r1,#3]            ;4663
003596  2914              CMP      r1,#0x14              ;4663
003598  d203              BCS      |L1.13730|
00359a  7ea9              LDRB     r1,[r5,#0x1a]         ;4663  ; avg_num
00359c  f1010101          ADD      r1,r1,#1              ;4663
0035a0  76a9              STRB     r1,[r5,#0x1a]         ;4663
                  |L1.13730|
0035a2  f1000001          ADD      r0,r0,#1              ;4661
0035a6  b2c0              UXTB     r0,r0                 ;4661
                  |L1.13736|
0035a8  4290              CMP      r0,r2                 ;4661
0035aa  dbea              BLT      |L1.13698|
0035ac  7ee8              LDRB     r0,[r5,#0x1b]         ;4670  ; avg_vektor
0035ae  f04f0c01          MOV      r12,#1                ;4663
0035b2  b108              CBZ      r0,|L1.13752|
0035b4  76ef              STRB     r7,[r5,#0x1b]         ;4670
0035b6  e001              B        |L1.13756|
                  |L1.13752|
0035b8  f885c01b          STRB     r12,[r5,#0x1b]        ;4671
                  |L1.13756|
0035bc  7eae              LDRB     r6,[r5,#0x1a]         ;4673  ; avg_num
0035be  2e02              CMP      r6,#2                 ;4673
0035c0  d3a7              BCC      |L1.13586|
0035c2  4be7              LDR      r3,|L1.14688|
0035c4  f2413088          MOV      r0,#0x1388            ;4681
0035c8  6218              STR      r0,[r3,#0x20]         ;4681  ; i_avg_min
0035ca  61df              STR      r7,[r3,#0x1c]         ;4682  ; i_avg_max
0035cc  625f              STR      r7,[r3,#0x24]         ;4683  ; i_avg_summ
0035ce  f04f0100          MOV      r1,#0                 ;4684
0035d2  e01c              B        |L1.13838|
                  |L1.13780|
0035d4  ebc100c1          RSB      r0,r1,r1,LSL #3       ;4686
0035d8  eb001001          ADD      r0,r0,r1,LSL #4       ;4686
0035dc  eb040080          ADD      r0,r4,r0,LSL #2       ;4686
0035e0  f8908002          LDRB     r8,[r0,#2]            ;4686
0035e4  f1b80f01          CMP      r8,#1                 ;4686
0035e8  d10e              BNE      |L1.13832|
0035ea  6a40              LDR      r0,[r0,#0x24]         ;4688
0035ec  f8d3801c          LDR      r8,[r3,#0x1c]         ;4688  ; i_avg_max
0035f0  4540              CMP      r0,r8                 ;4688
0035f2  dd00              BLE      |L1.13814|
0035f4  61d8              STR      r0,[r3,#0x1c]         ;4688  ; i_avg_max
                  |L1.13814|
0035f6  f8d38020          LDR      r8,[r3,#0x20]         ;4689  ; i_avg_min
0035fa  4540              CMP      r0,r8                 ;4689
0035fc  da00              BGE      |L1.13824|
0035fe  6218              STR      r0,[r3,#0x20]         ;4689  ; i_avg_min
                  |L1.13824|
003600  f8d38024          LDR      r8,[r3,#0x24]         ;4691  ; i_avg_summ
003604  4440              ADD      r0,r0,r8              ;4691
003606  6258              STR      r0,[r3,#0x24]         ;4691  ; i_avg_summ
                  |L1.13832|
003608  f1010101          ADD      r1,r1,#1              ;4684
00360c  b2c9              UXTB     r1,r1                 ;4684
                  |L1.13838|
00360e  4291              CMP      r1,r2                 ;4684
003610  dbe0              BLT      |L1.13780|
003612  6a58              LDR      r0,[r3,#0x24]         ;4694  ; i_avg_summ
003614  fb90f6f6          SDIV     r6,r0,r6              ;4694
003618  629e              STR      r6,[r3,#0x28]         ;4694  ; i_avg
00361a  6a18              LDR      r0,[r3,#0x20]         ;4696  ; i_avg_min
00361c  b908              CBNZ     r0,|L1.13858|
00361e  f8c3c020          STR      r12,[r3,#0x20]        ;4696  ; i_avg_min
                  |L1.13858|
003622  69d8              LDR      r0,[r3,#0x1c]         ;4698  ; i_avg_max
003624  f04f0164          MOV      r1,#0x64              ;4699
003628  fb00f001          MUL      r0,r0,r1              ;4699
00362c  6a19              LDR      r1,[r3,#0x20]         ;4700  ; i_avg_min
00362e  fb90f0f1          SDIV     r0,r0,r1              ;4700
003632  62d8              STR      r0,[r3,#0x2c]         ;4700  ; avg
003634  2882              CMP      r0,#0x82              ;4702
003636  dd01              BLE      |L1.13884|
003638  f885c019          STRB     r12,[r5,#0x19]        ;4702
                  |L1.13884|
00363c  286e              CMP      r0,#0x6e              ;4703
00363e  da00              BGE      |L1.13890|
003640  766f              STRB     r7,[r5,#0x19]         ;4703
                  |L1.13890|
003642  7e68              LDRB     r0,[r5,#0x19]         ;4705  ; bAVG
003644  2801              CMP      r0,#1                 ;4705
003646  d138              BNE      |L1.14010|
003648  f04f0100          MOV      r1,#0                 ;4707
00364c  f06f0731          MVN      r7,#0x31              ;4714
003650  e031              B        |L1.14006|
                  |L1.13906|
003652  ebc100c1          RSB      r0,r1,r1,LSL #3       ;4709
003656  eb001001          ADD      r0,r0,r1,LSL #4       ;4709
00365a  eb040080          ADD      r0,r4,r0,LSL #2       ;4709
00365e  7883              LDRB     r3,[r0,#2]            ;4709
003660  2b01              CMP      r3,#1                 ;4709
003662  d125              BNE      |L1.14000|
003664  6a43              LDR      r3,[r0,#0x24]         ;4711
003666  42b3              CMP      r3,r6                 ;4711
003668  dd0a              BLE      |L1.13952|
00366a  f895c01b          LDRB     r12,[r5,#0x1b]        ;4711  ; avg_vektor
00366e  f1bc0f00          CMP      r12,#0                ;4711
003672  d105              BNE      |L1.13952|
003674  f8b0c050          LDRH     r12,[r0,#0x50]        ;4711
003678  f1ac0c01          SUB      r12,r12,#1            ;4711
00367c  f8a0c050          STRH     r12,[r0,#0x50]        ;4711
                  |L1.13952|
003680  42b3              CMP      r3,r6                 ;4712
003682  da07              BGE      |L1.13972|
003684  7eeb              LDRB     r3,[r5,#0x1b]         ;4712  ; avg_vektor
003686  b12b              CBZ      r3,|L1.13972|
003688  f8b03050          LDRH     r3,[r0,#0x50]         ;4712
00368c  f1030301          ADD      r3,r3,#1              ;4712
003690  f8a03050          STRH     r3,[r0,#0x50]         ;4712
                  |L1.13972|
003694  f9b03050          LDRSH    r3,[r0,#0x50]         ;4714
003698  42bb              CMP      r3,r7                 ;4714
00369a  da01              BGE      |L1.13984|
00369c  f8a07050          STRH     r7,[r0,#0x50]         ;4714
                  |L1.13984|
0036a0  f9b03050          LDRSH    r3,[r0,#0x50]         ;4715
0036a4  2b32              CMP      r3,#0x32              ;4715
0036a6  dd03              BLE      |L1.14000|
0036a8  f04f0332          MOV      r3,#0x32              ;4715
0036ac  f8a03050          STRH     r3,[r0,#0x50]         ;4715
                  |L1.14000|
0036b0  f1010101          ADD      r1,r1,#1              ;4707
0036b4  b2c9              UXTB     r1,r1                 ;4707
                  |L1.14006|
0036b6  4291              CMP      r1,r2                 ;4707
0036b8  dbcb              BLT      |L1.13906|
                  |L1.14010|
0036ba  bf00              NOP                            ;4723
0036bc  e729              B        |L1.13586|
;;;4725   
                          ENDP

                  rele_hndl PROC
;;;4738   //*************-----------------------------------------------
;;;4739   void rele_hndl(void)
0036be  e92d5ff0          PUSH     {r4-r12,lr}
;;;4740   {
;;;4741   //static char cnt_rel_sam;
;;;4742   //char temp;
;;;4743   
;;;4744   //temp=0;
;;;4745   
;;;4746   
;;;4747   SET_REG(LPC_PINCON->PINSEL0,0,4*2,6*2);
0036c2  48a8              LDR      r0,|L1.14692|
0036c4  6801              LDR      r1,[r0,#0]
0036c6  4aa8              LDR      r2,|L1.14696|
0036c8  ea010102          AND      r1,r1,r2
0036cc  6001              STR      r1,[r0,#0]
;;;4748   SET_REG(LPC_GPIO0->FIODIR,63,4,6);
0036ce  4ca7              LDR      r4,|L1.14700|
0036d0  6821              LDR      r1,[r4,#0]
0036d2  f441717c          ORR      r1,r1,#0x3f0
0036d6  6021              STR      r1,[r4,#0]
;;;4749   SET_REG(LPC_PINCON->PINSEL7,0,(25-16)*2,2);
0036d8  69c1              LDR      r1,[r0,#0x1c]
0036da  f4212140          BIC      r1,r1,#0xc0000
0036de  61c1              STR      r1,[r0,#0x1c]
;;;4750   SET_REG(LPC_GPIO3->FIODIR,1,25,1);
0036e0  6e21              LDR      r1,[r4,#0x60]
0036e2  f0417100          ORR      r1,r1,#0x2000000
0036e6  6621              STR      r1,[r4,#0x60]
;;;4751   SET_REG(LPC_PINCON->PINSEL1,0,(29-16)*2,2);
0036e8  6841              LDR      r1,[r0,#4]
0036ea  f0216140          BIC      r1,r1,#0xc000000
0036ee  6041              STR      r1,[r0,#4]
;;;4752   SET_REG(LPC_GPIO0->FIODIR,1,29,1);
0036f0  6820              LDR      r0,[r4,#0]
0036f2  f0405000          ORR      r0,r0,#0x20000000
0036f6  6020              STR      r0,[r4,#0]
;;;4753   
;;;4754   
;;;4755   
;;;4756   
;;;4757   
;;;4758   
;;;4759   if((((bat[0]._rel_stat)  || (tbatdisable_stat!=tbdsON))&&(tbatdisable_cmnd))	&& (main_1Hz_cnt>5))
0036f8  489e              LDR      r0,|L1.14708|
0036fa  4d9d              LDR      r5,|L1.14704|
0036fc  499f              LDR      r1,|L1.14716|
0036fe  7802              LDRB     r2,[r0,#0]  ; tbatdisable_stat
003700  489d              LDR      r0,|L1.14712|
003702  f895303c          LDRB     r3,[r5,#0x3c]  ; bat
003706  f9b11000          LDRSH    r1,[r1,#0]
00370a  7800              LDRB     r0,[r0,#0]
00370c  4313              ORRS     r3,r3,r2
00370e  d007              BEQ      |L1.14112|
003710  b130              CBZ      r0,|L1.14112|
003712  2905              CMP      r1,#5
003714  dd04              BLE      |L1.14112|
;;;4760   	{
;;;4761   	SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_BAT1,1);
003716  69a3              LDR      r3,[r4,#0x18]
003718  f4437380          ORR      r3,r3,#0x100
00371c  61a3              STR      r3,[r4,#0x18]
00371e  e003              B        |L1.14120|
                  |L1.14112|
;;;4762   	}
;;;4763   else SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_BAT1,1);	  	
003720  69e3              LDR      r3,[r4,#0x1c]
003722  f4437380          ORR      r3,r3,#0x100
003726  61e3              STR      r3,[r4,#0x1c]
                  |L1.14120|
;;;4764   
;;;4765   if((((bat[1]._rel_stat) || (tbatdisable_stat!=tbdsON))&&(tbatdisable_cmnd))	&& (main_1Hz_cnt>5))
003728  f8953088          LDRB     r3,[r5,#0x88]  ; bat
00372c  4313              ORRS     r3,r3,r2
00372e  d007              BEQ      |L1.14144|
003730  b130              CBZ      r0,|L1.14144|
003732  2905              CMP      r1,#5
003734  dd04              BLE      |L1.14144|
;;;4766   	{
;;;4767   	SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_BAT2,1);
003736  69a0              LDR      r0,[r4,#0x18]
003738  f0400040          ORR      r0,r0,#0x40
00373c  61a0              STR      r0,[r4,#0x18]
00373e  e003              B        |L1.14152|
                  |L1.14144|
;;;4768   	}
;;;4769   else SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_BAT2,1);
003740  69e0              LDR      r0,[r4,#0x1c]
003742  f0400040          ORR      r0,r0,#0x40
003746  61e0              STR      r0,[r4,#0x1c]
                  |L1.14152|
;;;4770   
;;;4771   
;;;4772   if(mess_find_unvol((MESS2RELE_HNDL))&&(mess_data[0]==PARAM_RELE_SAMOKALIBR)) 
003748  20d2              MOVS     r0,#0xd2
00374a  f7fffffe          BL       mess_find_unvol
00374e  4d8c              LDR      r5,|L1.14720|
003750  b110              CBZ      r0,|L1.14168|
003752  6828              LDR      r0,[r5,#0]  ; mess_data
003754  2864              CMP      r0,#0x64
003756  d048              BEQ      |L1.14314|
                  |L1.14168|
;;;4773   	{
;;;4774   	if(mess_data[1]==1)SET_REG(LPC_GPIO0->FIOSET,1,29,1);
;;;4775   	else if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,29,1);
;;;4776   	}
;;;4777   else SET_REG(LPC_GPIO0->FIOCLR,1,29,1);
003758  69e0              LDR      r0,[r4,#0x1c]
00375a  f0405000          ORR      r0,r0,#0x20000000
00375e  61e0              STR      r0,[r4,#0x1c]
                  |L1.14176|
;;;4778   
;;;4779   
;;;4780   #ifndef UKU2071x
;;;4781   //Реле аварии сети
;;;4782   if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_AV_NET))
;;;4783   	{
;;;4784   	if(mess_data[1]==0) 			SET_REG(LPC_GPIO3->FIOSET,1,SHIFT_REL_AV_NET,1);
;;;4785   	else 						SET_REG(LPC_GPIO3->FIOCLR,1,SHIFT_REL_AV_NET,1);
;;;4786   	}
;;;4787   else	if(!(avar_ind_stat&0x00000001)) 	SET_REG(LPC_GPIO3->FIOSET,1,SHIFT_REL_AV_NET,1);
;;;4788   else 							SET_REG(LPC_GPIO3->FIOCLR,1,SHIFT_REL_AV_NET,1);
;;;4789   #endif
;;;4790   #ifdef UKU2071x
;;;4791   //Реле аварии сети
;;;4792   if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_AV_NET))
003760  20d2              MOVS     r0,#0xd2
003762  f7fffffe          BL       mess_find_unvol
;;;4793   	{
;;;4794   	if(mess_data[1]==0)				SET_REG(LPC_GPIO3->FIOCLR,1,SHIFT_REL_AV_NET,1); 
;;;4795   	else 						SET_REG(LPC_GPIO3->FIOSET,1,SHIFT_REL_AV_NET,1);
;;;4796   	}
;;;4797   else	if(!(avar_ind_stat&0x00000001))	SET_REG(LPC_GPIO3->FIOCLR,1,SHIFT_REL_AV_NET,1);
003766  4e87              LDR      r6,|L1.14724|
003768  b110              CBZ      r0,|L1.14192|
00376a  6828              LDR      r0,[r5,#0]            ;4792  ; mess_data
00376c  2866              CMP      r0,#0x66              ;4792
00376e  d04b              BEQ      |L1.14344|
                  |L1.14192|
003770  6830              LDR      r0,[r6,#0]  ; avar_ind_stat
003772  07c0              LSLS     r0,r0,#31
003774  d054              BEQ      |L1.14368|
;;;4798   else 					  		SET_REG(LPC_GPIO3->FIOSET,1,SHIFT_REL_AV_NET,1);
003776  6fa0              LDR      r0,[r4,#0x78]
003778  f0407000          ORR      r0,r0,#0x2000000
00377c  67a0              STR      r0,[r4,#0x78]
                  |L1.14206|
;;;4799   #endif
;;;4800   
;;;4801   #ifdef UKU_3U
;;;4802   //Реле аварий батарей
;;;4803   if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_AV_BAT1))
;;;4804   	{
;;;4805   	if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_BAT1,1);
;;;4806   	else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_BAT1,1);
;;;4807        }
;;;4808   else 
;;;4809   	{
;;;4810   	if(!(avar_ind_stat&0x00000002)) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_BAT1,1);
;;;4811        else SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_BAT1,1);
;;;4812   	} 
;;;4813   
;;;4814   if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_AV_BAT2))
;;;4815   	{
;;;4816   	if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_BAT2,1);
;;;4817   	else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_BAT2,1);
;;;4818        }
;;;4819   else 
;;;4820   	{
;;;4821   	if(!(avar_ind_stat&0x00000004)) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_BAT2,1);
;;;4822        else SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_BAT2,1);
;;;4823   	} 
;;;4824   
;;;4825   if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_AV_BPS))
;;;4826   	{
;;;4827   	if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_BPS,1);
;;;4828   	else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_BPS,1);
;;;4829        }
;;;4830   else 
;;;4831   	{
;;;4832   	if(!(avar_ind_stat&0x000007f8)) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_BPS,1);
;;;4833        else SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_BPS,1);
;;;4834   	} 
;;;4835   
;;;4836   #endif
;;;4837   
;;;4838   
;;;4839   #ifdef UKU_GLONASS
;;;4840   //Реле аварий батарей
;;;4841   if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_AV_BAT1))
;;;4842   	{
;;;4843   	if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_BAT1,1);
;;;4844   	else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_BAT1,1);
;;;4845        }
;;;4846   else 
;;;4847   	{
;;;4848   	if(!(avar_ind_stat&0x00000002)) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_BAT1,1);
;;;4849        else SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_BAT1,1);
;;;4850   	} 
;;;4851   
;;;4852   if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_AV_BAT2))
;;;4853   	{
;;;4854   	if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_BAT2,1);
;;;4855   	else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_BAT2,1);
;;;4856        }
;;;4857   else 
;;;4858   	{
;;;4859   	if(!(avar_ind_stat&0x00000004)) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_BAT2,1);
;;;4860        else SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_BAT2,1);
;;;4861   	} 
;;;4862   
;;;4863   if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_AV_BPS))
;;;4864   	{
;;;4865   	if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_BPS,1);
;;;4866   	else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_BPS,1);
;;;4867        }
;;;4868   else 
;;;4869   	{
;;;4870   	if(!(avar_ind_stat&0x000007f8)) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_BPS,1);
;;;4871        else SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_BPS,1);
;;;4872   	} 
;;;4873   
;;;4874   #endif
;;;4875   
;;;4876   #ifdef U 
;;;4877   
;;;4878   #endif
;;;4879   
;;;4880   #ifdef UKU_RSTKM
;;;4881   
;;;4882   //Реле общей аварии
;;;4883   if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_AV_COMM))
;;;4884   	{
;;;4885   	if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_COMM,1);
;;;4886   	else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_COMM,1);
;;;4887   	}
;;;4888   else 
;;;4889   	{
;;;4890        if(  (!(avar_ind_stat&0x00007fff))/* &&
;;;4891             ((!SK_REL_EN[0]) || (sk_av_stat[0]!=sasON))  &&
;;;4892             ((!SK_REL_EN[1]) || (sk_av_stat[1]!=sasON))  &&
;;;4893             ((!SK_REL_EN[2]) || (sk_av_stat[2]!=sasON))  &&
;;;4894             ((!SK_REL_EN[3]) || (sk_av_stat[3]!=sasON))*/  )SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_COMM,1);
;;;4895        else SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_COMM,1);
;;;4896   	}
;;;4897   	
;;;4898   
;;;4899   //Реле освещения
;;;4900   if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_LIGHT))
;;;4901   	{
;;;4902   	if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_LIGHT,1);
;;;4903   	else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_LIGHT,1);
;;;4904        }
;;;4905   else 
;;;4906   	{
;;;4907   	if(sk_av_stat[0]!=sasON) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_LIGHT,1);
;;;4908        else SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_LIGHT,1);
;;;4909   	}
;;;4910   
;;;4911   
;;;4912   //Реле выключения нагрузки
;;;4913   if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_LOAD_OFF))
;;;4914   	{
;;;4915   	if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_LOAD_OFF,1);
;;;4916   	else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_LOAD_OFF,1);
;;;4917        }
;;;4918   else if(tloaddisable_cmnd==0)
;;;4919   	{
;;;4920   	SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_LOAD_OFF,1);
;;;4921   	}
;;;4922   else if((tloaddisable_cmnd)&&(tloaddisable_cmnd<=11))
;;;4923   	{
;;;4924   	SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_LOAD_OFF,1);
;;;4925   	}
;;;4926   
;;;4927   else 
;;;4928   	{
;;;4929   	if(!(tloaddisable_stat==tldsON)) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_LOAD_OFF,1);
;;;4930        else SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_LOAD_OFF,1);
;;;4931   	} 
;;;4932   
;;;4933   //Реле осевого вентилятора
;;;4934   if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_VENT))
;;;4935   	{
;;;4936   	if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_VENT,1);
;;;4937   	else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_VENT,1);
;;;4938   	}
;;;4939   else 
;;;4940   	{
;;;4941   	if(mixer_vent_stat==mvsOFF) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_VENT,1);
;;;4942        else SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_VENT,1);
;;;4943   	} 
;;;4944   
;;;4945   #endif
;;;4946   
;;;4947   #ifdef UKU_KONTUR
;;;4948   
;;;4949   //Реле общей аварии
;;;4950   if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_AV_COMM))
;;;4951   	{
;;;4952   	if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_COMM,1);
;;;4953   	else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_COMM,1);
;;;4954   	}
;;;4955   else 
;;;4956   	{
;;;4957        if(  (!(avar_ind_stat&0x00007fff)) &&
;;;4958             ((!SK_REL_EN[0]) || (sk_av_stat[0]!=sasON))  &&
;;;4959             ((!SK_REL_EN[1]) || (sk_av_stat[1]!=sasON))  &&
;;;4960             ((!SK_REL_EN[2]) || (sk_av_stat[2]!=sasON))  /*&&
;;;4961             ((!SK_REL_EN[3]) || (sk_av_stat[3]!=sasON))*/  )SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_COMM,1);
;;;4962        else SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_COMM,1);
;;;4963   	}
;;;4964   
;;;4965   	
;;;4966   //rel_warm_plazma=0;
;;;4967   //Реле освещения   
;;;4968   /*
;;;4969   if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_WARM))
;;;4970   	{
;;;4971   	if(mess_data[1]==0)
;;;4972   		{
;;;4973   		SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_WARM,1);
;;;4974   		rel_warm_plazma=1;
;;;4975   		}
;;;4976   	else if(mess_data[1]==1) 
;;;4977   		{
;;;4978   		SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_WARM,1);
;;;4979   		rel_warm_plazma=2;
;;;4980   		}
;;;4981        }
;;;4982   else 
;;;4983   	{
;;;4984   	if(warm_stat_k==wsOFF) 
;;;4985   		{
;;;4986   		SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_WARM,1);
;;;4987   		rel_warm_plazma=3;
;;;4988   		}
;;;4989        else 
;;;4990   		{
;;;4991   		SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_WARM,1);
;;;4992   		rel_warm_plazma=4;
;;;4993   		}
;;;4994   	}
;;;4995   */
;;;4996   //Реле освещения
;;;4997   if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_LIGHT))
;;;4998   	{
;;;4999   	if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_LIGHT,1);
;;;5000   	else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_LIGHT,1);
;;;5001        }
;;;5002   else 
;;;5003   	{
;;;5004   	if(sk_av_stat[0]!=sasON) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_LIGHT,1);
;;;5005        else SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_LIGHT,1);
;;;5006   	}
;;;5007   
;;;5008   
;;;5009   
;;;5010   //Реле выключения нагрузки
;;;5011   if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_LOAD_OFF))
;;;5012   	{
;;;5013   	if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_LOAD_OFF,1);
;;;5014   	else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_LOAD_OFF,1);
;;;5015        }
;;;5016   else if(tloaddisable_cmnd==0)
;;;5017   	{
;;;5018   	SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_LOAD_OFF,1);
;;;5019   	}
;;;5020   else if((tloaddisable_cmnd)&&(tloaddisable_cmnd<=11))
;;;5021   	{
;;;5022   	SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_LOAD_OFF,1);
;;;5023   	}
;;;5024   
;;;5025   else 
;;;5026   	{
;;;5027   	if(!(tloaddisable_stat==tldsON)) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_LOAD_OFF,1);
;;;5028        else SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_LOAD_OFF,1);
;;;5029   	} 
;;;5030   
;;;5031   //Реле осевого вентилятора или отопителя
;;;5032   if(RELE_LOG)
;;;5033   	{
;;;5034   	if((mess_find_unvol(MESS2RELE_HNDL))&&(mess_data[0]==PARAM_RELE_VENT_WARM))
;;;5035   		{
;;;5036   		if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_VENT_WARM,1);
;;;5037   		else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_VENT_WARM,1);
;;;5038   		}
;;;5039   	else 
;;;5040   		{
;;;5041   		if(warm_stat_k==wsOFF) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_VENT_WARM,1);
;;;5042   	     else SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_VENT_WARM,1);
;;;5043   		} 
;;;5044   
;;;5045   	}
;;;5046   else 
;;;5047   	{
;;;5048   	if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_VENT_WARM))
;;;5049   		{
;;;5050   		if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_VENT_WARM,1);
;;;5051   		else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_VENT_WARM,1);
;;;5052   		}
;;;5053   	else 
;;;5054   		{
;;;5055   		if(vent_stat_k==vsOFF) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_VENT_WARM,1);
;;;5056   	     else SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_VENT_WARM,1);
;;;5057   		} 
;;;5058   	}
;;;5059   #endif
;;;5060   
;;;5061   #ifdef UKU_6U
;;;5062   //Реле аварий батарей
;;;5063   if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_AV_BAT1))
;;;5064   	{
;;;5065   	if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_BAT1,1);
;;;5066   	else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_BAT1,1);
;;;5067        }
;;;5068   else 
;;;5069   	{
;;;5070   	if(!(avar_ind_stat&0x00000002)) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_BAT1,1);
;;;5071        else SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_BAT1,1);
;;;5072   	} 
;;;5073   
;;;5074   if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_AV_BAT2))
;;;5075   	{
;;;5076   	if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_BAT2,1);
;;;5077   	else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_BAT2,1);
;;;5078       }
;;;5079   else if(NPN_OUT==npnoRELEAVBAT2)
;;;5080   	{
;;;5081   	if(npn_stat==npnsOFF)//&&(mess_find_unvol(MESS2RELE_HNDL))&&(mess_data[0]==PARAM_RELE_NPN))
;;;5082   		{
;;;5083   		/*if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_BAT2,1);
;;;5084   		else if(mess_data[1]==1)*/ SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_BAT2,1);
;;;5085        	}
;;;5086   	else SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_BAT2,1);
;;;5087   	}
;;;5088   else 
;;;5089   	{
;;;5090   	if(!(avar_ind_stat&0x00000004)) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_BAT2,1);
;;;5091       else SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_BAT2,1);
;;;5092   	} 
;;;5093   
;;;5094   if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_AV_BPS))
;;;5095   	{
;;;5096   	if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_BPS,1);
;;;5097   	else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_BPS,1);
;;;5098        }
;;;5099   else 
;;;5100   	{
;;;5101   	if(!(avar_ind_stat&0x000007f8)) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_BPS,1);
;;;5102        else SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_BPS,1);
;;;5103   	} 
;;;5104   
;;;5105   if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_VENT))
;;;5106   	{
;;;5107   	if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_VENT,1);
;;;5108   	else SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_VENT,1);
;;;5109   	}
;;;5110   else if((NPN_OUT==npnoRELEVENT))
;;;5111   	{
;;;5112   	if(npn_stat==npnsOFF)//&&(mess_find_unvol(MESS2RELE_HNDL))&&(mess_data[0]==PARAM_RELE_NPN))
;;;5113   		{
;;;5114   		/*if(mess_data[1]==0)*/ SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_VENT,1);
;;;5115   		//else SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_VENT,1);
;;;5116       	}
;;;5117   	else SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_VENT,1);
;;;5118   	}
;;;5119   else 
;;;5120   	{
;;;5121   	if(!vent_stat) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_VENT,1);
;;;5122   	else SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_VENT,1);
;;;5123   	}
;;;5124   
;;;5125   #endif
;;;5126   
;;;5127   #ifdef UKU_220
;;;5128   //Реле аварий батарей
;;;5129   if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_AV_BAT))
;;;5130   	{
;;;5131   	if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_BAT,1);
;;;5132   	else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_BAT,1);
;;;5133        }
;;;5134   else 
;;;5135   	{
;;;5136   	if(!(avar_ind_stat&0x00000002)) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_BAT,1);
;;;5137        else SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_BAT,1);
;;;5138   	} 
;;;5139   
;;;5140   if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_AV_BPS))
;;;5141   	{
;;;5142   	if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_BPS,1);
;;;5143   	else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_BPS,1);
;;;5144        }
;;;5145   else 
;;;5146   	{
;;;5147   	if(!(avar_ind_stat&0x000007f8)) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_BPS,1);
;;;5148        else SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_BPS,1);
;;;5149   	} 
;;;5150   
;;;5151   if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_VENT))
;;;5152   	{
;;;5153   	if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_VENT,1);
;;;5154   	else SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_VENT,1);
;;;5155   	}
;;;5156   else 
;;;5157   	{
;;;5158   	if((RELE_VENT_LOGIC==0)||(RELE_VENT_LOGIC==1))
;;;5159   		{
;;;5160   		if(vent_stat) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_VENT,1);
;;;5161   		else SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_VENT,1);
;;;5162   		}
;;;5163   	else 
;;;5164   		{
;;;5165   		if((avar_ind_stat&0x00000004)) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_VENT,1);
;;;5166        	else SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_VENT,1);
;;;5167   		}
;;;5168   	}
;;;5169   
;;;5170   #endif
;;;5171   
;;;5172   #ifdef UKU_220_V2
;;;5173   //Реле аварий батарей
;;;5174   if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_AV_BAT))
;;;5175   	{
;;;5176   	if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_BAT,1);
;;;5177   	else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_BAT,1);
;;;5178        }
;;;5179   else 
;;;5180   	{
;;;5181   	if(!(avar_ind_stat&0x00000002)) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_BAT,1);
;;;5182        else SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_BAT,1);
;;;5183   	} 
;;;5184   
;;;5185   if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_AV_BPS))
;;;5186   	{
;;;5187   	if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_BPS,1);
;;;5188   	else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_BPS,1);
;;;5189        }
;;;5190   else 
;;;5191   	{
;;;5192   	if(!(avar_ind_stat&0x000007f8)) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_BPS,1);
;;;5193        else SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_BPS,1);
;;;5194   	} 
;;;5195   
;;;5196   if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_VENT))
;;;5197   	{
;;;5198   	if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_VENT,1);
;;;5199   	else SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_VENT,1);
;;;5200   	}
;;;5201   else 
;;;5202   	{
;;;5203   	if((RELE_VENT_LOGIC==0)||(RELE_VENT_LOGIC==1))
;;;5204   		{
;;;5205   		if(vent_stat) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_VENT,1);
;;;5206   		else SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_VENT,1);
;;;5207   		}
;;;5208   	else 
;;;5209   		{
;;;5210   		if((avar_ind_stat&0x00000004)) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_VENT,1);
;;;5211        	else SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_VENT,1);
;;;5212   		}
;;;5213   	}
;;;5214   
;;;5215   #endif
;;;5216   
;;;5217   #ifdef UKU_220_IPS_TERMOKOMPENSAT
;;;5218   
;;;5219   if((AUSW_MAIN==22010)||(AUSW_MAIN==22011))
00377e  4882              LDR      r0,|L1.14728|
;;;5220   	{
;;;5221   	#ifndef UKU2071x
;;;5222   	if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_AV_NET))
;;;5223   		{
;;;5224   		if(mess_data[1]==0) SET_REG(LPC_GPIO3->FIOSET,1,25,1);
;;;5225   		else SET_REG(LPC_GPIO3->FIOCLR,1,25,1);
;;;5226   		}
;;;5227   	else	if(!(avar_ind_stat&0x00000001)) SET_REG(LPC_GPIO3->FIOSET,1,25,1);
;;;5228   	else SET_REG(LPC_GPIO3->FIOCLR,1,25,1);
;;;5229   	#endif
;;;5230   
;;;5231   	#ifdef UKU2071x
;;;5232   		#ifndef APSENERGIA
;;;5233   		if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_AV_NET))
;;;5234   			{
;;;5235   			if(mess_data[1]==0) SET_REG(LPC_GPIO3->FIOCLR,1,25,1);
;;;5236   			else SET_REG(LPC_GPIO3->FIOSET,1,25,1);
;;;5237   			}
;;;5238   		else	if(!(avar_ind_stat&0x00000001)) SET_REG(LPC_GPIO3->FIOCLR,1,25,1);
;;;5239   		else SET_REG(LPC_GPIO3->FIOSET,1,25,1);
;;;5240   		#endif
;;;5241   
;;;5242   		#ifdef APSENERGIA
;;;5243   		if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_AV_NET))
;;;5244   			{
;;;5245   			if(mess_data[1]==0) SET_REG(LPC_GPIO3->FIOCLR,1,25,1);
;;;5246   			else SET_REG(LPC_GPIO3->FIOSET,1,25,1);
;;;5247   			}
;;;5248   		else if((mess_find_unvol(MESS2RELE_HNDL))&& (mess_data[0]==PARAM_RELE_BAT_IS_DISCHARGED))  SET_REG(LPC_GPIO3->FIOCLR,1,25,1);
;;;5249   		else SET_REG(LPC_GPIO3->FIOSET,1,25,1);
;;;5250   		#endif
;;;5251   
;;;5252   	#endif
;;;5253   	if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_AV_BPS))
;;;5254   		{
;;;5255   		if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,7,1);
;;;5256   		else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOSET,1,7,1);
;;;5257   	     }
;;;5258   	else 
;;;5259   		{
;;;5260   		if(!(avar_ind_stat&0x100007f8)) SET_REG(LPC_GPIO0->FIOCLR,1,7,1);
;;;5261   	     else SET_REG(LPC_GPIO0->FIOSET,1,7,1);
;;;5262   		} 
;;;5263   
;;;5264   	//Реле аварий батарей
;;;5265   	#ifndef APSENERGIA
;;;5266   	if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_AV_BAT))
;;;5267   		{
;;;5268   		if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,4,1);
;;;5269   		else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOSET,1,4,1);
;;;5270        	}
;;;5271   	else 
;;;5272   		{
;;;5273   		if(!(ips_bat_av_stat)) SET_REG(LPC_GPIO0->FIOCLR,1,4,1);
003780  f8df8208          LDR      r8,|L1.14732|
003784  4f82              LDR      r7,|L1.14736|
003786  8800              LDRH     r0,[r0,#0]            ;5219  ; AUSW_MAIN
003788  f5a041aa          SUB      r1,r0,#0x5500         ;5219
00378c  39fa              SUBS     r1,r1,#0xfa           ;5219
00378e  d001              BEQ      |L1.14228|
003790  1e49              SUBS     r1,r1,#1              ;5219
003792  d16f              BNE      |L1.14452|
                  |L1.14228|
003794  20d2              MOVS     r0,#0xd2              ;5233
003796  f7fffffe          BL       mess_find_unvol
00379a  b110              CBZ      r0,|L1.14242|
00379c  6828              LDR      r0,[r5,#0]            ;5233  ; mess_data
00379e  2866              CMP      r0,#0x66              ;5233
0037a0  d043              BEQ      |L1.14378|
                  |L1.14242|
0037a2  6830              LDR      r0,[r6,#0]            ;5238  ; avar_ind_stat
0037a4  07c0              LSLS     r0,r0,#31             ;5238
0037a6  d04d              BEQ      |L1.14404|
0037a8  6fa0              LDR      r0,[r4,#0x78]         ;5239
0037aa  f0407000          ORR      r0,r0,#0x2000000      ;5239
0037ae  67a0              STR      r0,[r4,#0x78]         ;5239
                  |L1.14256|
0037b0  20d2              MOVS     r0,#0xd2              ;5253
0037b2  f7fffffe          BL       mess_find_unvol
0037b6  b110              CBZ      r0,|L1.14270|
0037b8  6828              LDR      r0,[r5,#0]            ;5253  ; mess_data
0037ba  286a              CMP      r0,#0x6a              ;5253
0037bc  d047              BEQ      |L1.14414|
                  |L1.14270|
0037be  6830              LDR      r0,[r6,#0]            ;5260  ; avar_ind_stat
0037c0  4238              TST      r0,r7                 ;5260
0037c2  d052              BEQ      |L1.14442|
0037c4  69a0              LDR      r0,[r4,#0x18]         ;5261
0037c6  f0400080          ORR      r0,r0,#0x80           ;5261
0037ca  61a0              STR      r0,[r4,#0x18]         ;5261
                  |L1.14284|
0037cc  20d2              MOVS     r0,#0xd2              ;5266
0037ce  f7fffffe          BL       mess_find_unvol
0037d2  b110              CBZ      r0,|L1.14298|
0037d4  6828              LDR      r0,[r5,#0]            ;5266  ; mess_data
0037d6  2867              CMP      r0,#0x67              ;5266
0037d8  d04d              BEQ      |L1.14454|
                  |L1.14298|
0037da  f8980000          LDRB     r0,[r8,#0]  ; ips_bat_av_stat
0037de  b380              CBZ      r0,|L1.14402|
;;;5274        	else SET_REG(LPC_GPIO0->FIOSET,1,4,1);
0037e0  69a0              LDR      r0,[r4,#0x18]
0037e2  f0400010          ORR      r0,r0,#0x10
0037e6  61a0              STR      r0,[r4,#0x18]
0037e8  e1f1              B        |L1.15310|
                  |L1.14314|
0037ea  6868              LDR      r0,[r5,#4]            ;4774  ; mess_data
0037ec  2801              CMP      r0,#1                 ;4774
0037ee  d006              BEQ      |L1.14334|
0037f0  2800              CMP      r0,#0                 ;4775
0037f2  d1b5              BNE      |L1.14176|
0037f4  69e0              LDR      r0,[r4,#0x1c]         ;4775
0037f6  f0405000          ORR      r0,r0,#0x20000000     ;4775
0037fa  61e0              STR      r0,[r4,#0x1c]         ;4775
0037fc  e7b0              B        |L1.14176|
                  |L1.14334|
0037fe  69a0              LDR      r0,[r4,#0x18]         ;4774
003800  f0405000          ORR      r0,r0,#0x20000000     ;4774
003804  61a0              STR      r0,[r4,#0x18]         ;4774
003806  e7ab              B        |L1.14176|
                  |L1.14344|
003808  6868              LDR      r0,[r5,#4]            ;4794  ; mess_data
00380a  b120              CBZ      r0,|L1.14358|
00380c  6fa0              LDR      r0,[r4,#0x78]         ;4795
00380e  f0407000          ORR      r0,r0,#0x2000000      ;4795
003812  67a0              STR      r0,[r4,#0x78]         ;4795
003814  e7b3              B        |L1.14206|
                  |L1.14358|
003816  6fe0              LDR      r0,[r4,#0x7c]         ;4794
003818  f0407000          ORR      r0,r0,#0x2000000      ;4794
00381c  67e0              STR      r0,[r4,#0x7c]         ;4794
00381e  e7ae              B        |L1.14206|
                  |L1.14368|
003820  6fe0              LDR      r0,[r4,#0x7c]         ;4797
003822  f0407000          ORR      r0,r0,#0x2000000      ;4797
003826  67e0              STR      r0,[r4,#0x7c]         ;4797
003828  e7a9              B        |L1.14206|
                  |L1.14378|
00382a  6868              LDR      r0,[r5,#4]            ;5235  ; mess_data
00382c  b120              CBZ      r0,|L1.14392|
00382e  6fa0              LDR      r0,[r4,#0x78]         ;5236
003830  f0407000          ORR      r0,r0,#0x2000000      ;5236
003834  67a0              STR      r0,[r4,#0x78]         ;5236
003836  e7bb              B        |L1.14256|
                  |L1.14392|
003838  6fe0              LDR      r0,[r4,#0x7c]         ;5235
00383a  f0407000          ORR      r0,r0,#0x2000000      ;5235
00383e  67e0              STR      r0,[r4,#0x7c]         ;5235
003840  e7b6              B        |L1.14256|
                  |L1.14402|
003842  e027              B        |L1.14484|
                  |L1.14404|
003844  6fe0              LDR      r0,[r4,#0x7c]         ;5238
003846  f0407000          ORR      r0,r0,#0x2000000      ;5238
00384a  67e0              STR      r0,[r4,#0x7c]         ;5238
00384c  e7b0              B        |L1.14256|
                  |L1.14414|
00384e  6868              LDR      r0,[r5,#4]            ;5255  ; mess_data
003850  b130              CBZ      r0,|L1.14432|
003852  2801              CMP      r0,#1                 ;5256
003854  d1ba              BNE      |L1.14284|
003856  69a0              LDR      r0,[r4,#0x18]         ;5256
003858  f0400080          ORR      r0,r0,#0x80           ;5256
00385c  61a0              STR      r0,[r4,#0x18]         ;5256
00385e  e7b5              B        |L1.14284|
                  |L1.14432|
003860  69e0              LDR      r0,[r4,#0x1c]         ;5255
003862  f0400080          ORR      r0,r0,#0x80           ;5255
003866  61e0              STR      r0,[r4,#0x1c]         ;5255
003868  e7b0              B        |L1.14284|
                  |L1.14442|
00386a  69e0              LDR      r0,[r4,#0x1c]         ;5260
00386c  f0400080          ORR      r0,r0,#0x80           ;5260
003870  61e0              STR      r0,[r4,#0x1c]         ;5260
003872  e7ab              B        |L1.14284|
                  |L1.14452|
003874  e013              B        |L1.14494|
                  |L1.14454|
003876  6868              LDR      r0,[r5,#4]            ;5268  ; mess_data
003878  b110              CBZ      r0,|L1.14464|
00387a  2801              CMP      r0,#1                 ;5269
00387c  d005              BEQ      |L1.14474|
00387e  e1a6              B        |L1.15310|
                  |L1.14464|
003880  69e0              LDR      r0,[r4,#0x1c]         ;5268
003882  f0400010          ORR      r0,r0,#0x10           ;5268
003886  61e0              STR      r0,[r4,#0x1c]         ;5268
003888  e1a1              B        |L1.15310|
                  |L1.14474|
00388a  69a0              LDR      r0,[r4,#0x18]         ;5269
00388c  f0400010          ORR      r0,r0,#0x10           ;5269
003890  61a0              STR      r0,[r4,#0x18]         ;5269
003892  e19c              B        |L1.15310|
                  |L1.14484|
003894  69e0              LDR      r0,[r4,#0x1c]         ;5273
003896  f0400010          ORR      r0,r0,#0x10           ;5273
00389a  61e0              STR      r0,[r4,#0x1c]         ;5273
00389c  e197              B        |L1.15310|
                  |L1.14494|
;;;5275   		}
;;;5276   	#endif
;;;5277   	#ifdef APSENERGIA
;;;5278   	if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_AV_BAT))
;;;5279   		{
;;;5280   		if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,4,1);
;;;5281   		else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOSET,1,4,1);
;;;5282        	}
;;;5283   	else 
;;;5284   		{
;;;5285   		if(!apsEnergiaStat)SET_REG(LPC_GPIO0->FIOSET,1,4,1);
;;;5286   		else SET_REG(LPC_GPIO0->FIOCLR,1,4,1);
;;;5287   		}
;;;5288   	#endif
;;;5289   	}
;;;5290   
;;;5291   else	if(AUSW_MAIN==22023)
00389e  f5a041ac          SUB      r1,r0,#0x5600
0038a2  3907              SUBS     r1,#7
0038a4  d176              BNE      |L1.14740|
;;;5292   	{
;;;5293   
;;;5294   	//Реле аварий батарей
;;;5295   	if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_AV_BAT))
0038a6  20d2              MOVS     r0,#0xd2
0038a8  f7fffffe          BL       mess_find_unvol
0038ac  b110              CBZ      r0,|L1.14516|
0038ae  6828              LDR      r0,[r5,#0]  ; mess_data
0038b0  2867              CMP      r0,#0x67
0038b2  d023              BEQ      |L1.14588|
                  |L1.14516|
;;;5296   		{
;;;5297   		if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,4,1);
;;;5298   		else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOSET,1,4,1);
;;;5299        	}
;;;5300   	else 
;;;5301   		{
;;;5302   		if(!(ips_bat_av_stat)) SET_REG(LPC_GPIO0->FIOCLR,1,4,1);
0038b4  f8980000          LDRB     r0,[r8,#0]  ; ips_bat_av_stat
0038b8  b370              CBZ      r0,|L1.14616|
;;;5303        	else SET_REG(LPC_GPIO0->FIOSET,1,4,1);
0038ba  69a0              LDR      r0,[r4,#0x18]
0038bc  f0400010          ORR      r0,r0,#0x10
0038c0  61a0              STR      r0,[r4,#0x18]
                  |L1.14530|
;;;5304   		} 
;;;5305   
;;;5306   
;;;5307   	//Реле аварии сети ТУТ КАКАЯ то ЛАЖА с аварией сети. Обращение к разным портам
;;;5308   	#ifndef UKU2071x
;;;5309   	if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_AV_NET))
;;;5310   		{
;;;5311   		if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_NET,1);
;;;5312   		else SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_NET,1);
;;;5313   		}
;;;5314   	else	if(!(avar_ind_stat&0x00000001)) SET_REG(LPC_GPIO1->FIOCLR,1,SHIFT_REL_AV_NET,1);
;;;5315   	else SET_REG(LPC_GPIO3->FIOCLR,1,SHIFT_REL_AV_NET,1);
;;;5316   	#endif
;;;5317   	#ifdef UKU2071x
;;;5318   	if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_AV_NET))
0038c2  20d2              MOVS     r0,#0xd2
0038c4  f7fffffe          BL       mess_find_unvol
0038c8  b110              CBZ      r0,|L1.14544|
0038ca  6828              LDR      r0,[r5,#0]  ; mess_data
0038cc  2866              CMP      r0,#0x66
0038ce  d028              BEQ      |L1.14626|
                  |L1.14544|
;;;5319   		{
;;;5320   		if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_NET,1);
;;;5321   		else SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_NET,1);
;;;5322   		}
;;;5323   	else	if(!(avar_ind_stat&0x00000001)) SET_REG(LPC_GPIO1->FIOSET,1,SHIFT_REL_AV_NET,1);
0038d0  6830              LDR      r0,[r6,#0]  ; avar_ind_stat
0038d2  07c0              LSLS     r0,r0,#31
0038d4  d031              BEQ      |L1.14650|
;;;5324   	else SET_REG(LPC_GPIO3->FIOSET,1,SHIFT_REL_AV_NET,1);
0038d6  6fa0              LDR      r0,[r4,#0x78]
0038d8  f0407000          ORR      r0,r0,#0x2000000
0038dc  67a0              STR      r0,[r4,#0x78]
                  |L1.14558|
;;;5325   	#endif
;;;5326   
;;;5327   	if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_AV_BPS))
0038de  20d2              MOVS     r0,#0xd2
0038e0  f7fffffe          BL       mess_find_unvol
0038e4  b110              CBZ      r0,|L1.14572|
0038e6  6828              LDR      r0,[r5,#0]  ; mess_data
0038e8  286a              CMP      r0,#0x6a
0038ea  d02b              BEQ      |L1.14660|
                  |L1.14572|
;;;5328   		{
;;;5329   		if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,7,1);
;;;5330   		else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOSET,1,7,1);
;;;5331   	     }
;;;5332   	else 
;;;5333   		{
;;;5334   		if(!(avar_ind_stat&0x100007f8)) SET_REG(LPC_GPIO0->FIOCLR,1,7,1);
0038ec  6830              LDR      r0,[r6,#0]  ; avar_ind_stat
0038ee  4238              TST      r0,r7
0038f0  d056              BEQ      |L1.14752|
;;;5335   	     else SET_REG(LPC_GPIO0->FIOSET,1,7,1);
0038f2  69a0              LDR      r0,[r4,#0x18]
0038f4  f0400080          ORR      r0,r0,#0x80
0038f8  61a0              STR      r0,[r4,#0x18]
0038fa  e168              B        |L1.15310|
                  |L1.14588|
0038fc  6868              LDR      r0,[r5,#4]            ;5297  ; mess_data
0038fe  b130              CBZ      r0,|L1.14606|
003900  2801              CMP      r0,#1                 ;5298
003902  d1de              BNE      |L1.14530|
003904  69a0              LDR      r0,[r4,#0x18]         ;5298
003906  f0400010          ORR      r0,r0,#0x10           ;5298
00390a  61a0              STR      r0,[r4,#0x18]         ;5298
00390c  e7d9              B        |L1.14530|
                  |L1.14606|
00390e  69e0              LDR      r0,[r4,#0x1c]         ;5297
003910  f0400010          ORR      r0,r0,#0x10           ;5297
003914  61e0              STR      r0,[r4,#0x1c]         ;5297
003916  e7d4              B        |L1.14530|
                  |L1.14616|
003918  69e0              LDR      r0,[r4,#0x1c]         ;5302
00391a  f0400010          ORR      r0,r0,#0x10           ;5302
00391e  61e0              STR      r0,[r4,#0x1c]         ;5302
003920  e7cf              B        |L1.14530|
                  |L1.14626|
003922  6868              LDR      r0,[r5,#4]            ;5320  ; mess_data
003924  b120              CBZ      r0,|L1.14640|
003926  69e0              LDR      r0,[r4,#0x1c]         ;5321
003928  f0407000          ORR      r0,r0,#0x2000000      ;5321
00392c  61e0              STR      r0,[r4,#0x1c]         ;5321
00392e  e7d6              B        |L1.14558|
                  |L1.14640|
003930  69a0              LDR      r0,[r4,#0x18]         ;5320
003932  f0407000          ORR      r0,r0,#0x2000000      ;5320
003936  61a0              STR      r0,[r4,#0x18]         ;5320
003938  e7d1              B        |L1.14558|
                  |L1.14650|
00393a  6ba0              LDR      r0,[r4,#0x38]         ;5323
00393c  f0407000          ORR      r0,r0,#0x2000000      ;5323
003940  63a0              STR      r0,[r4,#0x38]         ;5323
003942  e7cc              B        |L1.14558|
                  |L1.14660|
003944  6868              LDR      r0,[r5,#4]            ;5329  ; mess_data
003946  b110              CBZ      r0,|L1.14670|
003948  2801              CMP      r0,#1                 ;5330
00394a  d024              BEQ      |L1.14742|
00394c  e13f              B        |L1.15310|
                  |L1.14670|
00394e  69e0              LDR      r0,[r4,#0x1c]         ;5329
003950  f0400080          ORR      r0,r0,#0x80           ;5329
003954  61e0              STR      r0,[r4,#0x1c]         ;5329
003956  e13a              B        |L1.15310|
                  |L1.14680|
                          DCD      bps
                  |L1.14684|
                          DCD      NUMIST
                  |L1.14688|
                          DCD      ||area_number.25||+0x80
                  |L1.14692|
                          DCD      0x4002c000
                  |L1.14696|
                          DCD      0xfff000ff
                  |L1.14700|
                          DCD      0x2009c000
                  |L1.14704|
                          DCD      bat
                  |L1.14708|
                          DCD      tbatdisable_stat
                  |L1.14712|
                          DCD      tbatdisable_cmnd
                  |L1.14716|
                          DCD      main_1Hz_cnt
                  |L1.14720|
                          DCD      mess_data
                  |L1.14724|
                          DCD      avar_ind_stat
                  |L1.14728|
                          DCD      AUSW_MAIN
                  |L1.14732|
                          DCD      ips_bat_av_stat
                  |L1.14736|
                          DCD      0x100007f8
                  |L1.14740|
003994  e009              B        |L1.14762|
                  |L1.14742|
003996  69a0              LDR      r0,[r4,#0x18]         ;5330
003998  f0400080          ORR      r0,r0,#0x80           ;5330
00399c  61a0              STR      r0,[r4,#0x18]         ;5330
00399e  e116              B        |L1.15310|
                  |L1.14752|
0039a0  69e0              LDR      r0,[r4,#0x1c]         ;5334
0039a2  f0400080          ORR      r0,r0,#0x80           ;5334
0039a6  61e0              STR      r0,[r4,#0x1c]         ;5334
0039a8  e111              B        |L1.15310|
                  |L1.14762|
;;;5336   		} 
;;;5337   	}
;;;5338   else	if((AUSW_MAIN==22043)||(AUSW_MAIN==22044))
0039aa  f5a041ac          SUB      r1,r0,#0x5600
0039ae  391b              SUBS     r1,r1,#0x1b
0039b0  d001              BEQ      |L1.14774|
0039b2  1e49              SUBS     r1,r1,#1
0039b4  d170              BNE      |L1.15000|
                  |L1.14774|
;;;5339   	{
;;;5340   	//Реле аварий батарей
;;;5341   	if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_AV_BAT))
0039b6  20d2              MOVS     r0,#0xd2
0039b8  f7fffffe          BL       mess_find_unvol
0039bc  b110              CBZ      r0,|L1.14788|
0039be  6828              LDR      r0,[r5,#0]  ; mess_data
0039c0  2867              CMP      r0,#0x67
0039c2  d031              BEQ      |L1.14888|
                  |L1.14788|
;;;5342   		{
;;;5343   		if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,4,1);
;;;5344   		else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOSET,1,4,1);
;;;5345        	}
;;;5346   	else 
;;;5347   		{
;;;5348   		if(!(ips_bat_av_stat)) SET_REG(LPC_GPIO0->FIOCLR,1,4,1);
0039c4  f8980000          LDRB     r0,[r8,#0]  ; ips_bat_av_stat
0039c8  b3b8              CBZ      r0,|L1.14906|
;;;5349        	else SET_REG(LPC_GPIO0->FIOSET,1,4,1);
0039ca  69a0              LDR      r0,[r4,#0x18]
0039cc  f0400010          ORR      r0,r0,#0x10
0039d0  61a0              STR      r0,[r4,#0x18]
                  |L1.14802|
;;;5350   		} 
;;;5351   	//Реле аварии сети ТУТ КАКАЯ то ЛАЖА с аварией сети. Обращение к разным портам
;;;5352   	#ifndef UKU2071x 
;;;5353   	if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_AV_NET))
;;;5354   		{
;;;5355   		if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_NET,1);
;;;5356   		else SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_NET,1);
;;;5357   		}
;;;5358   	else	if(!(avar_ind_stat&0x00000001)) SET_REG(LPC_GPIO1->FIOCLR,1,SHIFT_REL_AV_NET,1);
;;;5359   	else SET_REG(LPC_GPIO3->FIOCLR,1,SHIFT_REL_AV_NET,1);
;;;5360   	#endif
;;;5361   	#ifdef UKU2071x 
;;;5362   	if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_AV_NET))
0039d2  20d2              MOVS     r0,#0xd2
0039d4  f7fffffe          BL       mess_find_unvol
0039d8  b110              CBZ      r0,|L1.14816|
0039da  6828              LDR      r0,[r5,#0]  ; mess_data
0039dc  2866              CMP      r0,#0x66
0039de  d037              BEQ      |L1.14928|
                  |L1.14816|
;;;5363   		{
;;;5364   		if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_NET,1);
;;;5365   		else SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_NET,1);
;;;5366   		}
;;;5367   	else	if(!(avar_ind_stat&0x00000001)) SET_REG(LPC_GPIO1->FIOSET,1,SHIFT_REL_AV_NET,1);
0039e0  6830              LDR      r0,[r6,#0]  ; avar_ind_stat
0039e2  07c0              LSLS     r0,r0,#31
0039e4  d040              BEQ      |L1.14952|
;;;5368   	else SET_REG(LPC_GPIO3->FIOSET,1,SHIFT_REL_AV_NET,1);
0039e6  6fa0              LDR      r0,[r4,#0x78]
0039e8  f0407000          ORR      r0,r0,#0x2000000
0039ec  67a0              STR      r0,[r4,#0x78]
                  |L1.14830|
;;;5369   	#endif
;;;5370   
;;;5371   	if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_AV_BPS))
0039ee  20d2              MOVS     r0,#0xd2
0039f0  f7fffffe          BL       mess_find_unvol
0039f4  b110              CBZ      r0,|L1.14844|
0039f6  6828              LDR      r0,[r5,#0]  ; mess_data
0039f8  286a              CMP      r0,#0x6a
0039fa  d03a              BEQ      |L1.14962|
                  |L1.14844|
;;;5372   		{
;;;5373   		if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,7,1);
;;;5374   		else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOSET,1,7,1);
;;;5375   	     }
;;;5376   	else 
;;;5377   		{
;;;5378   		if(!(avar_ind_stat&0x100007f8)) SET_REG(LPC_GPIO0->FIOCLR,1,7,1);
0039fc  6830              LDR      r0,[r6,#0]  ; avar_ind_stat
0039fe  4238              TST      r0,r7
003a00  d045              BEQ      |L1.14990|
;;;5379   	     else SET_REG(LPC_GPIO0->FIOSET,1,7,1);
003a02  69a0              LDR      r0,[r4,#0x18]
003a04  f0400080          ORR      r0,r0,#0x80
003a08  61a0              STR      r0,[r4,#0x18]
                  |L1.14858|
;;;5380   		}
;;;5381   	//Реле аварии БПС
;;;5382   	if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_AV_BPS))
003a0a  20d2              MOVS     r0,#0xd2
003a0c  f7fffffe          BL       mess_find_unvol
003a10  b110              CBZ      r0,|L1.14872|
003a12  6828              LDR      r0,[r5,#0]  ; mess_data
003a14  286a              CMP      r0,#0x6a
003a16  d040              BEQ      |L1.15002|
                  |L1.14872|
;;;5383   		{
;;;5384   		if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_BPS,1);
;;;5385   		else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_BPS,1);
;;;5386        	}
;;;5387   	else 
;;;5388   		{
;;;5389   		if(!(avar_ind_stat&0x100007f8)) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_BPS,1);
003a18  6830              LDR      r0,[r6,#0]  ; avar_ind_stat
003a1a  4238              TST      r0,r7
003a1c  d04c              BEQ      |L1.15032|
;;;5390        	else SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_BPS,1);
003a1e  69a0              LDR      r0,[r4,#0x18]
003a20  f0400020          ORR      r0,r0,#0x20
003a24  61a0              STR      r0,[r4,#0x18]
003a26  e0d2              B        |L1.15310|
                  |L1.14888|
003a28  6868              LDR      r0,[r5,#4]            ;5343  ; mess_data
003a2a  b138              CBZ      r0,|L1.14908|
003a2c  2801              CMP      r0,#1                 ;5344
003a2e  d1d0              BNE      |L1.14802|
003a30  69a0              LDR      r0,[r4,#0x18]         ;5344
003a32  f0400010          ORR      r0,r0,#0x10           ;5344
003a36  61a0              STR      r0,[r4,#0x18]         ;5344
003a38  e7cb              B        |L1.14802|
                  |L1.14906|
003a3a  e004              B        |L1.14918|
                  |L1.14908|
003a3c  69e0              LDR      r0,[r4,#0x1c]         ;5343
003a3e  f0400010          ORR      r0,r0,#0x10           ;5343
003a42  61e0              STR      r0,[r4,#0x1c]         ;5343
003a44  e7c5              B        |L1.14802|
                  |L1.14918|
003a46  69e0              LDR      r0,[r4,#0x1c]         ;5348
003a48  f0400010          ORR      r0,r0,#0x10           ;5348
003a4c  61e0              STR      r0,[r4,#0x1c]         ;5348
003a4e  e7c0              B        |L1.14802|
                  |L1.14928|
003a50  6868              LDR      r0,[r5,#4]            ;5364  ; mess_data
003a52  b120              CBZ      r0,|L1.14942|
003a54  69e0              LDR      r0,[r4,#0x1c]         ;5365
003a56  f0407000          ORR      r0,r0,#0x2000000      ;5365
003a5a  61e0              STR      r0,[r4,#0x1c]         ;5365
003a5c  e7c7              B        |L1.14830|
                  |L1.14942|
003a5e  69a0              LDR      r0,[r4,#0x18]         ;5364
003a60  f0407000          ORR      r0,r0,#0x2000000      ;5364
003a64  61a0              STR      r0,[r4,#0x18]         ;5364
003a66  e7c2              B        |L1.14830|
                  |L1.14952|
003a68  6ba0              LDR      r0,[r4,#0x38]         ;5367
003a6a  f0407000          ORR      r0,r0,#0x2000000      ;5367
003a6e  63a0              STR      r0,[r4,#0x38]         ;5367
003a70  e7bd              B        |L1.14830|
                  |L1.14962|
003a72  6868              LDR      r0,[r5,#4]            ;5373  ; mess_data
003a74  b130              CBZ      r0,|L1.14980|
003a76  2801              CMP      r0,#1                 ;5374
003a78  d1c7              BNE      |L1.14858|
003a7a  69a0              LDR      r0,[r4,#0x18]         ;5374
003a7c  f0400080          ORR      r0,r0,#0x80           ;5374
003a80  61a0              STR      r0,[r4,#0x18]         ;5374
003a82  e7c2              B        |L1.14858|
                  |L1.14980|
003a84  69e0              LDR      r0,[r4,#0x1c]         ;5373
003a86  f0400080          ORR      r0,r0,#0x80           ;5373
003a8a  61e0              STR      r0,[r4,#0x1c]         ;5373
003a8c  e7bd              B        |L1.14858|
                  |L1.14990|
003a8e  69e0              LDR      r0,[r4,#0x1c]         ;5378
003a90  f0400080          ORR      r0,r0,#0x80           ;5378
003a94  61e0              STR      r0,[r4,#0x1c]         ;5378
003a96  e7b8              B        |L1.14858|
                  |L1.15000|
003a98  e013              B        |L1.15042|
                  |L1.15002|
003a9a  6868              LDR      r0,[r5,#4]            ;5384  ; mess_data
003a9c  b110              CBZ      r0,|L1.15012|
003a9e  2801              CMP      r0,#1                 ;5385
003aa0  d005              BEQ      |L1.15022|
003aa2  e094              B        |L1.15310|
                  |L1.15012|
003aa4  69e0              LDR      r0,[r4,#0x1c]         ;5384
003aa6  f0400020          ORR      r0,r0,#0x20           ;5384
003aaa  61e0              STR      r0,[r4,#0x1c]         ;5384
003aac  e08f              B        |L1.15310|
                  |L1.15022|
003aae  69a0              LDR      r0,[r4,#0x18]         ;5385
003ab0  f0400020          ORR      r0,r0,#0x20           ;5385
003ab4  61a0              STR      r0,[r4,#0x18]         ;5385
003ab6  e08a              B        |L1.15310|
                  |L1.15032|
003ab8  69e0              LDR      r0,[r4,#0x1c]         ;5389
003aba  f0400020          ORR      r0,r0,#0x20           ;5389
003abe  61e0              STR      r0,[r4,#0x1c]         ;5389
003ac0  e085              B        |L1.15310|
                  |L1.15042|
;;;5391   		} 
;;;5392   	}
;;;5393   else	if((AUSW_MAIN==22033)||(AUSW_MAIN==22018))
003ac2  f5a041ac          SUB      r1,r0,#0x5600
003ac6  3911              SUBS     r1,r1,#0x11
003ac8  d001              BEQ      |L1.15054|
003aca  310f              ADDS     r1,r1,#0xf
003acc  d163              BNE      |L1.15254|
                  |L1.15054|
;;;5394   	{
;;;5395   	#ifndef UKU2071x 
;;;5396   	if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_AV_NET))
;;;5397   		{
;;;5398   		if(mess_data[1]==0) SET_REG(LPC_GPIO3->FIOSET,1,25,1);
;;;5399   		else SET_REG(LPC_GPIO3->FIOCLR,1,25,1);
;;;5400   		}
;;;5401   	else	if(!(avar_ind_stat&0x00000001)) SET_REG(LPC_GPIO3->FIOSET,1,25,1);
;;;5402   	else SET_REG(LPC_GPIO3->FIOCLR,1,25,1);
;;;5403   	#endif
;;;5404   	#ifdef UKU2071x 
;;;5405   	if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_AV_NET))
003ace  20d2              MOVS     r0,#0xd2
003ad0  f7fffffe          BL       mess_find_unvol
003ad4  b110              CBZ      r0,|L1.15068|
003ad6  6828              LDR      r0,[r5,#0]  ; mess_data
003ad8  2866              CMP      r0,#0x66
003ada  d023              BEQ      |L1.15140|
                  |L1.15068|
;;;5406   		{
;;;5407   		if(mess_data[1]==0) SET_REG(LPC_GPIO3->FIOCLR,1,25,1);
;;;5408   		else SET_REG(LPC_GPIO3->FIOSET,1,25,1);
;;;5409   		}
;;;5410   	else	if(!(avar_ind_stat&0x00000001)) SET_REG(LPC_GPIO3->FIOCLR,1,25,1);
003adc  6830              LDR      r0,[r6,#0]  ; avar_ind_stat
003ade  07c0              LSLS     r0,r0,#31
003ae0  d02c              BEQ      |L1.15164|
;;;5411   	else SET_REG(LPC_GPIO3->FIOSET,1,25,1);
003ae2  6fa0              LDR      r0,[r4,#0x78]
003ae4  f0407000          ORR      r0,r0,#0x2000000
003ae8  67a0              STR      r0,[r4,#0x78]
                  |L1.15082|
;;;5412   	#endif
;;;5413   	
;;;5414   	
;;;5415   	if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_AV_BPS))
003aea  20d2              MOVS     r0,#0xd2
003aec  f7fffffe          BL       mess_find_unvol
003af0  b110              CBZ      r0,|L1.15096|
003af2  6828              LDR      r0,[r5,#0]  ; mess_data
003af4  286a              CMP      r0,#0x6a
003af6  d026              BEQ      |L1.15174|
                  |L1.15096|
;;;5416   		{
;;;5417   		if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,7,1);
;;;5418   		else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOSET,1,7,1);
;;;5419   	     }
;;;5420   	else 
;;;5421   		{
;;;5422   		if(!(avar_ind_stat&0x100007f8)) SET_REG(LPC_GPIO0->FIOCLR,1,7,1);
003af8  6830              LDR      r0,[r6,#0]  ; avar_ind_stat
003afa  4238              TST      r0,r7
003afc  d031              BEQ      |L1.15202|
;;;5423   	     else SET_REG(LPC_GPIO0->FIOSET,1,7,1);
003afe  69a0              LDR      r0,[r4,#0x18]
003b00  f0400080          ORR      r0,r0,#0x80
003b04  61a0              STR      r0,[r4,#0x18]
                  |L1.15110|
;;;5424   		} 
;;;5425   
;;;5426   	//Реле аварий батарей
;;;5427   	if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_AV_BAT))
003b06  20d2              MOVS     r0,#0xd2
003b08  f7fffffe          BL       mess_find_unvol
003b0c  b110              CBZ      r0,|L1.15124|
003b0e  6828              LDR      r0,[r5,#0]  ; mess_data
003b10  2867              CMP      r0,#0x67
003b12  d02b              BEQ      |L1.15212|
                  |L1.15124|
;;;5428   		{
;;;5429   		if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,4,1);
;;;5430   		else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOSET,1,4,1);
;;;5431        	}
;;;5432   	else 
;;;5433   		{
;;;5434   		if(!(ips_bat_av_stat)) SET_REG(LPC_GPIO0->FIOCLR,1,4,1);
003b14  f8980000          LDRB     r0,[r8,#0]  ; ips_bat_av_stat
003b18  b390              CBZ      r0,|L1.15232|
;;;5435        	else SET_REG(LPC_GPIO0->FIOSET,1,4,1);
003b1a  69a0              LDR      r0,[r4,#0x18]
003b1c  f0400010          ORR      r0,r0,#0x10
003b20  61a0              STR      r0,[r4,#0x18]
003b22  e054              B        |L1.15310|
                  |L1.15140|
003b24  6868              LDR      r0,[r5,#4]            ;5407  ; mess_data
003b26  b120              CBZ      r0,|L1.15154|
003b28  6fa0              LDR      r0,[r4,#0x78]         ;5408
003b2a  f0407000          ORR      r0,r0,#0x2000000      ;5408
003b2e  67a0              STR      r0,[r4,#0x78]         ;5408
003b30  e7db              B        |L1.15082|
                  |L1.15154|
003b32  6fe0              LDR      r0,[r4,#0x7c]         ;5407
003b34  f0407000          ORR      r0,r0,#0x2000000      ;5407
003b38  67e0              STR      r0,[r4,#0x7c]         ;5407
003b3a  e7d6              B        |L1.15082|
                  |L1.15164|
003b3c  6fe0              LDR      r0,[r4,#0x7c]         ;5410
003b3e  f0407000          ORR      r0,r0,#0x2000000      ;5410
003b42  67e0              STR      r0,[r4,#0x7c]         ;5410
003b44  e7d1              B        |L1.15082|
                  |L1.15174|
003b46  6868              LDR      r0,[r5,#4]            ;5417  ; mess_data
003b48  b130              CBZ      r0,|L1.15192|
003b4a  2801              CMP      r0,#1                 ;5418
003b4c  d1db              BNE      |L1.15110|
003b4e  69a0              LDR      r0,[r4,#0x18]         ;5418
003b50  f0400080          ORR      r0,r0,#0x80           ;5418
003b54  61a0              STR      r0,[r4,#0x18]         ;5418
003b56  e7d6              B        |L1.15110|
                  |L1.15192|
003b58  69e0              LDR      r0,[r4,#0x1c]         ;5417
003b5a  f0400080          ORR      r0,r0,#0x80           ;5417
003b5e  61e0              STR      r0,[r4,#0x1c]         ;5417
003b60  e7d1              B        |L1.15110|
                  |L1.15202|
003b62  69e0              LDR      r0,[r4,#0x1c]         ;5422
003b64  f0400080          ORR      r0,r0,#0x80           ;5422
003b68  61e0              STR      r0,[r4,#0x1c]         ;5422
003b6a  e7cc              B        |L1.15110|
                  |L1.15212|
003b6c  6868              LDR      r0,[r5,#4]            ;5429  ; mess_data
003b6e  b110              CBZ      r0,|L1.15222|
003b70  2801              CMP      r0,#1                 ;5430
003b72  d006              BEQ      |L1.15234|
003b74  e02b              B        |L1.15310|
                  |L1.15222|
003b76  69e0              LDR      r0,[r4,#0x1c]         ;5429
003b78  f0400010          ORR      r0,r0,#0x10           ;5429
003b7c  61e0              STR      r0,[r4,#0x1c]         ;5429
003b7e  e026              B        |L1.15310|
                  |L1.15232|
003b80  e004              B        |L1.15244|
                  |L1.15234|
003b82  69a0              LDR      r0,[r4,#0x18]         ;5430
003b84  f0400010          ORR      r0,r0,#0x10           ;5430
003b88  61a0              STR      r0,[r4,#0x18]         ;5430
003b8a  e020              B        |L1.15310|
                  |L1.15244|
003b8c  69e0              LDR      r0,[r4,#0x1c]         ;5434
003b8e  f0400010          ORR      r0,r0,#0x10           ;5434
003b92  61e0              STR      r0,[r4,#0x1c]         ;5434
003b94  e01b              B        |L1.15310|
                  |L1.15254|
;;;5436   		} 
;;;5437   	} 	 
;;;5438   else	
;;;5439   	{
;;;5440   	//Реле аварии сети ТУТ КАКАЯ то ЛАЖА с аварией сети. Обращение к разным портам
;;;5441   	#ifndef UKU2071x 
;;;5442   	if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_AV_NET))
;;;5443   		{
;;;5444   		if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_NET,1);
;;;5445   		else SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_NET,1);
;;;5446   		}
;;;5447   	else	if(!(avar_ind_stat&0x00000001)) SET_REG(LPC_GPIO1->FIOCLR,1,SHIFT_REL_AV_NET,1);
;;;5448   	else SET_REG(LPC_GPIO3->FIOCLR,1,SHIFT_REL_AV_NET,1);
;;;5449   	#endif
;;;5450   	#ifdef UKU2071x 
;;;5451   	if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_AV_NET))
003b96  20d2              MOVS     r0,#0xd2
003b98  f7fffffe          BL       mess_find_unvol
003b9c  b110              CBZ      r0,|L1.15268|
003b9e  6828              LDR      r0,[r5,#0]  ; mess_data
003ba0  2866              CMP      r0,#0x66
003ba2  d026              BEQ      |L1.15346|
                  |L1.15268|
;;;5452   		{
;;;5453   		if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_NET,1);
;;;5454   		else SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_NET,1);
;;;5455   		}
;;;5456   	else	if(!(avar_ind_stat&0x00000001)) SET_REG(LPC_GPIO1->FIOSET,1,SHIFT_REL_AV_NET,1);
003ba4  6830              LDR      r0,[r6,#0]  ; avar_ind_stat
003ba6  07c0              LSLS     r0,r0,#31
003ba8  d02f              BEQ      |L1.15370|
;;;5457   	else SET_REG(LPC_GPIO3->FIOSET,1,SHIFT_REL_AV_NET,1);
003baa  6fa0              LDR      r0,[r4,#0x78]
003bac  f0407000          ORR      r0,r0,#0x2000000
003bb0  67a0              STR      r0,[r4,#0x78]
                  |L1.15282|
;;;5458   	#endif
;;;5459   
;;;5460   	if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_AV_BPS))
003bb2  20d2              MOVS     r0,#0xd2
003bb4  f7fffffe          BL       mess_find_unvol
003bb8  b110              CBZ      r0,|L1.15296|
003bba  6828              LDR      r0,[r5,#0]  ; mess_data
003bbc  286a              CMP      r0,#0x6a
003bbe  d029              BEQ      |L1.15380|
                  |L1.15296|
;;;5461   		{
;;;5462   		if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_BPS,1);
;;;5463   		else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_BPS,1);
;;;5464        	}
;;;5465   	else 
;;;5466   		{
;;;5467   		if(!(avar_ind_stat&0x100007f8)) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_BPS,1);
003bc0  6830              LDR      r0,[r6,#0]  ; avar_ind_stat
003bc2  4238              TST      r0,r7
003bc4  d034              BEQ      |L1.15408|
;;;5468        	else SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_BPS,1);
003bc6  69a0              LDR      r0,[r4,#0x18]
003bc8  f0400020          ORR      r0,r0,#0x20
003bcc  61a0              STR      r0,[r4,#0x18]
                  |L1.15310|
;;;5469   		}
;;;5470   	}
;;;5471   //Дополнительное реле УКУ 
;;;5472   if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_EXT))	 
003bce  20d2              MOVS     r0,#0xd2
003bd0  f7fffffe          BL       mess_find_unvol
;;;5473   	{
;;;5474   	if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,9,1);
;;;5475   	else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOSET,1,9,1);
;;;5476   	}
;;;5477   else if(DOP_RELE_FUNC==0)	//если допреле подключено к ускоренному заряду
;;;5478   	{
;;;5479   	if((!speedChIsOn)&&(spc_stat!=spcVZ)&&(hv_vz_stat==hvsOFF)&&(sp_ch_stat==scsOFF)&&(vz1_stat==vz1sOFF)&&(vz2_stat==vz2sOFF)&&(load_U/10<UVENTOFF))   SET_REG(LPC_GPIO0->FIOCLR,1,9,1);
003bd4  f8df83f8          LDR      r8,|L1.16336|
003bd8  4ffe              LDR      r7,|L1.16340|
003bda  4eff              LDR      r6,|L1.16344|
003bdc  b110              CBZ      r0,|L1.15332|
003bde  6828              LDR      r0,[r5,#0]            ;5472  ; mess_data
003be0  2871              CMP      r0,#0x71              ;5472
003be2  d02a              BEQ      |L1.15418|
                  |L1.15332|
003be4  48fd              LDR      r0,|L1.16348|
003be6  f9b00000          LDRSH    r0,[r0,#0]            ;5477  ; DOP_RELE_FUNC
003bea  b380              CBZ      r0,|L1.15438|
;;;5480   	else if((speedChIsOn)||(spc_stat==spcVZ)||(hv_vz_stat!=hvsOFF)||(sp_ch_stat!=scsOFF)||(vz1_stat!=vz1sOFF)||(vz2_stat!=vz2sOFF)) SET_REG(LPC_GPIO0->FIOSET,1,9,1);
;;;5481   	}
;;;5482   else if(DOP_RELE_FUNC==1)  //если допреле подключено к индикации разряженной батареи
003bec  2801              CMP      r0,#1
003bee  d066              BEQ      |L1.15550|
003bf0  e070              B        |L1.15572|
                  |L1.15346|
003bf2  6868              LDR      r0,[r5,#4]            ;5453  ; mess_data
003bf4  b120              CBZ      r0,|L1.15360|
003bf6  69e0              LDR      r0,[r4,#0x1c]         ;5454
003bf8  f0407000          ORR      r0,r0,#0x2000000      ;5454
003bfc  61e0              STR      r0,[r4,#0x1c]         ;5454
003bfe  e7d8              B        |L1.15282|
                  |L1.15360|
003c00  69a0              LDR      r0,[r4,#0x18]         ;5453
003c02  f0407000          ORR      r0,r0,#0x2000000      ;5453
003c06  61a0              STR      r0,[r4,#0x18]         ;5453
003c08  e7d3              B        |L1.15282|
                  |L1.15370|
003c0a  6ba0              LDR      r0,[r4,#0x38]         ;5456
003c0c  f0407000          ORR      r0,r0,#0x2000000      ;5456
003c10  63a0              STR      r0,[r4,#0x38]         ;5456
003c12  e7ce              B        |L1.15282|
                  |L1.15380|
003c14  6868              LDR      r0,[r5,#4]            ;5462  ; mess_data
003c16  b130              CBZ      r0,|L1.15398|
003c18  2801              CMP      r0,#1                 ;5463
003c1a  d1d8              BNE      |L1.15310|
003c1c  69a0              LDR      r0,[r4,#0x18]         ;5463
003c1e  f0400020          ORR      r0,r0,#0x20           ;5463
003c22  61a0              STR      r0,[r4,#0x18]         ;5463
003c24  e7d3              B        |L1.15310|
                  |L1.15398|
003c26  69e0              LDR      r0,[r4,#0x1c]         ;5462
003c28  f0400020          ORR      r0,r0,#0x20           ;5462
003c2c  61e0              STR      r0,[r4,#0x1c]         ;5462
003c2e  e7ce              B        |L1.15310|
                  |L1.15408|
003c30  69e0              LDR      r0,[r4,#0x1c]         ;5467
003c32  f0400020          ORR      r0,r0,#0x20           ;5467
003c36  61e0              STR      r0,[r4,#0x1c]         ;5467
003c38  e7c9              B        |L1.15310|
                  |L1.15418|
003c3a  6868              LDR      r0,[r5,#4]            ;5474  ; mess_data
003c3c  b110              CBZ      r0,|L1.15428|
003c3e  2801              CMP      r0,#1                 ;5475
003c40  d006              BEQ      |L1.15440|
003c42  e047              B        |L1.15572|
                  |L1.15428|
003c44  69e0              LDR      r0,[r4,#0x1c]         ;5474
003c46  f4407000          ORR      r0,r0,#0x200          ;5474
003c4a  61e0              STR      r0,[r4,#0x1c]         ;5474
003c4c  e042              B        |L1.15572|
                  |L1.15438|
003c4e  e004              B        |L1.15450|
                  |L1.15440|
003c50  69a0              LDR      r0,[r4,#0x18]         ;5475
003c52  f4407000          ORR      r0,r0,#0x200          ;5475
003c56  61a0              STR      r0,[r4,#0x18]         ;5475
003c58  e03c              B        |L1.15572|
                  |L1.15450|
003c5a  48e1              LDR      r0,|L1.16352|
003c5c  49e1              LDR      r1,|L1.16356|
003c5e  f9b00000          LDRSH    r0,[r0,#0]            ;5479  ; speedChIsOn
003c62  b9d0              CBNZ     r0,|L1.15514|
003c64  f8962023          LDRB     r2,[r6,#0x23]         ;5479  ; spc_stat
003c68  2a02              CMP      r2,#2                 ;5479
003c6a  d016              BEQ      |L1.15514|
003c6c  780a              LDRB     r2,[r1,#0]            ;5479  ; hv_vz_stat
003c6e  b9a2              CBNZ     r2,|L1.15514|
003c70  783a              LDRB     r2,[r7,#0]            ;5479  ; sp_ch_stat
003c72  b992              CBNZ     r2,|L1.15514|
003c74  7972              LDRB     r2,[r6,#5]            ;5479  ; vz1_stat
003c76  b982              CBNZ     r2,|L1.15514|
003c78  79f2              LDRB     r2,[r6,#7]            ;5479  ; vz2_stat
003c7a  b972              CBNZ     r2,|L1.15514|
003c7c  f9b82000          LDRSH    r2,[r8,#0]            ;5479  ; load_U
003c80  230a              MOVS     r3,#0xa               ;5479
003c82  fb92f2f3          SDIV     r2,r2,r3              ;5479
003c86  4bd8              LDR      r3,|L1.16360|
003c88  f9b33000          LDRSH    r3,[r3,#0]            ;5479  ; UVENTOFF
003c8c  429a              CMP      r2,r3                 ;5479
003c8e  da04              BGE      |L1.15514|
003c90  69e0              LDR      r0,[r4,#0x1c]         ;5479
003c92  f4407000          ORR      r0,r0,#0x200          ;5479
003c96  61e0              STR      r0,[r4,#0x1c]         ;5479
003c98  e01c              B        |L1.15572|
                  |L1.15514|
003c9a  b958              CBNZ     r0,|L1.15540|
003c9c  f8960023          LDRB     r0,[r6,#0x23]         ;5480  ; spc_stat
003ca0  2802              CMP      r0,#2                 ;5480
003ca2  d007              BEQ      |L1.15540|
003ca4  7808              LDRB     r0,[r1,#0]            ;5480  ; hv_vz_stat
003ca6  b928              CBNZ     r0,|L1.15540|
003ca8  7838              LDRB     r0,[r7,#0]            ;5480  ; sp_ch_stat
003caa  b918              CBNZ     r0,|L1.15540|
003cac  7970              LDRB     r0,[r6,#5]            ;5480  ; vz1_stat
003cae  b908              CBNZ     r0,|L1.15540|
003cb0  79f0              LDRB     r0,[r6,#7]            ;5480  ; vz2_stat
003cb2  b178              CBZ      r0,|L1.15572|
                  |L1.15540|
003cb4  69a0              LDR      r0,[r4,#0x18]         ;5480
003cb6  f4407000          ORR      r0,r0,#0x200          ;5480
003cba  61a0              STR      r0,[r4,#0x18]         ;5480
003cbc  e00a              B        |L1.15572|
                  |L1.15550|
;;;5483   	{
;;;5484   	if((mess_find_unvol(MESS2RELE_HNDL))&& (mess_data[0]==PARAM_RELE_BAT_IS_DISCHARGED)) SET_REG(LPC_GPIO0->FIOCLR,1,9,1);
003cbe  20d2              MOVS     r0,#0xd2
003cc0  f7fffffe          BL       mess_find_unvol
003cc4  b110              CBZ      r0,|L1.15564|
003cc6  6828              LDR      r0,[r5,#0]  ; mess_data
003cc8  2872              CMP      r0,#0x72
003cca  d017              BEQ      |L1.15612|
                  |L1.15564|
;;;5485   	else SET_REG(LPC_GPIO0->FIOSET,1,9,1);
003ccc  69a0              LDR      r0,[r4,#0x18]
003cce  f4407000          ORR      r0,r0,#0x200
003cd2  61a0              STR      r0,[r4,#0x18]
                  |L1.15572|
;;;5486   	}
;;;5487   	
;;;5488   //Блок выносной реле
;;;5489   if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_BDR1))
003cd4  20d2              MOVS     r0,#0xd2
003cd6  f7fffffe          BL       mess_find_unvol
;;;5490   	{
;;;5491   	if(mess_data[1]==0) 		bdr_transmit_stat&=0xfe;
003cda  f8df9310          LDR      r9,|L1.16364|
;;;5492   	else if(mess_data[1]==1) 	bdr_transmit_stat|=0x01;
;;;5493   	}
;;;5494   else 
;;;5495   	{
;;;5496   	if(bdr_avar_stat&0x01)  	bdr_transmit_stat|=0x01;
003cde  4cc4              LDR      r4,|L1.16368|
003ce0  b110              CBZ      r0,|L1.15592|
003ce2  6828              LDR      r0,[r5,#0]            ;5489  ; mess_data
003ce4  2875              CMP      r0,#0x75              ;5489
003ce6  d00e              BEQ      |L1.15622|
                  |L1.15592|
003ce8  7820              LDRB     r0,[r4,#0]  ; bdr_avar_stat
003cea  07c0              LSLS     r0,r0,#31
003cec  d01e              BEQ      |L1.15660|
003cee  f8990000          LDRB     r0,[r9,#0]  ; bdr_transmit_stat
003cf2  f0400001          ORR      r0,r0,#1
003cf6  f8890000          STRB     r0,[r9,#0]
003cfa  e01d              B        |L1.15672|
                  |L1.15612|
003cfc  69e0              LDR      r0,[r4,#0x1c]         ;5484
003cfe  f4407000          ORR      r0,r0,#0x200          ;5484
003d02  61e0              STR      r0,[r4,#0x1c]         ;5484
003d04  e7e6              B        |L1.15572|
                  |L1.15622|
003d06  6868              LDR      r0,[r5,#4]            ;5491  ; mess_data
003d08  b110              CBZ      r0,|L1.15632|
003d0a  2801              CMP      r0,#1                 ;5492
003d0c  d007              BEQ      |L1.15646|
003d0e  e013              B        |L1.15672|
                  |L1.15632|
003d10  f8990000          LDRB     r0,[r9,#0]            ;5491  ; bdr_transmit_stat
003d14  f00000fe          AND      r0,r0,#0xfe           ;5491
003d18  f8890000          STRB     r0,[r9,#0]            ;5491
003d1c  e00c              B        |L1.15672|
                  |L1.15646|
003d1e  f8990000          LDRB     r0,[r9,#0]            ;5492  ; bdr_transmit_stat
003d22  f0400001          ORR      r0,r0,#1              ;5492
003d26  f8890000          STRB     r0,[r9,#0]            ;5492
003d2a  e005              B        |L1.15672|
                  |L1.15660|
;;;5497   	else 						bdr_transmit_stat&=0xfe;
003d2c  f8990000          LDRB     r0,[r9,#0]  ; bdr_transmit_stat
003d30  f00000fe          AND      r0,r0,#0xfe
003d34  f8890000          STRB     r0,[r9,#0]
                  |L1.15672|
;;;5498   	}	
;;;5499   
;;;5500   if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_BDR2))
003d38  20d2              MOVS     r0,#0xd2
003d3a  f7fffffe          BL       mess_find_unvol
003d3e  b110              CBZ      r0,|L1.15686|
003d40  6828              LDR      r0,[r5,#0]  ; mess_data
003d42  2876              CMP      r0,#0x76
003d44  d009              BEQ      |L1.15706|
                  |L1.15686|
;;;5501   	{
;;;5502   	if(mess_data[1]==0) 		bdr_transmit_stat&=0xfd;
;;;5503   	else if(mess_data[1]==1) 	bdr_transmit_stat|=0x02;
;;;5504   	}
;;;5505   else 
;;;5506   	{
;;;5507   	if(bdr_avar_stat&0x01)  	bdr_transmit_stat|=0x02;
003d46  7820              LDRB     r0,[r4,#0]  ; bdr_avar_stat
003d48  07c0              LSLS     r0,r0,#31
003d4a  d019              BEQ      |L1.15744|
003d4c  f8990000          LDRB     r0,[r9,#0]  ; bdr_transmit_stat
003d50  f0400002          ORR      r0,r0,#2
003d54  f8890000          STRB     r0,[r9,#0]
003d58  e018              B        |L1.15756|
                  |L1.15706|
003d5a  6868              LDR      r0,[r5,#4]            ;5502  ; mess_data
003d5c  b110              CBZ      r0,|L1.15716|
003d5e  2801              CMP      r0,#1                 ;5503
003d60  d007              BEQ      |L1.15730|
003d62  e013              B        |L1.15756|
                  |L1.15716|
003d64  f8990000          LDRB     r0,[r9,#0]            ;5502  ; bdr_transmit_stat
003d68  f00000fd          AND      r0,r0,#0xfd           ;5502
003d6c  f8890000          STRB     r0,[r9,#0]            ;5502
003d70  e00c              B        |L1.15756|
                  |L1.15730|
003d72  f8990000          LDRB     r0,[r9,#0]            ;5503  ; bdr_transmit_stat
003d76  f0400002          ORR      r0,r0,#2              ;5503
003d7a  f8890000          STRB     r0,[r9,#0]            ;5503
003d7e  e005              B        |L1.15756|
                  |L1.15744|
;;;5508   	else 						bdr_transmit_stat&=0xfd;
003d80  f8990000          LDRB     r0,[r9,#0]  ; bdr_transmit_stat
003d84  f00000fd          AND      r0,r0,#0xfd
003d88  f8890000          STRB     r0,[r9,#0]
                  |L1.15756|
;;;5509   	}	
;;;5510   	
;;;5511   if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_BDR3))
003d8c  20d2              MOVS     r0,#0xd2
003d8e  f7fffffe          BL       mess_find_unvol
003d92  b110              CBZ      r0,|L1.15770|
003d94  6828              LDR      r0,[r5,#0]  ; mess_data
003d96  2877              CMP      r0,#0x77
003d98  d009              BEQ      |L1.15790|
                  |L1.15770|
;;;5512   	{
;;;5513   	if(mess_data[1]==0) 		bdr_transmit_stat&=0xfb;
;;;5514   	else if(mess_data[1]==1) 	bdr_transmit_stat|=0x04;
;;;5515   	}
;;;5516   else 
;;;5517   	{
;;;5518   	if(bdr_avar_stat&0x01)  	bdr_transmit_stat|=0x04;
003d9a  7820              LDRB     r0,[r4,#0]  ; bdr_avar_stat
003d9c  07c0              LSLS     r0,r0,#31
003d9e  d019              BEQ      |L1.15828|
003da0  f8990000          LDRB     r0,[r9,#0]  ; bdr_transmit_stat
003da4  f0400004          ORR      r0,r0,#4
003da8  f8890000          STRB     r0,[r9,#0]
003dac  e018              B        |L1.15840|
                  |L1.15790|
003dae  6868              LDR      r0,[r5,#4]            ;5513  ; mess_data
003db0  b110              CBZ      r0,|L1.15800|
003db2  2801              CMP      r0,#1                 ;5514
003db4  d007              BEQ      |L1.15814|
003db6  e013              B        |L1.15840|
                  |L1.15800|
003db8  f8990000          LDRB     r0,[r9,#0]            ;5513  ; bdr_transmit_stat
003dbc  f00000fb          AND      r0,r0,#0xfb           ;5513
003dc0  f8890000          STRB     r0,[r9,#0]            ;5513
003dc4  e00c              B        |L1.15840|
                  |L1.15814|
003dc6  f8990000          LDRB     r0,[r9,#0]            ;5514  ; bdr_transmit_stat
003dca  f0400004          ORR      r0,r0,#4              ;5514
003dce  f8890000          STRB     r0,[r9,#0]            ;5514
003dd2  e005              B        |L1.15840|
                  |L1.15828|
;;;5519   	else 						bdr_transmit_stat&=0xfb;
003dd4  f8990000          LDRB     r0,[r9,#0]  ; bdr_transmit_stat
003dd8  f00000fb          AND      r0,r0,#0xfb
003ddc  f8890000          STRB     r0,[r9,#0]
                  |L1.15840|
;;;5520   	}	
;;;5521   	
;;;5522   if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_BDR4))
003de0  20d2              MOVS     r0,#0xd2
003de2  f7fffffe          BL       mess_find_unvol
003de6  b110              CBZ      r0,|L1.15854|
003de8  6828              LDR      r0,[r5,#0]  ; mess_data
003dea  2878              CMP      r0,#0x78
003dec  d009              BEQ      |L1.15874|
                  |L1.15854|
;;;5523   	{
;;;5524   	if(mess_data[1]==0) 		bdr_transmit_stat&=0xf7;
;;;5525   	else if(mess_data[1]==1) 	bdr_transmit_stat|=0x08;
;;;5526   	}
;;;5527   else 
;;;5528   	{
;;;5529   	if(bdr_avar_stat&0x01)  	bdr_transmit_stat|=0x08;
003dee  7820              LDRB     r0,[r4,#0]  ; bdr_avar_stat
003df0  07c0              LSLS     r0,r0,#31
003df2  d019              BEQ      |L1.15912|
003df4  f8990000          LDRB     r0,[r9,#0]  ; bdr_transmit_stat
003df8  f0400008          ORR      r0,r0,#8
003dfc  f8890000          STRB     r0,[r9,#0]
003e00  e018              B        |L1.15924|
                  |L1.15874|
003e02  6868              LDR      r0,[r5,#4]            ;5524  ; mess_data
003e04  b110              CBZ      r0,|L1.15884|
003e06  2801              CMP      r0,#1                 ;5525
003e08  d007              BEQ      |L1.15898|
003e0a  e013              B        |L1.15924|
                  |L1.15884|
003e0c  f8990000          LDRB     r0,[r9,#0]            ;5524  ; bdr_transmit_stat
003e10  f00000f7          AND      r0,r0,#0xf7           ;5524
003e14  f8890000          STRB     r0,[r9,#0]            ;5524
003e18  e00c              B        |L1.15924|
                  |L1.15898|
003e1a  f8990000          LDRB     r0,[r9,#0]            ;5525  ; bdr_transmit_stat
003e1e  f0400008          ORR      r0,r0,#8              ;5525
003e22  f8890000          STRB     r0,[r9,#0]            ;5525
003e26  e005              B        |L1.15924|
                  |L1.15912|
;;;5530   	else 						bdr_transmit_stat&=0xf7;
003e28  f8990000          LDRB     r0,[r9,#0]  ; bdr_transmit_stat
003e2c  f00000f7          AND      r0,r0,#0xf7
003e30  f8890000          STRB     r0,[r9,#0]
                  |L1.15924|
;;;5531   	}	
;;;5532   					 	
;;;5533   #endif
;;;5534   
;;;5535   #ifdef UKU_KONTUR
;;;5536   
;;;5537   //Реле общей аварии
;;;5538   if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_AV_COMM))
;;;5539   	{
;;;5540   	if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_COMM,1);
;;;5541   	else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_COMM,1);
;;;5542   	}
;;;5543   else 
;;;5544   	{
;;;5545        if(  (!(avar_ind_stat&0x00007fff)) &&
;;;5546             ((!SK_REL_EN[0]) || (sk_av_stat[0]!=sasON))  &&
;;;5547             ((!SK_REL_EN[1]) || (sk_av_stat[1]!=sasON))  &&
;;;5548             ((!SK_REL_EN[2]) || (sk_av_stat[2]!=sasON))  /*&&
;;;5549             ((!SK_REL_EN[3]) || (sk_av_stat[3]!=sasON))*/  )SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_COMM,1);
;;;5550        else SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_COMM,1);
;;;5551   	}
;;;5552   
;;;5553   	
;;;5554   //rel_warm_plazma=0;
;;;5555   //Реле освещения   
;;;5556   /*
;;;5557   if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_WARM))
;;;5558   	{
;;;5559   	if(mess_data[1]==0)
;;;5560   		{
;;;5561   		SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_WARM,1);
;;;5562   		rel_warm_plazma=1;
;;;5563   		}
;;;5564   	else if(mess_data[1]==1) 
;;;5565   		{
;;;5566   		SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_WARM,1);
;;;5567   		rel_warm_plazma=2;
;;;5568   		}
;;;5569        }
;;;5570   else 
;;;5571   	{
;;;5572   	if(warm_stat_k==wsOFF) 
;;;5573   		{
;;;5574   		SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_WARM,1);
;;;5575   		rel_warm_plazma=3;
;;;5576   		}
;;;5577        else 
;;;5578   		{
;;;5579   		SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_WARM,1);
;;;5580   		rel_warm_plazma=4;
;;;5581   		}
;;;5582   	}
;;;5583   */
;;;5584   //Реле освещения
;;;5585   if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_LIGHT))
;;;5586   	{
;;;5587   	if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_LIGHT,1);
;;;5588   	else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_LIGHT,1);
;;;5589        }
;;;5590   else 
;;;5591   	{
;;;5592   	if(sk_av_stat[0]!=sasON) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_LIGHT,1);
;;;5593        else SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_LIGHT,1);
;;;5594   	}
;;;5595   
;;;5596   
;;;5597   
;;;5598   //Реле выключения нагрузки
;;;5599   if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_LOAD_OFF))
;;;5600   	{
;;;5601   	if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_LOAD_OFF,1);
;;;5602   	else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_LOAD_OFF,1);
;;;5603        }
;;;5604   else if(tloaddisable_cmnd==0)
;;;5605   	{
;;;5606   	SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_LOAD_OFF,1);
;;;5607   	}
;;;5608   else if((tloaddisable_cmnd)&&(tloaddisable_cmnd<=11))
;;;5609   	{
;;;5610   	SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_LOAD_OFF,1);
;;;5611   	}
;;;5612   
;;;5613   else 
;;;5614   	{
;;;5615   	if(!(tloaddisable_stat==tldsON)) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_LOAD_OFF,1);
;;;5616        else SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_LOAD_OFF,1);
;;;5617   	} 
;;;5618   
;;;5619   //Реле осевого вентилятора или отопителя
;;;5620   if(RELE_LOG)
;;;5621   	{
;;;5622   	if((mess_find_unvol(MESS2RELE_HNDL))&&(mess_data[0]==PARAM_RELE_VENT_WARM))
;;;5623   		{
;;;5624   		if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_VENT_WARM,1);
;;;5625   		else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_VENT_WARM,1);
;;;5626   		}
;;;5627   	else 
;;;5628   		{
;;;5629   		if(warm_stat_k==wsOFF) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_VENT_WARM,1);
;;;5630   	     else SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_VENT_WARM,1);
;;;5631   		} 
;;;5632   
;;;5633   	}
;;;5634   else 
;;;5635   	{
;;;5636   	if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_VENT_WARM))
;;;5637   		{
;;;5638   		if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_VENT_WARM,1);
;;;5639   		else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_VENT_WARM,1);
;;;5640   		}
;;;5641   	else 
;;;5642   		{
;;;5643   		if(vent_stat_k==vsOFF) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_VENT_WARM,1);
;;;5644   	     else SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_VENT_WARM,1);
;;;5645   		} 
;;;5646   	}
;;;5647   #endif
;;;5648   
;;;5649   
;;;5650   #ifdef UKU_TELECORE2015
;;;5651   //Реле аварии сети
;;;5652   if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_AV_NET))
;;;5653   	{
;;;5654   	if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_NET,1);
;;;5655   	else SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_NET,1);
;;;5656   	}
;;;5657   else	if(!(avar_ind_stat&0x00000001)) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_NET,1);
;;;5658   else SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_NET,1);
;;;5659   
;;;5660   
;;;5661   //Реле освещения
;;;5662   if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_LIGHT))
;;;5663   	{
;;;5664   	if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_LIGHT,1);
;;;5665   	else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_LIGHT,1);
;;;5666        }
;;;5667   else 
;;;5668   	{
;;;5669   	if(sk_av_stat[0]!=sasON) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_LIGHT,1);
;;;5670        else SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_LIGHT,1);
;;;5671   	}
;;;5672   
;;;5673   //Реле отопителя
;;;5674   if((mess_find_unvol(MESS2RELE_HNDL))&&(mess_data[0]==PARAM_RELE_WARM))
;;;5675   	{
;;;5676   	if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_WARM,1);
;;;5677   	else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_WARM,1);
;;;5678   	}
;;;5679   else 
;;;5680   	{
;;;5681   	if(warm_stat_k==wsOFF) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_WARM,1);
;;;5682        else SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_WARM,1);
;;;5683   	} 
;;;5684   //Реле вентилятора
;;;5685   if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_VENT))
;;;5686   	{
;;;5687   	if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_VENT,1);
;;;5688   	else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_VENT,1);
;;;5689   	}
;;;5690   else 
;;;5691   	{
;;;5692   	if(vent_stat_k==vsOFF) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_VENT,1);
;;;5693        else SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_VENT,1);
;;;5694   	} 
;;;5695   
;;;5696   //Реле внутреннего вентилятора
;;;5697   if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_VVENT))
;;;5698   	{
;;;5699   	if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_VVENT,1);
;;;5700   	else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_VVENT,1);
;;;5701   	}
;;;5702   else 
;;;5703   	{
;;;5704   	if(vvent_stat_k==vsOFF) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_VVENT,1);
;;;5705        else SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_VVENT,1);
;;;5706   	} 
;;;5707   
;;;5708   #endif
;;;5709   
;;;5710   #ifdef UKU_TELECORE2017
;;;5711   //Реле аварии сети
;;;5712   if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_AV_NET))
;;;5713   	{
;;;5714   	if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_NET,1);
;;;5715   	else SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_NET,1);
;;;5716   	}
;;;5717   else	if(!(avar_ind_stat&0x00000001)) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_NET,1);
;;;5718   else SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_NET,1);
;;;5719   
;;;5720   
;;;5721   //Реле освещения
;;;5722   if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_LIGHT))
;;;5723   	{
;;;5724   	if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_LIGHT,1);
;;;5725   	else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_LIGHT,1);
;;;5726        }
;;;5727   else 
;;;5728   	{
;;;5729   	if(sk_av_stat[0]!=sasON) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_LIGHT,1);
;;;5730        else SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_LIGHT,1);
;;;5731   	}
;;;5732   
;;;5733   //Реле отопителя
;;;5734   if((mess_find_unvol(MESS2RELE_HNDL))&&(mess_data[0]==PARAM_RELE_WARM))
;;;5735   	{
;;;5736   	if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_WARM,1);
;;;5737   	else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_WARM,1);
;;;5738   	}
;;;5739   else 
;;;5740   	{
;;;5741   	if(warm_stat_k==wsOFF) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_WARM,1);
;;;5742        else SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_WARM,1);
;;;5743   	} 
;;;5744   //Реле вентилятора
;;;5745   if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_VENT))
;;;5746   	{
;;;5747   	if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_VENT,1);
;;;5748   	else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_VENT,1);
;;;5749   	}
;;;5750   else 
;;;5751   	{
;;;5752   	if(vent_stat_k==vsOFF) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_VENT,1);
;;;5753        else SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_VENT,1);
;;;5754   	} 
;;;5755   
;;;5756   //Реле внутреннего вентилятора
;;;5757   if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_VVENT))
;;;5758   	{
;;;5759   	if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_VVENT,1);
;;;5760   	else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_VVENT,1);
;;;5761   	}
;;;5762   else 
;;;5763   	{
;;;5764   	if(vvent_stat_k==vsOFF) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_VVENT,1);
;;;5765        else SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_VVENT,1);
;;;5766   	} 
;;;5767   
;;;5768   //Реле выключения нагрузки
;;;5769   if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_LOAD_OFF))
;;;5770   	{
;;;5771   	if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_LOAD_OFF,1);
;;;5772   	else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_LOAD_OFF,1);
;;;5773        }
;;;5774   else if(tloaddisable_cmnd==0)
;;;5775   	{
;;;5776   	SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_LOAD_OFF,1);
;;;5777   	}
;;;5778   else if((tloaddisable_cmnd)&&(tloaddisable_cmnd<=11))
;;;5779   	{
;;;5780   	SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_LOAD_OFF,1);
;;;5781   	}
;;;5782   
;;;5783   else 
;;;5784   	{
;;;5785   	if(!(tloaddisable_stat==tldsON)) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_LOAD_OFF,1);
;;;5786        else SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_LOAD_OFF,1);
;;;5787   	} 
;;;5788   
;;;5789   
;;;5790   #endif
;;;5791   
;;;5792   #ifdef IPS_SGEP_GAZPROM
;;;5793   rele_hndl_plazma[0]++;
;;;5794   if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_AV_BPS))
;;;5795   	{
;;;5796   	rele_hndl_plazma[1]++;
;;;5797   	if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_BPS,1);
;;;5798   	else/* if(mess_data[1]==1)*/ SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_BPS,1);
;;;5799        }
;;;5800   else 
;;;5801   	{
;;;5802   	if(!(avar_ind_stat&0x000007f8)) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_BPS,1);
;;;5803        else SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_BPS,1);
;;;5804   	} 
;;;5805   
;;;5806   if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_AV_NET))
;;;5807   	{
;;;5808   	rele_hndl_plazma[2]++;
;;;5809   	if(mess_data[1]==0) SET_REG(LPC_GPIO3->FIOSET,1,25,1);
;;;5810   	else SET_REG(LPC_GPIO3->FIOCLR,1,25,1);
;;;5811   	}
;;;5812   else	if(!(avar_ind_stat&0x00000001)) SET_REG(LPC_GPIO3->FIOCLR,1,25,1);
;;;5813   else SET_REG(LPC_GPIO3->FIOSET,1,25,1);
;;;5814   #endif
;;;5815   
;;;5816   if(NUMBDR==1)
003e34  486f              LDR      r0,|L1.16372|
003e36  8800              LDRH     r0,[r0,#0]  ; NUMBDR
003e38  2801              CMP      r0,#1
003e3a  d17e              BNE      |L1.16186|
;;;5817   	{
;;;5818   	char ii_;
;;;5819   	char bdr_avar_stat_temp=0;
003e3c  f04f0000          MOV      r0,#0
;;;5820   	for	(ii_=0;ii_<4;ii_++)
003e40  4601              MOV      r1,r0
;;;5821   		{
;;;5822   		//АБ разряжена
;;;5823   		if((RELE_SET_MASK[ii_]&0x01)&&
;;;5824   			(load_U<(USIGN*10)))			bdr_avar_stat_temp|=(1<<ii_);
;;;5825   		//Ускоренный заряд
;;;5826   		if((RELE_SET_MASK[ii_]&0x02)&&
;;;5827   			(sp_ch_stat==scsWRK))			bdr_avar_stat_temp|=(1<<ii_);
;;;5828   		//Выравнивающий заряд
;;;5829   		if((RELE_SET_MASK[ii_]&0x04)&&
;;;5830   			(spc_stat==spcVZ))			bdr_avar_stat_temp|=(1<<ii_);
;;;5831   		//Общая авария ЗВУ
;;;5832   		if((RELE_SET_MASK[ii_]&0x08)&&
;;;5833   			(avar_stat))					bdr_avar_stat_temp|=(1<<ii_);
;;;5834   		//Uвых завышено
;;;5835   		if((RELE_SET_MASK[ii_]&0x10)&&
;;;5836   			(uout_av==1))					bdr_avar_stat_temp|=(1<<ii_);
003e42  f8dfa1b4          LDR      r10,|L1.16376|
;;;5837   		//Uвых занижено
;;;5838   		if((RELE_SET_MASK[ii_]&0x20)&&
;;;5839   			(uout_av==2))					bdr_avar_stat_temp|=(1<<ii_);
;;;5840   		if((RELE_SET_MASK[ii_]&0x40)&&
;;;5841   			(
;;;5842   			((bps[0]._av&(1<<4))&&(NUMIST>=1))||
003e46  f8df91b4          LDR      r9,|L1.16380|
003e4a  4d6d              LDR      r5,|L1.16384|
003e4c  f8dfb1b4          LDR      r11,|L1.16388|
003e50  f04f0301          MOV      r3,#1                 ;4774
                  |L1.15956|
003e54  f93b2011          LDRSH    r2,[r11,r1,LSL #1]    ;5823
003e58  ea5f7cc2          LSLS     r12,r2,#31            ;5823
003e5c  d010              BEQ      |L1.16000|
003e5e  f8dfc1a8          LDR      r12,|L1.16392|
003e62  f9b8e000          LDRSH    lr,[r8,#0]            ;5824  ; load_U
003e66  f9bcc000          LDRSH    r12,[r12,#0]          ;5824  ; USIGN
003e6a  eb0c0c8c          ADD      r12,r12,r12,LSL #2    ;5824
003e6e  ebbe0f4c          CMP      lr,r12,LSL #1         ;5824
003e72  da05              BGE      |L1.16000|
003e74  fa03fc01          LSL      r12,r3,r1             ;5824
003e78  ea4c0c00          ORR      r12,r12,r0            ;5824
003e7c  f00c00ff          AND      r0,r12,#0xff          ;5824
                  |L1.16000|
003e80  ea5f7c82          LSLS     r12,r2,#30            ;5826
003e84  d50a              BPL      |L1.16028|
003e86  f897c000          LDRB     r12,[r7,#0]           ;5827  ; sp_ch_stat
003e8a  f1bc0f02          CMP      r12,#2                ;5827
003e8e  d105              BNE      |L1.16028|
003e90  fa03fc01          LSL      r12,r3,r1             ;5827
003e94  ea4c0c00          ORR      r12,r12,r0            ;5827
003e98  f00c00ff          AND      r0,r12,#0xff          ;5827
                  |L1.16028|
003e9c  ea5f7c42          LSLS     r12,r2,#29            ;5829
003ea0  d50a              BPL      |L1.16056|
003ea2  f896c023          LDRB     r12,[r6,#0x23]        ;5830  ; spc_stat
003ea6  f1bc0f02          CMP      r12,#2                ;5830
003eaa  d105              BNE      |L1.16056|
003eac  fa03fc01          LSL      r12,r3,r1             ;5830
003eb0  ea4c0c00          ORR      r12,r12,r0            ;5830
003eb4  f00c00ff          AND      r0,r12,#0xff          ;5830
                  |L1.16056|
003eb8  ea5f7c02          LSLS     r12,r2,#28            ;5832
003ebc  d50c              BPL      |L1.16088|
003ebe  f8dfc14c          LDR      r12,|L1.16396|
003ec2  f8dcc000          LDR      r12,[r12,#0]          ;5833  ; avar_stat
003ec6  f1bc0f00          CMP      r12,#0                ;5833
003eca  d005              BEQ      |L1.16088|
003ecc  fa03fc01          LSL      r12,r3,r1             ;5833
003ed0  ea4c0c00          ORR      r12,r12,r0            ;5833
003ed4  f00c00ff          AND      r0,r12,#0xff          ;5833
                  |L1.16088|
003ed8  ea5f6cc2          LSLS     r12,r2,#27            ;5835
003edc  d50a              BPL      |L1.16116|
003ede  f89ac000          LDRB     r12,[r10,#0]          ;5836  ; uout_av
003ee2  f1bc0f01          CMP      r12,#1                ;5836
003ee6  d105              BNE      |L1.16116|
003ee8  fa03fc01          LSL      r12,r3,r1             ;5836
003eec  ea4c0c00          ORR      r12,r12,r0            ;5836
003ef0  f00c00ff          AND      r0,r12,#0xff          ;5836
                  |L1.16116|
003ef4  ea5f6c82          LSLS     r12,r2,#26            ;5838
003ef8  d50a              BPL      |L1.16144|
003efa  f89ac000          LDRB     r12,[r10,#0]          ;5839  ; uout_av
003efe  f1bc0f02          CMP      r12,#2                ;5839
003f02  d105              BNE      |L1.16144|
003f04  fa03fc01          LSL      r12,r3,r1             ;5839
003f08  ea4c0c00          ORR      r12,r12,r0            ;5839
003f0c  f00c00ff          AND      r0,r12,#0xff          ;5839
                  |L1.16144|
003f10  ea5f6c42          LSLS     r12,r2,#25            ;5840
003f14  d525              BPL      |L1.16226|
003f16  f899c001          LDRB     r12,[r9,#1]  ; bps
003f1a  ea5f6ccc          LSLS     r12,r12,#27
003f1e  d504              BPL      |L1.16170|
003f20  f9b5c000          LDRSH    r12,[r5,#0]  ; NUMIST
003f24  f1bc0f01          CMP      r12,#1
003f28  da15              BGE      |L1.16214|
                  |L1.16170|
;;;5843   			((bps[1]._av&(1<<4))&&(NUMIST>=2))||
003f2a  f899c05d          LDRB     r12,[r9,#0x5d]  ; bps
003f2e  ea5f6ccc          LSLS     r12,r12,#27
003f32  d506              BPL      |L1.16194|
003f34  f9b5c000          LDRSH    r12,[r5,#0]  ; NUMIST
003f38  e000              B        |L1.16188|
                  |L1.16186|
003f3a  e047              B        |L1.16332|
                  |L1.16188|
003f3c  f1bc0f02          CMP      r12,#2
003f40  da09              BGE      |L1.16214|
                  |L1.16194|
;;;5844   			((bps[2]._av&(1<<4))&&(NUMIST>=3))
003f42  f899c0b9          LDRB     r12,[r9,#0xb9]  ; bps
003f46  ea5f6ccc          LSLS     r12,r12,#27
003f4a  d50a              BPL      |L1.16226|
003f4c  f9b5c000          LDRSH    r12,[r5,#0]  ; NUMIST
003f50  f1bc0f03          CMP      r12,#3
003f54  db05              BLT      |L1.16226|
                  |L1.16214|
;;;5845   			))bdr_avar_stat_temp|=(1<<ii_);
003f56  fa03fc01          LSL      r12,r3,r1
003f5a  ea4c0c00          ORR      r12,r12,r0
003f5e  f00c00ff          AND      r0,r12,#0xff
                  |L1.16226|
;;;5846   		if((RELE_SET_MASK[ii_]&0x80)&&
003f62  ea5f6c02          LSLS     r12,r2,#24
003f66  d523              BPL      |L1.16304|
;;;5847   			(
;;;5848   			((bps[0]._av&(0x0f))&&(NUMIST>=1))||
003f68  f899c001          LDRB     r12,[r9,#1]  ; bps
003f6c  ea5f7c0c          LSLS     r12,r12,#28
003f70  d004              BEQ      |L1.16252|
003f72  f9b5c000          LDRSH    r12,[r5,#0]  ; NUMIST
003f76  f1bc0f01          CMP      r12,#1
003f7a  da13              BGE      |L1.16292|
                  |L1.16252|
;;;5849   			((bps[1]._av&(0x0f))&&(NUMIST>=2))||
003f7c  f899c05d          LDRB     r12,[r9,#0x5d]  ; bps
003f80  ea5f7c0c          LSLS     r12,r12,#28
003f84  d004              BEQ      |L1.16272|
003f86  f9b5c000          LDRSH    r12,[r5,#0]  ; NUMIST
003f8a  f1bc0f02          CMP      r12,#2
003f8e  da09              BGE      |L1.16292|
                  |L1.16272|
;;;5850   			((bps[2]._av&(0x0f))&&(NUMIST>=3))
003f90  f899c0b9          LDRB     r12,[r9,#0xb9]  ; bps
003f94  ea5f7c0c          LSLS     r12,r12,#28
003f98  d00a              BEQ      |L1.16304|
003f9a  f9b5c000          LDRSH    r12,[r5,#0]  ; NUMIST
003f9e  f1bc0f03          CMP      r12,#3
003fa2  db05              BLT      |L1.16304|
                  |L1.16292|
;;;5851   			))bdr_avar_stat_temp|=(1<<ii_);
003fa4  fa03fc01          LSL      r12,r3,r1
003fa8  ea4c0c00          ORR      r12,r12,r0
003fac  f00c00ff          AND      r0,r12,#0xff
                  |L1.16304|
;;;5852   
;;;5853   		if(!(RELE_SET_MASK[ii_]&(1<<15))) bdr_avar_stat_temp^=(1<<ii_); 
003fb0  0412              LSLS     r2,r2,#16
003fb2  d404              BMI      |L1.16318|
003fb4  fa03f201          LSL      r2,r3,r1
003fb8  ea820200          EOR      r2,r2,r0
003fbc  b2d0              UXTB     r0,r2
                  |L1.16318|
003fbe  f1010101          ADD      r1,r1,#1              ;5820
003fc2  b2c9              UXTB     r1,r1                 ;5820
003fc4  2904              CMP      r1,#4                 ;5820
003fc6  f4ffaf45          BCC      |L1.15956|
;;;5854   		}
;;;5855   	bdr_avar_stat=bdr_avar_stat_temp;
003fca  7020              STRB     r0,[r4,#0]
                  |L1.16332|
;;;5856   	}
;;;5857   }
003fcc  e8bd9ff0          POP      {r4-r12,pc}
                  |L1.16336|
                          DCD      load_U
                  |L1.16340|
                          DCD      sp_ch_stat
                  |L1.16344|
                          DCD      ||area_number.25||
                  |L1.16348|
                          DCD      DOP_RELE_FUNC
                  |L1.16352|
                          DCD      speedChIsOn
                  |L1.16356|
                          DCD      hv_vz_stat
                  |L1.16360|
                          DCD      UVENTOFF
                  |L1.16364|
                          DCD      bdr_transmit_stat
                  |L1.16368|
                          DCD      bdr_avar_stat
                  |L1.16372|
                          DCD      NUMBDR
                  |L1.16376|
                          DCD      uout_av
                  |L1.16380|
                          DCD      bps
                  |L1.16384|
                          DCD      NUMIST
                  |L1.16388|
                          DCD      RELE_SET_MASK
                  |L1.16392|
                          DCD      USIGN
                  |L1.16396|
                          DCD      avar_stat
                          ENDP

                  bps_hndl PROC
;;;5860   //-----------------------------------------------
;;;5861   void bps_hndl(void)
004010  e92d5ff0          PUSH     {r4-r12,lr}
;;;5862   {
;;;5863   char ptr__,i;
;;;5864   unsigned short tempUS;
;;;5865   
;;;5866   if(sh_cnt0<10)
004014  4eff              LDR      r6,|L1.17428|
;;;5867   	{
;;;5868   	sh_cnt0++;
;;;5869   	if(sh_cnt0>=10)
;;;5870   		{
;;;5871   		sh_cnt0=0;
004016  2700              MOVS     r7,#0
;;;5872   		b1Hz_sh=1;
004018  f04f0a01          MOV      r10,#1
00401c  f8960021          LDRB     r0,[r6,#0x21]         ;5866  ; sh_cnt0
004020  280a              CMP      r0,#0xa               ;5866
004022  d20a              BCS      |L1.16442|
004024  f1000001          ADD      r0,r0,#1              ;5868
004028  b2c0              UXTB     r0,r0                 ;5868
00402a  f8860021          STRB     r0,[r6,#0x21]         ;5868
00402e  280a              CMP      r0,#0xa               ;5869
004030  d303              BCC      |L1.16442|
004032  f8867021          STRB     r7,[r6,#0x21]         ;5871
004036  f886a022          STRB     r10,[r6,#0x22]
                  |L1.16442|
;;;5873   		}
;;;5874   	}
;;;5875   
;;;5876   /*if(sh_cnt1<5)
;;;5877   	{
;;;5878   	sh_cnt1++;
;;;5879   	if(sh_cnt1==5)
;;;5880   		{
;;;5881   		sh_cnt1=0;
;;;5882   		b2Hz_sh=1;
;;;5883   		}
;;;5884   	} */
;;;5885   
;;;5886   
;;;5887   /*
;;;5888   if(mess_find(MESS_SRC_ON_OFF))
;;;5889   	{
;;;5890   	if(mess_data[0]==_MESS_SRC_MASK_BLOK_2SEC)
;;;5891   		{
;;;5892   		char i;
;;;5893   		for(i=0;i<NUMIST;i++)
;;;5894   			{
;;;5895   			if(mess_data[1]&(1<<i))src[i]._ist_blok_cnt=20;
;;;5896   			}
;;;5897   		
;;;5898   		}
;;;5899   	else if(mess_data[0]==_MESS_SRC_MASK_UNBLOK)
;;;5900   		{
;;;5901   		char i;
;;;5902   		for(i=0;i<NUMIST;i++)
;;;5903   			{
;;;5904   			if(mess_data[1]&(1<<i))src[i]._ist_blok_cnt=0;
;;;5905   			}
;;;5906   		
;;;5907   		}
;;;5908   	}
;;;5909   	
;;;5910   else if(mess_find(_MESS_SRC_MASK_ON))
;;;5911   	{				
;;;5912   	if(mess_data[0]==_MESS_SRC_MASK_ON)
;;;5913   		{
;;;5914   		char i;
;;;5915   		for(i=0;i<NUMIST;i++)
;;;5916   			{
;;;5917   			if(mess_data[1]&(1<<i))
;;;5918   				{
;;;5919   				src[i]._ist_blok_cnt=0;
;;;5920   				src[i]._flags_tu=2;
;;;5921   				}
;;;5922   			}
;;;5923   		
;;;5924   		}				
;;;5925   	}*/
;;;5926   
;;;5927   
;;;5928   
;;;5929   /*else*/ 
;;;5930   bps_on_mask=0;
00403a  f8a6705e          STRH     r7,[r6,#0x5e]
;;;5931   bps_off_mask=0;
00403e  f8a67060          STRH     r7,[r6,#0x60]
;;;5932   
;;;5933   if(mess_find_unvol(MESS2BPS_HNDL))
004042  20cd              MOVS     r0,#0xcd
004044  f7fffffe          BL       mess_find_unvol
;;;5934   	{
;;;5935   	if(mess_data[0]==PARAM_BPS_ALL_OFF_AFTER_2SEC)
;;;5936   		{
;;;5937   		bps_off_mask=0xffff;
;;;5938   		}
;;;5939   
;;;5940   	if(mess_data[0]==PARAM_BPS_MASK_OFF_AFTER_2SEC)
;;;5941   		{
;;;5942   		bps_off_mask=mess_data[1];
;;;5943   		}
;;;5944   
;;;5945   	if(mess_data[0]==PARAM_BPS_MASK_ON)
;;;5946   		{
;;;5947   		bps_on_mask=mess_data[1];
;;;5948   		}
;;;5949   
;;;5950   	if(mess_data[0]==PARAM_BPS_ALL_ON)
;;;5951   		{
;;;5952   		bps_on_mask=0xffff;
;;;5953   		}
;;;5954   
;;;5955   	if(mess_data[0]==PARAM_BPS_MASK_ON_OFF_AFTER_2SEC)
;;;5956   		{
;;;5957   		bps_on_mask=mess_data[1];
;;;5958   		bps_off_mask=~(mess_data[1]);
;;;5959   		}
;;;5960   
;;;5961   
;;;5962   	for(i=0;i<=NUMIST;i++)
;;;5963   		{
;;;5964   		if(bps_off_mask&(1<<i)) bps[i]._blok_cnt++;
004048  f8df83cc          LDR      r8,|L1.17432|
00404c  f8dfb3cc          LDR      r11,|L1.17436|
004050  b3a0              CBZ      r0,|L1.16572|
004052  4af3              LDR      r2,|L1.17440|
004054  f64f73ff          MOV      r3,#0xffff            ;5937
004058  6810              LDR      r0,[r2,#0]            ;5935  ; mess_data
00405a  28ce              CMP      r0,#0xce              ;5935
00405c  d101              BNE      |L1.16482|
00405e  f8a63060          STRH     r3,[r6,#0x60]         ;5937
                  |L1.16482|
004062  28cf              CMP      r0,#0xcf              ;5940
004064  d102              BNE      |L1.16492|
004066  6851              LDR      r1,[r2,#4]            ;5942  ; mess_data
004068  f8a61060          STRH     r1,[r6,#0x60]         ;5942
                  |L1.16492|
00406c  28d1              CMP      r0,#0xd1              ;5945
00406e  d102              BNE      |L1.16502|
004070  6851              LDR      r1,[r2,#4]            ;5947  ; mess_data
004072  f8a6105e          STRH     r1,[r6,#0x5e]         ;5947
                  |L1.16502|
004076  28d2              CMP      r0,#0xd2              ;5950
004078  d101              BNE      |L1.16510|
00407a  f8a6305e          STRH     r3,[r6,#0x5e]         ;5952
                  |L1.16510|
00407e  28d0              CMP      r0,#0xd0              ;5955
004080  d106              BNE      |L1.16528|
004082  6850              LDR      r0,[r2,#4]            ;5957  ; mess_data
004084  f8a6005e          STRH     r0,[r6,#0x5e]         ;5957
004088  ea6f0000          MVN      r0,r0                 ;5958
00408c  f8a60060          STRH     r0,[r6,#0x60]         ;5958
                  |L1.16528|
004090  f04f0400          MOV      r4,#0                 ;5962
004094  e037              B        |L1.16646|
                  |L1.16534|
004096  f8b60060          LDRH     r0,[r6,#0x60]  ; bps_off_mask
00409a  fa0af904          LSL      r9,r10,r4
00409e  ea190f00          TST      r9,r0
0040a2  d00c              BEQ      |L1.16574|
0040a4  ebc400c4          RSB      r0,r4,r4,LSL #3
0040a8  eb001004          ADD      r0,r0,r4,LSL #4
0040ac  eb080080          ADD      r0,r8,r0,LSL #2
0040b0  f8301f40          LDRH     r1,[r0,#0x40]!
0040b4  f1010101          ADD      r1,r1,#1
0040b8  8001              STRH     r1,[r0,#0]
0040ba  e008              B        |L1.16590|
                  |L1.16572|
0040bc  e028              B        |L1.16656|
                  |L1.16574|
;;;5965   		else bps[i]._blok_cnt=0;
0040be  ebc400c4          RSB      r0,r4,r4,LSL #3
0040c2  eb001004          ADD      r0,r0,r4,LSL #4
0040c6  eb080080          ADD      r0,r8,r0,LSL #2
0040ca  f8a07040          STRH     r7,[r0,#0x40]
                  |L1.16590|
;;;5966   		gran(&bps[i]._blok_cnt,0,50);
0040ce  ebc400c4          RSB      r0,r4,r4,LSL #3
0040d2  eb001004          ADD      r0,r0,r4,LSL #4
0040d6  eb080580          ADD      r5,r8,r0,LSL #2
0040da  f1050040          ADD      r0,r5,#0x40
0040de  2232              MOVS     r2,#0x32
0040e0  2100              MOVS     r1,#0
0040e2  f7fffffe          BL       gran
;;;5967   		if(bps[i]._blok_cnt>20) bps[i]._flags_tu=1;
0040e6  f9b50040          LDRSH    r0,[r5,#0x40]
0040ea  2814              CMP      r0,#0x14
0040ec  dd01              BLE      |L1.16626|
0040ee  f885a02c          STRB     r10,[r5,#0x2c]
                  |L1.16626|
;;;5968   		if(bps_on_mask&(1<<i)) bps[i]._flags_tu=0;
0040f2  f8b6005e          LDRH     r0,[r6,#0x5e]  ; bps_on_mask
0040f6  ea190f00          TST      r9,r0
0040fa  d001              BEQ      |L1.16640|
0040fc  f885702c          STRB     r7,[r5,#0x2c]
                  |L1.16640|
004100  f1040401          ADD      r4,r4,#1              ;5962
004104  b2e4              UXTB     r4,r4                 ;5962
                  |L1.16646|
004106  f9bb0000          LDRSH    r0,[r11,#0]           ;5962  ; NUMIST
00410a  4284              CMP      r4,r0                 ;5962
00410c  ddc3              BLE      |L1.16534|
00410e  e08d              B        |L1.16940|
                  |L1.16656|
;;;5969   	     }
;;;5970   
;;;5971   	
;;;5972   /*
;;;5973   
;;;5974   	if(bps_all_off_cnt>20)
;;;5975   		{
;;;5976   		for(i=0;i<=NUMIST;i++)
;;;5977   			{
;;;5978   	     	bps[i]._flags_tu=1;
;;;5979   	     	}
;;;5980   		}
;;;5981   	else if(bps_mask_off_cnt>20)
;;;5982   		{
;;;5983   		for(i=0;i<=NUMIST;i++)
;;;5984   			{
;;;5985   			if(mess_data[1]&(1<<i)) bps[i]._flags_tu=1;
;;;5986   	     	}
;;;5987   		}	
;;;5988   		
;;;5989   	else if(bps_mask_on_off_cnt>20)
;;;5990   		{
;;;5991   		for(i=0;i<=NUMIST;i++)
;;;5992   			{
;;;5993   			if(mess_data[1]&(1<<i)) bps[i]._flags_tu=1;
;;;5994   			else bps[i]._flags_tu=0;
;;;5995   	     	}
;;;5996   		}
;;;5997   		
;;;5998   	if(mess_data[0]==PARAM_BPS_MASK_ON)
;;;5999   		{
;;;6000   		for(i=0;i<=NUMIST;i++)
;;;6001   			{
;;;6002   			if(mess_data[1]&(1<<i)) bps[i]._flags_tu=0;
;;;6003   	     	}
;;;6004   		}
;;;6005   */										
;;;6006   	}
;;;6007   
;;;6008   
;;;6009   else if(b1Hz_sh)
004110  f8960022          LDRB     r0,[r6,#0x22]  ; b1Hz_sh
004114  b3e8              CBZ      r0,|L1.16786|
;;;6010   	{
;;;6011   	ptr__=0;
004116  f04f0400          MOV      r4,#0
;;;6012        for(i=0;i<=NUMIST;i++)
00411a  4621              MOV      r1,r4
00411c  f9bb0000          LDRSH    r0,[r11,#0]           ;5962
004120  e00a              B        |L1.16696|
                  |L1.16674|
;;;6013   		{
;;;6014   	     bps[i]._flags_tu=1;
004122  ebc102c1          RSB      r2,r1,r1,LSL #3
004126  eb021201          ADD      r2,r2,r1,LSL #4
00412a  eb080282          ADD      r2,r8,r2,LSL #2
00412e  f882a02c          STRB     r10,[r2,#0x2c]
004132  f1010101          ADD      r1,r1,#1              ;6012
004136  b2c9              UXTB     r1,r1                 ;6012
                  |L1.16696|
004138  4281              CMP      r1,r0                 ;6012
00413a  ddf2              BLE      |L1.16674|
;;;6015   	     }	
;;;6016     	     
;;;6017     	for(i=0;(i<NUMIST)&&(ptr__<num_necc);i++)
00413c  f04f0100          MOV      r1,#0
004140  e023              B        |L1.16778|
                  |L1.16706|
;;;6018     		{
;;;6019   		char ii,iii;
;;;6020   
;;;6021   		ii=(char)NUMIST;
004142  b2c2              UXTB     r2,r0
;;;6022   		//if(ii<0)ii=0;
;;;6023   		if(ii>32)ii=32;
004144  2a20              CMP      r2,#0x20
004146  d901              BLS      |L1.16716|
004148  f04f0220          MOV      r2,#0x20
                  |L1.16716|
;;;6024   		iii=numOfForvardBps;
00414c  f8963028          LDRB     r3,[r6,#0x28]  ; numOfForvardBps
;;;6025   		//if(iii<0)iii=0;
;;;6026   		if(iii>=NUMIST)iii=0;
004150  4283              CMP      r3,r0
004152  db01              BLT      |L1.16728|
004154  f04f0300          MOV      r3,#0
                  |L1.16728|
;;;6027   		iii+=i;
004158  440b              ADD      r3,r3,r1
00415a  b2db              UXTB     r3,r3
;;;6028   		iii=iii%ii;
00415c  fbb3f5f2          UDIV     r5,r3,r2
004160  fb023215          MLS      r2,r2,r5,r3
;;;6029   		
;;;6030     	     if((bps[iii]._state==bsRDY)||(bps[iii]._state==bsWRK))
004164  ebc203c2          RSB      r3,r2,r2,LSL #3
004168  eb031202          ADD      r2,r3,r2,LSL #4
00416c  eb080282          ADD      r2,r8,r2,LSL #2
004170  7893              LDRB     r3,[r2,#2]
004172  2b02              CMP      r3,#2
004174  d001              BEQ      |L1.16762|
004176  2b01              CMP      r3,#1
004178  d104              BNE      |L1.16772|
                  |L1.16762|
;;;6031     	         	{
;;;6032     	         	bps[iii]._flags_tu=0;
00417a  f882702c          STRB     r7,[r2,#0x2c]
;;;6033     	         	ptr__++;
00417e  f1040401          ADD      r4,r4,#1
004182  b2e4              UXTB     r4,r4
                  |L1.16772|
004184  f1010101          ADD      r1,r1,#1              ;6017
004188  b2c9              UXTB     r1,r1                 ;6017
                  |L1.16778|
00418a  4281              CMP      r1,r0                 ;6017
00418c  da06              BGE      |L1.16796|
00418e  4aa5              LDR      r2,|L1.17444|
004190  e000              B        |L1.16788|
                  |L1.16786|
004192  e04b              B        |L1.16940|
                  |L1.16788|
004194  f9b22000          LDRSH    r2,[r2,#0]            ;6017  ; num_necc
004198  4294              CMP      r4,r2                 ;6017
00419a  dbd2              BLT      |L1.16706|
                  |L1.16796|
;;;6034     	         	}
;;;6035   			
;;;6036     	     }
;;;6037   	bps[numOfForvardBps_old]._flags_tu=0;
00419c  f8961029          LDRB     r1,[r6,#0x29]  ; numOfForvardBps_old
0041a0  ebc102c1          RSB      r2,r1,r1,LSL #3
0041a4  eb021101          ADD      r1,r2,r1,LSL #4
0041a8  eb080181          ADD      r1,r8,r1,LSL #2
0041ac  f881702c          STRB     r7,[r1,#0x2c]
;;;6038   
;;;6039   	if(main_1Hz_cnt<60)
0041b0  499d              LDR      r1,|L1.17448|
0041b2  f9b11000          LDRSH    r1,[r1,#0]  ; main_1Hz_cnt
0041b6  293c              CMP      r1,#0x3c
0041b8  da0f              BGE      |L1.16858|
;;;6040   		{
;;;6041        	for(i=0;i<=NUMIST;i++)
0041ba  f04f0100          MOV      r1,#0
0041be  e00a              B        |L1.16854|
                  |L1.16832|
;;;6042   			{
;;;6043   	     	bps[i]._flags_tu=0;
0041c0  ebc102c1          RSB      r2,r1,r1,LSL #3
0041c4  eb021201          ADD      r2,r2,r1,LSL #4
0041c8  eb080282          ADD      r2,r8,r2,LSL #2
0041cc  f882702c          STRB     r7,[r2,#0x2c]
0041d0  f1010101          ADD      r1,r1,#1              ;6041
0041d4  b2c9              UXTB     r1,r1                 ;6041
                  |L1.16854|
0041d6  4281              CMP      r1,r0                 ;6041
0041d8  ddf2              BLE      |L1.16832|
                  |L1.16858|
;;;6044   	     	}	
;;;6045   		}
;;;6046   	if(ipsBlckStat)
0041da  4994              LDR      r1,|L1.17452|
0041dc  8809              LDRH     r1,[r1,#0]  ; ipsBlckStat
0041de  b179              CBZ      r1,|L1.16896|
;;;6047   		{
;;;6048        	for(i=0;i<=NUMIST;i++)
0041e0  f04f0100          MOV      r1,#0
0041e4  e00a              B        |L1.16892|
                  |L1.16870|
;;;6049   			{
;;;6050   	     	bps[i]._flags_tu=1;
0041e6  ebc102c1          RSB      r2,r1,r1,LSL #3
0041ea  eb021201          ADD      r2,r2,r1,LSL #4
0041ee  eb080282          ADD      r2,r8,r2,LSL #2
0041f2  f882a02c          STRB     r10,[r2,#0x2c]
0041f6  f1010101          ADD      r1,r1,#1              ;6048
0041fa  b2c9              UXTB     r1,r1                 ;6048
                  |L1.16892|
0041fc  4281              CMP      r1,r0                 ;6048
0041fe  ddf2              BLE      |L1.16870|
                  |L1.16896|
;;;6051   	     	}
;;;6052   		}
;;;6053   
;;;6054        for(i=0;i<=NUMIST;i++)
004200  f04f0100          MOV      r1,#0
;;;6055   		{
;;;6056   	    if(bps[i]._flags_tu==1) 	bps[i]._x_=-50;
004204  f06f0331          MVN      r3,#0x31
004208  e00e              B        |L1.16936|
                  |L1.16906|
00420a  ebc102c1          RSB      r2,r1,r1,LSL #3
00420e  eb021201          ADD      r2,r2,r1,LSL #4
004212  eb080282          ADD      r2,r8,r2,LSL #2
004216  f892402c          LDRB     r4,[r2,#0x2c]
00421a  2c01              CMP      r4,#1
00421c  d101              BNE      |L1.16930|
00421e  f8a23050          STRH     r3,[r2,#0x50]
                  |L1.16930|
004222  f1010101          ADD      r1,r1,#1              ;6054
004226  b2c9              UXTB     r1,r1                 ;6054
                  |L1.16936|
004228  4281              CMP      r1,r0                 ;6054
00422a  ddee              BLE      |L1.16906|
                  |L1.16940|
;;;6057   	   	}	
;;;6058   		 
;;;6059     	}
;;;6060   
;;;6061   
;;;6062   for(i=0;i<NUMIST;i++)
00422c  f04f0000          MOV      r0,#0
;;;6063        {
;;;6064        if(bps[i]._ist_blok_host_cnt!=0)
;;;6065             {
;;;6066             bps[i]._flags_tu=99;
004230  f04f0463          MOV      r4,#0x63
004234  f9bb1000          LDRSH    r1,[r11,#0]           ;5962
004238  e00f              B        |L1.16986|
                  |L1.16954|
00423a  ebc002c0          RSB      r2,r0,r0,LSL #3       ;6064
00423e  eb021200          ADD      r2,r2,r0,LSL #4       ;6064
004242  eb080282          ADD      r2,r8,r2,LSL #2       ;6064
004246  6bd3              LDR      r3,[r2,#0x3c]         ;6064
004248  b123              CBZ      r3,|L1.16980|
00424a  f882402c          STRB     r4,[r2,#0x2c]
;;;6067   	     bps[i]._ist_blok_host_cnt--;
00424e  f1a30301          SUB      r3,r3,#1
004252  63d3              STR      r3,[r2,#0x3c]
                  |L1.16980|
004254  f1000001          ADD      r0,r0,#1              ;6062
004258  b2c0              UXTB     r0,r0                 ;6062
                  |L1.16986|
00425a  4288              CMP      r0,r1                 ;6062
00425c  dbed              BLT      |L1.16954|
;;;6068             }
;;;6069        }
;;;6070   
;;;6071   
;;;6072   
;;;6073   
;;;6074   b1Hz_sh=0;
00425e  f8867022          STRB     r7,[r6,#0x22]
;;;6075   
;;;6076   
;;;6077   num_of_wrks_bps=0;
004262  77b7              STRB     r7,[r6,#0x1e]
;;;6078   tempUS=0;
004264  f04f0200          MOV      r2,#0
;;;6079   for(i=0;i<NUMIST;i++)
004268  4610              MOV      r0,r2
00426a  e013              B        |L1.17044|
                  |L1.17004|
;;;6080   	{
;;;6081   	if(bps[i]._state==bsWRK)
00426c  ebc003c0          RSB      r3,r0,r0,LSL #3
004270  eb031300          ADD      r3,r3,r0,LSL #4
004274  eb080383          ADD      r3,r8,r3,LSL #2
004278  789c              LDRB     r4,[r3,#2]
00427a  2c01              CMP      r4,#1
00427c  d107              BNE      |L1.17038|
;;;6082   		{
;;;6083   		num_of_wrks_bps++;
00427e  7fb4              LDRB     r4,[r6,#0x1e]  ; num_of_wrks_bps
004280  f1040401          ADD      r4,r4,#1
004284  77b4              STRB     r4,[r6,#0x1e]
;;;6084   		if(bps[i]._Uii>tempUS)tempUS=bps[i]._Uii;
004286  69db              LDR      r3,[r3,#0x1c]
004288  4293              CMP      r3,r2
00428a  dd00              BLE      |L1.17038|
00428c  b29a              UXTH     r2,r3
                  |L1.17038|
00428e  f1000001          ADD      r0,r0,#1              ;6079
004292  b2c0              UXTB     r0,r0                 ;6079
                  |L1.17044|
004294  4288              CMP      r0,r1                 ;6079
004296  dbe9              BLT      |L1.17004|
;;;6085   		}
;;;6086   	}
;;;6087   Ubpsmax=tempUS;
004298  f8a6204e          STRH     r2,[r6,#0x4e]
;;;6088   
;;;6089   bPARALLEL_ENOUG=0;
00429c  f886702c          STRB     r7,[r6,#0x2c]
;;;6090   bPARALLEL_NOT_ENOUG=1;
0042a0  f886a02b          STRB     r10,[r6,#0x2b]
;;;6091   
;;;6092   for(i=0;i<NUMIST;i++)
0042a4  f04f0000          MOV      r0,#0
;;;6093   	{
;;;6094   	if(bps[i]._Ti>=TSIGN)
0042a8  4a61              LDR      r2,|L1.17456|
0042aa  f9b23000          LDRSH    r3,[r2,#0]
;;;6095   		{
;;;6096   		bPARALLEL_ENOUG=1;
;;;6097   		}
;;;6098   	if(bps[i]._Ti>=(TSIGN-5))
0042ae  f1a30405          SUB      r4,r3,#5
0042b2  e011              B        |L1.17112|
                  |L1.17076|
0042b4  ebc002c0          RSB      r2,r0,r0,LSL #3       ;6094
0042b8  eb021200          ADD      r2,r2,r0,LSL #4       ;6094
0042bc  eb080282          ADD      r2,r8,r2,LSL #2       ;6094
0042c0  6a92              LDR      r2,[r2,#0x28]         ;6094
0042c2  429a              CMP      r2,r3                 ;6094
0042c4  db01              BLT      |L1.17098|
0042c6  f886a02c          STRB     r10,[r6,#0x2c]        ;6096
                  |L1.17098|
0042ca  42a2              CMP      r2,r4
0042cc  db01              BLT      |L1.17106|
;;;6099   		{
;;;6100   		bPARALLEL_NOT_ENOUG=0;
0042ce  f886702b          STRB     r7,[r6,#0x2b]
                  |L1.17106|
0042d2  f1000001          ADD      r0,r0,#1              ;6092
0042d6  b2c0              UXTB     r0,r0                 ;6092
                  |L1.17112|
0042d8  4288              CMP      r0,r1                 ;6092
0042da  dbeb              BLT      |L1.17076|
;;;6101   		}
;;;6102   	}
;;;6103   
;;;6104   if(bPARALLEL_ENOUG==1)
0042dc  f896002c          LDRB     r0,[r6,#0x2c]  ; bPARALLEL_ENOUG
0042e0  2801              CMP      r0,#1
0042e2  d00a              BEQ      |L1.17146|
;;;6105   	{
;;;6106   	bPARALLEL=1;
;;;6107   	}
;;;6108   else if(bPARALLEL && bPARALLEL_NOT_ENOUG)
0042e4  f896002d          LDRB     r0,[r6,#0x2d]  ; bPARALLEL
0042e8  2800              CMP      r0,#0
0042ea  d005              BEQ      |L1.17144|
0042ec  f896002b          LDRB     r0,[r6,#0x2b]  ; bPARALLEL_NOT_ENOUG
0042f0  2800              CMP      r0,#0
0042f2  d001              BEQ      |L1.17144|
;;;6109   	{
;;;6110   	bPARALLEL=0;
0042f4  f886702d          STRB     r7,[r6,#0x2d]
                  |L1.17144|
;;;6111   	}
;;;6112   }
0042f8  e668              B        |L1.16332|
                  |L1.17146|
0042fa  f886a02d          STRB     r10,[r6,#0x2d]        ;6106
0042fe  e665              B        |L1.16332|
;;;6113   
                          ENDP

                  powerAntiAliasingHndl PROC
;;;6120   //-----------------------------------------------
;;;6121   void powerAntiAliasingHndl(void)
004300  b570              PUSH     {r4-r6,lr}
;;;6122   {
;;;6123   if((power_summary_tempo/10UL)==(power_summary_tempo_old/10UL))
004302  230a              MOVS     r3,#0xa
004304  4c4c              LDR      r4,|L1.17464|
004306  484b              LDR      r0,|L1.17460|
;;;6124   	{
;;;6125   	if(powerSummaryCnt<15)powerSummaryCnt++;
;;;6126   	if(powerSummaryCnt>=10)
;;;6127   		{
;;;6128   		power_summary=power_summary_tempo;
;;;6129   		}
;;;6130   	}
;;;6131   else powerSummaryCnt=0;
004308  2500              MOVS     r5,#0
00430a  6822              LDR      r2,[r4,#0]            ;6123  ; power_summary_tempo_old
00430c  6800              LDR      r0,[r0,#0]            ;6123  ; power_summary_tempo
00430e  fbb2f6f3          UDIV     r6,r2,r3              ;6123
004312  fbb0f1f3          UDIV     r1,r0,r3              ;6123
004316  4a49              LDR      r2,|L1.17468|
004318  42b1              CMP      r1,r6                 ;6123
00431a  d10b              BNE      |L1.17204|
00431c  7811              LDRB     r1,[r2,#0]            ;6125  ; powerSummaryCnt
00431e  290f              CMP      r1,#0xf               ;6125
004320  d202              BCS      |L1.17192|
004322  f1010101          ADD      r1,r1,#1              ;6125
004326  7011              STRB     r1,[r2,#0]            ;6125
                  |L1.17192|
004328  7811              LDRB     r1,[r2,#0]            ;6126  ; powerSummaryCnt
00432a  290a              CMP      r1,#0xa               ;6126
00432c  d303              BCC      |L1.17206|
00432e  4944              LDR      r1,|L1.17472|
004330  6008              STR      r0,[r1,#0]            ;6128  ; power_summary
004332  e000              B        |L1.17206|
                  |L1.17204|
004334  7015              STRB     r5,[r2,#0]
                  |L1.17206|
;;;6132   power_summary_tempo_old=power_summary_tempo;
004336  6020              STR      r0,[r4,#0]  ; power_summary_tempo_old
;;;6133   
;;;6134   if((power_current_tempo/10UL)==(power_current_tempo_old/10UL))
004338  4842              LDR      r0,|L1.17476|
00433a  4c43              LDR      r4,|L1.17480|
00433c  f9b00000          LDRSH    r0,[r0,#0]  ; power_current_tempo
004340  f9b42000          LDRSH    r2,[r4,#0]  ; power_current_tempo_old
004344  fbb0f1f3          UDIV     r1,r0,r3
004348  fbb2f3f3          UDIV     r3,r2,r3
;;;6135   	{
;;;6136   	if(powerCurrentCnt<15)powerCurrentCnt++;
00434c  4a3f              LDR      r2,|L1.17484|
00434e  4299              CMP      r1,r3                 ;6134
004350  d10b              BNE      |L1.17258|
004352  7811              LDRB     r1,[r2,#0]  ; powerCurrentCnt
004354  290f              CMP      r1,#0xf
004356  d202              BCS      |L1.17246|
004358  f1010101          ADD      r1,r1,#1
00435c  7011              STRB     r1,[r2,#0]
                  |L1.17246|
;;;6137   	if(powerCurrentCnt>=10)
00435e  7811              LDRB     r1,[r2,#0]  ; powerCurrentCnt
004360  290a              CMP      r1,#0xa
004362  d303              BCC      |L1.17260|
;;;6138   		{
;;;6139   		power_current=power_current_tempo;
004364  493a              LDR      r1,|L1.17488|
004366  8008              STRH     r0,[r1,#0]
004368  e000              B        |L1.17260|
                  |L1.17258|
;;;6140   		}
;;;6141   	}
;;;6142   else powerCurrentCnt=0;
00436a  7015              STRB     r5,[r2,#0]
                  |L1.17260|
;;;6143   power_current_tempo_old=power_current_tempo;
00436c  8020              STRH     r0,[r4,#0]
;;;6144   }
00436e  bd70              POP      {r4-r6,pc}
;;;6145   
                          ENDP

                  energometr_hndl PROC
;;;6255   //-----------------------------------------------
;;;6256   void energometr_hndl(void)
004370  4770              BX       lr
;;;6257   {
;;;6258   //2F 3F 21 0D 0A 
;;;6259   //05 33 0A 2F 45 4B 54 35 43 45 31 30 32 4D 76 30 31 0D 0A 
;;;6260   //2F 3F 21 0D 0A 
;;;6261   //05 33 0A 2F 45 4B 54 35 43 45 31 30 32 4D 76 30 31 0D 0A 
;;;6262   //06 30 35 31 0D 0A 
;;;6263   //06 33 0A 01 50 30 02 28 31 31 38 36 35 32 39 32 32 29 03 2A 
;;;6264   
;;;6265   #ifdef CE102M_ENABLED
;;;6266   /*if
;;;6267   uart_out1 (5,0xaf,0x3f,0x21,0x8d,0x0a,0);*/
;;;6268   
;;;6269   if(read_power_cnt_main_cnt)
;;;6270   	{
;;;6271   	read_power_cnt_main_cnt--;
;;;6272   	if(read_power_cnt_main_cnt==0)
;;;6273   		{
;;;6274   		rx_read_power_cnt_phase=0;
;;;6275   		if(bENERGOMETR_UIP==0)bENERGOMETR_UIP=1;
;;;6276   		else if(bENERGOMETR_UIP==1)bENERGOMETR_UIP=2;
;;;6277   		else bENERGOMETR_UIP=0;
;;;6278   		//bENERGOMETR_UIP=2;
;;;6279   		}
;;;6280   	}
;;;6281   
;;;6282   if (rx_read_power_cnt_phase==0)
;;;6283   	{
;;;6284   	char command_with_crc[20];
;;;6285   	
;;;6286      	command_with_crc[0]=0xaf;  // /
;;;6287   	command_with_crc[1]=0x3f;  // ?
;;;6288   	command_with_crc[2]=0x21;  // !
;;;6289   	command_with_crc[3]=0x8d;  // CR
;;;6290   	command_with_crc[4]=0x0a;  // LF
;;;6291   
;;;6292   	uart_out__adr1(command_with_crc,5);
;;;6293   
;;;6294   	rx_wr_index1=0;
;;;6295   	rx_read_power_cnt_phase=1;
;;;6296   
;;;6297   	read_power_cnt_main_cnt=50;
;;;6298   	}
;;;6299   if ((rx_read_power_cnt_phase==2)&&(!ce102m_delayCnt))
;;;6300   	{
;;;6301   	char command_with_crc[20];
;;;6302   	
;;;6303   	command_with_crc[0]=0x06;  //  
;;;6304   	command_with_crc[1]=0x30;  // 0
;;;6305   	command_with_crc[2]=0x35;  // 5
;;;6306   	command_with_crc[3]=0xb1;  // 1
;;;6307   	command_with_crc[4]=0x8d;  // CR
;;;6308   	command_with_crc[5]=0x0a;  // LF
;;;6309   	
;;;6310   	uart_out__adr1(command_with_crc,6);
;;;6311   	
;;;6312   	rx_wr_index1=0;
;;;6313   	rx_read_power_cnt_phase=3;
;;;6314   
;;;6315   	read_power_cnt_main_cnt=50;
;;;6316   	}  
;;;6317   
;;;6318   if ((rx_read_power_cnt_phase==4)&&(!ce102m_delayCnt))
;;;6319   	{
;;;6320   	char command_with_crc[20];
;;;6321   	
;;;6322   	command_with_crc[0]=0x81;  //  
;;;6323   	command_with_crc[1]=0xd2;  // 0
;;;6324   	command_with_crc[2]=0xb1;  // 5
;;;6325   	command_with_crc[3]=0x82;  // 1
;;;6326   	command_with_crc[4]=0x56;  // CR
;;;6327   	command_with_crc[5]=0xcf;  // LF
;;;6328   	command_with_crc[6]=0xcc;  // 1
;;;6329   	command_with_crc[7]=0xd4;  // CR
;;;6330   	command_with_crc[8]=0x41;  // LF
;;;6331   	command_with_crc[9]=0x28;  // 1
;;;6332   	command_with_crc[10]=0xa9;  // CR
;;;6333   	command_with_crc[11]=0x03;  // LF
;;;6334   	command_with_crc[12]=0x5f;  // LF
;;;6335   		
;;;6336   	uart_out__adr1(command_with_crc,13);
;;;6337   	
;;;6338   	rx_wr_index1=0;
;;;6339   	rx_read_power_cnt_phase=5;
;;;6340   
;;;6341   	read_power_cnt_main_cnt=50;
;;;6342   	}  
;;;6343   
;;;6344   if ((rx_read_power_cnt_phase==8)&&(!ce102m_delayCnt))
;;;6345   	{
;;;6346   	char command_with_crc[20];
;;;6347   	
;;;6348   	command_with_crc[0]=0x81;  //  
;;;6349   	command_with_crc[1]=0xd2;  // 0
;;;6350   	command_with_crc[2]=0xb1;  // 5
;;;6351   	command_with_crc[3]=0x82;  // 1
;;;6352   	command_with_crc[4]=0xc3;  // CR
;;;6353   	command_with_crc[5]=0x55;  // LF
;;;6354   	command_with_crc[6]=0xd2;  // 1
;;;6355   	command_with_crc[7]=0xd2;  // CR
;;;6356   	command_with_crc[8]=0xc5;  // LF
;;;6357   	command_with_crc[9]=0x28;  // 1
;;;6358   	command_with_crc[10]=0xa9;  // CR
;;;6359   	command_with_crc[11]=0x03;  // LF
;;;6360   	command_with_crc[12]=0x5a;  // LF
;;;6361   		
;;;6362   	uart_out__adr1(command_with_crc,13);
;;;6363   	
;;;6364   	rx_wr_index1=0;
;;;6365   	rx_read_power_cnt_phase=9;
;;;6366   
;;;6367   	read_power_cnt_main_cnt=50;
;;;6368   	}  
;;;6369   
;;;6370   if ((rx_read_power_cnt_phase==20)&&(!ce102m_delayCnt))
;;;6371   	{
;;;6372   	char command_with_crc[20];
;;;6373   	
;;;6374   	command_with_crc[0]=0x81;  //  		01
;;;6375   	command_with_crc[1]=0xd2;  // R		52
;;;6376   	command_with_crc[2]=0xb1;  // 1		31
;;;6377   	command_with_crc[3]=0x82;  // 		02
;;;6378   	command_with_crc[4]=0x50;  // P		50
;;;6379   	command_with_crc[5]=0xcf;  // O	  	4f
;;;6380   	command_with_crc[6]=0xd7;  // W		57
;;;6381   	command_with_crc[7]=0xc5;  // E		45
;;;6382   	command_with_crc[8]=0x50;  // P		50
;;;6383   	command_with_crc[9]=0x28;  // (		28
;;;6384   	command_with_crc[10]=0xa9;  // )	29
;;;6385   	command_with_crc[11]=0x03;  // 		03
;;;6386   	command_with_crc[12]=0xe4;  // d	64
;;;6387   		
;;;6388   	uart_out__adr1(command_with_crc,13);
;;;6389   	
;;;6390   	rx_wr_index1=0;
;;;6391   	rx_read_power_cnt_phase=21;
;;;6392   
;;;6393   	read_power_cnt_main_cnt=50;
;;;6394   	}  
;;;6395   
;;;6396   
;;;6397   #endif
;;;6398   }
;;;6399   
                          ENDP

                  ips_current_average_hndl PROC
;;;6400   //-----------------------------------------------
;;;6401   void ips_current_average_hndl(void)
004372  e92d4ff0          PUSH     {r4-r11,lr}
;;;6402   {
004376  b089              SUB      sp,sp,#0x24
;;;6403   
;;;6404   if(++ica_timer_cnt>=10) 
004378  4e36              LDR      r6,|L1.17492|
;;;6405   	{
;;;6406   	ica_timer_cnt=0;
00437a  2400              MOVS     r4,#0
00437c  7830              LDRB     r0,[r6,#0]            ;6404  ; ica_timer_cnt
00437e  1c40              ADDS     r0,r0,#1              ;6404
004380  b2c0              UXTB     r0,r0                 ;6404
004382  7030              STRB     r0,[r6,#0]            ;6404
004384  280a              CMP      r0,#0xa               ;6404
004386  d300              BCC      |L1.17290|
004388  7034              STRB     r4,[r6,#0]
                  |L1.17290|
;;;6407   	}
;;;6408   
;;;6409   if((ica_timer_cnt==0) && (num_of_wrks_bps)&&((spc_stat==spcOFF)&&(vz1_stat==vz1sOFF)&&(vz2_stat==vz2sOFF)&&(sp_ch_stat==scsOFF)))
00438a  7830              LDRB     r0,[r6,#0]  ; ica_timer_cnt
00438c  4f32              LDR      r7,|L1.17496|
;;;6410   	{
;;;6411   	
;;;6412   	ica_plazma[0]++;
;;;6413   
;;;6414   	ica_my_current=bps_I;
;;;6415   
;;;6416   	if((ica_my_current>ica_your_current)&&((ica_my_current-ica_your_current)>=5)&&((ICA_EN==1)||((ICA_EN==2)&&(ica_cntrl_hndl_cnt>5))))
00438e  f8dfb0cc          LDR      r11,|L1.17500|
004392  4d20              LDR      r5,|L1.17428|
004394  bbe8              CBNZ     r0,|L1.17426|
004396  7fa8              LDRB     r0,[r5,#0x1e]         ;6409  ; num_of_wrks_bps
004398  b3d8              CBZ      r0,|L1.17426|
00439a  f8950023          LDRB     r0,[r5,#0x23]         ;6409  ; spc_stat
00439e  7969              LDRB     r1,[r5,#5]            ;6409  ; vz1_stat
0043a0  4308              ORRS     r0,r0,r1              ;6409
0043a2  79e9              LDRB     r1,[r5,#7]            ;6409  ; vz2_stat
0043a4  4308              ORRS     r0,r0,r1              ;6409
0043a6  7839              LDRB     r1,[r7,#0]            ;6409  ; sp_ch_stat
0043a8  4308              ORRS     r0,r0,r1              ;6409
0043aa  d17e              BNE      |L1.17578|
0043ac  f8df90b0          LDR      r9,|L1.17504|
0043b0  f8990000          LDRB     r0,[r9,#0]            ;6412  ; ica_plazma
0043b4  f1000001          ADD      r0,r0,#1              ;6412
0043b8  f8890000          STRB     r0,[r9,#0]            ;6412
0043bc  4829              LDR      r0,|L1.17508|
0043be  f9b01000          LDRSH    r1,[r0,#0]            ;6414  ; bps_I
0043c2  4829              LDR      r0,|L1.17512|
0043c4  8001              STRH     r1,[r0,#0]            ;6414
0043c6  4829              LDR      r0,|L1.17516|
;;;6417   		{
;;;6418   		ica_plazma[1]++;
;;;6419   		ica_u_necc--;
0043c8  f8dfa0a4          LDR      r10,|L1.17520|
0043cc  f9b02000          LDRSH    r2,[r0,#0]            ;6416  ; ica_your_current
0043d0  4648              MOV      r0,r9                 ;6412
0043d2  f9bac000          LDRSH    r12,[r10,#0]
0043d6  7843              LDRB     r3,[r0,#1]            ;6418
0043d8  4826              LDR      r0,|L1.17524|
0043da  4291              CMP      r1,r2                 ;6416
0043dc  f9b08000          LDRSH    r8,[r0,#0]            ;6416
0043e0  4658              MOV      r0,r11                ;6416
0043e2  f9b00000          LDRSH    r0,[r0,#0]            ;6416
0043e6  dd47              BLE      |L1.17528|
0043e8  eba10e02          SUB      lr,r1,r2              ;6416
0043ec  f1be0f05          CMP      lr,#5                 ;6416
0043f0  db42              BLT      |L1.17528|
0043f2  2801              CMP      r0,#1                 ;6416
0043f4  d004              BEQ      |L1.17408|
0043f6  2802              CMP      r0,#2                 ;6416
0043f8  d13e              BNE      |L1.17528|
0043fa  f1b80f05          CMP      r8,#5                 ;6416
0043fe  dd3b              BLE      |L1.17528|
                  |L1.17408|
004400  f1030301          ADD      r3,r3,#1              ;6418
004404  f8893001          STRB     r3,[r9,#1]            ;6418
004408  f1ac0c01          SUB      r12,r12,#1
00440c  f8aac000          STRH     r12,[r10,#0]
004410  e046              B        |L1.17568|
                  |L1.17426|
004412  e04a              B        |L1.17578|
                  |L1.17428|
                          DCD      ||area_number.25||
                  |L1.17432|
                          DCD      bps
                  |L1.17436|
                          DCD      NUMIST
                  |L1.17440|
                          DCD      mess_data
                  |L1.17444|
                          DCD      num_necc
                  |L1.17448|
                          DCD      main_1Hz_cnt
                  |L1.17452|
                          DCD      ipsBlckStat
                  |L1.17456|
                          DCD      TSIGN
                  |L1.17460|
                          DCD      power_summary_tempo
                  |L1.17464|
                          DCD      power_summary_tempo_old
                  |L1.17468|
                          DCD      powerSummaryCnt
                  |L1.17472|
                          DCD      power_summary
                  |L1.17476|
                          DCD      power_current_tempo
                  |L1.17480|
                          DCD      power_current_tempo_old
                  |L1.17484|
                          DCD      powerCurrentCnt
                  |L1.17488|
                          DCD      power_current
                  |L1.17492|
                          DCD      ica_timer_cnt
                  |L1.17496|
                          DCD      sp_ch_stat
                  |L1.17500|
                          DCD      ICA_EN
                  |L1.17504|
                          DCD      ica_plazma
                  |L1.17508|
                          DCD      bps_I
                  |L1.17512|
                          DCD      ica_my_current
                  |L1.17516|
                          DCD      ica_your_current
                  |L1.17520|
                          DCD      ica_u_necc
                  |L1.17524|
                          DCD      ica_cntrl_hndl_cnt
                  |L1.17528|
;;;6420   		}
;;;6421   	else if((ica_my_current<ica_your_current)&&((ica_your_current-ica_my_current)>=5)&&((ICA_EN==1)||((ICA_EN==2)&&(ica_cntrl_hndl_cnt>5))))
004478  4291              CMP      r1,r2
00447a  da11              BGE      |L1.17568|
00447c  1a51              SUBS     r1,r2,r1
00447e  2905              CMP      r1,#5
004480  db0e              BLT      |L1.17568|
004482  2801              CMP      r0,#1
004484  d004              BEQ      |L1.17552|
004486  2802              CMP      r0,#2
004488  d10a              BNE      |L1.17568|
00448a  f1b80f05          CMP      r8,#5
00448e  dd07              BLE      |L1.17568|
                  |L1.17552|
;;;6422   		{
;;;6423   		ica_plazma[1]--;
004490  f1a30301          SUB      r3,r3,#1
004494  f8893001          STRB     r3,[r9,#1]
;;;6424   		ica_u_necc++;
004498  f10c0c01          ADD      r12,r12,#1
00449c  f8aac000          STRH     r12,[r10,#0]
                  |L1.17568|
;;;6425   		}
;;;6426   	gran(&ica_u_necc,-100,100);
0044a0  2264              MOVS     r2,#0x64
0044a2  4251              RSBS     r1,r2,#0
0044a4  48ff              LDR      r0,|L1.18596|
0044a6  f7fffffe          BL       gran
                  |L1.17578|
;;;6427   	}
;;;6428   
;;;6429   
;;;6430   if((ICA_EN==1)&&((spc_stat==spcOFF)&&(vz1_stat==vz1sOFF)&&(vz2_stat==vz2sOFF)&&(sp_ch_stat==scsOFF)) && (num_of_wrks_bps))
0044aa  f8bb0000          LDRH     r0,[r11,#0]  ; ICA_EN
0044ae  2801              CMP      r0,#1
0044b0  d169              BNE      |L1.17798|
0044b2  f8950023          LDRB     r0,[r5,#0x23]  ; spc_stat
0044b6  7969              LDRB     r1,[r5,#5]  ; vz1_stat
0044b8  4308              ORRS     r0,r0,r1
0044ba  79e9              LDRB     r1,[r5,#7]  ; vz2_stat
0044bc  4308              ORRS     r0,r0,r1
0044be  7839              LDRB     r1,[r7,#0]  ; sp_ch_stat
0044c0  4308              ORRS     r0,r0,r1
0044c2  d160              BNE      |L1.17798|
0044c4  7fa8              LDRB     r0,[r5,#0x1e]  ; num_of_wrks_bps
0044c6  2800              CMP      r0,#0
0044c8  d05d              BEQ      |L1.17798|
;;;6431   	{
;;;6432   	
;;;6433   	if(ica_timer_cnt==8)
0044ca  7830              LDRB     r0,[r6,#0]  ; ica_timer_cnt
;;;6434   		{
;;;6435   		char modbus_buff[20],i;
;;;6436   		short crc_temp;
;;;6437   	
;;;6438   		modbus_buff[0] = ICA_MODBUS_ADDRESS;
0044cc  4bf6              LDR      r3,|L1.18600|
;;;6439   		modbus_buff[1] = 4;
;;;6440   		modbus_buff[2] = 0;
;;;6441   		modbus_buff[3] = 2;
;;;6442   		modbus_buff[4] = 0;	
;;;6443   		modbus_buff[5] = 1;
;;;6444   	
;;;6445   		crc_temp= CRC16_2(modbus_buff,6);
;;;6446   	
;;;6447   		modbus_buff[6]= (char)crc_temp;
;;;6448   		modbus_buff[7]= (char)(crc_temp>>8);
;;;6449   	
;;;6450   		if(ICA_CH==0)
0044ce  4ff7              LDR      r7,|L1.18604|
0044d0  2808              CMP      r0,#8                 ;6433
0044d2  d05b              BEQ      |L1.17804|
;;;6451   			{
;;;6452   			for (i=0;i<8;i++)
;;;6453   				{
;;;6454   				putchar_sc16is700(modbus_buff[i]);
;;;6455   				}
;;;6456   			}
;;;6457   		else if(ICA_CH==2)
;;;6458   			{
;;;6459   			uart_out1 (5,4,0,2,0,1,0);
;;;6460   			}
;;;6461   		}
;;;6462   	else
;;;6463   		{
;;;6464   		char modbus_buff[20],i;
;;;6465   		short crc_temp, tempSSSS;
;;;6466   
;;;6467   		tempSSSS=cntrl_stat_old;
0044d4  f9b56034          LDRSH    r6,[r5,#0x34]  ; cntrl_stat_old
;;;6468   		if(	(main_kb_cnt==(TBAT*60)-21) || (main_kb_cnt==(TBAT*60)-20) || (main_kb_cnt==(TBAT*60)-19)) tempSSSS=((short)TBAT)|0x4000;
0044d8  48f5              LDR      r0,|L1.18608|
0044da  f06f0214          MVN      r2,#0x14
0044de  f9b00000          LDRSH    r0,[r0,#0]  ; TBAT
0044e2  ebc01100          RSB      r1,r0,r0,LSL #4
0044e6  eb020c81          ADD      r12,r2,r1,LSL #2
0044ea  f9b52052          LDRSH    r2,[r5,#0x52]  ; main_kb_cnt
0044ee  4594              CMP      r12,r2
0044f0  d00b              BEQ      |L1.17674|
0044f2  f06f0513          MVN      r5,#0x13
0044f6  eb050581          ADD      r5,r5,r1,LSL #2
0044fa  4295              CMP      r5,r2
0044fc  d005              BEQ      |L1.17674|
0044fe  f06f0512          MVN      r5,#0x12
004502  eb050181          ADD      r1,r5,r1,LSL #2
004506  4291              CMP      r1,r2
004508  d101              BNE      |L1.17678|
                  |L1.17674|
00450a  f4404680          ORR      r6,r0,#0x4000
                  |L1.17678|
;;;6469   
;;;6470   
;;;6471   		modbus_buff[0] = ICA_MODBUS_ADDRESS;
00450e  8818              LDRH     r0,[r3,#0]  ; ICA_MODBUS_ADDRESS
004510  f88d0010          STRB     r0,[sp,#0x10]
;;;6472   		modbus_buff[1] = 6;
004514  f04f0006          MOV      r0,#6
004518  f88d0011          STRB     r0,[sp,#0x11]
;;;6473   		modbus_buff[2] = 0;
00451c  f88d4012          STRB     r4,[sp,#0x12]
;;;6474   		modbus_buff[3] = 100;
004520  f04f0064          MOV      r0,#0x64
004524  f88d0013          STRB     r0,[sp,#0x13]
;;;6475   		modbus_buff[4] = (char)(tempSSSS/256);	
004528  ea4f70e6          ASR      r0,r6,#31
00452c  eb066010          ADD      r0,r6,r0,LSR #24
004530  ea4f2120          ASR      r1,r0,#8
004534  f88d1014          STRB     r1,[sp,#0x14]
;;;6476   		modbus_buff[5] = (char)(tempSSSS%256);
004538  4630              MOV      r0,r6
00453a  f88d0015          STRB     r0,[sp,#0x15]
;;;6477   	
;;;6478   		crc_temp= CRC16_2(modbus_buff,6);
00453e  f04f0106          MOV      r1,#6
004542  a804              ADD      r0,sp,#0x10
004544  f7fffffe          BL       CRC16_2
;;;6479   	
;;;6480   		modbus_buff[6]= (char)crc_temp;
004548  f88d0016          STRB     r0,[sp,#0x16]
;;;6481   		modbus_buff[7]= (char)(crc_temp>>8);
00454c  ea4f2020          ASR      r0,r0,#8
004550  f88d0017          STRB     r0,[sp,#0x17]
;;;6482   	
;;;6483   		crc_temp= CRC16_2(modbus_buff,6);
004554  f04f0106          MOV      r1,#6
004558  a804              ADD      r0,sp,#0x10
00455a  f7fffffe          BL       CRC16_2
;;;6484   	
;;;6485   		plazma_ica1=tempSSSS;
00455e  48d5              LDR      r0,|L1.18612|
004560  8046              STRH     r6,[r0,#2]
;;;6486   		if(ICA_CH==0)
004562  f9b70000          LDRSH    r0,[r7,#0]  ; ICA_CH
004566  b3f0              CBZ      r0,|L1.17894|
;;;6487   			{
;;;6488   			for (i=0;i<8;i++)
;;;6489   				{
;;;6490   				putchar_sc16is700(modbus_buff[i]);
;;;6491   				}
;;;6492   			}
;;;6493   		else if(ICA_CH==2)
004568  2802              CMP      r0,#2
00456a  d10c              BNE      |L1.17798|
;;;6494   			{
;;;6495   			uart_out1 (5,6,0,100,modbus_buff[4],modbus_buff[5],0);
00456c  f89d0015          LDRB     r0,[sp,#0x15]
004570  f89d1014          LDRB     r1,[sp,#0x14]
004574  e9cd0401          STRD     r0,r4,[sp,#4]
004578  9100              STR      r1,[sp,#0]
00457a  2364              MOVS     r3,#0x64
00457c  2200              MOVS     r2,#0
00457e  2106              MOVS     r1,#6
004580  2005              MOVS     r0,#5
004582  f7fffffe          BL       uart_out1
                  |L1.17798|
;;;6496   			}
;;;6497   		}
;;;6498   	}
;;;6499   }
004586  b009              ADD      sp,sp,#0x24
004588  e8bd8ff0          POP      {r4-r11,pc}
                  |L1.17804|
00458c  8818              LDRH     r0,[r3,#0]            ;6438  ; ICA_MODBUS_ADDRESS
00458e  f88d0010          STRB     r0,[sp,#0x10]         ;6438
004592  f04f0004          MOV      r0,#4                 ;6439
004596  f88d0011          STRB     r0,[sp,#0x11]         ;6439
00459a  f88d4012          STRB     r4,[sp,#0x12]         ;6440
00459e  f04f0002          MOV      r0,#2                 ;6441
0045a2  f88d0013          STRB     r0,[sp,#0x13]         ;6441
0045a6  f88d4014          STRB     r4,[sp,#0x14]         ;6442
0045aa  f04f0501          MOV      r5,#1                 ;6443
0045ae  f88d5015          STRB     r5,[sp,#0x15]         ;6443
0045b2  f04f0106          MOV      r1,#6                 ;6445
0045b6  a804              ADD      r0,sp,#0x10           ;6445
0045b8  f7fffffe          BL       CRC16_2
0045bc  f88d0016          STRB     r0,[sp,#0x16]         ;6447
0045c0  ea4f2020          ASR      r0,r0,#8              ;6448
0045c4  f88d0017          STRB     r0,[sp,#0x17]         ;6448
0045c8  f9b70000          LDRSH    r0,[r7,#0]            ;6450  ; ICA_CH
0045cc  b160              CBZ      r0,|L1.17896|
0045ce  2802              CMP      r0,#2                 ;6457
0045d0  d1d9              BNE      |L1.17798|
0045d2  e9cd4500          STRD     r4,r5,[sp,#0]         ;6459
0045d6  2302              MOVS     r3,#2                 ;6459
0045d8  2200              MOVS     r2,#0                 ;6459
0045da  2104              MOVS     r1,#4                 ;6459
0045dc  2005              MOVS     r0,#5                 ;6459
0045de  9402              STR      r4,[sp,#8]            ;6459
0045e0  f7fffffe          BL       uart_out1
0045e4  e7cf              B        |L1.17798|
                  |L1.17894|
0045e6  e00b              B        |L1.17920|
                  |L1.17896|
0045e8  f04f0400          MOV      r4,#0                 ;6452
0045ec  ad04              ADD      r5,sp,#0x10           ;6435
                  |L1.17902|
0045ee  5d28              LDRB     r0,[r5,r4]            ;6454
0045f0  f7fffffe          BL       putchar_sc16is700
0045f4  f1040401          ADD      r4,r4,#1              ;6452
0045f8  b2e4              UXTB     r4,r4                 ;6452
0045fa  2c08              CMP      r4,#8                 ;6452
0045fc  d3f7              BCC      |L1.17902|
0045fe  e7c2              B        |L1.17798|
                  |L1.17920|
004600  f04f0400          MOV      r4,#0                 ;6488
004604  ad04              ADD      r5,sp,#0x10           ;6464
                  |L1.17926|
004606  5d28              LDRB     r0,[r5,r4]            ;6490
004608  f7fffffe          BL       putchar_sc16is700
00460c  f1040401          ADD      r4,r4,#1              ;6488
004610  b2e4              UXTB     r4,r4                 ;6488
004612  2c08              CMP      r4,#8                 ;6488
004614  d3f7              BCC      |L1.17926|
004616  e7b6              B        |L1.17798|
;;;6500   
                          ENDP

                  ipsBlckHndl PROC
;;;6583   //-----------------------------------------------
;;;6584   void ipsBlckHndl(char in)
004618  b510              PUSH     {r4,lr}
;;;6585   {
;;;6586   
;;;6587   ipsBlckStat=0;
00461a  4ba7              LDR      r3,|L1.18616|
00461c  f04f0000          MOV      r0,#0
004620  8018              STRH     r0,[r3,#0]
;;;6588   if(ipsBlckSrc==1)
004622  48a6              LDR      r0,|L1.18620|
004624  f04f0401          MOV      r4,#1
;;;6589   	{
;;;6590   	if(((ipsBlckLog==0)&&(adc_buff_[11]>2000)) || ((ipsBlckLog==1)&&(adc_buff_[11]<2000))) ipsBlckStat=1;
004628  f44f62fa          MOV      r2,#0x7d0
00462c  f9b01000          LDRSH    r1,[r0,#0]            ;6588  ; ipsBlckSrc
004630  48a3              LDR      r0,|L1.18624|
004632  2901              CMP      r1,#1                 ;6588
004634  f9b00000          LDRSH    r0,[r0,#0]
004638  d006              BEQ      |L1.17992|
;;;6591   	}
;;;6592   else if(ipsBlckSrc==2)
00463a  2902              CMP      r1,#2
00463c  d10f              BNE      |L1.18014|
00463e  49a1              LDR      r1,|L1.18628|
;;;6593   	{
;;;6594   	if(((ipsBlckLog==0)&&(adc_buff_[13]>2000)) || ((ipsBlckLog==1)&&(adc_buff_[13]<2000))) ipsBlckStat=1;
004640  f9b1101a          LDRSH    r1,[r1,#0x1a]
004644  b160              CBZ      r0,|L1.18016|
004646  e00d              B        |L1.18020|
                  |L1.17992|
004648  499e              LDR      r1,|L1.18628|
00464a  f9b11016          LDRSH    r1,[r1,#0x16]         ;6590
00464e  b908              CBNZ     r0,|L1.18004|
004650  4291              CMP      r1,r2                 ;6590
004652  dc03              BGT      |L1.18012|
                  |L1.18004|
004654  2801              CMP      r0,#1                 ;6590
004656  d102              BNE      |L1.18014|
004658  4291              CMP      r1,r2                 ;6590
00465a  da00              BGE      |L1.18014|
                  |L1.18012|
00465c  801c              STRH     r4,[r3,#0]            ;6590
                  |L1.18014|
;;;6595   	}
;;;6596   }
00465e  bd10              POP      {r4,pc}
                  |L1.18016|
004660  4291              CMP      r1,r2                 ;6594
004662  dc03              BGT      |L1.18028|
                  |L1.18020|
004664  2801              CMP      r0,#1                 ;6594
004666  d1fa              BNE      |L1.18014|
004668  4291              CMP      r1,r2                 ;6594
00466a  daf8              BGE      |L1.18014|
                  |L1.18028|
00466c  801c              STRH     r4,[r3,#0]            ;6594
00466e  bd10              POP      {r4,pc}
;;;6597   
                          ENDP

                  bps_drv PROC
;;;6598   //-----------------------------------------------
;;;6599   void bps_drv(char in)
004670  e92d41f0          PUSH     {r4-r8,lr}
;;;6600   {
004674  4606              MOV      r6,r0
;;;6601   char temp;
;;;6602   
;;;6603   if (bps[in]._device!=dSRC) return;
004676  ebc600c6          RSB      r0,r6,r6,LSL #3
00467a  4993              LDR      r1,|L1.18632|
00467c  eb001006          ADD      r0,r0,r6,LSL #4
004680  f8112020          LDRB     r2,[r1,r0,LSL #2]
004684  2a03              CMP      r2,#3
004686  d177              BNE      |L1.18296|
;;;6604   temp=bps[in]._flags_tm;
004688  eb010480          ADD      r4,r1,r0,LSL #2
00468c  f8945042          LDRB     r5,[r4,#0x42]
;;;6605   if(temp&(1<<AV_T))
004690  07a8              LSLS     r0,r5,#30
004692  d517              BPL      |L1.18116|
;;;6606   	{
;;;6607   	if(bps[in]._temp_av_cnt<1200) 
004694  f9b41046          LDRSH    r1,[r4,#0x46]
004698  f44f6096          MOV      r0,#0x4b0
00469c  4281              CMP      r1,r0
00469e  da22              BGE      |L1.18150|
;;;6608   		{
;;;6609   		bps[in]._temp_av_cnt++;
0046a0  f1010101          ADD      r1,r1,#1
0046a4  b209              SXTH     r1,r1
0046a6  f8a41046          STRH     r1,[r4,#0x46]
;;;6610   		if(bps[in]._temp_av_cnt>=1200)
0046aa  4281              CMP      r1,r0
0046ac  db1b              BLT      |L1.18150|
;;;6611   			{
;;;6612   			bps[in]._temp_av_cnt=1200;
0046ae  f8a40046          STRH     r0,[r4,#0x46]
;;;6613   		   	if(!(bps[in]._av&(1<<0)))avar_bps_hndl(in,0,1);
0046b2  7860              LDRB     r0,[r4,#1]
0046b4  07c0              LSLS     r0,r0,#31
0046b6  d116              BNE      |L1.18150|
0046b8  2201              MOVS     r2,#1
0046ba  2100              MOVS     r1,#0
0046bc  4630              MOV      r0,r6
0046be  f7fffffe          BL       avar_bps_hndl
0046c2  e010              B        |L1.18150|
                  |L1.18116|
;;;6614   			}
;;;6615   		}
;;;6616   	}
;;;6617   
;;;6618   else if(!(temp&(1<<AV_T)))
;;;6619   	{
;;;6620   	if(bps[in]._temp_av_cnt) 
0046c4  f9b41046          LDRSH    r1,[r4,#0x46]
0046c8  b169              CBZ      r1,|L1.18150|
;;;6621   		{
;;;6622   		bps[in]._temp_av_cnt--;
0046ca  f1a10101          SUB      r1,r1,#1
0046ce  b208              SXTH     r0,r1
0046d0  f8a40046          STRH     r0,[r4,#0x46]
;;;6623   		if(!bps[in]._temp_av_cnt)
0046d4  b938              CBNZ     r0,|L1.18150|
;;;6624   			{
;;;6625   			if(bps[in]._av&(1<<0))avar_bps_hndl(in,0,0);
0046d6  7860              LDRB     r0,[r4,#1]
0046d8  07c0              LSLS     r0,r0,#31
0046da  d004              BEQ      |L1.18150|
0046dc  2200              MOVS     r2,#0
0046de  4611              MOV      r1,r2
0046e0  4630              MOV      r0,r6
0046e2  f7fffffe          BL       avar_bps_hndl
                  |L1.18150|
;;;6626   			}
;;;6627   		} 	
;;;6628   
;;;6629   	}
;;;6630   
;;;6631   if((temp&(1<<AVUMAX)))
0046e6  0729              LSLS     r1,r5,#28
;;;6632   	{
;;;6633   	if(bps[in]._umax_av_cnt<10) 
;;;6634   		{
;;;6635   		bps[in]._umax_av_cnt++;
;;;6636   		if(bps[in]._umax_av_cnt>=10)
;;;6637   			{ 
;;;6638   			bps[in]._umax_av_cnt=10;
0046e8  f04f070a          MOV      r7,#0xa
0046ec  f04f0000          MOV      r0,#0                 ;6613
0046f0  d515              BPL      |L1.18206|
0046f2  f9b40048          LDRSH    r0,[r4,#0x48]         ;6633
0046f6  280a              CMP      r0,#0xa               ;6633
0046f8  da26              BGE      |L1.18248|
0046fa  f1000001          ADD      r0,r0,#1              ;6635
0046fe  b200              SXTH     r0,r0                 ;6635
004700  f8a40048          STRH     r0,[r4,#0x48]         ;6635
004704  280a              CMP      r0,#0xa               ;6636
004706  db1f              BLT      |L1.18248|
004708  f8a47048          STRH     r7,[r4,#0x48]
;;;6639   			if(!(bps[in]._av&(1<<1)))avar_bps_hndl(in,1,1);
00470c  7860              LDRB     r0,[r4,#1]
00470e  0780              LSLS     r0,r0,#30
004710  d41a              BMI      |L1.18248|
004712  2201              MOVS     r2,#1
004714  4611              MOV      r1,r2
004716  4630              MOV      r0,r6
004718  f7fffffe          BL       avar_bps_hndl
00471c  e014              B        |L1.18248|
                  |L1.18206|
;;;6640   		  	/*if((K[APV]!=ON)||((apv_cnt[in,0]==0)&&(apv_cnt[in,1]==0)&&(apv_cnt[in,2]==0)&&(apv_flags[in]==afOFF)))avar_s_hndl(in,1,1);
;;;6641   			if((apv_cnt[in,0]==0)&&(apv_cnt[in,1]==0)&&(apv_cnt[in,2]==0)&&(apv_flags[in]==afON))
;;;6642   				{
;;;6643   				apv_cnt[in,0]=APV_INIT;
;;;6644   				apv_cnt[in,1]=APV_INIT;
;;;6645   				apv_cnt[in,2]=APV_INIT;
;;;6646   				apv_flags[in]=afOFF;
;;;6647   				}				*/
;;;6648   						
;;;6649   			}
;;;6650   		} 
;;;6651   	}		
;;;6652   else if(!(temp&(1<<AVUMAX)))
;;;6653   	{
;;;6654   	if(bps[in]._umax_av_cnt>0) 
00471e  f9b41048          LDRSH    r1,[r4,#0x48]
004722  2900              CMP      r1,#0
004724  dd0d              BLE      |L1.18242|
;;;6655   		{
;;;6656   		bps[in]._umax_av_cnt--;
004726  f1a10101          SUB      r1,r1,#1
00472a  b208              SXTH     r0,r1
00472c  f8a40048          STRH     r0,[r4,#0x48]
;;;6657   		if(bps[in]._umax_av_cnt==0)
004730  b950              CBNZ     r0,|L1.18248|
;;;6658   			{
;;;6659   			bps[in]._umax_av_cnt=0;
;;;6660   			avar_bps_hndl(in,1,0);
004732  f04f0200          MOV      r2,#0
004736  f04f0101          MOV      r1,#1
00473a  4630              MOV      r0,r6
00473c  f7fffffe          BL       avar_bps_hndl
004740  e002              B        |L1.18248|
                  |L1.18242|
;;;6661   	 //		apv_cnt[in,0]=0;
;;;6662   	//		apv_cnt[in,1]=0;
;;;6663   	 //		apv_cnt[in,2]=0;			
;;;6664   			}
;;;6665   		}
;;;6666   	else if(bps[in]._umax_av_cnt<0) bps[in]._umax_av_cnt=0;		 
004742  da01              BGE      |L1.18248|
004744  f8a40048          STRH     r0,[r4,#0x48]
                  |L1.18248|
;;;6667   	}
;;;6668   
;;;6669   if(temp&(1<<AVUMIN))
004748  06e8              LSLS     r0,r5,#27
00474a  d516              BPL      |L1.18298|
;;;6670   	{
;;;6671   	if(bps[in]._umin_av_cnt<10) 
00474c  f9b4004a          LDRSH    r0,[r4,#0x4a]
004750  280a              CMP      r0,#0xa
004752  da20              BGE      |L1.18326|
;;;6672   		{
;;;6673   		bps[in]._umin_av_cnt++;
004754  f1000001          ADD      r0,r0,#1
004758  b200              SXTH     r0,r0
00475a  f8a4004a          STRH     r0,[r4,#0x4a]
;;;6674   		if(bps[in]._umin_av_cnt>=10)
00475e  280a              CMP      r0,#0xa
004760  db19              BLT      |L1.18326|
;;;6675   			{ 
;;;6676   			bps[in]._umin_av_cnt=10;
004762  f8a4704a          STRH     r7,[r4,#0x4a]
;;;6677   			if(!(bps[in]._av&(1<<2)))avar_bps_hndl(in,2,1);
004766  7860              LDRB     r0,[r4,#1]
004768  0740              LSLS     r0,r0,#29
00476a  d414              BMI      |L1.18326|
00476c  2201              MOVS     r2,#1
00476e  2102              MOVS     r1,#2
004770  4630              MOV      r0,r6
004772  f7fffffe          BL       avar_bps_hndl
004776  e00e              B        |L1.18326|
                  |L1.18296|
004778  e047              B        |L1.18442|
                  |L1.18298|
;;;6678   		  	/*	if((K[APV]!=ON)||((apv_cnt[in,0]==0)&&(apv_cnt[in,1]==0)&&(apv_cnt[in,2]==0)&&(apv_flags[in]==afOFF)))avar_s_hndl(in,2,1);
;;;6679   			if((apv_cnt[in,0]==0)&&(apv_cnt[in,1]==0)&&(apv_cnt[in,2]==0)&&(apv_flags[in]==afON))
;;;6680   				{
;;;6681   				apv_cnt[in,0]=APV_INIT;
;;;6682   				apv_cnt[in,1]=APV_INIT;
;;;6683   				apv_cnt[in,2]=APV_INIT;
;;;6684   				apv_flags[in]=afOFF;
;;;6685   				}*/				
;;;6686   			}
;;;6687   		} 
;;;6688   	}	
;;;6689   	
;;;6690   else if(!(temp&(1<<AVUMIN)))
;;;6691   	{
;;;6692   	if(bps[in]._umin_av_cnt) 
00477a  f9b4004a          LDRSH    r0,[r4,#0x4a]
00477e  b150              CBZ      r0,|L1.18326|
;;;6693   		{
;;;6694   		bps[in]._umin_av_cnt--;
004780  f1a00001          SUB      r0,r0,#1
004784  b201              SXTH     r1,r0
004786  f8a4104a          STRH     r1,[r4,#0x4a]
;;;6695   		if(bps[in]._umin_av_cnt==0)
00478a  b921              CBNZ     r1,|L1.18326|
;;;6696   			{
;;;6697   			bps[in]._umin_av_cnt=0;
;;;6698   			avar_bps_hndl(in,2,0);
00478c  2200              MOVS     r2,#0
00478e  2102              MOVS     r1,#2
004790  4630              MOV      r0,r6
004792  f7fffffe          BL       avar_bps_hndl
                  |L1.18326|
;;;6699   		//	apv_cnt[in,0]=0;
;;;6700   		//	apv_cnt[in,1]=0;
;;;6701   		//	apv_cnt[in,2]=0;
;;;6702   			}
;;;6703   		}
;;;6704   	else if(bps[in]._umin_av_cnt>10)bps[in]._umin_av_cnt--;	 
;;;6705   	}
;;;6706   
;;;6707   //bps[in]._state=bsOFF;
;;;6708   
;;;6709   if (bps[in]._av&0x0f)					bps[in]._state=bsAV;
004796  7860              LDRB     r0,[r4,#1]
004798  0700              LSLS     r0,r0,#28
00479a  d003              BEQ      |L1.18340|
00479c  f04f0004          MOV      r0,#4
0047a0  70a0              STRB     r0,[r4,#2]
0047a2  e017              B        |L1.18388|
                  |L1.18340|
;;;6710   else if ( (net_av) && (bps[in]._cnt>20)/*&& 
0047a4  4849              LDR      r0,|L1.18636|
0047a6  7800              LDRB     r0,[r0,#0]  ; net_av
0047a8  b130              CBZ      r0,|L1.18360|
0047aa  78e0              LDRB     r0,[r4,#3]
0047ac  2814              CMP      r0,#0x14
0047ae  d903              BLS      |L1.18360|
;;;6711   		(bps[in]._Uii<200)*/)				bps[in]._state=bsOFF_AV_NET;
0047b0  f04f0005          MOV      r0,#5
0047b4  70a0              STRB     r0,[r4,#2]
0047b6  e00d              B        |L1.18388|
                  |L1.18360|
;;;6712   else if (bps[in]._flags_tm&BIN8(100000))	bps[in]._state=bsRDY;
0047b8  f8940042          LDRB     r0,[r4,#0x42]
0047bc  0680              LSLS     r0,r0,#26
0047be  d503              BPL      |L1.18376|
0047c0  f04f0002          MOV      r0,#2
0047c4  70a0              STRB     r0,[r4,#2]
0047c6  e005              B        |L1.18388|
                  |L1.18376|
;;;6713   else if (bps[in]._cnt<20)				bps[in]._state=bsWRK;
0047c8  78e0              LDRB     r0,[r4,#3]
0047ca  2814              CMP      r0,#0x14
0047cc  d202              BCS      |L1.18388|
0047ce  f04f0001          MOV      r0,#1
0047d2  70a0              STRB     r0,[r4,#2]
                  |L1.18388|
;;;6714   
;;;6715   
;;;6716   
;;;6717   //else if(bps[in]._flags_tm&BIN8(100000)) bps[in]._state=ssBL;
;;;6718   //else if((!(bps[in]._flags_tm&BIN8(100000)))&&(net_U>100))bps[in]._state=ssWRK;
;;;6719   //else bps[0]._state=ssNOT;
;;;6720   
;;;6721   //bps[in]._is_ready=0;
;;;6722   //bps[in]._is_wrk=0;
;;;6723   //if(bps[in]._av_net) bps[in]._flags_bp='N';// не подключен
;;;6724   //else if(bps[in]._av_u_max) bps[in]._flags_bp='P';// завышено напряжение(u_.av_.bAS1T)) bps_state[0]=ssAV;
;;;6725   //else if(bps[in]._av_u_min) bps[in]._flags_bp='M';// занижено напряжение
;;;6726   //else if(bps[in]._av_temper) bps[in]._flags_bp='T';// температура
;;;6727   //else if(bps[in]._flags_tm&BIN8(100000)) 
;;;6728   //	{
;;;6729   //	bps[in]._flags_bp='B';// заблокирован
;;;6730   //	bps[in]._is_ready=1;
;;;6731   //	}
;;;6732   //else if((!(bps[in]._flags_tm&BIN8(100000)))&&(net_U>100))
;;;6733   //     {
;;;6734   //     bps[in]._flags_bp='W';// работает
;;;6735   //     bps[in]._is_ready=1;
;;;6736   //     bps[in]._is_wrk=1;
;;;6737        
;;;6738   //     }
;;;6739   //else bps[in]._is_ready=1;     
;;;6740   
;;;6741   
;;;6742   
;;;6743   
;;;6744   
;;;6745   /*
;;;6746   bps[in]._flags_tu&=BIN8(11111110);
;;;6747   if(bps[in]._ist_blok_cnt)
;;;6748   	{
;;;6749   	bps[in]._ist_blok_cnt--;
;;;6750   	bps[in]._flags_tu|=BIN8(1);
;;;6751   	}
;;;6752   
;;;6753   	   */ 
;;;6754   
;;;6755   //Пересброс БПСа при потере связи
;;;6756   if(bps[in]._cnt>=10) bps[in]._flags_tu|=BIN8(10000000);
0047d4  78e0              LDRB     r0,[r4,#3]
0047d6  280a              CMP      r0,#0xa
0047d8  d306              BCC      |L1.18408|
0047da  f894002c          LDRB     r0,[r4,#0x2c]
0047de  f0400080          ORR      r0,r0,#0x80
0047e2  f884002c          STRB     r0,[r4,#0x2c]
0047e6  e005              B        |L1.18420|
                  |L1.18408|
;;;6757   else bps[in]._flags_tu&=BIN8(1111111);
0047e8  f894002c          LDRB     r0,[r4,#0x2c]
0047ec  f000007f          AND      r0,r0,#0x7f
0047f0  f884002c          STRB     r0,[r4,#0x2c]
                  |L1.18420|
;;;6758   	
;;;6759   bps[in]._vol_u=cntrl_stat+bps[in]._x_;	
0047f4  492f              LDR      r1,|L1.18612|
0047f6  f9b40050          LDRSH    r0,[r4,#0x50]
0047fa  3980              SUBS     r1,r1,#0x80
0047fc  f9b11032          LDRSH    r1,[r1,#0x32]  ; cntrl_stat
004800  4408              ADD      r0,r0,r1
004802  6320              STR      r0,[r4,#0x30]
;;;6760   bps[in]._vol_i=1000;
004804  f44f707a          MOV      r0,#0x3e8
004808  6360              STR      r0,[r4,#0x34]
                  |L1.18442|
;;;6761   //bps[0]._vol_u=500;
;;;6762   //bps[1]._vol_u=cntrl_stat_pwm; 
;;;6763   }
00480a  e8bd81f0          POP      {r4-r8,pc}
;;;6764   
                          ENDP

                  avt_hndl PROC
;;;6765   //-----------------------------------------------
;;;6766   void avt_hndl(void)
00480e  b570              PUSH     {r4-r6,lr}
;;;6767   {
;;;6768   char i;
;;;6769   for(i=0;i<12;i++)
004810  f04f0000          MOV      r0,#0
;;;6770   	{
;;;6771   	if(eb2_data_short[6]&(1<<i))
004814  492e              LDR      r1,|L1.18640|
;;;6772   		{
;;;6773   		avt_stat[i]=avtON;
004816  4d2f              LDR      r5,|L1.18644|
004818  f04f0401          MOV      r4,#1                 ;6771
00481c  f9b1200c          LDRSH    r2,[r1,#0xc]          ;6771
004820  4603              MOV      r3,r0                 ;6769
                  |L1.18466|
004822  fa04f100          LSL      r1,r4,r0              ;6771
004826  420a              TST      r2,r1                 ;6771
004828  d001              BEQ      |L1.18478|
00482a  542c              STRB     r4,[r5,r0]
00482c  e000              B        |L1.18480|
                  |L1.18478|
;;;6774   		}
;;;6775   	else avt_stat[i]=avtOFF;
00482e  542b              STRB     r3,[r5,r0]
                  |L1.18480|
004830  f1000001          ADD      r0,r0,#1              ;6769
004834  b2c0              UXTB     r0,r0                 ;6769
004836  280c              CMP      r0,#0xc               ;6769
004838  d3f3              BCC      |L1.18466|
;;;6776   	}
;;;6777   
;;;6778   if((avt_stat_old[0]!=avt_stat[0])&&(NUMAVT>=1))
00483a  4e27              LDR      r6,|L1.18648|
00483c  7828              LDRB     r0,[r5,#0]  ; avt_stat
00483e  4c27              LDR      r4,|L1.18652|
004840  7831              LDRB     r1,[r6,#0]  ; avt_stat_old
004842  4281              CMP      r1,r0
004844  d00b              BEQ      |L1.18526|
004846  f9b41000          LDRSH    r1,[r4,#0]  ; NUMAVT
00484a  2901              CMP      r1,#1
00484c  db07              BLT      |L1.18526|
;;;6779   	{
;;;6780   	if(avt_stat[0]==avtON) 	snmp_trap_send("Avtomat #1 is ON ",11,1,1);
00484e  2801              CMP      r0,#1
004850  d07e              BEQ      |L1.18768|
;;;6781   	else 				snmp_trap_send("Avtomat #1 is OFF",11,1,0);
004852  2300              MOVS     r3,#0
004854  2201              MOVS     r2,#1
004856  210b              MOVS     r1,#0xb
004858  a021              ADR      r0,|L1.18656|
00485a  f7fffffe          BL       snmp_trap_send
                  |L1.18526|
;;;6782   	}
;;;6783   if((avt_stat_old[1]!=avt_stat[1])&&(NUMAVT>=2))
00485e  7871              LDRB     r1,[r6,#1]  ; avt_stat_old
004860  7868              LDRB     r0,[r5,#1]  ; avt_stat
004862  4281              CMP      r1,r0
004864  d00b              BEQ      |L1.18558|
004866  f9b41000          LDRSH    r1,[r4,#0]  ; NUMAVT
00486a  2902              CMP      r1,#2
00486c  db07              BLT      |L1.18558|
;;;6784   	{
;;;6785   	if(avt_stat[1]==avtON) 	snmp_trap_send("Avtomat #2 is ON ",11,2,1);
00486e  2801              CMP      r0,#1
004870  d06f              BEQ      |L1.18770|
;;;6786   	else 				snmp_trap_send("Avtomat #2 is OFF",11,2,0);
004872  2300              MOVS     r3,#0
004874  2202              MOVS     r2,#2
004876  210b              MOVS     r1,#0xb
004878  a01e              ADR      r0,|L1.18676|
00487a  f7fffffe          BL       snmp_trap_send
                  |L1.18558|
;;;6787   	}
;;;6788   if((avt_stat_old[2]!=avt_stat[2])&&(NUMAVT>=3))
00487e  78b1              LDRB     r1,[r6,#2]  ; avt_stat_old
004880  78a8              LDRB     r0,[r5,#2]  ; avt_stat
004882  4281              CMP      r1,r0
004884  d00b              BEQ      |L1.18590|
004886  f9b41000          LDRSH    r1,[r4,#0]  ; NUMAVT
00488a  2903              CMP      r1,#3
00488c  db07              BLT      |L1.18590|
;;;6789   	{
;;;6790   	if(avt_stat[2]==avtON) 	snmp_trap_send("Avtomat #3 is ON ",11,3,1);
00488e  2801              CMP      r0,#1
004890  d07e              BEQ      |L1.18832|
;;;6791   	else 				snmp_trap_send("Avtomat #3 is OFF",11,3,0);
004892  2300              MOVS     r3,#0
004894  2203              MOVS     r2,#3
004896  210b              MOVS     r1,#0xb
004898  a01b              ADR      r0,|L1.18696|
00489a  f7fffffe          BL       snmp_trap_send
                  |L1.18590|
;;;6792   	}
;;;6793   if((avt_stat_old[3]!=avt_stat[3])&&(NUMAVT>=4))
00489e  78f1              LDRB     r1,[r6,#3]  ; avt_stat_old
0048a0  78e8              LDRB     r0,[r5,#3]  ; avt_stat
0048a2  e03b              B        |L1.18716|
                  |L1.18596|
                          DCD      ica_u_necc
                  |L1.18600|
                          DCD      ICA_MODBUS_ADDRESS
                  |L1.18604|
                          DCD      ICA_CH
                  |L1.18608|
                          DCD      TBAT
                  |L1.18612|
                          DCD      ||area_number.25||+0x80
                  |L1.18616|
                          DCD      ipsBlckStat
                  |L1.18620|
                          DCD      ipsBlckSrc
                  |L1.18624|
                          DCD      ipsBlckLog
                  |L1.18628|
                          DCD      ||.bss||+0x40c
                  |L1.18632|
                          DCD      bps
                  |L1.18636|
                          DCD      net_av
                  |L1.18640|
                          DCD      eb2_data_short
                  |L1.18644|
                          DCD      avt_stat
                  |L1.18648|
                          DCD      avt_stat_old
                  |L1.18652|
                          DCD      NUMAVT
                  |L1.18656|
0048e0  4176746f          DCB      "Avtomat #1 is OFF",0
0048e4  6d617420
0048e8  23312069
0048ec  73204f46
0048f0  4600    
0048f2  00                DCB      0
0048f3  00                DCB      0
                  |L1.18676|
0048f4  4176746f          DCB      "Avtomat #2 is OFF",0
0048f8  6d617420
0048fc  23322069
004900  73204f46
004904  4600    
004906  00                DCB      0
004907  00                DCB      0
                  |L1.18696|
004908  4176746f          DCB      "Avtomat #3 is OFF",0
00490c  6d617420
004910  23332069
004914  73204f46
004918  4600    
00491a  00                DCB      0
00491b  00                DCB      0
                  |L1.18716|
00491c  4281              CMP      r1,r0
00491e  d00b              BEQ      |L1.18744|
004920  f9b41000          LDRSH    r1,[r4,#0]  ; NUMAVT
004924  2904              CMP      r1,#4
004926  db07              BLT      |L1.18744|
;;;6794   	{
;;;6795   	if(avt_stat[3]==avtON) 	snmp_trap_send("Avtomat #4 is ON ",11,4,1);
004928  2801              CMP      r0,#1
00492a  d07a              BEQ      |L1.18978|
;;;6796   	else 				snmp_trap_send("Avtomat #4 is OFF",11,4,0);
00492c  2300              MOVS     r3,#0
00492e  2204              MOVS     r2,#4
004930  210b              MOVS     r1,#0xb
004932  a0ff              ADR      r0,|L1.19760|
004934  f7fffffe          BL       snmp_trap_send
                  |L1.18744|
;;;6797   	}
;;;6798   if((avt_stat_old[4]!=avt_stat[4])&&(NUMAVT>=5))
004938  7931              LDRB     r1,[r6,#4]  ; avt_stat_old
00493a  7928              LDRB     r0,[r5,#4]  ; avt_stat
00493c  4281              CMP      r1,r0
00493e  d00e              BEQ      |L1.18782|
004940  f9b41000          LDRSH    r1,[r4,#0]  ; NUMAVT
004944  2905              CMP      r1,#5
004946  db0a              BLT      |L1.18782|
;;;6799   	{
;;;6800   	if(avt_stat[4]==avtON) 	snmp_trap_send("Avtomat #5 is ON ",11,5,1);
004948  2801              CMP      r0,#1
00494a  d072              BEQ      |L1.18994|
;;;6801   	else 				snmp_trap_send("Avtomat #5 is OFF",11,5,0);
00494c  2300              MOVS     r3,#0
00494e  e001              B        |L1.18772|
                  |L1.18768|
004950  e051              B        |L1.18934|
                  |L1.18770|
004952  e057              B        |L1.18948|
                  |L1.18772|
004954  2205              MOVS     r2,#5
004956  210b              MOVS     r1,#0xb
004958  a0fa              ADR      r0,|L1.19780|
00495a  f7fffffe          BL       snmp_trap_send
                  |L1.18782|
;;;6802   	}
;;;6803   if((avt_stat_old[5]!=avt_stat[5])&&(NUMAVT>=6))
00495e  7971              LDRB     r1,[r6,#5]  ; avt_stat_old
004960  7968              LDRB     r0,[r5,#5]  ; avt_stat
004962  4281              CMP      r1,r0
004964  d00b              BEQ      |L1.18814|
004966  f9b41000          LDRSH    r1,[r4,#0]  ; NUMAVT
00496a  2906              CMP      r1,#6
00496c  db07              BLT      |L1.18814|
;;;6804   	{
;;;6805   	if(avt_stat[5]==avtON) 	snmp_trap_send("Avtomat #6 is ON ",11,6,1);
00496e  2801              CMP      r0,#1
004970  d066              BEQ      |L1.19008|
;;;6806   	else 				snmp_trap_send("Avtomat #6 is OFF",11,6,0);
004972  2300              MOVS     r3,#0
004974  2206              MOVS     r2,#6
004976  210b              MOVS     r1,#0xb
004978  a0f7              ADR      r0,|L1.19800|
00497a  f7fffffe          BL       snmp_trap_send
                  |L1.18814|
;;;6807   	}
;;;6808   if((avt_stat_old[6]!=avt_stat[6])&&(NUMAVT>=7))
00497e  79b1              LDRB     r1,[r6,#6]  ; avt_stat_old
004980  79a8              LDRB     r0,[r5,#6]  ; avt_stat
004982  4281              CMP      r1,r0
004984  d00d              BEQ      |L1.18850|
004986  f9b41000          LDRSH    r1,[r4,#0]  ; NUMAVT
00498a  2907              CMP      r1,#7
00498c  db09              BLT      |L1.18850|
;;;6809   	{
;;;6810   	if(avt_stat[6]==avtON) 	snmp_trap_send("Avtomat #7 is ON ",11,7,1);
00498e  e000              B        |L1.18834|
                  |L1.18832|
004990  e040              B        |L1.18964|
                  |L1.18834|
004992  2801              CMP      r0,#1
004994  d05b              BEQ      |L1.19022|
;;;6811   	else 				snmp_trap_send("Avtomat #7 is OFF",11,7,0);
004996  2300              MOVS     r3,#0
004998  2207              MOVS     r2,#7
00499a  210b              MOVS     r1,#0xb
00499c  a0f3              ADR      r0,|L1.19820|
00499e  f7fffffe          BL       snmp_trap_send
                  |L1.18850|
;;;6812   	}
;;;6813   if((avt_stat_old[7]!=avt_stat[7])&&(NUMAVT>=8))
0049a2  79f1              LDRB     r1,[r6,#7]  ; avt_stat_old
0049a4  79e8              LDRB     r0,[r5,#7]  ; avt_stat
0049a6  4281              CMP      r1,r0
0049a8  d00b              BEQ      |L1.18882|
0049aa  f9b41000          LDRSH    r1,[r4,#0]  ; NUMAVT
0049ae  2908              CMP      r1,#8
0049b0  db07              BLT      |L1.18882|
;;;6814   	{
;;;6815   	if(avt_stat[7]==avtON) 	snmp_trap_send("Avtomat #8 is ON ",11,8,1);
0049b2  2801              CMP      r0,#1
0049b4  d052              BEQ      |L1.19036|
;;;6816   	else 				snmp_trap_send("Avtomat #8 is OFF",11,8,0);
0049b6  2300              MOVS     r3,#0
0049b8  2208              MOVS     r2,#8
0049ba  210b              MOVS     r1,#0xb
0049bc  a0f0              ADR      r0,|L1.19840|
0049be  f7fffffe          BL       snmp_trap_send
                  |L1.18882|
;;;6817   	}
;;;6818   if((avt_stat_old[8]!=avt_stat[8])&&(NUMAVT>=9))
0049c2  7a31              LDRB     r1,[r6,#8]  ; avt_stat_old
0049c4  7a28              LDRB     r0,[r5,#8]  ; avt_stat
0049c6  4281              CMP      r1,r0
0049c8  d00b              BEQ      |L1.18914|
0049ca  f9b41000          LDRSH    r1,[r4,#0]  ; NUMAVT
0049ce  2909              CMP      r1,#9
0049d0  db07              BLT      |L1.18914|
;;;6819   	{
;;;6820   	if(avt_stat[8]==avtON) 	snmp_trap_send("Avtomat #9 is ON ",11,9,1);
0049d2  2801              CMP      r0,#1
0049d4  d049              BEQ      |L1.19050|
;;;6821   	else 				snmp_trap_send("Avtomat #9 is OFF",11,9,0);
0049d6  2300              MOVS     r3,#0
0049d8  2209              MOVS     r2,#9
0049da  210b              MOVS     r1,#0xb
0049dc  a0ed              ADR      r0,|L1.19860|
0049de  f7fffffe          BL       snmp_trap_send
                  |L1.18914|
;;;6822   	}
;;;6823   
;;;6824   for(i=0;i<12;i++)
0049e2  f04f0000          MOV      r0,#0
                  |L1.18918|
;;;6825   	{
;;;6826   	avt_stat_old[i]=avt_stat[i];
0049e6  5c29              LDRB     r1,[r5,r0]
0049e8  5431              STRB     r1,[r6,r0]
0049ea  f1000001          ADD      r0,r0,#1              ;6824
0049ee  b2c0              UXTB     r0,r0                 ;6824
0049f0  280c              CMP      r0,#0xc               ;6824
0049f2  d3f8              BCC      |L1.18918|
;;;6827   	}
;;;6828   }
0049f4  bd70              POP      {r4-r6,pc}
                  |L1.18934|
0049f6  2301              MOVS     r3,#1                 ;6780
0049f8  461a              MOV      r2,r3                 ;6780
0049fa  210b              MOVS     r1,#0xb               ;6780
0049fc  a0ea              ADR      r0,|L1.19880|
0049fe  f7fffffe          BL       snmp_trap_send
004a02  e72c              B        |L1.18526|
                  |L1.18948|
004a04  2301              MOVS     r3,#1                 ;6785
004a06  2202              MOVS     r2,#2                 ;6785
004a08  210b              MOVS     r1,#0xb               ;6785
004a0a  a0ec              ADR      r0,|L1.19900|
004a0c  f7fffffe          BL       snmp_trap_send
004a10  e735              B        |L1.18558|
004a12  e006              B        |L1.18978|
                  |L1.18964|
004a14  2301              MOVS     r3,#1                 ;6790
004a16  2203              MOVS     r2,#3                 ;6790
004a18  210b              MOVS     r1,#0xb               ;6790
004a1a  a0ed              ADR      r0,|L1.19920|
004a1c  f7fffffe          BL       snmp_trap_send
004a20  e73d              B        |L1.18590|
                  |L1.18978|
004a22  2301              MOVS     r3,#1                 ;6795
004a24  2204              MOVS     r2,#4                 ;6795
004a26  210b              MOVS     r1,#0xb               ;6795
004a28  a0ee              ADR      r0,|L1.19940|
004a2a  f7fffffe          BL       snmp_trap_send
004a2e  e783              B        |L1.18744|
004a30  e7ff              B        |L1.18994|
                  |L1.18994|
004a32  2301              MOVS     r3,#1                 ;6800
004a34  2205              MOVS     r2,#5                 ;6800
004a36  210b              MOVS     r1,#0xb               ;6800
004a38  a0ef              ADR      r0,|L1.19960|
004a3a  f7fffffe          BL       snmp_trap_send
004a3e  e78e              B        |L1.18782|
                  |L1.19008|
004a40  2301              MOVS     r3,#1                 ;6805
004a42  2206              MOVS     r2,#6                 ;6805
004a44  210b              MOVS     r1,#0xb               ;6805
004a46  a0f1              ADR      r0,|L1.19980|
004a48  f7fffffe          BL       snmp_trap_send
004a4c  e797              B        |L1.18814|
                  |L1.19022|
004a4e  2301              MOVS     r3,#1                 ;6810
004a50  2207              MOVS     r2,#7                 ;6810
004a52  210b              MOVS     r1,#0xb               ;6810
004a54  a0f2              ADR      r0,|L1.20000|
004a56  f7fffffe          BL       snmp_trap_send
004a5a  e7a2              B        |L1.18850|
                  |L1.19036|
004a5c  2301              MOVS     r3,#1                 ;6815
004a5e  2208              MOVS     r2,#8                 ;6815
004a60  210b              MOVS     r1,#0xb               ;6815
004a62  a0f4              ADR      r0,|L1.20020|
004a64  f7fffffe          BL       snmp_trap_send
004a68  e7ab              B        |L1.18882|
                  |L1.19050|
004a6a  2301              MOVS     r3,#1                 ;6820
004a6c  2209              MOVS     r2,#9                 ;6820
004a6e  210b              MOVS     r1,#0xb               ;6820
004a70  a0f5              ADR      r0,|L1.20040|
004a72  f7fffffe          BL       snmp_trap_send
004a76  e7b4              B        |L1.18914|
;;;6829   
                          ENDP

                  bat_hndl PROC
;;;6830   //-----------------------------------------------
;;;6831   void bat_hndl(void)
004a78  b570              PUSH     {r4-r6,lr}
;;;6832   {
;;;6833   /*if(mess_find(_MESS_BAT_MASK_ON))
;;;6834   	{
;;;6835   	if(mess_data[0]==_MESS_BAT_MASK_ON)
;;;6836   		{
;;;6837   		char i;
;;;6838   		for(i=0;i<2;i++)
;;;6839   			{
;;;6840   			if(mess_data[1]&(1<<i))
;;;6841   				{
;;;6842   				bat[i]._cnt_to_block=0;
;;;6843        			bat[i]._rel_stat=0;
;;;6844        			}
;;;6845   			}
;;;6846   		}
;;;6847   	}
;;;6848   if(mess_find(_MESS_BAT_MASK_OFF))
;;;6849   	{		
;;;6850   	if(mess_data[0]==_MESS_BAT_MASK_OFF)
;;;6851   		{
;;;6852   		char i;
;;;6853   		for(i=0;i<2;i++)
;;;6854   			{
;;;6855   			if((mess_data[1]&(1<<i)) && (bat[i]._cnt_to_block==0) && (bat[i]._rel_stat==0))
;;;6856   				{
;;;6857   				bat[i]._cnt_to_block=20;
;;;6858   				bat[i]._rel_stat=1;
;;;6859        			}
;;;6860   			}
;;;6861   		
;;;6862   		}		
;;;6863   	}*/
;;;6864   
;;;6865   if(mess_find_unvol(MESS2BAT_HNDL))
004a7a  20c8              MOVS     r0,#0xc8
004a7c  f7fffffe          BL       mess_find_unvol
;;;6866   	{ 
;;;6867   	char i;
;;;6868   	
;;;6869   	if(mess_data[0]==PARAM_BAT_ALL_OFF_AFTER_2SEC)
;;;6870   		{
;;;6871   		for(i=0;i<MAX_NUM_OF_BAT;i++)
;;;6872   			{
;;;6873   			if(bat[i]._cnt_to_block<50)bat[i]._cnt_to_block++;
004a80  49f6              LDR      r1,|L1.20060|
004a82  2200              MOVS     r2,#0                 ;6871
004a84  b3a8              CBZ      r0,|L1.19186|
004a86  4bf6              LDR      r3,|L1.20064|
;;;6874   			}
;;;6875   		}
;;;6876   
;;;6877   	else if(mess_data[0]==PARAM_BAT_MASK_OFF_AFTER_2SEC)
;;;6878   		{
;;;6879   		for(i=0;i<MAX_NUM_OF_BAT;i++)
;;;6880   			{
;;;6881   			if(mess_data[1]&(1<<i))
004a88  2401              MOVS     r4,#1
004a8a  6818              LDR      r0,[r3,#0]            ;6869  ; mess_data
004a8c  28c9              CMP      r0,#0xc9              ;6869
004a8e  d01c              BEQ      |L1.19146|
004a90  28ca              CMP      r0,#0xca              ;6877
004a92  d02f              BEQ      |L1.19188|
;;;6882   				{
;;;6883   				if(bat[i]._cnt_to_block<50) bat[i]._cnt_to_block++;
;;;6884   				}
;;;6885   			else bat[i]._cnt_to_block=0;
;;;6886   			}
;;;6887   		}
;;;6888   	else 
;;;6889   	 	{
;;;6890   		for(i=0;i<MAX_NUM_OF_BAT;i++)
004a94  4610              MOV      r0,r2
                  |L1.19094|
;;;6891   			{
;;;6892   			bat[i]._cnt_to_block=0;
004a96  eb000340          ADD      r3,r0,r0,LSL #1
004a9a  eb031300          ADD      r3,r3,r0,LSL #4
004a9e  f8012023          STRB     r2,[r1,r3,LSL #2]
004aa2  f1000001          ADD      r0,r0,#1              ;6890
004aa6  b2c0              UXTB     r0,r0                 ;6890
004aa8  2802              CMP      r0,#2                 ;6890
004aaa  d3f4              BCC      |L1.19094|
                  |L1.19116|
;;;6893   			}
;;;6894   
;;;6895   		}
;;;6896   	for(i=0;i<MAX_NUM_OF_BAT;i++)
004aac  f04f0000          MOV      r0,#0
                  |L1.19120|
;;;6897   		{
;;;6898   		if(bat[i]._cnt_to_block>20)bat[i]._rel_stat=1;
004ab0  eb000340          ADD      r3,r0,r0,LSL #1
004ab4  eb031300          ADD      r3,r3,r0,LSL #4
004ab8  f8115023          LDRB     r5,[r1,r3,LSL #2]
004abc  2d14              CMP      r5,#0x14
004abe  d939              BLS      |L1.19252|
004ac0  eb010383          ADD      r3,r1,r3,LSL #2
004ac4  f883403c          STRB     r4,[r3,#0x3c]
004ac8  e038              B        |L1.19260|
                  |L1.19146|
004aca  f04f0000          MOV      r0,#0                 ;6871
                  |L1.19150|
004ace  eb000340          ADD      r3,r0,r0,LSL #1       ;6873
004ad2  eb031500          ADD      r5,r3,r0,LSL #4       ;6873
004ad6  f8113025          LDRB     r3,[r1,r5,LSL #2]     ;6873
004ada  2b32              CMP      r3,#0x32              ;6873
004adc  d203              BCS      |L1.19174|
004ade  f1030301          ADD      r3,r3,#1              ;6873
004ae2  f8013025          STRB     r3,[r1,r5,LSL #2]     ;6873
                  |L1.19174|
004ae6  f1000001          ADD      r0,r0,#1              ;6871
004aea  b2c0              UXTB     r0,r0                 ;6871
004aec  2802              CMP      r0,#2                 ;6871
004aee  d3ee              BCC      |L1.19150|
004af0  e7dc              B        |L1.19116|
                  |L1.19186|
004af2  e029              B        |L1.19272|
                  |L1.19188|
004af4  f04f0000          MOV      r0,#0                 ;6879
004af8  685e              LDR      r6,[r3,#4]            ;6881
                  |L1.19194|
004afa  fa04f300          LSL      r3,r4,r0              ;6881
004afe  421e              TST      r6,r3                 ;6881
004b00  d00c              BEQ      |L1.19228|
004b02  eb000340          ADD      r3,r0,r0,LSL #1       ;6883
004b06  eb031500          ADD      r5,r3,r0,LSL #4       ;6883
004b0a  f8113025          LDRB     r3,[r1,r5,LSL #2]     ;6883
004b0e  2b32              CMP      r3,#0x32              ;6883
004b10  d20a              BCS      |L1.19240|
004b12  f1030301          ADD      r3,r3,#1              ;6883
004b16  f8013025          STRB     r3,[r1,r5,LSL #2]     ;6883
004b1a  e005              B        |L1.19240|
                  |L1.19228|
004b1c  eb000340          ADD      r3,r0,r0,LSL #1       ;6885
004b20  eb031300          ADD      r3,r3,r0,LSL #4       ;6885
004b24  f8012023          STRB     r2,[r1,r3,LSL #2]     ;6885
                  |L1.19240|
004b28  f1000001          ADD      r0,r0,#1              ;6879
004b2c  b2c0              UXTB     r0,r0                 ;6879
004b2e  2802              CMP      r0,#2                 ;6879
004b30  d3e3              BCC      |L1.19194|
004b32  e7bb              B        |L1.19116|
                  |L1.19252|
;;;6899   		else bat[i]._rel_stat=0;
004b34  eb010383          ADD      r3,r1,r3,LSL #2
004b38  f883203c          STRB     r2,[r3,#0x3c]
                  |L1.19260|
004b3c  f1000001          ADD      r0,r0,#1              ;6896
004b40  b2c0              UXTB     r0,r0                 ;6896
004b42  2802              CMP      r0,#2                 ;6896
004b44  d3b4              BCC      |L1.19120|
;;;6900   		}
;;;6901   
;;;6902   	}
;;;6903   
;;;6904   else 
;;;6905   	{
;;;6906   	char i;
;;;6907   	for(i=0;i<MAX_NUM_OF_BAT;i++)
;;;6908   		{
;;;6909   		bat[i]._cnt_to_block=0;
;;;6910   		bat[i]._rel_stat=0;
;;;6911   		}
;;;6912   
;;;6913   	}
;;;6914   
;;;6915   /*if(mess_find_unvol(MESS2BAT_HNDL1))
;;;6916   	{
;;;6917   	if(PARAM_BAT_ON)
;;;6918   		{
;;;6919   		char i;
;;;6920   		for(i=0;i<MAX_NUM_OF_BAT;i++)
;;;6921   			{
;;;6922   			if(mess_data[1]&(1<<i))
;;;6923   				{
;;;6924   				bat[i]._cnt_to_block=0;
;;;6925   				bat[i]._rel_stat=0;
;;;6926   				}
;;;6927   			}
;;;6928   		}
;;;6929   	} */
;;;6930   }
004b46  bd70              POP      {r4-r6,pc}
                  |L1.19272|
004b48  f04f0000          MOV      r0,#0                 ;6907
                  |L1.19276|
004b4c  eb000340          ADD      r3,r0,r0,LSL #1       ;6909
004b50  eb031300          ADD      r3,r3,r0,LSL #4       ;6909
004b54  f8012023          STRB     r2,[r1,r3,LSL #2]     ;6909
004b58  eb010383          ADD      r3,r1,r3,LSL #2       ;6910
004b5c  f883203c          STRB     r2,[r3,#0x3c]         ;6910
004b60  f1000001          ADD      r0,r0,#1              ;6907
004b64  b2c0              UXTB     r0,r0                 ;6907
004b66  2802              CMP      r0,#2                 ;6907
004b68  d3f0              BCC      |L1.19276|
004b6a  bd70              POP      {r4-r6,pc}
;;;6931   
                          ENDP

                  bat_drv PROC
;;;7569   //-----------------------------------------------
;;;7570   void bat_drv(char in)
004b6c  e92d4ffe          PUSH     {r1-r11,lr}
;;;7571   {
004b70  4605              MOV      r5,r0
;;;7572   unsigned short /*tempUS,*/tempUS_;
;;;7573   unsigned long tempUL,tempUL_;
;;;7574   unsigned short b_zar;
;;;7575   //static unsigned short time_cnt[2];
;;;7576   
;;;7577   
;;;7578   
;;;7579   if(cntrl_stat_blok_cnt_plus[in])cntrl_stat_blok_cnt_plus[in]--;
004b72  49bc              LDR      r1,|L1.20068|
004b74  f9310015          LDRSH    r0,[r1,r5,LSL #1]
004b78  b118              CBZ      r0,|L1.19330|
004b7a  f1a00001          SUB      r0,r0,#1
004b7e  f8210015          STRH     r0,[r1,r5,LSL #1]
                  |L1.19330|
;;;7580   if(cntrl_stat_blok_cnt_minus[in])cntrl_stat_blok_cnt_minus[in]--;
004b82  4ab8              LDR      r2,|L1.20068|
004b84  1d12              ADDS     r2,r2,#4
004b86  f9320015          LDRSH    r0,[r2,r5,LSL #1]
004b8a  b118              CBZ      r0,|L1.19348|
004b8c  f1a00001          SUB      r0,r0,#1
004b90  f8220015          STRH     r0,[r2,r5,LSL #1]
                  |L1.19348|
;;;7581   
;;;7582   
;;;7583   if(bat[in]._Ib>IZMAX) cntrl_stat_blok_cnt_plus[in]=100;
004b94  eb050045          ADD      r0,r5,r5,LSL #1
004b98  4bb0              LDR      r3,|L1.20060|
004b9a  eb001005          ADD      r0,r0,r5,LSL #4
004b9e  eb030480          ADD      r4,r3,r0,LSL #2
004ba2  4bb1              LDR      r3,|L1.20072|
004ba4  9002              STR      r0,[sp,#8]
004ba6  f9b40008          LDRSH    r0,[r4,#8]
004baa  f9b36000          LDRSH    r6,[r3,#0]  ; IZMAX
004bae  2364              MOVS     r3,#0x64
004bb0  42b0              CMP      r0,r6
004bb2  dd01              BLE      |L1.19384|
004bb4  f8213015          STRH     r3,[r1,r5,LSL #1]
                  |L1.19384|
;;;7584   if(bat[in]._Ib<0)     cntrl_stat_blok_cnt_minus[in]=100;
004bb8  2800              CMP      r0,#0
004bba  da01              BGE      |L1.19392|
004bbc  f8223015          STRH     r3,[r2,r5,LSL #1]
                  |L1.19392|
;;;7585   
;;;7586   if(cntrl_stat_blok_cnt_plus[in] && cntrl_stat_blok_cnt_minus[in])
;;;7587        {
;;;7588        if(!cntrl_stat_blok_cnt_)
004bc0  48a8              LDR      r0,|L1.20068|
004bc2  f8313015          LDRH     r3,[r1,r5,LSL #1]     ;7586
004bc6  38b0              SUBS     r0,r0,#0xb0
004bc8  2700              MOVS     r7,#0
004bca  b14b              CBZ      r3,|L1.19424|
004bcc  f8323015          LDRH     r3,[r2,r5,LSL #1]     ;7586
004bd0  b133              CBZ      r3,|L1.19424|
004bd2  f8b03076          LDRH     r3,[r0,#0x76]  ; cntrl_stat_blok_cnt_
004bd6  b1a3              CBZ      r3,|L1.19458|
;;;7589             {
;;;7590             cntrl_stat_blok_cnt_=600; 
;;;7591             cntrl_stat_blok_cnt_plus[in]=0;
;;;7592             cntrl_stat_blok_cnt_minus[in]=0;
;;;7593             }
;;;7594        else cntrl_stat_blok_cnt=3000;
004bd8  f64031b8          MOV      r1,#0xbb8
004bdc  f8a01074          STRH     r1,[r0,#0x74]
                  |L1.19424|
;;;7595        }
;;;7596   cntrl_stat_blok_cnt=0;
004be0  f8a07074          STRH     r7,[r0,#0x74]
;;;7597   
;;;7598   if(++(bat[in]._time_cnt)>=10)
004be4  f894003e          LDRB     r0,[r4,#0x3e]
004be8  1c40              ADDS     r0,r0,#1
004bea  b2c0              UXTB     r0,r0
004bec  f884003e          STRB     r0,[r4,#0x3e]
004bf0  280a              CMP      r0,#0xa
004bf2  d301              BCC      |L1.19448|
;;;7599   	{
;;;7600   	bat[in]._time_cnt=0;
004bf4  f884703e          STRB     r7,[r4,#0x3e]
                  |L1.19448|
;;;7601   	//bat[in]._zar_cnt++;
;;;7602   	}
;;;7603   
;;;7604   if(main_10Hz_cnt==50)
004bf8  4e9c              LDR      r6,|L1.20076|
004bfa  8830              LDRH     r0,[r6,#0]  ; main_10Hz_cnt
004bfc  2832              CMP      r0,#0x32
004bfe  d009              BEQ      |L1.19476|
004c00  e017              B        |L1.19506|
                  |L1.19458|
004c02  f44f7316          MOV      r3,#0x258             ;7590
004c06  f8a03076          STRH     r3,[r0,#0x76]         ;7590
004c0a  f8217015          STRH     r7,[r1,r5,LSL #1]     ;7591
004c0e  f8227015          STRH     r7,[r2,r5,LSL #1]     ;7592
004c12  e7e5              B        |L1.19424|
                  |L1.19476|
;;;7605   	{
;;;7606   	if(!bat[in]._rel_stat)
004c14  f894003c          LDRB     r0,[r4,#0x3c]
004c18  b958              CBNZ     r0,|L1.19506|
;;;7607   		{
;;;7608   		
;;;7609   		if(bat[in]._Ub<80) 
004c1a  f9b40002          LDRSH    r0,[r4,#2]
004c1e  2850              CMP      r0,#0x50
004c20  da07              BGE      |L1.19506|
;;;7610   			{
;;;7611   			
;;;7612   			if(!(bat[in]._av&1))
004c22  f894003d          LDRB     r0,[r4,#0x3d]
004c26  07c0              LSLS     r0,r0,#31
004c28  d103              BNE      |L1.19506|
;;;7613   				{
;;;7614   				avar_bat_hndl(in,1);
004c2a  2101              MOVS     r1,#1
004c2c  4628              MOV      r0,r5
004c2e  f7fffffe          BL       avar_bat_hndl
                  |L1.19506|
;;;7615   				//if(in==0)plazma_bat++;
;;;7616   				}
;;;7617   			}				
;;;7618   
;;;7619   		}
;;;7620   	}
;;;7621   
;;;7622   if(main_10Hz_cnt>200)
004c32  f9b60000          LDRSH    r0,[r6,#0]  ; main_10Hz_cnt
;;;7623   	{
;;;7624   	if(abs(bat[in]._Ib)>IKB) 
004c36  4e8e              LDR      r6,|L1.20080|
004c38  28c8              CMP      r0,#0xc8              ;7622
004c3a  dd0f              BLE      |L1.19548|
004c3c  f9b40008          LDRSH    r0,[r4,#8]
004c40  f7fffffe          BL       abs
004c44  f9b61000          LDRSH    r1,[r6,#0]  ; IKB
004c48  4288              CMP      r0,r1
004c4a  dd07              BLE      |L1.19548|
;;;7625   		{
;;;7626   		if((bat[in]._av&1))avar_bat_hndl(in,0);
004c4c  f894003d          LDRB     r0,[r4,#0x3d]
004c50  07c0              LSLS     r0,r0,#31
004c52  d003              BEQ      |L1.19548|
004c54  2100              MOVS     r1,#0
004c56  4628              MOV      r0,r5
004c58  f7fffffe          BL       avar_bat_hndl
                  |L1.19548|
;;;7627   		}
;;;7628   	}
;;;7629   
;;;7630   #ifdef APSENERGIA
;;;7631   //if(bat[in]._Ib>(-IKB))
;;;7632   
;;;7633   
;;;7634   #endif
;;;7635   
;;;7636   if(bat[in]._Ib>(-IKB))
004c5c  f9b61000          LDRSH    r1,[r6,#0]  ; IKB
004c60  f9b40008          LDRSH    r0,[r4,#8]
004c64  4249              RSBS     r1,r1,#0
004c66  4288              CMP      r0,r1
004c68  dd14              BLE      |L1.19604|
;;;7637   	{
;;;7638   	if(bat[in]._cnt_wrk<10)
004c6a  7b60              LDRB     r0,[r4,#0xd]
004c6c  280a              CMP      r0,#0xa
004c6e  d20d              BCS      |L1.19596|
;;;7639   		{
;;;7640   		bat[in]._cnt_wrk++;
004c70  f1000001          ADD      r0,r0,#1
004c74  b2c0              UXTB     r0,r0
004c76  7360              STRB     r0,[r4,#0xd]
;;;7641   		if((bat[in]._cnt_wrk>=10)&&(bat[in]._wrk)) 
004c78  280a              CMP      r0,#0xa
004c7a  d306              BCC      |L1.19594|
004c7c  7ba0              LDRB     r0,[r4,#0xe]
004c7e  2800              CMP      r0,#0
004c80  d003              BEQ      |L1.19594|
;;;7642   			{
;;;7643   			bat[in]._wrk=0;
004c82  73a7              STRB     r7,[r4,#0xe]
;;;7644   			//beep_init(0x7L,'O');
;;;7645   			//wrk_mem_hndl(0);
;;;7646   			wrk_mem_hndl(in);
004c84  4628              MOV      r0,r5
004c86  f7fffffe          BL       wrk_mem_hndl
                  |L1.19594|
004c8a  e110              B        |L1.20142|
                  |L1.19596|
;;;7647   			//plazma++;
;;;7648   			}
;;;7649   		}
;;;7650   	else bat[in]._cnt_wrk=10;	
004c8c  f04f000a          MOV      r0,#0xa
004c90  7360              STRB     r0,[r4,#0xd]
004c92  e10c              B        |L1.20142|
                  |L1.19604|
;;;7651   	}	
;;;7652   
;;;7653   else if(bat[in]._Ib<(-IKB))
004c94  da40              BGE      |L1.19736|
;;;7654   	{
;;;7655   	if(bat[in]._cnt_wrk)
004c96  7b60              LDRB     r0,[r4,#0xd]
004c98  b3f0              CBZ      r0,|L1.19736|
;;;7656   		{
;;;7657   		bat[in]._cnt_wrk--;
004c9a  f1a00001          SUB      r0,r0,#1
004c9e  b2c0              UXTB     r0,r0
004ca0  7360              STRB     r0,[r4,#0xd]
;;;7658   		if((bat[in]._cnt_wrk==0)&&(bat[in]._wrk==0)) 
004ca2  bbc8              CBNZ     r0,|L1.19736|
004ca4  7ba0              LDRB     r0,[r4,#0xe]
004ca6  bbb8              CBNZ     r0,|L1.19736|
;;;7659   			{
;;;7660   			bat[in]._wrk=1;
004ca8  f04f0001          MOV      r0,#1
004cac  73a0              STRB     r0,[r4,#0xe]
;;;7661   
;;;7662   				{
;;;7663   				char temp;
;;;7664   				signed short temp_temp;
;;;7665   				temp_temp=bat[in]._u_old[((bat_u_old_cnt+1)&0x07)];
004cae  4871              LDR      r0,|L1.20084|
004cb0  8800              LDRH     r0,[r0,#0]  ; bat_u_old_cnt
004cb2  f1000001          ADD      r0,r0,#1
004cb6  f0000007          AND      r0,r0,#7
004cba  eb040040          ADD      r0,r4,r0,LSL #1
004cbe  8c00              LDRH     r0,[r0,#0x20]
004cc0  9000              STR      r0,[sp,#0]
;;;7666   			 
;;;7667   				temp=LPC_RTC->YEAR;
004cc2  4e6d              LDR      r6,|L1.20088|
004cc4  8bb0              LDRH     r0,[r6,#0x1c]
004cc6  9001              STR      r0,[sp,#4]
;;;7668   				gran_char((signed char*)&temp,1,99);
004cc8  f04f0263          MOV      r2,#0x63
004ccc  f04f0101          MOV      r1,#1
004cd0  a801              ADD      r0,sp,#4
004cd2  f7fffffe          BL       gran_char
;;;7669   				*((char*)(&(bat[in]._wrk_date[0])))=temp;
004cd6  f104041c          ADD      r4,r4,#0x1c
004cda  f89d0004          LDRB     r0,[sp,#4]
004cde  7620              STRB     r0,[r4,#0x18]
;;;7670   			
;;;7671   				temp=LPC_RTC->MONTH;
004ce0  7e30              LDRB     r0,[r6,#0x18]
004ce2  9001              STR      r0,[sp,#4]
;;;7672   				gran_char((signed char*)&temp,1,12);
004ce4  f04f020c          MOV      r2,#0xc
004ce8  f04f0101          MOV      r1,#1
004cec  a801              ADD      r0,sp,#4
004cee  f7fffffe          BL       gran_char
;;;7673   				*(((char*)(&(bat[in]._wrk_date[0])))+1)=temp;
004cf2  f89d0004          LDRB     r0,[sp,#4]
004cf6  7660              STRB     r0,[r4,#0x19]
;;;7674   			
;;;7675   				temp=LPC_RTC->DOM;
004cf8  7b30              LDRB     r0,[r6,#0xc]
004cfa  9001              STR      r0,[sp,#4]
;;;7676   				gran_char((signed char*)&temp,1,31);
004cfc  221f              MOVS     r2,#0x1f
004cfe  2101              MOVS     r1,#1
004d00  a801              ADD      r0,sp,#4
004d02  f7fffffe          BL       gran_char
;;;7677   				*(((char*)(&(bat[in]._wrk_date[0])))+2)=temp;			
004d06  f89d0004          LDRB     r0,[sp,#4]
004d0a  76a0              STRB     r0,[r4,#0x1a]
;;;7678   				
;;;7679   				*(((char*)(&(bat[in]._wrk_date[0])))+3)=*((char*)&temp_temp);
004d0c  f89d0000          LDRB     r0,[sp,#0]
004d10  76e0              STRB     r0,[r4,#0x1b]
;;;7680   
;;;7681   				temp=LPC_RTC->HOUR;
004d12  7a30              LDRB     r0,[r6,#8]
004d14  9001              STR      r0,[sp,#4]
;;;7682   				gran_char((signed char*)&temp,0,23);
004d16  e000              B        |L1.19738|
                  |L1.19736|
004d18  e0c9              B        |L1.20142|
                  |L1.19738|
004d1a  2217              MOVS     r2,#0x17
004d1c  2100              MOVS     r1,#0
004d1e  a801              ADD      r0,sp,#4
004d20  f7fffffe          BL       gran_char
;;;7683   				*((char*)(&(bat[in]._wrk_date[1])))=temp;
004d24  f89d0004          LDRB     r0,[sp,#4]
004d28  7720              STRB     r0,[r4,#0x1c]
;;;7684                  	
;;;7685   				temp=LPC_RTC->MIN;
004d2a  7930              LDRB     r0,[r6,#4]
004d2c  9001              STR      r0,[sp,#4]
;;;7686   				gran_char((signed char*)&temp,0,59);
004d2e  e0a5              B        |L1.20092|
                  |L1.19760|
004d30  4176746f          DCB      "Avtomat #4 is OFF",0
004d34  6d617420
004d38  23342069
004d3c  73204f46
004d40  4600    
004d42  00                DCB      0
004d43  00                DCB      0
                  |L1.19780|
004d44  4176746f          DCB      "Avtomat #5 is OFF",0
004d48  6d617420
004d4c  23352069
004d50  73204f46
004d54  4600    
004d56  00                DCB      0
004d57  00                DCB      0
                  |L1.19800|
004d58  4176746f          DCB      "Avtomat #6 is OFF",0
004d5c  6d617420
004d60  23362069
004d64  73204f46
004d68  4600    
004d6a  00                DCB      0
004d6b  00                DCB      0
                  |L1.19820|
004d6c  4176746f          DCB      "Avtomat #7 is OFF",0
004d70  6d617420
004d74  23372069
004d78  73204f46
004d7c  4600    
004d7e  00                DCB      0
004d7f  00                DCB      0
                  |L1.19840|
004d80  4176746f          DCB      "Avtomat #8 is OFF",0
004d84  6d617420
004d88  23382069
004d8c  73204f46
004d90  4600    
004d92  00                DCB      0
004d93  00                DCB      0
                  |L1.19860|
004d94  4176746f          DCB      "Avtomat #9 is OFF",0
004d98  6d617420
004d9c  23392069
004da0  73204f46
004da4  4600    
004da6  00                DCB      0
004da7  00                DCB      0
                  |L1.19880|
004da8  4176746f          DCB      "Avtomat #1 is ON ",0
004dac  6d617420
004db0  23312069
004db4  73204f4e
004db8  2000    
004dba  00                DCB      0
004dbb  00                DCB      0
                  |L1.19900|
004dbc  4176746f          DCB      "Avtomat #2 is ON ",0
004dc0  6d617420
004dc4  23322069
004dc8  73204f4e
004dcc  2000    
004dce  00                DCB      0
004dcf  00                DCB      0
                  |L1.19920|
004dd0  4176746f          DCB      "Avtomat #3 is ON ",0
004dd4  6d617420
004dd8  23332069
004ddc  73204f4e
004de0  2000    
004de2  00                DCB      0
004de3  00                DCB      0
                  |L1.19940|
004de4  4176746f          DCB      "Avtomat #4 is ON ",0
004de8  6d617420
004dec  23342069
004df0  73204f4e
004df4  2000    
004df6  00                DCB      0
004df7  00                DCB      0
                  |L1.19960|
004df8  4176746f          DCB      "Avtomat #5 is ON ",0
004dfc  6d617420
004e00  23352069
004e04  73204f4e
004e08  2000    
004e0a  00                DCB      0
004e0b  00                DCB      0
                  |L1.19980|
004e0c  4176746f          DCB      "Avtomat #6 is ON ",0
004e10  6d617420
004e14  23362069
004e18  73204f4e
004e1c  2000    
004e1e  00                DCB      0
004e1f  00                DCB      0
                  |L1.20000|
004e20  4176746f          DCB      "Avtomat #7 is ON ",0
004e24  6d617420
004e28  23372069
004e2c  73204f4e
004e30  2000    
004e32  00                DCB      0
004e33  00                DCB      0
                  |L1.20020|
004e34  4176746f          DCB      "Avtomat #8 is ON ",0
004e38  6d617420
004e3c  23382069
004e40  73204f4e
004e44  2000    
004e46  00                DCB      0
004e47  00                DCB      0
                  |L1.20040|
004e48  4176746f          DCB      "Avtomat #9 is ON ",0
004e4c  6d617420
004e50  23392069
004e54  73204f4e
004e58  2000    
004e5a  00                DCB      0
004e5b  00                DCB      0
                  |L1.20060|
                          DCD      bat
                  |L1.20064|
                          DCD      mess_data
                  |L1.20068|
                          DCD      ||area_number.25||+0xb0
                  |L1.20072|
                          DCD      IZMAX
                  |L1.20076|
                          DCD      main_10Hz_cnt
                  |L1.20080|
                          DCD      IKB
                  |L1.20084|
                          DCD      bat_u_old_cnt
                  |L1.20088|
                          DCD      0x40024020
                  |L1.20092|
004e7c  223b              MOVS     r2,#0x3b
004e7e  2100              MOVS     r1,#0
004e80  a801              ADD      r0,sp,#4
004e82  f7fffffe          BL       gran_char
;;;7687   				*(((char*)(&(bat[in]._wrk_date[1])))+1)=temp;
004e86  f89d0004          LDRB     r0,[sp,#4]
004e8a  7760              STRB     r0,[r4,#0x1d]
;;;7688   	          
;;;7689   				temp=LPC_RTC->SEC;
004e8c  7830              LDRB     r0,[r6,#0]
004e8e  9001              STR      r0,[sp,#4]
;;;7690   				gran_char((signed char*)&temp,0,59);
004e90  223b              MOVS     r2,#0x3b
004e92  2100              MOVS     r1,#0
004e94  a801              ADD      r0,sp,#4
004e96  f7fffffe          BL       gran_char
;;;7691   				*(((char*)(&(bat[in]._wrk_date[1])))+2)=temp;
004e9a  f89d0004          LDRB     r0,[sp,#4]
004e9e  77a0              STRB     r0,[r4,#0x1e]
;;;7692   			
;;;7693   				*(((char*)(&(bat[in]._wrk_date[1])))+3)=*(((char*)&temp_temp)+1);
004ea0  f89d0001          LDRB     r0,[sp,#1]
004ea4  77e0              STRB     r0,[r4,#0x1f]
;;;7694   				bat[in]._Iintegr=0;		//Счетчик десятков милиамперсекунд
004ea6  8027              STRH     r7,[r4,#0]
;;;7695   				bat[in]._Iintegr_=0;	//Счетчик сотен милиамперчасов
004ea8  8067              STRH     r7,[r4,#2]
004eaa  f1a4041c          SUB      r4,r4,#0x1c
                  |L1.20142|
;;;7696   				}
;;;7697   	
;;;7698   			}
;;;7699   
;;;7700   		}
;;;7701   	else bat[in]._cnt_wrk=0;	 
;;;7702   	
;;;7703   	}					
;;;7704   
;;;7705   /*
;;;7706   if(Ibat>=(-IKB))
;;;7707   	{
;;;7708   	if(cnt_wrk<10)
;;;7709   		{
;;;7710   		cnt_wrk++;
;;;7711   		if((cnt_wrk>=10)&&(wrk!=wrkOFF)) 
;;;7712   			{
;;;7713   			wrk=wrkOFF;
;;;7714   			//beep_init(0x7L,'O');
;;;7715   			wrk_mem_hndl(ibat_integr);
;;;7716   			}
;;;7717   		}
;;;7718   	else cnt_wrk=10;	
;;;7719   	}	
;;;7720   
;;;7721   else if((Ibat<(-IKB))&&(spc_stat!=spc_KE))
;;;7722   	{
;;;7723   	if(cnt_wrk)
;;;7724   		{
;;;7725   		cnt_wrk--;
;;;7726   		if((cnt_wrk==0)&&(wrk!=wrkON)) 
;;;7727   			{
;;;7728   			char temp;
;;;7729   			signed short temp_temp;
;;;7730   			temp_temp=ubat_old[((ubat_old_cnt+1)&0x07)];
;;;7731   			 
;;;7732   			wrk=wrkON;
;;;7733   			
;;;7734   			temp=_year;
;;;7735   			gran_char(&temp,1,99);
;;;7736   			*((char*)(&(wrk_date[0])))=temp;
;;;7737   			
;;;7738   			temp=_month;
;;;7739   			gran_char(&temp,1,12);
;;;7740   			*(((char*)(&(wrk_date[0])))+1)=temp;
;;;7741   			
;;;7742   			temp=_date;
;;;7743   			gran_char(&temp,1,31);
;;;7744   			*(((char*)(&(wrk_date[0])))+2)=temp;			
;;;7745   				
;;;7746   			*(((char*)(&(wrk_date[0])))+3)=*((char*)&temp_temp);
;;;7747   
;;;7748   			temp=_hour;
;;;7749   			gran_char(&temp,0,23);
;;;7750   			*((char*)(&(wrk_date[1])))=temp;
;;;7751                  
;;;7752   			temp=_min;
;;;7753   			gran_char(&temp,0,59);
;;;7754   			*(((char*)(&(wrk_date[1])))+1)=temp;
;;;7755   	          
;;;7756   			temp=_sec;
;;;7757   			gran_char(&temp,0,59);
;;;7758   			*(((char*)(&(wrk_date[1])))+2)=temp;
;;;7759   			
;;;7760   			*(((char*)(&(wrk_date[1])))+3)=*(((char*)&temp_temp)+1);
;;;7761   
;;;7762   			
;;;7763   			//beep_init(0xFL,'O'); 
;;;7764   			ibat_integr=0;
;;;7765   			ibat_integr_=0;
;;;7766   			}
;;;7767   		}
;;;7768   	else cnt_wrk=0;	 
;;;7769   	
;;;7770   	}
;;;7771   if(wrk==wrkON)
;;;7772   	{
;;;7773   	ibat_integr_+=-Ibat;
;;;7774   	if(ibat_integr_>=SEC_IN_HOUR*10L)
;;;7775   		{
;;;7776   		ibat_integr_-=SEC_IN_HOUR*10L;
;;;7777   		ibat_integr++;
;;;7778   		}
;;;7779   	}
;;;7780   
;;;7781   */
;;;7782   
;;;7783   
;;;7784   /*if(bat[in]._cnt_to_block)
;;;7785   	{
;;;7786   	bat[in]._cnt_to_block--;
;;;7787   	if(!(bat[in]._cnt_to_block))
;;;7788   		{
;;;7789   		//bat[in]._rel_stat=1;
;;;7790   		}
;;;7791   	}
;;;7792   */
;;;7793   
;;;7794   
;;;7795   
;;;7796   
;;;7797   //unsigned int tempUI,tempUI_;
;;;7798   //unsigned int b_zar; 
;;;7799   //char i;
;;;7800   //Ibat[0]=5000;                     
;;;7801   
;;;7802   
;;;7803                               
;;;7804   if(bat[in]._time_cnt==0)
;;;7805   	{
;;;7806   	bat[in]._zar_cnt+=(signed long)bat[in]._Ib;
;;;7807   	
;;;7808   	if(bat[in]._zar_cnt>=AH_CONSTANT)
004eae  f64848a0          MOV      r8,#0x8ca0
004eb2  f894003e          LDRB     r0,[r4,#0x3e]         ;7804
004eb6  bba8              CBNZ     r0,|L1.20260|
004eb8  f9b41008          LDRSH    r1,[r4,#8]            ;7806
004ebc  6960              LDR      r0,[r4,#0x14]         ;7806
004ebe  4408              ADD      r0,r0,r1              ;7806
004ec0  6160              STR      r0,[r4,#0x14]         ;7806
;;;7809   		{
;;;7810   		if(BAT_C_REAL[in]==0x5555) tempUS_=BAT_C_NOM[in];
;;;7811   		else tempUS_=BAT_C_REAL[in];
;;;7812   		
;;;7813   		b_zar=lc640_read_int(ADR_EE_BAT_ZAR_CNT[in]);
004ec2  f8df940c          LDR      r9,|L1.21200|
004ec6  f8dfa40c          LDR      r10,|L1.21204|
004eca  f2455b55          MOV      r11,#0x5555           ;7810
004ece  4540              CMP      r0,r8                 ;7808
004ed0  db29              BLT      |L1.20262|
004ed2  f93a0015          LDRSH    r0,[r10,r5,LSL #1]    ;7810
004ed6  4558              CMP      r0,r11                ;7810
004ed8  d103              BNE      |L1.20194|
004eda  48ff              LDR      r0,|L1.21208|
004edc  f8306015          LDRH     r6,[r0,r5,LSL #1]     ;7810
004ee0  e001              B        |L1.20198|
                  |L1.20194|
004ee2  f83a6015          LDRH     r6,[r10,r5,LSL #1]    ;7811
                  |L1.20198|
004ee6  f8390015          LDRH     r0,[r9,r5,LSL #1]
004eea  f7fffffe          BL       lc640_read_int
004eee  b280              UXTH     r0,r0
;;;7814   
;;;7815   		if(b_zar<(tempUS_/**10*/))
004ef0  42b0              CMP      r0,r6
004ef2  d20e              BCS      |L1.20242|
;;;7816   			{
;;;7817   			bat[in]._zar_cnt-=AH_CONSTANT;
004ef4  6961              LDR      r1,[r4,#0x14]
004ef6  f5a14100          SUB      r1,r1,#0x8000
004efa  f5a1614a          SUB      r1,r1,#0xca0
004efe  6161              STR      r1,[r4,#0x14]
;;;7818   
;;;7819   			lc640_write_int(ADR_EE_BAT_ZAR_CNT[in],b_zar+1);
004f00  f9392015          LDRSH    r2,[r9,r5,LSL #1]
004f04  f1000001          ADD      r0,r0,#1
004f08  b201              SXTH     r1,r0
004f0a  4610              MOV      r0,r2
004f0c  f7fffffe          BL       lc640_write_int
004f10  e032              B        |L1.20344|
                  |L1.20242|
;;;7820   			}
;;;7821   		else if(b_zar>(tempUS_/**10*/))  
004f12  d931              BLS      |L1.20344|
;;;7822   			{
;;;7823   			lc640_write_int(ADR_EE_BAT_ZAR_CNT[in],tempUS_);
004f14  f9390015          LDRSH    r0,[r9,r5,LSL #1]
004f18  b231              SXTH     r1,r6
004f1a  f7fffffe          BL       lc640_write_int
;;;7824   			bat[in]._zar_cnt=AH_CONSTANT;
004f1e  f8c48014          STR      r8,[r4,#0x14]
004f22  e029              B        |L1.20344|
                  |L1.20260|
004f24  e054              B        |L1.20432|
                  |L1.20262|
;;;7825   
;;;7826   			}
;;;7827   
;;;7828   		}
;;;7829   
;;;7830   	else if(bat[in]._zar_cnt<=-AH_CONSTANT)
004f26  49ed              LDR      r1,|L1.21212|
004f28  4288              CMP      r0,r1
004f2a  dc25              BGT      |L1.20344|
;;;7831   		{
;;;7832   		if(BAT_C_REAL[in]==0x5555) tempUS_=BAT_C_NOM[in];
004f2c  f93a0015          LDRSH    r0,[r10,r5,LSL #1]
004f30  4558              CMP      r0,r11
004f32  d103              BNE      |L1.20284|
004f34  48e8              LDR      r0,|L1.21208|
004f36  f8306015          LDRH     r6,[r0,r5,LSL #1]
004f3a  e001              B        |L1.20288|
                  |L1.20284|
;;;7833   		else tempUS_=BAT_C_REAL[in];
004f3c  f83a6015          LDRH     r6,[r10,r5,LSL #1]
                  |L1.20288|
;;;7834   		
;;;7835   		b_zar=lc640_read_int(ADR_EE_BAT_ZAR_CNT[in]);
004f40  f8390015          LDRH     r0,[r9,r5,LSL #1]
004f44  f7fffffe          BL       lc640_read_int
004f48  b280              UXTH     r0,r0
;;;7836   
;;;7837   		if(b_zar>tempUS_)
004f4a  42b0              CMP      r0,r6
004f4c  d905              BLS      |L1.20314|
;;;7838   			{
;;;7839   			lc640_write_int(ADR_EE_BAT_ZAR_CNT[in],tempUS_);
004f4e  f9390015          LDRSH    r0,[r9,r5,LSL #1]
004f52  b231              SXTH     r1,r6
004f54  f7fffffe          BL       lc640_write_int
;;;7840   			b_zar=tempUS_;
004f58  4630              MOV      r0,r6
                  |L1.20314|
;;;7841   			}
;;;7842   		if(b_zar)
004f5a  b158              CBZ      r0,|L1.20340|
;;;7843   			{
;;;7844   			bat[in]._zar_cnt+=AH_CONSTANT;
004f5c  6961              LDR      r1,[r4,#0x14]
004f5e  4441              ADD      r1,r1,r8
004f60  6161              STR      r1,[r4,#0x14]
;;;7845   
;;;7846   			lc640_write_int(ADR_EE_BAT_ZAR_CNT[in],b_zar-1);
004f62  f9392015          LDRSH    r2,[r9,r5,LSL #1]
004f66  f1a00001          SUB      r0,r0,#1
004f6a  b201              SXTH     r1,r0
004f6c  4610              MOV      r0,r2
004f6e  f7fffffe          BL       lc640_write_int
004f72  e001              B        |L1.20344|
                  |L1.20340|
;;;7847   			}
;;;7848   		else 
;;;7849   			{
;;;7850   			bat[in]._zar_cnt=-AH_CONSTANT;
004f74  48d9              LDR      r0,|L1.21212|
004f76  6160              STR      r0,[r4,#0x14]
                  |L1.20344|
;;;7851   			}
;;;7852   
;;;7853   		}
;;;7854   
;;;7855   			
;;;7856   	tempUL=(unsigned long)lc640_read_int(ADR_EE_BAT_ZAR_CNT[in]);
004f78  f8390015          LDRH     r0,[r9,r5,LSL #1]
004f7c  f7fffffe          BL       lc640_read_int
004f80  4601              MOV      r1,r0
;;;7857   	
;;;7858   	if(BAT_C_REAL[in]==0x5555) tempUL_=(unsigned long)BAT_C_NOM[in];
004f82  f93a0015          LDRSH    r0,[r10,r5,LSL #1]
004f86  4558              CMP      r0,r11
004f88  d102              BNE      |L1.20368|
004f8a  48d3              LDR      r0,|L1.21208|
004f8c  f9300015          LDRSH    r0,[r0,r5,LSL #1]
                  |L1.20368|
;;;7859   	else tempUL_=(unsigned long)BAT_C_REAL[in];
;;;7860   		           	
;;;7861   	tempUL*=1000L;
004f90  f44f727a          MOV      r2,#0x3e8
004f94  fb01f102          MUL      r1,r1,r2
;;;7862   
;;;7863   
;;;7864   	if(tempUL_==0) tempUL=0;
004f98  b158              CBZ      r0,|L1.20402|
;;;7865   	else tempUL/=tempUL_;
004f9a  fbb1f0f0          UDIV     r0,r1,r0
                  |L1.20382|
;;;7866   
;;;7867   	tempUL/=10L;
004f9e  f04f010a          MOV      r1,#0xa
004fa2  fbb0f0f1          UDIV     r0,r0,r1
;;;7868   
;;;7869   	bat[in]._zar=(unsigned short)tempUL;
004fa6  8220              STRH     r0,[r4,#0x10]
;;;7870   
;;;7871   	if(BAT_TYPE==1)
004fa8  48cd              LDR      r0,|L1.21216|
004faa  8800              LDRH     r0,[r0,#0]  ; BAT_TYPE
004fac  2801              CMP      r0,#1
004fae  d003              BEQ      |L1.20408|
004fb0  e008              B        |L1.20420|
                  |L1.20402|
004fb2  f04f0000          MOV      r0,#0                 ;7864
004fb6  e7f2              B        |L1.20382|
                  |L1.20408|
;;;7872   		{
;;;7873   		bat[in]._zar=lakb[in]._s_o_c;
004fb8  49ca              LDR      r1,|L1.21220|
004fba  9802              LDR      r0,[sp,#8]
004fbc  eb010080          ADD      r0,r1,r0,LSL #2
004fc0  8a40              LDRH     r0,[r0,#0x12]
004fc2  8220              STRH     r0,[r4,#0x10]
                  |L1.20420|
;;;7874   		}
;;;7875   	
;;;7876   	gran((signed short*)&bat[in]._zar,0,100);
004fc4  f1040010          ADD      r0,r4,#0x10
004fc8  2264              MOVS     r2,#0x64
004fca  2100              MOVS     r1,#0
004fcc  f7fffffe          BL       gran
                  |L1.20432|
;;;7877        }
;;;7878   
;;;7879   
;;;7880   //Подсчет тока разряда батареи      
;;;7881   if(bat[in]._wrk==1)
004fd0  7ba0              LDRB     r0,[r4,#0xe]
004fd2  2801              CMP      r0,#1
004fd4  d113              BNE      |L1.20478|
;;;7882   	{
;;;7883   	if(bat[in]._Iintegr<36000)
004fd6  8ba0              LDRH     r0,[r4,#0x1c]
004fd8  4540              CMP      r0,r8
004fda  d20f              BCS      |L1.20476|
;;;7884   		{          
;;;7885   		bat[in]._Iintegr+=abs(bat[in]._Ib);
004fdc  f9b40008          LDRSH    r0,[r4,#8]
004fe0  f7fffffe          BL       abs
004fe4  8ba1              LDRH     r1,[r4,#0x1c]
004fe6  4408              ADD      r0,r0,r1
004fe8  b280              UXTH     r0,r0
004fea  83a0              STRH     r0,[r4,#0x1c]
;;;7886   		if(bat[in]._Iintegr>=36000)
004fec  4540              CMP      r0,r8
004fee  d306              BCC      |L1.20478|
;;;7887   			{
;;;7888   			bat[in]._Iintegr=0;		//Счетчик десятков милиамперсекунд
004ff0  83a7              STRH     r7,[r4,#0x1c]
;;;7889   			bat[in]._Iintegr_++;	//Счетчик сотен милиамперчасов
004ff2  8be0              LDRH     r0,[r4,#0x1e]
004ff4  f1000001          ADD      r0,r0,#1
004ff8  83e0              STRH     r0,[r4,#0x1e]
004ffa  e000              B        |L1.20478|
                  |L1.20476|
;;;7890   			}
;;;7891   		}
;;;7892   	else 
;;;7893   		{
;;;7894   		bat[in]._Iintegr=0;
004ffc  83a7              STRH     r7,[r4,#0x1c]
                  |L1.20478|
;;;7895   		}	
;;;7896   	} 
;;;7897   	    
;;;7898   #ifdef UKU_220_IPS_TERMOKOMPENSAT
;;;7899   if((t_ext[0]>TBATSIGN)&&(!ND_EXT[0]))	
004ffe  4eba              LDR      r6,|L1.21224|
005000  49ba              LDR      r1,|L1.21228|
005002  f8df92ec          LDR      r9,|L1.21232|
005006  f9b60000          LDRSH    r0,[r6,#0]  ; t_ext
00500a  f9b11000          LDRSH    r1,[r1,#0]  ; TBATSIGN
00500e  4288              CMP      r0,r1
005010  dd02              BLE      |L1.20504|
005012  f8990000          LDRB     r0,[r9,#0]  ; ND_EXT
005016  b380              CBZ      r0,|L1.20602|
                  |L1.20504|
;;;7900   	{
;;;7901   	bat[in]._sign_temper_cnt++;
;;;7902   	}
;;;7903   else 
;;;7904   	{
;;;7905   	bat[in]._sign_temper_cnt--;
005018  f8b40040          LDRH     r0,[r4,#0x40]
00501c  f1a00001          SUB      r0,r0,#1
005020  f8a40040          STRH     r0,[r4,#0x40]
                  |L1.20516|
;;;7906   	}
;;;7907   #else
;;;7908   if((bat[in]._Tb>TBATSIGN)&&(!bat[in]._nd))	
;;;7909   	{
;;;7910   	bat[in]._sign_temper_cnt++;
;;;7911   	}
;;;7912   else 
;;;7913   	{
;;;7914   	bat[in]._sign_temper_cnt--;
;;;7915   	}
;;;7916   #endif
;;;7917   gran(&bat[in]._sign_temper_cnt,0,600);
005024  f44f7b16          MOV      r11,#0x258
005028  f1040040          ADD      r0,r4,#0x40
00502c  465a              MOV      r2,r11
00502e  2100              MOVS     r1,#0
005030  f7fffffe          BL       gran
;;;7918   if(bat[in]._sign_temper_cnt>=590)	bat[in]._temper_stat|=(1<<0);
005034  f9b40040          LDRSH    r0,[r4,#0x40]
005038  f2402a4e          MOV      r10,#0x24e
00503c  4550              CMP      r0,r10
00503e  db05              BLT      |L1.20556|
005040  f894103f          LDRB     r1,[r4,#0x3f]
005044  f0410101          ORR      r1,r1,#1
005048  f884103f          STRB     r1,[r4,#0x3f]
                  |L1.20556|
;;;7919   if(bat[in]._sign_temper_cnt<=10)	bat[in]._temper_stat&=~(1<<0);
00504c  280a              CMP      r0,#0xa
00504e  dc05              BGT      |L1.20572|
005050  f894003f          LDRB     r0,[r4,#0x3f]
005054  f0200001          BIC      r0,r0,#1
005058  f884003f          STRB     r0,[r4,#0x3f]
                  |L1.20572|
;;;7920   
;;;7921   if((bat[in]._temper_stat&(1<<0))&&(!(bat[in]._temper_stat&(1<<4))))	avar_bat_temper_hndl(in,1);
00505c  f894003f          LDRB     r0,[r4,#0x3f]
005060  07c1              LSLS     r1,r0,#31
005062  d005              BEQ      |L1.20592|
005064  06c0              LSLS     r0,r0,#27
005066  d403              BMI      |L1.20592|
005068  2101              MOVS     r1,#1
00506a  4628              MOV      r0,r5
00506c  f7fffffe          BL       avar_bat_temper_hndl
                  |L1.20592|
;;;7922   if((!(bat[in]._temper_stat&(1<<0)))&&(bat[in]._temper_stat&(1<<4)))	avar_bat_temper_hndl(in,0);
005070  f894003f          LDRB     r0,[r4,#0x3f]
005074  07c1              LSLS     r1,r0,#31
005076  d008              BEQ      |L1.20618|
005078  e00d              B        |L1.20630|
                  |L1.20602|
00507a  e7ff              B        |L1.20604|
                  |L1.20604|
00507c  f8b40040          LDRH     r0,[r4,#0x40]         ;7901
005080  f1000001          ADD      r0,r0,#1              ;7901
005084  f8a40040          STRH     r0,[r4,#0x40]         ;7901
005088  e7cc              B        |L1.20516|
                  |L1.20618|
00508a  06c0              LSLS     r0,r0,#27
00508c  d503              BPL      |L1.20630|
00508e  2100              MOVS     r1,#0
005090  4628              MOV      r0,r5
005092  f7fffffe          BL       avar_bat_temper_hndl
                  |L1.20630|
;;;7923   
;;;7924   if(bat[in]._temper_stat&(1<<0))		bat[in]._temper_stat|=(1<<4);
005096  f894003f          LDRB     r0,[r4,#0x3f]
00509a  07c1              LSLS     r1,r0,#31
00509c  d004              BEQ      |L1.20648|
00509e  f0400010          ORR      r0,r0,#0x10
0050a2  f884003f          STRB     r0,[r4,#0x3f]
0050a6  e003              B        |L1.20656|
                  |L1.20648|
;;;7925   else 								bat[in]._temper_stat&=~(1<<4);
0050a8  f0200010          BIC      r0,r0,#0x10
0050ac  f884003f          STRB     r0,[r4,#0x3f]
                  |L1.20656|
;;;7926   
;;;7927   #ifdef UKU_220_IPS_TERMOKOMPENSAT
;;;7928   if((t_ext[0]>TBATMAX)&&(!ND_EXT[0]))	
0050b0  4990              LDR      r1,|L1.21236|
0050b2  f9b60000          LDRSH    r0,[r6,#0]  ; t_ext
0050b6  f9b11000          LDRSH    r1,[r1,#0]  ; TBATMAX
0050ba  4288              CMP      r0,r1
0050bc  dd02              BLE      |L1.20676|
0050be  f8990000          LDRB     r0,[r9,#0]  ; ND_EXT
0050c2  b3d0              CBZ      r0,|L1.20794|
                  |L1.20676|
;;;7929   	{
;;;7930   	bat[in]._max_temper_cnt++;
;;;7931   	}
;;;7932   else 
;;;7933   	{
;;;7934   	bat[in]._max_temper_cnt--;
0050c4  f8b40042          LDRH     r0,[r4,#0x42]
0050c8  f1a00001          SUB      r0,r0,#1
0050cc  f8a40042          STRH     r0,[r4,#0x42]
                  |L1.20688|
;;;7935   	}
;;;7936   #else
;;;7937   if((bat[in]._Tb>TBATMAX)&&(!bat[in]._nd))	
;;;7938   	{
;;;7939   	bat[in]._max_temper_cnt++;
;;;7940   	}
;;;7941   else 
;;;7942   	{
;;;7943   	bat[in]._max_temper_cnt--;
;;;7944   	}
;;;7945   #endif
;;;7946   
;;;7947   gran(&bat[in]._max_temper_cnt,0,600);
0050d0  f1040042          ADD      r0,r4,#0x42
0050d4  465a              MOV      r2,r11
0050d6  2100              MOVS     r1,#0
0050d8  f7fffffe          BL       gran
;;;7948   if(bat[in]._max_temper_cnt>=590)	bat[in]._temper_stat|=(1<<1);
0050dc  f9b40042          LDRSH    r0,[r4,#0x42]
0050e0  4550              CMP      r0,r10
0050e2  db05              BLT      |L1.20720|
0050e4  f894103f          LDRB     r1,[r4,#0x3f]
0050e8  f0410102          ORR      r1,r1,#2
0050ec  f884103f          STRB     r1,[r4,#0x3f]
                  |L1.20720|
;;;7949   if(bat[in]._max_temper_cnt<=10)	bat[in]._temper_stat&=~(1<<1);
0050f0  280a              CMP      r0,#0xa
0050f2  dc05              BGT      |L1.20736|
0050f4  f894003f          LDRB     r0,[r4,#0x3f]
0050f8  f0200002          BIC      r0,r0,#2
0050fc  f884003f          STRB     r0,[r4,#0x3f]
                  |L1.20736|
;;;7950   
;;;7951   if((bat[in]._temper_stat&(1<<1))&&(!(bat[in]._temper_stat&(1<<5))))	avar_bat_temper_hndl(in,3);
005100  f894003f          LDRB     r0,[r4,#0x3f]
005104  0781              LSLS     r1,r0,#30
005106  d505              BPL      |L1.20756|
005108  0680              LSLS     r0,r0,#26
00510a  d403              BMI      |L1.20756|
00510c  2103              MOVS     r1,#3
00510e  4628              MOV      r0,r5
005110  f7fffffe          BL       avar_bat_temper_hndl
                  |L1.20756|
;;;7952   if((!(bat[in]._temper_stat&(1<<1)))&&(bat[in]._temper_stat&(1<<5)))	avar_bat_temper_hndl(in,2);
005114  f894003f          LDRB     r0,[r4,#0x3f]
005118  0781              LSLS     r1,r0,#30
00511a  d405              BMI      |L1.20776|
00511c  0680              LSLS     r0,r0,#26
00511e  d503              BPL      |L1.20776|
005120  2102              MOVS     r1,#2
005122  4628              MOV      r0,r5
005124  f7fffffe          BL       avar_bat_temper_hndl
                  |L1.20776|
;;;7953   
;;;7954   if(bat[in]._temper_stat&(1<<1))		bat[in]._temper_stat|=(1<<5);
005128  f894003f          LDRB     r0,[r4,#0x3f]
00512c  0781              LSLS     r1,r0,#30
00512e  d50c              BPL      |L1.20810|
005130  f0400020          ORR      r0,r0,#0x20
005134  f884003f          STRB     r0,[r4,#0x3f]
005138  e00b              B        |L1.20818|
                  |L1.20794|
00513a  e7ff              B        |L1.20796|
                  |L1.20796|
00513c  f8b40042          LDRH     r0,[r4,#0x42]         ;7930
005140  f1000001          ADD      r0,r0,#1              ;7930
005144  f8a40042          STRH     r0,[r4,#0x42]         ;7930
005148  e7c2              B        |L1.20688|
                  |L1.20810|
;;;7955   else 								bat[in]._temper_stat&=~(1<<5);
00514a  f0200020          BIC      r0,r0,#0x20
00514e  f884003f          STRB     r0,[r4,#0x3f]
                  |L1.20818|
;;;7956   
;;;7957   //Подсчет наработки батареи
;;;7958   if(bat[in]._resurs_cnt<36000)
005152  6c60              LDR      r0,[r4,#0x44]
005154  4540              CMP      r0,r8
005156  da13              BGE      |L1.20864|
;;;7959   	{               
;;;7960   	bat[in]._resurs_cnt++;
005158  f1000001          ADD      r0,r0,#1
00515c  6460              STR      r0,[r4,#0x44]
;;;7961   	if(bat[in]._resurs_cnt>=36000)
00515e  4540              CMP      r0,r8
005160  db0f              BLT      |L1.20866|
;;;7962   		{
;;;7963   		bat[in]._resurs_cnt=0;
005162  6467              STR      r7,[r4,#0x44]
;;;7964   		lc640_write_int(ADR_EE_BAT_RESURS[in],lc640_read_int(ADR_EE_BAT_RESURS[in])+1);
005164  4c64              LDR      r4,|L1.21240|
005166  f8340015          LDRH     r0,[r4,r5,LSL #1]
00516a  f7fffffe          BL       lc640_read_int
00516e  1c40              ADDS     r0,r0,#1
005170  b201              SXTH     r1,r0
005172  f9340015          LDRSH    r0,[r4,r5,LSL #1]
005176  b003              ADD      sp,sp,#0xc
005178  e8bd4ff0          POP      {r4-r11,lr}
00517c  f7ffbffe          B.W      lc640_write_int
                  |L1.20864|
;;;7965   		}
;;;7966   	}
;;;7967   else bat[in]._resurs_cnt=0;
005180  6467              STR      r7,[r4,#0x44]
                  |L1.20866|
;;;7968   
;;;7969   
;;;7970   #ifndef UKU_220_V2
;;;7971   #ifndef UKU_GLONASS
;;;7972   #ifndef UKU_220_IPS_TERMOKOMPENSAT
;;;7973   //#ifndef UKU_6U
;;;7974   //#ifndef UKU_220
;;;7975   if(UBM_AV)
;;;7976        {
;;;7977        signed short temp_SS;
;;;7978   #ifdef UKU_220
;;;7979   temp_SS=bat[in]._Ub/2;
;;;7980   #else
;;;7981        if(U0B<600)
;;;7982             {
;;;7983   
;;;7984             temp_SS=bat[in]._Ub/4;
;;;7985             }
;;;7986        else temp_SS=bat[in]._Ub/5;
;;;7987   	
;;;7988   	temp_SS+=temp_SS;     
;;;7989   #endif
;;;7990        temp_SS-=(bat[in]._Ubm);
;;;7991   
;;;7992        temp_SS=abs(temp_SS);
;;;7993   
;;;7994        temp_SS*=10;
;;;7995   
;;;7996        temp_SS/=12;
;;;7997   
;;;7998        bat[in]._dUbm=temp_SS;
;;;7999   
;;;8000   
;;;8001        if(	(bat[in]._dUbm>UBM_AV) &&
;;;8002   		(abs(bat[in]._Ib)<(5*IKB)) &&
;;;8003   		(bat[in]._Ub>((short)(((long)USIGN*115)/100))) &&
;;;8004   		(!(bat[in]._av & 2))  )
;;;8005   		{
;;;8006   		bat[in]._cnt_as++;
;;;8007   		if(bat[in]._cnt_as==3000)
;;;8008   			{
;;;8009   			avar_bat_as_hndl(in,1);
;;;8010   			}
;;;8011   		if(bat[in]._cnt_as>=3005) bat[in]._cnt_as=3005;
;;;8012   		}
;;;8013   	else 
;;;8014   		{
;;;8015   		if(bat[in]._cnt_as)
;;;8016   			{
;;;8017   			bat[in]._cnt_as--;
;;;8018   			if(bat[in]._cnt_as==0)avar_bat_as_hndl(in,0);
;;;8019   			}
;;;8020   		}
;;;8021        
;;;8022        }
;;;8023   //#endif 
;;;8024   #endif 
;;;8025   #endif
;;;8026   #endif
;;;8027   
;;;8028   }
005182  e8bd8ffe          POP      {r1-r11,pc}
;;;8029   
                          ENDP

                  bat_hndl_zvu PROC
;;;8031   //-----------------------------------------------
;;;8032   void bat_hndl_zvu(void)
005186  e92d4ff0          PUSH     {r4-r11,lr}
;;;8033   {
00518a  b089              SUB      sp,sp,#0x24
;;;8034   char i;
;;;8035   short bat_hndl_i_temp;
;;;8036   const long bat_hndl_t_razr_const[7]={600L,1800L,3600L,10800L,18000L,36000L,72000L};
00518c  f04f021c          MOV      r2,#0x1c
005190  495a              LDR      r1,|L1.21244|
005192  4668              MOV      r0,sp
005194  f7fffffe          BL       __aeabi_memcpy4
;;;8037   
;;;8038   //Ib_ips_termokompensat=-17000;
;;;8039    
;;;8040   if(bat_hndl_zvu_init==0)
005198  4c59              LDR      r4,|L1.21248|
;;;8041   	{
;;;8042   	//Инициализация при включении системы
;;;8043   	bat_hndl_zvu_Q=(long)lc640_read_int(EE_BAT1_ZAR_CNT);
;;;8044   	if((bat_hndl_zvu_Q>100L)||(bat_hndl_zvu_Q<0L)) bat_hndl_zvu_Q=100L;
00519a  2564              MOVS     r5,#0x64
;;;8045   	bat_hndl_zvu_Q*=10000L;
;;;8046   
;;;8047   	bat_hndl_zvu_init=1;
;;;8048   	}
;;;8049   else 
;;;8050   	{
;;;8051   	if(Ib_ips_termokompensat<-IKB)
;;;8052   		{
;;;8053   		bat_hndl_i_vector=0;
;;;8054   		bat_hndl_i_zar_price=0L;
;;;8055   			
;;;8056   		bat_hndl_i=-Ib_ips_termokompensat;
;;;8057   		I_from_t_table[0]=BAT_C_POINT_1_6*6; //Ток при котором батарея разрядится за 1/6 часа (0.1А)
;;;8058   		I_from_t_table[1]=BAT_C_POINT_1_2*2; //Ток при котором батарея разрядится за 1/2 часа (0.1А)
;;;8059   		I_from_t_table[2]=BAT_C_POINT_1; //Ток при котором батарея разрядится за 1 час (0.1А)
;;;8060   		I_from_t_table[3]=BAT_C_POINT_3/3; //Ток при котором батарея разрядится за 3 часа (0.1А)
;;;8061   		I_from_t_table[4]=BAT_C_POINT_5/5; //Ток при котором батарея разрядится за 5 часов (0.1А)
;;;8062   		I_from_t_table[5]=BAT_C_POINT_10/10; //Ток при котором батарея разрядится за 10 часов (0.1А)
;;;8063   		I_from_t_table[6]=BAT_C_POINT_20/20; //Ток при котором батарея разрядится за 20 часов (0.1А)
;;;8064   		
;;;8065   		I_from_t_table[0]=(short)((((long)I_from_t_table[0])*((long)BAT_K_OLD))/100L);
;;;8066   		I_from_t_table[1]=(short)((((long)I_from_t_table[1])*((long)BAT_K_OLD))/100L);
;;;8067   		I_from_t_table[2]=(short)((((long)I_from_t_table[2])*((long)BAT_K_OLD))/100L);
;;;8068   		I_from_t_table[3]=(short)((((long)I_from_t_table[3])*((long)BAT_K_OLD))/100L);
;;;8069   		I_from_t_table[4]=(short)((((long)I_from_t_table[4])*((long)BAT_K_OLD))/100L);
;;;8070   		I_from_t_table[5]=(short)((((long)I_from_t_table[5])*((long)BAT_K_OLD))/100L);
;;;8071   		I_from_t_table[6]=(short)((((long)I_from_t_table[6])*((long)BAT_K_OLD))/100L);
;;;8072   
;;;8073   		bat_hndl_i_temp=bat_hndl_i/10;
;;;8074   		for(i=0;i<7;i++)
;;;8075   			{
;;;8076   			if(bat_hndl_i_temp>=I_from_t_table[i])
;;;8077   				{
;;;8078   				break;
;;;8079   				}
;;;8080   			}
;;;8081   		 if(i==0) bat_hndl_t_razr=bat_hndl_t_razr_const[0];
;;;8082   		 else if((i>=1)&&(i<7))
;;;8083   		 	{
;;;8084   			short i1,i2;
;;;8085   			i1=I_from_t_table[i-1]-bat_hndl_i_temp;
;;;8086   			i2=I_from_t_table[i-1]-I_from_t_table[i];
;;;8087   			bat_hndl_t_razr=bat_hndl_t_razr_const[i]-bat_hndl_t_razr_const[i-1];
;;;8088   			bat_hndl_t_razr*=(long)i1;
;;;8089   			bat_hndl_t_razr/=(long)i2;
;;;8090   			bat_hndl_t_razr+=bat_hndl_t_razr_const[i-1];
;;;8091   			}
;;;8092   		else if(i>=7)
;;;8093   			{
;;;8094   			bat_hndl_t_razr=bat_hndl_t_razr_const[6];
;;;8095   			}
;;;8096   		bat_hndl_proc_razr=1000000L/bat_hndl_t_razr;
00519c  f8df8164          LDR      r8,|L1.21252|
0051a0  7a60              LDRB     r0,[r4,#9]            ;8040  ; bat_hndl_zvu_init
0051a2  2700              MOVS     r7,#0                 ;8040
0051a4  f04f0901          MOV      r9,#1                 ;8047
0051a8  f1040680          ADD      r6,r4,#0x80           ;8043
0051ac  2800              CMP      r0,#0                 ;8040
0051ae  d07e              BEQ      |L1.21166|
0051b0  4956              LDR      r1,|L1.21260|
0051b2  4855              LDR      r0,|L1.21256|
0051b4  f9b12000          LDRSH    r2,[r1,#0]            ;8051  ; IKB
0051b8  4631              MOV      r1,r6                 ;8043
0051ba  f9b00000          LDRSH    r0,[r0,#0]            ;8051  ; Ib_ips_termokompensat
0051be  4253              RSBS     r3,r2,#0              ;8051
0051c0  6d49              LDR      r1,[r1,#0x54]         ;8043
0051c2  4298              CMP      r0,r3                 ;8051
0051c4  da74              BGE      |L1.21168|
0051c6  72e7              STRB     r7,[r4,#0xb]          ;8053
0051c8  6137              STR      r7,[r6,#0x10]         ;8054  ; bat_hndl_i_zar_price
0051ca  f1c00000          RSB      r0,r0,#0              ;8056
0051ce  b200              SXTH     r0,r0                 ;8056
0051d0  80b0              STRH     r0,[r6,#4]            ;8056
0051d2  9008              STR      r0,[sp,#0x20]         ;8056
0051d4  484e              LDR      r0,|L1.21264|
0051d6  4a4f              LDR      r2,|L1.21268|
0051d8  8800              LDRH     r0,[r0,#0]            ;8057  ; BAT_C_POINT_1_6
0051da  eb000040          ADD      r0,r0,r0,LSL #1       ;8057
0051de  ea4f0040          LSL      r0,r0,#1              ;8057
0051e2  fa0ffb80          SXTH     r11,r0                ;8057
0051e6  484c              LDR      r0,|L1.21272|
0051e8  8800              LDRH     r0,[r0,#0]            ;8058  ; BAT_C_POINT_1_2
0051ea  ea4f0040          LSL      r0,r0,#1              ;8058
0051ee  b203              SXTH     r3,r0                 ;8058
0051f0  484a              LDR      r0,|L1.21276|
0051f2  f9b0c000          LDRSH    r12,[r0,#0]           ;8059  ; BAT_C_POINT_1
0051f6  484a              LDR      r0,|L1.21280|
0051f8  f04f0903          MOV      r9,#3                 ;8060
0051fc  f9b00000          LDRSH    r0,[r0,#0]            ;8060  ; BAT_C_POINT_3
005200  fb90f0f9          SDIV     r0,r0,r9              ;8060
005204  b200              SXTH     r0,r0                 ;8060
005206  9007              STR      r0,[sp,#0x1c]         ;8060
005208  4846              LDR      r0,|L1.21284|
00520a  f04f0905          MOV      r9,#5                 ;8061
00520e  f9b00000          LDRSH    r0,[r0,#0]            ;8061  ; BAT_C_POINT_5
005212  fb90f0f9          SDIV     r0,r0,r9              ;8061
005216  fa0ff980          SXTH     r9,r0                 ;8061
00521a  4843              LDR      r0,|L1.21288|
00521c  f9b0a000          LDRSH    r10,[r0,#0]           ;8062  ; BAT_C_POINT_10
005220  f04f000a          MOV      r0,#0xa               ;8062
005224  fb9af0f0          SDIV     r0,r10,r0             ;8062
005228  fa0ffe80          SXTH     lr,r0                 ;8062
00522c  483f              LDR      r0,|L1.21292|
00522e  f04f0a14          MOV      r10,#0x14             ;8063
005232  f9b00000          LDRSH    r0,[r0,#0]            ;8063  ; BAT_C_POINT_20
005236  fb90f0fa          SDIV     r0,r0,r10             ;8063
00523a  fa0ffa80          SXTH     r10,r0                ;8063
00523e  483c              LDR      r0,|L1.21296|
005240  f9b00000          LDRSH    r0,[r0,#0]            ;8065  ; BAT_K_OLD
005244  fb0bfb00          MUL      r11,r11,r0            ;8065
005248  fb9bfbf5          SDIV     r11,r11,r5            ;8065
00524c  f8a2b000          STRH     r11,[r2,#0]           ;8065
005250  fb03f300          MUL      r3,r3,r0              ;8066
005254  fb93f3f5          SDIV     r3,r3,r5              ;8066
005258  8053              STRH     r3,[r2,#2]            ;8066
00525a  fb0cfc00          MUL      r12,r12,r0            ;8067
00525e  fb9cf3f5          SDIV     r3,r12,r5             ;8067
005262  8093              STRH     r3,[r2,#4]            ;8067
005264  9b07              LDR      r3,[sp,#0x1c]         ;8068
005266  fb03f300          MUL      r3,r3,r0              ;8068
00526a  fb93f3f5          SDIV     r3,r3,r5              ;8068
00526e  80d3              STRH     r3,[r2,#6]            ;8068
005270  fb09f900          MUL      r9,r9,r0              ;8069
005274  fb99f3f5          SDIV     r3,r9,r5              ;8069
005278  8113              STRH     r3,[r2,#8]            ;8069
00527a  fb0efe00          MUL      lr,lr,r0              ;8070
00527e  fb9ef3f5          SDIV     r3,lr,r5              ;8070
005282  8153              STRH     r3,[r2,#0xa]          ;8070
005284  fb0afa00          MUL      r10,r10,r0            ;8071
005288  fb9af0f5          SDIV     r0,r10,r5             ;8071
00528c  8190              STRH     r0,[r2,#0xc]          ;8071
00528e  9808              LDR      r0,[sp,#0x20]         ;8073
005290  f04f030a          MOV      r3,#0xa               ;8073
005294  fb90f0f3          SDIV     r0,r0,r3              ;8073
005298  b203              SXTH     r3,r0                 ;8073
00529a  f04f0000          MOV      r0,#0                 ;8074
                  |L1.21150|
00529e  f9325010          LDRSH    r5,[r2,r0,LSL #1]     ;8076
0052a2  429d              CMP      r5,r3                 ;8076
0052a4  dd07              BLE      |L1.21174|
0052a6  f1000001          ADD      r0,r0,#1              ;8074
0052aa  b2c0              UXTB     r0,r0                 ;8074
0052ac  e001              B        |L1.21170|
                  |L1.21166|
0052ae  e052              B        |L1.21334|
                  |L1.21168|
0052b0  e086              B        |L1.21440|
                  |L1.21170|
0052b2  2807              CMP      r0,#7                 ;8074
0052b4  d3f3              BCC      |L1.21150|
                  |L1.21174|
0052b6  b150              CBZ      r0,|L1.21198|
0052b8  1e45              SUBS     r5,r0,#1              ;8082
0052ba  2d06              CMP      r5,#6                 ;8082
0052bc  d25f              BCS      |L1.21374|
0052be  f832c015          LDRH     r12,[r2,r5,LSL #1]    ;8085
0052c2  ebac0303          SUB      r3,r12,r3             ;8085
0052c6  b21b              SXTH     r3,r3                 ;8085
0052c8  f8322010          LDRH     r2,[r2,r0,LSL #1]     ;8086
0052cc  e032              B        |L1.21300|
                  |L1.21198|
0052ce  e053              B        |L1.21368|
                  |L1.21200|
                          DCD      ADR_EE_BAT_ZAR_CNT
                  |L1.21204|
                          DCD      BAT_C_REAL
                  |L1.21208|
                          DCD      BAT_C_NOM
                  |L1.21212|
                          DCD      0xffff7360
                  |L1.21216|
                          DCD      BAT_TYPE
                  |L1.21220|
                          DCD      lakb
                  |L1.21224|
                          DCD      t_ext
                  |L1.21228|
                          DCD      TBATSIGN
                  |L1.21232|
                          DCD      ND_EXT
                  |L1.21236|
                          DCD      TBATMAX
                  |L1.21240|
                          DCD      ADR_EE_BAT_RESURS
                  |L1.21244|
                          DCD      ||area_number.19||+0x20
                  |L1.21248|
                          DCD      ||area_number.25||
                  |L1.21252|
                          DCD      0x000f4240
                  |L1.21256|
                          DCD      Ib_ips_termokompensat
                  |L1.21260|
                          DCD      IKB
                  |L1.21264|
                          DCD      BAT_C_POINT_1_6
                  |L1.21268|
                          DCD      ||.bss||+0x44c
                  |L1.21272|
                          DCD      BAT_C_POINT_1_2
                  |L1.21276|
                          DCD      BAT_C_POINT_1
                  |L1.21280|
                          DCD      BAT_C_POINT_3
                  |L1.21284|
                          DCD      BAT_C_POINT_5
                  |L1.21288|
                          DCD      BAT_C_POINT_10
                  |L1.21292|
                          DCD      BAT_C_POINT_20
                  |L1.21296|
                          DCD      BAT_K_OLD
                  |L1.21300|
005334  ebac0202          SUB      r2,r12,r2             ;8086
005338  fa0ffc82          SXTH     r12,r2                ;8086
00533c  f85d9020          LDR      r9,[sp,r0,LSL #2]     ;8087
005340  f85d0025          LDR      r0,[sp,r5,LSL #2]     ;8087
005344  eba90200          SUB      r2,r9,r0              ;8087
005348  fb02f203          MUL      r2,r2,r3              ;8088
00534c  fb92f2fc          SDIV     r2,r2,r12             ;8089
005350  4410              ADD      r0,r0,r2              ;8090
005352  64f0              STR      r0,[r6,#0x4c]         ;8090  ; bat_hndl_t_razr
005354  e017              B        |L1.21382|
                  |L1.21334|
005356  f44f70ef          MOV      r0,#0x1de             ;8043
00535a  f7fffffe          BL       lc640_read_int
00535e  6570              STR      r0,[r6,#0x54]         ;8043  ; bat_hndl_zvu_Q
005360  2865              CMP      r0,#0x65              ;8044
005362  d300              BCC      |L1.21350|
005364  6575              STR      r5,[r6,#0x54]         ;8044  ; bat_hndl_zvu_Q
                  |L1.21350|
005366  6d70              LDR      r0,[r6,#0x54]         ;8045  ; bat_hndl_zvu_Q
005368  f2427110          MOV      r1,#0x2710            ;8045
00536c  fb00f001          MUL      r0,r0,r1              ;8045
005370  6570              STR      r0,[r6,#0x54]         ;8045  ; bat_hndl_zvu_Q
005372  f8849009          STRB     r9,[r4,#9]            ;8047
005376  e066              B        |L1.21574|
                  |L1.21368|
005378  9800              LDR      r0,[sp,#0]            ;8081
00537a  64f0              STR      r0,[r6,#0x4c]         ;8081  ; bat_hndl_t_razr
00537c  e003              B        |L1.21382|
                  |L1.21374|
00537e  2807              CMP      r0,#7                 ;8092
005380  d301              BCC      |L1.21382|
005382  9806              LDR      r0,[sp,#0x18]         ;8094
005384  64f0              STR      r0,[r6,#0x4c]         ;8094  ; bat_hndl_t_razr
                  |L1.21382|
005386  6cf0              LDR      r0,[r6,#0x4c]  ; bat_hndl_t_razr
005388  fb98f0f0          SDIV     r0,r8,r0
00538c  65b0              STR      r0,[r6,#0x58]  ; bat_hndl_proc_razr
;;;8097   
;;;8098   		if(bat_hndl_zvu_Q>bat_hndl_proc_razr)bat_hndl_zvu_Q-=bat_hndl_proc_razr;
00538e  4281              CMP      r1,r0
005390  dd03              BLE      |L1.21402|
005392  eba10000          SUB      r0,r1,r0
005396  6570              STR      r0,[r6,#0x54]  ; bat_hndl_zvu_Q
005398  e000              B        |L1.21404|
                  |L1.21402|
;;;8099   		else bat_hndl_zvu_Q=0L;
00539a  6577              STR      r7,[r6,#0x54]  ; bat_hndl_zvu_Q
                  |L1.21404|
;;;8100   
;;;8101   		bat_hndl_t_razr_hour=(short)(bat_hndl_remain_time/3600L);
00539c  6df1              LDR      r1,[r6,#0x5c]  ; bat_hndl_remain_time
00539e  f44f6061          MOV      r0,#0xe10
0053a2  fb91f0f0          SDIV     r0,r1,r0
0053a6  80f0              STRH     r0,[r6,#6]
;;;8102   		bat_hndl_t_razr_min=(short)(bat_hndl_remain_time/60L);
0053a8  f04f003c          MOV      r0,#0x3c
0053ac  fb91f1f0          SDIV     r1,r1,r0
0053b0  b209              SXTH     r1,r1
0053b2  8131              STRH     r1,[r6,#8]
;;;8103   		bat_hndl_t_razr_mininhour=bat_hndl_t_razr_min%60L;
0053b4  fb91f2f0          SDIV     r2,r1,r0
0053b8  fb001012          MLS      r0,r0,r2,r1
0053bc  8170              STRH     r0,[r6,#0xa]
0053be  e016              B        |L1.21486|
                  |L1.21440|
;;;8104   
;;;8105   		}
;;;8106   	else if(Ib_ips_termokompensat>IKB)
0053c0  4290              CMP      r0,r2
0053c2  dd14              BLE      |L1.21486|
;;;8107   		{
;;;8108   		bat_hndl_i_vector=1;
0053c4  f884900b          STRB     r9,[r4,#0xb]
;;;8109   
;;;8110   		bat_hndl_i=Ib_ips_termokompensat;
0053c8  80b0              STRH     r0,[r6,#4]
;;;8111   		bat_hndl_i_summ+=(long)bat_hndl_i;
0053ca  6e72              LDR      r2,[r6,#0x64]  ; bat_hndl_i_summ
0053cc  4410              ADD      r0,r0,r2
0053ce  6670              STR      r0,[r6,#0x64]  ; bat_hndl_i_summ
;;;8112   		if(bat_hndl_i_summ>=36000L)
0053d0  f64842a0          MOV      r2,#0x8ca0
0053d4  4290              CMP      r0,r2
0053d6  db0a              BLT      |L1.21486|
;;;8113   
;;;8114   		//bat_hndl_t_razr=BAT_C_POINT_20*36000L/bat_hndl_i;
;;;8115   		//bat_hndl_proc_razr=1000000L/bat_hndl_t_razr;
;;;8116   			{
;;;8117   			bat_hndl_i_summ-=36000L;
0053d8  eba00002          SUB      r0,r0,r2
0053dc  6670              STR      r0,[r6,#0x64]  ; bat_hndl_i_summ
;;;8118   			if(bat_hndl_zvu_Q<1000000L)bat_hndl_zvu_Q+=bat_hndl_i_zar_price;
0053de  4541              CMP      r1,r8
0053e0  da03              BGE      |L1.21482|
0053e2  6930              LDR      r0,[r6,#0x10]  ; bat_hndl_i_zar_price
0053e4  4408              ADD      r0,r0,r1
0053e6  6570              STR      r0,[r6,#0x54]  ; bat_hndl_zvu_Q
0053e8  e001              B        |L1.21486|
                  |L1.21482|
;;;8119   			else bat_hndl_zvu_Q=1000000L; 
0053ea  f8c68054          STR      r8,[r6,#0x54]  ; bat_hndl_zvu_Q
                  |L1.21486|
;;;8120   			}
;;;8121   		}
;;;8122   
;;;8123   
;;;8124   	if(bat_hndl_i_vector!=bat_hndl_i_vector_old)
0053ee  7ae0              LDRB     r0,[r4,#0xb]  ; bat_hndl_i_vector
0053f0  7b21              LDRB     r1,[r4,#0xc]  ; bat_hndl_i_vector_old
0053f2  4288              CMP      r0,r1
0053f4  d00d              BEQ      |L1.21522|
;;;8125   		{
;;;8126   		if(bat_hndl_i_vector==1)
0053f6  2801              CMP      r0,#1
0053f8  d10b              BNE      |L1.21522|
;;;8127   			{
;;;8128   			signed short tempSS;
;;;8129   			tempSS=lc640_read_int(EE_AMPER_CHAS_CNT);
0053fa  f44f70e4          MOV      r0,#0x1c8
0053fe  f7fffffe          BL       lc640_read_int
005402  b200              SXTH     r0,r0
;;;8130   			bat_hndl_i_zar_price=(bat_hndl_zvu_Q-1000000L)/((long)tempSS);
005404  4aff              LDR      r2,|L1.22532|
005406  6d71              LDR      r1,[r6,#0x54]  ; bat_hndl_zvu_Q
005408  4411              ADD      r1,r1,r2
00540a  fb91f0f0          SDIV     r0,r1,r0
00540e  6130              STR      r0,[r6,#0x10]  ; bat_hndl_i_zar_price
;;;8131   			bat_hndl_i_summ=0;
005410  6677              STR      r7,[r6,#0x64]  ; bat_hndl_i_summ
                  |L1.21522|
;;;8132   			}
;;;8133   		}
;;;8134   	bat_hndl_i_vector_old=bat_hndl_i_vector;
005412  7ae0              LDRB     r0,[r4,#0xb]  ; bat_hndl_i_vector
005414  7320              STRB     r0,[r4,#0xc]
;;;8135   
;;;8136   	if((bat_hndl_zvu_Q/10000L)!=lc640_read_int(EE_BAT1_ZAR_CNT)) lc640_write_int(EE_BAT1_ZAR_CNT,bat_hndl_zvu_Q/10000L);
005416  6d70              LDR      r0,[r6,#0x54]  ; bat_hndl_zvu_Q
005418  f2427a10          MOV      r10,#0x2710
00541c  fb90f5fa          SDIV     r5,r0,r10
005420  f44f79ef          MOV      r9,#0x1de
005424  4648              MOV      r0,r9
005426  f7fffffe          BL       lc640_read_int
00542a  4285              CMP      r5,r0
00542c  d006              BEQ      |L1.21564|
00542e  6d70              LDR      r0,[r6,#0x54]  ; bat_hndl_zvu_Q
005430  fb90f0fa          SDIV     r0,r0,r10
005434  b201              SXTH     r1,r0
005436  4648              MOV      r0,r9
005438  f7fffffe          BL       lc640_write_int
                  |L1.21564|
;;;8137   	bat_hndl_remain_time=bat_hndl_zvu_Q/bat_hndl_proc_razr;
00543c  e9d60115          LDRD     r0,r1,[r6,#0x54]
005440  fb90f0f1          SDIV     r0,r0,r1
005444  65f0              STR      r0,[r6,#0x5c]  ; bat_hndl_remain_time
                  |L1.21574|
;;;8138   	}
;;;8139   
;;;8140   if(bat_hndl_zvu_Q>1000000L)	bat_hndl_zvu_Q=1000000L;
005446  6d70              LDR      r0,[r6,#0x54]  ; bat_hndl_zvu_Q
005448  4540              CMP      r0,r8
00544a  dd02              BLE      |L1.21586|
00544c  f8c68054          STR      r8,[r6,#0x54]  ; bat_hndl_zvu_Q
005450  e002              B        |L1.21592|
                  |L1.21586|
;;;8141   else if(bat_hndl_zvu_Q<0L)	bat_hndl_zvu_Q=0L;
005452  2800              CMP      r0,#0
005454  da00              BGE      |L1.21592|
005456  6577              STR      r7,[r6,#0x54]  ; bat_hndl_zvu_Q
                  |L1.21592|
;;;8142   
;;;8143   if((Ib_ips_termokompensat/10<(2*IKB))&&(Ib_ips_termokompensat/10>(-2*IKB))&&(!(bat[0]._av&0x01))&& (out_U<=u_necc_up) && (out_U>u_necc_dn) && (main_kb_cnt>=10) && (main_kb_cnt<=200) /*(main_kb_cnt==((TBAT*60)-10))*//*&& ((TVENTMAX!=0))*/ )
005458  48eb              LDR      r0,|L1.22536|
00545a  f9b01000          LDRSH    r1,[r0,#0]  ; Ib_ips_termokompensat
00545e  200a              MOVS     r0,#0xa
005460  fb91f0f0          SDIV     r0,r1,r0
005464  49e9              LDR      r1,|L1.22540|
005466  f9b11000          LDRSH    r1,[r1,#0]  ; IKB
00546a  ebb00f41          CMP      r0,r1,LSL #1
00546e  da30              BGE      |L1.21714|
005470  4249              RSBS     r1,r1,#0
005472  ebb00f41          CMP      r0,r1,LSL #1
005476  dd2c              BLE      |L1.21714|
005478  48e5              LDR      r0,|L1.22544|
00547a  f890003d          LDRB     r0,[r0,#0x3d]  ; bat
00547e  07c0              LSLS     r0,r0,#31
005480  d127              BNE      |L1.21714|
005482  48e4              LDR      r0,|L1.22548|
005484  49e4              LDR      r1,|L1.22552|
005486  f9b00000          LDRSH    r0,[r0,#0]  ; out_U
00548a  f9b11000          LDRSH    r1,[r1,#0]  ; u_necc_up
00548e  4288              CMP      r0,r1
005490  dc1f              BGT      |L1.21714|
005492  49e2              LDR      r1,|L1.22556|
005494  f9b11000          LDRSH    r1,[r1,#0]  ; u_necc_dn
005498  4288              CMP      r0,r1
00549a  dd1a              BLE      |L1.21714|
00549c  f9b40052          LDRSH    r0,[r4,#0x52]  ; main_kb_cnt
0054a0  280a              CMP      r0,#0xa
0054a2  db16              BLT      |L1.21714|
0054a4  28c8              CMP      r0,#0xc8
0054a6  dc14              BGT      |L1.21714|
;;;8144   	{
;;;8145   	if(bat_hndl_zvu_Q_cnt<60)
0054a8  f8940030          LDRB     r0,[r4,#0x30]  ; bat_hndl_zvu_Q_cnt
0054ac  283c              CMP      r0,#0x3c
0054ae  d20d              BCS      |L1.21708|
;;;8146   		{
;;;8147   		bat_hndl_zvu_Q_cnt++;
0054b0  f1000001          ADD      r0,r0,#1
0054b4  b2c0              UXTB     r0,r0
0054b6  f8840030          STRB     r0,[r4,#0x30]
;;;8148   		if(bat_hndl_zvu_Q_cnt>=60)
0054ba  283c              CMP      r0,#0x3c
0054bc  d306              BCC      |L1.21708|
;;;8149   			{
;;;8150   			lc640_write_int(EE_BAT1_ZAR_CNT,100);
0054be  2164              MOVS     r1,#0x64
0054c0  f44f70ef          MOV      r0,#0x1de
0054c4  f7fffffe          BL       lc640_write_int
;;;8151   			bat_hndl_zvu_Q=1000000L;
0054c8  f8c68054          STR      r8,[r6,#0x54]  ; bat_hndl_zvu_Q
                  |L1.21708|
;;;8152   
;;;8153   
;;;8154   			}
;;;8155   		}
;;;8156   	}
;;;8157   else 
;;;8158   	{
;;;8159   	bat_hndl_zvu_Q_cnt=0;
;;;8160   	}
;;;8161   
;;;8162   
;;;8163   
;;;8164   };
0054cc  b009              ADD      sp,sp,#0x24
0054ce  e8bd8ff0          POP      {r4-r11,pc}
                  |L1.21714|
0054d2  f8847030          STRB     r7,[r4,#0x30]         ;8159
0054d6  e7f9              B        |L1.21708|
;;;8165   #endif
                          ENDP

                  u_avt_set_hndl PROC
;;;8169   //Установка напряжения автономной работы в полуавтоматическом режиме
;;;8170   void u_avt_set_hndl(void)
0054d8  e92d5fff          PUSH     {r0-r12,lr}
;;;8171   {
;;;8172   if(uavt_set_stat==uassSTEP1)
0054dc  4dd0              LDR      r5,|L1.22560|
;;;8173   	{
;;;8174   	char i,find_succes;
;;;8175   
;;;8176   	//u_max_temp=U_AVT+10;//(short)((((long)U_AVT)*101U)/100U);
;;;8177   	//u_min_temp=U_AVT-10;//(short)((((long)U_AVT)*99U)/100U);
;;;8178   	if(uavt_set_stat_old!=uavt_set_stat)
;;;8179   		{
;;;8180   		uavt_set_error_cnt=60;
0054de  4ed1              LDR      r6,|L1.22564|
0054e0  f8df8344          LDR      r8,|L1.22568|
0054e4  7828              LDRB     r0,[r5,#0]            ;8172  ; uavt_set_stat
;;;8181   		}
;;;8182   	//mess_send(MESS2UNECC_HNDL,PARAM_UNECC_SET,U_AVT,10);
;;;8183   	mess_send(MESS2CNTRL_HNDL,PARAM_CNTRL_STAT_FAST_REG,0,10);
;;;8184   	find_succes=0;
;;;8185   /*	for(i=0;i<NUMIST;i++)
;;;8186   		{
;;;8187   		if((bps[i]._Uii<u_max_temp)&&(bps[i]._Uii>u_min_temp))continue;
;;;8188   		else
;;;8189   			{
;;;8190   			find_succes=0;
;;;8191   			break;
;;;8192   			}
;;;8193   		}*/
;;;8194   	if((bps_U>=U_AVT-1)&&(bps_U<=U_AVT+1))find_succes=1;
0054e6  f8dfa344          LDR      r10,|L1.22572|
0054ea  2400              MOVS     r4,#0                 ;8183
;;;8195   
;;;8196   	if(find_succes==1)
;;;8197   		{
;;;8198   		uavt_set_stat=uassSTEP2;
0054ec  f04f0902          MOV      r9,#2
;;;8199   		}
;;;8200   	if(uavt_set_error_cnt)
;;;8201   		{
;;;8202   		uavt_set_error_cnt--;
;;;8203   		if(!uavt_set_error_cnt)
;;;8204   			{
;;;8205   			uavt_set_stat=uassOFF;
;;;8206   			uavt_set_result_stat=uasrsERR;
;;;8207   			avt_error_bps=100;
0054f0  f04f0b64          MOV      r11,#0x64
0054f4  2801              CMP      r0,#1                 ;8172
0054f6  d12e              BNE      |L1.21846|
0054f8  f8980000          LDRB     r0,[r8,#0]            ;8178  ; uavt_set_stat_old
0054fc  2801              CMP      r0,#1                 ;8178
0054fe  d002              BEQ      |L1.21766|
005500  f04f003c          MOV      r0,#0x3c              ;8180
005504  7030              STRB     r0,[r6,#0]            ;8180
                  |L1.21766|
005506  230a              MOVS     r3,#0xa               ;8183
005508  2200              MOVS     r2,#0                 ;8183
00550a  21e6              MOVS     r1,#0xe6              ;8183
00550c  20e1              MOVS     r0,#0xe1              ;8183
00550e  f7fffffe          BL       mess_send
005512  f04f0000          MOV      r0,#0                 ;8184
005516  49c6              LDR      r1,|L1.22576|
005518  f9b12000          LDRSH    r2,[r1,#0]            ;8194  ; bps_U
00551c  f9ba1000          LDRSH    r1,[r10,#0]           ;8194  ; U_AVT
005520  f1a10301          SUB      r3,r1,#1              ;8194
005524  429a              CMP      r2,r3                 ;8194
005526  db04              BLT      |L1.21810|
005528  1c49              ADDS     r1,r1,#1              ;8194
00552a  428a              CMP      r2,r1                 ;8194
00552c  dc01              BGT      |L1.21810|
00552e  f04f0001          MOV      r0,#1                 ;8194
                  |L1.21810|
005532  2801              CMP      r0,#1                 ;8196
005534  d101              BNE      |L1.21818|
005536  f8859000          STRB     r9,[r5,#0]            ;8198
                  |L1.21818|
00553a  7830              LDRB     r0,[r6,#0]            ;8200  ; uavt_set_error_cnt
00553c  b158              CBZ      r0,|L1.21846|
00553e  f1a00001          SUB      r0,r0,#1              ;8202
005542  b2c0              UXTB     r0,r0                 ;8202
005544  7030              STRB     r0,[r6,#0]            ;8202
005546  b930              CBNZ     r0,|L1.21846|
005548  702c              STRB     r4,[r5,#0]            ;8205
00554a  48ba              LDR      r0,|L1.22580|
00554c  f8809000          STRB     r9,[r0,#0]            ;8206
005550  48b9              LDR      r0,|L1.22584|
005552  f880b000          STRB     r11,[r0,#0]
                  |L1.21846|
;;;8208   			}
;;;8209   		}
;;;8210   	}
;;;8211   if(uavt_set_stat==uassSTEP2)
005556  782a              LDRB     r2,[r5,#0]  ; uavt_set_stat
;;;8212   	{
;;;8213   	char i,find_succes;
;;;8214   
;;;8215   	u_max_temp=(short)((((long)U_AVT)*101U)/100U);
005558  49b8              LDR      r1,|L1.22588|
;;;8216   	u_min_temp=(short)((((long)U_AVT)*99U)/100U);
00555a  48b9              LDR      r0,|L1.22592|
;;;8217   
;;;8218   	if(uavt_set_stat_old!=uavt_set_stat)
;;;8219   		{
;;;8220   		uavt_set_error_cnt=60;
;;;8221   		}
;;;8222   
;;;8223   	mess_send(MESS2UNECC_HNDL,PARAM_UNECC_SET,U_AVT,10);
;;;8224   	mess_send(MESS2CNTRL_HNDL,PARAM_CNTRL_STAT_FAST_REG,0,10);
;;;8225   	find_succes=1;
;;;8226   
;;;8227   	for(i=0;i<NUMIST;i++)
;;;8228   		{
;;;8229   		if((bps[i]._Uii<u_max_temp)&&(bps[i]._Uii>u_min_temp))continue;
;;;8230   		else
;;;8231   			{
;;;8232   			find_succes=0;
;;;8233   			avt_error_bps=i+1;
;;;8234   			break;
;;;8235   			}
;;;8236   		}
;;;8237   
;;;8238   	if(find_succes==1)
;;;8239   		{
;;;8240   		uavt_set_stat=uassSTEP3;
;;;8241   		uavt_bps_pntr=0;
00555c  4fb9              LDR      r7,|L1.22596|
00555e  2a02              CMP      r2,#2                 ;8211
005560  d002              BEQ      |L1.21864|
;;;8242   		avt_plazma=0;
;;;8243   		}
;;;8244   
;;;8245   	if(uavt_set_error_cnt)
;;;8246   		{
;;;8247   		uavt_set_error_cnt--;
;;;8248   		if(!uavt_set_error_cnt)
;;;8249   			{
;;;8250   			uavt_set_stat=uassOFF;
;;;8251   			uavt_set_result_stat=uasrsERR;
;;;8252   			}
;;;8253   		}
;;;8254   	}
;;;8255   else if(uavt_set_stat==uassSTEP3)
005562  2a03              CMP      r2,#3
005564  d05e              BEQ      |L1.22052|
005566  e0ca              B        |L1.22270|
                  |L1.21864|
005568  f9ba2000          LDRSH    r2,[r10,#0]           ;8215  ; U_AVT
00556c  f04f0365          MOV      r3,#0x65              ;8215
005570  fb02f303          MUL      r3,r2,r3              ;8215
005574  fbb3f3fb          UDIV     r3,r3,r11             ;8215
005578  468a              MOV      r10,r1                ;8215
00557a  800b              STRH     r3,[r1,#0]            ;8215
00557c  eb021142          ADD      r1,r2,r2,LSL #5       ;8216
005580  eb010141          ADD      r1,r1,r1,LSL #1       ;8216
005584  fbb1f1fb          UDIV     r1,r1,r11             ;8216
005588  4683              MOV      r11,r0                ;8216
00558a  8001              STRH     r1,[r0,#0]            ;8216
00558c  f8980000          LDRB     r0,[r8,#0]            ;8218  ; uavt_set_stat_old
005590  2802              CMP      r0,#2                 ;8218
005592  d002              BEQ      |L1.21914|
005594  f04f003c          MOV      r0,#0x3c              ;8220
005598  7030              STRB     r0,[r6,#0]            ;8220
                  |L1.21914|
00559a  230a              MOVS     r3,#0xa               ;8223
00559c  21bf              MOVS     r1,#0xbf              ;8223
00559e  20be              MOVS     r0,#0xbe              ;8223
0055a0  f7fffffe          BL       mess_send
0055a4  230a              MOVS     r3,#0xa               ;8224
0055a6  2200              MOVS     r2,#0                 ;8224
0055a8  21e6              MOVS     r1,#0xe6              ;8224
0055aa  20e1              MOVS     r0,#0xe1              ;8224
0055ac  f7fffffe          BL       mess_send
0055b0  f04f0201          MOV      r2,#1                 ;8225
0055b4  f04f0000          MOV      r0,#0                 ;8227
0055b8  49a4              LDR      r1,|L1.22604|
0055ba  f9ba3000          LDRSH    r3,[r10,#0]           ;8227
0055be  f8dfe288          LDR      lr,|L1.22600|
0055c2  f9bbc000          LDRSH    r12,[r11,#0]          ;8229
0055c6  f9b1a000          LDRSH    r10,[r1,#0]           ;8227
0055ca  e00d              B        |L1.21992|
                  |L1.21964|
0055cc  ebc001c0          RSB      r1,r0,r0,LSL #3       ;8229
0055d0  eb011100          ADD      r1,r1,r0,LSL #4       ;8229
0055d4  eb0e0181          ADD      r1,lr,r1,LSL #2       ;8229
0055d8  69c9              LDR      r1,[r1,#0x1c]         ;8229
0055da  4299              CMP      r1,r3                 ;8229
0055dc  da09              BGE      |L1.22002|
0055de  4561              CMP      r1,r12                ;8229
0055e0  dd07              BLE      |L1.22002|
0055e2  f1000001          ADD      r0,r0,#1              ;8227
0055e6  b2c0              UXTB     r0,r0                 ;8227
                  |L1.21992|
0055e8  4550              CMP      r0,r10                ;8227
0055ea  dbef              BLT      |L1.21964|
                  |L1.21996|
0055ec  2a01              CMP      r2,#1                 ;8238
0055ee  d007              BEQ      |L1.22016|
0055f0  e00c              B        |L1.22028|
                  |L1.22002|
0055f2  f04f0200          MOV      r2,#0                 ;8232
0055f6  4990              LDR      r1,|L1.22584|
0055f8  f1000001          ADD      r0,r0,#1              ;8233
0055fc  7008              STRB     r0,[r1,#0]            ;8233
0055fe  e7f5              B        |L1.21996|
                  |L1.22016|
005600  f04f0003          MOV      r0,#3                 ;8240
005604  7028              STRB     r0,[r5,#0]            ;8240
005606  703c              STRB     r4,[r7,#0]            ;8241
005608  4891              LDR      r0,|L1.22608|
00560a  7004              STRB     r4,[r0,#0]            ;8242
                  |L1.22028|
00560c  7830              LDRB     r0,[r6,#0]            ;8245  ; uavt_set_error_cnt
00560e  b3d0              CBZ      r0,|L1.22150|
005610  f1a00001          SUB      r0,r0,#1              ;8247
005614  b2c0              UXTB     r0,r0                 ;8247
005616  7030              STRB     r0,[r6,#0]            ;8247
005618  bba8              CBNZ     r0,|L1.22150|
00561a  702c              STRB     r4,[r5,#0]            ;8250
00561c  4885              LDR      r0,|L1.22580|
00561e  f8809000          STRB     r9,[r0,#0]            ;8251
005622  e06c              B        |L1.22270|
                  |L1.22052|
;;;8256   	{
;;;8257   	char i,find_succes;
;;;8258   
;;;8259   	u_max_temp=(short)((((long)U_AVT)*101U)/100U);
005624  f9ba2000          LDRSH    r2,[r10,#0]  ; U_AVT
005628  f04f0365          MOV      r3,#0x65
00562c  fb02f303          MUL      r3,r2,r3
005630  fbb3f3fb          UDIV     r3,r3,r11
005634  468a              MOV      r10,r1
005636  800b              STRH     r3,[r1,#0]
;;;8260   	u_min_temp=(short)((((long)U_AVT)*99U)/100U);
005638  eb021142          ADD      r1,r2,r2,LSL #5
00563c  eb010141          ADD      r1,r1,r1,LSL #1
005640  fbb1f1fb          UDIV     r1,r1,r11
005644  4683              MOV      r11,r0
005646  8001              STRH     r1,[r0,#0]
;;;8261   	
;;;8262   	if(uavt_set_stat_old!=uavt_set_stat)
005648  f8980000          LDRB     r0,[r8,#0]  ; uavt_set_stat_old
00564c  2803              CMP      r0,#3
00564e  d000              BEQ      |L1.22098|
;;;8263   		{
;;;8264   		uavt_bps_pntr=0;
005650  703c              STRB     r4,[r7,#0]
                  |L1.22098|
;;;8265   		}
;;;8266   
;;;8267   	mess_send(MESS2UNECC_HNDL,PARAM_UNECC_SET,U_AVT,10);
005652  230a              MOVS     r3,#0xa
005654  21bf              MOVS     r1,#0xbf
005656  20be              MOVS     r0,#0xbe
005658  f7fffffe          BL       mess_send
;;;8268   	mess_send(MESS2CNTRL_HNDL,PARAM_CNTRL_STAT_FAST_REG,0,10);
00565c  230a              MOVS     r3,#0xa
00565e  2200              MOVS     r2,#0
005660  21e6              MOVS     r1,#0xe6
005662  20e1              MOVS     r0,#0xe1
005664  f7fffffe          BL       mess_send
;;;8269   
;;;8270   	find_succes=1;
005668  f04f0601          MOV      r6,#1
;;;8271   	for(i=0;i<NUMIST;i++)
00566c  f04f0000          MOV      r0,#0
005670  f8df91d8          LDR      r9,|L1.22604|
005674  f9ba2000          LDRSH    r2,[r10,#0]
005678  f8dfc1cc          LDR      r12,|L1.22600|
00567c  f9bb3000          LDRSH    r3,[r11,#0]           ;8229
005680  f9b9a000          LDRSH    r10,[r9,#0]           ;8227
005684  e00e              B        |L1.22180|
                  |L1.22150|
005686  e03a              B        |L1.22270|
                  |L1.22152|
;;;8272   		{
;;;8273   		if((bps[i]._Uii<u_max_temp)&&(bps[i]._Uii>u_min_temp))continue;
005688  ebc001c0          RSB      r1,r0,r0,LSL #3
00568c  eb011100          ADD      r1,r1,r0,LSL #4
005690  eb0c0181          ADD      r1,r12,r1,LSL #2
005694  69c9              LDR      r1,[r1,#0x1c]
005696  4291              CMP      r1,r2
005698  da0f              BGE      |L1.22202|
00569a  4299              CMP      r1,r3
00569c  dd0d              BLE      |L1.22202|
00569e  f1000001          ADD      r0,r0,#1              ;8271
0056a2  b2c0              UXTB     r0,r0                 ;8271
                  |L1.22180|
0056a4  4550              CMP      r0,r10                ;8271
0056a6  dbef              BLT      |L1.22152|
                  |L1.22184|
;;;8274   		else
;;;8275   			{
;;;8276   			find_succes=0;
;;;8277   			break;
;;;8278   			}
;;;8279   		}
;;;8280   
;;;8281   	if(mess_find( (MESS2IND_HNDL)) && (mess_data[0]==PARAM_U_AVT_GOOD) )
0056a8  20d7              MOVS     r0,#0xd7
0056aa  f7fffffe          BL       mess_find
0056ae  b1a0              CBZ      r0,|L1.22234|
0056b0  4868              LDR      r0,|L1.22612|
0056b2  6800              LDR      r0,[r0,#0]  ; mess_data
0056b4  28d9              CMP      r0,#0xd9
0056b6  d003              BEQ      |L1.22208|
0056b8  e00f              B        |L1.22234|
                  |L1.22202|
0056ba  f04f0600          MOV      r6,#0                 ;8276
0056be  e7f3              B        |L1.22184|
                  |L1.22208|
;;;8282   		{
;;;8283   		if(++uavt_bps_pntr>=NUMIST)
0056c0  7838              LDRB     r0,[r7,#0]  ; uavt_bps_pntr
0056c2  1c40              ADDS     r0,r0,#1
0056c4  b2c0              UXTB     r0,r0
0056c6  7038              STRB     r0,[r7,#0]
0056c8  f9b91000          LDRSH    r1,[r9,#0]  ; NUMIST
0056cc  4288              CMP      r0,r1
0056ce  db04              BLT      |L1.22234|
;;;8284   			{
;;;8285   			uavt_set_stat=uassOFF;
0056d0  702c              STRB     r4,[r5,#0]
;;;8286   			uavt_set_result_stat=uasrsSUCCESS;
0056d2  4958              LDR      r1,|L1.22580|
0056d4  f04f0003          MOV      r0,#3
0056d8  7008              STRB     r0,[r1,#0]
                  |L1.22234|
;;;8287   			}
;;;8288   		//uavt_bps_pntr++;
;;;8289   		//if()
;;;8290   		}
;;;8291   	if(find_succes==1)
0056da  2e01              CMP      r6,#1
0056dc  d10f              BNE      |L1.22270|
;;;8292   		{
;;;8293   		mcp2515_transmit(uavt_bps_pntr,uavt_bps_pntr,CMND,0xee,0xee,0,0,0);
0056de  20ee              MOVS     r0,#0xee
0056e0  e9cd0400          STRD     r0,r4,[sp,#0]
0056e4  9402              STR      r4,[sp,#8]
0056e6  9403              STR      r4,[sp,#0xc]
0056e8  7839              LDRB     r1,[r7,#0]  ; uavt_bps_pntr
0056ea  4603              MOV      r3,r0
0056ec  2216              MOVS     r2,#0x16
0056ee  4608              MOV      r0,r1
0056f0  f7fffffe          BL       mcp2515_transmit
;;;8294   		avt_plazma++;
0056f4  4856              LDR      r0,|L1.22608|
0056f6  7801              LDRB     r1,[r0,#0]  ; avt_plazma
0056f8  f1010101          ADD      r1,r1,#1
0056fc  7001              STRB     r1,[r0,#0]
                  |L1.22270|
;;;8295   		}
;;;8296   	}
;;;8297   
;;;8298   
;;;8299   
;;;8300   uavt_set_stat_old=uavt_set_stat;
0056fe  7828              LDRB     r0,[r5,#0]  ; uavt_set_stat
005700  f8880000          STRB     r0,[r8,#0]
;;;8301   
;;;8302   }
005704  e8bd9fff          POP      {r0-r12,pc}
;;;8303   
                          ENDP

                  u_necc_hndl PROC
;;;8378   //-----------------------------------------------
;;;8379   void u_necc_hndl(void)
005708  b5f8              PUSH     {r3-r7,lr}
;;;8380   {
;;;8381   signed long temp_L;
;;;8382   signed long temp_SL;
;;;8383   //signed short temp_SS;
;;;8384   
;;;8385   //char i;
;;;8386   
;;;8387   //temp_SS=0;
;;;8388   signed short t[2];
;;;8389   
;;;8390   
;;;8391   
;;;8392   
;;;8393   #ifdef UKU_220_IPS_TERMOKOMPENSAT
;;;8394   
;;;8395   if(!TERMOKOMPENS)
00570a  4853              LDR      r0,|L1.22616|
;;;8396   	{
;;;8397   	//u_necc=U0B;
;;;8398   	u_necc=UB20;
;;;8399   	}
;;;8400   else
;;;8401   	{
;;;8402   	if(ND_EXT[0])t[0]=20;
;;;8403   	else t[0]=t_ext[0];
;;;8404   
;;;8405   	mat_temper=t[0];
;;;8406   			
;;;8407   	if(mat_temper<0)temp_SL=UB0; 
;;;8408   	else 
;;;8409   		{
;;;8410   		if(mat_temper>40)mat_temper=40; 
;;;8411   		temp_SL=(UB20-UB0)*10;
;;;8412   		temp_SL*=mat_temper;
;;;8413   		temp_SL/=200;
;;;8414   		temp_SL+=UB0;
;;;8415   		}
;;;8416   	if((spc_stat==spcVZ)&&((sk_stat[0]==1)||(VZ_CH_VENT_BLOK==0)))
00570c  4d55              LDR      r5,|L1.22628|
00570e  4c56              LDR      r4,|L1.22632|
005710  8801              LDRH     r1,[r0,#0]            ;8395  ; TERMOKOMPENS
005712  4852              LDR      r0,|L1.22620|
005714  f9b03000          LDRSH    r3,[r0,#0]            ;8398
;;;8417   		{
;;;8418   		temp_SL=UVZ;
005718  4851              LDR      r0,|L1.22624|
00571a  f9b02000          LDRSH    r2,[r0,#0]
00571e  b139              CBZ      r1,|L1.22320|
005720  4852              LDR      r0,|L1.22636|
005722  7800              LDRB     r0,[r0,#0]            ;8402  ; ND_EXT
005724  b130              CBZ      r0,|L1.22324|
005726  f04f0014          MOV      r0,#0x14              ;8402
00572a  f8ad0000          STRH     r0,[sp,#0]            ;8402
00572e  e005              B        |L1.22332|
                  |L1.22320|
005730  8023              STRH     r3,[r4,#0]            ;8398
005732  e02c              B        |L1.22414|
                  |L1.22324|
005734  484e              LDR      r0,|L1.22640|
005736  8800              LDRH     r0,[r0,#0]            ;8403  ; t_ext
005738  f8ad0000          STRH     r0,[sp,#0]            ;8403
                  |L1.22332|
00573c  4e4d              LDR      r6,|L1.22644|
00573e  f9bd1000          LDRSH    r1,[sp,#0]            ;8405
005742  6031              STR      r1,[r6,#0]            ;8405  ; mat_temper
005744  484c              LDR      r0,|L1.22648|
005746  2900              CMP      r1,#0                 ;8407
005748  f9b00000          LDRSH    r0,[r0,#0]            ;8407
00574c  db12              BLT      |L1.22388|
00574e  2928              CMP      r1,#0x28              ;8410
005750  dd02              BLE      |L1.22360|
005752  f04f0128          MOV      r1,#0x28              ;8410
005756  6031              STR      r1,[r6,#0]            ;8410  ; mat_temper
                  |L1.22360|
005758  eba30100          SUB      r1,r3,r0              ;8411
00575c  eb010181          ADD      r1,r1,r1,LSL #2       ;8411
005760  ea4f0141          LSL      r1,r1,#1              ;8411
005764  6833              LDR      r3,[r6,#0]            ;8412  ; mat_temper
005766  fb01f103          MUL      r1,r1,r3              ;8412
00576a  f04f03c8          MOV      r3,#0xc8              ;8413
00576e  fb91f1f3          SDIV     r1,r1,r3              ;8413
005772  4408              ADD      r0,r0,r1              ;8414
                  |L1.22388|
005774  f8951023          LDRB     r1,[r5,#0x23]         ;8416  ; spc_stat
005778  2902              CMP      r1,#2                 ;8416
00577a  d107              BNE      |L1.22412|
00577c  493f              LDR      r1,|L1.22652|
00577e  7809              LDRB     r1,[r1,#0]            ;8416  ; sk_stat
005780  2901              CMP      r1,#1                 ;8416
005782  d002              BEQ      |L1.22410|
005784  493e              LDR      r1,|L1.22656|
005786  8809              LDRH     r1,[r1,#0]            ;8416  ; VZ_CH_VENT_BLOK
005788  b901              CBNZ     r1,|L1.22412|
                  |L1.22410|
00578a  4610              MOV      r0,r2
                  |L1.22412|
;;;8419   		}
;;;8420   	u_necc=(unsigned int)temp_SL;
00578c  8020              STRH     r0,[r4,#0]
                  |L1.22414|
;;;8421   	///u_necc=3456;
;;;8422   	}  
;;;8423   
;;;8424   //u_necc=2355;
;;;8425   
;;;8426   if((speedChIsOn)||(sp_ch_stat==scsWRK))
00578e  483d              LDR      r0,|L1.22660|
005790  8800              LDRH     r0,[r0,#0]  ; speedChIsOn
005792  b918              CBNZ     r0,|L1.22428|
005794  483c              LDR      r0,|L1.22664|
005796  7800              LDRB     r0,[r0,#0]  ; sp_ch_stat
005798  2802              CMP      r0,#2
00579a  d102              BNE      |L1.22434|
                  |L1.22428|
;;;8427   	{
;;;8428   	u_necc=speedChrgVolt;
00579c  483b              LDR      r0,|L1.22668|
00579e  8800              LDRH     r0,[r0,#0]  ; speedChrgVolt
0057a0  8020              STRH     r0,[r4,#0]
                  |L1.22434|
;;;8429   	}
;;;8430   if(hv_vz_stat==hvsWRK)
0057a2  483b              LDR      r0,|L1.22672|
0057a4  7800              LDRB     r0,[r0,#0]  ; hv_vz_stat
0057a6  2805              CMP      r0,#5
0057a8  d100              BNE      |L1.22444|
;;;8431   	{
;;;8432   	u_necc=UVZ;
0057aa  8022              STRH     r2,[r4,#0]
                  |L1.22444|
;;;8433   	}
;;;8434   if(vz1_stat==vz1sWRK)
0057ac  7968              LDRB     r0,[r5,#5]  ; vz1_stat
0057ae  280a              CMP      r0,#0xa
0057b0  d102              BNE      |L1.22456|
;;;8435   	{
;;;8436   	u_necc=UZ_U;
0057b2  4838              LDR      r0,|L1.22676|
0057b4  8800              LDRH     r0,[r0,#0]  ; UZ_U
0057b6  8020              STRH     r0,[r4,#0]
                  |L1.22456|
;;;8437   	}
;;;8438   if(vz2_stat==vz2sWRK1)
0057b8  79e8              LDRB     r0,[r5,#7]  ; vz2_stat
0057ba  280a              CMP      r0,#0xa
0057bc  d102              BNE      |L1.22468|
;;;8439   	{
;;;8440   	u_necc=FZ_U1;
0057be  4936              LDR      r1,|L1.22680|
0057c0  8809              LDRH     r1,[r1,#0]  ; FZ_U1
0057c2  8021              STRH     r1,[r4,#0]
                  |L1.22468|
;;;8441   	}
;;;8442   if(vz2_stat==vz2sWRK2)
0057c4  280b              CMP      r0,#0xb
0057c6  d102              BNE      |L1.22478|
;;;8443   	{
;;;8444   	u_necc=FZ_U2;
0057c8  4834              LDR      r0,|L1.22684|
0057ca  8800              LDRH     r0,[r0,#0]  ; FZ_U2
0057cc  8020              STRH     r0,[r4,#0]
                  |L1.22478|
;;;8445   	}
;;;8446   
;;;8447   if((uavt_set_stat==uassSTEP1)||(uavt_set_stat==uassSTEP2))
0057ce  4814              LDR      r0,|L1.22560|
0057d0  7800              LDRB     r0,[r0,#0]  ; uavt_set_stat
0057d2  2801              CMP      r0,#1
0057d4  d001              BEQ      |L1.22490|
0057d6  2802              CMP      r0,#2
0057d8  d102              BNE      |L1.22496|
                  |L1.22490|
;;;8448   	{
;;;8449   	u_necc=U_AVT;
0057da  4814              LDR      r0,|L1.22572|
0057dc  8800              LDRH     r0,[r0,#0]  ; U_AVT
0057de  8020              STRH     r0,[r4,#0]
                  |L1.22496|
;;;8450   	}
;;;8451   
;;;8452   if(mess_find_unvol(MESS2UNECC_HNDL))
0057e0  20be              MOVS     r0,#0xbe
0057e2  f7fffffe          BL       mess_find_unvol
0057e6  b128              CBZ      r0,|L1.22516|
;;;8453   	{		
;;;8454   	if(mess_data[0]==PARAM_UNECC_SET)
0057e8  481a              LDR      r0,|L1.22612|
0057ea  6801              LDR      r1,[r0,#0]  ; mess_data
0057ec  29bf              CMP      r1,#0xbf
0057ee  d101              BNE      |L1.22516|
;;;8455   		{
;;;8456   		u_necc=mess_data[1];
0057f0  6840              LDR      r0,[r0,#4]  ; mess_data
0057f2  8020              STRH     r0,[r4,#0]
                  |L1.22516|
;;;8457   		}		
;;;8458   	} 
;;;8459   
;;;8460   //if(ICA_EN)u_necc+=ica_u_necc;
;;;8461   #endif
;;;8462   
;;;8463   
;;;8464   #ifndef UKU_220_IPS_TERMOKOMPENSAT
;;;8465   
;;;8466   #ifndef UKU_TELECORE2015
;;;8467   #ifndef UKU_TELECORE2017
;;;8468   if(unh_cnt0<10)
;;;8469   	{
;;;8470   	unh_cnt0++;
;;;8471   	if(unh_cnt0>=10)
;;;8472   		{
;;;8473   		unh_cnt0=0;
;;;8474   		b1Hz_unh=1;
;;;8475   		}
;;;8476   	}
;;;8477   
;;;8478   if(unh_cnt1<5)
;;;8479   	{
;;;8480   	unh_cnt1++;
;;;8481   	if(unh_cnt1==5)
;;;8482   		{
;;;8483   		unh_cnt1=0;
;;;8484   //		b2Hz_unh=1;
;;;8485   		}
;;;8486   	} 
;;;8487   
;;;8488   
;;;8489   
;;;8490   if(mess_find_unvol(MESS2UNECC_HNDL))
;;;8491   	{		
;;;8492   	if(mess_data[0]==PARAM_UNECC_SET)
;;;8493   		{
;;;8494   		u_necc=mess_data[1];
;;;8495   		}		
;;;8496   	}
;;;8497   
;;;8498   
;;;8499   else if(b1Hz_unh)
;;;8500   	{
;;;8501   	
;;;8502   	if((BAT_IS_ON[0]!=bisON) && (BAT_IS_ON[1]!=bisON))
;;;8503   		{
;;;8504   		
;;;8505   		u_necc=U0B;
;;;8506   		#ifdef IPS_SGEP_GAZPROM
;;;8507   		u_necc=UB0;
;;;8508   		#endif
;;;8509   		}
;;;8510   	else 
;;;8511   		{
;;;8512   		if(BAT_TYPE==0) //если батарея обычная
;;;8513   			{
;;;8514   			for(i=0;i<2;i++)
;;;8515   				{
;;;8516   				if(BAT_IS_ON[i]==bisON)
;;;8517   					{
;;;8518   					if(bat[i]._nd)t[i]=20;
;;;8519   					else t[i]=bat[i]._Tb;
;;;8520   					}
;;;8521   				else
;;;8522   					{
;;;8523   					t[i]=-20;
;;;8524   					}
;;;8525   				}
;;;8526   			if(t[0]>t[1])mat_temper=t[0];
;;;8527   			else mat_temper=t[1];
;;;8528   			
;;;8529   		
;;;8530   			if(mat_temper<0)temp_SL=UB0; 
;;;8531   			else 
;;;8532   				{
;;;8533   				if(mat_temper>40)mat_temper=40; 
;;;8534   				temp_SL=(UB20-UB0)*10;
;;;8535   				temp_SL*=mat_temper;
;;;8536   				temp_SL/=200;
;;;8537   				temp_SL+=UB0;
;;;8538   				}
;;;8539   			if((spc_stat==spcVZ)&&(sk_stat[0]==1))
;;;8540   				{
;;;8541   				temp_SL=UVZ;
;;;8542   				}
;;;8543   			u_necc=(unsigned int)temp_SL;
;;;8544   			}
;;;8545   		else if(BAT_TYPE==1) //если батарея китайская
;;;8546   			{
;;;8547   			u_necc=U0B;
;;;8548   					
;;;8549   			u_necc=bat[0]._Ub+10;
;;;8550   
;;;8551   			
;;;8552   			if((spc_stat==spcVZ)&&(sk_stat[0]==1))
;;;8553   				{
;;;8554   				u_necc=UVZ;
;;;8555   				}
;;;8556   			if(u_necc>=UB0) u_necc=UB0;
;;;8557   			if(u_necc>=UB20) u_necc=UB20;
;;;8558   			}
;;;8559   		}  
;;;8560   	}
;;;8561   #endif
;;;8562   #endif
;;;8563   
;;;8564   #ifdef UKU_TELECORE2015
;;;8565   
;;;8566   if(unh_cnt0<10)
;;;8567   	{
;;;8568   	unh_cnt0++;
;;;8569   	if(unh_cnt0>=10)
;;;8570   		{
;;;8571   		unh_cnt0=0;
;;;8572   		b1Hz_unh=1;
;;;8573   		}
;;;8574   	}
;;;8575   
;;;8576   if(unh_cnt1<5)
;;;8577   	{
;;;8578   	unh_cnt1++;
;;;8579   	if(unh_cnt1==5)
;;;8580   		{
;;;8581   		unh_cnt1=0;
;;;8582   //		b2Hz_unh=1;
;;;8583   		}
;;;8584   	} 
;;;8585   
;;;8586   
;;;8587   
;;;8588   if(mess_find_unvol(MESS2UNECC_HNDL))
;;;8589   	{		
;;;8590   	if(mess_data[0]==PARAM_UNECC_SET)
;;;8591   		{
;;;8592   		u_necc=mess_data[1];
;;;8593   		}		
;;;8594   	}
;;;8595   
;;;8596   
;;;8597   else if(b1Hz_unh)
;;;8598   	{
;;;8599   	b1Hz_unh=0;
;;;8600   
;;;8601   	if(BAT_TYPE==0)
;;;8602   		{
;;;8603   		if(bat[0]._nd)mat_temper=20;
;;;8604   		else mat_temper=bat[0]._Tb;
;;;8605   
;;;8606   			
;;;8607   		if(mat_temper<0)temp_SL=UB0; 
;;;8608   		else 
;;;8609   			{
;;;8610   			if(mat_temper>40)mat_temper=40; 
;;;8611   			temp_SL=(UB20-UB0)*10;
;;;8612   			temp_SL*=mat_temper;
;;;8613   			temp_SL/=200;
;;;8614   			temp_SL+=UB0;
;;;8615   			}
;;;8616   		if((spc_stat==spcVZ)&&(sk_stat[0]==1))
;;;8617   			{
;;;8618   			temp_SL=UVZ;
;;;8619   			}
;;;8620   		u_necc=(unsigned int)temp_SL;
;;;8621   	///u_necc=3456;
;;;8622   		}
;;;8623   	else if(BAT_TYPE==1)
;;;8624   		{
;;;8625   		
;;;8626   		gran(&DU_LI_BAT,1,30);
;;;8627   		u_necc=li_bat._Ub+DU_LI_BAT;
;;;8628   		gran(&u_necc,0,UB0);
;;;8629   		gran(&u_necc,0,UB20);
;;;8630   		gran(&u_necc,0,540);		
;;;8631   
;;;8632   
;;;8633   		if(li_bat._batStat!=bsOK)
;;;8634   			{
;;;8635   			u_necc=U0B;
;;;8636   			}
;;;8637   		if((spc_stat==spcVZ)&&(sk_stat[0]==1))
;;;8638   			{
;;;8639   			u_necc=UVZ;
;;;8640   			}
;;;8641   		/* 
;;;8642   		u_necc=U0B;
;;;8643   		
;;;8644   
;;;8645   	
;;;8646   		u_necc=UB0;
;;;8647   		u_necc=li_bat._Ub+10;
;;;8648   		if((li_bat._Ub<450)||(li_bat._Ub>550))
;;;8649   			{
;;;8650   			lakb_error_cnt++;
;;;8651   			if(lakb_error_cnt>=30)
;;;8652   				{
;;;8653   				lakb_error_cnt=30;
;;;8654   				u_necc=U0B;
;;;8655   				}
;;;8656   			}
;;;8657   		else lakb_error_cnt=0;*/
;;;8658   		}
;;;8659   	else if(BAT_TYPE==2)
;;;8660   		{
;;;8661   		u_necc=U0B;
;;;8662   		
;;;8663   		if((spc_stat==spcVZ)&&(sk_stat[0]==1))
;;;8664   			{
;;;8665   			u_necc=UVZ;
;;;8666   			}
;;;8667   	
;;;8668   		u_necc=UB0;
;;;8669   		}
;;;8670   
;;;8671   	else if(BAT_TYPE==3)
;;;8672   		{
;;;8673   		u_necc=U0B;
;;;8674   		
;;;8675   		if((spc_stat==spcVZ)&&(sk_stat[0]==1))
;;;8676   			{
;;;8677   			u_necc=UVZ;
;;;8678   			}
;;;8679   
;;;8680   		gran(&DU_LI_BAT,1,30);
;;;8681   
;;;8682   
;;;8683   		if(lakbNotErrorNum==0)
;;;8684   			{
;;;8685   			u_necc=U0B;
;;;8686   			}
;;;8687   		else 
;;;8688   			{
;;;8689   			signed short i;
;;;8690   			//signed short u_necc_max;
;;;8691   			//u_necc_max=0;
;;;8692   			char soc_flag=0;
;;;8693   
;;;8694   			for(i=(NUMBAT_TELECORE-1);i>=0;i--)
;;;8695   				{
;;;8696   				if(lakb[i]._communicationFullErrorStat==0)u_necc=lakb[i]._tot_bat_volt+DU_LI_BAT;
;;;8697   				if(lakb[i]._s_o_c_percent<QSODERG_LI_BAT)soc_flag=1;
;;;8698   				}
;;;8699   
;;;8700   			if(soc_flag==0)u_necc=USODERG_LI_BAT;
;;;8701   			}
;;;8702   		gran(&u_necc,0,UB0);
;;;8703   		//gran(&u_necc,0,UB20);
;;;8704   		gran(&u_necc,0,540);
;;;8705   		}
;;;8706   	}
;;;8707   
;;;8708   #endif 
;;;8709   
;;;8710   #ifdef UKU_TELECORE2017
;;;8711   
;;;8712   if(unh_cnt0<10)
;;;8713   	{
;;;8714   	unh_cnt0++;
;;;8715   	if(unh_cnt0>=10)
;;;8716   		{
;;;8717   		unh_cnt0=0;
;;;8718   		b1Hz_unh=1;
;;;8719   		}
;;;8720   	}
;;;8721   
;;;8722   if(unh_cnt1<5)
;;;8723   	{
;;;8724   	unh_cnt1++;
;;;8725   	if(unh_cnt1==5)
;;;8726   		{
;;;8727   		unh_cnt1=0;
;;;8728   //		b2Hz_unh=1;
;;;8729   		}
;;;8730   	} 
;;;8731   
;;;8732   
;;;8733   
;;;8734   if(mess_find_unvol(MESS2UNECC_HNDL))
;;;8735   	{		
;;;8736   	if(mess_data[0]==PARAM_UNECC_SET)
;;;8737   		{
;;;8738   		u_necc=mess_data[1];
;;;8739   		}		
;;;8740   	}
;;;8741   
;;;8742   
;;;8743   else if(b1Hz_unh)
;;;8744   	{
;;;8745   	b1Hz_unh=0;
;;;8746   
;;;8747   	if(BAT_TYPE==0)
;;;8748   		{
;;;8749   		if(bat[0]._nd)mat_temper=20;
;;;8750   		else mat_temper=bat[0]._Tb;
;;;8751   
;;;8752   			
;;;8753   		if(mat_temper<0)temp_SL=UB0; 
;;;8754   		else 
;;;8755   			{
;;;8756   			if(mat_temper>40)mat_temper=40; 
;;;8757   			temp_SL=(UB20-UB0)*10;
;;;8758   			temp_SL*=mat_temper;
;;;8759   			temp_SL/=200;
;;;8760   			temp_SL+=UB0;
;;;8761   			}
;;;8762   		if((spc_stat==spcVZ)&&(sk_stat[0]==1))
;;;8763   			{
;;;8764   			temp_SL=UVZ;
;;;8765   			}
;;;8766   		u_necc=(unsigned int)temp_SL;
;;;8767   	///u_necc=3456;
;;;8768   		}
;;;8769   	else if(BAT_TYPE==1)
;;;8770   		{
;;;8771   		
;;;8772   		gran(&DU_LI_BAT,1,30);
;;;8773   		u_necc=li_bat._Ub+DU_LI_BAT;
;;;8774   		gran(&u_necc,0,UB0);
;;;8775   		gran(&u_necc,0,UB20);
;;;8776   		gran(&u_necc,0,540);		
;;;8777   
;;;8778   
;;;8779   		if(li_bat._batStat!=bsOK)
;;;8780   			{
;;;8781   			u_necc=U0B;
;;;8782   			}
;;;8783   		if((spc_stat==spcVZ)&&(sk_stat[0]==1))
;;;8784   			{
;;;8785   			u_necc=UVZ;
;;;8786   			}
;;;8787   		}
;;;8788   	else if(BAT_TYPE==2)
;;;8789   		{
;;;8790   		u_necc=U0B;
;;;8791   		
;;;8792   		if((spc_stat==spcVZ)&&(sk_stat[0]==1))
;;;8793   			{
;;;8794   			u_necc=UVZ;
;;;8795   			}
;;;8796   	
;;;8797   		u_necc=UB0;
;;;8798   		}
;;;8799   
;;;8800   	else if(BAT_TYPE==3)
;;;8801   		{
;;;8802   		u_necc=U0B;
;;;8803   		
;;;8804   		if((spc_stat==spcVZ)&&(sk_stat[0]==1))
;;;8805   			{
;;;8806   			u_necc=UVZ;
;;;8807   			}
;;;8808   
;;;8809   		gran(&DU_LI_BAT,1,30);
;;;8810   
;;;8811   
;;;8812   		if(lakbNotErrorNum==0)
;;;8813   			{
;;;8814   			u_necc=U0B;
;;;8815   			}
;;;8816   		else 
;;;8817   			{
;;;8818   			signed short i;
;;;8819   			//signed short u_necc_max;
;;;8820   			//u_necc_max=0;
;;;8821   			char soc_flag=0;
;;;8822   
;;;8823   			for(i=(NUMBAT_TELECORE-1);i>=0;i--)
;;;8824   				{
;;;8825   				if(lakb[i]._communicationFullErrorStat==0)u_necc=lakb[i]._tot_bat_volt+DU_LI_BAT;
;;;8826   				if(lakb[i]._s_o_c_percent<QSODERG_LI_BAT)soc_flag=1;
;;;8827   				}
;;;8828   
;;;8829   			if(soc_flag==0)u_necc=USODERG_LI_BAT;
;;;8830   			}
;;;8831   		gran(&u_necc,0,UB0);
;;;8832   		//gran(&u_necc,0,UB20);
;;;8833   		gran(&u_necc,0,540);
;;;8834   		}
;;;8835   	}
;;;8836   
;;;8837   #endif 
;;;8838   //u_necc=2356;
;;;8839   
;;;8840   if((speedChIsOn)||(sp_ch_stat==scsWRK))
;;;8841   	{
;;;8842   	u_necc=speedChrgVolt;
;;;8843   	}
;;;8844   #endif//gran(&u_necc,400,UMAX);
;;;8845   
;;;8846   
;;;8847   
;;;8848   temp_L=(signed long) u_necc;
0057f4  f9b40000          LDRSH    r0,[r4,#0]  ; u_necc
;;;8849   temp_L*=98L;
0057f8  f04f0162          MOV      r1,#0x62
0057fc  fb00f101          MUL      r1,r0,r1
;;;8850   temp_L/=100L;
005800  e04e              B        |L1.22688|
005802  0000              DCW      0x0000
                  |L1.22532|
                          DCD      0xfff0bdc0
                  |L1.22536|
                          DCD      Ib_ips_termokompensat
                  |L1.22540|
                          DCD      IKB
                  |L1.22544|
                          DCD      bat
                  |L1.22548|
                          DCD      out_U
                  |L1.22552|
                          DCD      u_necc_up
                  |L1.22556|
                          DCD      u_necc_dn
                  |L1.22560|
                          DCD      uavt_set_stat
                  |L1.22564|
                          DCD      uavt_set_error_cnt
                  |L1.22568|
                          DCD      uavt_set_stat_old
                  |L1.22572|
                          DCD      U_AVT
                  |L1.22576|
                          DCD      bps_U
                  |L1.22580|
                          DCD      uavt_set_result_stat
                  |L1.22584|
                          DCD      avt_error_bps
                  |L1.22588|
                          DCD      u_max_temp
                  |L1.22592|
                          DCD      u_min_temp
                  |L1.22596|
                          DCD      uavt_bps_pntr
                  |L1.22600|
                          DCD      bps
                  |L1.22604|
                          DCD      NUMIST
                  |L1.22608|
                          DCD      avt_plazma
                  |L1.22612|
                          DCD      mess_data
                  |L1.22616|
                          DCD      TERMOKOMPENS
                  |L1.22620|
                          DCD      UB20
                  |L1.22624|
                          DCD      UVZ
                  |L1.22628|
                          DCD      ||area_number.25||
                  |L1.22632|
                          DCD      u_necc
                  |L1.22636|
                          DCD      ND_EXT
                  |L1.22640|
                          DCD      t_ext
                  |L1.22644|
                          DCD      mat_temper
                  |L1.22648|
                          DCD      UB0
                  |L1.22652|
                          DCD      sk_stat
                  |L1.22656|
                          DCD      VZ_CH_VENT_BLOK
                  |L1.22660|
                          DCD      speedChIsOn
                  |L1.22664|
                          DCD      sp_ch_stat
                  |L1.22668|
                          DCD      speedChrgVolt
                  |L1.22672|
                          DCD      hv_vz_stat
                  |L1.22676|
                          DCD      UZ_U
                  |L1.22680|
                          DCD      FZ_U1
                  |L1.22684|
                          DCD      FZ_U2
                  |L1.22688|
0058a0  f04f0264          MOV      r2,#0x64
0058a4  fb91f1f2          SDIV     r1,r1,r2
;;;8851   u_necc_dn=(signed short)temp_L;
0058a8  4bfc              LDR      r3,|L1.23708|
0058aa  8019              STRH     r1,[r3,#0]
;;;8852   
;;;8853   temp_L=(signed long) u_necc;
;;;8854   temp_L*=102L;
0058ac  f04f0166          MOV      r1,#0x66
0058b0  fb00f001          MUL      r0,r0,r1
;;;8855   temp_L/=100L;
0058b4  fb90f0f2          SDIV     r0,r0,r2
;;;8856   u_necc_up=(signed short)temp_L;
0058b8  49f9              LDR      r1,|L1.23712|
0058ba  8008              STRH     r0,[r1,#0]
;;;8857   /*
;;;8858   #ifdef IPS_SGEP_GAZPROM
;;;8859   u_necc=248;
;;;8860   #endif */
;;;8861   }
0058bc  bdf8              POP      {r3-r7,pc}
;;;8862   
                          ENDP

                  num_necc_hndl PROC
;;;8864   //-----------------------------------------------
;;;8865   void num_necc_hndl(void)
0058be  e92d41f0          PUSH     {r4-r8,lr}
;;;8866   {
;;;8867   
;;;8868   static short num_necc_block_cnt;
;;;8869   if(num_necc_block_cnt) num_necc_block_cnt--;
0058c2  4cf8              LDR      r4,|L1.23716|
0058c4  f9b40038          LDRSH    r0,[r4,#0x38]  ; num_necc_block_cnt
0058c8  b110              CBZ      r0,|L1.22736|
0058ca  f1a00001          SUB      r0,r0,#1
0058ce  8720              STRH     r0,[r4,#0x38]
                  |L1.22736|
;;;8870   
;;;8871   Isumm_=Isumm;
0058d0  48f5              LDR      r0,|L1.23720|
0058d2  4df6              LDR      r5,|L1.23724|
0058d4  8800              LDRH     r0,[r0,#0]  ; Isumm
0058d6  8028              STRH     r0,[r5,#0]
;;;8872   
;;;8873   if(bat[0]._Ib<0) Isumm_+=(abs(bat[0]._Ib))/10;
0058d8  4ef5              LDR      r6,|L1.23728|
0058da  270a              MOVS     r7,#0xa
0058dc  f9b60008          LDRSH    r0,[r6,#8]  ; bat
0058e0  2800              CMP      r0,#0
0058e2  da06              BGE      |L1.22770|
0058e4  f7fffffe          BL       abs
0058e8  fb90f0f7          SDIV     r0,r0,r7
0058ec  8829              LDRH     r1,[r5,#0]  ; Isumm_
0058ee  4408              ADD      r0,r0,r1
0058f0  8028              STRH     r0,[r5,#0]
                  |L1.22770|
;;;8874   if(bat[1]._Ib<0) Isumm_+=(abs(bat[1]._Ib))/10;
0058f2  f9b60054          LDRSH    r0,[r6,#0x54]  ; bat
0058f6  2800              CMP      r0,#0
0058f8  da06              BGE      |L1.22792|
0058fa  f7fffffe          BL       abs
0058fe  fb90f0f7          SDIV     r0,r0,r7
005902  8829              LDRH     r1,[r5,#0]  ; Isumm_
005904  4408              ADD      r0,r0,r1
005906  8028              STRH     r0,[r5,#0]
                  |L1.22792|
;;;8875   
;;;8876   num_necc_up=(Isumm_/((signed short)IMAX))+1;
005908  49ea              LDR      r1,|L1.23732|
00590a  f9b50000          LDRSH    r0,[r5,#0]  ; Isumm_
00590e  f9b11000          LDRSH    r1,[r1,#0]  ; IMAX
005912  fb90f1f1          SDIV     r1,r0,r1
005916  f1010101          ADD      r1,r1,#1
00591a  b2c9              UXTB     r1,r1
00591c  77e1              STRB     r1,[r4,#0x1f]
;;;8877   ////Isumm_+=(signed short)((IMAX*(10-KIMAX))/10);
;;;8878   ////Isumm_+=(signed short)(IMAX-IMIN);
;;;8879   
;;;8880   num_necc_down=(Isumm_/((signed short)IMIN))+1;
00591e  4ae6              LDR      r2,|L1.23736|
005920  f9b22000          LDRSH    r2,[r2,#0]  ; IMIN
005924  fb90f0f2          SDIV     r0,r0,r2
005928  f1000001          ADD      r0,r0,#1
00592c  b2c2              UXTB     r2,r0
00592e  f8842020          STRB     r2,[r4,#0x20]
;;;8881   
;;;8882   if(num_necc_up>num_necc)
005932  48e2              LDR      r0,|L1.23740|
;;;8883   	{
;;;8884   	num_necc=num_necc_up;
;;;8885   	num_necc_block_cnt=60;
005934  f04f053c          MOV      r5,#0x3c
005938  f9b03000          LDRSH    r3,[r0,#0]            ;8882  ; num_necc
00593c  4299              CMP      r1,r3                 ;8882
00593e  dd02              BLE      |L1.22854|
005940  8001              STRH     r1,[r0,#0]            ;8884
005942  8725              STRH     r5,[r4,#0x38]
005944  e005              B        |L1.22866|
                  |L1.22854|
;;;8886   	}
;;;8887   else if(num_necc_down<num_necc)
005946  429a              CMP      r2,r3
005948  da03              BGE      |L1.22866|
;;;8888   	{
;;;8889   	if(!num_necc_block_cnt)
00594a  8f21              LDRH     r1,[r4,#0x38]  ; num_necc_block_cnt
00594c  b909              CBNZ     r1,|L1.22866|
;;;8890   		{
;;;8891   		num_necc=num_necc_down;
00594e  8002              STRH     r2,[r0,#0]
;;;8892   		num_necc_block_cnt=60;
005950  8725              STRH     r5,[r4,#0x38]
                  |L1.22866|
;;;8893   		}
;;;8894   	}
;;;8895   
;;;8896   if(PAR) num_necc=NUMIST;
005952  49db              LDR      r1,|L1.23744|
005954  880a              LDRH     r2,[r1,#0]  ; PAR
005956  49db              LDR      r1,|L1.23748|
005958  b10a              CBZ      r2,|L1.22878|
00595a  880a              LDRH     r2,[r1,#0]  ; NUMIST
00595c  8002              STRH     r2,[r0,#0]
                  |L1.22878|
;;;8897   #ifdef UKU_220_IPS_TERMOKOMPENSAT
;;;8898   if(bPARALLEL) num_necc=NUMIST;
00595e  f894202d          LDRB     r2,[r4,#0x2d]  ; bPARALLEL
005962  b10a              CBZ      r2,|L1.22888|
005964  880a              LDRH     r2,[r1,#0]  ; NUMIST
005966  8002              STRH     r2,[r0,#0]
                  |L1.22888|
;;;8899   if(vz1_stat==vz1sWRK)num_necc=NUMIST; //Включаем все источники если уравнительный заряд
005968  7962              LDRB     r2,[r4,#5]  ; vz1_stat
00596a  2a0a              CMP      r2,#0xa
00596c  d101              BNE      |L1.22898|
00596e  880a              LDRH     r2,[r1,#0]  ; NUMIST
005970  8002              STRH     r2,[r0,#0]
                  |L1.22898|
;;;8900   if((vz2_stat==vz2sWRK1)||(vz2_stat==vz2sWRK2))num_necc=NUMIST; //Включаем все источники если уравнительный заряд
005972  79e2              LDRB     r2,[r4,#7]  ; vz2_stat
005974  2a0a              CMP      r2,#0xa
005976  d001              BEQ      |L1.22908|
005978  2a0b              CMP      r2,#0xb
00597a  d101              BNE      |L1.22912|
                  |L1.22908|
00597c  880a              LDRH     r2,[r1,#0]  ; NUMIST
00597e  8002              STRH     r2,[r0,#0]
                  |L1.22912|
;;;8901   #endif
;;;8902   
;;;8903   gran(&num_necc,1,NUMIST);
005980  f9b12000          LDRSH    r2,[r1,#0]  ; NUMIST
005984  e8bd41f0          POP      {r4-r8,lr}
005988  2101              MOVS     r1,#1
00598a  48cc              LDR      r0,|L1.23740|
00598c  f7ffbffe          B.W      gran
;;;8904   
;;;8905   }
;;;8906   
                          ENDP

                  cntrl_hndl PROC
;;;8909   //-----------------------------------------------
;;;8910   void cntrl_hndl(void)
005990  e92d5ff0          PUSH     {r4-r12,lr}
;;;8911   {
;;;8912   
;;;8913   
;;;8914   
;;;8915   IZMAX_=IZMAX;
005994  48cc              LDR      r0,|L1.23752|
005996  4cc3              LDR      r4,|L1.23716|
005998  8800              LDRH     r0,[r0,#0]  ; IZMAX
00599a  f8a4004c          STRH     r0,[r4,#0x4c]
;;;8916   
;;;8917   //cntrl_hndl_plazma=10;
;;;8918   
;;;8919   if((speedChIsOn)||(sp_ch_stat==scsWRK))IZMAX_=speedChrgCurr;
00599e  48cb              LDR      r0,|L1.23756|
0059a0  8800              LDRH     r0,[r0,#0]  ; speedChIsOn
0059a2  b918              CBNZ     r0,|L1.22956|
0059a4  48ca              LDR      r0,|L1.23760|
0059a6  7800              LDRB     r0,[r0,#0]  ; sp_ch_stat
0059a8  2802              CMP      r0,#2
0059aa  d103              BNE      |L1.22964|
                  |L1.22956|
0059ac  48c9              LDR      r0,|L1.23764|
0059ae  8800              LDRH     r0,[r0,#0]  ; speedChrgCurr
0059b0  f8a4004c          STRH     r0,[r4,#0x4c]
                  |L1.22964|
;;;8920   if(vz1_stat==vz1sWRK) IZMAX_=UZ_IMAX;
0059b4  7960              LDRB     r0,[r4,#5]  ; vz1_stat
0059b6  280a              CMP      r0,#0xa
0059b8  d103              BNE      |L1.22978|
0059ba  48c7              LDR      r0,|L1.23768|
0059bc  8800              LDRH     r0,[r0,#0]  ; UZ_IMAX
0059be  f8a4004c          STRH     r0,[r4,#0x4c]
                  |L1.22978|
;;;8921   if(vz2_stat==vz2sWRK1) IZMAX_=FZ_IMAX1;
0059c2  79e0              LDRB     r0,[r4,#7]  ; vz2_stat
0059c4  280a              CMP      r0,#0xa
0059c6  d103              BNE      |L1.22992|
0059c8  49c4              LDR      r1,|L1.23772|
0059ca  8809              LDRH     r1,[r1,#0]  ; FZ_IMAX1
0059cc  f8a4104c          STRH     r1,[r4,#0x4c]
                  |L1.22992|
;;;8922   if(vz2_stat==vz2sWRK2) IZMAX_=FZ_IMAX2;
0059d0  280b              CMP      r0,#0xb
0059d2  d103              BNE      |L1.23004|
0059d4  48c2              LDR      r0,|L1.23776|
0059d6  8800              LDRH     r0,[r0,#0]  ; FZ_IMAX2
0059d8  f8a4004c          STRH     r0,[r4,#0x4c]
                  |L1.23004|
;;;8923   //if(spc_stat==spcVZ) IZMAX_=IMAX_VZ;
;;;8924   
;;;8925   if(cntrl_stat_blok_cnt)cntrl_stat_blok_cnt--;
0059dc  f9b40074          LDRSH    r0,[r4,#0x74]  ; cntrl_stat_blok_cnt
0059e0  b118              CBZ      r0,|L1.23018|
0059e2  f1a00001          SUB      r0,r0,#1
0059e6  f8a40074          STRH     r0,[r4,#0x74]
                  |L1.23018|
;;;8926   if(cntrl_stat_blok_cnt_)cntrl_stat_blok_cnt_--;
0059ea  f9b40076          LDRSH    r0,[r4,#0x76]  ; cntrl_stat_blok_cnt_
0059ee  b118              CBZ      r0,|L1.23032|
0059f0  f1a00001          SUB      r0,r0,#1
0059f4  f8a40076          STRH     r0,[r4,#0x76]
                  |L1.23032|
;;;8927   
;;;8928   if((bat[0]._temper_stat&0x03)||(bat[1]._temper_stat&0x03))IZMAX_=IZMAX_/10;
0059f8  48ad              LDR      r0,|L1.23728|
0059fa  f04f080a          MOV      r8,#0xa               ;8920
0059fe  f890103f          LDRB     r1,[r0,#0x3f]  ; bat
005a02  0789              LSLS     r1,r1,#30
005a04  d103              BNE      |L1.23054|
005a06  f890008b          LDRB     r0,[r0,#0x8b]  ; bat
005a0a  0780              LSLS     r0,r0,#30
005a0c  d005              BEQ      |L1.23066|
                  |L1.23054|
005a0e  f8b4004c          LDRH     r0,[r4,#0x4c]  ; IZMAX_
005a12  fbb0f0f8          UDIV     r0,r0,r8
005a16  f8a4004c          STRH     r0,[r4,#0x4c]
                  |L1.23066|
;;;8929   
;;;8930   
;;;8931   #ifdef UKU_220_IPS_TERMOKOMPENSAT
;;;8932   if((REG_SPEED<1)||(REG_SPEED>5)) REG_SPEED=1;
005a1a  48b2              LDR      r0,|L1.23780|
005a1c  2601              MOVS     r6,#1
005a1e  f9b01000          LDRSH    r1,[r0,#0]  ; REG_SPEED
005a22  1e49              SUBS     r1,r1,#1
005a24  2905              CMP      r1,#5
005a26  d300              BCC      |L1.23082|
005a28  8006              STRH     r6,[r0,#0]
                  |L1.23082|
;;;8933   if(ch_cnt0<(10*REG_SPEED))
005a2a  f9b00000          LDRSH    r0,[r0,#0]  ; REG_SPEED
005a2e  7d61              LDRB     r1,[r4,#0x15]  ; ch_cnt0
005a30  eb000080          ADD      r0,r0,r0,LSL #2
005a34  2500              MOVS     r5,#0                 ;8919
005a36  ebb10f40          CMP      r1,r0,LSL #1
005a3a  da08              BGE      |L1.23118|
;;;8934   	{
;;;8935   	ch_cnt0++;
005a3c  f1010101          ADD      r1,r1,#1
005a40  b2c9              UXTB     r1,r1
005a42  7561              STRB     r1,[r4,#0x15]
;;;8936   	if(ch_cnt0>=10*REG_SPEED)
005a44  ebb10f40          CMP      r1,r0,LSL #1
005a48  db01              BLT      |L1.23118|
;;;8937   		{
;;;8938   		ch_cnt0=0;
005a4a  7565              STRB     r5,[r4,#0x15]
;;;8939   		b1Hz_ch=1;
005a4c  75a6              STRB     r6,[r4,#0x16]
                  |L1.23118|
;;;8940   		}
;;;8941   	}
;;;8942   #endif
;;;8943   #ifndef UKU_220_IPS_TERMOKOMPENSAT
;;;8944   if(ch_cnt0<10)
;;;8945   	{
;;;8946   	ch_cnt0++;
;;;8947   	if(ch_cnt0>=10)
;;;8948   		{
;;;8949   		ch_cnt0=0;
;;;8950   		b1Hz_ch=1;
;;;8951   		}
;;;8952   	}
;;;8953   #endif
;;;8954   
;;;8955   
;;;8956   if(mess_find_unvol(MESS2CNTRL_HNDL))
005a4e  20e1              MOVS     r0,#0xe1
005a50  f7fffffe          BL       mess_find_unvol
;;;8957   	{
;;;8958   	if(mess_data[0]==PARAM_CNTRL_STAT_PLUS)
;;;8959   		{
;;;8960   		cntrl_stat/*_new*/=cntrl_stat_old+mess_data[1];
;;;8961   		}
;;;8962   	else if(mess_data[0]==PARAM_CNTRL_STAT_MINUS)
;;;8963   		{
;;;8964   		cntrl_stat/*_new*/=cntrl_stat_old-mess_data[1];
;;;8965   		}
;;;8966   	else if(mess_data[0]==PARAM_CNTRL_STAT_STEP_DOWN)
;;;8967   		{
;;;8968   		static char cntrlStatIsDownCnt;
;;;8969   		cntrl_stat--;
;;;8970   
;;;8971   		if((cntrl_stat<=30)||(load_U<USIGN))
;;;8972   			{
;;;8973   			if(++cntrlStatIsDownCnt==250)mess_send(MESS2KB_HNDL,PARAM_CNTRL_IS_DOWN,0,10);
;;;8974   			}
;;;8975   		else 
;;;8976   			{
;;;8977   			cntrlStatIsDownCnt=0;
;;;8978   			}
;;;8979   
;;;8980   		}
;;;8981   	else if(mess_data[0]==PARAM_CNTRL_STAT_SET)
;;;8982   		{
;;;8983   		cntrl_stat/*_new*/=mess_data[1];
;;;8984   		}
;;;8985   
;;;8986   	else if(mess_data[0]==PARAM_CNTRL_STAT_FAST_REG)
;;;8987   		{
;;;8988   		#ifdef UKU_220_IPS_TERMOKOMPENSAT
;;;8989   		if(bps_U>u_necc)
005a54  f8dfc290          LDR      r12,|L1.23784|
005a58  4aa4              LDR      r2,|L1.23788|
;;;8990   			{
;;;8991   			cntrl_hndl_plazma=11;
;;;8992   			if(((bps_U-u_necc)>40)&&(cntrl_stat/*_new*/>0))cntrl_stat/*_new*/-=5;
;;;8993   			else if((cntrl_stat/*_new*/)&&b1Hz_ch)cntrl_stat/*_new*/--;
;;;8994   			}
;;;8995   		else if(bps_U<u_necc)
;;;8996   			{
;;;8997   			cntrl_hndl_plazma=12;	
;;;8998   			if(((u_necc-bps_U)>40)&&(cntrl_stat/*_new*/<1015))cntrl_stat/*_new*/+=5;
;;;8999   			else	if((cntrl_stat/*_new*/<1020)&&b1Hz_ch)cntrl_stat/*_new*/++;
;;;9000   			}
;;;9001   		#elif defined(UKU_220)
;;;9002   		if(load_U>u_necc)
;;;9003   			{
;;;9004   			cntrl_hndl_plazma=13;
;;;9005   			if(((load_U-u_necc)>40)&&(cntrl_stat/*_new*/>0))cntrl_stat/*_new*/-=5;
;;;9006   			else if((cntrl_stat/*_new*/)&&b1Hz_ch)cntrl_stat/*_new*/--;
;;;9007   			}
;;;9008   		else if(load_U<u_necc)
;;;9009   			{
;;;9010   			cntrl_hndl_plazma=14;	
;;;9011   			if(((u_necc-load_U)>40)&&(cntrl_stat/*_new*/<1015))cntrl_stat/*_new*/+=5;
;;;9012   			else	if((cntrl_stat/*_new*/<1020)&&b1Hz_ch)cntrl_stat/*_new*/++;
;;;9013   			}
;;;9014   		#elif defined(UKU_220_V2)
;;;9015   		if(load_U>u_necc)
;;;9016   			{
;;;9017   			cntrl_hndl_plazma=15;
;;;9018   			if(((load_U-u_necc)>40)&&(cntrl_stat/*_new*/>0))cntrl_stat/*_new*/-=5;
;;;9019   			else if((cntrl_stat/*_new*/)&&b1Hz_ch)cntrl_stat/*_new*/--;
;;;9020   			}
;;;9021   		else if(load_U<u_necc)
;;;9022   			{
;;;9023   			cntrl_hndl_plazma=16;	
;;;9024   			if(((u_necc-load_U)>40)&&(cntrl_stat/*_new*/<1015))cntrl_stat/*_new*/+=5;
;;;9025   			else	if((cntrl_stat/*_new*/<1020)&&b1Hz_ch)cntrl_stat/*_new*/++;
;;;9026   			}
;;;9027   		#else
;;;9028   
;;;9029   		if(load_U>u_necc)
;;;9030   			{
;;;9031   			cntrl_hndl_plazma=17;
;;;9032   			if(((load_U-u_necc)>10)&&(cntrl_stat/*_new*/>0))cntrl_stat/*_new*/-=5;
;;;9033   			else if((cntrl_stat/*_new*/)&&b1Hz_ch)cntrl_stat/*_new*/--;
;;;9034   			}
;;;9035   		else if(load_U<u_necc)
;;;9036   			{
;;;9037   			cntrl_hndl_plazma=18;	
;;;9038   			if(((u_necc-load_U)>10)&&(cntrl_stat/*_new*/<1015))cntrl_stat/*_new*/+=5;
;;;9039   			else	if((cntrl_stat/*_new*/<1020)&&b1Hz_ch)cntrl_stat/*_new*/++;
;;;9040   			}
;;;9041   		#endif	
;;;9042   	 	}
;;;9043   
;;;9044   	/*gran(&cntrl_stat_new,10,1010);			
;;;9045   	cntrl_stat_old=cntrl_stat_new;
;;;9046   	cntrl_stat=cntrl_stat_new;*/
;;;9047   	}
;;;9048   
;;;9049   #ifdef UKU_220_IPS_TERMOKOMPENSAT
;;;9050   else if((b1Hz_ch)&&((!bIBAT_SMKLBR)||(bps[8]._cnt>40)))
005a5a  f8df9294          LDR      r9,|L1.23792|
;;;9051   	{
;;;9052   	cntrl_stat_new=cntrl_stat_old;
;;;9053   	cntrl_hndl_plazma=19;
;;;9054   	if((Ibmax/10)>(2*IZMAX_))
;;;9055   		{
;;;9056   		cntrl_hndl_plazma=20;
;;;9057             if(cntrl_stat_blok_cnt)cntrl_stat_new--;
;;;9058   		else	cntrl_stat_new-=10;
;;;9059   		}		
;;;9060   	else if(((Ibmax/10)<(IZMAX_*2))&&(Ibmax>(IZMAX_*15)))
;;;9061   		{
;;;9062   		cntrl_hndl_plazma=21;
;;;9063             if(cntrl_stat_blok_cnt)cntrl_stat_new--;
;;;9064             else	cntrl_stat_new-=3;
;;;9065   		}   
;;;9066   	else if((Ibmax<(IZMAX_*15))&&((Ibmax/10)>IZMAX_))
;;;9067   		{
;;;9068   		cntrl_hndl_plazma=22;
;;;9069   		cntrl_stat_new--;
;;;9070   		}
;;;9071   		
;;;9072   	else if(bps_U<u_necc)
;;;9073   		{
;;;9074   		cntrl_hndl_plazma=23;
;;;9075   		if(bps_U<(u_necc-(UB0-UB20)))
;;;9076   			{
;;;9077   			cntrl_hndl_plazma=24;
;;;9078   			if(Ibmax<0)
;;;9079   				{
;;;9080   				cntrl_hndl_plazma=25;
;;;9081                       if(cntrl_stat_blok_cnt)cntrl_stat_new++;
;;;9082   				else cntrl_stat_new+=10;
;;;9083   				}
;;;9084   			else if(Ibmax<(IZMAX_*5))
;;;9085   				{
;;;9086   				cntrl_hndl_plazma=26;
;;;9087                       if(cntrl_stat_blok_cnt)cntrl_stat_new++;
;;;9088   				else	cntrl_stat_new+=2;
;;;9089   				}
;;;9090   			else if(Ibmax<((IZMAX_*10)/*-10*/))//(Ibmax<((IZMAX_*95)/10))
;;;9091   				{
;;;9092   				cntrl_hndl_plazma=27;
;;;9093   				cntrl_stat_new++;
;;;9094   				}					
;;;9095   			}
;;;9096   		else if(bps_U<(u_necc-((UB0-UB20)/4)))
;;;9097   			{
;;;9098   			cntrl_hndl_plazma=28;
;;;9099   			if(Ibmax<(IZMAX_*5))
;;;9100   				{
;;;9101   				cntrl_hndl_plazma=29;
;;;9102                       if(cntrl_stat_blok_cnt)cntrl_stat_new++;
;;;9103   				else	cntrl_stat_new+=2;
;;;9104   				}
;;;9105   			else if(Ibmax<((IZMAX_*10)/*-10*/))//(Ibmax<((IZMAX_*95)/10))
;;;9106   				{
;;;9107   				cntrl_hndl_plazma=30;
;;;9108   				cntrl_stat_new++;
;;;9109   				}					
;;;9110   			}	
;;;9111   		else if(bps_U<(u_necc-1))
;;;9112   			{
;;;9113   			cntrl_hndl_plazma=31;
;;;9114   			if(Ibmax<((IZMAX_*10)/*-10*/))//(Ibmax<((IZMAX_*95)/10))
;;;9115   				{
;;;9116   				cntrl_hndl_plazma=32;
;;;9117   				cntrl_stat_new++;
;;;9118   				}					
;;;9119   			}					
;;;9120   		}	
;;;9121   	else if((bps_U>u_necc)/*&&(!cntrl_blok)*/)
;;;9122   		{ 	
;;;9123   		cntrl_hndl_plazma=33;
;;;9124   		if(bps_U>(u_necc+(UB0-UB20)))
;;;9125   			{
;;;9126   			cntrl_hndl_plazma=34;
;;;9127                  if(cntrl_stat_blok_cnt)cntrl_stat_new--;
;;;9128   			else	cntrl_stat_new-=10;
;;;9129   			}
;;;9130   		else if(bps_U>(u_necc+((UB0-UB20)/4)))
;;;9131   			{
;;;9132   			cntrl_hndl_plazma=35;
;;;9133                  if(cntrl_stat_blok_cnt)cntrl_stat_new--;
;;;9134   			else cntrl_stat_new-=2;
;;;9135   			}	
;;;9136   		else if(bps_U>(u_necc+1))
;;;9137   			{
;;;9138   			cntrl_hndl_plazma=36;
;;;9139   			cntrl_stat_new--;
;;;9140   			}					
;;;9141   		}
;;;9142   
;;;9143   	if((hv_vz_stat==hvsOFF)&&(vz1_stat==vz1sOFF)&&(vz2_stat==vz2sOFF))
;;;9144   		{
;;;9145   		if(((sk_stat[1]==1)&&(sk_stat_old[1]==0))&&(VZ_KIND==1))cntrl_stat_new=50;
;;;9146   		}
;;;9147   
;;;9148   	gran(&cntrl_stat_new,10,1010);			
;;;9149   	cntrl_stat_old=cntrl_stat_new;
;;;9150   	cntrl_stat=cntrl_stat_new;
;;;9151   	
;;;9152   	if(ICA_EN==0)
;;;9153   		{
;;;9154   		if(ica_cntrl_hndl_cnt)
005a5e  4fa5              LDR      r7,|L1.23796|
005a60  b398              CBZ      r0,|L1.23242|
005a62  49a5              LDR      r1,|L1.23800|
005a64  6808              LDR      r0,[r1,#0]            ;8958  ; mess_data
005a66  2864              CMP      r0,#0x64              ;8958
005a68  d008              BEQ      |L1.23164|
005a6a  2869              CMP      r0,#0x69              ;8962
005a6c  d00b              BEQ      |L1.23174|
005a6e  286e              CMP      r0,#0x6e              ;8966
005a70  d00f              BEQ      |L1.23186|
005a72  28e5              CMP      r0,#0xe5              ;8981
005a74  d02c              BEQ      |L1.23248|
005a76  28e6              CMP      r0,#0xe6              ;8986
005a78  d02d              BEQ      |L1.23254|
                  |L1.23162|
005a7a  e205              B        |L1.24200|
                  |L1.23164|
005a7c  6848              LDR      r0,[r1,#4]            ;8960  ; mess_data
005a7e  8ea1              LDRH     r1,[r4,#0x34]         ;8960  ; cntrl_stat_old
005a80  4408              ADD      r0,r0,r1              ;8960
005a82  8660              STRH     r0,[r4,#0x32]         ;8960
005a84  e200              B        |L1.24200|
                  |L1.23174|
005a86  6848              LDR      r0,[r1,#4]            ;8964  ; mess_data
005a88  8ea1              LDRH     r1,[r4,#0x34]         ;8964  ; cntrl_stat_old
005a8a  eba10000          SUB      r0,r1,r0              ;8964
005a8e  8660              STRH     r0,[r4,#0x32]         ;8964
005a90  e1fa              B        |L1.24200|
                  |L1.23186|
005a92  8e60              LDRH     r0,[r4,#0x32]         ;8969  ; cntrl_stat
005a94  f1a00001          SUB      r0,r0,#1              ;8969
005a98  b200              SXTH     r0,r0                 ;8969
005a9a  8660              STRH     r0,[r4,#0x32]         ;8969
005a9c  281e              CMP      r0,#0x1e              ;8971
005a9e  dd07              BLE      |L1.23216|
005aa0  4896              LDR      r0,|L1.23804|
005aa2  4997              LDR      r1,|L1.23808|
005aa4  f9b00000          LDRSH    r0,[r0,#0]            ;8971  ; load_U
005aa8  f9b11000          LDRSH    r1,[r1,#0]            ;8971  ; USIGN
005aac  4288              CMP      r0,r1                 ;8971
005aae  da0d              BGE      |L1.23244|
                  |L1.23216|
005ab0  7be0              LDRB     r0,[r4,#0xf]          ;8973  ; cntrlStatIsDownCnt
005ab2  1c40              ADDS     r0,r0,#1              ;8973
005ab4  b2c0              UXTB     r0,r0                 ;8973
005ab6  73e0              STRB     r0,[r4,#0xf]          ;8973
005ab8  28fa              CMP      r0,#0xfa              ;8973
005aba  d1de              BNE      |L1.23162|
005abc  230a              MOVS     r3,#0xa               ;8973
005abe  2200              MOVS     r2,#0                 ;8973
005ac0  21e7              MOVS     r1,#0xe7              ;8973
005ac2  20e6              MOVS     r0,#0xe6              ;8973
005ac4  f7fffffe          BL       mess_send
005ac8  e1de              B        |L1.24200|
                  |L1.23242|
005aca  e044              B        |L1.23382|
                  |L1.23244|
005acc  73e5              STRB     r5,[r4,#0xf]          ;8977
005ace  e1db              B        |L1.24200|
                  |L1.23248|
005ad0  6848              LDR      r0,[r1,#4]            ;8983  ; mess_data
005ad2  8660              STRH     r0,[r4,#0x32]         ;8983
005ad4  e1d8              B        |L1.24200|
                  |L1.23254|
005ad6  f9bc0000          LDRSH    r0,[r12,#0]           ;8989  ; bps_U
005ada  f9b21000          LDRSH    r1,[r2,#0]            ;8989  ; u_necc
005ade  4288              CMP      r0,r1                 ;8989
005ae0  dd1a              BLE      |L1.23320|
005ae2  f04f020b          MOV      r2,#0xb               ;8991
005ae6  f884202e          STRB     r2,[r4,#0x2e]         ;8991
005aea  eba00001          SUB      r0,r0,r1              ;8992
005aee  2828              CMP      r0,#0x28              ;8992
005af0  dd07              BLE      |L1.23298|
005af2  f9b40032          LDRSH    r0,[r4,#0x32]         ;8992  ; cntrl_stat
005af6  2800              CMP      r0,#0                 ;8992
005af8  dd03              BLE      |L1.23298|
005afa  f1a00005          SUB      r0,r0,#5              ;8992
005afe  8660              STRH     r0,[r4,#0x32]         ;8992
005b00  e1c2              B        |L1.24200|
                  |L1.23298|
005b02  f9b40032          LDRSH    r0,[r4,#0x32]         ;8993  ; cntrl_stat
005b06  2800              CMP      r0,#0                 ;8993
005b08  d0b7              BEQ      |L1.23162|
005b0a  7da1              LDRB     r1,[r4,#0x16]         ;8993  ; b1Hz_ch
005b0c  2900              CMP      r1,#0                 ;8993
005b0e  d0b4              BEQ      |L1.23162|
005b10  f1a00001          SUB      r0,r0,#1              ;8993
005b14  8660              STRH     r0,[r4,#0x32]         ;8993
005b16  e1b7              B        |L1.24200|
                  |L1.23320|
005b18  daaf              BGE      |L1.23162|
005b1a  f04f020c          MOV      r2,#0xc               ;8997
005b1e  f884202e          STRB     r2,[r4,#0x2e]         ;8997
005b22  eba10000          SUB      r0,r1,r0              ;8998
005b26  2828              CMP      r0,#0x28              ;8998
005b28  dd09              BLE      |L1.23358|
005b2a  f9b40032          LDRSH    r0,[r4,#0x32]         ;8998  ; cntrl_stat
005b2e  f24031f7          MOV      r1,#0x3f7             ;8998
005b32  4288              CMP      r0,r1                 ;8998
005b34  da03              BGE      |L1.23358|
005b36  f1000005          ADD      r0,r0,#5              ;8998
005b3a  8660              STRH     r0,[r4,#0x32]         ;8998
005b3c  e1a4              B        |L1.24200|
                  |L1.23358|
005b3e  f9b40032          LDRSH    r0,[r4,#0x32]         ;8999  ; cntrl_stat
005b42  f5b07f7f          CMP      r0,#0x3fc             ;8999
005b46  da98              BGE      |L1.23162|
005b48  7da1              LDRB     r1,[r4,#0x16]         ;8999  ; b1Hz_ch
005b4a  2900              CMP      r1,#0                 ;8999
005b4c  d095              BEQ      |L1.23162|
005b4e  f1000001          ADD      r0,r0,#1              ;8999
005b52  8660              STRH     r0,[r4,#0x32]         ;8999
005b54  e198              B        |L1.24200|
                  |L1.23382|
005b56  7da0              LDRB     r0,[r4,#0x16]         ;9050  ; b1Hz_ch
005b58  2800              CMP      r0,#0                 ;9050
005b5a  d08e              BEQ      |L1.23162|
005b5c  4869              LDR      r0,|L1.23812|
005b5e  8800              LDRH     r0,[r0,#0]            ;9050  ; bIBAT_SMKLBR
005b60  b118              CBZ      r0,|L1.23402|
005b62  f89902e3          LDRB     r0,[r9,#0x2e3]        ;9050  ; bps
005b66  2828              CMP      r0,#0x28              ;9050
005b68  d987              BLS      |L1.23162|
                  |L1.23402|
005b6a  f104042e          ADD      r4,r4,#0x2e           ;9052
005b6e  f9b40006          LDRSH    r0,[r4,#6]            ;9052  ; cntrl_stat_old
005b72  8360              STRH     r0,[r4,#0x1a]         ;9052
005b74  f04f0113          MOV      r1,#0x13              ;9053
005b78  7021              STRB     r1,[r4,#0]            ;9053
005b7a  f9b4101c          LDRSH    r1,[r4,#0x1c]         ;9054  ; Ibmax
005b7e  8be3              LDRH     r3,[r4,#0x1e]         ;9054  ; IZMAX_
005b80  fb91f8f8          SDIV     r8,r1,r8              ;9054
005b84  f1a4042e          SUB      r4,r4,#0x2e           ;9054
005b88  ebb80f43          CMP      r8,r3,LSL #1          ;9054
005b8c  dd10              BLE      |L1.23472|
005b8e  f04f0114          MOV      r1,#0x14              ;9056
005b92  f884102e          STRB     r1,[r4,#0x2e]         ;9056
005b96  f8b41074          LDRH     r1,[r4,#0x74]         ;9057  ; cntrl_stat_blok_cnt
005b9a  b121              CBZ      r1,|L1.23462|
005b9c  f1a00001          SUB      r0,r0,#1              ;9057
005ba0  f8a40048          STRH     r0,[r4,#0x48]         ;9057
005ba4  e13a              B        |L1.24092|
                  |L1.23462|
005ba6  f1a0000a          SUB      r0,r0,#0xa            ;9058
005baa  f8a40048          STRH     r0,[r4,#0x48]         ;9058
005bae  e135              B        |L1.24092|
                  |L1.23472|
005bb0  da14              BGE      |L1.23516|
005bb2  ebc31a03          RSB      r10,r3,r3,LSL #4      ;9060
005bb6  458a              CMP      r10,r1                ;9060
005bb8  da10              BGE      |L1.23516|
005bba  f04f0115          MOV      r1,#0x15              ;9062
005bbe  f884102e          STRB     r1,[r4,#0x2e]         ;9062
005bc2  f8b41074          LDRH     r1,[r4,#0x74]         ;9063  ; cntrl_stat_blok_cnt
005bc6  b121              CBZ      r1,|L1.23506|
005bc8  f1a00001          SUB      r0,r0,#1              ;9063
005bcc  f8a40048          STRH     r0,[r4,#0x48]         ;9063
005bd0  e124              B        |L1.24092|
                  |L1.23506|
005bd2  f1a00003          SUB      r0,r0,#3              ;9064
005bd6  f8a40048          STRH     r0,[r4,#0x48]         ;9064
005bda  e11f              B        |L1.24092|
                  |L1.23516|
005bdc  ebc31a03          RSB      r10,r3,r3,LSL #4      ;9066
005be0  458a              CMP      r10,r1                ;9066
005be2  dd0a              BLE      |L1.23546|
005be4  4598              CMP      r8,r3                 ;9066
005be6  dd08              BLE      |L1.23546|
005be8  f04f0116          MOV      r1,#0x16              ;9068
005bec  f884102e          STRB     r1,[r4,#0x2e]         ;9068
005bf0  f1a00001          SUB      r0,r0,#1              ;9069
005bf4  f8a40048          STRH     r0,[r4,#0x48]         ;9069
005bf8  e110              B        |L1.24092|
                  |L1.23546|
005bfa  f9bcc000          LDRSH    r12,[r12,#0]          ;9072  ; bps_U
005bfe  f9b22000          LDRSH    r2,[r2,#0]            ;9072  ; u_necc
005c02  f8df8104          LDR      r8,|L1.23816|
005c06  f8dfb104          LDR      r11,|L1.23820|
005c0a  4594              CMP      r12,r2                ;9072
005c0c  da45              BGE      |L1.23706|
005c0e  f04f0a17          MOV      r10,#0x17             ;9074
005c12  f884a02e          STRB     r10,[r4,#0x2e]        ;9074
005c16  f9b88000          LDRSH    r8,[r8,#0]            ;9075  ; UB0
005c1a  f9bba000          LDRSH    r10,[r11,#0]          ;9075  ; UB20
005c1e  eba8080a          SUB      r8,r8,r10             ;9075
005c22  eba20a08          SUB      r10,r2,r8             ;9075
005c26  45e2              CMP      r10,r12               ;9075
005c28  dd73              BLE      |L1.23826|
005c2a  f04f0218          MOV      r2,#0x18              ;9077
005c2e  f884202e          STRB     r2,[r4,#0x2e]         ;9077
005c32  2900              CMP      r1,#0                 ;9078
005c34  da10              BGE      |L1.23640|
005c36  f04f0119          MOV      r1,#0x19              ;9080
005c3a  f884102e          STRB     r1,[r4,#0x2e]         ;9080
005c3e  f8b41074          LDRH     r1,[r4,#0x74]         ;9081  ; cntrl_stat_blok_cnt
005c42  b121              CBZ      r1,|L1.23630|
005c44  f1000001          ADD      r0,r0,#1              ;9081
005c48  f8a40048          STRH     r0,[r4,#0x48]         ;9081
005c4c  e0e6              B        |L1.24092|
                  |L1.23630|
005c4e  f100000a          ADD      r0,r0,#0xa            ;9082
005c52  f8a40048          STRH     r0,[r4,#0x48]         ;9082
005c56  e0e1              B        |L1.24092|
                  |L1.23640|
005c58  eb030283          ADD      r2,r3,r3,LSL #2       ;9084
005c5c  428a              CMP      r2,r1                 ;9084
005c5e  dd10              BLE      |L1.23682|
005c60  f04f011a          MOV      r1,#0x1a              ;9086
005c64  f884102e          STRB     r1,[r4,#0x2e]         ;9086
005c68  f8b41074          LDRH     r1,[r4,#0x74]         ;9087  ; cntrl_stat_blok_cnt
005c6c  b121              CBZ      r1,|L1.23672|
005c6e  f1000001          ADD      r0,r0,#1              ;9087
005c72  f8a40048          STRH     r0,[r4,#0x48]         ;9087
005c76  e0d1              B        |L1.24092|
                  |L1.23672|
005c78  f1000002          ADD      r0,r0,#2              ;9088
005c7c  f8a40048          STRH     r0,[r4,#0x48]         ;9088
005c80  e0cc              B        |L1.24092|
                  |L1.23682|
005c82  ebb10f42          CMP      r1,r2,LSL #1          ;9090
005c86  da07              BGE      |L1.23704|
005c88  f04f011b          MOV      r1,#0x1b              ;9092
005c8c  f884102e          STRB     r1,[r4,#0x2e]         ;9092
005c90  f1000001          ADD      r0,r0,#1              ;9093
005c94  f8a40048          STRH     r0,[r4,#0x48]         ;9093
                  |L1.23704|
005c98  e0c0              B        |L1.24092|
                  |L1.23706|
005c9a  e07c              B        |L1.23958|
                  |L1.23708|
                          DCD      u_necc_dn
                  |L1.23712|
                          DCD      u_necc_up
                  |L1.23716|
                          DCD      ||area_number.25||
                  |L1.23720|
                          DCD      Isumm
                  |L1.23724|
                          DCD      Isumm_
                  |L1.23728|
                          DCD      bat
                  |L1.23732|
                          DCD      IMAX
                  |L1.23736|
                          DCD      IMIN
                  |L1.23740|
                          DCD      num_necc
                  |L1.23744|
                          DCD      PAR
                  |L1.23748|
                          DCD      NUMIST
                  |L1.23752|
                          DCD      IZMAX
                  |L1.23756|
                          DCD      speedChIsOn
                  |L1.23760|
                          DCD      sp_ch_stat
                  |L1.23764|
                          DCD      speedChrgCurr
                  |L1.23768|
                          DCD      UZ_IMAX
                  |L1.23772|
                          DCD      FZ_IMAX1
                  |L1.23776|
                          DCD      FZ_IMAX2
                  |L1.23780|
                          DCD      REG_SPEED
                  |L1.23784|
                          DCD      bps_U
                  |L1.23788|
                          DCD      u_necc
                  |L1.23792|
                          DCD      bps
                  |L1.23796|
                          DCD      ica_cntrl_hndl_cnt
                  |L1.23800|
                          DCD      mess_data
                  |L1.23804|
                          DCD      load_U
                  |L1.23808|
                          DCD      USIGN
                  |L1.23812|
                          DCD      bIBAT_SMKLBR
                  |L1.23816|
                          DCD      UB0
                  |L1.23820|
                          DCD      UB20
005d10  e7ff              B        |L1.23826|
                  |L1.23826|
005d12  ea4f7ae8          ASR      r10,r8,#31            ;9096
005d16  eb08789a          ADD      r8,r8,r10,LSR #30     ;9096
005d1a  eba208a8          SUB      r8,r2,r8,ASR #2       ;9096
005d1e  45e0              CMP      r8,r12                ;9096
005d20  dd24              BLE      |L1.23916|
005d22  f04f021c          MOV      r2,#0x1c              ;9098
005d26  f884202e          STRB     r2,[r4,#0x2e]         ;9098
005d2a  eb030283          ADD      r2,r3,r3,LSL #2       ;9099
005d2e  428a              CMP      r2,r1                 ;9099
005d30  dd10              BLE      |L1.23892|
005d32  f04f011d          MOV      r1,#0x1d              ;9101
005d36  f884102e          STRB     r1,[r4,#0x2e]         ;9101
005d3a  f8b41074          LDRH     r1,[r4,#0x74]         ;9102  ; cntrl_stat_blok_cnt
005d3e  b121              CBZ      r1,|L1.23882|
005d40  f1000001          ADD      r0,r0,#1              ;9102
005d44  f8a40048          STRH     r0,[r4,#0x48]         ;9102
005d48  e068              B        |L1.24092|
                  |L1.23882|
005d4a  f1000002          ADD      r0,r0,#2              ;9103
005d4e  f8a40048          STRH     r0,[r4,#0x48]         ;9103
005d52  e063              B        |L1.24092|
                  |L1.23892|
005d54  ebb10f42          CMP      r1,r2,LSL #1          ;9105
005d58  da60              BGE      |L1.24092|
005d5a  f04f011e          MOV      r1,#0x1e              ;9107
005d5e  f884102e          STRB     r1,[r4,#0x2e]         ;9107
005d62  f1000001          ADD      r0,r0,#1              ;9108
005d66  f8a40048          STRH     r0,[r4,#0x48]         ;9108
005d6a  e057              B        |L1.24092|
                  |L1.23916|
005d6c  1e52              SUBS     r2,r2,#1              ;9111
005d6e  4594              CMP      r12,r2                ;9111
005d70  da54              BGE      |L1.24092|
005d72  f04f021f          MOV      r2,#0x1f              ;9113
005d76  f884202e          STRB     r2,[r4,#0x2e]         ;9113
005d7a  eb030283          ADD      r2,r3,r3,LSL #2       ;9114
005d7e  ebb10f42          CMP      r1,r2,LSL #1          ;9114
005d82  da4b              BGE      |L1.24092|
005d84  f04f0120          MOV      r1,#0x20              ;9116
005d88  f884102e          STRB     r1,[r4,#0x2e]         ;9116
005d8c  f1000001          ADD      r0,r0,#1              ;9117
005d90  f8a40048          STRH     r0,[r4,#0x48]         ;9117
005d94  e042              B        |L1.24092|
                  |L1.23958|
005d96  dd41              BLE      |L1.24092|
005d98  f04f0121          MOV      r1,#0x21              ;9123
005d9c  f884102e          STRB     r1,[r4,#0x2e]         ;9123
005da0  f9b81000          LDRSH    r1,[r8,#0]            ;9124  ; UB0
005da4  f9bb3000          LDRSH    r3,[r11,#0]           ;9124  ; UB20
005da8  eba10103          SUB      r1,r1,r3              ;9124
005dac  eb010302          ADD      r3,r1,r2              ;9124
005db0  4563              CMP      r3,r12                ;9124
005db2  da10              BGE      |L1.24022|
005db4  f04f0122          MOV      r1,#0x22              ;9126
005db8  f884102e          STRB     r1,[r4,#0x2e]         ;9126
005dbc  f8b41074          LDRH     r1,[r4,#0x74]         ;9127  ; cntrl_stat_blok_cnt
005dc0  b121              CBZ      r1,|L1.24012|
005dc2  f1a00001          SUB      r0,r0,#1              ;9127
005dc6  f8a40048          STRH     r0,[r4,#0x48]         ;9127
005dca  e027              B        |L1.24092|
                  |L1.24012|
005dcc  f1a0000a          SUB      r0,r0,#0xa            ;9128
005dd0  f8a40048          STRH     r0,[r4,#0x48]         ;9128
005dd4  e022              B        |L1.24092|
                  |L1.24022|
005dd6  17cb              ASRS     r3,r1,#31             ;9130
005dd8  eb017193          ADD      r1,r1,r3,LSR #30      ;9130
005ddc  eb0201a1          ADD      r1,r2,r1,ASR #2       ;9130
005de0  4561              CMP      r1,r12                ;9130
005de2  da10              BGE      |L1.24070|
005de4  f04f0123          MOV      r1,#0x23              ;9132
005de8  f884102e          STRB     r1,[r4,#0x2e]         ;9132
005dec  f8b41074          LDRH     r1,[r4,#0x74]         ;9133  ; cntrl_stat_blok_cnt
005df0  b121              CBZ      r1,|L1.24060|
005df2  f1a00001          SUB      r0,r0,#1              ;9133
005df6  f8a40048          STRH     r0,[r4,#0x48]         ;9133
005dfa  e00f              B        |L1.24092|
                  |L1.24060|
005dfc  f1a00002          SUB      r0,r0,#2              ;9134
005e00  f8a40048          STRH     r0,[r4,#0x48]         ;9134
005e04  e00a              B        |L1.24092|
                  |L1.24070|
005e06  1c52              ADDS     r2,r2,#1              ;9136
005e08  4594              CMP      r12,r2                ;9136
005e0a  dd07              BLE      |L1.24092|
005e0c  f04f0124          MOV      r1,#0x24              ;9138
005e10  f884102e          STRB     r1,[r4,#0x2e]         ;9138
005e14  f1a00001          SUB      r0,r0,#1              ;9139
005e18  f8a40048          STRH     r0,[r4,#0x48]         ;9139
                  |L1.24092|
005e1c  48ff              LDR      r0,|L1.25116|
005e1e  7961              LDRB     r1,[r4,#5]            ;9143  ; vz1_stat
005e20  7800              LDRB     r0,[r0,#0]            ;9143  ; hv_vz_stat
005e22  4308              ORRS     r0,r0,r1              ;9143
005e24  79e1              LDRB     r1,[r4,#7]            ;9143  ; vz2_stat
005e26  4308              ORRS     r0,r0,r1              ;9143
005e28  d10e              BNE      |L1.24136|
005e2a  48fd              LDR      r0,|L1.25120|
005e2c  7840              LDRB     r0,[r0,#1]            ;9145  ; sk_stat
005e2e  2801              CMP      r0,#1                 ;9145
005e30  d10a              BNE      |L1.24136|
005e32  48fc              LDR      r0,|L1.25124|
005e34  7840              LDRB     r0,[r0,#1]            ;9145  ; sk_stat_old
005e36  b938              CBNZ     r0,|L1.24136|
005e38  48fb              LDR      r0,|L1.25128|
005e3a  8800              LDRH     r0,[r0,#0]            ;9145  ; VZ_KIND
005e3c  2801              CMP      r0,#1                 ;9145
005e3e  d103              BNE      |L1.24136|
005e40  f04f0032          MOV      r0,#0x32              ;9145
005e44  f8a40048          STRH     r0,[r4,#0x48]         ;9145
                  |L1.24136|
005e48  f24032f2          MOV      r2,#0x3f2             ;9148
005e4c  210a              MOVS     r1,#0xa               ;9148
005e4e  48f7              LDR      r0,|L1.25132|
005e50  f7fffffe          BL       gran
005e54  f8b40048          LDRH     r0,[r4,#0x48]         ;9149  ; cntrl_stat_new
005e58  86a0              STRH     r0,[r4,#0x34]         ;9149
005e5a  8660              STRH     r0,[r4,#0x32]         ;9150
005e5c  48f4              LDR      r0,|L1.25136|
005e5e  f9b00000          LDRSH    r0,[r0,#0]            ;9152  ; ICA_EN
005e62  b938              CBNZ     r0,|L1.24180|
005e64  8839              LDRH     r1,[r7,#0]  ; ica_cntrl_hndl_cnt
005e66  b129              CBZ      r1,|L1.24180|
;;;9155   			{
;;;9156   			cntrl_stat = ica_cntrl_hndl;
005e68  49f2              LDR      r1,|L1.25140|
005e6a  8809              LDRH     r1,[r1,#0]  ; ica_cntrl_hndl
005e6c  8661              STRH     r1,[r4,#0x32]
;;;9157   			cntrl_stat_new = ica_cntrl_hndl;//=10*PWM_START;
005e6e  f8a41048          STRH     r1,[r4,#0x48]
;;;9158   			cntrl_stat_old = ica_cntrl_hndl;//=10*PWM_START;
005e72  86a1              STRH     r1,[r4,#0x34]
                  |L1.24180|
;;;9159   			}
;;;9160   		}
;;;9161   	
;;;9162   	if((ICA_EN==1)||(ICA_EN==2))
005e74  2801              CMP      r0,#1
005e76  d001              BEQ      |L1.24188|
005e78  2802              CMP      r0,#2
005e7a  d105              BNE      |L1.24200|
                  |L1.24188|
;;;9163   		{
;;;9164   		cntrl_stat=cntrl_stat_new+ica_u_necc;
005e7c  49ee              LDR      r1,|L1.25144|
005e7e  f8b40048          LDRH     r0,[r4,#0x48]  ; cntrl_stat_new
005e82  8809              LDRH     r1,[r1,#0]  ; ica_u_necc
005e84  4408              ADD      r0,r0,r1
005e86  8660              STRH     r0,[r4,#0x32]
                  |L1.24200|
;;;9165   		}			
;;;9166   	}
;;;9167   #else
;;;9168   else if((b1Hz_ch)&&((!bIBAT_SMKLBR)||(bps[8]._cnt>40)))
;;;9169   	{
;;;9170   	cntrl_hndl_plazma=37;
;;;9171   	cntrl_stat_new=cntrl_stat_old;
;;;9172   	
;;;9173   	if((Ibmax/10)>(2*IZMAX_))
;;;9174   		{
;;;9175   		cntrl_hndl_plazma=38;
;;;9176             if(cntrl_stat_blok_cnt)cntrl_stat_new--;
;;;9177   		else	cntrl_stat_new-=10;
;;;9178   		}		
;;;9179   	else if(((Ibmax/10)<(IZMAX_*2))&&(Ibmax>(IZMAX_*15)))
;;;9180   		{
;;;9181   		cntrl_hndl_plazma=39;
;;;9182             if(cntrl_stat_blok_cnt)cntrl_stat_new--;
;;;9183             else	cntrl_stat_new-=3;
;;;9184   		}   
;;;9185   	else if((Ibmax<(IZMAX_*15))&&((Ibmax/10)>IZMAX_))
;;;9186   		{
;;;9187   		cntrl_hndl_plazma=40;
;;;9188   		cntrl_stat_new--;
;;;9189   		}
;;;9190   		
;;;9191   	else if(load_U<u_necc)
;;;9192   		{
;;;9193   		cntrl_hndl_plazma=41;
;;;9194   		if(load_U<(u_necc-(UB0-UB20)))
;;;9195   			{
;;;9196   			cntrl_hndl_plazma=42;
;;;9197   			if(Ibmax<0)
;;;9198   				{
;;;9199   				cntrl_hndl_plazma=43;
;;;9200                       if(cntrl_stat_blok_cnt)cntrl_stat_new++;
;;;9201   				else cntrl_stat_new+=10;
;;;9202   				}
;;;9203   			else if(Ibmax<(IZMAX_*5))
;;;9204   				{
;;;9205   				cntrl_hndl_plazma=44;
;;;9206                       if(cntrl_stat_blok_cnt)cntrl_stat_new++;
;;;9207   				else	cntrl_stat_new+=2;
;;;9208   				}
;;;9209   			else if(Ibmax<((IZMAX_*95)/10))
;;;9210   				{
;;;9211   				cntrl_hndl_plazma=45;
;;;9212   				cntrl_stat_new++;
;;;9213   				}					
;;;9214   			}
;;;9215   		else if(load_U<(u_necc-((UB0-UB20)/4)))
;;;9216   			{
;;;9217   			cntrl_hndl_plazma=46;
;;;9218   			if(Ibmax<(IZMAX_*5))
;;;9219   				{
;;;9220   				cntrl_hndl_plazma=47;
;;;9221                       if(cntrl_stat_blok_cnt)cntrl_stat_new++;
;;;9222   				else	cntrl_stat_new+=2;
;;;9223   				}
;;;9224   			else if(Ibmax<((IZMAX_*95)/10))
;;;9225   				{
;;;9226   				cntrl_hndl_plazma=48;
;;;9227   				cntrl_stat_new++;
;;;9228   				}					
;;;9229   			}	
;;;9230   		else if(load_U<(u_necc-1))
;;;9231   			{
;;;9232   			cntrl_hndl_plazma=49;
;;;9233   			if(Ibmax<((IZMAX_*95)/10))
;;;9234   				{
;;;9235   				cntrl_hndl_plazma=50;
;;;9236   				cntrl_stat_new++;
;;;9237   				}					
;;;9238   			}					
;;;9239   		}	
;;;9240   	else if((load_U>u_necc)/*&&(!cntrl_blok)*/)
;;;9241   		{
;;;9242   		cntrl_hndl_plazma=51;
;;;9243   		if(load_U>(u_necc+(UB0-UB20)))
;;;9244   			{
;;;9245   			cntrl_hndl_plazma=52;
;;;9246                  if(cntrl_stat_blok_cnt)cntrl_stat_new--;
;;;9247   			else	cntrl_stat_new-=10;
;;;9248   			}
;;;9249   		else if(load_U>(u_necc+((UB0-UB20)/4)))
;;;9250   			{
;;;9251   			cntrl_hndl_plazma=53;
;;;9252                  if(cntrl_stat_blok_cnt)cntrl_stat_new--;
;;;9253   			else cntrl_stat_new-=2;
;;;9254   			}	
;;;9255   		else if(load_U>(u_necc+1))
;;;9256   			{
;;;9257   			cntrl_hndl_plazma=54;
;;;9258   			cntrl_stat_new--;
;;;9259   			}					
;;;9260   		}
;;;9261   
;;;9262   	gran(&cntrl_stat_new,10,1010);			
;;;9263   	cntrl_stat_old=cntrl_stat_new;
;;;9264   	cntrl_stat=cntrl_stat_new;	
;;;9265   	}
;;;9266   #endif
;;;9267   
;;;9268   iiii=0;
005e88  7625              STRB     r5,[r4,#0x18]
;;;9269   for(i=0;i<NUMIST;i++)
005e8a  75e5              STRB     r5,[r4,#0x17]
005e8c  48eb              LDR      r0,|L1.25148|
005e8e  f9b01000          LDRSH    r1,[r0,#0]
005e92  e00c              B        |L1.24238|
                  |L1.24212|
;;;9270        {
;;;9271        if(bps[i]._cnt<30)iiii=1;
005e94  ebc002c0          RSB      r2,r0,r0,LSL #3
005e98  eb021200          ADD      r2,r2,r0,LSL #4
005e9c  eb090282          ADD      r2,r9,r2,LSL #2
005ea0  78d2              LDRB     r2,[r2,#3]
005ea2  2a1e              CMP      r2,#0x1e
005ea4  d200              BCS      |L1.24232|
005ea6  7626              STRB     r6,[r4,#0x18]
                  |L1.24232|
005ea8  f1000001          ADD      r0,r0,#1              ;9269
005eac  75e0              STRB     r0,[r4,#0x17]         ;9269
                  |L1.24238|
005eae  7de0              LDRB     r0,[r4,#0x17]         ;9269  ; i
005eb0  4288              CMP      r0,r1                 ;9269
005eb2  dbef              BLT      |L1.24212|
;;;9272        }
;;;9273   
;;;9274   if(iiii==0)
005eb4  7e20              LDRB     r0,[r4,#0x18]  ; iiii
005eb6  b948              CBNZ     r0,|L1.24268|
;;;9275   	{
;;;9276   	cntrl_stat=600;	
;;;9277   	cntrl_stat_old=600;
;;;9278   	cntrl_stat_new=600;
;;;9279   	cntrl_stat=10*PWM_START;
005eb8  48e1              LDR      r0,|L1.25152|
005eba  8800              LDRH     r0,[r0,#0]  ; PWM_START
005ebc  eb000080          ADD      r0,r0,r0,LSL #2
005ec0  ea4f0040          LSL      r0,r0,#1
005ec4  8660              STRH     r0,[r4,#0x32]
;;;9280   	cntrl_stat_old=10*PWM_START;
005ec6  86a0              STRH     r0,[r4,#0x34]
;;;9281   	cntrl_stat_new=10*PWM_START;
005ec8  f8a40048          STRH     r0,[r4,#0x48]
                  |L1.24268|
;;;9282   	}
;;;9283   
;;;9284   #ifdef UKU_220_IPS_TERMOKOMPENSAT
;;;9285   if(ica_cntrl_hndl_cnt)	ica_cntrl_hndl_cnt--;
005ecc  f9b70000          LDRSH    r0,[r7,#0]  ; ica_cntrl_hndl_cnt
005ed0  b110              CBZ      r0,|L1.24280|
005ed2  f1a00001          SUB      r0,r0,#1
005ed6  8038              STRH     r0,[r7,#0]
                  |L1.24280|
;;;9286   
;;;9287   
;;;9288   
;;;9289   #endif
;;;9290   
;;;9291   
;;;9292   gran(&cntrl_stat,10,1010); 
005ed8  48d4              LDR      r0,|L1.25132|
005eda  f24032f2          MOV      r2,#0x3f2
005ede  210a              MOVS     r1,#0xa
005ee0  3816              SUBS     r0,r0,#0x16
005ee2  f7fffffe          BL       gran
;;;9293   b1Hz_ch=0;
005ee6  75a5              STRB     r5,[r4,#0x16]
                  |L1.24296|
;;;9294   }
005ee8  e8bd9ff0          POP      {r4-r12,pc}
;;;9295   #endif
                          ENDP

                  ext_drv PROC
;;;9784   //-----------------------------------------------
;;;9785   void ext_drv(void)
005eec  e92d5ff0          PUSH     {r4-r12,lr}
;;;9786   {
;;;9787   char i;
;;;9788   
;;;9789   
;;;9790   for(i=0;i<NUMSK;i++)
005ef0  f04f0000          MOV      r0,#0
005ef4  4ad4              LDR      r2,|L1.25160|
;;;9791   	{
;;;9792   	#ifdef UKU_MGTS
;;;9793   	if(adc_buff_[sk_buff_RSTKM[i]]<2000)
;;;9794   	#endif
;;;9795   	#ifdef UKU_RSTKM
;;;9796   	if(adc_buff_[sk_buff_RSTKM[i]]<2000)
;;;9797   	#endif
;;;9798   	#ifdef UKU_3U
;;;9799   	if(adc_buff_[sk_buff_3U[i]]<2000)
;;;9800   	#endif
;;;9801   	#ifdef UKU_GLONASS
;;;9802   	if(adc_buff_[sk_buff_GLONASS[i]]<2000)
;;;9803   	#endif
;;;9804   	#ifdef UKU_KONTUR
;;;9805   	if(adc_buff_[sk_buff_KONTUR[i]]<2000)
;;;9806   	#endif
;;;9807   	#ifdef UKU_6U
;;;9808   	if(adc_buff_[sk_buff_6U[i]]<2000)
;;;9809   	#endif
;;;9810   	#ifdef UKU_220
;;;9811   	if(adc_buff_[sk_buff_220[i]]<2000)
;;;9812   	#endif
;;;9813   	#ifdef UKU_220_V2
;;;9814   	if(adc_buff_[sk_buff_220[i]]<2000)
;;;9815   	#endif
;;;9816   	#ifdef UKU_220_IPS_TERMOKOMPENSAT
;;;9817   	if(adc_buff_[sk_buff_220[i]]<2000)
;;;9818   	#endif
;;;9819   	#ifdef UKU_TELECORE2015	
;;;9820   	if(adc_buff_[sk_buff_TELECORE2015[i]]<2000)	 //TODO
;;;9821   	#endif
;;;9822   	#ifdef UKU_TELECORE2017
;;;9823   	if(adc_buff_[sk_buff_TELECORE2015[i]]<2000)	 //TODO
;;;9824   	#endif
;;;9825   	#ifdef IPS_SGEP_GAZPROM
;;;9826   	if(adc_buff_[sk_buff_6U[i]]<2000)
;;;9827   	#endif		
;;;9828   		{
;;;9829   		if(sk_cnt[i]<10)
005ef6  4bd3              LDR      r3,|L1.25156|
;;;9830   			{
;;;9831   			sk_cnt[i]++;
;;;9832   			if(sk_cnt[i]>=10)
;;;9833   				{
;;;9834   				sk_stat[i]=ssON;
005ef8  4dc9              LDR      r5,|L1.25120|
005efa  f04f0a01          MOV      r10,#1
;;;9835   				}
;;;9836   			}
;;;9837   		else 
;;;9838   			{
;;;9839   			sk_cnt[i]=10;
005efe  f04f0b0a          MOV      r11,#0xa
005f02  4606              MOV      r6,r0                 ;9790
005f04  f9b24000          LDRSH    r4,[r2,#0]            ;9790
005f08  e025              B        |L1.24406|
                  |L1.24330|
005f0a  49d0              LDR      r1,|L1.25164|
005f0c  4fd0              LDR      r7,|L1.25168|
005f0e  5c09              LDRB     r1,[r1,r0]            ;9817
005f10  f9371011          LDRSH    r1,[r7,r1,LSL #1]     ;9817
005f14  f5b16ffa          CMP      r1,#0x7d0             ;9817
005f18  da0e              BGE      |L1.24376|
005f1a  5619              LDRSB    r1,[r3,r0]            ;9829
005f1c  290a              CMP      r1,#0xa               ;9829
005f1e  da08              BGE      |L1.24370|
005f20  f1010101          ADD      r1,r1,#1              ;9831
005f24  b249              SXTB     r1,r1                 ;9831
005f26  5419              STRB     r1,[r3,r0]            ;9831
005f28  290a              CMP      r1,#0xa               ;9832
005f2a  db11              BLT      |L1.24400|
005f2c  f805a000          STRB     r10,[r5,r0]           ;9834
005f30  e00e              B        |L1.24400|
                  |L1.24370|
005f32  f803b000          STRB     r11,[r3,r0]
005f36  e00b              B        |L1.24400|
                  |L1.24376|
;;;9840   			}
;;;9841                  
;;;9842   		}
;;;9843   	else
;;;9844   		{
;;;9845   		if(sk_cnt[i]>0)
005f38  5619              LDRSB    r1,[r3,r0]
005f3a  2900              CMP      r1,#0
005f3c  dd07              BLE      |L1.24398|
;;;9846   			{
;;;9847   			sk_cnt[i]--;
005f3e  f1a10101          SUB      r1,r1,#1
005f42  b249              SXTB     r1,r1
005f44  5419              STRB     r1,[r3,r0]
;;;9848   			if(sk_cnt[i]<=0)
005f46  2900              CMP      r1,#0
005f48  dc02              BGT      |L1.24400|
;;;9849   				{
;;;9850   				sk_stat[i]=ssOFF;
005f4a  542e              STRB     r6,[r5,r0]
005f4c  e000              B        |L1.24400|
                  |L1.24398|
;;;9851   				}
;;;9852   			}
;;;9853   		else 
;;;9854   			{
;;;9855   			sk_cnt[i]=0;
005f4e  541e              STRB     r6,[r3,r0]
                  |L1.24400|
005f50  f1000001          ADD      r0,r0,#1              ;9790
005f54  b2c0              UXTB     r0,r0                 ;9790
                  |L1.24406|
005f56  42a0              CMP      r0,r4                 ;9790
005f58  dbd7              BLT      |L1.24330|
;;;9856   			}
;;;9857   		}
;;;9858   	}
;;;9859   
;;;9860   for(i=0;i<NUMSK;i++)
005f5a  f04f0400          MOV      r4,#0
;;;9861   	{
;;;9862   	if(((SK_SIGN[i]==0)&&(sk_stat[i]==ssON))||((SK_SIGN[i])&&(sk_stat[i]==ssOFF)) )
;;;9863   		{
;;;9864   		if(sk_av_cnt[i]<10)
005f5e  f8df92f4          LDR      r9,|L1.25172|
;;;9865   			{
;;;9866   			sk_av_cnt[i]++;
;;;9867   			if(sk_av_cnt[i]>=10)
;;;9868   				{
;;;9869   				sk_av_stat[i]=sasON;
005f62  4fbd              LDR      r7,|L1.25176|
;;;9870   				}
;;;9871   			}
;;;9872   		else 
;;;9873   			{
;;;9874   			sk_av_cnt[i]=10;
;;;9875   			}
;;;9876   		}
;;;9877   	else
;;;9878   		{
;;;9879   		if(sk_av_cnt[i]>=0)
;;;9880   			{
;;;9881   			sk_av_cnt[i]--;
;;;9882   			if(sk_av_cnt[i]<=0)
;;;9883   				{
;;;9884   				sk_av_stat[i]=sasOFF;
;;;9885   				}
;;;9886   			}
;;;9887   		else 
;;;9888   			{
;;;9889   			sk_av_cnt[i]=0;
;;;9890   			}
;;;9891   		}
;;;9892   
;;;9893   #ifndef UKU_KONTUR
;;;9894   	if(sk_av_stat_old[i]!=sk_av_stat[i])
005f64  f8df82f4          LDR      r8,|L1.25180|
005f68  e083              B        |L1.24690|
                  |L1.24426|
005f6a  48bd              LDR      r0,|L1.25184|
005f6c  f9300014          LDRSH    r0,[r0,r4,LSL #1]     ;9862
005f70  b910              CBNZ     r0,|L1.24440|
005f72  5d29              LDRB     r1,[r5,r4]            ;9862
005f74  2901              CMP      r1,#1                 ;9862
005f76  d00f              BEQ      |L1.24472|
                  |L1.24440|
005f78  b108              CBZ      r0,|L1.24446|
005f7a  5d28              LDRB     r0,[r5,r4]            ;9862
005f7c  b160              CBZ      r0,|L1.24472|
                  |L1.24446|
005f7e  f9190004          LDRSB    r0,[r9,r4]            ;9879
005f82  2800              CMP      r0,#0                 ;9879
005f84  db19              BLT      |L1.24506|
005f86  f1a00001          SUB      r0,r0,#1              ;9881
005f8a  b240              SXTB     r0,r0                 ;9881
005f8c  f8090004          STRB     r0,[r9,r4]            ;9881
005f90  2800              CMP      r0,#0                 ;9882
005f92  dc14              BGT      |L1.24510|
005f94  553e              STRB     r6,[r7,r4]            ;9884
005f96  e012              B        |L1.24510|
                  |L1.24472|
005f98  f9190004          LDRSB    r0,[r9,r4]            ;9864
005f9c  280a              CMP      r0,#0xa               ;9864
005f9e  da09              BGE      |L1.24500|
005fa0  f1000001          ADD      r0,r0,#1              ;9866
005fa4  b240              SXTB     r0,r0                 ;9866
005fa6  f8090004          STRB     r0,[r9,r4]            ;9866
005faa  280a              CMP      r0,#0xa               ;9867
005fac  db07              BLT      |L1.24510|
005fae  f807a004          STRB     r10,[r7,r4]           ;9869
005fb2  e004              B        |L1.24510|
                  |L1.24500|
005fb4  f809b004          STRB     r11,[r9,r4]           ;9874
005fb8  e001              B        |L1.24510|
                  |L1.24506|
005fba  f8096004          STRB     r6,[r9,r4]            ;9889
                  |L1.24510|
005fbe  f8181004          LDRB     r1,[r8,r4]
005fc2  5d38              LDRB     r0,[r7,r4]
005fc4  4281              CMP      r1,r0
005fc6  d04e              BEQ      |L1.24678|
;;;9895   		{
;;;9896   		plazma_sk++;
005fc8  4a98              LDR      r2,|L1.25132|
005fca  1e92              SUBS     r2,r2,#2
005fcc  8811              LDRH     r1,[r2,#0]  ; plazma_sk
005fce  f1010101          ADD      r1,r1,#1
005fd2  8011              STRH     r1,[r2,#0]
;;;9897   		if(sk_av_stat[i]==sasON)
005fd4  2801              CMP      r0,#1
005fd6  d007              BEQ      |L1.24552|
;;;9898   			{
;;;9899   			if(i==0)snmp_trap_send("SK #1 Alarm",15,1,1);
;;;9900   			else if(i==1)
;;;9901   				{
;;;9902   				#ifndef UKU_TELEKORE2017
;;;9903   				snmp_trap_send("SK #2 Alarm",15,2,1);
;;;9904   				#endif
;;;9905   				#ifdef UKU_TELEKORE2017
;;;9906   				snmp_trap_send("Door open",15,2,1);
;;;9907   				#endif
;;;9908   				}
;;;9909   			else if(i==2)snmp_trap_send("SK #3 Alarm",15,3,1);
;;;9910   			else if(i==3)snmp_trap_send("SK #4 Alarm",15,4,1);
;;;9911   			}
;;;9912   		else 
;;;9913   			{
;;;9914   			if(i==0)snmp_trap_send("SK #1 Alarm is off",15,1,0);
005fd8  b354              CBZ      r4,|L1.24624|
;;;9915   			else if(i==1)
005fda  2c01              CMP      r4,#1
005fdc  d02f              BEQ      |L1.24638|
;;;9916   				{
;;;9917   				#ifndef UKU_TELEKORE2017
;;;9918   				snmp_trap_send("SK #2 Alarm is off",15,2,0);
;;;9919   				#endif
;;;9920   				#ifdef UKU_TELEKORE2017
;;;9921   				snmp_trap_send("Door open clear",15,2,0);
;;;9922   				#endif
;;;9923   				}
;;;9924   			else if(i==2)snmp_trap_send("SK #3 Alarm is off",15,3,0);
005fde  2c02              CMP      r4,#2
005fe0  d034              BEQ      |L1.24652|
;;;9925   			else if(i==3)snmp_trap_send("SK #4 Alarm is off",15,4,0);
005fe2  2c03              CMP      r4,#3
005fe4  d039              BEQ      |L1.24666|
005fe6  e03e              B        |L1.24678|
                  |L1.24552|
005fe8  b134              CBZ      r4,|L1.24568|
005fea  2c01              CMP      r4,#1                 ;9900
005fec  d00b              BEQ      |L1.24582|
005fee  2c02              CMP      r4,#2                 ;9909
005ff0  d010              BEQ      |L1.24596|
005ff2  2c03              CMP      r4,#3                 ;9910
005ff4  d015              BEQ      |L1.24610|
005ff6  e036              B        |L1.24678|
                  |L1.24568|
005ff8  2301              MOVS     r3,#1                 ;9899
005ffa  461a              MOV      r2,r3                 ;9899
005ffc  210f              MOVS     r1,#0xf               ;9899
005ffe  a099              ADR      r0,|L1.25188|
006000  f7fffffe          BL       snmp_trap_send
006004  e02f              B        |L1.24678|
                  |L1.24582|
006006  2301              MOVS     r3,#1                 ;9903
006008  2202              MOVS     r2,#2                 ;9903
00600a  210f              MOVS     r1,#0xf               ;9903
00600c  a098              ADR      r0,|L1.25200|
00600e  f7fffffe          BL       snmp_trap_send
006012  e028              B        |L1.24678|
                  |L1.24596|
006014  2301              MOVS     r3,#1                 ;9909
006016  2203              MOVS     r2,#3                 ;9909
006018  210f              MOVS     r1,#0xf               ;9909
00601a  a098              ADR      r0,|L1.25212|
00601c  f7fffffe          BL       snmp_trap_send
006020  e021              B        |L1.24678|
                  |L1.24610|
006022  2301              MOVS     r3,#1                 ;9910
006024  2204              MOVS     r2,#4                 ;9910
006026  210f              MOVS     r1,#0xf               ;9910
006028  a097              ADR      r0,|L1.25224|
00602a  f7fffffe          BL       snmp_trap_send
00602e  e01a              B        |L1.24678|
                  |L1.24624|
006030  2300              MOVS     r3,#0                 ;9914
006032  2201              MOVS     r2,#1                 ;9914
006034  210f              MOVS     r1,#0xf               ;9914
006036  a097              ADR      r0,|L1.25236|
006038  f7fffffe          BL       snmp_trap_send
00603c  e013              B        |L1.24678|
                  |L1.24638|
00603e  2300              MOVS     r3,#0                 ;9918
006040  2202              MOVS     r2,#2                 ;9918
006042  210f              MOVS     r1,#0xf               ;9918
006044  a098              ADR      r0,|L1.25256|
006046  f7fffffe          BL       snmp_trap_send
00604a  e00c              B        |L1.24678|
                  |L1.24652|
00604c  2300              MOVS     r3,#0                 ;9924
00604e  2203              MOVS     r2,#3                 ;9924
006050  210f              MOVS     r1,#0xf               ;9924
006052  a09a              ADR      r0,|L1.25276|
006054  f7fffffe          BL       snmp_trap_send
006058  e005              B        |L1.24678|
                  |L1.24666|
00605a  2300              MOVS     r3,#0
00605c  2204              MOVS     r2,#4
00605e  210f              MOVS     r1,#0xf
006060  a09b              ADR      r0,|L1.25296|
006062  f7fffffe          BL       snmp_trap_send
                  |L1.24678|
;;;9926   			}
;;;9927   	 	}
;;;9928   #endif
;;;9929   
;;;9930   #ifdef UKU_KONTUR
;;;9931   	if(sk_av_stat_old[i]!=sk_av_stat[i])
;;;9932   		{
;;;9933   		plazma_sk++;
;;;9934   		if(sk_av_stat[i]==sasON)
;;;9935   			{
;;;9936   			if(i==0)snmp_trap_send("Door is opened",15,1,1);
;;;9937   			else if(i==1)snmp_trap_send("Smoke Alarm",15,2,1);
;;;9938   			else if(i==2)snmp_trap_send("Shock Sensor Alarm",15,3,1);
;;;9939   			else if(i==3)snmp_trap_send("SK #4 Alarm",15,4,1);
;;;9940   			}
;;;9941   		else 
;;;9942   			{
;;;9943   			if(i==0)snmp_trap_send("Door is closed",15,1,0);
;;;9944   			else if(i==1)snmp_trap_send("Smoke Alarm is off",15,2,0);
;;;9945   			else if(i==2)snmp_trap_send("Shock Sensor Alarm is off",15,3,0);
;;;9946   			else if(i==3)snmp_trap_send("SK #4 Alarm is off",15,4,0);
;;;9947   			}
;;;9948   	 	}
;;;9949   #endif
;;;9950   	sk_av_stat_old[i]=sk_av_stat[i];
006066  5d38              LDRB     r0,[r7,r4]
006068  f8080004          STRB     r0,[r8,r4]
00606c  f1040401          ADD      r4,r4,#1              ;9860
006070  b2e4              UXTB     r4,r4                 ;9860
                  |L1.24690|
006072  4875              LDR      r0,|L1.25160|
006074  f9b00000          LDRSH    r0,[r0,#0]            ;9860  ; NUMSK
006078  4284              CMP      r4,r0                 ;9860
00607a  f6ffaf76          BLT      |L1.24426|
;;;9951   	}
;;;9952   }
00607e  e733              B        |L1.24296|
;;;9953   
                          ENDP

                  zar_superviser_start PROC
;;;9990   //-----------------------------------------------
;;;9991   void zar_superviser_start(void)
006080  4a98              LDR      r2,|L1.25316|
;;;9992   {
;;;9993   sign_U[0]=1;
006082  f04f0001          MOV      r0,#1
006086  7010              STRB     r0,[r2,#0]
;;;9994   sign_I[0]=1;
006088  4997              LDR      r1,|L1.25320|
00608a  7008              STRB     r0,[r1,#0]
;;;9995   sign_U[1]=1;
00608c  7050              STRB     r0,[r2,#1]
;;;9996   sign_I[1]=1;
00608e  7048              STRB     r0,[r1,#1]
;;;9997   
;;;9998   }
006090  4770              BX       lr
;;;9999   
                          ENDP

                  zar_superviser_drv PROC
;;;9955   //-----------------------------------------------
;;;9956   void zar_superviser_drv(void)
006092  e92d5ff0          PUSH     {r4-r12,lr}
;;;9957   {
;;;9958   
;;;9959   if(((bat[0]._Ub>u_necc_up) || (bat[0]._Ub<u_necc_dn))&&(main_kb_cnt<((TBAT*60)-30))&&(main_kb_cnt>((TBAT*60)-150))) sign_U[0]=0;
006096  4896              LDR      r0,|L1.25328|
006098  f8df9258          LDR      r9,|L1.25332|
00609c  f8df824c          LDR      r8,|L1.25324|
0060a0  f9b0c000          LDRSH    r12,[r0,#0]  ; u_necc_up
0060a4  f9b90000          LDRSH    r0,[r9,#0]
0060a8  4c60              LDR      r4,|L1.25132|
0060aa  ebc01100          RSB      r1,r0,r0,LSL #4
0060ae  3c48              SUBS     r4,r4,#0x48
0060b0  f9b87002          LDRSH    r7,[r8,#2]  ; bat
0060b4  f06f0a1d          MVN      r10,#0x1d
0060b8  f06f0b95          MVN      r11,#0x95
0060bc  2500              MOVS     r5,#0
0060be  4e89              LDR      r6,|L1.25316|
0060c0  f9b40052          LDRSH    r0,[r4,#0x52]
0060c4  eb0a0281          ADD      r2,r10,r1,LSL #2
0060c8  eb0b0381          ADD      r3,r11,r1,LSL #2
0060cc  4567              CMP      r7,r12
0060ce  dc05              BGT      |L1.24796|
0060d0  f8dfc224          LDR      r12,|L1.25336|
0060d4  f9bcc000          LDRSH    r12,[r12,#0]  ; u_necc_dn
0060d8  4567              CMP      r7,r12
0060da  da04              BGE      |L1.24806|
                  |L1.24796|
0060dc  4282              CMP      r2,r0
0060de  dd02              BLE      |L1.24806|
0060e0  4283              CMP      r3,r0
0060e2  da00              BGE      |L1.24806|
0060e4  7035              STRB     r5,[r6,#0]
                  |L1.24806|
;;;9960   
;;;9961   if(((bat[0]._Ib>(2*IKB)) || (bat[0]._Ib<(-IKB*2))) &&(main_kb_cnt<((TBAT*60)-30))&&(main_kb_cnt>((TBAT*60)-150))) sign_I[0]=0;
0060e6  4f85              LDR      r7,|L1.25340|
0060e8  f9b8c008          LDRSH    r12,[r8,#8]  ; bat
0060ec  f9b7e000          LDRSH    lr,[r7,#0]  ; IKB
0060f0  4f7d              LDR      r7,|L1.25320|
0060f2  ebbc0f4e          CMP      r12,lr,LSL #1
0060f6  dc04              BGT      |L1.24834|
0060f8  f1ce0e00          RSB      lr,lr,#0
0060fc  ebbc0f4e          CMP      r12,lr,LSL #1
006100  da04              BGE      |L1.24844|
                  |L1.24834|
006102  4282              CMP      r2,r0
006104  dd02              BLE      |L1.24844|
006106  4283              CMP      r3,r0
006108  da00              BGE      |L1.24844|
00610a  703d              STRB     r5,[r7,#0]
                  |L1.24844|
;;;9962   																 
;;;9963   if((main_kb_cnt==((TBAT*60)-10)) &&(spc_stat==spcOFF))
00610c  f06f0209          MVN      r2,#9
006110  eb020181          ADD      r1,r2,r1,LSL #2
006114  4281              CMP      r1,r0
006116  d121              BNE      |L1.24924|
006118  f8940023          LDRB     r0,[r4,#0x23]  ; spc_stat
00611c  b9f0              CBNZ     r0,|L1.24924|
;;;9964   	{
;;;9965   	if((sign_U[0]==1) && (sign_I[0]==1) && (lc640_read_int(EE_BAT1_ZAR_CNT)!=BAT_C_REAL[0]) && (NUMBAT) && (!(bat[0]._av&1)))
00611e  7830              LDRB     r0,[r6,#0]  ; sign_U
006120  2801              CMP      r0,#1
006122  d11b              BNE      |L1.24924|
006124  7838              LDRB     r0,[r7,#0]  ; sign_I
006126  2801              CMP      r0,#1
006128  d118              BNE      |L1.24924|
00612a  f44f70ef          MOV      r0,#0x1de
00612e  f7fffffe          BL       lc640_read_int
006132  4973              LDR      r1,|L1.25344|
006134  f9b11000          LDRSH    r1,[r1,#0]  ; BAT_C_REAL
006138  4288              CMP      r0,r1
00613a  d00f              BEQ      |L1.24924|
00613c  4871              LDR      r0,|L1.25348|
00613e  8800              LDRH     r0,[r0,#0]  ; NUMBAT
006140  b160              CBZ      r0,|L1.24924|
006142  f898003d          LDRB     r0,[r8,#0x3d]  ; bat
006146  07c0              LSLS     r0,r0,#31
006148  d108              BNE      |L1.24924|
;;;9966   		{
;;;9967   		lc640_write_int(EE_BAT1_ZAR_CNT,BAT_C_REAL[0]);
00614a  f44f70ef          MOV      r0,#0x1de
00614e  f7fffffe          BL       lc640_write_int
;;;9968   		superviser_cnt++;
006152  486d              LDR      r0,|L1.25352|
006154  7801              LDRB     r1,[r0,#0]  ; superviser_cnt
006156  f1010101          ADD      r1,r1,#1
00615a  7001              STRB     r1,[r0,#0]
                  |L1.24924|
;;;9969   		}
;;;9970   	
;;;9971   	}
;;;9972   
;;;9973   if(((bat[0]._Ub>u_necc_up) || (bat[1]._Ub<u_necc_dn))&&(main_kb_cnt<((TBAT*60)-30))&&(main_kb_cnt>((TBAT*60)-150))) sign_U[1]=0;
00615c  4864              LDR      r0,|L1.25328|
00615e  f9b81002          LDRSH    r1,[r8,#2]  ; bat
006162  f9b00000          LDRSH    r0,[r0,#0]  ; u_necc_up
006166  4281              CMP      r1,r0
006168  dc06              BGT      |L1.24952|
00616a  4863              LDR      r0,|L1.25336|
00616c  f9b8104e          LDRSH    r1,[r8,#0x4e]  ; bat
006170  f9b00000          LDRSH    r0,[r0,#0]  ; u_necc_dn
006174  4281              CMP      r1,r0
006176  da0e              BGE      |L1.24982|
                  |L1.24952|
006178  f9b90000          LDRSH    r0,[r9,#0]  ; TBAT
00617c  f9b41052          LDRSH    r1,[r4,#0x52]  ; main_kb_cnt
006180  ebc01000          RSB      r0,r0,r0,LSL #4
006184  eb0a0280          ADD      r2,r10,r0,LSL #2
006188  428a              CMP      r2,r1
00618a  dd04              BLE      |L1.24982|
00618c  eb0b0080          ADD      r0,r11,r0,LSL #2
006190  4288              CMP      r0,r1
006192  da00              BGE      |L1.24982|
006194  7075              STRB     r5,[r6,#1]
                  |L1.24982|
;;;9974   
;;;9975   if(((bat[1]._Ib>(2*IKB)) || (bat[1]._Ib<(-IKB*2))) &&(main_kb_cnt<((TBAT*60)-30))&&(main_kb_cnt>((TBAT*60)-150))) sign_I[1]=0;
006196  4959              LDR      r1,|L1.25340|
006198  f9b80054          LDRSH    r0,[r8,#0x54]  ; bat
00619c  f9b11000          LDRSH    r1,[r1,#0]  ; IKB
0061a0  ebb00f41          CMP      r0,r1,LSL #1
0061a4  dc03              BGT      |L1.25006|
0061a6  4249              RSBS     r1,r1,#0
0061a8  ebb00f41          CMP      r0,r1,LSL #1
0061ac  da0e              BGE      |L1.25036|
                  |L1.25006|
0061ae  f9b90000          LDRSH    r0,[r9,#0]  ; TBAT
0061b2  f9b41052          LDRSH    r1,[r4,#0x52]  ; main_kb_cnt
0061b6  ebc01000          RSB      r0,r0,r0,LSL #4
0061ba  eb0a0280          ADD      r2,r10,r0,LSL #2
0061be  428a              CMP      r2,r1
0061c0  dd04              BLE      |L1.25036|
0061c2  eb0b0080          ADD      r0,r11,r0,LSL #2
0061c6  4288              CMP      r0,r1
0061c8  da00              BGE      |L1.25036|
0061ca  707d              STRB     r5,[r7,#1]
                  |L1.25036|
;;;9976   																 
;;;9977   if((main_kb_cnt==((TBAT*60)-10)) &&(spc_stat==spcOFF))
0061cc  f9b90000          LDRSH    r0,[r9,#0]  ; TBAT
0061d0  ebc01100          RSB      r1,r0,r0,LSL #4
0061d4  f06f0009          MVN      r0,#9
0061d8  eb000081          ADD      r0,r0,r1,LSL #2
0061dc  f9b41052          LDRSH    r1,[r4,#0x52]  ; main_kb_cnt
0061e0  4288              CMP      r0,r1
0061e2  d11a              BNE      |L1.25114|
0061e4  f8940023          LDRB     r0,[r4,#0x23]  ; spc_stat
0061e8  b9b8              CBNZ     r0,|L1.25114|
;;;9978   	{
;;;9979   	if((sign_U[1]==1) && (sign_I[1]==1) && (lc640_read_int(EE_BAT2_ZAR_CNT)!=BAT_C_REAL[1]) && (NUMBAT==2) && (!(bat[1]._av&1)))
0061ea  7870              LDRB     r0,[r6,#1]  ; sign_U
0061ec  2801              CMP      r0,#1
0061ee  d114              BNE      |L1.25114|
0061f0  7878              LDRB     r0,[r7,#1]  ; sign_I
0061f2  2801              CMP      r0,#1
0061f4  d111              BNE      |L1.25114|
0061f6  f44f75fe          MOV      r5,#0x1fc
0061fa  4628              MOV      r0,r5
0061fc  f7fffffe          BL       lc640_read_int
006200  493f              LDR      r1,|L1.25344|
006202  f9b11002          LDRSH    r1,[r1,#2]  ; BAT_C_REAL
006206  4288              CMP      r0,r1
006208  d007              BEQ      |L1.25114|
00620a  483e              LDR      r0,|L1.25348|
00620c  8800              LDRH     r0,[r0,#0]  ; NUMBAT
00620e  2802              CMP      r0,#2
006210  d103              BNE      |L1.25114|
006212  f8980089          LDRB     r0,[r8,#0x89]  ; bat
006216  07c0              LSLS     r0,r0,#31
006218  e078              B        |L1.25356|
                  |L1.25114|
00621a  e080              B        |L1.25374|
                  |L1.25116|
                          DCD      hv_vz_stat
                  |L1.25120|
                          DCD      sk_stat
                  |L1.25124|
                          DCD      sk_stat_old
                  |L1.25128|
                          DCD      VZ_KIND
                  |L1.25132|
                          DCD      ||area_number.25||+0x48
                  |L1.25136|
                          DCD      ICA_EN
                  |L1.25140|
                          DCD      ica_cntrl_hndl
                  |L1.25144|
                          DCD      ica_u_necc
                  |L1.25148|
                          DCD      NUMIST
                  |L1.25152|
                          DCD      PWM_START
                  |L1.25156|
                          DCD      sk_cnt
                  |L1.25160|
                          DCD      NUMSK
                  |L1.25164|
                          DCD      ||area_number.19||
                  |L1.25168|
                          DCD      ||.bss||+0x40c
                  |L1.25172|
                          DCD      sk_av_cnt
                  |L1.25176|
                          DCD      sk_av_stat
                  |L1.25180|
                          DCD      sk_av_stat_old
                  |L1.25184|
                          DCD      SK_SIGN
                  |L1.25188|
006264  534b2023          DCB      "SK #1 Alarm",0
006268  3120416c
00626c  61726d00
                  |L1.25200|
006270  534b2023          DCB      "SK #2 Alarm",0
006274  3220416c
006278  61726d00
                  |L1.25212|
00627c  534b2023          DCB      "SK #3 Alarm",0
006280  3320416c
006284  61726d00
                  |L1.25224|
006288  534b2023          DCB      "SK #4 Alarm",0
00628c  3420416c
006290  61726d00
                  |L1.25236|
006294  534b2023          DCB      "SK #1 Alarm is off",0
006298  3120416c
00629c  61726d20
0062a0  6973206f
0062a4  666600  
0062a7  00                DCB      0
                  |L1.25256|
0062a8  534b2023          DCB      "SK #2 Alarm is off",0
0062ac  3220416c
0062b0  61726d20
0062b4  6973206f
0062b8  666600  
0062bb  00                DCB      0
                  |L1.25276|
0062bc  534b2023          DCB      "SK #3 Alarm is off",0
0062c0  3320416c
0062c4  61726d20
0062c8  6973206f
0062cc  666600  
0062cf  00                DCB      0
                  |L1.25296|
0062d0  534b2023          DCB      "SK #4 Alarm is off",0
0062d4  3420416c
0062d8  61726d20
0062dc  6973206f
0062e0  666600  
0062e3  00                DCB      0
                  |L1.25316|
                          DCD      sign_U
                  |L1.25320|
                          DCD      sign_I
                  |L1.25324|
                          DCD      bat
                  |L1.25328|
                          DCD      u_necc_up
                  |L1.25332|
                          DCD      TBAT
                  |L1.25336|
                          DCD      u_necc_dn
                  |L1.25340|
                          DCD      IKB
                  |L1.25344|
                          DCD      BAT_C_REAL
                  |L1.25348|
                          DCD      NUMBAT
                  |L1.25352|
                          DCD      superviser_cnt
                  |L1.25356|
00630c  d107              BNE      |L1.25374|
;;;9980   		{
;;;9981   		lc640_write_int(EE_BAT2_ZAR_CNT,BAT_C_REAL[1]);
00630e  4628              MOV      r0,r5
006310  f7fffffe          BL       lc640_write_int
;;;9982   		superviser_cnt++;
006314  48ff              LDR      r0,|L1.26388|
006316  7801              LDRB     r1,[r0,#0]  ; superviser_cnt
006318  f1010101          ADD      r1,r1,#1
00631c  7001              STRB     r1,[r0,#0]
                  |L1.25374|
;;;9983   		}
;;;9984   	
;;;9985   	}
;;;9986   
;;;9987   if(main_kb_cnt==((TBAT*60)-2)) zar_superviser_start();
00631e  f9b90000          LDRSH    r0,[r9,#0]  ; TBAT
006322  f06f0101          MVN      r1,#1
006326  ebc01000          RSB      r0,r0,r0,LSL #4
00632a  eb010080          ADD      r0,r1,r0,LSL #2
00632e  f9b41052          LDRSH    r1,[r4,#0x52]  ; main_kb_cnt
006332  4288              CMP      r0,r1
006334  d102              BNE      |L1.25404|
006336  e8bd5ff0          POP      {r4-r12,lr}
00633a  e7fe              B        zar_superviser_start
                  |L1.25404|
;;;9988   }
00633c  e5d4              B        |L1.24296|
;;;9989   
                          ENDP

                  npn_hndl PROC
;;;10000  //-----------------------------------------------
;;;10001  void npn_hndl(void)
00633e  e92d03f0          PUSH     {r4-r9}
;;;10002  {
;;;10003  if(NPN_OUT!=npnoOFF)
006342  48f5              LDR      r0,|L1.26392|
;;;10004  	{
;;;10005  /*	if(NPN_SIGN==npnsAVNET)
;;;10006  		{
;;;10007  		if(net_av==1)
;;;10008  			{
;;;10009  			if(npn_tz_cnt<TZNPN)
;;;10010  				{
;;;10011  				npn_tz_cnt++;
;;;10012  				if(npn_tz_cnt==TZNPN)
;;;10013  					{
;;;10014  					npn_stat=npnsOFF;
;;;10015  					}
;;;10016  				}
;;;10017  			}
;;;10018  		else
;;;10019  			{
;;;10020  			if(npn_tz_cnt)
;;;10021  				{
;;;10022  				npn_tz_cnt--;
;;;10023  				if(npn_tz_cnt==0)
;;;10024  					{
;;;10025  					npn_stat=npnsON;
;;;10026  					}
;;;10027  				}
;;;10028  			}
;;;10029  		}*/
;;;10030  /*	if(NPN_SIGN==npnsULOAD)
;;;10031  		{
;;;10032  		if(load_U<UONPN)
;;;10033  			{
;;;10034  			if(npn_tz_cnt<TZNPN)
;;;10035  				{
;;;10036  				npn_tz_cnt++;
;;;10037  				if(npn_tz_cnt==TZNPN)
;;;10038  					{
;;;10039  					npn_stat=npnsOFF;
;;;10040  					}
;;;10041  				}
;;;10042  			}
;;;10043  		else if(load_U>UVNPN)
;;;10044  			{
;;;10045  			if(npn_tz_cnt)
;;;10046  				{
;;;10047  				npn_tz_cnt--;
;;;10048  				if(npn_tz_cnt==0)
;;;10049  					{
;;;10050  					npn_stat=npnsON;
;;;10051  					}
;;;10052  				}
;;;10053  			}
;;;10054  		}*/
;;;10055  
;;;10056  	if((load_U<UONPN)&&((net_Ua<UMN)||(net_Ub<UMN)||(net_Uc<UMN)))
;;;10057  		{
;;;10058  		if(npn_tz_cnt<TZNPN)
006344  4ff5              LDR      r7,|L1.26396|
;;;10059  			{
;;;10060  			npn_tz_cnt++;
;;;10061  			if(npn_tz_cnt==TZNPN)
;;;10062  				{
;;;10063  				npn_stat=npnsOFF;
006346  4ef6              LDR      r6,|L1.26400|
006348  7800              LDRB     r0,[r0,#0]            ;10003  ; NPN_OUT
00634a  f04f0c00          MOV      r12,#0                ;10003
;;;10064  				}
;;;10065  			}
;;;10066  		}
;;;10067  	else if((load_U>UVNPN)&&(net_Ua>UMN)&&(net_Ub>UMN)&&(net_Uc>UMN))
;;;10068  		{
;;;10069  		if(npn_tz_cnt)
;;;10070  			{
;;;10071  			npn_tz_cnt--;
;;;10072  			if(npn_tz_cnt==0)
;;;10073  				{
;;;10074  				npn_stat=npnsON;
00634e  f04f0801          MOV      r8,#1
006352  b3e8              CBZ      r0,|L1.25552|
006354  48f3              LDR      r0,|L1.26404|
006356  4639              MOV      r1,r7                 ;10058
006358  f9b05000          LDRSH    r5,[r0,#0]            ;10056  ; load_U
00635c  48f2              LDR      r0,|L1.26408|
00635e  f9b11000          LDRSH    r1,[r1,#0]            ;10058
006362  f9b09000          LDRSH    r9,[r0,#0]            ;10056  ; UONPN
006366  48f1              LDR      r0,|L1.26412|
006368  454d              CMP      r5,r9                 ;10056
00636a  f9b02000          LDRSH    r2,[r0,#0]            ;10056
00636e  48f0              LDR      r0,|L1.26416|
006370  f9b03000          LDRSH    r3,[r0,#0]            ;10056
006374  48ef              LDR      r0,|L1.26420|
006376  f9b04000          LDRSH    r4,[r0,#0]            ;10056
00637a  48ef              LDR      r0,|L1.26424|
00637c  f9b00000          LDRSH    r0,[r0,#0]            ;10056
006380  da13              BGE      |L1.25514|
006382  4282              CMP      r2,r0                 ;10056
006384  db03              BLT      |L1.25486|
006386  4283              CMP      r3,r0                 ;10056
006388  db01              BLT      |L1.25486|
00638a  4284              CMP      r4,r0                 ;10056
00638c  da0d              BGE      |L1.25514|
                  |L1.25486|
00638e  48eb              LDR      r0,|L1.26428|
006390  f9b02000          LDRSH    r2,[r0,#0]            ;10058  ; TZNPN
006394  4291              CMP      r1,r2                 ;10058
006396  da23              BGE      |L1.25568|
006398  f1010101          ADD      r1,r1,#1              ;10060
00639c  b208              SXTH     r0,r1                 ;10060
00639e  8038              STRH     r0,[r7,#0]            ;10060
0063a0  4290              CMP      r0,r2                 ;10061
0063a2  d11d              BNE      |L1.25568|
0063a4  f886c000          STRB     r12,[r6,#0]           ;10063
0063a8  e01a              B        |L1.25568|
                  |L1.25514|
0063aa  f8dfc394          LDR      r12,|L1.26432|
0063ae  f9bcc000          LDRSH    r12,[r12,#0]          ;10067  ; UVNPN
0063b2  4565              CMP      r5,r12                ;10067
0063b4  dd14              BLE      |L1.25568|
0063b6  4282              CMP      r2,r0                 ;10067
0063b8  dd12              BLE      |L1.25568|
0063ba  4283              CMP      r3,r0                 ;10067
0063bc  dd10              BLE      |L1.25568|
0063be  4284              CMP      r4,r0                 ;10067
0063c0  dd0e              BLE      |L1.25568|
0063c2  b169              CBZ      r1,|L1.25568|
0063c4  f1a10101          SUB      r1,r1,#1              ;10071
0063c8  b208              SXTH     r0,r1                 ;10071
0063ca  8038              STRH     r0,[r7,#0]            ;10071
0063cc  b940              CBNZ     r0,|L1.25568|
0063ce  e000              B        |L1.25554|
                  |L1.25552|
0063d0  e002              B        |L1.25560|
                  |L1.25554|
0063d2  f8868000          STRB     r8,[r6,#0]
0063d6  e003              B        |L1.25568|
                  |L1.25560|
;;;10075  				}
;;;10076  			}
;;;10077  		}
;;;10078  	}
;;;10079  else
;;;10080  	{
;;;10081  	npn_tz_cnt=0;
0063d8  f8a7c000          STRH     r12,[r7,#0]
;;;10082  	npn_stat=npnsON;
0063dc  f8868000          STRB     r8,[r6,#0]
                  |L1.25568|
;;;10083  	}
;;;10084  
;;;10085  if(npn_stat==npnsOFF) mess_send(MESS2RELE_HNDL,PARAM_RELE_NPN,1,15);
0063e0  7830              LDRB     r0,[r6,#0]  ; npn_stat
0063e2  2800              CMP      r0,#0
0063e4  d107              BNE      |L1.25590|
0063e6  e8bd03f0          POP      {r4-r9}
0063ea  230f              MOVS     r3,#0xf
0063ec  2201              MOVS     r2,#1
0063ee  216e              MOVS     r1,#0x6e
0063f0  20d2              MOVS     r0,#0xd2
0063f2  f7ffbffe          B.W      mess_send
                  |L1.25590|
;;;10086  
;;;10087  
;;;10088  }
0063f6  e8bd03f0          POP      {r4-r9}
0063fa  4770              BX       lr
;;;10089  
                          ENDP

                  loadoff_hndl PROC
;;;10091  //-----------------------------------------------
;;;10092  void loadoff_hndl(void)
0063fc  b5f0              PUSH     {r4-r7,lr}
;;;10093  {
;;;10094  if((load_U>UONPN)||(load_U<UVNPN))
0063fe  48c9              LDR      r0,|L1.26404|
;;;10095  	{
;;;10096  	if(load_off_cnt<TZNPN)
006400  4dd0              LDR      r5,|L1.26436|
;;;10097  		{
;;;10098  		load_off_cnt++;
;;;10099  		if(load_off_cnt>=TZNPN)
;;;10100  			{
;;;10101  			load_off_stat=npnsOFF;
006402  2700              MOVS     r7,#0
006404  f9b01000          LDRSH    r1,[r0,#0]            ;10094  ; load_U
006408  48c7              LDR      r0,|L1.26408|
00640a  4ecf              LDR      r6,|L1.26440|
00640c  f9b02000          LDRSH    r2,[r0,#0]            ;10094  ; UONPN
006410  f9b50000          LDRSH    r0,[r5,#0]            ;10096
006414  4291              CMP      r1,r2                 ;10094
006416  dc04              BGT      |L1.25634|
006418  4bc9              LDR      r3,|L1.26432|
00641a  f9b33000          LDRSH    r3,[r3,#0]            ;10094  ; UVNPN
00641e  4299              CMP      r1,r3                 ;10094
006420  da0d              BGE      |L1.25662|
                  |L1.25634|
006422  49c6              LDR      r1,|L1.26428|
006424  f9b11000          LDRSH    r1,[r1,#0]            ;10096  ; TZNPN
006428  4288              CMP      r0,r1                 ;10096
00642a  da1c              BGE      |L1.25702|
00642c  f1000001          ADD      r0,r0,#1              ;10098
006430  b200              SXTH     r0,r0                 ;10098
006432  8028              STRH     r0,[r5,#0]            ;10098
006434  4288              CMP      r0,r1                 ;10099
006436  db16              BLT      |L1.25702|
006438  7037              STRB     r7,[r6,#0]
;;;10102  			load_off_cnt=TZNPN;
00643a  8029              STRH     r1,[r5,#0]
00643c  e013              B        |L1.25702|
                  |L1.25662|
;;;10103  			}
;;;10104  		}
;;;10105  	}
;;;10106  else if((load_U>(UVNPN+dUNPN))&&(load_U<(UONPN-dUNPN)))
00643e  4cc3              LDR      r4,|L1.26444|
006440  f9b44000          LDRSH    r4,[r4,#0]  ; dUNPN
006444  4423              ADD      r3,r3,r4
006446  428b              CMP      r3,r1
006448  da0d              BGE      |L1.25702|
00644a  1b12              SUBS     r2,r2,r4
00644c  428a              CMP      r2,r1
00644e  dd0a              BLE      |L1.25702|
;;;10107  	{
;;;10108  	if(load_off_cnt)
006450  b148              CBZ      r0,|L1.25702|
;;;10109  		{
;;;10110  		load_off_cnt--;
006452  f1a00001          SUB      r0,r0,#1
006456  b200              SXTH     r0,r0
006458  8028              STRH     r0,[r5,#0]
;;;10111  		if(load_off_cnt<=0)
00645a  2800              CMP      r0,#0
00645c  dc03              BGT      |L1.25702|
;;;10112  			{
;;;10113  			load_off_stat=npnsON;
00645e  f04f0001          MOV      r0,#1
006462  7030              STRB     r0,[r6,#0]
;;;10114  			load_off_cnt=0;
006464  802f              STRH     r7,[r5,#0]
                  |L1.25702|
;;;10115  			}
;;;10116  		}
;;;10117  	}
;;;10118  
;;;10119  
;;;10120  if(load_off_stat==npnsOFF) tloaddisable_cmnd=10;
006466  7830              LDRB     r0,[r6,#0]  ; load_off_stat
006468  2800              CMP      r0,#0
00646a  d103              BNE      |L1.25716|
00646c  49b8              LDR      r1,|L1.26448|
00646e  f04f000a          MOV      r0,#0xa
006472  7008              STRB     r0,[r1,#0]
                  |L1.25716|
;;;10121  
;;;10122  
;;;10123  }
006474  bdf0              POP      {r4-r7,pc}
;;;10124  
                          ENDP

                  speedChargeStartStop PROC
;;;10312  //-----------------------------------------------
;;;10313  void speedChargeStartStop(void)
006476  b538              PUSH     {r3-r5,lr}
;;;10314  {
;;;10315  spch_plazma[1]++;
006478  4cb6              LDR      r4,|L1.26452|
00647a  7860              LDRB     r0,[r4,#1]  ; spch_plazma
00647c  f1000001          ADD      r0,r0,#1
006480  7060              STRB     r0,[r4,#1]
;;;10316  /*if(speedChIsOn)
;;;10317  	{
;;;10318  	speedChIsOn=0;
;;;10319  	}
;;;10320  
;;;10321  else
;;;10322  	{
;;;10323  	if(speedChrgBlckStat==0)
;;;10324  		{
;;;10325  		speedChIsOn=1;
;;;10326  		speedChTimeCnt=0;
;;;10327  		}
;;;10328  	else
;;;10329  		{
;;;10330  		show_mess(	"     Ускоренный     ",
;;;10331  	          		"       заряд        ",
;;;10332  	          		"    заблокирован!   ",
;;;10333  	          		"                    ",2000);	 
;;;10334  		}
;;;10335  	}*/
;;;10336  
;;;10337  if(sp_ch_stat!=scsOFF)
006482  48b5              LDR      r0,|L1.26456|
006484  7801              LDRB     r1,[r0,#0]  ; sp_ch_stat
006486  b151              CBZ      r1,|L1.25758|
;;;10338  	{
;;;10339  	sp_ch_stat=scsOFF;
006488  f04f0100          MOV      r1,#0
00648c  7001              STRB     r1,[r0,#0]
;;;10340  	speedz_mem_hndl(10);
00648e  f04f000a          MOV      r0,#0xa
006492  f7fffffe          BL       speedz_mem_hndl
;;;10341  	spch_plazma[1]=10;
006496  f04f000a          MOV      r0,#0xa
00649a  7060              STRB     r0,[r4,#1]
;;;10342  	}
;;;10343  
;;;10344  else
;;;10345  	{
;;;10346  	spch_plazma[1]=20;
;;;10347  	if((speedChrgBlckStat==0)&&(spc_stat==spcOFF)
;;;10348  		#ifdef UKU_220_IPS_TERMOKOMPENSAT
;;;10349  		&&(vz1_stat==vz1sOFF)&&(vz2_stat==vz2sOFF)
;;;10350  		#endif
;;;10351  		)
;;;10352  		{
;;;10353  		#ifdef UKU_220_IPS_TERMOKOMPENSAT
;;;10354  		sp_ch_stat=scsSTEP1;
;;;10355  		#else
;;;10356  		sp_ch_stat=scsWRK;
;;;10357  		#endif
;;;10358  		speedz_mem_hndl(1);
;;;10359  		}
;;;10360  	else 
;;;10361  		{
;;;10362  		show_mess(	"     Ускоренный     ",
;;;10363  	          		"       заряд        ",
;;;10364  	          		"    заблокирован!   ",
;;;10365  	          		"                    ",2000);
;;;10366  		}
;;;10367  	}
;;;10368  }
00649c  bd38              POP      {r3-r5,pc}
                  |L1.25758|
00649e  f04f0114          MOV      r1,#0x14              ;10346
0064a2  7061              STRB     r1,[r4,#1]            ;10346
0064a4  49ad              LDR      r1,|L1.26460|
0064a6  f9b12000          LDRSH    r2,[r1,#0]            ;10347  ; speedChrgBlckStat
0064aa  49ad              LDR      r1,|L1.26464|
0064ac  f8913023          LDRB     r3,[r1,#0x23]         ;10347  ; spc_stat
0064b0  ea420203          ORR      r2,r2,r3              ;10347
0064b4  794b              LDRB     r3,[r1,#5]            ;10347  ; vz1_stat
0064b6  79c9              LDRB     r1,[r1,#7]            ;10347  ; vz2_stat
0064b8  ea420203          ORR      r2,r2,r3              ;10347
0064bc  430a              ORRS     r2,r2,r1              ;10347
0064be  d009              BEQ      |L1.25812|
0064c0  f44f60fa          MOV      r0,#0x7d0             ;10362
0064c4  9000              STR      r0,[sp,#0]            ;10362
0064c6  4ba7              LDR      r3,|L1.26468|
0064c8  a2a7              ADR      r2,|L1.26472|
0064ca  a1ad              ADR      r1,|L1.26496|
0064cc  a0b2              ADR      r0,|L1.26520|
0064ce  f7fffffe          BL       show_mess
0064d2  bd38              POP      {r3-r5,pc}
                  |L1.25812|
0064d4  f04f0101          MOV      r1,#1                 ;10354
0064d8  7001              STRB     r1,[r0,#0]            ;10354
0064da  e8bd4038          POP      {r3-r5,lr}            ;10358
0064de  4608              MOV      r0,r1                 ;10358
0064e0  f7ffbffe          B.W      speedz_mem_hndl
;;;10369  
                          ENDP

                  speedChargeHndl PROC
;;;10125  //-----------------------------------------------
;;;10126  void speedChargeHndl(void)
0064e4  e92d4ff8          PUSH     {r3-r11,lr}
;;;10127  {
;;;10128  /*
;;;10129  if(sp_ch_stat==scsOFF)
;;;10130  	{
;;;10131  	if((sk_stat[1]==1)&&(sk_stat_old[1]=0))
;;;10132  	}*/
;;;10133  	 
;;;10134  if(sp_ch_stat==scsSTEP1)
0064e8  4f9b              LDR      r7,|L1.26456|
;;;10135  	{
;;;10136  	if(sp_ch_stat_old!=sp_ch_stat)
0064ea  4eb3              LDR      r6,|L1.26552|
;;;10137  		{
;;;10138  		sp_ch_stat_cnt=5;
;;;10139  		if(SP_CH_VENT_BLOK==0)
0064ec  f8dfa2c0          LDR      r10,|L1.26544|
0064f0  7839              LDRB     r1,[r7,#0]            ;10134  ; sp_ch_stat
;;;10140  			{
;;;10141  			sp_ch_stat_cnt=0;
;;;10142  			sp_ch_stat=scsWRK;
;;;10143  			}
;;;10144  		}
;;;10145  	if(sp_ch_stat_cnt)
;;;10146  		{
;;;10147  		sp_ch_stat_cnt--;
;;;10148  		if(sp_ch_stat_cnt==0)
;;;10149  			{
;;;10150  			sp_ch_stat=scsERR1; 	//Не включилась вентиляция;
;;;10151  
;;;10152  			}
;;;10153  		}
;;;10154  	if(sk_stat[0]==1)sp_ch_stat=scsWRK;
0064f2  f8df92c0          LDR      r9,|L1.26548|
0064f6  7830              LDRB     r0,[r6,#0]            ;10136
0064f8  4cb0              LDR      r4,|L1.26556|
0064fa  2500              MOVS     r5,#0                 ;10139
0064fc  f04f0802          MOV      r8,#2                 ;10142
006500  2901              CMP      r1,#1                 ;10134
006502  d11b              BNE      |L1.25916|
006504  2801              CMP      r0,#1                 ;10136
006506  d008              BEQ      |L1.25882|
006508  f04f0105          MOV      r1,#5                 ;10138
00650c  8021              STRH     r1,[r4,#0]            ;10138
00650e  f8ba1000          LDRH     r1,[r10,#0]           ;10139  ; SP_CH_VENT_BLOK
006512  b911              CBNZ     r1,|L1.25882|
006514  8025              STRH     r5,[r4,#0]            ;10141
006516  f8878000          STRB     r8,[r7,#0]            ;10142
                  |L1.25882|
00651a  f9b41000          LDRSH    r1,[r4,#0]            ;10145  ; sp_ch_stat_cnt
00651e  b139              CBZ      r1,|L1.25904|
006520  f1a10101          SUB      r1,r1,#1              ;10147
006524  b209              SXTH     r1,r1                 ;10147
006526  8021              STRH     r1,[r4,#0]            ;10147
006528  b911              CBNZ     r1,|L1.25904|
00652a  f04f0103          MOV      r1,#3                 ;10150
00652e  7039              STRB     r1,[r7,#0]            ;10150
                  |L1.25904|
006530  f8991000          LDRB     r1,[r9,#0]  ; sk_stat
006534  2901              CMP      r1,#1
006536  d101              BNE      |L1.25916|
006538  f8878000          STRB     r8,[r7,#0]
                  |L1.25916|
;;;10155  	}
;;;10156  
;;;10157  if(sp_ch_stat==scsWRK)
00653c  7839              LDRB     r1,[r7,#0]  ; sp_ch_stat
00653e  2902              CMP      r1,#2
006540  d123              BNE      |L1.25994|
;;;10158  	{
;;;10159  	if(sp_ch_stat_old!=sp_ch_stat)
;;;10160  		{
;;;10161  		sp_ch_wrk_cnt=(signed long)speedChrgTimeInHour*3600L;
006542  4a9f              LDR      r2,|L1.26560|
;;;10162  		hv_vz_up_cnt=0;
006544  499f              LDR      r1,|L1.26564|
006546  2802              CMP      r0,#2                 ;10159
006548  d008              BEQ      |L1.25948|
00654a  489f              LDR      r0,|L1.26568|
00654c  f44f6361          MOV      r3,#0xe10             ;10161
006550  f9b00000          LDRSH    r0,[r0,#0]            ;10161  ; speedChrgTimeInHour
006554  fb00f003          MUL      r0,r0,r3              ;10161
006558  6010              STR      r0,[r2,#0]            ;10161  ; sp_ch_wrk_cnt
00655a  600d              STR      r5,[r1,#0]  ; hv_vz_up_cnt
                  |L1.25948|
;;;10163  		}
;;;10164  	sp_ch_wrk_cnt--;
00655c  6810              LDR      r0,[r2,#0]  ; sp_ch_wrk_cnt
00655e  f1a00001          SUB      r0,r0,#1
006562  6010              STR      r0,[r2,#0]  ; sp_ch_wrk_cnt
;;;10165  	hv_vz_up_cnt++;
006564  680a              LDR      r2,[r1,#0]  ; hv_vz_up_cnt
006566  f1020201          ADD      r2,r2,#1
00656a  600a              STR      r2,[r1,#0]  ; hv_vz_up_cnt
;;;10166  	if(sp_ch_wrk_cnt==0)
00656c  b918              CBNZ     r0,|L1.25974|
;;;10167  		{
;;;10168  		sp_ch_stat=scsOFF;
00656e  703d              STRB     r5,[r7,#0]
;;;10169  		speedz_mem_hndl(0);
006570  2000              MOVS     r0,#0
006572  f7fffffe          BL       speedz_mem_hndl
                  |L1.25974|
;;;10170  		}
;;;10171  	#ifdef UKU_220_IPS_TERMOKOMPENSAT
;;;10172  	if((sk_stat[0]==0)&&(SP_CH_VENT_BLOK==1))sp_ch_stat=scsERR2;
006576  f8990000          LDRB     r0,[r9,#0]  ; sk_stat
00657a  b930              CBNZ     r0,|L1.25994|
00657c  f8ba0000          LDRH     r0,[r10,#0]  ; SP_CH_VENT_BLOK
006580  2801              CMP      r0,#1
006582  d102              BNE      |L1.25994|
006584  f04f0004          MOV      r0,#4
006588  7038              STRB     r0,[r7,#0]
                  |L1.25994|
;;;10173  	#endif
;;;10174  	}
;;;10175  
;;;10176  if(sp_ch_stat==scsERR1)		//Отсутствует вентиляция при включении
00658a  7838              LDRB     r0,[r7,#0]  ; sp_ch_stat
;;;10177  	{
;;;10178  	if((sp_ch_stat_old!=sp_ch_stat)||(sp_ch_stat_cnt==0))
;;;10179  		{
;;;10180  		sp_ch_stat_cnt=10;
;;;10181  		}
;;;10182  	sp_ch_stat_cnt--;
;;;10183  	if((sp_ch_stat_cnt==10)||(sp_ch_stat_cnt==9))
;;;10184  		{
;;;10185  		show_mess(	"  УСКОРЕННЫЙ ЗАРЯД  ",
00658c  f2413b88          MOV      r11,#0x1388
006590  f04f0a0a          MOV      r10,#0xa              ;10180
006594  2803              CMP      r0,#3                 ;10176
006596  d119              BNE      |L1.26060|
006598  7830              LDRB     r0,[r6,#0]            ;10178  ; sp_ch_stat_old
00659a  2803              CMP      r0,#3                 ;10178
00659c  d101              BNE      |L1.26018|
00659e  8820              LDRH     r0,[r4,#0]            ;10178  ; sp_ch_stat_cnt
0065a0  b908              CBNZ     r0,|L1.26022|
                  |L1.26018|
0065a2  f8a4a000          STRH     r10,[r4,#0]           ;10180
                  |L1.26022|
0065a6  8820              LDRH     r0,[r4,#0]            ;10182  ; sp_ch_stat_cnt
0065a8  f1a00001          SUB      r0,r0,#1              ;10182
0065ac  b200              SXTH     r0,r0                 ;10182
0065ae  8020              STRH     r0,[r4,#0]            ;10182
0065b0  280a              CMP      r0,#0xa               ;10183
0065b2  d001              BEQ      |L1.26040|
0065b4  2809              CMP      r0,#9                 ;10183
0065b6  d109              BNE      |L1.26060|
                  |L1.26040|
0065b8  4b84              LDR      r3,|L1.26572|
0065ba  a085              ADR      r0,|L1.26576|
0065bc  f1030218          ADD      r2,r3,#0x18
0065c0  f1020118          ADD      r1,r2,#0x18
0065c4  f8cdb000          STR      r11,[sp,#0]
0065c8  f7fffffe          BL       show_mess
                  |L1.26060|
;;;10186  					"   НЕ МОЖЕТ БЫТЬ    ",
;;;10187  					"      ВКЛЮЧЕН       ",
;;;10188  					"  БЕЗ ВЕНТИЛЯЦИИ!!  ",
;;;10189  					5000);
;;;10190  		}
;;;10191  	}
;;;10192  if(sp_ch_stat==scsERR2)		//Пропала вентиляция при работе
0065cc  7838              LDRB     r0,[r7,#0]  ; sp_ch_stat
0065ce  2804              CMP      r0,#4
0065d0  d11f              BNE      |L1.26130|
;;;10193  	{
;;;10194  	if((sp_ch_stat_old!=sp_ch_stat)||(sp_ch_stat_cnt==0))
0065d2  7830              LDRB     r0,[r6,#0]  ; sp_ch_stat_old
0065d4  2804              CMP      r0,#4
0065d6  d101              BNE      |L1.26076|
0065d8  8820              LDRH     r0,[r4,#0]  ; sp_ch_stat_cnt
0065da  b908              CBNZ     r0,|L1.26080|
                  |L1.26076|
;;;10195  		{
;;;10196  		sp_ch_stat_cnt=10;
0065dc  f8a4a000          STRH     r10,[r4,#0]
                  |L1.26080|
;;;10197  		}
;;;10198  	sp_ch_stat_cnt--;
0065e0  8820              LDRH     r0,[r4,#0]  ; sp_ch_stat_cnt
0065e2  f1a00001          SUB      r0,r0,#1
0065e6  b200              SXTH     r0,r0
0065e8  8020              STRH     r0,[r4,#0]
;;;10199  	if((sp_ch_stat_cnt==10)||(sp_ch_stat_cnt==9))
0065ea  280a              CMP      r0,#0xa
0065ec  d001              BEQ      |L1.26098|
0065ee  2809              CMP      r0,#9
0065f0  d109              BNE      |L1.26118|
                  |L1.26098|
;;;10200  		{
;;;10201  		show_mess(	"  УСКОРЕННЫЙ ЗАРЯД  ",
0065f2  4b7d              LDR      r3,|L1.26600|
0065f4  a076              ADR      r0,|L1.26576|
0065f6  f1030218          ADD      r2,r3,#0x18
0065fa  f1020118          ADD      r1,r2,#0x18
0065fe  f8cdb000          STR      r11,[sp,#0]
006602  f7fffffe          BL       show_mess
                  |L1.26118|
;;;10202  					"    ЗАБЛОКИРОВАН    ",
;;;10203  					"     НЕИСПРАВНА     ",
;;;10204  					"    ВЕНТИЛЯЦИЯ!!!   ",
;;;10205  					5000);
;;;10206  		}
;;;10207  	if(sk_stat[0]==1)sp_ch_stat=scsWRK;
006606  f8990000          LDRB     r0,[r9,#0]  ; sk_stat
00660a  2801              CMP      r0,#1
00660c  d101              BNE      |L1.26130|
00660e  f8878000          STRB     r8,[r7,#0]
                  |L1.26130|
;;;10208  	}
;;;10209  
;;;10210  
;;;10211  sp_ch_stat_old=sp_ch_stat;
006612  7838              LDRB     r0,[r7,#0]  ; sp_ch_stat
006614  7030              STRB     r0,[r6,#0]
;;;10212  
;;;10213  
;;;10214  
;;;10215  if(speedChrgAvtEn==1)
006616  4975              LDR      r1,|L1.26604|
;;;10216  	{
;;;10217  	if((sp_ch_stat==scsOFF)&&(spc_stat==spcOFF)
;;;10218  		#ifdef UKU_220_IPS_TERMOKOMPENSAT
;;;10219  		&&(vz1_stat==vz1sOFF)&&(vz2_stat==vz2sOFF)
;;;10220  		#endif
;;;10221  		)
;;;10222  		{
;;;10223  		if((load_U<u_necc)&&((u_necc-load_U)>speedChrgDU)
;;;10224  		#ifdef UKU_220_IPS_TERMOKOMPENSAT
;;;10225  		&&(abs(Ib_ips_termokompensat/10-IZMAX)<5)
;;;10226  		#endif
;;;10227  		#ifdef UKU_220_V2
;;;10228  		&&(abs(bat[0]._Ib/10-IZMAX)<10)
;;;10229  		#endif
;;;10230  		&&(!speedChrgBlckStat))
006618  4c50              LDR      r4,|L1.26460|
00661a  8809              LDRH     r1,[r1,#0]            ;10215  ; speedChrgAvtEn
00661c  2901              CMP      r1,#1                 ;10215
00661e  d10a              BNE      |L1.26166|
006620  494f              LDR      r1,|L1.26464|
;;;10231  			{
;;;10232  			speedChargeStartCnt++;
006622  4e73              LDR      r6,|L1.26608|
006624  f8912023          LDRB     r2,[r1,#0x23]         ;10217  ; spc_stat
006628  4310              ORRS     r0,r0,r2              ;10217
00662a  794a              LDRB     r2,[r1,#5]            ;10217  ; vz1_stat
00662c  79c9              LDRB     r1,[r1,#7]            ;10217  ; vz2_stat
00662e  4310              ORRS     r0,r0,r2              ;10217
006630  4308              ORRS     r0,r0,r1              ;10217
006632  d007              BEQ      |L1.26180|
;;;10233  			if(speedChargeStartCnt>=60)
;;;10234  				{
;;;10235  				speedChargeStartStop();
;;;10236  				speedz_mem_hndl(5);
;;;10237  				}
;;;10238  			}
;;;10239  		else speedChargeStartCnt=0;
;;;10240  		}
;;;10241  	else speedChargeStartCnt=0;
006634  7035              STRB     r5,[r6,#0]
                  |L1.26166|
;;;10242  	}
;;;10243  
;;;10244  
;;;10245  
;;;10246  /*
;;;10247  if(speedChIsOn)
;;;10248  	{
;;;10249  	speedChTimeCnt++;
;;;10250  	if(speedChTimeCnt>=((signed long)speedChrgTimeInHour*3600L))
;;;10251  		{
;;;10252  		speedChIsOn=0;
;;;10253  		}
;;;10254  	if(speedChrgBlckStat)
;;;10255  		{
;;;10256  		speedChIsOn=0;
;;;10257  		speedChTimeCnt=0;
;;;10258  		}
;;;10259  	}
;;;10260  
;;;10261  
;;;10262  
;;;10263  if(speedChrgAvtEn)
;;;10264  	{
;;;10265  	if(!speedChIsOn)
;;;10266  		{
;;;10267  		if((load_U<u_necc)&&((u_necc-load_U)>speedChrgDU)&&(abs(Ib_ips_termokompensat/10-IZMAX)<5)&&(!speedChrgBlckStat))
;;;10268  			{
;;;10269  			speedChIsOn=1;
;;;10270  			}
;;;10271  		}
;;;10272  	}
;;;10273  
;;;10274  
;;;10275  */
;;;10276  if(/*(speedChrgBlckSrc!=1)&&*/(speedChrgBlckSrc!=2)) speedChrgBlckStat=0;
006636  486f              LDR      r0,|L1.26612|
006638  8800              LDRH     r0,[r0,#0]  ; speedChrgBlckSrc
00663a  2802              CMP      r0,#2
00663c  d02e              BEQ      |L1.26268|
00663e  8025              STRH     r5,[r4,#0]
                  |L1.26176|
;;;10277  else
;;;10278  	{
;;;10279  	speedChrgBlckStat=0;
;;;10280  	if(speedChrgBlckSrc==1)
;;;10281  		{
;;;10282  		if(((speedChrgBlckLog==0)&&(adc_buff_[11]>2000)) || ((speedChrgBlckLog==1)&&(adc_buff_[11]<2000))) speedChrgBlckStat=1;
;;;10283  		}
;;;10284  	else if(speedChrgBlckSrc==2)
;;;10285  		{
;;;10286  		if(((speedChrgBlckLog==0)&&(adc_buff_[13]>2000)) || ((speedChrgBlckLog==1)&&(adc_buff_[13]<2000))) speedChrgBlckStat=1;
;;;10287  		}
;;;10288  	}
;;;10289  
;;;10290  /*
;;;10291  if(speedChrgBlckStat==1)
;;;10292  	{
;;;10293  
;;;10294  	//speedChargeStartStop();
;;;10295  
;;;10296  	speedChrgShowCnt++;
;;;10297  	if(speedChrgShowCnt>=30)	
;;;10298  		{
;;;10299  		speedChrgShowCnt=0;
;;;10300  		show_mess(	"     УСКОРЕННЫЙ     ",
;;;10301  					"       ЗАРЯД        ",
;;;10302  					"     ЗАПРЕЩЕН!!!    ",
;;;10303  					"                    ",
;;;10304  					5000);
;;;10305  		}
;;;10306  	} 
;;;10307  else speedChrgShowCnt=0;  */
;;;10308  
;;;10309  
;;;10310  }
006640  e8bd8ff8          POP      {r3-r11,pc}
                  |L1.26180|
006644  4837              LDR      r0,|L1.26404|
006646  496c              LDR      r1,|L1.26616|
006648  f9b00000          LDRSH    r0,[r0,#0]            ;10223  ; load_U
00664c  f9b11000          LDRSH    r1,[r1,#0]            ;10223  ; u_necc
006650  4288              CMP      r0,r1                 ;10223
006652  da14              BGE      |L1.26238|
006654  1a08              SUBS     r0,r1,r0              ;10223
006656  4969              LDR      r1,|L1.26620|
006658  f9b11000          LDRSH    r1,[r1,#0]            ;10223  ; speedChrgDU
00665c  4288              CMP      r0,r1                 ;10223
00665e  dd0e              BLE      |L1.26238|
006660  4867              LDR      r0,|L1.26624|
006662  4968              LDR      r1,|L1.26628|
006664  f9b00000          LDRSH    r0,[r0,#0]            ;10225  ; Ib_ips_termokompensat
006668  8809              LDRH     r1,[r1,#0]            ;10225  ; IZMAX
00666a  fb90f0fa          SDIV     r0,r0,r10             ;10225
00666e  1a40              SUBS     r0,r0,r1              ;10225
006670  b200              SXTH     r0,r0                 ;10225
006672  f7fffffe          BL       abs
006676  2805              CMP      r0,#5                 ;10225
006678  da01              BGE      |L1.26238|
00667a  8820              LDRH     r0,[r4,#0]            ;10230  ; speedChrgBlckStat
00667c  b108              CBZ      r0,|L1.26242|
                  |L1.26238|
00667e  7035              STRB     r5,[r6,#0]            ;10239
006680  e7d9              B        |L1.26166|
                  |L1.26242|
006682  7830              LDRB     r0,[r6,#0]            ;10232  ; speedChargeStartCnt
006684  f1000001          ADD      r0,r0,#1              ;10232
006688  b2c0              UXTB     r0,r0                 ;10232
00668a  7030              STRB     r0,[r6,#0]            ;10232
00668c  283c              CMP      r0,#0x3c              ;10233
00668e  d3d2              BCC      |L1.26166|
006690  f7fffffe          BL       speedChargeStartStop
006694  2005              MOVS     r0,#5                 ;10236
006696  f7fffffe          BL       speedz_mem_hndl
00669a  e7cc              B        |L1.26166|
                  |L1.26268|
00669c  8025              STRH     r5,[r4,#0]            ;10279
00669e  485a              LDR      r0,|L1.26632|
0066a0  495a              LDR      r1,|L1.26636|
0066a2  f44f63fa          MOV      r3,#0x7d0             ;10282
0066a6  f9b00000          LDRSH    r0,[r0,#0]            ;10286  ; speedChrgBlckLog
0066aa  b918              CBNZ     r0,|L1.26292|
0066ac  f9b1201a          LDRSH    r2,[r1,#0x1a]         ;10286  ; adc_buff_
0066b0  429a              CMP      r2,r3                 ;10286
0066b2  dc05              BGT      |L1.26304|
                  |L1.26292|
0066b4  2801              CMP      r0,#1                 ;10286
0066b6  d1c3              BNE      |L1.26176|
0066b8  f9b1001a          LDRSH    r0,[r1,#0x1a]         ;10286  ; adc_buff_
0066bc  4298              CMP      r0,r3                 ;10286
0066be  dabf              BGE      |L1.26176|
                  |L1.26304|
0066c0  f04f0001          MOV      r0,#1                 ;10286
0066c4  8020              STRH     r0,[r4,#0]            ;10286
0066c6  e7bb              B        |L1.26176|
;;;10311  
                          ENDP

                  averageChargeHndl PROC
;;;10370  //-----------------------------------------------
;;;10371  void averageChargeHndl(void)
0066c8  e92d4ff8          PUSH     {r3-r11,lr}
;;;10372  {
;;;10373  /*
;;;10374  if(hv_vz_stat==hvsOFF)
;;;10375  	{
;;;10376  	if((sk_stat[1]==1)&&(sk_stat_old[1]=0))
;;;10377  	} */
;;;10378  if(hv_vz_stat!=hvsOFF)
0066cc  f8dfa140          LDR      r10,|L1.26640|
0066d0  f04f0b00          MOV      r11,#0
0066d4  f89a0000          LDRB     r0,[r10,#0]  ; hv_vz_stat
0066d8  b130              CBZ      r0,|L1.26344|
;;;10379  	{
;;;10380  	hv_vz_stat=hvsOFF; 	
0066da  f88ab000          STRB     r11,[r10,#0]
;;;10381  	lc640_write(EE_HV_VZ_STAT,hvsOFF);
0066de  2100              MOVS     r1,#0
0066e0  f44f70b4          MOV      r0,#0x168
0066e4  f7fffffe          BL       lc640_write
                  |L1.26344|
;;;10382  	}
;;;10383  
;;;10384  if(hv_vz_stat==hvsSTEP1)
0066e8  f89a0000          LDRB     r0,[r10,#0]  ; hv_vz_stat
;;;10385  	{
;;;10386  	if(hv_vz_stat_old!=hv_vz_stat)
;;;10387  		{
;;;10388  		hv_vz_stat_cnt=5;
;;;10389  		}
;;;10390  	if(hv_vz_stat_cnt)
;;;10391  		{
;;;10392  		hv_vz_stat_cnt--;
;;;10393  		if(hv_vz_stat_cnt==0)
;;;10394  			{
;;;10395  			hv_vz_stat=hvsERR1; 	//Не включилась вентиляция;
;;;10396  			lc640_write(EE_HV_VZ_STAT,hvsERR1);
;;;10397  			}
;;;10398  		}
;;;10399  	if(sk_stat[0]==1)
0066ec  4e31              LDR      r6,|L1.26548|
0066ee  4d49              LDR      r5,|L1.26644|
0066f0  4c49              LDR      r4,|L1.26648|
0066f2  f04f0905          MOV      r9,#5                 ;10388
0066f6  2801              CMP      r0,#1                 ;10384
0066f8  d10b              BNE      |L1.26386|
0066fa  7828              LDRB     r0,[r5,#0]            ;10386  ; hv_vz_stat_old
0066fc  2801              CMP      r0,#1                 ;10386
0066fe  d001              BEQ      |L1.26372|
006700  f8a49000          STRH     r9,[r4,#0]            ;10388
                  |L1.26372|
006704  f9b40000          LDRSH    r0,[r4,#0]            ;10390  ; hv_vz_stat_cnt
006708  b110              CBZ      r0,|L1.26384|
00670a  f1a00001          SUB      r0,r0,#1              ;10392
00670e  e085              B        |L1.26652|
                  |L1.26384|
006710  e090              B        |L1.26676|
                  |L1.26386|
006712  e0ab              B        |L1.26732|
                  |L1.26388|
                          DCD      superviser_cnt
                  |L1.26392|
                          DCD      NPN_OUT
                  |L1.26396|
                          DCD      npn_tz_cnt
                  |L1.26400|
                          DCD      npn_stat
                  |L1.26404|
                          DCD      load_U
                  |L1.26408|
                          DCD      UONPN
                  |L1.26412|
                          DCD      net_Ua
                  |L1.26416|
                          DCD      net_Ub
                  |L1.26420|
                          DCD      net_Uc
                  |L1.26424|
                          DCD      UMN
                  |L1.26428|
                          DCD      TZNPN
                  |L1.26432|
                          DCD      UVNPN
                  |L1.26436|
                          DCD      load_off_cnt
                  |L1.26440|
                          DCD      load_off_stat
                  |L1.26444|
                          DCD      dUNPN
                  |L1.26448|
                          DCD      tloaddisable_cmnd
                  |L1.26452|
                          DCD      spch_plazma
                  |L1.26456|
                          DCD      sp_ch_stat
                  |L1.26460|
                          DCD      speedChrgBlckStat
                  |L1.26464|
                          DCD      ||area_number.25||
                  |L1.26468|
                          DCD      ||.text||+0x1a54
                  |L1.26472|
006768  20202020          DCB      "    ",231,224,225,235,238,234,232,240,238,226,224,237,"!"
00676c  e7e0e1eb
006770  eeeae8f0
006774  eee2e0ed
006778  21      
006779  20202000          DCB      "   ",0
00677d  00                DCB      0
00677e  00                DCB      0
00677f  00                DCB      0
                  |L1.26496|
006780  20202020          DCB      "       ",231,224,240,255,228,"        ",0
006784  202020e7
006788  e0f0ffe4
00678c  20202020
006790  20202020
006794  00      
006795  00                DCB      0
006796  00                DCB      0
006797  00                DCB      0
                  |L1.26520|
006798  20202020          DCB      "     ",211,241,234,238,240,229,237,237,251,233,"     ",0
00679c  20d3f1ea
0067a0  eef0e5ed
0067a4  edfbe920
0067a8  20202020
0067ac  00      
0067ad  00                DCB      0
0067ae  00                DCB      0
0067af  00                DCB      0
                  |L1.26544|
                          DCD      SP_CH_VENT_BLOK
                  |L1.26548|
                          DCD      sk_stat
                  |L1.26552|
                          DCD      sp_ch_stat_old
                  |L1.26556|
                          DCD      sp_ch_stat_cnt
                  |L1.26560|
                          DCD      sp_ch_wrk_cnt
                  |L1.26564|
                          DCD      hv_vz_up_cnt
                  |L1.26568|
                          DCD      speedChrgTimeInHour
                  |L1.26572|
                          DCD      ||.text||+0x191c
                  |L1.26576|
0067d0  2020d3d1          DCB      "  ",211,209,202,206,208,197,205,205,219,201," ",199,192
0067d4  caced0c5
0067d8  cdcddbc9
0067dc  20c7c0  
0067df  d0dfc420          DCB      208,223,196,"  ",0
0067e3  2000    
0067e5  00                DCB      0
0067e6  00                DCB      0
0067e7  00                DCB      0
                  |L1.26600|
                          DCD      ||.text||+0x145c
                  |L1.26604|
                          DCD      speedChrgAvtEn
                  |L1.26608|
                          DCD      speedChargeStartCnt
                  |L1.26612|
                          DCD      speedChrgBlckSrc
                  |L1.26616|
                          DCD      u_necc
                  |L1.26620|
                          DCD      speedChrgDU
                  |L1.26624|
                          DCD      Ib_ips_termokompensat
                  |L1.26628|
                          DCD      IZMAX
                  |L1.26632|
                          DCD      speedChrgBlckLog
                  |L1.26636|
                          DCD      ||.bss||+0x40c
                  |L1.26640|
                          DCD      hv_vz_stat
                  |L1.26644|
                          DCD      hv_vz_stat_old
                  |L1.26648|
                          DCD      hv_vz_stat_cnt
                  |L1.26652|
00681c  b200              SXTH     r0,r0                 ;10392
00681e  8020              STRH     r0,[r4,#0]            ;10392
006820  b940              CBNZ     r0,|L1.26676|
006822  f04f0006          MOV      r0,#6                 ;10395
006826  f88a0000          STRB     r0,[r10,#0]           ;10395
00682a  4601              MOV      r1,r0                 ;10396
00682c  f44f70b4          MOV      r0,#0x168             ;10396
006830  f7fffffe          BL       lc640_write
                  |L1.26676|
006834  7830              LDRB     r0,[r6,#0]  ; sk_stat
006836  2801              CMP      r0,#1
006838  d118              BNE      |L1.26732|
;;;10400  		{
;;;10401  		hv_vz_stat=hvsSTEP2;
00683a  f04f0002          MOV      r0,#2
00683e  f88a0000          STRB     r0,[r10,#0]
;;;10402  		lc640_write(EE_HV_VZ_STAT,hvsSTEP2);
006842  4601              MOV      r1,r0
006844  f44f70b4          MOV      r0,#0x168
006848  f7fffffe          BL       lc640_write
;;;10403  		tree_up(iHV_STEP2_2,1,0,0);
00684c  2300              MOVS     r3,#0
00684e  461a              MOV      r2,r3
006850  2101              MOVS     r1,#1
006852  20dd              MOVS     r0,#0xdd
006854  f7fffffe          BL       tree_up
;;;10404  		tree_up(iHV_STEP2_1,0,0,0);
006858  2300              MOVS     r3,#0
00685a  461a              MOV      r2,r3
00685c  4619              MOV      r1,r3
00685e  20dc              MOVS     r0,#0xdc
006860  f7fffffe          BL       tree_up
;;;10405  		ret(1200);
006864  f44f6096          MOV      r0,#0x4b0
006868  f7fffffe          BL       ||ret||
                  |L1.26732|
;;;10406  		}
;;;10407  	}
;;;10408  
;;;10409  if(hv_vz_stat==hvsSTEP2)
00686c  f89a0000          LDRB     r0,[r10,#0]  ; hv_vz_stat
006870  2802              CMP      r0,#2
006872  d10b              BNE      |L1.26764|
;;;10410  	{
;;;10411  	if((hv_vz_stat_old!=hv_vz_stat)||(hv_vz_stat_cnt==0))
006874  7829              LDRB     r1,[r5,#0]  ; hv_vz_stat_old
006876  2902              CMP      r1,#2
006878  d101              BNE      |L1.26750|
00687a  8821              LDRH     r1,[r4,#0]  ; hv_vz_stat_cnt
00687c  b911              CBNZ     r1,|L1.26756|
                  |L1.26750|
;;;10412  		{
;;;10413  		hv_vz_stat_cnt=15;
00687e  f04f010f          MOV      r1,#0xf
006882  8021              STRH     r1,[r4,#0]
                  |L1.26756|
;;;10414  		}
;;;10415  	hv_vz_stat_cnt--;
006884  8821              LDRH     r1,[r4,#0]  ; hv_vz_stat_cnt
006886  f1a10101          SUB      r1,r1,#1
00688a  8021              STRH     r1,[r4,#0]
                  |L1.26764|
;;;10416  	//if((hv_vz_stat_cnt==14)/*||(hv_vz_stat_cnt==13)||(hv_vz_stat_cnt==12)*/)
;;;10417  	//	{
;;;10418  //		show_mess_number(	"     ВНИМАНИЕ!!!    ",
;;;10419  	//				"  Напряжение будет  ",
;;;10420  	//				" увеличено до     @В",
;;;10421  	//				"ОТКЛЮЧИТЕ НАГРУЗКУ!!",
;;;10422  	//				4800,UVZ,1);
;;;10423  	//	}
;;;10424  	//if((hv_vz_stat_cnt==8)/*||(hv_vz_stat_cnt==7)||(hv_vz_stat_cnt==6)*/)
;;;10425  	//	{
;;;10426  	//	show_mess(	"    ПОДТВЕРДИТЕ     ",
;;;10427  	//				"     НАЖАТИЕМ       ",
;;;10428  	//				"    ЦЕНТРАЛЬНОЙ     ",
;;;10429  	//				"      КНОПКИ        ",
;;;10430  	//				4800);
;;;10431  	//	} 
;;;10432  /*	if(sk_stat[1]==1)
;;;10433  		{
;;;10434  		hv_vz_stat=hvsWRK;
;;;10435  		lc640_write(EE_HV_VZ_STAT,hvsWRK);
;;;10436  		}*/
;;;10437  	}
;;;10438  
;;;10439  if(hv_vz_stat==hvsSTEP3)
;;;10440  	{
;;;10441  	if((hv_vz_stat_old!=hv_vz_stat)||(hv_vz_stat_cnt==0))
;;;10442  		{
;;;10443  		hv_vz_stat_cnt=10;
00688c  270a              MOVS     r7,#0xa
;;;10444  		}
;;;10445  	hv_vz_stat_cnt--;
;;;10446  	if((hv_vz_stat_cnt==10)||(hv_vz_stat_cnt==9))
;;;10447  		{
;;;10448  		show_mess(	"     ВКЛЮЧИТЕ       ",
00688e  f2413888          MOV      r8,#0x1388
006892  2803              CMP      r0,#3                 ;10439
006894  d122              BNE      |L1.26844|
006896  7828              LDRB     r0,[r5,#0]            ;10441  ; hv_vz_stat_old
006898  2803              CMP      r0,#3                 ;10441
00689a  d101              BNE      |L1.26784|
00689c  8820              LDRH     r0,[r4,#0]            ;10441  ; hv_vz_stat_cnt
00689e  b900              CBNZ     r0,|L1.26786|
                  |L1.26784|
0068a0  8027              STRH     r7,[r4,#0]            ;10443
                  |L1.26786|
0068a2  8820              LDRH     r0,[r4,#0]            ;10445  ; hv_vz_stat_cnt
0068a4  f1a00001          SUB      r0,r0,#1              ;10445
0068a8  b200              SXTH     r0,r0                 ;10445
0068aa  8020              STRH     r0,[r4,#0]            ;10445
0068ac  280a              CMP      r0,#0xa               ;10446
0068ae  d001              BEQ      |L1.26804|
0068b0  2809              CMP      r0,#9                 ;10446
0068b2  d109              BNE      |L1.26824|
                  |L1.26804|
0068b4  4bfe              LDR      r3,|L1.27824|
0068b6  a2ff              ADR      r2,|L1.27828|
0068b8  f5a37194          SUB      r1,r3,#0x128
0068bc  f1010018          ADD      r0,r1,#0x18
0068c0  f8cd8000          STR      r8,[sp,#0]
0068c4  f7fffffe          BL       show_mess
                  |L1.26824|
;;;10449  					"      ТУМБЛЕР       ",
;;;10450  					"   ВЫРАВНИВАЮЩИЙ    ",
;;;10451  					"       ЗАРЯД        ",
;;;10452  					5000);
;;;10453  		}
;;;10454  	if(sk_stat[1]==1)
0068c8  7870              LDRB     r0,[r6,#1]  ; sk_stat
0068ca  2801              CMP      r0,#1
0068cc  d106              BNE      |L1.26844|
;;;10455  		{
;;;10456  		hv_vz_stat=hvsWRK;
0068ce  f88a9000          STRB     r9,[r10,#0]
;;;10457  		lc640_write(EE_HV_VZ_STAT,hvsWRK);
0068d2  2105              MOVS     r1,#5
0068d4  f44f70b4          MOV      r0,#0x168
0068d8  f7fffffe          BL       lc640_write
                  |L1.26844|
;;;10458  		}
;;;10459  	}
;;;10460  
;;;10461  if(hv_vz_stat==hvsWRK)
0068dc  f89a0000          LDRB     r0,[r10,#0]  ; hv_vz_stat
0068e0  2805              CMP      r0,#5
0068e2  d13a              BNE      |L1.26970|
;;;10462  	{
;;;10463  	if(hv_vz_stat_old!=hv_vz_stat)
0068e4  7828              LDRB     r0,[r5,#0]  ; hv_vz_stat_old
;;;10464  		{
;;;10465  		hv_vz_wrk_cnt=3600L/*100L*/*((long)VZ_HR);
0068e6  4af9              LDR      r2,|L1.27852|
;;;10466  		if(VZ_HR==0)  	hv_vz_wrk_cnt=1800L;
;;;10467  		hv_vz_up_cnt=0L;
0068e8  49f9              LDR      r1,|L1.27856|
0068ea  2805              CMP      r0,#5                 ;10463
0068ec  d00d              BEQ      |L1.26890|
0068ee  48f9              LDR      r0,|L1.27860|
0068f0  f44f6361          MOV      r3,#0xe10             ;10465
0068f4  f9b00000          LDRSH    r0,[r0,#0]            ;10465  ; VZ_HR
0068f8  fb00f303          MUL      r3,r0,r3              ;10465
0068fc  6013              STR      r3,[r2,#0]            ;10465  ; hv_vz_wrk_cnt
0068fe  b910              CBNZ     r0,|L1.26886|
006900  f44f60e1          MOV      r0,#0x708             ;10466
006904  6010              STR      r0,[r2,#0]            ;10466  ; hv_vz_wrk_cnt
                  |L1.26886|
006906  f8c1b000          STR      r11,[r1,#0]  ; hv_vz_up_cnt
                  |L1.26890|
;;;10468  		}
;;;10469  	hv_vz_wrk_cnt--;
00690a  6810              LDR      r0,[r2,#0]  ; hv_vz_wrk_cnt
00690c  f1a00001          SUB      r0,r0,#1
006910  6010              STR      r0,[r2,#0]  ; hv_vz_wrk_cnt
;;;10470  	hv_vz_up_cnt++;
006912  680a              LDR      r2,[r1,#0]  ; hv_vz_up_cnt
006914  f1020201          ADD      r2,r2,#1
006918  600a              STR      r2,[r1,#0]  ; hv_vz_up_cnt
;;;10471  
;;;10472  	if(hv_vz_wrk_cnt==0)
00691a  b940              CBNZ     r0,|L1.26926|
;;;10473  		{
;;;10474  		hv_vz_stat=hvsERR4;
00691c  f04f0009          MOV      r0,#9
006920  f88a0000          STRB     r0,[r10,#0]
;;;10475  		lc640_write(EE_HV_VZ_STAT,hvsERR4);
006924  4601              MOV      r1,r0
006926  f44f70b4          MOV      r0,#0x168
00692a  f7fffffe          BL       lc640_write
                  |L1.26926|
;;;10476  		}
;;;10477  	if(sk_stat[0]==0)
00692e  7830              LDRB     r0,[r6,#0]  ; sk_stat
006930  b940              CBNZ     r0,|L1.26948|
;;;10478  		{
;;;10479  		hv_vz_stat=hvsERR2;
006932  f04f0007          MOV      r0,#7
006936  f88a0000          STRB     r0,[r10,#0]
;;;10480  		lc640_write(EE_HV_VZ_STAT,hvsERR2);
00693a  4601              MOV      r1,r0
00693c  f44f70b4          MOV      r0,#0x168
006940  f7fffffe          BL       lc640_write
                  |L1.26948|
;;;10481  		}
;;;10482  	if(sk_stat[1]==0)
006944  7870              LDRB     r0,[r6,#1]  ; sk_stat
006946  b940              CBNZ     r0,|L1.26970|
;;;10483  		{
;;;10484  		hv_vz_stat=hvsERR3;
006948  f04f0008          MOV      r0,#8
00694c  f88a0000          STRB     r0,[r10,#0]
;;;10485  		lc640_write(EE_HV_VZ_STAT,hvsERR3);
006950  4601              MOV      r1,r0
006952  f44f70b4          MOV      r0,#0x168
006956  f7fffffe          BL       lc640_write
                  |L1.26970|
;;;10486  		}
;;;10487  	}
;;;10488  
;;;10489  if(hv_vz_stat==hvsERR1)		//Отсутствует вентиляция при включении
00695a  f89a0000          LDRB     r0,[r10,#0]  ; hv_vz_stat
00695e  2806              CMP      r0,#6
006960  d11a              BNE      |L1.27032|
;;;10490  	{
;;;10491  	if((hv_vz_stat_old!=hv_vz_stat)||(hv_vz_stat_cnt==0))
006962  7828              LDRB     r0,[r5,#0]  ; hv_vz_stat_old
006964  2806              CMP      r0,#6
006966  d101              BNE      |L1.26988|
006968  8820              LDRH     r0,[r4,#0]  ; hv_vz_stat_cnt
00696a  b900              CBNZ     r0,|L1.26990|
                  |L1.26988|
;;;10492  		{
;;;10493  		hv_vz_stat_cnt=10;
00696c  8027              STRH     r7,[r4,#0]
                  |L1.26990|
;;;10494  		}
;;;10495  	hv_vz_stat_cnt--;
00696e  8820              LDRH     r0,[r4,#0]  ; hv_vz_stat_cnt
006970  f1a00001          SUB      r0,r0,#1
006974  b200              SXTH     r0,r0
006976  8020              STRH     r0,[r4,#0]
;;;10496  	if((hv_vz_stat_cnt==10)||(hv_vz_stat_cnt==9))
006978  280a              CMP      r0,#0xa
00697a  d001              BEQ      |L1.27008|
00697c  2809              CMP      r0,#9
00697e  d10b              BNE      |L1.27032|
                  |L1.27008|
;;;10497  		{
;;;10498  		show_mess(	"ВЫРАВНИВАЮЩИЙ ЗАРЯД ",
006980  4bcb              LDR      r3,|L1.27824|
006982  f8cd8000          STR      r8,[sp,#0]
006986  3bf0              SUBS     r3,r3,#0xf0
006988  f1030218          ADD      r2,r3,#0x18
00698c  f1020118          ADD      r1,r2,#0x18
006990  f5a16095          SUB      r0,r1,#0x4a8
006994  f7fffffe          BL       show_mess
                  |L1.27032|
;;;10499  					"   НЕ МОЖЕТ БЫТЬ    ",
;;;10500  					"      ВКЛЮЧЕН       ",
;;;10501  					"  БЕЗ ВЕНТИЛЯЦИИ!!  ",
;;;10502  					5000);
;;;10503  		}
;;;10504  	}
;;;10505  if(hv_vz_stat==hvsERR2)		//Пропала вентиляция при работе
006998  f89a0000          LDRB     r0,[r10,#0]  ; hv_vz_stat
00699c  2807              CMP      r0,#7
00699e  d123              BNE      |L1.27112|
;;;10506  	{
;;;10507  	if((hv_vz_stat_old!=hv_vz_stat)||(hv_vz_stat_cnt==0))
0069a0  7828              LDRB     r0,[r5,#0]  ; hv_vz_stat_old
0069a2  2807              CMP      r0,#7
0069a4  d101              BNE      |L1.27050|
0069a6  8820              LDRH     r0,[r4,#0]  ; hv_vz_stat_cnt
0069a8  b900              CBNZ     r0,|L1.27052|
                  |L1.27050|
;;;10508  		{
;;;10509  		hv_vz_stat_cnt=10;
0069aa  8027              STRH     r7,[r4,#0]
                  |L1.27052|
;;;10510  		}
;;;10511  	hv_vz_stat_cnt--;
0069ac  8820              LDRH     r0,[r4,#0]  ; hv_vz_stat_cnt
0069ae  f1a00001          SUB      r0,r0,#1
0069b2  b200              SXTH     r0,r0
0069b4  8020              STRH     r0,[r4,#0]
;;;10512  	if((hv_vz_stat_cnt==10)||(hv_vz_stat_cnt==9))
0069b6  280a              CMP      r0,#0xa
0069b8  d001              BEQ      |L1.27070|
0069ba  2809              CMP      r0,#9
0069bc  d10a              BNE      |L1.27092|
                  |L1.27070|
;;;10513  		{
;;;10514  		show_mess(	"ВЫРАВНИВАЮЩИЙ ЗАРЯД ",
0069be  4bc6              LDR      r3,|L1.27864|
0069c0  f8cd8000          STR      r8,[sp,#0]
0069c4  f1030218          ADD      r2,r3,#0x18
0069c8  f1020118          ADD      r1,r2,#0x18
0069cc  f1010018          ADD      r0,r1,#0x18
0069d0  f7fffffe          BL       show_mess
                  |L1.27092|
;;;10515  					"    ЗАБЛОКИРОВАН    ",
;;;10516  					"     НЕИСПРАВНА     ",
;;;10517  					"    ВЕНТИЛЯЦИЯ!!!   ",
;;;10518  					5000);
;;;10519  		}
;;;10520  	if(sk_stat[0]==1)
0069d4  7830              LDRB     r0,[r6,#0]  ; sk_stat
0069d6  2801              CMP      r0,#1
0069d8  d106              BNE      |L1.27112|
;;;10521  		{
;;;10522  		hv_vz_stat=hvsWRK;
0069da  f88a9000          STRB     r9,[r10,#0]
;;;10523  		lc640_write(EE_HV_VZ_STAT,hvsWRK);
0069de  2105              MOVS     r1,#5
0069e0  f44f70b4          MOV      r0,#0x168
0069e4  f7fffffe          BL       lc640_write
                  |L1.27112|
;;;10524  		}
;;;10525  	}
;;;10526  
;;;10527  if(hv_vz_stat==hvsERR3)		//Отключен тумблер "Выравнивающий заряд"
0069e8  f89a0000          LDRB     r0,[r10,#0]  ; hv_vz_stat
0069ec  2808              CMP      r0,#8
0069ee  d123              BNE      |L1.27192|
;;;10528  	{
;;;10529  	if((hv_vz_stat_old!=hv_vz_stat)||(hv_vz_stat_cnt==0))
0069f0  7828              LDRB     r0,[r5,#0]  ; hv_vz_stat_old
0069f2  2808              CMP      r0,#8
0069f4  d101              BNE      |L1.27130|
0069f6  8820              LDRH     r0,[r4,#0]  ; hv_vz_stat_cnt
0069f8  b900              CBNZ     r0,|L1.27132|
                  |L1.27130|
;;;10530  		{
;;;10531  		hv_vz_stat_cnt=10;
0069fa  8027              STRH     r7,[r4,#0]
                  |L1.27132|
;;;10532  		}
;;;10533  	hv_vz_stat_cnt--;
0069fc  8820              LDRH     r0,[r4,#0]  ; hv_vz_stat_cnt
0069fe  f1a00001          SUB      r0,r0,#1
006a02  b200              SXTH     r0,r0
006a04  8020              STRH     r0,[r4,#0]
;;;10534  	if((hv_vz_stat_cnt==10)||(hv_vz_stat_cnt==9))
006a06  280a              CMP      r0,#0xa
006a08  d001              BEQ      |L1.27150|
006a0a  2809              CMP      r0,#9
006a0c  d10a              BNE      |L1.27172|
                  |L1.27150|
;;;10535  		{
;;;10536  		show_mess(	"ВЫРАВНИВАЮЩИЙ ЗАРЯД ",
006a0e  4bb3              LDR      r3,|L1.27868|
006a10  f8cd8000          STR      r8,[sp,#0]
006a14  f5a3621a          SUB      r2,r3,#0x9a0
006a18  f1020118          ADD      r1,r2,#0x18
006a1c  f5a160a1          SUB      r0,r1,#0x508
006a20  f7fffffe          BL       show_mess
                  |L1.27172|
;;;10537  					"  БУДЕТ ПРОДОЛЖЕН   ",
;;;10538  					"  ПОСЛЕ ВКЛЮЧЕНИЯ   ",
;;;10539  					"    ТУМБЛЕРА!!!     ",
;;;10540  					5000);
;;;10541  		}
;;;10542  	if(sk_stat[1]==1)
006a24  7870              LDRB     r0,[r6,#1]  ; sk_stat
006a26  2801              CMP      r0,#1
006a28  d106              BNE      |L1.27192|
;;;10543  		{
;;;10544  		hv_vz_stat=hvsWRK;
006a2a  f88a9000          STRB     r9,[r10,#0]
;;;10545  		lc640_write(EE_HV_VZ_STAT,hvsWRK);
006a2e  2105              MOVS     r1,#5
006a30  f44f70b4          MOV      r0,#0x168
006a34  f7fffffe          BL       lc640_write
                  |L1.27192|
;;;10546  		}
;;;10547  	}
;;;10548  if(hv_vz_stat==hvsERR4)		//ВЗ закончился а тумблер включен
006a38  f89a0000          LDRB     r0,[r10,#0]  ; hv_vz_stat
006a3c  2809              CMP      r0,#9
006a3e  d123              BNE      |L1.27272|
;;;10549  	{
;;;10550  	if((hv_vz_stat_old!=hv_vz_stat)||(hv_vz_stat_cnt==0))
006a40  7828              LDRB     r0,[r5,#0]  ; hv_vz_stat_old
006a42  2809              CMP      r0,#9
006a44  d101              BNE      |L1.27210|
006a46  8820              LDRH     r0,[r4,#0]  ; hv_vz_stat_cnt
006a48  b900              CBNZ     r0,|L1.27212|
                  |L1.27210|
;;;10551  		{
;;;10552  		hv_vz_stat_cnt=10;
006a4a  8027              STRH     r7,[r4,#0]
                  |L1.27212|
;;;10553  		}
;;;10554  	hv_vz_stat_cnt--;
006a4c  8820              LDRH     r0,[r4,#0]  ; hv_vz_stat_cnt
006a4e  f1a00001          SUB      r0,r0,#1
006a52  b200              SXTH     r0,r0
006a54  8020              STRH     r0,[r4,#0]
;;;10555  	if((hv_vz_stat_cnt==10)||(hv_vz_stat_cnt==9))
006a56  280a              CMP      r0,#0xa
006a58  d001              BEQ      |L1.27230|
006a5a  2809              CMP      r0,#9
006a5c  d109              BNE      |L1.27250|
                  |L1.27230|
;;;10556  		{
;;;10557  		show_mess(	"     ВЫКЛЮЧИТЕ      ",
006a5e  4b94              LDR      r3,|L1.27824|
006a60  a294              ADR      r2,|L1.27828|
006a62  f5a37194          SUB      r1,r3,#0x128
006a66  f50170ac          ADD      r0,r1,#0x158
006a6a  f8cd8000          STR      r8,[sp,#0]
006a6e  f7fffffe          BL       show_mess
                  |L1.27250|
;;;10558  					"      ТУМБЛЕР       ",
;;;10559  					"   ВЫРАВНИВАЮЩИЙ    ",
;;;10560  					"       ЗАРЯД        ",
;;;10561  					5000);
;;;10562  		}
;;;10563  	if(sk_stat[1]==0)
006a72  7870              LDRB     r0,[r6,#1]  ; sk_stat
006a74  b940              CBNZ     r0,|L1.27272|
;;;10564  		{
;;;10565  		hv_vz_stat=hvsOFF;
006a76  f88ab000          STRB     r11,[r10,#0]
;;;10566  		lc640_write(EE_HV_VZ_STAT,hvsOFF);
006a7a  2100              MOVS     r1,#0
006a7c  f44f70b4          MOV      r0,#0x168
006a80  f7fffffe          BL       lc640_write
;;;10567  		vz_stop();
006a84  f7fffffe          BL       vz_stop
                  |L1.27272|
;;;10568  
;;;10569  		}
;;;10570  	}
;;;10571  hv_vz_stat_old=hv_vz_stat;
006a88  f89a0000          LDRB     r0,[r10,#0]  ; hv_vz_stat
006a8c  7028              STRB     r0,[r5,#0]
;;;10572  /*
;;;10573  if(speedChIsOn)
;;;10574  	{
;;;10575  	speedChTimeCnt++;
;;;10576  	if(speedChTimeCnt>=((signed long)speedChrgTimeInHour*3600L))
;;;10577  		{
;;;10578  		speedChIsOn=0;
;;;10579  		}
;;;10580  	if(speedChrgBlckStat)
;;;10581  		{
;;;10582  		speedChIsOn=0;
;;;10583  		speedChTimeCnt=0;
;;;10584  		}
;;;10585  	}
;;;10586  
;;;10587  
;;;10588  
;;;10589  if(speedChrgAvtEn)
;;;10590  	{
;;;10591  	if(!speedChIsOn)
;;;10592  		{
;;;10593  		if((load_U<u_necc)&&((u_necc-load_U)>speedChrgDU)&&(abs(Ib_ips_termokompensat/10-IZMAX)<5)&&(!speedChrgBlckStat))
;;;10594  			{
;;;10595  			speedChIsOn=1;
;;;10596  			}
;;;10597  		}
;;;10598  	}
;;;10599  
;;;10600  
;;;10601  
;;;10602  if((speedChrgBlckSrc!=1)&&(speedChrgBlckSrc!=2)) speedChrgBlckStat=0;
;;;10603  else
;;;10604  	{
;;;10605  	speedChrgBlckStat=0;
;;;10606  	if(speedChrgBlckSrc==1)
;;;10607  		{
;;;10608  		if(((speedChrgBlckLog==0)&&(adc_buff_[11]>2000)) || ((speedChrgBlckLog==1)&&(adc_buff_[11]<2000))) speedChrgBlckStat=1;
;;;10609  		}
;;;10610  	else if(speedChrgBlckSrc==2)
;;;10611  		{
;;;10612  		if(((speedChrgBlckLog==0)&&(adc_buff_[13]>2000)) || ((speedChrgBlckLog==1)&&(adc_buff_[13]<2000))) speedChrgBlckStat=1;
;;;10613  		}
;;;10614  	}
;;;10615  
;;;10616  
;;;10617  if(speedChrgBlckStat==1)
;;;10618  	{
;;;10619  
;;;10620  	//speedChargeStartStop();
;;;10621  
;;;10622  	speedChrgShowCnt++;
;;;10623  	if(speedChrgShowCnt>=30)	
;;;10624  		{
;;;10625  		speedChrgShowCnt=0;
;;;10626  		show_mess(	"     УСКОРЕННЫЙ     ",
;;;10627  					"       ЗАРЯД        ",
;;;10628  					"     ЗАПРЕЩЕН!!!    ",
;;;10629  					"                    ",
;;;10630  					5000);
;;;10631  		}
;;;10632  	}
;;;10633  else speedChrgShowCnt=0;
;;;10634  
;;;10635  */
;;;10636  }
006a8e  e5d7              B        |L1.26176|
;;;10637  
                          ENDP

                  numOfForvardBps_hndl PROC
;;;10654  //-----------------------------------------------
;;;10655  void	numOfForvardBps_hndl(void)			//Программа смены первого источника для равномерного износа БПСов
006a90  e92d41f0          PUSH     {r4-r8,lr}
;;;10656  {
;;;10657  
;;;10658  numOfForvardBps_old=numOfForvardBps;
006a94  4c92              LDR      r4,|L1.27872|
006a96  7820              LDRB     r0,[r4,#0]  ; numOfForvardBps
006a98  7060              STRB     r0,[r4,#1]
;;;10659  
;;;10660  numOfForvardBps=0;
006a9a  f04f0500          MOV      r5,#0
006a9e  f8045928          STRB     r5,[r4],#-0x28
;;;10661  
;;;10662  //FORVARDBPSCHHOUR=10;
;;;10663  
;;;10664  if((FORVARDBPSCHHOUR<=0)||(FORVARDBPSCHHOUR>500))
006aa2  4e90              LDR      r6,|L1.27876|
006aa4  f9b60000          LDRSH    r0,[r6,#0]  ; FORVARDBPSCHHOUR
006aa8  2800              CMP      r0,#0
006aaa  dd02              BLE      |L1.27314|
006aac  f5b07ffa          CMP      r0,#0x1f4
006ab0  dd02              BLE      |L1.27320|
                  |L1.27314|
;;;10665  	{
;;;10666  	FORVARDBPSCHHOUR=0;
006ab2  8035              STRH     r5,[r6,#0]
                  |L1.27316|
;;;10667  	return;
;;;10668  	}
;;;10669  
;;;10670  numOfForvardBps_minCnt++;
;;;10671  
;;;10672  
;;;10673  if(numOfForvardBps_minCnt>=60)
;;;10674  	{
;;;10675  	numOfForvardBps_minCnt=0;
;;;10676  	numOfForvardBps_hourCnt=lc640_read_int(EE_FORVBPSHOURCNT);
;;;10677  	numOfForvardBps_hourCnt++;
;;;10678  	if(numOfForvardBps_hourCnt>=(FORVARDBPSCHHOUR*NUMIST))
;;;10679  		{
;;;10680  		numOfForvardBps_hourCnt=0;
;;;10681  		}
;;;10682  	lc640_write_int(EE_FORVBPSHOURCNT,numOfForvardBps_hourCnt);
;;;10683  	}
;;;10684  
;;;10685  numOfForvardBps=numOfForvardBps_hourCnt/FORVARDBPSCHHOUR;
;;;10686  
;;;10687  //if(numOfForvardBps)
;;;10688  //numOfForvardBps_old=numOfForvardBps; 
;;;10689  }
006ab4  e8bd81f0          POP      {r4-r8,pc}
                  |L1.27320|
006ab8  f894002a          LDRB     r0,[r4,#0x2a]         ;10670  ; numOfForvardBps_minCnt
006abc  f1000001          ADD      r0,r0,#1              ;10670
006ac0  b2c0              UXTB     r0,r0                 ;10670
006ac2  f884002a          STRB     r0,[r4,#0x2a]         ;10670
006ac6  283c              CMP      r0,#0x3c              ;10673
006ac8  d31b              BCC      |L1.27394|
006aca  f884502a          STRB     r5,[r4,#0x2a]         ;10675
006ace  f44f7794          MOV      r7,#0x128             ;10676
006ad2  4638              MOV      r0,r7                 ;10676
006ad4  f7fffffe          BL       lc640_read_int
006ad8  f1000001          ADD      r0,r0,#1              ;10677
006adc  b200              SXTH     r0,r0                 ;10677
006ade  f8a40078          STRH     r0,[r4,#0x78]         ;10677
006ae2  4a81              LDR      r2,|L1.27880|
006ae4  f9b61000          LDRSH    r1,[r6,#0]            ;10678  ; FORVARDBPSCHHOUR
006ae8  f9b22000          LDRSH    r2,[r2,#0]            ;10678  ; NUMIST
006aec  fb01f102          MUL      r1,r1,r2              ;10678
006af0  4281              CMP      r1,r0                 ;10678
006af2  dc01              BGT      |L1.27384|
006af4  f8a45078          STRH     r5,[r4,#0x78]         ;10680
                  |L1.27384|
006af8  f9b41078          LDRSH    r1,[r4,#0x78]         ;10682  ; numOfForvardBps_hourCnt
006afc  4638              MOV      r0,r7                 ;10682
006afe  f7fffffe          BL       lc640_write_int
                  |L1.27394|
006b02  f9b40078          LDRSH    r0,[r4,#0x78]         ;10685  ; numOfForvardBps_hourCnt
006b06  f9b61000          LDRSH    r1,[r6,#0]            ;10685  ; FORVARDBPSCHHOUR
006b0a  fb90f0f1          SDIV     r0,r0,r1              ;10685
006b0e  f8840028          STRB     r0,[r4,#0x28]         ;10685
006b12  e7cf              B        |L1.27316|
;;;10690  
                          ENDP

                  numOfForvardBps_init PROC
;;;10691  //-----------------------------------------------
;;;10692  void	numOfForvardBps_init(void)			//Программа сброса системы смены первого источника для равномерного износа БПСов
006b14  b510              PUSH     {r4,lr}
;;;10693  {									//Должна вызываться при изменении кол-ва источников в структуре
;;;10694  lc640_write_int(EE_FORVBPSHOURCNT,0);
006b16  2100              MOVS     r1,#0
006b18  f44f7094          MOV      r0,#0x128
006b1c  f7fffffe          BL       lc640_write_int
;;;10695  numOfForvardBps_minCnt=58;
006b20  496f              LDR      r1,|L1.27872|
006b22  f04f003a          MOV      r0,#0x3a
006b26  f1a10128          SUB      r1,r1,#0x28
006b2a  f881002a          STRB     r0,[r1,#0x2a]
;;;10696  }
006b2e  bd10              POP      {r4,pc}
;;;10697  
                          ENDP

                  outVoltContrHndl PROC
;;;10698  //-----------------------------------------------
;;;10699  void outVoltContrHndl(void)
006b30  b570              PUSH     {r4-r6,lr}
;;;10700  { 
;;;10701  if((load_U>U_OUT_KONTR_MAX)||(load_U<U_OUT_KONTR_MIN))
006b32  4c6e              LDR      r4,|L1.27884|
006b34  486e              LDR      r0,|L1.27888|
;;;10702  	{
;;;10703  	outVoltContrHndlCnt_=0;
;;;10704  	if(outVoltContrHndlCnt<U_OUT_KONTR_DELAY)
006b36  4a6f              LDR      r2,|L1.27892|
006b38  f9b41000          LDRSH    r1,[r4,#0]            ;10701  ; load_U
006b3c  f9b06000          LDRSH    r6,[r0,#0]            ;10701  ; U_OUT_KONTR_MAX
006b40  2500              MOVS     r5,#0                 ;10703
006b42  f9b20000          LDRSH    r0,[r2,#0]
006b46  4b6c              LDR      r3,|L1.27896|
006b48  42b1              CMP      r1,r6                 ;10701
006b4a  dc04              BGT      |L1.27478|
006b4c  4e6b              LDR      r6,|L1.27900|
006b4e  f9b66000          LDRSH    r6,[r6,#0]            ;10701  ; U_OUT_KONTR_MIN
006b52  42b1              CMP      r1,r6                 ;10701
006b54  da0f              BGE      |L1.27510|
                  |L1.27478|
006b56  801d              STRH     r5,[r3,#0]            ;10703
006b58  4969              LDR      r1,|L1.27904|
006b5a  f9b11000          LDRSH    r1,[r1,#0]  ; U_OUT_KONTR_DELAY
006b5e  4288              CMP      r0,r1
006b60  da1b              BGE      |L1.27546|
;;;10705  		{
;;;10706  		outVoltContrHndlCnt++;
006b62  f1000001          ADD      r0,r0,#1
006b66  b200              SXTH     r0,r0
006b68  8010              STRH     r0,[r2,#0]
;;;10707  		if(outVoltContrHndlCnt==U_OUT_KONTR_DELAY)
006b6a  4288              CMP      r0,r1
006b6c  d115              BNE      |L1.27546|
;;;10708  			{
;;;10709  			avar_uout_hndl(1);
006b6e  2001              MOVS     r0,#1
006b70  f7fffffe          BL       avar_uout_hndl
006b74  e011              B        |L1.27546|
                  |L1.27510|
;;;10710  			}
;;;10711  		}
;;;10712  	}
;;;10713  else
;;;10714  	{
;;;10715  	if(outVoltContrHndlCnt)
006b76  b180              CBZ      r0,|L1.27546|
;;;10716  		{
;;;10717  		if(outVoltContrHndlCnt_<5)
006b78  f9b30000          LDRSH    r0,[r3,#0]  ; outVoltContrHndlCnt_
006b7c  2805              CMP      r0,#5
006b7e  da0c              BGE      |L1.27546|
;;;10718  			{
;;;10719  			outVoltContrHndlCnt_++;
006b80  f1000001          ADD      r0,r0,#1
006b84  b200              SXTH     r0,r0
006b86  8018              STRH     r0,[r3,#0]
;;;10720  			if(outVoltContrHndlCnt_>=5)
006b88  2805              CMP      r0,#5
006b8a  db06              BLT      |L1.27546|
;;;10721  				{
;;;10722  				outVoltContrHndlCnt=0;
006b8c  8015              STRH     r5,[r2,#0]
;;;10723  				if(uout_av)avar_uout_hndl(0);
006b8e  485d              LDR      r0,|L1.27908|
006b90  7800              LDRB     r0,[r0,#0]  ; uout_av
006b92  b110              CBZ      r0,|L1.27546|
006b94  2000              MOVS     r0,#0
006b96  f7fffffe          BL       avar_uout_hndl
                  |L1.27546|
;;;10724  				}
;;;10725  			}
;;;10726  		}
;;;10727  	}
;;;10728  
;;;10729  if (load_U<(USIGN*10)) 
006b9a  485b              LDR      r0,|L1.27912|
006b9c  f9b41000          LDRSH    r1,[r4,#0]  ; load_U
006ba0  f9b00000          LDRSH    r0,[r0,#0]  ; USIGN
006ba4  eb000080          ADD      r0,r0,r0,LSL #2
006ba8  ebb10f40          CMP      r1,r0,LSL #1
006bac  da0b              BGE      |L1.27590|
;;;10730  	{
;;;10731  	if(!bSILENT)
006bae  4857              LDR      r0,|L1.27916|
006bb0  6800              LDR      r0,[r0,#0]  ; bSILENT
006bb2  2800              CMP      r0,#0
006bb4  d107              BNE      |L1.27590|
;;;10732  		{
;;;10733  		mess_send(MESS2RELE_HNDL,PARAM_RELE_BAT_IS_DISCHARGED,1,20);
006bb6  e8bd4070          POP      {r4-r6,lr}
006bba  2314              MOVS     r3,#0x14
006bbc  2201              MOVS     r2,#1
006bbe  2172              MOVS     r1,#0x72
006bc0  20d2              MOVS     r0,#0xd2
006bc2  f7ffbffe          B.W      mess_send
                  |L1.27590|
;;;10734  		}
;;;10735  
;;;10736  	//bU_BAT2REL_AV_BAT=1;
;;;10737  	}
;;;10738  
;;;10739  
;;;10740  }
006bc6  bd70              POP      {r4-r6,pc}
;;;10741  
                          ENDP

                  vent_resurs_hndl PROC
;;;10742  //-----------------------------------------------
;;;10743  void vent_resurs_hndl(void)
006bc8  e92d47f0          PUSH     {r4-r10,lr}
;;;10744  {
;;;10745  char i;
;;;10746  char crc_in,crc_eval;
;;;10747  
;;;10748  for(i=0;i<NUMIST;i++)
006bcc  f04f0200          MOV      r2,#0
;;;10749  	{
;;;10750  	if((bps[i]._buff[7]&0xc0)==0x00)
;;;10751  		{
;;;10752  		bps[i]._vent_resurs_temp[0]=bps[i]._buff[7];
;;;10753  		}
;;;10754  	else if((bps[i]._buff[7]&0xc0)==0x40)
;;;10755  		{
;;;10756  		bps[i]._vent_resurs_temp[1]=bps[i]._buff[7];
;;;10757  		}
;;;10758  	else if((bps[i]._buff[7]&0xc0)==0x80)
;;;10759  		{
;;;10760  		bps[i]._vent_resurs_temp[2]=bps[i]._buff[7];
;;;10761  		}
;;;10762  	else if((bps[i]._buff[7]&0xc0)==0xc0)
;;;10763  		{
;;;10764  		bps[i]._vent_resurs_temp[3]=bps[i]._buff[7];
;;;10765  		}
;;;10766  	crc_in=0;
;;;10767  	crc_in|=(bps[i]._vent_resurs_temp[0]&0x30)>>4;
;;;10768  	crc_in|=(bps[i]._vent_resurs_temp[1]&0x30)>>2;
;;;10769  	crc_in|=(bps[i]._vent_resurs_temp[2]&0x30);
;;;10770  	crc_in|=(bps[i]._vent_resurs_temp[3]&0x30)<<2;
;;;10771  
;;;10772  	crc_eval =bps[i]._vent_resurs_temp[0]&0x0f;
;;;10773  	crc_eval^=bps[i]._vent_resurs_temp[1]&0x0f;
;;;10774  	crc_eval^=bps[i]._vent_resurs_temp[2]&0x0f;
;;;10775  	crc_eval^=bps[i]._vent_resurs_temp[3]&0x0f;
;;;10776  
;;;10777  	if(crc_eval==crc_in)
;;;10778  		{
;;;10779  		unsigned short temp_US;
;;;10780  		temp_US=0;
;;;10781  
;;;10782  		temp_US|=(bps[i]._vent_resurs_temp[3]&0x0f);
;;;10783  		temp_US<<=4;
;;;10784  		temp_US|=(bps[i]._vent_resurs_temp[2]&0x0f);
;;;10785  		temp_US<<=4;
;;;10786  		temp_US|=(bps[i]._vent_resurs_temp[1]&0x0f);
;;;10787  		temp_US<<=4;
;;;10788  		temp_US|=(bps[i]._vent_resurs_temp[0]&0x0f);
;;;10789  
;;;10790  		if(bps[i]._vent_resurs!=temp_US)bps[i]._vent_resurs=temp_US;
;;;10791  		}
;;;10792  
;;;10793  	if((bps[i]._vent_resurs>TVENTMAX*10)&&(TVENTMAX>0))
006bd0  484f              LDR      r0,|L1.27920|
006bd2  f8dfc140          LDR      r12,|L1.27924|
006bd6  f9b06000          LDRSH    r6,[r0,#0]
006bda  4843              LDR      r0,|L1.27880|
006bdc  f9b07000          LDRSH    r7,[r0,#0]            ;10748
006be0  e0a3              B        |L1.27946|
                  |L1.27618|
006be2  ebc200c2          RSB      r0,r2,r2,LSL #3       ;10750
006be6  eb001002          ADD      r0,r0,r2,LSL #4       ;10750
006bea  eb0c0080          ADD      r0,r12,r0,LSL #2      ;10750
006bee  7b41              LDRB     r1,[r0,#0xd]          ;10750
006bf0  098b              LSRS     r3,r1,#6              ;10750
006bf2  d006              BEQ      |L1.27650|
006bf4  2301              MOVS     r3,#1                 ;10754
006bf6  ebb31f91          CMP      r3,r1,LSR #6          ;10754
006bfa  d105              BNE      |L1.27656|
006bfc  f8801055          STRB     r1,[r0,#0x55]         ;10756
006c00  e00f              B        |L1.27682|
                  |L1.27650|
006c02  f8801054          STRB     r1,[r0,#0x54]         ;10752
006c06  e00c              B        |L1.27682|
                  |L1.27656|
006c08  2302              MOVS     r3,#2                 ;10758
006c0a  ebb31f91          CMP      r3,r1,LSR #6          ;10758
006c0e  d102              BNE      |L1.27670|
006c10  f8801056          STRB     r1,[r0,#0x56]         ;10760
006c14  e005              B        |L1.27682|
                  |L1.27670|
006c16  2303              MOVS     r3,#3                 ;10762
006c18  ebb31f91          CMP      r3,r1,LSR #6          ;10762
006c1c  d101              BNE      |L1.27682|
006c1e  f8801057          STRB     r1,[r0,#0x57]         ;10764
                  |L1.27682|
006c22  f8101f54          LDRB     r1,[r0,#0x54]!        ;10767
006c26  f3c11401          UBFX     r4,r1,#4,#2           ;10767
006c2a  7843              LDRB     r3,[r0,#1]            ;10768
006c2c  f0030530          AND      r5,r3,#0x30           ;10768
006c30  ea440495          ORR      r4,r4,r5,LSR #2       ;10768
006c34  f8909002          LDRB     r9,[r0,#2]            ;10769
006c38  f0090830          AND      r8,r9,#0x30           ;10769
006c3c  ea480804          ORR      r8,r8,r4              ;10769
006c40  78c5              LDRB     r5,[r0,#3]            ;10770
006c42  f1a00054          SUB      r0,r0,#0x54           ;10770
006c46  f0050430          AND      r4,r5,#0x30           ;10770
006c4a  ea480884          ORR      r8,r8,r4,LSL #2       ;10770
006c4e  f001010f          AND      r1,r1,#0xf            ;10772
006c52  f003040f          AND      r4,r3,#0xf            ;10773
006c56  ea840a01          EOR      r10,r4,r1             ;10773
006c5a  f009030f          AND      r3,r9,#0xf            ;10774
006c5e  ea83090a          EOR      r9,r3,r10             ;10774
006c62  f005050f          AND      r5,r5,#0xf            ;10775
006c66  ea850909          EOR      r9,r5,r9              ;10775
006c6a  45c1              CMP      r9,r8                 ;10777
006c6c  d113              BNE      |L1.27798|
006c6e  ea4f1505          LSL      r5,r5,#4              ;10783
006c72  ea430305          ORR      r3,r3,r5              ;10784
006c76  ea4f1303          LSL      r3,r3,#4              ;10785
006c7a  ea440403          ORR      r4,r4,r3              ;10786
006c7e  ea4f5304          LSL      r3,r4,#20             ;10787
006c82  ea4f4313          LSR      r3,r3,#16             ;10787
006c86  ea410103          ORR      r1,r1,r3              ;10788
006c8a  f8b03058          LDRH     r3,[r0,#0x58]         ;10790
006c8e  428b              CMP      r3,r1                 ;10790
006c90  d001              BEQ      |L1.27798|
006c92  f8a01058          STRH     r1,[r0,#0x58]         ;10790
                  |L1.27798|
006c96  f8b01058          LDRH     r1,[r0,#0x58]
006c9a  eb060386          ADD      r3,r6,r6,LSL #2
006c9e  ebb10f43          CMP      r1,r3,LSL #1
006ca2  dd3b              BLE      |L1.27932|
006ca4  2e00              CMP      r6,#0
006ca6  dd39              BLE      |L1.27932|
;;;10794  		{
;;;10795  		bps[i]._av|=(1<<4);
006ca8  7841              LDRB     r1,[r0,#1]
006caa  f0410110          ORR      r1,r1,#0x10
006cae  e033              B        |L1.27928|
                  |L1.27824|
                          DCD      ||.text||+0x1a0c
                  |L1.27828|
006cb4  202020c2          DCB      "   ",194,219,208,192,194,205,200,194,192,222,217,200,201
006cb8  dbd0c0c2
006cbc  cdc8c2c0
006cc0  ded9c8c9
006cc4  20202020          DCB      "    ",0
006cc8  00      
006cc9  00                DCB      0
006cca  00                DCB      0
006ccb  00                DCB      0
                  |L1.27852|
                          DCD      hv_vz_wrk_cnt
                  |L1.27856|
                          DCD      hv_vz_up_cnt
                  |L1.27860|
                          DCD      VZ_HR
                  |L1.27864|
                          DCD      ||.text||+0x145c
                  |L1.27868|
                          DCD      ||.text||+0x2334
                  |L1.27872|
                          DCD      ||area_number.25||+0x28
                  |L1.27876|
                          DCD      FORVARDBPSCHHOUR
                  |L1.27880|
                          DCD      NUMIST
                  |L1.27884|
                          DCD      load_U
                  |L1.27888|
                          DCD      U_OUT_KONTR_MAX
                  |L1.27892|
                          DCD      outVoltContrHndlCnt
                  |L1.27896|
                          DCD      outVoltContrHndlCnt_
                  |L1.27900|
                          DCD      U_OUT_KONTR_MIN
                  |L1.27904|
                          DCD      U_OUT_KONTR_DELAY
                  |L1.27908|
                          DCD      uout_av
                  |L1.27912|
                          DCD      USIGN
                  |L1.27916|
                          DCD      bSILENT
                  |L1.27920|
                          DCD      TVENTMAX
                  |L1.27924|
                          DCD      bps
                  |L1.27928|
006d18  7041              STRB     r1,[r0,#1]
006d1a  e003              B        |L1.27940|
                  |L1.27932|
;;;10796  		}
;;;10797  	else bps[i]._av&=~(1<<4);
006d1c  7841              LDRB     r1,[r0,#1]
006d1e  f0210110          BIC      r1,r1,#0x10
006d22  7041              STRB     r1,[r0,#1]
                  |L1.27940|
006d24  f1020201          ADD      r2,r2,#1              ;10748
006d28  b2d2              UXTB     r2,r2                 ;10748
                  |L1.27946|
006d2a  42ba              CMP      r2,r7                 ;10748
006d2c  f6ffaf59          BLT      |L1.27618|
;;;10798  	}
;;;10799  }
006d30  e8bd87f0          POP      {r4-r10,pc}
;;;10800  
                          ENDP

                  vent_hndl PROC
;;;10801  //-----------------------------------------------
;;;10802  void vent_hndl(void)
006d34  e92d4ff0          PUSH     {r4-r11,lr}
;;;10803  {
006d38  b087              SUB      sp,sp,#0x1c
;;;10804  if(RELEVENTSIGN==rvsAKB)
006d3a  48ab              LDR      r0,|L1.28648|
;;;10805  	{
;;;10806  	if(vent_stat==0)
006d3c  4cab              LDR      r4,|L1.28652|
;;;10807  		{
;;;10808  		if	(
;;;10809  			(BAT_IS_ON[0]==bisON)&&((bat[0]._Tb>TVENTON)||(bat[0]._nd))
006d3e  49ac              LDR      r1,|L1.28656|
;;;10810  			||
;;;10811  			(BAT_IS_ON[1]==bisON)&&((bat[1]._Tb>TVENTON)||(bat[1]._nd))
;;;10812  			)
;;;10813  			{
;;;10814  			vent_stat=1;
;;;10815  			}
;;;10816  		}
;;;10817  	else if(vent_stat==1)
;;;10818  		{
;;;10819  		if	(
;;;10820  			((BAT_IS_ON[0]!=bisON)||((BAT_IS_ON[0]==bisON)&&(bat[0]._Tb<TVENTOFF)&&(!bat[0]._nd)))
006d40  4aac              LDR      r2,|L1.28660|
006d42  7800              LDRB     r0,[r0,#0]            ;10804  ; RELEVENTSIGN
006d44  f9943000          LDRSB    r3,[r4,#0]            ;10806
006d48  f9b11000          LDRSH    r1,[r1,#0]            ;10809
006d4c  f9b22000          LDRSH    r2,[r2,#0]
006d50  b148              CBZ      r0,|L1.28006|
;;;10821  			&&
;;;10822  			((BAT_IS_ON[1]!=bisON)||((BAT_IS_ON[1]==bisON)&&(bat[1]._Tb<TVENTOFF)&&(!bat[1]._nd)))
;;;10823  			)
;;;10824  			{
;;;10825  			vent_stat=0;
;;;10826  			}
;;;10827  		}
;;;10828  	}
;;;10829  else if(RELEVENTSIGN==rvsBPS)
006d52  2802              CMP      r0,#2
006d54  d03c              BEQ      |L1.28112|
;;;10830  	{
;;;10831  /*	if	(
;;;10832  		(((bps[0]._flags_tm&0x06)||(bps[0]._cnt>=30)))||
;;;10833  		(((bps[1]._flags_tm&0x06)||(bps[1]._cnt>=30))&&(NUMIST>1))||
;;;10834  		(((bps[2]._flags_tm&0x06)||(bps[2]._cnt>=30))&&(NUMIST>2))||
;;;10835  		(((bps[3]._flags_tm&0x06)||(bps[3]._cnt>=30))&&(NUMIST>3))||
;;;10836  		(((bps[4]._flags_tm&0x06)||(bps[4]._cnt>=30))&&(NUMIST>4))||
;;;10837  		(((bps[5]._flags_tm&0x06)||(bps[5]._cnt>=30))&&(NUMIST>5))||
;;;10838  		(((bps[6]._flags_tm&0x06)||(bps[6]._cnt>=30))&&(NUMIST>6))
;;;10839  		)
;;;10840  		{
;;;10841  		vent_stat=1;
;;;10842  		}
;;;10843  	else vent_stat=0;
;;;10844  	*/
;;;10845  
;;;10846  	if	(
;;;10847  		((NUMIST)&&((bps[0]._Ti>TVENTON)||(bps[0]._cnt>=30)))
;;;10848  		||
;;;10849  		((NUMIST>1)&&((bps[1]._Ti>TVENTON)||(bps[1]._cnt>=30)))
;;;10850  		||
;;;10851  		((NUMIST>2)&&((bps[2]._Ti>TVENTON)||(bps[2]._cnt>=30)))
;;;10852  		||
;;;10853  		((NUMIST>3)&&((bps[3]._Ti>TVENTON)||(bps[3]._cnt>=30)))
;;;10854  		||
;;;10855  		((NUMIST>4)&&((bps[4]._Ti>TVENTON)||(bps[4]._cnt>=30)))
;;;10856  		||
;;;10857  		((NUMIST>5)&&((bps[5]._Ti>TVENTON)||(bps[5]._cnt>=30)))
;;;10858  		||
;;;10859  		((NUMIST>6)&&((bps[6]._Ti>TVENTON)||(bps[6]._cnt>=30)))
;;;10860  		||
;;;10861  		((NUMIST>7)&&((bps[7]._Ti>TVENTON)||(bps[7]._cnt>=30)))
;;;10862  		)
;;;10863  		{
;;;10864  		vent_stat=1;
;;;10865  		}
;;;10866  	else if(vent_stat==1)
;;;10867  		{
;;;10868  		if	(
;;;10869  			((!NUMIST)||((NUMIST)&&(bps[0]._Ti<TVENTOFF)&&(bps[0]._cnt<10)))
;;;10870  			&&
;;;10871  			((NUMIST<2)||((NUMIST>=2)&&(bps[1]._Ti<TVENTOFF)&&(bps[1]._cnt<10)))
;;;10872  			&&
;;;10873  			((NUMIST<3)||((NUMIST>=3)&&(bps[2]._Ti<TVENTOFF)&&(bps[2]._cnt<10)))
;;;10874  			&&
;;;10875  			((NUMIST<4)||((NUMIST>=4)&&(bps[3]._Ti<TVENTOFF)&&(bps[3]._cnt<10)))
;;;10876  			&&
;;;10877  			((NUMIST<5)||((NUMIST>=5)&&(bps[4]._Ti<TVENTOFF)&&(bps[4]._cnt<10)))
;;;10878  			&&
;;;10879  			((NUMIST<6)||((NUMIST>=6)&&(bps[5]._Ti<TVENTOFF)&&(bps[5]._cnt<10)))
;;;10880  			&&
;;;10881  			((NUMIST<7)||((NUMIST>=7)&&(bps[6]._Ti<TVENTOFF)&&(bps[6]._cnt<10)))
;;;10882  			&&
;;;10883  			((NUMIST<8)||((NUMIST>=8)&&(bps[7]._Ti<TVENTOFF)&&(bps[7]._cnt<10)))
;;;10884  			)
;;;10885  			{
;;;10886  			vent_stat=0;
;;;10887  			}
;;;10888  		}
;;;10889  	}
;;;10890  else if(RELEVENTSIGN==rvsEXT)
006d56  2801              CMP      r0,#1
006d58  d07e              BEQ      |L1.28248|
;;;10891  	{
;;;10892  	if	(
;;;10893  		((NUMDT)&&((t_ext[0]>TVENTON)||(ND_EXT[0])))
;;;10894  		||
;;;10895  		((NUMDT>1)&&((t_ext[1]>TVENTON)||(ND_EXT[1])))
;;;10896  		||
;;;10897  		((NUMDT>2)&&((t_ext[2]>TVENTON)||(ND_EXT[2])))
;;;10898  		)
;;;10899  		{
;;;10900  		vent_stat=1;
;;;10901  		}
;;;10902  	else if(vent_stat==1)
;;;10903  		{
;;;10904  		if	(
;;;10905  			((!NUMDT)||((NUMDT)&&(t_ext[0]<TVENTOFF)&&(!ND_EXT[0])))
;;;10906  			&&
;;;10907  			((NUMDT<2)||((NUMDT>=2)&&(t_ext[1]<TVENTOFF)&&(!ND_EXT[1])))
;;;10908  			&&
;;;10909  			((NUMDT<3)||((NUMDT>=3)&&(t_ext[2]<TVENTOFF)&&(!ND_EXT[2])))
;;;10910  			)
;;;10911  			{
;;;10912  			vent_stat=0;
;;;10913  			}
;;;10914  		}
;;;10915  	}
;;;10916  else vent_stat=1;
006d5a  f04f0001          MOV      r0,#1
006d5e  7020              STRB     r0,[r4,#0]
                  |L1.28000|
;;;10917  }
006d60  b007              ADD      sp,sp,#0x1c
006d62  e8bd8ff0          POP      {r4-r11,pc}
                  |L1.28006|
006d66  4fa4              LDR      r7,|L1.28664|
006d68  f8df8290          LDR      r8,|L1.28668|
006d6c  f9b7000a          LDRSH    r0,[r7,#0xa]          ;10809
006d70  7b3d              LDRB     r5,[r7,#0xc]          ;10809
006d72  f9b76056          LDRSH    r6,[r7,#0x56]         ;10811
006d76  f898c000          LDRB     r12,[r8,#0]           ;10808
006d7a  f8977058          LDRB     r7,[r7,#0x58]         ;10811
006d7e  f8988001          LDRB     r8,[r8,#1]            ;10811
006d82  b12b              CBZ      r3,|L1.28048|
006d84  2b01              CMP      r3,#1                 ;10817
006d86  d1eb              BNE      |L1.28000|
006d88  f1bc0f55          CMP      r12,#0x55             ;10819
006d8c  d115              BNE      |L1.28090|
006d8e  e010              B        |L1.28082|
                  |L1.28048|
006d90  f1bc0f55          CMP      r12,#0x55             ;10808
006d94  d102              BNE      |L1.28060|
006d96  4288              CMP      r0,r1                 ;10809
006d98  dc07              BGT      |L1.28074|
006d9a  b935              CBNZ     r5,|L1.28074|
                  |L1.28060|
006d9c  f1b80f55          CMP      r8,#0x55              ;10811
006da0  d1de              BNE      |L1.28000|
006da2  428e              CMP      r6,r1                 ;10811
006da4  dc01              BGT      |L1.28074|
006da6  2f00              CMP      r7,#0                 ;10811
006da8  d0da              BEQ      |L1.28000|
                  |L1.28074|
006daa  f04f0001          MOV      r0,#1                 ;10814
006dae  7020              STRB     r0,[r4,#0]            ;10814
006db0  e7d6              B        |L1.28000|
                  |L1.28082|
006db2  4290              CMP      r0,r2                 ;10820
006db4  dad4              BGE      |L1.28000|
006db6  2d00              CMP      r5,#0                 ;10820
006db8  d1d2              BNE      |L1.28000|
                  |L1.28090|
006dba  f1b80f55          CMP      r8,#0x55              ;10822
006dbe  d103              BNE      |L1.28104|
006dc0  4296              CMP      r6,r2                 ;10822
006dc2  dacd              BGE      |L1.28000|
006dc4  2f00              CMP      r7,#0                 ;10822
006dc6  d1cb              BNE      |L1.28000|
                  |L1.28104|
006dc8  f04f0000          MOV      r0,#0                 ;10825
006dcc  7020              STRB     r0,[r4,#0]            ;10825
006dce  e7c7              B        |L1.28000|
                  |L1.28112|
006dd0  4e8c              LDR      r6,|L1.28676|
006dd2  488b              LDR      r0,|L1.28672|
006dd4  6ab5              LDR      r5,[r6,#0x28]         ;10847
006dd6  f9b00000          LDRSH    r0,[r0,#0]            ;10846  ; NUMIST
006dda  78f6              LDRB     r6,[r6,#3]            ;10847
006ddc  b118              CBZ      r0,|L1.28134|
006dde  428d              CMP      r5,r1                 ;10847
006de0  dc7a              BGT      |L1.28376|
006de2  2e1e              CMP      r6,#0x1e              ;10847
006de4  d278              BCS      |L1.28376|
                  |L1.28134|
006de6  f8dfc21c          LDR      r12,|L1.28676|
006dea  2801              CMP      r0,#1                 ;10849
006dec  f8dc7084          LDR      r7,[r12,#0x84]        ;10849
006df0  f89cc05f          LDRB     r12,[r12,#0x5f]       ;10849
006df4  f8cdc018          STR      r12,[sp,#0x18]        ;10849
006df8  dd06              BLE      |L1.28168|
006dfa  428f              CMP      r7,r1                 ;10849
006dfc  dc6c              BGT      |L1.28376|
006dfe  f8ddc018          LDR      r12,[sp,#0x18]        ;10849
006e02  f1bc0f1e          CMP      r12,#0x1e             ;10849
006e06  d267              BCS      |L1.28376|
                  |L1.28168|
006e08  f8dfc1f8          LDR      r12,|L1.28676|
006e0c  2802              CMP      r0,#2                 ;10851
006e0e  f8dc80e0          LDR      r8,[r12,#0xe0]        ;10851
006e12  f8cd8014          STR      r8,[sp,#0x14]         ;10851
006e16  f89cc0bb          LDRB     r12,[r12,#0xbb]       ;10851
006e1a  f8cdc010          STR      r12,[sp,#0x10]        ;10851
006e1e  dd08              BLE      |L1.28210|
006e20  f8ddc014          LDR      r12,[sp,#0x14]        ;10851
006e24  458c              CMP      r12,r1                ;10851
006e26  dc57              BGT      |L1.28376|
006e28  f8ddc010          LDR      r12,[sp,#0x10]        ;10851
006e2c  f1bc0f1e          CMP      r12,#0x1e             ;10851
006e30  d252              BCS      |L1.28376|
                  |L1.28210|
006e32  f8dfc1d0          LDR      r12,|L1.28676|
006e36  2803              CMP      r0,#3                 ;10853
006e38  f8dc813c          LDR      r8,[r12,#0x13c]       ;10853
006e3c  f8cd800c          STR      r8,[sp,#0xc]          ;10853
006e40  f89cc117          LDRB     r12,[r12,#0x117]      ;10853
006e44  f8cdc008          STR      r12,[sp,#8]           ;10853
006e48  dd0a              BLE      |L1.28256|
006e4a  f8ddc00c          LDR      r12,[sp,#0xc]         ;10853
006e4e  458c              CMP      r12,r1                ;10853
006e50  dc42              BGT      |L1.28376|
006e52  f8ddc008          LDR      r12,[sp,#8]           ;10853
006e56  e000              B        |L1.28250|
                  |L1.28248|
006e58  e080              B        |L1.28508|
                  |L1.28250|
006e5a  f1bc0f1e          CMP      r12,#0x1e             ;10853
006e5e  d23b              BCS      |L1.28376|
                  |L1.28256|
006e60  f8df81a0          LDR      r8,|L1.28676|
006e64  2804              CMP      r0,#4                 ;10855
006e66  f8d8c198          LDR      r12,[r8,#0x198]       ;10855
006e6a  f8988173          LDRB     r8,[r8,#0x173]        ;10855
006e6e  f8cd8004          STR      r8,[sp,#4]            ;10855
006e72  dd06              BLE      |L1.28290|
006e74  458c              CMP      r12,r1                ;10855
006e76  dc2f              BGT      |L1.28376|
006e78  f8dd8004          LDR      r8,[sp,#4]            ;10855
006e7c  f1b80f1e          CMP      r8,#0x1e              ;10855
006e80  d22a              BCS      |L1.28376|
                  |L1.28290|
006e82  f8df9180          LDR      r9,|L1.28676|
006e86  2805              CMP      r0,#5                 ;10857
006e88  f8d981f4          LDR      r8,[r9,#0x1f4]        ;10857
006e8c  f89991cf          LDRB     r9,[r9,#0x1cf]        ;10857
006e90  f8cd9000          STR      r9,[sp,#0]            ;10857
006e94  dd06              BLE      |L1.28324|
006e96  4588              CMP      r8,r1                 ;10857
006e98  dc1e              BGT      |L1.28376|
006e9a  f8dd9000          LDR      r9,[sp,#0]            ;10857
006e9e  f1b90f1e          CMP      r9,#0x1e              ;10857
006ea2  d219              BCS      |L1.28376|
                  |L1.28324|
006ea4  f8dfa15c          LDR      r10,|L1.28676|
006ea8  2806              CMP      r0,#6                 ;10859
006eaa  f89ae22b          LDRB     lr,[r10,#0x22b]       ;10859
006eae  f8da9250          LDR      r9,[r10,#0x250]       ;10859
006eb2  dd04              BLE      |L1.28350|
006eb4  4589              CMP      r9,r1                 ;10859
006eb6  dc0f              BGT      |L1.28376|
006eb8  f1be0f1e          CMP      lr,#0x1e              ;10859
006ebc  d20c              BCS      |L1.28376|
                  |L1.28350|
006ebe  f8dfb144          LDR      r11,|L1.28676|
006ec2  2807              CMP      r0,#7                 ;10861
006ec4  f8dba2ac          LDR      r10,[r11,#0x2ac]      ;10861
006ec8  f89bb287          LDRB     r11,[r11,#0x287]      ;10861
006ecc  dd08              BLE      |L1.28384|
006ece  458a              CMP      r10,r1                ;10861
006ed0  dc02              BGT      |L1.28376|
006ed2  f1bb0f1e          CMP      r11,#0x1e             ;10861
006ed6  d303              BCC      |L1.28384|
                  |L1.28376|
006ed8  f04f0001          MOV      r0,#1                 ;10864
006edc  7020              STRB     r0,[r4,#0]            ;10864
                  |L1.28382|
006ede  e73f              B        |L1.28000|
                  |L1.28384|
006ee0  2b01              CMP      r3,#1                 ;10866
006ee2  d1fc              BNE      |L1.28382|
006ee4  b118              CBZ      r0,|L1.28398|
006ee6  4295              CMP      r5,r2                 ;10869
006ee8  daf9              BGE      |L1.28382|
006eea  2e0a              CMP      r6,#0xa               ;10869
006eec  d2f7              BCS      |L1.28382|
                  |L1.28398|
006eee  2802              CMP      r0,#2                 ;10871
006ef0  db04              BLT      |L1.28412|
006ef2  4297              CMP      r7,r2                 ;10871
006ef4  daf3              BGE      |L1.28382|
006ef6  9906              LDR      r1,[sp,#0x18]         ;10871
006ef8  290a              CMP      r1,#0xa               ;10871
006efa  d2f0              BCS      |L1.28382|
                  |L1.28412|
006efc  2803              CMP      r0,#3                 ;10873
006efe  db05              BLT      |L1.28428|
006f00  9905              LDR      r1,[sp,#0x14]         ;10873
006f02  4291              CMP      r1,r2                 ;10873
006f04  daeb              BGE      |L1.28382|
006f06  9904              LDR      r1,[sp,#0x10]         ;10873
006f08  290a              CMP      r1,#0xa               ;10873
006f0a  d2e8              BCS      |L1.28382|
                  |L1.28428|
006f0c  2804              CMP      r0,#4                 ;10875
006f0e  db05              BLT      |L1.28444|
006f10  9903              LDR      r1,[sp,#0xc]          ;10875
006f12  4291              CMP      r1,r2                 ;10875
006f14  dae3              BGE      |L1.28382|
006f16  9902              LDR      r1,[sp,#8]            ;10875
006f18  290a              CMP      r1,#0xa               ;10875
006f1a  d2e0              BCS      |L1.28382|
                  |L1.28444|
006f1c  2805              CMP      r0,#5                 ;10877
006f1e  db04              BLT      |L1.28458|
006f20  4594              CMP      r12,r2                ;10877
006f22  dadc              BGE      |L1.28382|
006f24  9901              LDR      r1,[sp,#4]            ;10877
006f26  290a              CMP      r1,#0xa               ;10877
006f28  d2d9              BCS      |L1.28382|
                  |L1.28458|
006f2a  2806              CMP      r0,#6                 ;10879
006f2c  db04              BLT      |L1.28472|
006f2e  4590              CMP      r8,r2                 ;10879
006f30  dad5              BGE      |L1.28382|
006f32  9900              LDR      r1,[sp,#0]            ;10879
006f34  290a              CMP      r1,#0xa               ;10879
006f36  d2d2              BCS      |L1.28382|
                  |L1.28472|
006f38  2807              CMP      r0,#7                 ;10881
006f3a  db04              BLT      |L1.28486|
006f3c  4591              CMP      r9,r2                 ;10881
006f3e  dace              BGE      |L1.28382|
006f40  f1be0f0a          CMP      lr,#0xa               ;10881
006f44  d2cb              BCS      |L1.28382|
                  |L1.28486|
006f46  2808              CMP      r0,#8                 ;10883
006f48  db04              BLT      |L1.28500|
006f4a  4592              CMP      r10,r2                ;10883
006f4c  dac7              BGE      |L1.28382|
006f4e  f1bb0f0a          CMP      r11,#0xa              ;10883
006f52  d2c4              BCS      |L1.28382|
                  |L1.28500|
006f54  f04f0000          MOV      r0,#0                 ;10886
006f58  7020              STRB     r0,[r4,#0]            ;10886
                  |L1.28506|
006f5a  e701              B        |L1.28000|
                  |L1.28508|
006f5c  482a              LDR      r0,|L1.28680|
006f5e  4d2b              LDR      r5,|L1.28684|
006f60  4e2b              LDR      r6,|L1.28688|
006f62  f9b00000          LDRSH    r0,[r0,#0]            ;10892  ; NUMDT
006f66  f9b55000          LDRSH    r5,[r5,#0]            ;10893
006f6a  7836              LDRB     r6,[r6,#0]            ;10893
006f6c  b110              CBZ      r0,|L1.28532|
006f6e  428d              CMP      r5,r1                 ;10893
006f70  dc1d              BGT      |L1.28590|
006f72  b9e6              CBNZ     r6,|L1.28590|
                  |L1.28532|
006f74  4f25              LDR      r7,|L1.28684|
006f76  f8dfc098          LDR      r12,|L1.28688|
006f7a  2801              CMP      r0,#1                 ;10895
006f7c  f9b77002          LDRSH    r7,[r7,#2]            ;10895
006f80  f89cc001          LDRB     r12,[r12,#1]          ;10895
006f84  dd04              BLE      |L1.28560|
006f86  428f              CMP      r7,r1                 ;10895
006f88  dc11              BGT      |L1.28590|
006f8a  f1bc0f00          CMP      r12,#0                ;10895
006f8e  d10e              BNE      |L1.28590|
                  |L1.28560|
006f90  f8df8078          LDR      r8,|L1.28684|
006f94  f8df9078          LDR      r9,|L1.28688|
006f98  2802              CMP      r0,#2                 ;10897
006f9a  f9b88004          LDRSH    r8,[r8,#4]            ;10897
006f9e  f8999002          LDRB     r9,[r9,#2]            ;10897
006fa2  dd08              BLE      |L1.28598|
006fa4  4588              CMP      r8,r1                 ;10897
006fa6  dc02              BGT      |L1.28590|
006fa8  f1b90f00          CMP      r9,#0                 ;10897
006fac  d003              BEQ      |L1.28598|
                  |L1.28590|
006fae  f04f0001          MOV      r0,#1                 ;10900
006fb2  7020              STRB     r0,[r4,#0]            ;10900
006fb4  e6d4              B        |L1.28000|
                  |L1.28598|
006fb6  2b01              CMP      r3,#1                 ;10902
006fb8  d191              BNE      |L1.28382|
006fba  b118              CBZ      r0,|L1.28612|
006fbc  4295              CMP      r5,r2                 ;10905
006fbe  da8e              BGE      |L1.28382|
006fc0  2e00              CMP      r6,#0                 ;10905
006fc2  d18c              BNE      |L1.28382|
                  |L1.28612|
006fc4  2802              CMP      r0,#2                 ;10907
006fc6  db04              BLT      |L1.28626|
006fc8  4297              CMP      r7,r2                 ;10907
006fca  da88              BGE      |L1.28382|
006fcc  f1bc0f00          CMP      r12,#0                ;10907
006fd0  d185              BNE      |L1.28382|
                  |L1.28626|
006fd2  2803              CMP      r0,#3                 ;10909
006fd4  db04              BLT      |L1.28640|
006fd6  4590              CMP      r8,r2                 ;10909
006fd8  dabf              BGE      |L1.28506|
006fda  f1b90f00          CMP      r9,#0                 ;10909
006fde  d1bc              BNE      |L1.28506|
                  |L1.28640|
006fe0  f04f0000          MOV      r0,#0                 ;10912
006fe4  7020              STRB     r0,[r4,#0]            ;10912
006fe6  e6bb              B        |L1.28000|
;;;10918  
                          ENDP

                  |L1.28648|
                          DCD      RELEVENTSIGN
                  |L1.28652|
                          DCD      ||area_number.25||
                  |L1.28656|
                          DCD      TVENTON
                  |L1.28660|
                          DCD      TVENTOFF
                  |L1.28664|
                          DCD      bat
                  |L1.28668|
                          DCD      BAT_IS_ON
                  |L1.28672|
                          DCD      NUMIST
                  |L1.28676|
                          DCD      bps
                  |L1.28680|
                          DCD      NUMDT
                  |L1.28684|
                          DCD      t_ext
                  |L1.28688|
                          DCD      ND_EXT

                          AREA ||area_number.2||, CODE, READONLY, ALIGN=2

                          EXPORTAS ||area_number.2||, ||.text||
                  samokalibr_init PROC
;;;305    // заполнение флагов для АКБ
;;;306    void bat_flag (void)
000000  4902              LDR      r1,|L2.12|
;;;307    {  
000002  f24060f9          MOV      r0,#0x6f9
;;;308    if(spc_stat!=spcVZ) 
;;;309    	{
;;;310    	vz_error=0;
000006  f8a10050          STRH     r0,[r1,#0x50]
00000a  4770              BX       lr                    ;308
;;;311    	sp_ch_error=0;
;;;312    	vz1_error=0;
;;;313    	vz2_error=0;
;;;314    	}
;;;315    
;;;316    if(!snmp_bat_status[0])	 			//Батарея №1
;;;317    	{
;;;318    	if((bat[0]._Ub<(USIGN*10)))		//Снижение напряжения батареи ниже Uбсигн 
;;;319    		{
;;;320    		snmp_bat_flag[0]|=0x0001; 
;;;321    		if((snmp_bat_flag_puts[0]&0x0001)==0) 
;;;322    			{
;;;323    			snmp_trap_send("BAT #1 Alarm, battery is low",5,8,0); 
;;;324    			snmp_bat_flag_puts[0]|=0x0001;
;;;325    			}
;;;326    		}
;;;327    	else 
;;;328    		{
;;;329    		snmp_bat_flag[0]&=~0x0001; 
;;;330    		if(snmp_bat_flag_puts[0]&0x0001) 
;;;331    			{
;;;332    			snmp_trap_send("BAT #1 Alarm clear, battery is not low",5,8,1);
;;;333    			snmp_bat_flag_puts[0]&=~0x0001;
;;;334    			}
;;;335    		}
;;;336    
;;;337    	if(bat[0]._temper_stat&0x01)	//Повышенная температура батареи, первый порог - предупреждение
;;;338    		{
;;;339    		snmp_bat_flag[0]|=0x0002;
;;;340    		if((snmp_bat_flag_puts[0]&0x0002)==0) 
;;;341    			{
;;;342    			snmp_trap_send("BAT #1 Warning, high battery temperature",5,8,2); 
;;;343    			snmp_bat_flag_puts[0]|=0x0002;
;;;344    			}
;;;345    		}
;;;346    	else 
;;;347    		{
;;;348    		snmp_bat_flag[0]&=~0x0002;
;;;349    		if(snmp_bat_flag_puts[0]&0x0002) 
;;;350    			{
;;;351    			snmp_trap_send("BAT #1 Warning clear, battery temperature is normal",5,8,3);
;;;352    			snmp_bat_flag_puts[0]&=~0x02;
;;;353    			}
;;;354    		}
;;;355    
;;;356    	if(bat[0]._temper_stat&0x02)  	//Повышенная температура батареи, второй порог - авария
;;;357    		{
;;;358    		snmp_bat_flag[0]|=0x0004;
;;;359    		if((snmp_bat_flag_puts[0]&0x0004)==0) 
;;;360    			{
;;;361    			snmp_trap_send("BAT #1 Alarm, high battery temperature",5,8,4); 
;;;362    			snmp_bat_flag_puts[0]|=0x0004;
;;;363    			}
;;;364    		}
;;;365    	else 
;;;366    		{
;;;367    		snmp_bat_flag[0]&=~0x0004;
;;;368    		if(snmp_bat_flag_puts[0]&0x0004) 
;;;369    			{
;;;370    			snmp_trap_send("BAT #1 Alarm clear, battery temperature is normal",5,8,5);
;;;371    			snmp_bat_flag_puts[0]&=~0x0004;
;;;372    			}
;;;373    		}
;;;374    
;;;375    	if(bat[0]._Ib<(-IKB)) snmp_bat_flag[0]|=0x0008;		//Разряд батареи
;;;376    	else if(bat[0]._Ib>IKB) snmp_bat_flag[0]&=~0x0008;	//Заряд батареи
;;;377    
;;;378    	if((spc_stat==spcKE)&&(spc_bat==0))					//Контроль емкости батареи №1 
;;;379    		{
;;;380    		snmp_bat_flag[0]|=0x0010;
;;;381    		if((snmp_bat_flag_puts[0]&0x0010)==0) 
;;;382    			{
;;;383    			snmp_trap_send("BAT #1, capacity test started",5,8,6); 
;;;384    			snmp_bat_flag_puts[0]|=0x0010;
;;;385    			}
;;;386    		}
;;;387    	else 
;;;388    		{
;;;389    		snmp_bat_flag[0]&=~0x0010;
;;;390    		if(snmp_bat_flag_puts[0]&0x0010) 
;;;391    			{
;;;392    			snmp_trap_send("BAT #1, capacity test stopped",5,8,7);
;;;393    			snmp_bat_flag_puts[0]&=~0x0010;
;;;394    			}
;;;395    		}
;;;396    		
;;;397    	if(spc_stat==spcVZ)									//Выравнивающий заряд 
;;;398    		{
;;;399    		snmp_bat_flag[0]|=0x0020;
;;;400    		if((snmp_bat_flag_puts[0]&0x0020)==0) 
;;;401    			{
;;;402    			snmp_trap_send("BAT #1,leveling charge is started",5,8,8); 
;;;403    			snmp_bat_flag_puts[0]|=0x0020;
;;;404    			}
;;;405    		}
;;;406    	else 
;;;407    		{
;;;408    		snmp_bat_flag[0]&=~0x0020;
;;;409    		if(snmp_bat_flag_puts[0]&0x0020) 
;;;410    			{
;;;411    			snmp_trap_send("BAT #1,leveling charge is stopped",5,8,9);
;;;412    			snmp_bat_flag_puts[0]&=~0x0020;
;;;413    			}
;;;414    		}
;;;415    
;;;416    	if(vz_error)										 //Выравнивающий заряд заблокирован по вентиляции
;;;417    		{
;;;418    		snmp_bat_flag[0]|=0x0040;
;;;419    		if((snmp_bat_flag_puts[0]&0x0040)==0) 
;;;420    			{
;;;421    			snmp_trap_send("BAT #1,leveling charge is blocked",5,8,10); 
;;;422    			snmp_bat_flag_puts[0]|=0x0040;
;;;423    			}
;;;424    		}
;;;425    	else 
;;;426    		{
;;;427    		snmp_bat_flag[0]&=~0x0040;
;;;428    		if(snmp_bat_flag_puts[0]&0x0040) 
;;;429    			{
;;;430    			snmp_trap_send("BAT #1,leveling charge is unblocked",5,8,11);
;;;431    			snmp_bat_flag_puts[0]&=~0x0040;
;;;432    			} 
;;;433    		}
;;;434    
;;;435    	if(sp_ch_stat==scsWRK) 								//Ускореннный заряд
;;;436    		{
;;;437    		snmp_bat_flag[0]|=0x0080;
;;;438    		if((snmp_bat_flag_puts[0]&0x0080)==0) 
;;;439    			{
;;;440    			snmp_trap_send("BAT #1,speed charge is started",5,8,10); 
;;;441    			snmp_bat_flag_puts[0]|=0x0080;
;;;442    			}
;;;443    		}
;;;444    	else 
;;;445    		{
;;;446    		snmp_bat_flag[0]&=~0x0080;
;;;447    		if(snmp_bat_flag_puts[0]&0x0080) 
;;;448    			{
;;;449    			snmp_trap_send("BAT #1,speed charge is stopped",5,8,11);
;;;450    			snmp_bat_flag_puts[0]&=~0x0080;
;;;451    			}
;;;452    		}
;;;453    
;;;454    	if(sp_ch_error) 									//Ускореннный заряд заблокирован по вентиляции
;;;455    		{
;;;456    		snmp_bat_flag[0]|=0x0100;
;;;457    		if((snmp_bat_flag_puts[0]&0x0100)==0) 
;;;458    			{
;;;459    			snmp_trap_send("BAT #1,speed charge is blocked",5,8,12); 
;;;460    			snmp_bat_flag_puts[0]|=0x0100;
;;;461    			}
;;;462    		}
;;;463    	else 
;;;464    		{
;;;465    		snmp_bat_flag[0]&=~0x0100;
;;;466    		if(snmp_bat_flag_puts[0]&0x0100) 
;;;467    			{
;;;468    			snmp_trap_send("BAT #1,speed charge is unblocked",5,8,13);
;;;469    			snmp_bat_flag_puts[0]&=~0x0100;
;;;470    			} 
;;;471    		}
;;;472    
;;;473    	if(vz1_stat!=vz1sOFF)								//Уравнительный заряд 
;;;474    		{
;;;475    		snmp_bat_flag[0]|=0x0200;
;;;476    		if((snmp_bat_flag_puts[0]&0x0200)==0) 
;;;477    			{
;;;478    			snmp_trap_send("BAT #1,equalising charge is on",5,8,14); 
;;;479    			snmp_bat_flag_puts[0]|=0x0200;
;;;480    			}
;;;481    		}
;;;482    	else 
;;;483    		{
;;;484    		snmp_bat_flag[0]&=~0x0200;
;;;485    		if(snmp_bat_flag_puts[0]&0x0200) 
;;;486    			{
;;;487    			snmp_trap_send("BAT #1,equalising charge is off",5,8,15);
;;;488    			snmp_bat_flag_puts[0]&=~0x0200;
;;;489    			}
;;;490    		}
;;;491    
;;;492    	if(vz1_error)										//Уравнительный заряд заблокирован по вентиляции 
;;;493    		{
;;;494    		snmp_bat_flag[0]|=0x0400;
;;;495    		if((snmp_bat_flag_puts[0]&0x0400)==0) 
;;;496    			{
;;;497    			snmp_trap_send("BAT #1,equalising charge is blocked",5,8,16); 
;;;498    			snmp_bat_flag_puts[0]|=0x0400;
;;;499    			}
;;;500    		}
;;;501    	else 
;;;502    		{
;;;503    		snmp_bat_flag[0]&=~0x0400;
;;;504    		if(snmp_bat_flag_puts[0]&0x0400) 
;;;505    			{
;;;506    			snmp_trap_send("BAT #1,equalising charge is unblocked",5,8,17);
;;;507    			snmp_bat_flag_puts[0]&=~0x0400;
;;;508    			} 
;;;509    		}
;;;510    
;;;511    	if(vz2_stat!=vz2sOFF)								//Формовочный заряд 
;;;512    		{
;;;513    		snmp_bat_flag[0]|=0x0800;
;;;514    		if((snmp_bat_flag_puts[0]&0x0800)==0) 
;;;515    			{
;;;516    			snmp_trap_send("BAT #1,molding charge is on",5,8,18); 
;;;517    			snmp_bat_flag_puts[0]|=0x0800;
;;;518    			}
;;;519    		}
;;;520    	else 
;;;521    		{
;;;522    		snmp_bat_flag[0]&=~0x0800;
;;;523    		if(snmp_bat_flag_puts[0]&0x0800) 
;;;524    			{
;;;525    			snmp_trap_send("BAT #1,molding charge is off",5,8,19);
;;;526    			snmp_bat_flag_puts[0]&=~0x0800;
;;;527    			}
;;;528    		}
;;;529    
;;;530    	if(vz2_error) 										//Формовочный заряд заблокирован по вентиляции
;;;531    		{
;;;532    		snmp_bat_flag[0]|=0x1000;
;;;533    		if((snmp_bat_flag_puts[0]&0x1000)==0) 
;;;534    			{
;;;535    			snmp_trap_send("BAT #1,molding charge is blocked",5,8,20); 
;;;536    			snmp_bat_flag_puts[0]|=0x1000;
;;;537    			}
;;;538    		}
;;;539    	else 
;;;540    		{
;;;541    		snmp_bat_flag[0]&=~0x1000;
;;;542    		if(snmp_bat_flag_puts[0]&0x1000) 
;;;543    			{
;;;544    			snmp_trap_send("BAT #1,molding charge is unblocked",5,8,21);
;;;545    			snmp_bat_flag_puts[0]&=~0x1000;
;;;546    			} 
;;;547    		}
;;;548    	}
;;;549    else 
;;;550    	{
;;;551    	snmp_bat_flag[0]=0; 
;;;552    	snmp_bat_flag_puts[0]=0;
;;;553    	}
;;;554    
;;;555    if(!snmp_bat_status[1])	 			//Батарея №2
;;;556    	{
;;;557    	if((bat[1]._Ub<(USIGN*10)))		//Снижение напряжения батареи ниже Uбсигн 
;;;558    		{
;;;559    		snmp_bat_flag[1]|=0x0001; 
;;;560    		if((snmp_bat_flag_puts[1]&0x0001)==0) 
;;;561    			{
;;;562    			snmp_trap_send("BAT #1 Alarm, battery is low",5,8,22); 
;;;563    			snmp_bat_flag_puts[1]|=0x0001;
;;;564    			}
;;;565    		}
;;;566    	else 
;;;567    		{
;;;568    		snmp_bat_flag[1]&=~0x0001; 
;;;569    		if(snmp_bat_flag_puts[1]&0x0001) 
;;;570    			{
;;;571    			snmp_trap_send("BAT #1 Alarm clear, battery is not low",5,8,23);
;;;572    			snmp_bat_flag_puts[1]&=~0x0001;
;;;573    			}
;;;574    		}
;;;575    
;;;576    	if(bat[1]._temper_stat&0x01)	//Повышенная температура батареи, первый порог - предупреждение
;;;577    		{
;;;578    		snmp_bat_flag[1]|=0x0002;
;;;579    		if((snmp_bat_flag_puts[0]&0x0002)==0) 
;;;580    			{
;;;581    			snmp_trap_send("BAT #1 Warning, high battery temperature",5,8,24); 
;;;582    			snmp_bat_flag_puts[1]|=0x0002;
;;;583    			}
;;;584    		}
;;;585    	else 
;;;586    		{
;;;587    		snmp_bat_flag[1]&=~0x0002;
;;;588    		if(snmp_bat_flag_puts[1]&0x0002) 
;;;589    			{
;;;590    			snmp_trap_send("BAT #1 Warning clear, battery temperature is normal",5,8,25);
;;;591    			snmp_bat_flag_puts[1]&=~0x02;
;;;592    			}
;;;593    		}
;;;594    
;;;595    	if(bat[1]._temper_stat&0x02)  	//Повышенная температура батареи, второй порог - авария
;;;596    		{
;;;597    		snmp_bat_flag[1]|=0x0004;
;;;598    		if((snmp_bat_flag_puts[1]&0x0004)==0) 
;;;599    			{
;;;600    			snmp_trap_send("BAT #1 Alarm, high battery temperature",5,8,26); 
;;;601    			snmp_bat_flag_puts[1]|=0x0004;
;;;602    			}
;;;603    		}
;;;604    	else 
;;;605    		{
;;;606    		snmp_bat_flag[1]&=~0x0004;
;;;607    		if(snmp_bat_flag_puts[1]&0x0004) 
;;;608    			{
;;;609    			snmp_trap_send("BAT #1 Alarm clear, battery temperature is normal",5,8,27);
;;;610    			snmp_bat_flag_puts[1]&=~0x0004;
;;;611    			}
;;;612    		}
;;;613    
;;;614    	if(bat[1]._Ib<(-IKB)) snmp_bat_flag[1]|=0x0008;		//Разряд батареи
;;;615    	else if(bat[1]._Ib>IKB) snmp_bat_flag[1]&=~0x0008;	//Заряд батареи
;;;616    
;;;617    	if((spc_stat==spcKE)&&(spc_bat==0))					//Контроль емкости батареи №1 
;;;618    		{
;;;619    		snmp_bat_flag[1]|=0x0010;
;;;620    		if((snmp_bat_flag_puts[1]&0x0010)==0) 
;;;621    			{
;;;622    			snmp_trap_send("BAT #1, capacity test started",5,8,28); 
;;;623    			snmp_bat_flag_puts[1]|=0x0010;
;;;624    			}
;;;625    		}
;;;626    	else 
;;;627    		{
;;;628    		snmp_bat_flag[1]&=~0x0010;
;;;629    		if(snmp_bat_flag_puts[1]&0x0010) 
;;;630    			{
;;;631    			snmp_trap_send("BAT #1, capacity test stopped",5,8,29);
;;;632    			snmp_bat_flag_puts[1]&=~0x0010;
;;;633    			}
;;;634    		}
;;;635    		
;;;636    	if(spc_stat==spcVZ)									//Выравнивающий заряд 
;;;637    		{
;;;638    		snmp_bat_flag[1]|=0x0020;
;;;639    		if((snmp_bat_flag_puts[1]&0x0020)==0) 
;;;640    			{
;;;641    			snmp_trap_send("BAT #1,leveling charge is started",5,8,30); 
;;;642    			snmp_bat_flag_puts[1]|=0x0020;
;;;643    			}
;;;644    		}
;;;645    	else 
;;;646    		{
;;;647    		snmp_bat_flag[1]&=~0x0020;
;;;648    		if(snmp_bat_flag_puts[1]&0x0020) 
;;;649    			{
;;;650    			snmp_trap_send("BAT #1,leveling charge is stopped",5,8,31);
;;;651    			snmp_bat_flag_puts[1]&=~0x0020;
;;;652    			}
;;;653    		}
;;;654    
;;;655    	if(vz_error)										 //Выравнивающий заряд заблокирован по вентиляции
;;;656    		{
;;;657    		snmp_bat_flag[1]|=0x0040;
;;;658    		if((snmp_bat_flag_puts[1]&0x0040)==0) 
;;;659    			{
;;;660    			snmp_trap_send("BAT #1,leveling charge is blocked",5,8,32); 
;;;661    			snmp_bat_flag_puts[1]|=0x0040;
;;;662    			}
;;;663    		}
;;;664    	else 
;;;665    		{
;;;666    		snmp_bat_flag[1]&=~0x0040;
;;;667    		if(snmp_bat_flag_puts[1]&0x0040) 
;;;668    			{
;;;669    			snmp_trap_send("BAT #1,leveling charge is unblocked",5,8,33);
;;;670    			snmp_bat_flag_puts[1]&=~0x0040;
;;;671    			} 
;;;672    		}
;;;673    
;;;674    	if(sp_ch_stat==scsWRK) 								//Ускореннный заряд
;;;675    		{
;;;676    		snmp_bat_flag[1]|=0x0080;
;;;677    		if((snmp_bat_flag_puts[1]&0x0080)==0) 
;;;678    			{
;;;679    			snmp_trap_send("BAT #1,speed charge is started",5,8,34); 
;;;680    			snmp_bat_flag_puts[1]|=0x0080;
;;;681    			}
;;;682    		}
;;;683    	else 
;;;684    		{
;;;685    		snmp_bat_flag[1]&=~0x0080;
;;;686    		if(snmp_bat_flag_puts[1]&0x0080) 
;;;687    			{
;;;688    			snmp_trap_send("BAT #1,speed charge is stopped",5,8,35);
;;;689    			snmp_bat_flag_puts[1]&=~0x0080;
;;;690    			}
;;;691    		}
;;;692    
;;;693    	if(sp_ch_error) 									//Ускореннный заряд заблокирован по вентиляции
;;;694    		{
;;;695    		snmp_bat_flag[1]|=0x0100;
;;;696    		if((snmp_bat_flag_puts[1]&0x0100)==0) 
;;;697    			{
;;;698    			snmp_trap_send("BAT #1,speed charge is blocked",5,8,36); 
;;;699    			snmp_bat_flag_puts[1]|=0x0100;
;;;700    			}
;;;701    		}
;;;702    	else 
;;;703    		{
;;;704    		snmp_bat_flag[1]&=~0x0100;
;;;705    		if(snmp_bat_flag_puts[1]&0x0100) 
;;;706    			{
;;;707    			snmp_trap_send("BAT #1,speed charge is unblocked",5,8,37);
;;;708    			snmp_bat_flag_puts[1]&=~0x0100;
;;;709    			} 
;;;710    		}
;;;711    
;;;712    	if(vz1_stat!=vz1sOFF)								//Уравнительный заряд 
;;;713    		{
;;;714    		snmp_bat_flag[1]|=0x0200;
;;;715    		if((snmp_bat_flag_puts[1]&0x0200)==0) 
;;;716    			{
;;;717    			snmp_trap_send("BAT #1,equalising charge is on",5,8,38); 
;;;718    			snmp_bat_flag_puts[1]|=0x0200;
;;;719    			}
;;;720    		}
;;;721    	else 
;;;722    		{
;;;723    		snmp_bat_flag[1]&=~0x0200;
;;;724    		if(snmp_bat_flag_puts[1]&0x0200) 
;;;725    			{
;;;726    			snmp_trap_send("BAT #1,equalising charge is off",5,8,39);
;;;727    			snmp_bat_flag_puts[1]&=~0x0200;
;;;728    			}
;;;729    		}
;;;730    
;;;731    	if(vz1_error)										//Уравнительный заряд заблокирован по вентиляции 
;;;732    		{
;;;733    		snmp_bat_flag[1]|=0x0400;
;;;734    		if((snmp_bat_flag_puts[1]&0x0400)==0) 
;;;735    			{
;;;736    			snmp_trap_send("BAT #1,equalising charge is blocked",5,8,40); 
;;;737    			snmp_bat_flag_puts[1]|=0x0400;
;;;738    			}
;;;739    		}
;;;740    	else 
;;;741    		{
;;;742    		snmp_bat_flag[1]&=~0x0400;
;;;743    		if(snmp_bat_flag_puts[1]&0x0400) 
;;;744    			{
;;;745    			snmp_trap_send("BAT #1,equalising charge is unblocked",5,8,41);
;;;746    			snmp_bat_flag_puts[1]&=~0x0400;
;;;747    			} 
;;;748    		}
;;;749    
;;;750    	if(vz2_stat!=vz2sOFF)								//Формовочный заряд 
;;;751    		{
;;;752    		snmp_bat_flag[1]|=0x0800;
;;;753    		if((snmp_bat_flag_puts[1]&0x0800)==0) 
;;;754    			{
;;;755    			snmp_trap_send("BAT #1,molding charge is on",5,8,42); 
;;;756    			snmp_bat_flag_puts[1]|=0x0800;
;;;757    			}
;;;758    		}
;;;759    	else 
;;;760    		{
;;;761    		snmp_bat_flag[1]&=~0x0800;
;;;762    		if(snmp_bat_flag_puts[1]&0x0800) 
;;;763    			{
;;;764    			snmp_trap_send("BAT #1,molding charge is off",5,8,43);
;;;765    			snmp_bat_flag_puts[1]&=~0x0800;
;;;766    			}
;;;767    		}
;;;768    
;;;769    	if(vz2_error) 										//Формовочный заряд заблокирован по вентиляции
;;;770    		{
;;;771    		snmp_bat_flag[1]|=0x1000;
;;;772    		if((snmp_bat_flag_puts[1]&0x1000)==0) 
;;;773    			{
;;;774    			snmp_trap_send("BAT #1,molding charge is blocked",5,8,44); 
;;;775    			snmp_bat_flag_puts[1]|=0x1000;
;;;776    			}
;;;777    		}
;;;778    	else 
;;;779    		{
;;;780    		snmp_bat_flag[1]&=~0x1000;
;;;781    		if(snmp_bat_flag_puts[1]&0x1000) 
;;;782    			{
;;;783    			snmp_trap_send("BAT #1,molding charge is unblocked",5,8,45);
;;;784    			snmp_bat_flag_puts[1]&=~0x1000;
;;;785    			} 
;;;786    		}
;;;787    	}
;;;788    else 
;;;789    	{
;;;790    	snmp_bat_flag[1]=0; 
;;;791    	snmp_bat_flag_puts[1]=0;
;;;792    	}
;;;793    /*
;;;794    if(!snmp_bat_status[1])
;;;795    	{
;;;796    	if((bat[1]._Ub<(USIGN*10))) 
;;;797    		{
;;;798    		snmp_bat_flag[1]|=0x01; 
;;;799    		if((snmp_bat_flag_puts[1]&0x01)==0) 
;;;800    			{
;;;801    			snmp_trap_send("BAT #2 Alarm, battery is low",5,8,0); 
;;;802    			snmp_bat_flag_puts[1]|=0x01;
;;;803    			}
;;;804    		}
;;;805    	else 
;;;806    		{
;;;807    		snmp_bat_flag[1]&=~0x01; 
;;;808    		if(snmp_bat_flag_puts[1]&0x01) 
;;;809    			{
;;;810    			snmp_trap_send("BAT #2 Alarm clear, battery is not low",5,8,1);
;;;811    			snmp_bat_flag_puts[1]&=~0x01;
;;;812    			}
;;;813    		}
;;;814    	if(bat[1]._temper_stat&0x01) 
;;;815    		{
;;;816    		snmp_bat_flag[1]|=0x02;
;;;817    		if((snmp_bat_flag_puts[1]&0x02)==0) 
;;;818    			{
;;;819    			snmp_trap_send("BAT #2 Alarm, high battery temperature",5,8,2); 
;;;820    			snmp_bat_flag_puts[1]|=0x02;
;;;821    			}
;;;822    		}
;;;823    	else 
;;;824    		{
;;;825    		snmp_bat_flag[1]&=~0x02;
;;;826    		if(snmp_bat_flag_puts[1]&0x02) 
;;;827    			{
;;;828    			snmp_trap_send("BAT #2 Alarm clear, battery temperature is normal",5,8,3);
;;;829    			snmp_bat_flag_puts[1]&=~0x02;
;;;830    			}
;;;831    		}
;;;832    	if(bat[1]._temper_stat&0x02) 
;;;833    		{
;;;834    		snmp_bat_flag[1]|=0x04;
;;;835    		if((snmp_bat_flag_puts[1]&0x04)==0) 
;;;836    			{
;;;837    			snmp_trap_send("BAT #2 Alarm, maximum battery temperature",5,8,4); 
;;;838    			snmp_bat_flag_puts[1]|=0x04;
;;;839    			}
;;;840    		}
;;;841    	else 
;;;842    		{
;;;843    		snmp_bat_flag[1]&=~0x04;
;;;844    		if(snmp_bat_flag_puts[1]&0x04) 
;;;845    			{
;;;846    			snmp_trap_send("BAT #2 Alarm clear, battery temperature is normal",5,8,5);
;;;847    			snmp_bat_flag_puts[1]&=~0x04;
;;;848    			}
;;;849    		}
;;;850    		
;;;851    	if(bat[1]._Ib<(-IKB))	snmp_bat_flag[1]|=0x80;
;;;852    	else if(bat[1]._Ib>IKB)snmp_bat_flag[1]&=~0x80;
;;;853    
;;;854    	if((spc_stat==spcKE)&&(spc_bat==1)) 
;;;855    		{
;;;856    		snmp_bat_flag[1]|=0x10;
;;;857    		if((snmp_bat_flag_puts[1]&0x10)==0) 
;;;858    			{
;;;859    			snmp_trap_send("BAT #2, capacity check enabled",5,8,6); 
;;;860    			snmp_bat_flag_puts[1]|=0x10;
;;;861    			}
;;;862    		}
;;;863    	else 
;;;864    		{
;;;865    		snmp_bat_flag[1]&=~0x10;
;;;866    		if(snmp_bat_flag_puts[1]&0x10) 
;;;867    			{
;;;868    			snmp_trap_send("BAT #2, capacity check disabled",5,8,7);
;;;869    			snmp_bat_flag_puts[1]&=~0x10;
;;;870    			}
;;;871    		}
;;;872    		
;;;873    	if(spc_stat==spcVZ) 
;;;874    		{
;;;875    		snmp_bat_flag[1]|=0x20;
;;;876    		if((snmp_bat_flag_puts[1]&0x20)==0) 
;;;877    			{
;;;878    			snmp_trap_send("BAT #2,equalizing charge is on",5,8,8); 
;;;879    			snmp_bat_flag_puts[1]|=0x20;
;;;880    			}
;;;881    		}
;;;882    	else 
;;;883    		{
;;;884    		snmp_bat_flag[1]&=~0x20;
;;;885    		if(snmp_bat_flag_puts[1]&0x20) 
;;;886    			{
;;;887    			snmp_trap_send("BAT #2,equalizing charge is off",5,8,9);
;;;888    			snmp_bat_flag_puts[1]&=~0x20;
;;;889    			}
;;;890    		}
;;;891    
;;;892    	if(vz_error) 
;;;893    		{
;;;894    		snmp_bat_flag[1]|=0x40;
;;;895    		if((snmp_bat_flag_puts[1]&0x40)==0) 
;;;896    			{
;;;897    			snmp_trap_send("BAT #2,equalizing charge blocked",5,8,10); 
;;;898    			snmp_bat_flag_puts[1]|=0x40;
;;;899    			}
;;;900    		}
;;;901    	else 
;;;902    		{
;;;903    		snmp_bat_flag[1]&=~0x40;
;;;904    		if(snmp_bat_flag_puts[1]&0x40) 
;;;905    			{
;;;906    			snmp_trap_send("BAT #2,equalizing charge is not blocked",5,8,11);
;;;907    			snmp_bat_flag_puts[1]&=~0x40;
;;;908    			} 
;;;909    		}
;;;910       }
;;;911    else 
;;;912    	{
;;;913    	snmp_bat_flag[1]=0; 
;;;914    	snmp_bat_flag_puts[1]=0;
;;;915    	} */
;;;916    }
;;;917    
                          ENDP

                  |L2.12|
                          DCD      ||area_number.25||

                          AREA ||area_number.3||, CODE, READONLY, ALIGN=2

                          EXPORTAS ||area_number.3||, ||.text||
                  adc_drv6 PROC
;;;305    // заполнение флагов для АКБ
;;;306    void bat_flag (void)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;307    {  
;;;308    if(spc_stat!=spcVZ) 
000004  4c82              LDR      r4,|L3.528|
;;;309    	{
;;;310    	vz_error=0;
000006  8860              LDRH     r0,[r4,#2]  ; adc_self_ch_buff
000008  8821              LDRH     r1,[r4,#0]            ;308  ; adc_self_ch_buff
00000a  1a40              SUBS     r0,r0,r1              ;308
00000c  b200              SXTH     r0,r0                 ;308
00000e  f7fffffe          BL       abs_pal
;;;311    	sp_ch_error=0;
000012  1da5              ADDS     r5,r4,#6
;;;312    	vz1_error=0;
000014  8028              STRH     r0,[r5,#0]
;;;313    	vz2_error=0;
000016  88a0              LDRH     r0,[r4,#4]  ; adc_self_ch_buff
;;;314    	}
;;;315    
;;;316    if(!snmp_bat_status[0])	 			//Батарея №1
000018  8861              LDRH     r1,[r4,#2]  ; adc_self_ch_buff
00001a  1a40              SUBS     r0,r0,r1
;;;317    	{
;;;318    	if((bat[0]._Ub<(USIGN*10)))		//Снижение напряжения батареи ниже Uбсигн 
00001c  b200              SXTH     r0,r0
00001e  f7fffffe          BL       abs_pal
000022  8068              STRH     r0,[r5,#2]
000024  88a0              LDRH     r0,[r4,#4]            ;316  ; adc_self_ch_buff
000026  8821              LDRH     r1,[r4,#0]            ;316  ; adc_self_ch_buff
;;;319    		{
;;;320    		snmp_bat_flag[0]|=0x0001; 
;;;321    		if((snmp_bat_flag_puts[0]&0x0001)==0) 
;;;322    			{
;;;323    			snmp_trap_send("BAT #1 Alarm, battery is low",5,8,0); 
;;;324    			snmp_bat_flag_puts[0]|=0x0001;
;;;325    			}
;;;326    		}
;;;327    	else 
;;;328    		{
;;;329    		snmp_bat_flag[0]&=~0x0001; 
;;;330    		if(snmp_bat_flag_puts[0]&0x0001) 
;;;331    			{
;;;332    			snmp_trap_send("BAT #1 Alarm clear, battery is not low",5,8,1);
;;;333    			snmp_bat_flag_puts[0]&=~0x0001;
;;;334    			}
;;;335    		}
;;;336    
;;;337    	if(bat[0]._temper_stat&0x01)	//Повышенная температура батареи, первый порог - предупреждение
;;;338    		{
;;;339    		snmp_bat_flag[0]|=0x0002;
;;;340    		if((snmp_bat_flag_puts[0]&0x0002)==0) 
;;;341    			{
;;;342    			snmp_trap_send("BAT #1 Warning, high battery temperature",5,8,2); 
;;;343    			snmp_bat_flag_puts[0]|=0x0002;
;;;344    			}
;;;345    		}
;;;346    	else 
;;;347    		{
;;;348    		snmp_bat_flag[0]&=~0x0002;
;;;349    		if(snmp_bat_flag_puts[0]&0x0002) 
;;;350    			{
;;;351    			snmp_trap_send("BAT #1 Warning clear, battery temperature is normal",5,8,3);
;;;352    			snmp_bat_flag_puts[0]&=~0x02;
;;;353    			}
;;;354    		}
;;;355    
;;;356    	if(bat[0]._temper_stat&0x02)  	//Повышенная температура батареи, второй порог - авария
;;;357    		{
;;;358    		snmp_bat_flag[0]|=0x0004;
;;;359    		if((snmp_bat_flag_puts[0]&0x0004)==0) 
;;;360    			{
;;;361    			snmp_trap_send("BAT #1 Alarm, high battery temperature",5,8,4); 
;;;362    			snmp_bat_flag_puts[0]|=0x0004;
;;;363    			}
;;;364    		}
;;;365    	else 
;;;366    		{
;;;367    		snmp_bat_flag[0]&=~0x0004;
;;;368    		if(snmp_bat_flag_puts[0]&0x0004) 
;;;369    			{
;;;370    			snmp_trap_send("BAT #1 Alarm clear, battery temperature is normal",5,8,5);
;;;371    			snmp_bat_flag_puts[0]&=~0x0004;
;;;372    			}
;;;373    		}
;;;374    
;;;375    	if(bat[0]._Ib<(-IKB)) snmp_bat_flag[0]|=0x0008;		//Разряд батареи
000028  1a40              SUBS     r0,r0,r1
00002a  b200              SXTH     r0,r0
00002c  f7fffffe          BL       abs_pal
000030  80a8              STRH     r0,[r5,#4]            ;316
;;;376    	else if(bat[0]._Ib>IKB) snmp_bat_flag[0]&=~0x0008;	//Заряд батареи
;;;377    
;;;378    	if((spc_stat==spcKE)&&(spc_bat==0))					//Контроль емкости батареи №1 
;;;379    		{
;;;380    		snmp_bat_flag[0]|=0x0010;
;;;381    		if((snmp_bat_flag_puts[0]&0x0010)==0) 
;;;382    			{
;;;383    			snmp_trap_send("BAT #1, capacity test started",5,8,6); 
;;;384    			snmp_bat_flag_puts[0]|=0x0010;
;;;385    			}
;;;386    		}
;;;387    	else 
;;;388    		{
;;;389    		snmp_bat_flag[0]&=~0x0010;
;;;390    		if(snmp_bat_flag_puts[0]&0x0010) 
;;;391    			{
;;;392    			snmp_trap_send("BAT #1, capacity test stopped",5,8,7);
;;;393    			snmp_bat_flag_puts[0]&=~0x0010;
;;;394    			}
;;;395    		}
;;;396    		
;;;397    	if(spc_stat==spcVZ)									//Выравнивающий заряд 
;;;398    		{
;;;399    		snmp_bat_flag[0]|=0x0020;
;;;400    		if((snmp_bat_flag_puts[0]&0x0020)==0) 
;;;401    			{
;;;402    			snmp_trap_send("BAT #1,leveling charge is started",5,8,8); 
;;;403    			snmp_bat_flag_puts[0]|=0x0020;
;;;404    			}
;;;405    		}
;;;406    	else 
;;;407    		{
;;;408    		snmp_bat_flag[0]&=~0x0020;
;;;409    		if(snmp_bat_flag_puts[0]&0x0020) 
;;;410    			{
;;;411    			snmp_trap_send("BAT #1,leveling charge is stopped",5,8,9);
;;;412    			snmp_bat_flag_puts[0]&=~0x0020;
;;;413    			}
;;;414    		}
;;;415    
;;;416    	if(vz_error)										 //Выравнивающий заряд заблокирован по вентиляции
;;;417    		{
;;;418    		snmp_bat_flag[0]|=0x0040;
;;;419    		if((snmp_bat_flag_puts[0]&0x0040)==0) 
;;;420    			{
;;;421    			snmp_trap_send("BAT #1,leveling charge is blocked",5,8,10); 
;;;422    			snmp_bat_flag_puts[0]|=0x0040;
;;;423    			}
;;;424    		}
;;;425    	else 
;;;426    		{
;;;427    		snmp_bat_flag[0]&=~0x0040;
;;;428    		if(snmp_bat_flag_puts[0]&0x0040) 
;;;429    			{
;;;430    			snmp_trap_send("BAT #1,leveling charge is unblocked",5,8,11);
;;;431    			snmp_bat_flag_puts[0]&=~0x0040;
;;;432    			} 
;;;433    		}
;;;434    
;;;435    	if(sp_ch_stat==scsWRK) 								//Ускореннный заряд
;;;436    		{
;;;437    		snmp_bat_flag[0]|=0x0080;
;;;438    		if((snmp_bat_flag_puts[0]&0x0080)==0) 
;;;439    			{
;;;440    			snmp_trap_send("BAT #1,speed charge is started",5,8,10); 
;;;441    			snmp_bat_flag_puts[0]|=0x0080;
;;;442    			}
;;;443    		}
;;;444    	else 
;;;445    		{
;;;446    		snmp_bat_flag[0]&=~0x0080;
;;;447    		if(snmp_bat_flag_puts[0]&0x0080) 
;;;448    			{
;;;449    			snmp_trap_send("BAT #1,speed charge is stopped",5,8,11);
;;;450    			snmp_bat_flag_puts[0]&=~0x0080;
;;;451    			}
;;;452    		}
;;;453    
;;;454    	if(sp_ch_error) 									//Ускореннный заряд заблокирован по вентиляции
;;;455    		{
;;;456    		snmp_bat_flag[0]|=0x0100;
;;;457    		if((snmp_bat_flag_puts[0]&0x0100)==0) 
;;;458    			{
;;;459    			snmp_trap_send("BAT #1,speed charge is blocked",5,8,12); 
;;;460    			snmp_bat_flag_puts[0]|=0x0100;
;;;461    			}
;;;462    		}
;;;463    	else 
;;;464    		{
;;;465    		snmp_bat_flag[0]&=~0x0100;
;;;466    		if(snmp_bat_flag_puts[0]&0x0100) 
;;;467    			{
;;;468    			snmp_trap_send("BAT #1,speed charge is unblocked",5,8,13);
;;;469    			snmp_bat_flag_puts[0]&=~0x0100;
;;;470    			} 
;;;471    		}
;;;472    
;;;473    	if(vz1_stat!=vz1sOFF)								//Уравнительный заряд 
;;;474    		{
;;;475    		snmp_bat_flag[0]|=0x0200;
;;;476    		if((snmp_bat_flag_puts[0]&0x0200)==0) 
;;;477    			{
;;;478    			snmp_trap_send("BAT #1,equalising charge is on",5,8,14); 
;;;479    			snmp_bat_flag_puts[0]|=0x0200;
;;;480    			}
;;;481    		}
;;;482    	else 
;;;483    		{
;;;484    		snmp_bat_flag[0]&=~0x0200;
;;;485    		if(snmp_bat_flag_puts[0]&0x0200) 
;;;486    			{
;;;487    			snmp_trap_send("BAT #1,equalising charge is off",5,8,15);
;;;488    			snmp_bat_flag_puts[0]&=~0x0200;
;;;489    			}
;;;490    		}
;;;491    
;;;492    	if(vz1_error)										//Уравнительный заряд заблокирован по вентиляции 
;;;493    		{
;;;494    		snmp_bat_flag[0]|=0x0400;
;;;495    		if((snmp_bat_flag_puts[0]&0x0400)==0) 
;;;496    			{
;;;497    			snmp_trap_send("BAT #1,equalising charge is blocked",5,8,16); 
;;;498    			snmp_bat_flag_puts[0]|=0x0400;
;;;499    			}
;;;500    		}
;;;501    	else 
;;;502    		{
;;;503    		snmp_bat_flag[0]&=~0x0400;
;;;504    		if(snmp_bat_flag_puts[0]&0x0400) 
;;;505    			{
;;;506    			snmp_trap_send("BAT #1,equalising charge is unblocked",5,8,17);
;;;507    			snmp_bat_flag_puts[0]&=~0x0400;
;;;508    			} 
;;;509    		}
;;;510    
;;;511    	if(vz2_stat!=vz2sOFF)								//Формовочный заряд 
;;;512    		{
;;;513    		snmp_bat_flag[0]|=0x0800;
;;;514    		if((snmp_bat_flag_puts[0]&0x0800)==0) 
;;;515    			{
;;;516    			snmp_trap_send("BAT #1,molding charge is on",5,8,18); 
;;;517    			snmp_bat_flag_puts[0]|=0x0800;
;;;518    			}
;;;519    		}
;;;520    	else 
;;;521    		{
;;;522    		snmp_bat_flag[0]&=~0x0800;
;;;523    		if(snmp_bat_flag_puts[0]&0x0800) 
;;;524    			{
;;;525    			snmp_trap_send("BAT #1,molding charge is off",5,8,19);
;;;526    			snmp_bat_flag_puts[0]&=~0x0800;
;;;527    			}
;;;528    		}
;;;529    
;;;530    	if(vz2_error) 										//Формовочный заряд заблокирован по вентиляции
;;;531    		{
;;;532    		snmp_bat_flag[0]|=0x1000;
;;;533    		if((snmp_bat_flag_puts[0]&0x1000)==0) 
;;;534    			{
;;;535    			snmp_trap_send("BAT #1,molding charge is blocked",5,8,20); 
;;;536    			snmp_bat_flag_puts[0]|=0x1000;
;;;537    			}
;;;538    		}
;;;539    	else 
;;;540    		{
;;;541    		snmp_bat_flag[0]&=~0x1000;
;;;542    		if(snmp_bat_flag_puts[0]&0x1000) 
;;;543    			{
;;;544    			snmp_trap_send("BAT #1,molding charge is unblocked",5,8,21);
;;;545    			snmp_bat_flag_puts[0]&=~0x1000;
;;;546    			} 
;;;547    		}
;;;548    	}
;;;549    else 
;;;550    	{
;;;551    	snmp_bat_flag[0]=0; 
000032  f44f7196          MOV      r1,#0x12c
;;;552    	snmp_bat_flag_puts[0]=0;
;;;553    	}
;;;554    
;;;555    if(!snmp_bat_status[1])	 			//Батарея №2
000036  f1a406ee          SUB      r6,r4,#0xee
00003a  4288              CMP      r0,r1
00003c  da02              BGE      |L3.68|
;;;556    	{
;;;557    	if((bat[1]._Ub<(USIGN*10)))		//Снижение напряжения батареи ниже Uбсигн 
;;;558    		{
;;;559    		snmp_bat_flag[1]|=0x0001; 
;;;560    		if((snmp_bat_flag_puts[1]&0x0001)==0) 
;;;561    			{
;;;562    			snmp_trap_send("BAT #1 Alarm, battery is low",5,8,22); 
;;;563    			snmp_bat_flag_puts[1]|=0x0001;
;;;564    			}
;;;565    		}
;;;566    	else 
;;;567    		{
;;;568    		snmp_bat_flag[1]&=~0x0001; 
;;;569    		if(snmp_bat_flag_puts[1]&0x0001) 
;;;570    			{
;;;571    			snmp_trap_send("BAT #1 Alarm clear, battery is not low",5,8,23);
;;;572    			snmp_bat_flag_puts[1]&=~0x0001;
;;;573    			}
;;;574    		}
;;;575    
;;;576    	if(bat[1]._temper_stat&0x01)	//Повышенная температура батареи, первый порог - предупреждение
;;;577    		{
;;;578    		snmp_bat_flag[1]|=0x0002;
;;;579    		if((snmp_bat_flag_puts[0]&0x0002)==0) 
;;;580    			{
;;;581    			snmp_trap_send("BAT #1 Warning, high battery temperature",5,8,24); 
;;;582    			snmp_bat_flag_puts[1]|=0x0002;
;;;583    			}
;;;584    		}
;;;585    	else 
;;;586    		{
;;;587    		snmp_bat_flag[1]&=~0x0002;
;;;588    		if(snmp_bat_flag_puts[1]&0x0002) 
;;;589    			{
;;;590    			snmp_trap_send("BAT #1 Warning clear, battery temperature is normal",5,8,25);
;;;591    			snmp_bat_flag_puts[1]&=~0x02;
;;;592    			}
;;;593    		}
;;;594    
;;;595    	if(bat[1]._temper_stat&0x02)  	//Повышенная температура батареи, второй порог - авария
;;;596    		{
;;;597    		snmp_bat_flag[1]|=0x0004;
;;;598    		if((snmp_bat_flag_puts[1]&0x0004)==0) 
;;;599    			{
;;;600    			snmp_trap_send("BAT #1 Alarm, high battery temperature",5,8,26); 
;;;601    			snmp_bat_flag_puts[1]|=0x0004;
;;;602    			}
;;;603    		}
;;;604    	else 
;;;605    		{
;;;606    		snmp_bat_flag[1]&=~0x0004;
;;;607    		if(snmp_bat_flag_puts[1]&0x0004) 
;;;608    			{
;;;609    			snmp_trap_send("BAT #1 Alarm clear, battery temperature is normal",5,8,27);
;;;610    			snmp_bat_flag_puts[1]&=~0x0004;
;;;611    			}
;;;612    		}
;;;613    
;;;614    	if(bat[1]._Ib<(-IKB)) snmp_bat_flag[1]|=0x0008;		//Разряд батареи
;;;615    	else if(bat[1]._Ib>IKB) snmp_bat_flag[1]&=~0x0008;	//Заряд батареи
;;;616    
;;;617    	if((spc_stat==spcKE)&&(spc_bat==0))					//Контроль емкости батареи №1 
;;;618    		{
;;;619    		snmp_bat_flag[1]|=0x0010;
;;;620    		if((snmp_bat_flag_puts[1]&0x0010)==0) 
;;;621    			{
;;;622    			snmp_trap_send("BAT #1, capacity test started",5,8,28); 
;;;623    			snmp_bat_flag_puts[1]|=0x0010;
;;;624    			}
;;;625    		}
;;;626    	else 
;;;627    		{
;;;628    		snmp_bat_flag[1]&=~0x0010;
;;;629    		if(snmp_bat_flag_puts[1]&0x0010) 
;;;630    			{
;;;631    			snmp_trap_send("BAT #1, capacity test stopped",5,8,29);
;;;632    			snmp_bat_flag_puts[1]&=~0x0010;
;;;633    			}
;;;634    		}
;;;635    		
;;;636    	if(spc_stat==spcVZ)									//Выравнивающий заряд 
;;;637    		{
;;;638    		snmp_bat_flag[1]|=0x0020;
;;;639    		if((snmp_bat_flag_puts[1]&0x0020)==0) 
;;;640    			{
;;;641    			snmp_trap_send("BAT #1,leveling charge is started",5,8,30); 
;;;642    			snmp_bat_flag_puts[1]|=0x0020;
;;;643    			}
;;;644    		}
;;;645    	else 
;;;646    		{
;;;647    		snmp_bat_flag[1]&=~0x0020;
;;;648    		if(snmp_bat_flag_puts[1]&0x0020) 
;;;649    			{
;;;650    			snmp_trap_send("BAT #1,leveling charge is stopped",5,8,31);
;;;651    			snmp_bat_flag_puts[1]&=~0x0020;
;;;652    			}
;;;653    		}
;;;654    
;;;655    	if(vz_error)										 //Выравнивающий заряд заблокирован по вентиляции
;;;656    		{
;;;657    		snmp_bat_flag[1]|=0x0040;
;;;658    		if((snmp_bat_flag_puts[1]&0x0040)==0) 
;;;659    			{
;;;660    			snmp_trap_send("BAT #1,leveling charge is blocked",5,8,32); 
;;;661    			snmp_bat_flag_puts[1]|=0x0040;
;;;662    			}
;;;663    		}
;;;664    	else 
;;;665    		{
;;;666    		snmp_bat_flag[1]&=~0x0040;
;;;667    		if(snmp_bat_flag_puts[1]&0x0040) 
;;;668    			{
;;;669    			snmp_trap_send("BAT #1,leveling charge is unblocked",5,8,33);
;;;670    			snmp_bat_flag_puts[1]&=~0x0040;
;;;671    			} 
;;;672    		}
;;;673    
;;;674    	if(sp_ch_stat==scsWRK) 								//Ускореннный заряд
;;;675    		{
;;;676    		snmp_bat_flag[1]|=0x0080;
;;;677    		if((snmp_bat_flag_puts[1]&0x0080)==0) 
;;;678    			{
;;;679    			snmp_trap_send("BAT #1,speed charge is started",5,8,34); 
;;;680    			snmp_bat_flag_puts[1]|=0x0080;
;;;681    			}
;;;682    		}
;;;683    	else 
;;;684    		{
;;;685    		snmp_bat_flag[1]&=~0x0080;
;;;686    		if(snmp_bat_flag_puts[1]&0x0080) 
;;;687    			{
;;;688    			snmp_trap_send("BAT #1,speed charge is stopped",5,8,35);
;;;689    			snmp_bat_flag_puts[1]&=~0x0080;
;;;690    			}
;;;691    		}
;;;692    
;;;693    	if(sp_ch_error) 									//Ускореннный заряд заблокирован по вентиляции
;;;694    		{
;;;695    		snmp_bat_flag[1]|=0x0100;
;;;696    		if((snmp_bat_flag_puts[1]&0x0100)==0) 
;;;697    			{
;;;698    			snmp_trap_send("BAT #1,speed charge is blocked",5,8,36); 
;;;699    			snmp_bat_flag_puts[1]|=0x0100;
;;;700    			}
;;;701    		}
;;;702    	else 
;;;703    		{
;;;704    		snmp_bat_flag[1]&=~0x0100;
;;;705    		if(snmp_bat_flag_puts[1]&0x0100) 
;;;706    			{
;;;707    			snmp_trap_send("BAT #1,speed charge is unblocked",5,8,37);
;;;708    			snmp_bat_flag_puts[1]&=~0x0100;
;;;709    			} 
;;;710    		}
;;;711    
;;;712    	if(vz1_stat!=vz1sOFF)								//Уравнительный заряд 
;;;713    		{
;;;714    		snmp_bat_flag[1]|=0x0200;
;;;715    		if((snmp_bat_flag_puts[1]&0x0200)==0) 
;;;716    			{
;;;717    			snmp_trap_send("BAT #1,equalising charge is on",5,8,38); 
;;;718    			snmp_bat_flag_puts[1]|=0x0200;
;;;719    			}
;;;720    		}
;;;721    	else 
;;;722    		{
;;;723    		snmp_bat_flag[1]&=~0x0200;
;;;724    		if(snmp_bat_flag_puts[1]&0x0200) 
;;;725    			{
;;;726    			snmp_trap_send("BAT #1,equalising charge is off",5,8,39);
;;;727    			snmp_bat_flag_puts[1]&=~0x0200;
;;;728    			}
;;;729    		}
;;;730    
;;;731    	if(vz1_error)										//Уравнительный заряд заблокирован по вентиляции 
;;;732    		{
;;;733    		snmp_bat_flag[1]|=0x0400;
;;;734    		if((snmp_bat_flag_puts[1]&0x0400)==0) 
;;;735    			{
;;;736    			snmp_trap_send("BAT #1,equalising charge is blocked",5,8,40); 
;;;737    			snmp_bat_flag_puts[1]|=0x0400;
;;;738    			}
;;;739    		}
;;;740    	else 
;;;741    		{
;;;742    		snmp_bat_flag[1]&=~0x0400;
;;;743    		if(snmp_bat_flag_puts[1]&0x0400) 
;;;744    			{
;;;745    			snmp_trap_send("BAT #1,equalising charge is unblocked",5,8,41);
;;;746    			snmp_bat_flag_puts[1]&=~0x0400;
;;;747    			} 
;;;748    		}
;;;749    
;;;750    	if(vz2_stat!=vz2sOFF)								//Формовочный заряд 
;;;751    		{
;;;752    		snmp_bat_flag[1]|=0x0800;
;;;753    		if((snmp_bat_flag_puts[1]&0x0800)==0) 
;;;754    			{
;;;755    			snmp_trap_send("BAT #1,molding charge is on",5,8,42); 
;;;756    			snmp_bat_flag_puts[1]|=0x0800;
;;;757    			}
;;;758    		}
;;;759    	else 
;;;760    		{
;;;761    		snmp_bat_flag[1]&=~0x0800;
;;;762    		if(snmp_bat_flag_puts[1]&0x0800) 
;;;763    			{
;;;764    			snmp_trap_send("BAT #1,molding charge is off",5,8,43);
;;;765    			snmp_bat_flag_puts[1]&=~0x0800;
;;;766    			}
;;;767    		}
;;;768    
;;;769    	if(vz2_error) 										//Формовочный заряд заблокирован по вентиляции
;;;770    		{
;;;771    		snmp_bat_flag[1]|=0x1000;
;;;772    		if((snmp_bat_flag_puts[1]&0x1000)==0) 
;;;773    			{
;;;774    			snmp_trap_send("BAT #1,molding charge is blocked",5,8,44); 
;;;775    			snmp_bat_flag_puts[1]|=0x1000;
;;;776    			}
;;;777    		}
;;;778    	else 
;;;779    		{
;;;780    		snmp_bat_flag[1]&=~0x1000;
;;;781    		if(snmp_bat_flag_puts[1]&0x1000) 
;;;782    			{
;;;783    			snmp_trap_send("BAT #1,molding charge is unblocked",5,8,45);
;;;784    			snmp_bat_flag_puts[1]&=~0x1000;
;;;785    			} 
;;;786    		}
;;;787    	}
;;;788    else 
;;;789    	{
;;;790    	snmp_bat_flag[1]=0; 
00003e  88a0              LDRH     r0,[r4,#4]  ; adc_self_ch_buff
;;;791    	snmp_bat_flag_puts[1]=0;
000040  87b0              STRH     r0,[r6,#0x3c]
;;;792    	}
;;;793    /*
;;;794    if(!snmp_bat_status[1])
;;;795    	{
;;;796    	if((bat[1]._Ub<(USIGN*10))) 
;;;797    		{
;;;798    		snmp_bat_flag[1]|=0x01; 
;;;799    		if((snmp_bat_flag_puts[1]&0x01)==0) 
;;;800    			{
;;;801    			snmp_trap_send("BAT #2 Alarm, battery is low",5,8,0); 
;;;802    			snmp_bat_flag_puts[1]|=0x01;
;;;803    			}
;;;804    		}
;;;805    	else 
;;;806    		{
;;;807    		snmp_bat_flag[1]&=~0x01; 
;;;808    		if(snmp_bat_flag_puts[1]&0x01) 
;;;809    			{
;;;810    			snmp_trap_send("BAT #2 Alarm clear, battery is not low",5,8,1);
;;;811    			snmp_bat_flag_puts[1]&=~0x01;
;;;812    			}
;;;813    		}
;;;814    	if(bat[1]._temper_stat&0x01) 
;;;815    		{
;;;816    		snmp_bat_flag[1]|=0x02;
;;;817    		if((snmp_bat_flag_puts[1]&0x02)==0) 
;;;818    			{
;;;819    			snmp_trap_send("BAT #2 Alarm, high battery temperature",5,8,2); 
;;;820    			snmp_bat_flag_puts[1]|=0x02;
;;;821    			}
;;;822    		}
;;;823    	else 
;;;824    		{
;;;825    		snmp_bat_flag[1]&=~0x02;
;;;826    		if(snmp_bat_flag_puts[1]&0x02) 
;;;827    			{
;;;828    			snmp_trap_send("BAT #2 Alarm clear, battery temperature is normal",5,8,3);
;;;829    			snmp_bat_flag_puts[1]&=~0x02;
;;;830    			}
;;;831    		}
;;;832    	if(bat[1]._temper_stat&0x02) 
;;;833    		{
;;;834    		snmp_bat_flag[1]|=0x04;
;;;835    		if((snmp_bat_flag_puts[1]&0x04)==0) 
;;;836    			{
;;;837    			snmp_trap_send("BAT #2 Alarm, maximum battery temperature",5,8,4); 
;;;838    			snmp_bat_flag_puts[1]|=0x04;
;;;839    			}
;;;840    		}
;;;841    	else 
;;;842    		{
;;;843    		snmp_bat_flag[1]&=~0x04;
;;;844    		if(snmp_bat_flag_puts[1]&0x04) 
;;;845    			{
;;;846    			snmp_trap_send("BAT #2 Alarm clear, battery temperature is normal",5,8,5);
;;;847    			snmp_bat_flag_puts[1]&=~0x04;
;;;848    			}
;;;849    		}
;;;850    		
;;;851    	if(bat[1]._Ib<(-IKB))	snmp_bat_flag[1]|=0x80;
;;;852    	else if(bat[1]._Ib>IKB)snmp_bat_flag[1]&=~0x80;
;;;853    
;;;854    	if((spc_stat==spcKE)&&(spc_bat==1)) 
;;;855    		{
;;;856    		snmp_bat_flag[1]|=0x10;
;;;857    		if((snmp_bat_flag_puts[1]&0x10)==0) 
;;;858    			{
;;;859    			snmp_trap_send("BAT #2, capacity check enabled",5,8,6); 
;;;860    			snmp_bat_flag_puts[1]|=0x10;
;;;861    			}
;;;862    		}
;;;863    	else 
;;;864    		{
;;;865    		snmp_bat_flag[1]&=~0x10;
;;;866    		if(snmp_bat_flag_puts[1]&0x10) 
;;;867    			{
;;;868    			snmp_trap_send("BAT #2, capacity check disabled",5,8,7);
;;;869    			snmp_bat_flag_puts[1]&=~0x10;
;;;870    			}
;;;871    		}
;;;872    		
;;;873    	if(spc_stat==spcVZ) 
;;;874    		{
;;;875    		snmp_bat_flag[1]|=0x20;
;;;876    		if((snmp_bat_flag_puts[1]&0x20)==0) 
;;;877    			{
;;;878    			snmp_trap_send("BAT #2,equalizing charge is on",5,8,8); 
;;;879    			snmp_bat_flag_puts[1]|=0x20;
;;;880    			}
;;;881    		}
;;;882    	else 
;;;883    		{
;;;884    		snmp_bat_flag[1]&=~0x20;
;;;885    		if(snmp_bat_flag_puts[1]&0x20) 
;;;886    			{
;;;887    			snmp_trap_send("BAT #2,equalizing charge is off",5,8,9);
;;;888    			snmp_bat_flag_puts[1]&=~0x20;
;;;889    			}
;;;890    		}
;;;891    
;;;892    	if(vz_error) 
;;;893    		{
;;;894    		snmp_bat_flag[1]|=0x40;
;;;895    		if((snmp_bat_flag_puts[1]&0x40)==0) 
;;;896    			{
;;;897    			snmp_trap_send("BAT #2,equalizing charge blocked",5,8,10); 
;;;898    			snmp_bat_flag_puts[1]|=0x40;
;;;899    			}
;;;900    		}
;;;901    	else 
;;;902    		{
;;;903    		snmp_bat_flag[1]&=~0x40;
;;;904    		if(snmp_bat_flag_puts[1]&0x40) 
;;;905    			{
;;;906    			snmp_trap_send("BAT #2,equalizing charge is not blocked",5,8,11);
;;;907    			snmp_bat_flag_puts[1]&=~0x40;
;;;908    			} 
;;;909    		}
;;;910       }
;;;911    else 
;;;912    	{
;;;913    	snmp_bat_flag[1]=0; 
;;;914    	snmp_bat_flag_puts[1]=0;
;;;915    	} */
;;;916    }
000042  e00c              B        |L3.94|
                  |L3.68|
000044  f9b50002          LDRSH    r0,[r5,#2]  ; adc_self_ch_disp
000048  4288              CMP      r0,r1                 ;318
00004a  da02              BGE      |L3.82|
00004c  8860              LDRH     r0,[r4,#2]            ;318  ; adc_self_ch_buff
00004e  87b0              STRH     r0,[r6,#0x3c]         ;318
000050  e005              B        |L3.94|
                  |L3.82|
000052  f9b50000          LDRSH    r0,[r5,#0]            ;320  ; adc_self_ch_disp
000056  4288              CMP      r0,r1                 ;318
000058  da01              BGE      |L3.94|
00005a  8820              LDRH     r0,[r4,#0]            ;320  ; adc_self_ch_buff
00005c  87b0              STRH     r0,[r6,#0x3c]         ;321
                  |L3.94|
00005e  7c77              LDRB     r7,[r6,#0x11]         ;321  ; adc_ch_net
000060  2200              MOVS     r2,#0                 ;321
000062  b3ef              CBZ      r7,|L3.224|
000064  7d33              LDRB     r3,[r6,#0x14]         ;320  ; adc_window_flag
000066  486b              LDR      r0,|L3.532|
000068  b18b              CBZ      r3,|L3.142|
00006a  f9b6103c          LDRSH    r1,[r6,#0x3c]         ;321  ; adc_result
00006e  6804              LDR      r4,[r0,#0]            ;323  ; main_power_buffer
000070  eb0404a1          ADD      r4,r4,r1,ASR #2       ;323
000074  6004              STR      r4,[r0,#0]            ;323  ; main_power_buffer
000076  6844              LDR      r4,[r0,#4]            ;323  ; main_power_buffer
000078  eb0404a1          ADD      r4,r4,r1,ASR #2       ;323
00007c  6044              STR      r4,[r0,#4]            ;324  ; main_power_buffer
00007e  6884              LDR      r4,[r0,#8]            ;324  ; main_power_buffer
000080  eb0404a1          ADD      r4,r4,r1,ASR #2       ;324
000084  6084              STR      r4,[r0,#8]            ;329  ; main_power_buffer
000086  68c4              LDR      r4,[r0,#0xc]          ;329  ; main_power_buffer
000088  eb0401a1          ADD      r1,r4,r1,ASR #2       ;329
00008c  60c1              STR      r1,[r0,#0xc]          ;330  ; main_power_buffer
                  |L3.142|
00008e  f9b6103c          LDRSH    r1,[r6,#0x3c]         ;332  ; adc_result
000092  2964              CMP      r1,#0x64              ;332
000094  da06              BGE      |L3.164|
000096  f8b61040          LDRH     r1,[r6,#0x40]         ;332  ; adc_zero_cnt
00009a  f1010101          ADD      r1,r1,#1              ;333
00009e  f8a61040          STRH     r1,[r6,#0x40]         ;333
0000a2  e001              B        |L3.168|
                  |L3.164|
0000a4  f8a62040          STRH     r2,[r6,#0x40]         ;337
                  |L3.168|
0000a8  f9b64040          LDRSH    r4,[r6,#0x40]         ;337  ; adc_zero_cnt
0000ac  f44f61fa          MOV      r1,#0x7d0             ;339
0000b0  428c              CMP      r4,r1                 ;339
0000b2  db06              BLT      |L3.194|
0000b4  f8a61040          STRH     r1,[r6,#0x40]         ;340
0000b8  6002              STR      r2,[r0,#0]            ;342  ; main_power_buffer
0000ba  6042              STR      r2,[r0,#4]            ;342  ; main_power_buffer
0000bc  6082              STR      r2,[r0,#8]            ;342  ; main_power_buffer
0000be  60c2              STR      r2,[r0,#0xc]          ;342  ; main_power_buffer
0000c0  8772              STRH     r2,[r6,#0x3a]         ;342
                  |L3.194|
0000c2  f8b61040          LDRH     r1,[r6,#0x40]         ;342  ; adc_zero_cnt
0000c6  2905              CMP      r1,#5                 ;343
0000c8  d14f              BNE      |L3.362|
0000ca  b1bb              CBZ      r3,|L3.252|
0000cc  8ff1              LDRH     r1,[r6,#0x3e]         ;343  ; adc_gorb_cnt
0000ce  f1010101          ADD      r1,r1,#1              ;348
0000d2  b209              SXTH     r1,r1                 ;348
0000d4  87f1              STRH     r1,[r6,#0x3e]         ;348
0000d6  f5b17f00          CMP      r1,#0x200             ;349
0000da  db00              BLT      |L3.222|
0000dc  87f2              STRH     r2,[r6,#0x3e]         ;351
                  |L3.222|
0000de  e000              B        |L3.226|
                  |L3.224|
0000e0  e01b              B        |L3.282|
                  |L3.226|
0000e2  f9b6103e          LDRSH    r1,[r6,#0x3e]         ;351  ; adc_gorb_cnt
0000e6  064c              LSLS     r4,r1,#25             ;351
0000e8  d108              BNE      |L3.252|
0000ea  ea4f11e1          ASR      r1,r1,#7              ;352
0000ee  f8504021          LDR      r4,[r0,r1,LSL #2]     ;352
0000f2  ea4f2424          ASR      r4,r4,#8              ;356
0000f6  8774              STRH     r4,[r6,#0x3a]         ;356
0000f8  f8402021          STR      r2,[r0,r1,LSL #2]     ;358
                  |L3.252|
0000fc  f9b60042          LDRSH    r0,[r6,#0x42]         ;358  ; adc_window_cnt
000100  2896              CMP      r0,#0x96              ;359
000102  dd01              BLE      |L3.264|
000104  b103              CBZ      r3,|L3.264|
000106  7532              STRB     r2,[r6,#0x14]         ;361
                  |L3.264|
000108  381f              SUBS     r0,r0,#0x1f           ;361
00010a  2827              CMP      r0,#0x27              ;361
00010c  d22d              BCS      |L3.362|
00010e  7d30              LDRB     r0,[r6,#0x14]         ;361  ; adc_window_flag
000110  bb58              CBNZ     r0,|L3.362|
000112  f04f0001          MOV      r0,#1                 ;362
000116  7530              STRB     r0,[r6,#0x14]         ;362
000118  e027              B        |L3.362|
                  |L3.282|
00011a  483f              LDR      r0,|L3.536|
00011c  7cb5              LDRB     r5,[r6,#0x12]         ;367  ; adc_ch
00011e  7cf3              LDRB     r3,[r6,#0x13]         ;367  ; adc_ch_cnt
000120  eb001485          ADD      r4,r0,r5,LSL #6       ;367
000124  f9b6103c          LDRSH    r1,[r6,#0x3c]         ;368  ; adc_result
000128  f8441023          STR      r1,[r4,r3,LSL #2]     ;368
00012c  0798              LSLS     r0,r3,#30             ;370
00012e  d10f              BNE      |L3.336|
000130  4601              MOV      r1,r0                 ;370
                  |L3.306|
000132  f854c020          LDR      r12,[r4,r0,LSL #2]    ;370
000136  4461              ADD      r1,r1,r12             ;371
000138  f1000001          ADD      r0,r0,#1              ;371
00013c  b2c0              UXTB     r0,r0                 ;371
00013e  2810              CMP      r0,#0x10              ;371
000140  d3f7              BCC      |L3.306|
000142  ea4f1021          ASR      r0,r1,#4              ;375
000146  4933              LDR      r1,|L3.532|
000148  f1a10120          SUB      r1,r1,#0x20           ;375
00014c  f8210015          STRH     r0,[r1,r5,LSL #1]     ;375
                  |L3.336|
000150  1c6d              ADDS     r5,r5,#1              ;375
000152  b2e8              UXTB     r0,r5                 ;375
000154  74b0              STRB     r0,[r6,#0x12]         ;375
000156  2810              CMP      r0,#0x10              ;375
000158  d307              BCC      |L3.362|
00015a  74b2              STRB     r2,[r6,#0x12]         ;376
00015c  f1030301          ADD      r3,r3,#1              ;376
000160  b2d8              UXTB     r0,r3                 ;376
000162  74f0              STRB     r0,[r6,#0x13]         ;376
000164  2810              CMP      r0,#0x10              ;376
000166  d300              BCC      |L3.362|
000168  74f2              STRB     r2,[r6,#0x13]         ;378
                  |L3.362|
00016a  7432              STRB     r2,[r6,#0x10]         ;378
00016c  f1070701          ADD      r7,r7,#1              ;378
000170  f0070001          AND      r0,r7,#1              ;378
000174  7470              STRB     r0,[r6,#0x11]         ;378
000176  4a29              LDR      r2,|L3.540|
000178  b130              CBZ      r0,|L3.392|
00017a  6810              LDR      r0,[r2,#0]            ;389
00017c  f02000ff          BIC      r0,r0,#0xff           ;389
000180  f1000004          ADD      r0,r0,#4              ;390
000184  6010              STR      r0,[r2,#0]            ;392
000186  e03d              B        |L3.516|
                  |L3.392|
000188  7cb1              LDRB     r1,[r6,#0x12]         ;392  ; adc_ch
00018a  0708              LSLS     r0,r1,#28             ;392
00018c  d406              BMI      |L3.412|
00018e  6810              LDR      r0,[r2,#0]            ;392
000190  f02000ff          BIC      r0,r0,#0xff           ;393
000194  f1000001          ADD      r0,r0,#1              ;393
000198  6010              STR      r0,[r2,#0]            ;397
00019a  e005              B        |L3.424|
                  |L3.412|
00019c  6810              LDR      r0,[r2,#0]            ;397
00019e  f02000ff          BIC      r0,r0,#0xff           ;397
0001a2  f1000002          ADD      r0,r0,#2              ;408
0001a6  6010              STR      r0,[r2,#0]            ;408
                  |L3.424|
0001a8  481d              LDR      r0,|L3.544|
0001aa  6803              LDR      r3,[r0,#0]            ;409
0001ac  f0435380          ORR      r3,r3,#0x10000000     ;409
0001b0  6003              STR      r3,[r0,#0]            ;411
0001b2  6a03              LDR      r3,[r0,#0x20]         ;411
0001b4  f0434380          ORR      r3,r3,#0x40000000     ;411
0001b8  6203              STR      r3,[r0,#0x20]         ;411
0001ba  6e03              LDR      r3,[r0,#0x60]         ;412
0001bc  f0436380          ORR      r3,r3,#0x4000000      ;412
0001c0  6603              STR      r3,[r0,#0x60]         ;412
0001c2  07cb              LSLS     r3,r1,#31             ;416
0001c4  d00a              BEQ      |L3.476|
0001c6  6943              LDR      r3,[r0,#0x14]         ;416
0001c8  f0435380          ORR      r3,r3,#0x10000000     ;418
0001cc  6143              STR      r3,[r0,#0x14]         ;418
                  |L3.462|
0001ce  078b              LSLS     r3,r1,#30             ;418
0001d0  d409              BMI      |L3.486|
0001d2  6b43              LDR      r3,[r0,#0x34]         ;419
0001d4  f0234380          BIC      r3,r3,#0x40000000     ;419
0001d8  6343              STR      r3,[r0,#0x34]         ;421
0001da  e008              B        |L3.494|
                  |L3.476|
0001dc  6943              LDR      r3,[r0,#0x14]         ;421
0001de  f0235380          BIC      r3,r3,#0x10000000     ;421
0001e2  6143              STR      r3,[r0,#0x14]         ;422
0001e4  e7f3              B        |L3.462|
                  |L3.486|
0001e6  6b43              LDR      r3,[r0,#0x34]         ;422
0001e8  f0434380          ORR      r3,r3,#0x40000000     ;422
0001ec  6343              STR      r3,[r0,#0x34]         ;380
                  |L3.494|
0001ee  0749              LSLS     r1,r1,#29             ;380
0001f0  d404              BMI      |L3.508|
0001f2  6f41              LDR      r1,[r0,#0x74]         ;380
0001f4  f0216180          BIC      r1,r1,#0x4000000      ;381
0001f8  6741              STR      r1,[r0,#0x74]         ;381
0001fa  e003              B        |L3.516|
                  |L3.508|
0001fc  6f41              LDR      r1,[r0,#0x74]         ;383
0001fe  f0416180          ORR      r1,r1,#0x4000000      ;383
000202  6741              STR      r1,[r0,#0x74]         ;383
                  |L3.516|
000204  6810              LDR      r0,[r2,#0]            ;383
000206  f0407080          ORR      r0,r0,#0x1000000      ;384
00020a  6010              STR      r0,[r2,#0]            ;384
00020c  e8bd81f0          POP      {r4-r8,pc}            ;384
;;;917    
                          ENDP

                  |L3.528|
                          DCD      ||area_number.25||+0xee
                  |L3.532|
                          DCD      ||.bss||+0x42c
                  |L3.536|
                          DCD      ||.bss||+0xc
                  |L3.540|
                          DCD      0x40034000
                  |L3.544|
                          DCD      0x2009c000

                          AREA ||area_number.4||, CODE, READONLY, ALIGN=2

                          EXPORTAS ||area_number.4||, ||.text||
                  ips_current_average_hndl_ PROC
;;;305    // заполнение флагов для АКБ
;;;306    void bat_flag (void)
000000  e92d43f0          PUSH     {r4-r9,lr}
;;;307    {  
;;;308    if(spc_stat!=spcVZ) 
000004  b085              SUB      sp,sp,#0x14
;;;309    	{
;;;310    	vz_error=0;
000006  4c64              LDR      r4,|L4.408|
000008  4e64              LDR      r6,|L4.412|
00000a  2500              MOVS     r5,#0                 ;308
00000c  7820              LDRB     r0,[r4,#0]            ;308  ; ica_timer_cnt
00000e  1c40              ADDS     r0,r0,#1              ;308
000010  b2c0              UXTB     r0,r0
;;;311    	sp_ch_error=0;
000012  7020              STRB     r0,[r4,#0]
;;;312    	vz1_error=0;
000014  280a              CMP      r0,#0xa
;;;313    	vz2_error=0;
000016  d340              BCC      |L4.154|
;;;314    	}
;;;315    
;;;316    if(!snmp_bat_status[0])	 			//Батарея №1
000018  7025              STRB     r5,[r4,#0]
00001a  f8dfc184          LDR      r12,|L4.416|
;;;317    	{
;;;318    	if((bat[0]._Ub<(USIGN*10)))		//Снижение напряжения батареи ниже Uбсигн 
00001e  f89c0000          LDRB     r0,[r12,#0]  ; ica_plazma
000022  f1000001          ADD      r0,r0,#1
000026  f88c0000          STRB     r0,[r12,#0]           ;316
;;;319    		{
;;;320    		snmp_bat_flag[0]|=0x0001; 
;;;321    		if((snmp_bat_flag_puts[0]&0x0001)==0) 
;;;322    			{
;;;323    			snmp_trap_send("BAT #1 Alarm, battery is low",5,8,0); 
;;;324    			snmp_bat_flag_puts[0]|=0x0001;
;;;325    			}
;;;326    		}
;;;327    	else 
;;;328    		{
;;;329    		snmp_bat_flag[0]&=~0x0001; 
;;;330    		if(snmp_bat_flag_puts[0]&0x0001) 
;;;331    			{
;;;332    			snmp_trap_send("BAT #1 Alarm clear, battery is not low",5,8,1);
;;;333    			snmp_bat_flag_puts[0]&=~0x0001;
;;;334    			}
;;;335    		}
;;;336    
;;;337    	if(bat[0]._temper_stat&0x01)	//Повышенная температура батареи, первый порог - предупреждение
;;;338    		{
;;;339    		snmp_bat_flag[0]|=0x0002;
;;;340    		if((snmp_bat_flag_puts[0]&0x0002)==0) 
;;;341    			{
;;;342    			snmp_trap_send("BAT #1 Warning, high battery temperature",5,8,2); 
;;;343    			snmp_bat_flag_puts[0]|=0x0002;
;;;344    			}
;;;345    		}
;;;346    	else 
;;;347    		{
;;;348    		snmp_bat_flag[0]&=~0x0002;
;;;349    		if(snmp_bat_flag_puts[0]&0x0002) 
;;;350    			{
;;;351    			snmp_trap_send("BAT #1 Warning clear, battery temperature is normal",5,8,3);
;;;352    			snmp_bat_flag_puts[0]&=~0x02;
;;;353    			}
;;;354    		}
;;;355    
;;;356    	if(bat[0]._temper_stat&0x02)  	//Повышенная температура батареи, второй порог - авария
;;;357    		{
;;;358    		snmp_bat_flag[0]|=0x0004;
;;;359    		if((snmp_bat_flag_puts[0]&0x0004)==0) 
;;;360    			{
;;;361    			snmp_trap_send("BAT #1 Alarm, high battery temperature",5,8,4); 
;;;362    			snmp_bat_flag_puts[0]|=0x0004;
;;;363    			}
;;;364    		}
;;;365    	else 
;;;366    		{
;;;367    		snmp_bat_flag[0]&=~0x0004;
;;;368    		if(snmp_bat_flag_puts[0]&0x0004) 
;;;369    			{
;;;370    			snmp_trap_send("BAT #1 Alarm clear, battery temperature is normal",5,8,5);
;;;371    			snmp_bat_flag_puts[0]&=~0x0004;
;;;372    			}
;;;373    		}
;;;374    
;;;375    	if(bat[0]._Ib<(-IKB)) snmp_bat_flag[0]|=0x0008;		//Разряд батареи
00002a  485e              LDR      r0,|L4.420|
00002c  495e              LDR      r1,|L4.424|
00002e  f9b00000          LDRSH    r0,[r0,#0]            ;321  ; bps_I
;;;376    	else if(bat[0]._Ib>IKB) snmp_bat_flag[0]&=~0x0008;	//Заряд батареи
;;;377    
;;;378    	if((spc_stat==spcKE)&&(spc_bat==0))					//Контроль емкости батареи №1 
;;;379    		{
;;;380    		snmp_bat_flag[0]|=0x0010;
;;;381    		if((snmp_bat_flag_puts[0]&0x0010)==0) 
;;;382    			{
;;;383    			snmp_trap_send("BAT #1, capacity test started",5,8,6); 
;;;384    			snmp_bat_flag_puts[0]|=0x0010;
;;;385    			}
;;;386    		}
;;;387    	else 
;;;388    		{
;;;389    		snmp_bat_flag[0]&=~0x0010;
;;;390    		if(snmp_bat_flag_puts[0]&0x0010) 
;;;391    			{
;;;392    			snmp_trap_send("BAT #1, capacity test stopped",5,8,7);
;;;393    			snmp_bat_flag_puts[0]&=~0x0010;
;;;394    			}
;;;395    		}
;;;396    		
;;;397    	if(spc_stat==spcVZ)									//Выравнивающий заряд 
;;;398    		{
;;;399    		snmp_bat_flag[0]|=0x0020;
;;;400    		if((snmp_bat_flag_puts[0]&0x0020)==0) 
;;;401    			{
;;;402    			snmp_trap_send("BAT #1,leveling charge is started",5,8,8); 
;;;403    			snmp_bat_flag_puts[0]|=0x0020;
;;;404    			}
;;;405    		}
;;;406    	else 
;;;407    		{
;;;408    		snmp_bat_flag[0]&=~0x0020;
;;;409    		if(snmp_bat_flag_puts[0]&0x0020) 
;;;410    			{
;;;411    			snmp_trap_send("BAT #1,leveling charge is stopped",5,8,9);
;;;412    			snmp_bat_flag_puts[0]&=~0x0020;
;;;413    			}
;;;414    		}
;;;415    
;;;416    	if(vz_error)										 //Выравнивающий заряд заблокирован по вентиляции
;;;417    		{
;;;418    		snmp_bat_flag[0]|=0x0040;
;;;419    		if((snmp_bat_flag_puts[0]&0x0040)==0) 
;;;420    			{
;;;421    			snmp_trap_send("BAT #1,leveling charge is blocked",5,8,10); 
;;;422    			snmp_bat_flag_puts[0]|=0x0040;
;;;423    			}
;;;424    		}
;;;425    	else 
;;;426    		{
;;;427    		snmp_bat_flag[0]&=~0x0040;
;;;428    		if(snmp_bat_flag_puts[0]&0x0040) 
;;;429    			{
;;;430    			snmp_trap_send("BAT #1,leveling charge is unblocked",5,8,11);
;;;431    			snmp_bat_flag_puts[0]&=~0x0040;
;;;432    			} 
;;;433    		}
;;;434    
;;;435    	if(sp_ch_stat==scsWRK) 								//Ускореннный заряд
;;;436    		{
;;;437    		snmp_bat_flag[0]|=0x0080;
;;;438    		if((snmp_bat_flag_puts[0]&0x0080)==0) 
;;;439    			{
;;;440    			snmp_trap_send("BAT #1,speed charge is started",5,8,10); 
;;;441    			snmp_bat_flag_puts[0]|=0x0080;
;;;442    			}
;;;443    		}
;;;444    	else 
;;;445    		{
;;;446    		snmp_bat_flag[0]&=~0x0080;
;;;447    		if(snmp_bat_flag_puts[0]&0x0080) 
;;;448    			{
;;;449    			snmp_trap_send("BAT #1,speed charge is stopped",5,8,11);
;;;450    			snmp_bat_flag_puts[0]&=~0x0080;
;;;451    			}
;;;452    		}
;;;453    
;;;454    	if(sp_ch_error) 									//Ускореннный заряд заблокирован по вентиляции
;;;455    		{
;;;456    		snmp_bat_flag[0]|=0x0100;
;;;457    		if((snmp_bat_flag_puts[0]&0x0100)==0) 
;;;458    			{
;;;459    			snmp_trap_send("BAT #1,speed charge is blocked",5,8,12); 
;;;460    			snmp_bat_flag_puts[0]|=0x0100;
;;;461    			}
;;;462    		}
;;;463    	else 
;;;464    		{
;;;465    		snmp_bat_flag[0]&=~0x0100;
;;;466    		if(snmp_bat_flag_puts[0]&0x0100) 
;;;467    			{
;;;468    			snmp_trap_send("BAT #1,speed charge is unblocked",5,8,13);
;;;469    			snmp_bat_flag_puts[0]&=~0x0100;
;;;470    			} 
;;;471    		}
;;;472    
;;;473    	if(vz1_stat!=vz1sOFF)								//Уравнительный заряд 
;;;474    		{
;;;475    		snmp_bat_flag[0]|=0x0200;
;;;476    		if((snmp_bat_flag_puts[0]&0x0200)==0) 
;;;477    			{
;;;478    			snmp_trap_send("BAT #1,equalising charge is on",5,8,14); 
;;;479    			snmp_bat_flag_puts[0]|=0x0200;
;;;480    			}
;;;481    		}
;;;482    	else 
;;;483    		{
;;;484    		snmp_bat_flag[0]&=~0x0200;
;;;485    		if(snmp_bat_flag_puts[0]&0x0200) 
;;;486    			{
;;;487    			snmp_trap_send("BAT #1,equalising charge is off",5,8,15);
;;;488    			snmp_bat_flag_puts[0]&=~0x0200;
;;;489    			}
;;;490    		}
;;;491    
;;;492    	if(vz1_error)										//Уравнительный заряд заблокирован по вентиляции 
;;;493    		{
;;;494    		snmp_bat_flag[0]|=0x0400;
;;;495    		if((snmp_bat_flag_puts[0]&0x0400)==0) 
;;;496    			{
;;;497    			snmp_trap_send("BAT #1,equalising charge is blocked",5,8,16); 
;;;498    			snmp_bat_flag_puts[0]|=0x0400;
;;;499    			}
;;;500    		}
;;;501    	else 
;;;502    		{
;;;503    		snmp_bat_flag[0]&=~0x0400;
;;;504    		if(snmp_bat_flag_puts[0]&0x0400) 
;;;505    			{
;;;506    			snmp_trap_send("BAT #1,equalising charge is unblocked",5,8,17);
;;;507    			snmp_bat_flag_puts[0]&=~0x0400;
;;;508    			} 
;;;509    		}
;;;510    
;;;511    	if(vz2_stat!=vz2sOFF)								//Формовочный заряд 
;;;512    		{
;;;513    		snmp_bat_flag[0]|=0x0800;
;;;514    		if((snmp_bat_flag_puts[0]&0x0800)==0) 
;;;515    			{
;;;516    			snmp_trap_send("BAT #1,molding charge is on",5,8,18); 
;;;517    			snmp_bat_flag_puts[0]|=0x0800;
;;;518    			}
;;;519    		}
;;;520    	else 
;;;521    		{
;;;522    		snmp_bat_flag[0]&=~0x0800;
;;;523    		if(snmp_bat_flag_puts[0]&0x0800) 
;;;524    			{
;;;525    			snmp_trap_send("BAT #1,molding charge is off",5,8,19);
;;;526    			snmp_bat_flag_puts[0]&=~0x0800;
;;;527    			}
;;;528    		}
;;;529    
;;;530    	if(vz2_error) 										//Формовочный заряд заблокирован по вентиляции
;;;531    		{
;;;532    		snmp_bat_flag[0]|=0x1000;
;;;533    		if((snmp_bat_flag_puts[0]&0x1000)==0) 
;;;534    			{
;;;535    			snmp_trap_send("BAT #1,molding charge is blocked",5,8,20); 
;;;536    			snmp_bat_flag_puts[0]|=0x1000;
;;;537    			}
;;;538    		}
;;;539    	else 
;;;540    		{
;;;541    		snmp_bat_flag[0]&=~0x1000;
;;;542    		if(snmp_bat_flag_puts[0]&0x1000) 
;;;543    			{
;;;544    			snmp_trap_send("BAT #1,molding charge is unblocked",5,8,21);
;;;545    			snmp_bat_flag_puts[0]&=~0x1000;
;;;546    			} 
;;;547    		}
;;;548    	}
;;;549    else 
;;;550    	{
;;;551    	snmp_bat_flag[0]=0; 
000032  8008              STRH     r0,[r1,#0]
;;;552    	snmp_bat_flag_puts[0]=0;
000034  495d              LDR      r1,|L4.428|
;;;553    	}
;;;554    
;;;555    if(!snmp_bat_status[1])	 			//Батарея №2
000036  f8df8178          LDR      r8,|L4.432|
00003a  4662              MOV      r2,r12
00003c  4637              MOV      r7,r6
;;;556    	{
;;;557    	if((bat[1]._Ub<(USIGN*10)))		//Снижение напряжения батареи ниже Uбсигн 
;;;558    		{
;;;559    		snmp_bat_flag[1]|=0x0001; 
;;;560    		if((snmp_bat_flag_puts[1]&0x0001)==0) 
;;;561    			{
;;;562    			snmp_trap_send("BAT #1 Alarm, battery is low",5,8,22); 
;;;563    			snmp_bat_flag_puts[1]|=0x0001;
;;;564    			}
;;;565    		}
;;;566    	else 
;;;567    		{
;;;568    		snmp_bat_flag[1]&=~0x0001; 
;;;569    		if(snmp_bat_flag_puts[1]&0x0001) 
;;;570    			{
;;;571    			snmp_trap_send("BAT #1 Alarm clear, battery is not low",5,8,23);
;;;572    			snmp_bat_flag_puts[1]&=~0x0001;
;;;573    			}
;;;574    		}
;;;575    
;;;576    	if(bat[1]._temper_stat&0x01)	//Повышенная температура батареи, первый порог - предупреждение
;;;577    		{
;;;578    		snmp_bat_flag[1]|=0x0002;
;;;579    		if((snmp_bat_flag_puts[0]&0x0002)==0) 
;;;580    			{
;;;581    			snmp_trap_send("BAT #1 Warning, high battery temperature",5,8,24); 
;;;582    			snmp_bat_flag_puts[1]|=0x0002;
;;;583    			}
;;;584    		}
;;;585    	else 
;;;586    		{
;;;587    		snmp_bat_flag[1]&=~0x0002;
;;;588    		if(snmp_bat_flag_puts[1]&0x0002) 
;;;589    			{
;;;590    			snmp_trap_send("BAT #1 Warning clear, battery temperature is normal",5,8,25);
;;;591    			snmp_bat_flag_puts[1]&=~0x02;
;;;592    			}
;;;593    		}
;;;594    
;;;595    	if(bat[1]._temper_stat&0x02)  	//Повышенная температура батареи, второй порог - авария
;;;596    		{
;;;597    		snmp_bat_flag[1]|=0x0004;
;;;598    		if((snmp_bat_flag_puts[1]&0x0004)==0) 
;;;599    			{
;;;600    			snmp_trap_send("BAT #1 Alarm, high battery temperature",5,8,26); 
;;;601    			snmp_bat_flag_puts[1]|=0x0004;
;;;602    			}
;;;603    		}
;;;604    	else 
;;;605    		{
;;;606    		snmp_bat_flag[1]&=~0x0004;
;;;607    		if(snmp_bat_flag_puts[1]&0x0004) 
;;;608    			{
;;;609    			snmp_trap_send("BAT #1 Alarm clear, battery temperature is normal",5,8,27);
;;;610    			snmp_bat_flag_puts[1]&=~0x0004;
;;;611    			}
;;;612    		}
;;;613    
;;;614    	if(bat[1]._Ib<(-IKB)) snmp_bat_flag[1]|=0x0008;		//Разряд батареи
;;;615    	else if(bat[1]._Ib>IKB) snmp_bat_flag[1]&=~0x0008;	//Заряд батареи
;;;616    
;;;617    	if((spc_stat==spcKE)&&(spc_bat==0))					//Контроль емкости батареи №1 
;;;618    		{
;;;619    		snmp_bat_flag[1]|=0x0010;
;;;620    		if((snmp_bat_flag_puts[1]&0x0010)==0) 
;;;621    			{
;;;622    			snmp_trap_send("BAT #1, capacity test started",5,8,28); 
;;;623    			snmp_bat_flag_puts[1]|=0x0010;
;;;624    			}
;;;625    		}
;;;626    	else 
;;;627    		{
;;;628    		snmp_bat_flag[1]&=~0x0010;
;;;629    		if(snmp_bat_flag_puts[1]&0x0010) 
;;;630    			{
;;;631    			snmp_trap_send("BAT #1, capacity test stopped",5,8,29);
;;;632    			snmp_bat_flag_puts[1]&=~0x0010;
;;;633    			}
;;;634    		}
;;;635    		
;;;636    	if(spc_stat==spcVZ)									//Выравнивающий заряд 
;;;637    		{
;;;638    		snmp_bat_flag[1]|=0x0020;
;;;639    		if((snmp_bat_flag_puts[1]&0x0020)==0) 
;;;640    			{
;;;641    			snmp_trap_send("BAT #1,leveling charge is started",5,8,30); 
;;;642    			snmp_bat_flag_puts[1]|=0x0020;
;;;643    			}
;;;644    		}
;;;645    	else 
;;;646    		{
;;;647    		snmp_bat_flag[1]&=~0x0020;
;;;648    		if(snmp_bat_flag_puts[1]&0x0020) 
;;;649    			{
;;;650    			snmp_trap_send("BAT #1,leveling charge is stopped",5,8,31);
;;;651    			snmp_bat_flag_puts[1]&=~0x0020;
;;;652    			}
;;;653    		}
;;;654    
;;;655    	if(vz_error)										 //Выравнивающий заряд заблокирован по вентиляции
;;;656    		{
;;;657    		snmp_bat_flag[1]|=0x0040;
;;;658    		if((snmp_bat_flag_puts[1]&0x0040)==0) 
;;;659    			{
;;;660    			snmp_trap_send("BAT #1,leveling charge is blocked",5,8,32); 
;;;661    			snmp_bat_flag_puts[1]|=0x0040;
;;;662    			}
;;;663    		}
;;;664    	else 
;;;665    		{
;;;666    		snmp_bat_flag[1]&=~0x0040;
;;;667    		if(snmp_bat_flag_puts[1]&0x0040) 
;;;668    			{
;;;669    			snmp_trap_send("BAT #1,leveling charge is unblocked",5,8,33);
;;;670    			snmp_bat_flag_puts[1]&=~0x0040;
;;;671    			} 
;;;672    		}
;;;673    
;;;674    	if(sp_ch_stat==scsWRK) 								//Ускореннный заряд
;;;675    		{
;;;676    		snmp_bat_flag[1]|=0x0080;
;;;677    		if((snmp_bat_flag_puts[1]&0x0080)==0) 
;;;678    			{
;;;679    			snmp_trap_send("BAT #1,speed charge is started",5,8,34); 
;;;680    			snmp_bat_flag_puts[1]|=0x0080;
;;;681    			}
;;;682    		}
;;;683    	else 
;;;684    		{
;;;685    		snmp_bat_flag[1]&=~0x0080;
;;;686    		if(snmp_bat_flag_puts[1]&0x0080) 
;;;687    			{
;;;688    			snmp_trap_send("BAT #1,speed charge is stopped",5,8,35);
;;;689    			snmp_bat_flag_puts[1]&=~0x0080;
;;;690    			}
;;;691    		}
;;;692    
;;;693    	if(sp_ch_error) 									//Ускореннный заряд заблокирован по вентиляции
;;;694    		{
;;;695    		snmp_bat_flag[1]|=0x0100;
;;;696    		if((snmp_bat_flag_puts[1]&0x0100)==0) 
;;;697    			{
;;;698    			snmp_trap_send("BAT #1,speed charge is blocked",5,8,36); 
;;;699    			snmp_bat_flag_puts[1]|=0x0100;
;;;700    			}
;;;701    		}
;;;702    	else 
;;;703    		{
;;;704    		snmp_bat_flag[1]&=~0x0100;
;;;705    		if(snmp_bat_flag_puts[1]&0x0100) 
;;;706    			{
;;;707    			snmp_trap_send("BAT #1,speed charge is unblocked",5,8,37);
;;;708    			snmp_bat_flag_puts[1]&=~0x0100;
;;;709    			} 
;;;710    		}
;;;711    
;;;712    	if(vz1_stat!=vz1sOFF)								//Уравнительный заряд 
;;;713    		{
;;;714    		snmp_bat_flag[1]|=0x0200;
;;;715    		if((snmp_bat_flag_puts[1]&0x0200)==0) 
;;;716    			{
;;;717    			snmp_trap_send("BAT #1,equalising charge is on",5,8,38); 
;;;718    			snmp_bat_flag_puts[1]|=0x0200;
;;;719    			}
;;;720    		}
;;;721    	else 
;;;722    		{
;;;723    		snmp_bat_flag[1]&=~0x0200;
;;;724    		if(snmp_bat_flag_puts[1]&0x0200) 
;;;725    			{
;;;726    			snmp_trap_send("BAT #1,equalising charge is off",5,8,39);
;;;727    			snmp_bat_flag_puts[1]&=~0x0200;
;;;728    			}
;;;729    		}
;;;730    
;;;731    	if(vz1_error)										//Уравнительный заряд заблокирован по вентиляции 
;;;732    		{
;;;733    		snmp_bat_flag[1]|=0x0400;
;;;734    		if((snmp_bat_flag_puts[1]&0x0400)==0) 
;;;735    			{
;;;736    			snmp_trap_send("BAT #1,equalising charge is blocked",5,8,40); 
;;;737    			snmp_bat_flag_puts[1]|=0x0400;
;;;738    			}
;;;739    		}
;;;740    	else 
;;;741    		{
;;;742    		snmp_bat_flag[1]&=~0x0400;
;;;743    		if(snmp_bat_flag_puts[1]&0x0400) 
;;;744    			{
;;;745    			snmp_trap_send("BAT #1,equalising charge is unblocked",5,8,41);
;;;746    			snmp_bat_flag_puts[1]&=~0x0400;
;;;747    			} 
;;;748    		}
;;;749    
;;;750    	if(vz2_stat!=vz2sOFF)								//Формовочный заряд 
;;;751    		{
;;;752    		snmp_bat_flag[1]|=0x0800;
;;;753    		if((snmp_bat_flag_puts[1]&0x0800)==0) 
;;;754    			{
;;;755    			snmp_trap_send("BAT #1,molding charge is on",5,8,42); 
;;;756    			snmp_bat_flag_puts[1]|=0x0800;
;;;757    			}
;;;758    		}
;;;759    	else 
;;;760    		{
;;;761    		snmp_bat_flag[1]&=~0x0800;
;;;762    		if(snmp_bat_flag_puts[1]&0x0800) 
;;;763    			{
;;;764    			snmp_trap_send("BAT #1,molding charge is off",5,8,43);
;;;765    			snmp_bat_flag_puts[1]&=~0x0800;
;;;766    			}
;;;767    		}
;;;768    
;;;769    	if(vz2_error) 										//Формовочный заряд заблокирован по вентиляции
;;;770    		{
;;;771    		snmp_bat_flag[1]|=0x1000;
;;;772    		if((snmp_bat_flag_puts[1]&0x1000)==0) 
;;;773    			{
;;;774    			snmp_trap_send("BAT #1,molding charge is blocked",5,8,44); 
;;;775    			snmp_bat_flag_puts[1]|=0x1000;
;;;776    			}
;;;777    		}
;;;778    	else 
;;;779    		{
;;;780    		snmp_bat_flag[1]&=~0x1000;
;;;781    		if(snmp_bat_flag_puts[1]&0x1000) 
;;;782    			{
;;;783    			snmp_trap_send("BAT #1,molding charge is unblocked",5,8,45);
;;;784    			snmp_bat_flag_puts[1]&=~0x1000;
;;;785    			} 
;;;786    		}
;;;787    	}
;;;788    else 
;;;789    	{
;;;790    	snmp_bat_flag[1]=0; 
00003e  f9b11000          LDRSH    r1,[r1,#0]  ; ica_your_current
;;;791    	snmp_bat_flag_puts[1]=0;
;;;792    	}
;;;793    /*
;;;794    if(!snmp_bat_status[1])
;;;795    	{
;;;796    	if((bat[1]._Ub<(USIGN*10))) 
;;;797    		{
;;;798    		snmp_bat_flag[1]|=0x01; 
;;;799    		if((snmp_bat_flag_puts[1]&0x01)==0) 
;;;800    			{
;;;801    			snmp_trap_send("BAT #2 Alarm, battery is low",5,8,0); 
;;;802    			snmp_bat_flag_puts[1]|=0x01;
;;;803    			}
;;;804    		}
;;;805    	else 
;;;806    		{
;;;807    		snmp_bat_flag[1]&=~0x01; 
;;;808    		if(snmp_bat_flag_puts[1]&0x01) 
;;;809    			{
;;;810    			snmp_trap_send("BAT #2 Alarm clear, battery is not low",5,8,1);
;;;811    			snmp_bat_flag_puts[1]&=~0x01;
;;;812    			}
;;;813    		}
;;;814    	if(bat[1]._temper_stat&0x01) 
;;;815    		{
;;;816    		snmp_bat_flag[1]|=0x02;
;;;817    		if((snmp_bat_flag_puts[1]&0x02)==0) 
;;;818    			{
;;;819    			snmp_trap_send("BAT #2 Alarm, high battery temperature",5,8,2); 
;;;820    			snmp_bat_flag_puts[1]|=0x02;
;;;821    			}
;;;822    		}
;;;823    	else 
;;;824    		{
;;;825    		snmp_bat_flag[1]&=~0x02;
;;;826    		if(snmp_bat_flag_puts[1]&0x02) 
;;;827    			{
;;;828    			snmp_trap_send("BAT #2 Alarm clear, battery temperature is normal",5,8,3);
;;;829    			snmp_bat_flag_puts[1]&=~0x02;
;;;830    			}
;;;831    		}
;;;832    	if(bat[1]._temper_stat&0x02) 
;;;833    		{
;;;834    		snmp_bat_flag[1]|=0x04;
;;;835    		if((snmp_bat_flag_puts[1]&0x04)==0) 
;;;836    			{
;;;837    			snmp_trap_send("BAT #2 Alarm, maximum battery temperature",5,8,4); 
;;;838    			snmp_bat_flag_puts[1]|=0x04;
;;;839    			}
;;;840    		}
;;;841    	else 
;;;842    		{
;;;843    		snmp_bat_flag[1]&=~0x04;
;;;844    		if(snmp_bat_flag_puts[1]&0x04) 
;;;845    			{
;;;846    			snmp_trap_send("BAT #2 Alarm clear, battery temperature is normal",5,8,5);
;;;847    			snmp_bat_flag_puts[1]&=~0x04;
;;;848    			}
;;;849    		}
;;;850    		
;;;851    	if(bat[1]._Ib<(-IKB))	snmp_bat_flag[1]|=0x80;
;;;852    	else if(bat[1]._Ib>IKB)snmp_bat_flag[1]&=~0x80;
;;;853    
;;;854    	if((spc_stat==spcKE)&&(spc_bat==1)) 
;;;855    		{
;;;856    		snmp_bat_flag[1]|=0x10;
;;;857    		if((snmp_bat_flag_puts[1]&0x10)==0) 
;;;858    			{
;;;859    			snmp_trap_send("BAT #2, capacity check enabled",5,8,6); 
;;;860    			snmp_bat_flag_puts[1]|=0x10;
;;;861    			}
;;;862    		}
;;;863    	else 
;;;864    		{
;;;865    		snmp_bat_flag[1]&=~0x10;
;;;866    		if(snmp_bat_flag_puts[1]&0x10) 
;;;867    			{
;;;868    			snmp_trap_send("BAT #2, capacity check disabled",5,8,7);
;;;869    			snmp_bat_flag_puts[1]&=~0x10;
;;;870    			}
;;;871    		}
;;;872    		
;;;873    	if(spc_stat==spcVZ) 
;;;874    		{
;;;875    		snmp_bat_flag[1]|=0x20;
;;;876    		if((snmp_bat_flag_puts[1]&0x20)==0) 
;;;877    			{
;;;878    			snmp_trap_send("BAT #2,equalizing charge is on",5,8,8); 
;;;879    			snmp_bat_flag_puts[1]|=0x20;
;;;880    			}
;;;881    		}
;;;882    	else 
;;;883    		{
;;;884    		snmp_bat_flag[1]&=~0x20;
;;;885    		if(snmp_bat_flag_puts[1]&0x20) 
;;;886    			{
;;;887    			snmp_trap_send("BAT #2,equalizing charge is off",5,8,9);
;;;888    			snmp_bat_flag_puts[1]&=~0x20;
;;;889    			}
;;;890    		}
;;;891    
;;;892    	if(vz_error) 
;;;893    		{
;;;894    		snmp_bat_flag[1]|=0x40;
;;;895    		if((snmp_bat_flag_puts[1]&0x40)==0) 
;;;896    			{
;;;897    			snmp_trap_send("BAT #2,equalizing charge blocked",5,8,10); 
;;;898    			snmp_bat_flag_puts[1]|=0x40;
;;;899    			}
;;;900    		}
;;;901    	else 
;;;902    		{
;;;903    		snmp_bat_flag[1]&=~0x40;
;;;904    		if(snmp_bat_flag_puts[1]&0x40) 
;;;905    			{
;;;906    			snmp_trap_send("BAT #2,equalizing charge is not blocked",5,8,11);
;;;907    			snmp_bat_flag_puts[1]&=~0x40;
;;;908    			} 
;;;909    		}
;;;910       }
;;;911    else 
;;;912    	{
;;;913    	snmp_bat_flag[1]=0; 
;;;914    	snmp_bat_flag_puts[1]=0;
;;;915    	} */
;;;916    }
000042  7852              LDRB     r2,[r2,#1]
000044  f9b83000          LDRSH    r3,[r8,#0]
000048  f9b77000          LDRSH    r7,[r7,#0]            ;318
00004c  4288              CMP      r0,r1                 ;318
00004e  dd06              BLE      |L4.94|
000050  eba00901          SUB      r9,r0,r1              ;318
000054  f1b90f0a          CMP      r9,#0xa               ;318
000058  db01              BLT      |L4.94|
00005a  2f01              CMP      r7,#1                 ;320
00005c  d007              BEQ      |L4.110|
                  |L4.94|
00005e  4288              CMP      r0,r1                 ;321
000060  da16              BGE      |L4.144|
000062  1a08              SUBS     r0,r1,r0              ;318
000064  280a              CMP      r0,#0xa               ;320
000066  db13              BLT      |L4.144|
000068  2f01              CMP      r7,#1                 ;320
00006a  d009              BEQ      |L4.128|
00006c  e010              B        |L4.144|
                  |L4.110|
00006e  f1020201          ADD      r2,r2,#1              ;323
000072  f88c2001          STRB     r2,[r12,#1]           ;323
000076  f1a30301          SUB      r3,r3,#1              ;323
00007a  f8a83000          STRH     r3,[r8,#0]            ;324
00007e  e007              B        |L4.144|
                  |L4.128|
000080  f1a20201          SUB      r2,r2,#1              ;324
000084  f88c2001          STRB     r2,[r12,#1]           ;329
000088  f1030301          ADD      r3,r3,#1              ;329
00008c  f8a83000          STRH     r3,[r8,#0]            ;330
                  |L4.144|
000090  2214              MOVS     r2,#0x14              ;332
000092  4251              RSBS     r1,r2,#0              ;332
000094  4846              LDR      r0,|L4.432|
000096  f7fffffe          BL       gran
                  |L4.154|
00009a  7820              LDRB     r0,[r4,#0]            ;333  ; ica_timer_cnt
00009c  f8df8114          LDR      r8,|L4.436|
0000a0  4f45              LDR      r7,|L4.440|
0000a2  2808              CMP      r0,#8                 ;337
0000a4  d125              BNE      |L4.242|
0000a6  8830              LDRH     r0,[r6,#0]            ;337  ; ICA_EN
0000a8  2801              CMP      r0,#1                 ;337
0000aa  d122              BNE      |L4.242|
0000ac  f8b80000          LDRH     r0,[r8,#0]            ;339  ; ICA_MODBUS_ADDRESS
0000b0  f88d0000          STRB     r0,[sp,#0]            ;339
0000b4  f04f0004          MOV      r0,#4                 ;340
0000b8  f88d0001          STRB     r0,[sp,#1]            ;342
0000bc  f88d5002          STRB     r5,[sp,#2]            ;342
0000c0  f04f0002          MOV      r0,#2                 ;342
0000c4  f88d0003          STRB     r0,[sp,#3]            ;343
0000c8  f88d5004          STRB     r5,[sp,#4]            ;343
0000cc  f04f0001          MOV      r0,#1                 ;343
0000d0  f88d0005          STRB     r0,[sp,#5]            ;348
0000d4  f04f0106          MOV      r1,#6                 ;348
0000d8  4668              MOV      r0,sp                 ;349
0000da  f7fffffe          BL       CRC16_2
0000de  f88d0006          STRB     r0,[sp,#6]            ;351
0000e2  ea4f2020          ASR      r0,r0,#8              ;351
0000e6  f88d0007          STRB     r0,[sp,#7]            ;351
0000ea  f9b70000          LDRSH    r0,[r7,#0]            ;352  ; ICA_CH
0000ee  b3e8              CBZ      r0,|L4.364|
0000f0  2801              CMP      r0,#1                 ;356
                  |L4.242|
0000f2  4832              LDR      r0,|L4.444|
0000f4  f06f0214          MVN      r2,#0x14              ;356
0000f8  f9b00000          LDRSH    r0,[r0,#0]            ;358  ; TBAT
0000fc  ebc01100          RSB      r1,r0,r0,LSL #4       ;358
000100  eb020181          ADD      r1,r2,r1,LSL #2       ;359
000104  4a2e              LDR      r2,|L4.448|
000106  f9b22052          LDRSH    r2,[r2,#0x52]         ;361  ; main_kb_cnt
00010a  4291              CMP      r1,r2                 ;361
00010c  d134              BNE      |L4.376|
00010e  8831              LDRH     r1,[r6,#0]            ;361  ; ICA_EN
000110  2901              CMP      r1,#1                 ;361
000112  d131              BNE      |L4.376|
000114  f8b81000          LDRH     r1,[r8,#0]            ;362  ; ICA_MODBUS_ADDRESS
000118  f88d1000          STRB     r1,[sp,#0]            ;362
00011c  f04f0106          MOV      r1,#6                 ;367
000120  f88d1001          STRB     r1,[sp,#1]            ;367
000124  f88d5002          STRB     r5,[sp,#2]            ;368
000128  f04f011e          MOV      r1,#0x1e              ;368
00012c  f88d1003          STRB     r1,[sp,#3]            ;370
000130  ea4f71e0          ASR      r1,r0,#31             ;370
000134  eb006111          ADD      r1,r0,r1,LSR #24      ;370
000138  ea4f2221          ASR      r2,r1,#8              ;371
00013c  f88d2004          STRB     r2,[sp,#4]            ;371
000140  f88d0005          STRB     r0,[sp,#5]            ;371
000144  f04f0106          MOV      r1,#6                 ;375
000148  4668              MOV      r0,sp                 ;375
00014a  f7fffffe          BL       CRC16_2
00014e  f88d0006          STRB     r0,[sp,#6]            ;375
000152  ea4f2020          ASR      r0,r0,#8              ;375
000156  f88d0007          STRB     r0,[sp,#7]            ;375
00015a  8838              LDRH     r0,[r7,#0]            ;376  ; ICA_CH
00015c  2800              CMP      r0,#0                 ;376
00015e  d10b              BNE      |L4.376|
000160  4604              MOV      r4,r0                 ;376
000162  466d              MOV      r5,sp                 ;376
                  |L4.356|
000164  5d28              LDRB     r0,[r5,r4]            ;376
000166  f7fffffe          BL       putchar_sc16is700
00016a  e000              B        |L4.366|
                  |L4.364|
00016c  e007              B        |L4.382|
                  |L4.366|
00016e  f1040401          ADD      r4,r4,#1              ;378
000172  b2e4              UXTB     r4,r4                 ;378
000174  2c08              CMP      r4,#8                 ;378
000176  d3f5              BCC      |L4.356|
                  |L4.376|
000178  b005              ADD      sp,sp,#0x14           ;389
00017a  e8bd83f0          POP      {r4-r9,pc}            ;389
                  |L4.382|
00017e  f04f0400          MOV      r4,#0                 ;390
000182  46e9              MOV      r9,sp                 ;390
                  |L4.388|
000184  f8190004          LDRB     r0,[r9,r4]            ;392
000188  f7fffffe          BL       putchar_sc16is700
00018c  f1040401          ADD      r4,r4,#1              ;392
000190  b2e4              UXTB     r4,r4                 ;393
000192  2c08              CMP      r4,#8                 ;393
000194  d3f6              BCC      |L4.388|
000196  e7ac              B        |L4.242|
;;;917    
                          ENDP

                  |L4.408|
                          DCD      ica_timer_cnt
                  |L4.412|
                          DCD      ICA_EN
                  |L4.416|
                          DCD      ica_plazma
                  |L4.420|
                          DCD      bps_I
                  |L4.424|
                          DCD      ica_my_current
                  |L4.428|
                          DCD      ica_your_current
                  |L4.432|
                          DCD      ica_u_necc
                  |L4.436|
                          DCD      ICA_MODBUS_ADDRESS
                  |L4.440|
                          DCD      ICA_CH
                  |L4.444|
                          DCD      TBAT
                  |L4.448|
                          DCD      ||area_number.25||

                          AREA ||area_number.5||, CODE, READONLY, ALIGN=2

                          EXPORTAS ||area_number.5||, ||.text||
                  inv_drv PROC
;;;305    // заполнение флагов для АКБ
;;;306    void bat_flag (void)
000000  b570              PUSH     {r4-r6,lr}
;;;307    {  
000002  4604              MOV      r4,r0
;;;308    if(spc_stat!=spcVZ) 
000004  f04f0207          MOV      r2,#7
000008  f04f0101          MOV      r1,#1
00000c  48a4              LDR      r0,|L5.672|
00000e  f7fffffe          BL       gran_char
;;;309    	{
;;;310    	vz_error=0;
;;;311    	sp_ch_error=0;
000012  48a4              LDR      r0,|L5.676|
;;;312    	vz1_error=0;
000014  eb040144          ADD      r1,r4,r4,LSL #1
;;;313    	vz2_error=0;
;;;314    	}
;;;315    
;;;316    if(!snmp_bat_status[0])	 			//Батарея №1
000018  eb001541          ADD      r5,r0,r1,LSL #5
;;;317    	{
;;;318    	if((bat[0]._Ub<(USIGN*10)))		//Снижение напряжения батареи ниже Uбсигн 
00001c  f8950047          LDRB     r0,[r5,#0x47]
000020  f8951046          LDRB     r1,[r5,#0x46]
000024  ea800001          EOR      r0,r0,r1              ;316
;;;319    		{
;;;320    		snmp_bat_flag[0]|=0x0001; 
;;;321    		if((snmp_bat_flag_puts[0]&0x0001)==0) 
;;;322    			{
;;;323    			snmp_trap_send("BAT #1 Alarm, battery is low",5,8,0); 
;;;324    			snmp_bat_flag_puts[0]|=0x0001;
;;;325    			}
;;;326    		}
;;;327    	else 
;;;328    		{
;;;329    		snmp_bat_flag[0]&=~0x0001; 
;;;330    		if(snmp_bat_flag_puts[0]&0x0001) 
;;;331    			{
;;;332    			snmp_trap_send("BAT #1 Alarm clear, battery is not low",5,8,1);
;;;333    			snmp_bat_flag_puts[0]&=~0x0001;
;;;334    			}
;;;335    		}
;;;336    
;;;337    	if(bat[0]._temper_stat&0x01)	//Повышенная температура батареи, первый порог - предупреждение
;;;338    		{
;;;339    		snmp_bat_flag[0]|=0x0002;
;;;340    		if((snmp_bat_flag_puts[0]&0x0002)==0) 
;;;341    			{
;;;342    			snmp_trap_send("BAT #1 Warning, high battery temperature",5,8,2); 
;;;343    			snmp_bat_flag_puts[0]|=0x0002;
;;;344    			}
;;;345    		}
;;;346    	else 
;;;347    		{
;;;348    		snmp_bat_flag[0]&=~0x0002;
;;;349    		if(snmp_bat_flag_puts[0]&0x0002) 
;;;350    			{
;;;351    			snmp_trap_send("BAT #1 Warning clear, battery temperature is normal",5,8,3);
;;;352    			snmp_bat_flag_puts[0]&=~0x02;
;;;353    			}
;;;354    		}
;;;355    
;;;356    	if(bat[0]._temper_stat&0x02)  	//Повышенная температура батареи, второй порог - авария
;;;357    		{
;;;358    		snmp_bat_flag[0]|=0x0004;
;;;359    		if((snmp_bat_flag_puts[0]&0x0004)==0) 
;;;360    			{
;;;361    			snmp_trap_send("BAT #1 Alarm, high battery temperature",5,8,4); 
;;;362    			snmp_bat_flag_puts[0]|=0x0004;
;;;363    			}
;;;364    		}
;;;365    	else 
;;;366    		{
;;;367    		snmp_bat_flag[0]&=~0x0004;
;;;368    		if(snmp_bat_flag_puts[0]&0x0004) 
;;;369    			{
;;;370    			snmp_trap_send("BAT #1 Alarm clear, battery temperature is normal",5,8,5);
;;;371    			snmp_bat_flag_puts[0]&=~0x0004;
;;;372    			}
;;;373    		}
;;;374    
;;;375    	if(bat[0]._Ib<(-IKB)) snmp_bat_flag[0]|=0x0008;		//Разряд батареи
000028  4a9f              LDR      r2,|L5.680|
00002a  b100              CBZ      r0,|L5.46|
00002c  7050              STRB     r0,[r2,#1]            ;320
                  |L5.46|
00002e  ea010100          AND      r1,r1,r0              ;321
;;;376    	else if(bat[0]._Ib>IKB) snmp_bat_flag[0]&=~0x0008;	//Заряд батареи
;;;377    
;;;378    	if((spc_stat==spcKE)&&(spc_bat==0))					//Контроль емкости батареи №1 
;;;379    		{
;;;380    		snmp_bat_flag[0]|=0x0010;
;;;381    		if((snmp_bat_flag_puts[0]&0x0010)==0) 
;;;382    			{
;;;383    			snmp_trap_send("BAT #1, capacity test started",5,8,6); 
;;;384    			snmp_bat_flag_puts[0]|=0x0010;
;;;385    			}
;;;386    		}
;;;387    	else 
;;;388    		{
;;;389    		snmp_bat_flag[0]&=~0x0010;
;;;390    		if(snmp_bat_flag_puts[0]&0x0010) 
;;;391    			{
;;;392    			snmp_trap_send("BAT #1, capacity test stopped",5,8,7);
;;;393    			snmp_bat_flag_puts[0]&=~0x0010;
;;;394    			}
;;;395    		}
;;;396    		
;;;397    	if(spc_stat==spcVZ)									//Выравнивающий заряд 
;;;398    		{
;;;399    		snmp_bat_flag[0]|=0x0020;
;;;400    		if((snmp_bat_flag_puts[0]&0x0020)==0) 
;;;401    			{
;;;402    			snmp_trap_send("BAT #1,leveling charge is started",5,8,8); 
;;;403    			snmp_bat_flag_puts[0]|=0x0020;
;;;404    			}
;;;405    		}
;;;406    	else 
;;;407    		{
;;;408    		snmp_bat_flag[0]&=~0x0020;
;;;409    		if(snmp_bat_flag_puts[0]&0x0020) 
;;;410    			{
;;;411    			snmp_trap_send("BAT #1,leveling charge is stopped",5,8,9);
;;;412    			snmp_bat_flag_puts[0]&=~0x0020;
;;;413    			}
;;;414    		}
;;;415    
;;;416    	if(vz_error)										 //Выравнивающий заряд заблокирован по вентиляции
;;;417    		{
;;;418    		snmp_bat_flag[0]|=0x0040;
;;;419    		if((snmp_bat_flag_puts[0]&0x0040)==0) 
;;;420    			{
;;;421    			snmp_trap_send("BAT #1,leveling charge is blocked",5,8,10); 
;;;422    			snmp_bat_flag_puts[0]|=0x0040;
;;;423    			}
;;;424    		}
;;;425    	else 
;;;426    		{
;;;427    		snmp_bat_flag[0]&=~0x0040;
;;;428    		if(snmp_bat_flag_puts[0]&0x0040) 
;;;429    			{
;;;430    			snmp_trap_send("BAT #1,leveling charge is unblocked",5,8,11);
;;;431    			snmp_bat_flag_puts[0]&=~0x0040;
;;;432    			} 
;;;433    		}
;;;434    
;;;435    	if(sp_ch_stat==scsWRK) 								//Ускореннный заряд
;;;436    		{
;;;437    		snmp_bat_flag[0]|=0x0080;
;;;438    		if((snmp_bat_flag_puts[0]&0x0080)==0) 
;;;439    			{
;;;440    			snmp_trap_send("BAT #1,speed charge is started",5,8,10); 
;;;441    			snmp_bat_flag_puts[0]|=0x0080;
;;;442    			}
;;;443    		}
;;;444    	else 
;;;445    		{
;;;446    		snmp_bat_flag[0]&=~0x0080;
;;;447    		if(snmp_bat_flag_puts[0]&0x0080) 
;;;448    			{
;;;449    			snmp_trap_send("BAT #1,speed charge is stopped",5,8,11);
;;;450    			snmp_bat_flag_puts[0]&=~0x0080;
;;;451    			}
;;;452    		}
;;;453    
;;;454    	if(sp_ch_error) 									//Ускореннный заряд заблокирован по вентиляции
;;;455    		{
;;;456    		snmp_bat_flag[0]|=0x0100;
;;;457    		if((snmp_bat_flag_puts[0]&0x0100)==0) 
;;;458    			{
;;;459    			snmp_trap_send("BAT #1,speed charge is blocked",5,8,12); 
;;;460    			snmp_bat_flag_puts[0]|=0x0100;
;;;461    			}
;;;462    		}
;;;463    	else 
;;;464    		{
;;;465    		snmp_bat_flag[0]&=~0x0100;
;;;466    		if(snmp_bat_flag_puts[0]&0x0100) 
;;;467    			{
;;;468    			snmp_trap_send("BAT #1,speed charge is unblocked",5,8,13);
;;;469    			snmp_bat_flag_puts[0]&=~0x0100;
;;;470    			} 
;;;471    		}
;;;472    
;;;473    	if(vz1_stat!=vz1sOFF)								//Уравнительный заряд 
;;;474    		{
;;;475    		snmp_bat_flag[0]|=0x0200;
;;;476    		if((snmp_bat_flag_puts[0]&0x0200)==0) 
;;;477    			{
;;;478    			snmp_trap_send("BAT #1,equalising charge is on",5,8,14); 
;;;479    			snmp_bat_flag_puts[0]|=0x0200;
;;;480    			}
;;;481    		}
;;;482    	else 
;;;483    		{
;;;484    		snmp_bat_flag[0]&=~0x0200;
;;;485    		if(snmp_bat_flag_puts[0]&0x0200) 
;;;486    			{
;;;487    			snmp_trap_send("BAT #1,equalising charge is off",5,8,15);
;;;488    			snmp_bat_flag_puts[0]&=~0x0200;
;;;489    			}
;;;490    		}
;;;491    
;;;492    	if(vz1_error)										//Уравнительный заряд заблокирован по вентиляции 
;;;493    		{
;;;494    		snmp_bat_flag[0]|=0x0400;
;;;495    		if((snmp_bat_flag_puts[0]&0x0400)==0) 
;;;496    			{
;;;497    			snmp_trap_send("BAT #1,equalising charge is blocked",5,8,16); 
;;;498    			snmp_bat_flag_puts[0]|=0x0400;
;;;499    			}
;;;500    		}
;;;501    	else 
;;;502    		{
;;;503    		snmp_bat_flag[0]&=~0x0400;
;;;504    		if(snmp_bat_flag_puts[0]&0x0400) 
;;;505    			{
;;;506    			snmp_trap_send("BAT #1,equalising charge is unblocked",5,8,17);
;;;507    			snmp_bat_flag_puts[0]&=~0x0400;
;;;508    			} 
;;;509    		}
;;;510    
;;;511    	if(vz2_stat!=vz2sOFF)								//Формовочный заряд 
;;;512    		{
;;;513    		snmp_bat_flag[0]|=0x0800;
;;;514    		if((snmp_bat_flag_puts[0]&0x0800)==0) 
;;;515    			{
;;;516    			snmp_trap_send("BAT #1,molding charge is on",5,8,18); 
;;;517    			snmp_bat_flag_puts[0]|=0x0800;
;;;518    			}
;;;519    		}
;;;520    	else 
;;;521    		{
;;;522    		snmp_bat_flag[0]&=~0x0800;
;;;523    		if(snmp_bat_flag_puts[0]&0x0800) 
;;;524    			{
;;;525    			snmp_trap_send("BAT #1,molding charge is off",5,8,19);
;;;526    			snmp_bat_flag_puts[0]&=~0x0800;
;;;527    			}
;;;528    		}
;;;529    
;;;530    	if(vz2_error) 										//Формовочный заряд заблокирован по вентиляции
;;;531    		{
;;;532    		snmp_bat_flag[0]|=0x1000;
;;;533    		if((snmp_bat_flag_puts[0]&0x1000)==0) 
;;;534    			{
;;;535    			snmp_trap_send("BAT #1,molding charge is blocked",5,8,20); 
;;;536    			snmp_bat_flag_puts[0]|=0x1000;
;;;537    			}
;;;538    		}
;;;539    	else 
;;;540    		{
;;;541    		snmp_bat_flag[0]&=~0x1000;
;;;542    		if(snmp_bat_flag_puts[0]&0x1000) 
;;;543    			{
;;;544    			snmp_trap_send("BAT #1,molding charge is unblocked",5,8,21);
;;;545    			snmp_bat_flag_puts[0]&=~0x1000;
;;;546    			} 
;;;547    		}
;;;548    	}
;;;549    else 
;;;550    	{
;;;551    	snmp_bat_flag[0]=0; 
000032  b101              CBZ      r1,|L5.54|
;;;552    	snmp_bat_flag_puts[0]=0;
000034  7091              STRB     r1,[r2,#2]
                  |L5.54|
;;;553    	}
;;;554    
;;;555    if(!snmp_bat_status[1])	 			//Батарея №2
000036  ea000301          AND      r3,r0,r1
00003a  07db              LSLS     r3,r3,#31
00003c  d027              BEQ      |L5.142|
;;;556    	{
;;;557    	if((bat[1]._Ub<(USIGN*10)))		//Снижение напряжения батареи ниже Uбсигн 
;;;558    		{
;;;559    		snmp_bat_flag[1]|=0x0001; 
;;;560    		if((snmp_bat_flag_puts[1]&0x0001)==0) 
;;;561    			{
;;;562    			snmp_trap_send("BAT #1 Alarm, battery is low",5,8,22); 
;;;563    			snmp_bat_flag_puts[1]|=0x0001;
;;;564    			}
;;;565    		}
;;;566    	else 
;;;567    		{
;;;568    		snmp_bat_flag[1]&=~0x0001; 
;;;569    		if(snmp_bat_flag_puts[1]&0x0001) 
;;;570    			{
;;;571    			snmp_trap_send("BAT #1 Alarm clear, battery is not low",5,8,23);
;;;572    			snmp_bat_flag_puts[1]&=~0x0001;
;;;573    			}
;;;574    		}
;;;575    
;;;576    	if(bat[1]._temper_stat&0x01)	//Повышенная температура батареи, первый порог - предупреждение
;;;577    		{
;;;578    		snmp_bat_flag[1]|=0x0002;
;;;579    		if((snmp_bat_flag_puts[0]&0x0002)==0) 
;;;580    			{
;;;581    			snmp_trap_send("BAT #1 Warning, high battery temperature",5,8,24); 
;;;582    			snmp_bat_flag_puts[1]|=0x0002;
;;;583    			}
;;;584    		}
;;;585    	else 
;;;586    		{
;;;587    		snmp_bat_flag[1]&=~0x0002;
;;;588    		if(snmp_bat_flag_puts[1]&0x0002) 
;;;589    			{
;;;590    			snmp_trap_send("BAT #1 Warning clear, battery temperature is normal",5,8,25);
;;;591    			snmp_bat_flag_puts[1]&=~0x02;
;;;592    			}
;;;593    		}
;;;594    
;;;595    	if(bat[1]._temper_stat&0x02)  	//Повышенная температура батареи, второй порог - авария
;;;596    		{
;;;597    		snmp_bat_flag[1]|=0x0004;
;;;598    		if((snmp_bat_flag_puts[1]&0x0004)==0) 
;;;599    			{
;;;600    			snmp_trap_send("BAT #1 Alarm, high battery temperature",5,8,26); 
;;;601    			snmp_bat_flag_puts[1]|=0x0004;
;;;602    			}
;;;603    		}
;;;604    	else 
;;;605    		{
;;;606    		snmp_bat_flag[1]&=~0x0004;
;;;607    		if(snmp_bat_flag_puts[1]&0x0004) 
;;;608    			{
;;;609    			snmp_trap_send("BAT #1 Alarm clear, battery temperature is normal",5,8,27);
;;;610    			snmp_bat_flag_puts[1]&=~0x0004;
;;;611    			}
;;;612    		}
;;;613    
;;;614    	if(bat[1]._Ib<(-IKB)) snmp_bat_flag[1]|=0x0008;		//Разряд батареи
;;;615    	else if(bat[1]._Ib>IKB) snmp_bat_flag[1]&=~0x0008;	//Заряд батареи
;;;616    
;;;617    	if((spc_stat==spcKE)&&(spc_bat==0))					//Контроль емкости батареи №1 
;;;618    		{
;;;619    		snmp_bat_flag[1]|=0x0010;
;;;620    		if((snmp_bat_flag_puts[1]&0x0010)==0) 
;;;621    			{
;;;622    			snmp_trap_send("BAT #1, capacity test started",5,8,28); 
;;;623    			snmp_bat_flag_puts[1]|=0x0010;
;;;624    			}
;;;625    		}
;;;626    	else 
;;;627    		{
;;;628    		snmp_bat_flag[1]&=~0x0010;
;;;629    		if(snmp_bat_flag_puts[1]&0x0010) 
;;;630    			{
;;;631    			snmp_trap_send("BAT #1, capacity test stopped",5,8,29);
;;;632    			snmp_bat_flag_puts[1]&=~0x0010;
;;;633    			}
;;;634    		}
;;;635    		
;;;636    	if(spc_stat==spcVZ)									//Выравнивающий заряд 
;;;637    		{
;;;638    		snmp_bat_flag[1]|=0x0020;
;;;639    		if((snmp_bat_flag_puts[1]&0x0020)==0) 
;;;640    			{
;;;641    			snmp_trap_send("BAT #1,leveling charge is started",5,8,30); 
;;;642    			snmp_bat_flag_puts[1]|=0x0020;
;;;643    			}
;;;644    		}
;;;645    	else 
;;;646    		{
;;;647    		snmp_bat_flag[1]&=~0x0020;
;;;648    		if(snmp_bat_flag_puts[1]&0x0020) 
;;;649    			{
;;;650    			snmp_trap_send("BAT #1,leveling charge is stopped",5,8,31);
;;;651    			snmp_bat_flag_puts[1]&=~0x0020;
;;;652    			}
;;;653    		}
;;;654    
;;;655    	if(vz_error)										 //Выравнивающий заряд заблокирован по вентиляции
;;;656    		{
;;;657    		snmp_bat_flag[1]|=0x0040;
;;;658    		if((snmp_bat_flag_puts[1]&0x0040)==0) 
;;;659    			{
;;;660    			snmp_trap_send("BAT #1,leveling charge is blocked",5,8,32); 
;;;661    			snmp_bat_flag_puts[1]|=0x0040;
;;;662    			}
;;;663    		}
;;;664    	else 
;;;665    		{
;;;666    		snmp_bat_flag[1]&=~0x0040;
;;;667    		if(snmp_bat_flag_puts[1]&0x0040) 
;;;668    			{
;;;669    			snmp_trap_send("BAT #1,leveling charge is unblocked",5,8,33);
;;;670    			snmp_bat_flag_puts[1]&=~0x0040;
;;;671    			} 
;;;672    		}
;;;673    
;;;674    	if(sp_ch_stat==scsWRK) 								//Ускореннный заряд
;;;675    		{
;;;676    		snmp_bat_flag[1]|=0x0080;
;;;677    		if((snmp_bat_flag_puts[1]&0x0080)==0) 
;;;678    			{
;;;679    			snmp_trap_send("BAT #1,speed charge is started",5,8,34); 
;;;680    			snmp_bat_flag_puts[1]|=0x0080;
;;;681    			}
;;;682    		}
;;;683    	else 
;;;684    		{
;;;685    		snmp_bat_flag[1]&=~0x0080;
;;;686    		if(snmp_bat_flag_puts[1]&0x0080) 
;;;687    			{
;;;688    			snmp_trap_send("BAT #1,speed charge is stopped",5,8,35);
;;;689    			snmp_bat_flag_puts[1]&=~0x0080;
;;;690    			}
;;;691    		}
;;;692    
;;;693    	if(sp_ch_error) 									//Ускореннный заряд заблокирован по вентиляции
;;;694    		{
;;;695    		snmp_bat_flag[1]|=0x0100;
;;;696    		if((snmp_bat_flag_puts[1]&0x0100)==0) 
;;;697    			{
;;;698    			snmp_trap_send("BAT #1,speed charge is blocked",5,8,36); 
;;;699    			snmp_bat_flag_puts[1]|=0x0100;
;;;700    			}
;;;701    		}
;;;702    	else 
;;;703    		{
;;;704    		snmp_bat_flag[1]&=~0x0100;
;;;705    		if(snmp_bat_flag_puts[1]&0x0100) 
;;;706    			{
;;;707    			snmp_trap_send("BAT #1,speed charge is unblocked",5,8,37);
;;;708    			snmp_bat_flag_puts[1]&=~0x0100;
;;;709    			} 
;;;710    		}
;;;711    
;;;712    	if(vz1_stat!=vz1sOFF)								//Уравнительный заряд 
;;;713    		{
;;;714    		snmp_bat_flag[1]|=0x0200;
;;;715    		if((snmp_bat_flag_puts[1]&0x0200)==0) 
;;;716    			{
;;;717    			snmp_trap_send("BAT #1,equalising charge is on",5,8,38); 
;;;718    			snmp_bat_flag_puts[1]|=0x0200;
;;;719    			}
;;;720    		}
;;;721    	else 
;;;722    		{
;;;723    		snmp_bat_flag[1]&=~0x0200;
;;;724    		if(snmp_bat_flag_puts[1]&0x0200) 
;;;725    			{
;;;726    			snmp_trap_send("BAT #1,equalising charge is off",5,8,39);
;;;727    			snmp_bat_flag_puts[1]&=~0x0200;
;;;728    			}
;;;729    		}
;;;730    
;;;731    	if(vz1_error)										//Уравнительный заряд заблокирован по вентиляции 
;;;732    		{
;;;733    		snmp_bat_flag[1]|=0x0400;
;;;734    		if((snmp_bat_flag_puts[1]&0x0400)==0) 
;;;735    			{
;;;736    			snmp_trap_send("BAT #1,equalising charge is blocked",5,8,40); 
;;;737    			snmp_bat_flag_puts[1]|=0x0400;
;;;738    			}
;;;739    		}
;;;740    	else 
;;;741    		{
;;;742    		snmp_bat_flag[1]&=~0x0400;
;;;743    		if(snmp_bat_flag_puts[1]&0x0400) 
;;;744    			{
;;;745    			snmp_trap_send("BAT #1,equalising charge is unblocked",5,8,41);
;;;746    			snmp_bat_flag_puts[1]&=~0x0400;
;;;747    			} 
;;;748    		}
;;;749    
;;;750    	if(vz2_stat!=vz2sOFF)								//Формовочный заряд 
;;;751    		{
;;;752    		snmp_bat_flag[1]|=0x0800;
;;;753    		if((snmp_bat_flag_puts[1]&0x0800)==0) 
;;;754    			{
;;;755    			snmp_trap_send("BAT #1,molding charge is on",5,8,42); 
;;;756    			snmp_bat_flag_puts[1]|=0x0800;
;;;757    			}
;;;758    		}
;;;759    	else 
;;;760    		{
;;;761    		snmp_bat_flag[1]&=~0x0800;
;;;762    		if(snmp_bat_flag_puts[1]&0x0800) 
;;;763    			{
;;;764    			snmp_trap_send("BAT #1,molding charge is off",5,8,43);
;;;765    			snmp_bat_flag_puts[1]&=~0x0800;
;;;766    			}
;;;767    		}
;;;768    
;;;769    	if(vz2_error) 										//Формовочный заряд заблокирован по вентиляции
;;;770    		{
;;;771    		snmp_bat_flag[1]|=0x1000;
;;;772    		if((snmp_bat_flag_puts[1]&0x1000)==0) 
;;;773    			{
;;;774    			snmp_trap_send("BAT #1,molding charge is blocked",5,8,44); 
;;;775    			snmp_bat_flag_puts[1]|=0x1000;
;;;776    			}
;;;777    		}
;;;778    	else 
;;;779    		{
;;;780    		snmp_bat_flag[1]&=~0x1000;
;;;781    		if(snmp_bat_flag_puts[1]&0x1000) 
;;;782    			{
;;;783    			snmp_trap_send("BAT #1,molding charge is unblocked",5,8,45);
;;;784    			snmp_bat_flag_puts[1]&=~0x1000;
;;;785    			} 
;;;786    		}
;;;787    	}
;;;788    else 
;;;789    	{
;;;790    	snmp_bat_flag[1]=0; 
00003e  78d0              LDRB     r0,[r2,#3]  ; plazma_inv
;;;791    	snmp_bat_flag_puts[1]=0;
000040  f1000001          ADD      r0,r0,#1
;;;792    	}
;;;793    /*
;;;794    if(!snmp_bat_status[1])
;;;795    	{
;;;796    	if((bat[1]._Ub<(USIGN*10))) 
;;;797    		{
;;;798    		snmp_bat_flag[1]|=0x01; 
;;;799    		if((snmp_bat_flag_puts[1]&0x01)==0) 
;;;800    			{
;;;801    			snmp_trap_send("BAT #2 Alarm, battery is low",5,8,0); 
;;;802    			snmp_bat_flag_puts[1]|=0x01;
;;;803    			}
;;;804    		}
;;;805    	else 
;;;806    		{
;;;807    		snmp_bat_flag[1]&=~0x01; 
;;;808    		if(snmp_bat_flag_puts[1]&0x01) 
;;;809    			{
;;;810    			snmp_trap_send("BAT #2 Alarm clear, battery is not low",5,8,1);
;;;811    			snmp_bat_flag_puts[1]&=~0x01;
;;;812    			}
;;;813    		}
;;;814    	if(bat[1]._temper_stat&0x01) 
;;;815    		{
;;;816    		snmp_bat_flag[1]|=0x02;
;;;817    		if((snmp_bat_flag_puts[1]&0x02)==0) 
;;;818    			{
;;;819    			snmp_trap_send("BAT #2 Alarm, high battery temperature",5,8,2); 
;;;820    			snmp_bat_flag_puts[1]|=0x02;
;;;821    			}
;;;822    		}
;;;823    	else 
;;;824    		{
;;;825    		snmp_bat_flag[1]&=~0x02;
;;;826    		if(snmp_bat_flag_puts[1]&0x02) 
;;;827    			{
;;;828    			snmp_trap_send("BAT #2 Alarm clear, battery temperature is normal",5,8,3);
;;;829    			snmp_bat_flag_puts[1]&=~0x02;
;;;830    			}
;;;831    		}
;;;832    	if(bat[1]._temper_stat&0x02) 
;;;833    		{
;;;834    		snmp_bat_flag[1]|=0x04;
;;;835    		if((snmp_bat_flag_puts[1]&0x04)==0) 
;;;836    			{
;;;837    			snmp_trap_send("BAT #2 Alarm, maximum battery temperature",5,8,4); 
;;;838    			snmp_bat_flag_puts[1]|=0x04;
;;;839    			}
;;;840    		}
;;;841    	else 
;;;842    		{
;;;843    		snmp_bat_flag[1]&=~0x04;
;;;844    		if(snmp_bat_flag_puts[1]&0x04) 
;;;845    			{
;;;846    			snmp_trap_send("BAT #2 Alarm clear, battery temperature is normal",5,8,5);
;;;847    			snmp_bat_flag_puts[1]&=~0x04;
;;;848    			}
;;;849    		}
;;;850    		
;;;851    	if(bat[1]._Ib<(-IKB))	snmp_bat_flag[1]|=0x80;
;;;852    	else if(bat[1]._Ib>IKB)snmp_bat_flag[1]&=~0x80;
;;;853    
;;;854    	if((spc_stat==spcKE)&&(spc_bat==1)) 
;;;855    		{
;;;856    		snmp_bat_flag[1]|=0x10;
;;;857    		if((snmp_bat_flag_puts[1]&0x10)==0) 
;;;858    			{
;;;859    			snmp_trap_send("BAT #2, capacity check enabled",5,8,6); 
;;;860    			snmp_bat_flag_puts[1]|=0x10;
;;;861    			}
;;;862    		}
;;;863    	else 
;;;864    		{
;;;865    		snmp_bat_flag[1]&=~0x10;
;;;866    		if(snmp_bat_flag_puts[1]&0x10) 
;;;867    			{
;;;868    			snmp_trap_send("BAT #2, capacity check disabled",5,8,7);
;;;869    			snmp_bat_flag_puts[1]&=~0x10;
;;;870    			}
;;;871    		}
;;;872    		
;;;873    	if(spc_stat==spcVZ) 
;;;874    		{
;;;875    		snmp_bat_flag[1]|=0x20;
;;;876    		if((snmp_bat_flag_puts[1]&0x20)==0) 
;;;877    			{
;;;878    			snmp_trap_send("BAT #2,equalizing charge is on",5,8,8); 
;;;879    			snmp_bat_flag_puts[1]|=0x20;
;;;880    			}
;;;881    		}
;;;882    	else 
;;;883    		{
;;;884    		snmp_bat_flag[1]&=~0x20;
;;;885    		if(snmp_bat_flag_puts[1]&0x20) 
;;;886    			{
;;;887    			snmp_trap_send("BAT #2,equalizing charge is off",5,8,9);
;;;888    			snmp_bat_flag_puts[1]&=~0x20;
;;;889    			}
;;;890    		}
;;;891    
;;;892    	if(vz_error) 
;;;893    		{
;;;894    		snmp_bat_flag[1]|=0x40;
;;;895    		if((snmp_bat_flag_puts[1]&0x40)==0) 
;;;896    			{
;;;897    			snmp_trap_send("BAT #2,equalizing charge blocked",5,8,10); 
;;;898    			snmp_bat_flag_puts[1]|=0x40;
;;;899    			}
;;;900    		}
;;;901    	else 
;;;902    		{
;;;903    		snmp_bat_flag[1]&=~0x40;
;;;904    		if(snmp_bat_flag_puts[1]&0x40) 
;;;905    			{
;;;906    			snmp_trap_send("BAT #2,equalizing charge is not blocked",5,8,11);
;;;907    			snmp_bat_flag_puts[1]&=~0x40;
;;;908    			} 
;;;909    		}
;;;910       }
;;;911    else 
;;;912    	{
;;;913    	snmp_bat_flag[1]=0; 
;;;914    	snmp_bat_flag_puts[1]=0;
;;;915    	} */
;;;916    }
000044  70d0              STRB     r0,[r2,#3]
000046  b134              CBZ      r4,|L5.86|
000048  2c01              CMP      r4,#1                 ;318
00004a  d00b              BEQ      |L5.100|
00004c  2c02              CMP      r4,#2                 ;318
00004e  d010              BEQ      |L5.114|
000050  2c03              CMP      r4,#3                 ;318
000052  d015              BEQ      |L5.128|
000054  e120              B        |L5.664|
                  |L5.86|
000056  2301              MOVS     r3,#1                 ;318
000058  461a              MOV      r2,r3                 ;320
00005a  210e              MOVS     r1,#0xe               ;320
00005c  a093              ADR      r0,|L5.684|
00005e  f7fffffe          BL       snmp_trap_send
000062  e119              B        |L5.664|
                  |L5.100|
000064  2301              MOVS     r3,#1                 ;320
000066  2202              MOVS     r2,#2                 ;320
000068  210e              MOVS     r1,#0xe               ;320
00006a  a097              ADR      r0,|L5.712|
00006c  f7fffffe          BL       snmp_trap_send
000070  e112              B        |L5.664|
                  |L5.114|
000072  2301              MOVS     r3,#1                 ;323
000074  2203              MOVS     r2,#3                 ;323
000076  210e              MOVS     r1,#0xe               ;323
000078  a09a              ADR      r0,|L5.740|
00007a  f7fffffe          BL       snmp_trap_send
00007e  e10b              B        |L5.664|
                  |L5.128|
000080  2301              MOVS     r3,#1                 ;324
000082  2204              MOVS     r2,#4                 ;324
000084  210e              MOVS     r1,#0xe               ;329
000086  a09e              ADR      r0,|L5.768|
000088  f7fffffe          BL       snmp_trap_send
00008c  e104              B        |L5.664|
                  |L5.142|
00008e  0783              LSLS     r3,r0,#30             ;332
000090  d529              BPL      |L5.230|
000092  078b              LSLS     r3,r1,#30             ;332
000094  d527              BPL      |L5.230|
000096  78d0              LDRB     r0,[r2,#3]            ;332  ; plazma_inv
000098  f1000001          ADD      r0,r0,#1              ;332
00009c  70d0              STRB     r0,[r2,#3]            ;333
00009e  b134              CBZ      r4,|L5.174|
0000a0  2c01              CMP      r4,#1                 ;333
0000a2  d00b              BEQ      |L5.188|
0000a4  2c02              CMP      r4,#2                 ;337
0000a6  d010              BEQ      |L5.202|
0000a8  2c03              CMP      r4,#3                 ;337
0000aa  d015              BEQ      |L5.216|
0000ac  e0f4              B        |L5.664|
                  |L5.174|
0000ae  2302              MOVS     r3,#2                 ;339
0000b0  2201              MOVS     r2,#1                 ;339
0000b2  210e              MOVS     r1,#0xe               ;340
0000b4  a099              ADR      r0,|L5.796|
0000b6  f7fffffe          BL       snmp_trap_send
0000ba  e0ed              B        |L5.664|
                  |L5.188|
0000bc  2302              MOVS     r3,#2                 ;342
0000be  461a              MOV      r2,r3                 ;342
0000c0  210e              MOVS     r1,#0xe               ;342
0000c2  a09d              ADR      r0,|L5.824|
0000c4  f7fffffe          BL       snmp_trap_send
0000c8  e0e6              B        |L5.664|
                  |L5.202|
0000ca  2302              MOVS     r3,#2                 ;343
0000cc  2203              MOVS     r2,#3                 ;343
0000ce  210e              MOVS     r1,#0xe               ;348
0000d0  a0a0              ADR      r0,|L5.852|
0000d2  f7fffffe          BL       snmp_trap_send
0000d6  e0df              B        |L5.664|
                  |L5.216|
0000d8  2302              MOVS     r3,#2                 ;349
0000da  2204              MOVS     r2,#4                 ;349
0000dc  210e              MOVS     r1,#0xe               ;351
0000de  a0a4              ADR      r0,|L5.880|
0000e0  f7fffffe          BL       snmp_trap_send
0000e4  e0d8              B        |L5.664|
                  |L5.230|
0000e6  0743              LSLS     r3,r0,#29             ;351
0000e8  d529              BPL      |L5.318|
0000ea  074b              LSLS     r3,r1,#29             ;352
0000ec  d527              BPL      |L5.318|
0000ee  78d0              LDRB     r0,[r2,#3]            ;352  ; plazma_inv
0000f0  f1000001          ADD      r0,r0,#1              ;356
0000f4  70d0              STRB     r0,[r2,#3]            ;356
0000f6  b134              CBZ      r4,|L5.262|
0000f8  2c01              CMP      r4,#1                 ;358
0000fa  d00b              BEQ      |L5.276|
0000fc  2c02              CMP      r4,#2                 ;358
0000fe  d010              BEQ      |L5.290|
000100  2c03              CMP      r4,#3                 ;359
000102  d015              BEQ      |L5.304|
000104  e0c8              B        |L5.664|
                  |L5.262|
000106  2303              MOVS     r3,#3                 ;361
000108  2201              MOVS     r2,#1                 ;361
00010a  210e              MOVS     r1,#0xe               ;361
00010c  a09f              ADR      r0,|L5.908|
00010e  f7fffffe          BL       snmp_trap_send
000112  e0c1              B        |L5.664|
                  |L5.276|
000114  2303              MOVS     r3,#3                 ;362
000116  2202              MOVS     r2,#2                 ;362
000118  210e              MOVS     r1,#0xe               ;362
00011a  a0a3              ADR      r0,|L5.936|
00011c  f7fffffe          BL       snmp_trap_send
000120  e0ba              B        |L5.664|
                  |L5.290|
000122  2303              MOVS     r3,#3                 ;367
000124  461a              MOV      r2,r3                 ;368
000126  210e              MOVS     r1,#0xe               ;368
000128  a0a6              ADR      r0,|L5.964|
00012a  f7fffffe          BL       snmp_trap_send
00012e  e0b3              B        |L5.664|
                  |L5.304|
000130  2303              MOVS     r3,#3                 ;370
000132  2204              MOVS     r2,#4                 ;370
000134  210e              MOVS     r1,#0xe               ;370
000136  a0aa              ADR      r0,|L5.992|
000138  f7fffffe          BL       snmp_trap_send
00013c  e0ac              B        |L5.664|
                  |L5.318|
00013e  0703              LSLS     r3,r0,#28             ;371
000140  d529              BPL      |L5.406|
000142  070b              LSLS     r3,r1,#28             ;375
000144  d527              BPL      |L5.406|
000146  78d0              LDRB     r0,[r2,#3]            ;375  ; plazma_inv
000148  f1000001          ADD      r0,r0,#1              ;375
00014c  70d0              STRB     r0,[r2,#3]            ;375
00014e  b134              CBZ      r4,|L5.350|
000150  2c01              CMP      r4,#1                 ;375
000152  d00b              BEQ      |L5.364|
000154  2c02              CMP      r4,#2                 ;375
000156  d010              BEQ      |L5.378|
000158  2c03              CMP      r4,#3                 ;375
00015a  d015              BEQ      |L5.392|
00015c  e09c              B        |L5.664|
                  |L5.350|
00015e  2304              MOVS     r3,#4                 ;376
000160  2201              MOVS     r2,#1                 ;376
000162  210e              MOVS     r1,#0xe               ;376
000164  a0a5              ADR      r0,|L5.1020|
000166  f7fffffe          BL       snmp_trap_send
00016a  e095              B        |L5.664|
                  |L5.364|
00016c  2304              MOVS     r3,#4                 ;378
00016e  2202              MOVS     r2,#2                 ;378
000170  210e              MOVS     r1,#0xe               ;378
000172  a0ab              ADR      r0,|L5.1056|
000174  f7fffffe          BL       snmp_trap_send
000178  e08e              B        |L5.664|
                  |L5.378|
00017a  2304              MOVS     r3,#4                 ;389
00017c  2203              MOVS     r2,#3                 ;389
00017e  210e              MOVS     r1,#0xe               ;390
000180  a0b0              ADR      r0,|L5.1092|
000182  f7fffffe          BL       snmp_trap_send
000186  e087              B        |L5.664|
                  |L5.392|
000188  2304              MOVS     r3,#4                 ;392
00018a  461a              MOV      r2,r3                 ;392
00018c  210e              MOVS     r1,#0xe               ;392
00018e  a0b6              ADR      r0,|L5.1128|
000190  f7fffffe          BL       snmp_trap_send
000194  e080              B        |L5.664|
                  |L5.406|
000196  06c3              LSLS     r3,r0,#27             ;393
000198  d529              BPL      |L5.494|
00019a  06cb              LSLS     r3,r1,#27             ;397
00019c  d527              BPL      |L5.494|
00019e  78d0              LDRB     r0,[r2,#3]            ;397  ; plazma_inv
0001a0  f1000001          ADD      r0,r0,#1              ;408
0001a4  70d0              STRB     r0,[r2,#3]            ;408
0001a6  b134              CBZ      r4,|L5.438|
0001a8  2c01              CMP      r4,#1                 ;409
0001aa  d00b              BEQ      |L5.452|
0001ac  2c02              CMP      r4,#2                 ;409
0001ae  d010              BEQ      |L5.466|
0001b0  2c03              CMP      r4,#3                 ;411
0001b2  d015              BEQ      |L5.480|
0001b4  e070              B        |L5.664|
                  |L5.438|
0001b6  2305              MOVS     r3,#5                 ;411
0001b8  2201              MOVS     r2,#1                 ;411
0001ba  210e              MOVS     r1,#0xe               ;412
0001bc  a0b3              ADR      r0,|L5.1164|
0001be  f7fffffe          BL       snmp_trap_send
0001c2  e069              B        |L5.664|
                  |L5.452|
0001c4  2305              MOVS     r3,#5                 ;416
0001c6  2202              MOVS     r2,#2                 ;416
0001c8  210e              MOVS     r1,#0xe               ;418
0001ca  a0b9              ADR      r0,|L5.1200|
0001cc  f7fffffe          BL       snmp_trap_send
0001d0  e062              B        |L5.664|
                  |L5.466|
0001d2  2305              MOVS     r3,#5                 ;419
0001d4  2203              MOVS     r2,#3                 ;419
0001d6  210e              MOVS     r1,#0xe               ;421
0001d8  a0be              ADR      r0,|L5.1236|
0001da  f7fffffe          BL       snmp_trap_send
0001de  e05b              B        |L5.664|
                  |L5.480|
0001e0  2305              MOVS     r3,#5                 ;421
0001e2  2204              MOVS     r2,#4                 ;422
0001e4  210e              MOVS     r1,#0xe               ;422
0001e6  a0c4              ADR      r0,|L5.1272|
0001e8  f7fffffe          BL       snmp_trap_send
0001ec  e054              B        |L5.664|
                  |L5.494|
0001ee  0683              LSLS     r3,r0,#26             ;380
0001f0  d529              BPL      |L5.582|
0001f2  068b              LSLS     r3,r1,#26             ;380
0001f4  d527              BPL      |L5.582|
0001f6  78d0              LDRB     r0,[r2,#3]            ;381  ; plazma_inv
0001f8  f1000001          ADD      r0,r0,#1              ;381
0001fc  70d0              STRB     r0,[r2,#3]            ;383
0001fe  b134              CBZ      r4,|L5.526|
000200  2c01              CMP      r4,#1                 ;383
000202  d00b              BEQ      |L5.540|
000204  2c02              CMP      r4,#2                 ;383
000206  d010              BEQ      |L5.554|
000208  2c03              CMP      r4,#3                 ;384
00020a  d015              BEQ      |L5.568|
00020c  e044              B        |L5.664|
                  |L5.526|
00020e  2306              MOVS     r3,#6                 ;384
000210  2201              MOVS     r2,#1                 ;399
000212  210e              MOVS     r1,#0xe               ;399
000214  a0c1              ADR      r0,|L5.1308|
000216  f7fffffe          BL       snmp_trap_send
00021a  e03d              B        |L5.664|
                  |L5.540|
00021c  2306              MOVS     r3,#6                 ;400
00021e  2202              MOVS     r2,#2                 ;402
000220  210e              MOVS     r1,#0xe               ;402
000222  a0c7              ADR      r0,|L5.1344|
000224  f7fffffe          BL       snmp_trap_send
000228  e036              B        |L5.664|
                  |L5.554|
00022a  2306              MOVS     r3,#6                 ;403
00022c  2203              MOVS     r2,#3                 ;403
00022e  210e              MOVS     r1,#0xe               ;403
000230  a0cc              ADR      r0,|L5.1380|
000232  f7fffffe          BL       snmp_trap_send
000236  e02f              B        |L5.664|
                  |L5.568|
000238  2306              MOVS     r3,#6                 ;427
00023a  2204              MOVS     r2,#4                 ;427
00023c  210e              MOVS     r1,#0xe               ;428
00023e  a0d2              ADR      r0,|L5.1416|
000240  f7fffffe          BL       snmp_trap_send
000244  e028              B        |L5.664|
                  |L5.582|
000246  b300              CBZ      r0,|L5.650|
000248  b9f9              CBNZ     r1,|L5.650|
00024a  78d0              LDRB     r0,[r2,#3]            ;430  ; plazma_inv
00024c  f1000001          ADD      r0,r0,#1              ;430
000250  70d0              STRB     r0,[r2,#3]            ;431
000252  b134              CBZ      r4,|L5.610|
000254  2c01              CMP      r4,#1                 ;431
000256  d00b              BEQ      |L5.624|
000258  2c02              CMP      r4,#2                 ;435
00025a  d010              BEQ      |L5.638|
00025c  2c03              CMP      r4,#3                 ;435
00025e  d015              BEQ      |L5.652|
000260  e01a              B        |L5.664|
                  |L5.610|
000262  2300              MOVS     r3,#0                 ;446
000264  2201              MOVS     r2,#1                 ;446
000266  210e              MOVS     r1,#0xe               ;447
000268  a0d0              ADR      r0,|L5.1452|
00026a  f7fffffe          BL       snmp_trap_send
00026e  e013              B        |L5.664|
                  |L5.624|
000270  2300              MOVS     r3,#0                 ;449
000272  2202              MOVS     r2,#2                 ;449
000274  210e              MOVS     r1,#0xe               ;449
000276  a0d2              ADR      r0,|L5.1472|
000278  f7fffffe          BL       snmp_trap_send
00027c  e00c              B        |L5.664|
                  |L5.638|
00027e  2300              MOVS     r3,#0                 ;450
000280  2203              MOVS     r2,#3                 ;454
000282  210e              MOVS     r1,#0xe               ;454
000284  a0d3              ADR      r0,|L5.1492|
000286  f7fffffe          BL       snmp_trap_send
                  |L5.650|
00028a  e005              B        |L5.664|
                  |L5.652|
00028c  2300              MOVS     r3,#0                 ;457
00028e  2204              MOVS     r2,#4                 ;457
000290  210e              MOVS     r1,#0xe               ;457
000292  a0d5              ADR      r0,|L5.1512|
000294  f7fffffe          BL       snmp_trap_send
                  |L5.664|
000298  f8150f46          LDRB     r0,[r5,#0x46]!        ;459
00029c  7068              STRB     r0,[r5,#1]            ;459
00029e  bd70              POP      {r4-r6,pc}            ;460
;;;917    
                          ENDP

                  |L5.672|
                          DCD      first_inv_slot
                  |L5.676|
                          DCD      inv
                  |L5.680|
                          DCD      ||area_number.25||+0xb8
                  |L5.684|
0002ac  496e7665          DCB      "Invertor #1 Alarm, overload",0
0002b0  72746f72
0002b4  20233120
0002b8  416c6172
0002bc  6d2c206f
0002c0  7665726c
0002c4  6f616400
                  |L5.712|
0002c8  496e7665          DCB      "Invertor #2 Alarm, overload",0
0002cc  72746f72
0002d0  20233220
0002d4  416c6172
0002d8  6d2c206f
0002dc  7665726c
0002e0  6f616400
                  |L5.740|
0002e4  496e7665          DCB      "Invertor #3 Alarm, overload",0
0002e8  72746f72
0002ec  20233320
0002f0  416c6172
0002f4  6d2c206f
0002f8  7665726c
0002fc  6f616400
                  |L5.768|
000300  496e7665          DCB      "Invertor #4 Alarm, overload",0
000304  72746f72
000308  20233420
00030c  416c6172
000310  6d2c206f
000314  7665726c
000318  6f616400
                  |L5.796|
00031c  496e7665          DCB      "Invertor #1 Alarm, overheat",0
000320  72746f72
000324  20233120
000328  416c6172
00032c  6d2c206f
000330  76657268
000334  65617400
                  |L5.824|
000338  496e7665          DCB      "Invertor #2 Alarm, overheat",0
00033c  72746f72
000340  20233220
000344  416c6172
000348  6d2c206f
00034c  76657268
000350  65617400
                  |L5.852|
000354  496e7665          DCB      "Invertor #3 Alarm, overheat",0
000358  72746f72
00035c  20233320
000360  416c6172
000364  6d2c206f
000368  76657268
00036c  65617400
                  |L5.880|
000370  496e7665          DCB      "Invertor #4 Alarm, overheat",0
000374  72746f72
000378  20233420
00037c  416c6172
000380  6d2c206f
000384  76657268
000388  65617400
                  |L5.908|
00038c  496e7665          DCB      "Invertor #1 Alarm, is warm",0
000390  72746f72
000394  20233120
000398  416c6172
00039c  6d2c2069
0003a0  73207761
0003a4  726d00  
0003a7  00                DCB      0
                  |L5.936|
0003a8  496e7665          DCB      "Invertor #2 Alarm, is warm",0
0003ac  72746f72
0003b0  20233220
0003b4  416c6172
0003b8  6d2c2069
0003bc  73207761
0003c0  726d00  
0003c3  00                DCB      0
                  |L5.964|
0003c4  496e7665          DCB      "Invertor #3 Alarm, is warm",0
0003c8  72746f72
0003cc  20233320
0003d0  416c6172
0003d4  6d2c2069
0003d8  73207761
0003dc  726d00  
0003df  00                DCB      0
                  |L5.992|
0003e0  496e7665          DCB      "Invertor #4 Alarm, is warm",0
0003e4  72746f72
0003e8  20233420
0003ec  416c6172
0003f0  6d2c2069
0003f4  73207761
0003f8  726d00  
0003fb  00                DCB      0
                  |L5.1020|
0003fc  496e7665          DCB      "Invertor #1 Alarm, voltage is up",0
000400  72746f72
000404  20233120
000408  416c6172
00040c  6d2c2076
000410  6f6c7461
000414  67652069
000418  73207570
00041c  00      
00041d  00                DCB      0
00041e  00                DCB      0
00041f  00                DCB      0
                  |L5.1056|
000420  496e7665          DCB      "Invertor #2 Alarm, voltage is up",0
000424  72746f72
000428  20233220
00042c  416c6172
000430  6d2c2076
000434  6f6c7461
000438  67652069
00043c  73207570
000440  00      
000441  00                DCB      0
000442  00                DCB      0
000443  00                DCB      0
                  |L5.1092|
000444  496e7665          DCB      "Invertor #3 Alarm, voltage is up",0
000448  72746f72
00044c  20233320
000450  416c6172
000454  6d2c2076
000458  6f6c7461
00045c  67652069
000460  73207570
000464  00      
000465  00                DCB      0
000466  00                DCB      0
000467  00                DCB      0
                  |L5.1128|
000468  496e7665          DCB      "Invertor #4 Alarm, voltage is up",0
00046c  72746f72
000470  20233420
000474  416c6172
000478  6d2c2076
00047c  6f6c7461
000480  67652069
000484  73207570
000488  00      
000489  00                DCB      0
00048a  00                DCB      0
00048b  00                DCB      0
                  |L5.1164|
00048c  496e7665          DCB      "Invertor #1 Alarm, voltage is down",0
000490  72746f72
000494  20233120
000498  416c6172
00049c  6d2c2076
0004a0  6f6c7461
0004a4  67652069
0004a8  7320646f
0004ac  776e00  
0004af  00                DCB      0
                  |L5.1200|
0004b0  496e7665          DCB      "Invertor #2 Alarm, voltage is down",0
0004b4  72746f72
0004b8  20233220
0004bc  416c6172
0004c0  6d2c2076
0004c4  6f6c7461
0004c8  67652069
0004cc  7320646f
0004d0  776e00  
0004d3  00                DCB      0
                  |L5.1236|
0004d4  496e7665          DCB      "Invertor #3 Alarm, voltage is down",0
0004d8  72746f72
0004dc  20233320
0004e0  416c6172
0004e4  6d2c2076
0004e8  6f6c7461
0004ec  67652069
0004f0  7320646f
0004f4  776e00  
0004f7  00                DCB      0
                  |L5.1272|
0004f8  496e7665          DCB      "Invertor #4 Alarm, voltage is down",0
0004fc  72746f72
000500  20233420
000504  416c6172
000508  6d2c2076
00050c  6f6c7461
000510  67652069
000514  7320646f
000518  776e00  
00051b  00                DCB      0
                  |L5.1308|
00051c  496e7665          DCB      "Invertor #1 Alarm, output is offed",0
000520  72746f72
000524  20233120
000528  416c6172
00052c  6d2c206f
000530  75747075
000534  74206973
000538  206f6666
00053c  656400  
00053f  00                DCB      0
                  |L5.1344|
000540  496e7665          DCB      "Invertor #2 Alarm, output is offed",0
000544  72746f72
000548  20233220
00054c  416c6172
000550  6d2c206f
000554  75747075
000558  74206973
00055c  206f6666
000560  656400  
000563  00                DCB      0
                  |L5.1380|
000564  496e7665          DCB      "Invertor #3 Alarm, output is offed",0
000568  72746f72
00056c  20233320
000570  416c6172
000574  6d2c206f
000578  75747075
00057c  74206973
000580  206f6666
000584  656400  
000587  00                DCB      0
                  |L5.1416|
000588  496e7665          DCB      "Invertor #4 Alarm, output is offed",0
00058c  72746f72
000590  20233420
000594  416c6172
000598  6d2c206f
00059c  75747075
0005a0  74206973
0005a4  206f6666
0005a8  656400  
0005ab  00                DCB      0
                  |L5.1452|
0005ac  496e7665          DCB      "Invertor #1 is norm",0
0005b0  72746f72
0005b4  20233120
0005b8  6973206e
0005bc  6f726d00
                  |L5.1472|
0005c0  496e7665          DCB      "Invertor #2 is norm",0
0005c4  72746f72
0005c8  20233220
0005cc  6973206e
0005d0  6f726d00
                  |L5.1492|
0005d4  496e7665          DCB      "Invertor #3 is norm",0
0005d8  72746f72
0005dc  20233320
0005e0  6973206e
0005e4  6f726d00
                  |L5.1512|
0005e8  496e7665          DCB      "Invertor #4 is norm",0
0005ec  72746f72
0005f0  20233420
0005f4  6973206e
0005f8  6f726d00

                          AREA ||area_number.6||, CODE, READONLY, ALIGN=2

                          EXPORTAS ||area_number.6||, ||.text||
                  klimat_hndl PROC
;;;305    // заполнение флагов для АКБ
;;;306    void bat_flag (void)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;307    {  
;;;308    if(spc_stat!=spcVZ) 
000004  4d66              LDR      r5,|L6.416|
;;;309    	{
;;;310    	vz_error=0;
000006  4867              LDR      r0,|L6.420|
000008  4c67              LDR      r4,|L6.424|
00000a  f9b51000          LDRSH    r1,[r5,#0]            ;308  ; t_box
00000e  f9b02000          LDRSH    r2,[r0,#0]            ;308  ; TBOXMAX
;;;311    	sp_ch_error=0;
000012  f9b40000          LDRSH    r0,[r4,#0]
;;;312    	vz1_error=0;
;;;313    	vz2_error=0;
000016  4291              CMP      r1,r2
;;;314    	}
;;;315    
;;;316    if(!snmp_bat_status[0])	 			//Батарея №1
000018  dd03              BLE      |L6.34|
00001a  f1000001          ADD      r0,r0,#1
;;;317    	{
;;;318    	if((bat[0]._Ub<(USIGN*10)))		//Снижение напряжения батареи ниже Uбсигн 
00001e  8020              STRH     r0,[r4,#0]
000020  e003              B        |L6.42|
                  |L6.34|
000022  da02              BGE      |L6.42|
000024  f1a00001          SUB      r0,r0,#1              ;316
;;;319    		{
;;;320    		snmp_bat_flag[0]|=0x0001; 
;;;321    		if((snmp_bat_flag_puts[0]&0x0001)==0) 
;;;322    			{
;;;323    			snmp_trap_send("BAT #1 Alarm, battery is low",5,8,0); 
;;;324    			snmp_bat_flag_puts[0]|=0x0001;
;;;325    			}
;;;326    		}
;;;327    	else 
;;;328    		{
;;;329    		snmp_bat_flag[0]&=~0x0001; 
;;;330    		if(snmp_bat_flag_puts[0]&0x0001) 
;;;331    			{
;;;332    			snmp_trap_send("BAT #1 Alarm clear, battery is not low",5,8,1);
;;;333    			snmp_bat_flag_puts[0]&=~0x0001;
;;;334    			}
;;;335    		}
;;;336    
;;;337    	if(bat[0]._temper_stat&0x01)	//Повышенная температура батареи, первый порог - предупреждение
;;;338    		{
;;;339    		snmp_bat_flag[0]|=0x0002;
;;;340    		if((snmp_bat_flag_puts[0]&0x0002)==0) 
;;;341    			{
;;;342    			snmp_trap_send("BAT #1 Warning, high battery temperature",5,8,2); 
;;;343    			snmp_bat_flag_puts[0]|=0x0002;
;;;344    			}
;;;345    		}
;;;346    	else 
;;;347    		{
;;;348    		snmp_bat_flag[0]&=~0x0002;
;;;349    		if(snmp_bat_flag_puts[0]&0x0002) 
;;;350    			{
;;;351    			snmp_trap_send("BAT #1 Warning clear, battery temperature is normal",5,8,3);
;;;352    			snmp_bat_flag_puts[0]&=~0x02;
;;;353    			}
;;;354    		}
;;;355    
;;;356    	if(bat[0]._temper_stat&0x02)  	//Повышенная температура батареи, второй порог - авария
;;;357    		{
;;;358    		snmp_bat_flag[0]|=0x0004;
;;;359    		if((snmp_bat_flag_puts[0]&0x0004)==0) 
;;;360    			{
;;;361    			snmp_trap_send("BAT #1 Alarm, high battery temperature",5,8,4); 
;;;362    			snmp_bat_flag_puts[0]|=0x0004;
;;;363    			}
;;;364    		}
;;;365    	else 
;;;366    		{
;;;367    		snmp_bat_flag[0]&=~0x0004;
;;;368    		if(snmp_bat_flag_puts[0]&0x0004) 
;;;369    			{
;;;370    			snmp_trap_send("BAT #1 Alarm clear, battery temperature is normal",5,8,5);
;;;371    			snmp_bat_flag_puts[0]&=~0x0004;
;;;372    			}
;;;373    		}
;;;374    
;;;375    	if(bat[0]._Ib<(-IKB)) snmp_bat_flag[0]|=0x0008;		//Разряд батареи
000028  8020              STRH     r0,[r4,#0]
                  |L6.42|
00002a  2206              MOVS     r2,#6
00002c  2100              MOVS     r1,#0                 ;320
00002e  485e              LDR      r0,|L6.424|
000030  f7fffffe          BL       gran
;;;376    	else if(bat[0]._Ib>IKB) snmp_bat_flag[0]&=~0x0008;	//Заряд батареи
;;;377    
;;;378    	if((spc_stat==spcKE)&&(spc_bat==0))					//Контроль емкости батареи №1 
;;;379    		{
;;;380    		snmp_bat_flag[0]|=0x0010;
;;;381    		if((snmp_bat_flag_puts[0]&0x0010)==0) 
;;;382    			{
;;;383    			snmp_trap_send("BAT #1, capacity test started",5,8,6); 
;;;384    			snmp_bat_flag_puts[0]|=0x0010;
;;;385    			}
;;;386    		}
;;;387    	else 
;;;388    		{
;;;389    		snmp_bat_flag[0]&=~0x0010;
;;;390    		if(snmp_bat_flag_puts[0]&0x0010) 
;;;391    			{
;;;392    			snmp_trap_send("BAT #1, capacity test stopped",5,8,7);
;;;393    			snmp_bat_flag_puts[0]&=~0x0010;
;;;394    			}
;;;395    		}
;;;396    		
;;;397    	if(spc_stat==spcVZ)									//Выравнивающий заряд 
;;;398    		{
;;;399    		snmp_bat_flag[0]|=0x0020;
;;;400    		if((snmp_bat_flag_puts[0]&0x0020)==0) 
;;;401    			{
;;;402    			snmp_trap_send("BAT #1,leveling charge is started",5,8,8); 
;;;403    			snmp_bat_flag_puts[0]|=0x0020;
;;;404    			}
;;;405    		}
;;;406    	else 
;;;407    		{
;;;408    		snmp_bat_flag[0]&=~0x0020;
;;;409    		if(snmp_bat_flag_puts[0]&0x0020) 
;;;410    			{
;;;411    			snmp_trap_send("BAT #1,leveling charge is stopped",5,8,9);
;;;412    			snmp_bat_flag_puts[0]&=~0x0020;
;;;413    			}
;;;414    		}
;;;415    
;;;416    	if(vz_error)										 //Выравнивающий заряд заблокирован по вентиляции
;;;417    		{
;;;418    		snmp_bat_flag[0]|=0x0040;
;;;419    		if((snmp_bat_flag_puts[0]&0x0040)==0) 
;;;420    			{
;;;421    			snmp_trap_send("BAT #1,leveling charge is blocked",5,8,10); 
;;;422    			snmp_bat_flag_puts[0]|=0x0040;
;;;423    			}
;;;424    		}
;;;425    	else 
;;;426    		{
;;;427    		snmp_bat_flag[0]&=~0x0040;
;;;428    		if(snmp_bat_flag_puts[0]&0x0040) 
;;;429    			{
;;;430    			snmp_trap_send("BAT #1,leveling charge is unblocked",5,8,11);
;;;431    			snmp_bat_flag_puts[0]&=~0x0040;
;;;432    			} 
;;;433    		}
;;;434    
;;;435    	if(sp_ch_stat==scsWRK) 								//Ускореннный заряд
;;;436    		{
;;;437    		snmp_bat_flag[0]|=0x0080;
;;;438    		if((snmp_bat_flag_puts[0]&0x0080)==0) 
;;;439    			{
;;;440    			snmp_trap_send("BAT #1,speed charge is started",5,8,10); 
;;;441    			snmp_bat_flag_puts[0]|=0x0080;
;;;442    			}
;;;443    		}
;;;444    	else 
;;;445    		{
;;;446    		snmp_bat_flag[0]&=~0x0080;
;;;447    		if(snmp_bat_flag_puts[0]&0x0080) 
;;;448    			{
;;;449    			snmp_trap_send("BAT #1,speed charge is stopped",5,8,11);
;;;450    			snmp_bat_flag_puts[0]&=~0x0080;
;;;451    			}
;;;452    		}
;;;453    
;;;454    	if(sp_ch_error) 									//Ускореннный заряд заблокирован по вентиляции
;;;455    		{
;;;456    		snmp_bat_flag[0]|=0x0100;
;;;457    		if((snmp_bat_flag_puts[0]&0x0100)==0) 
;;;458    			{
;;;459    			snmp_trap_send("BAT #1,speed charge is blocked",5,8,12); 
;;;460    			snmp_bat_flag_puts[0]|=0x0100;
;;;461    			}
;;;462    		}
;;;463    	else 
;;;464    		{
;;;465    		snmp_bat_flag[0]&=~0x0100;
;;;466    		if(snmp_bat_flag_puts[0]&0x0100) 
;;;467    			{
;;;468    			snmp_trap_send("BAT #1,speed charge is unblocked",5,8,13);
;;;469    			snmp_bat_flag_puts[0]&=~0x0100;
;;;470    			} 
;;;471    		}
;;;472    
;;;473    	if(vz1_stat!=vz1sOFF)								//Уравнительный заряд 
;;;474    		{
;;;475    		snmp_bat_flag[0]|=0x0200;
;;;476    		if((snmp_bat_flag_puts[0]&0x0200)==0) 
;;;477    			{
;;;478    			snmp_trap_send("BAT #1,equalising charge is on",5,8,14); 
;;;479    			snmp_bat_flag_puts[0]|=0x0200;
;;;480    			}
;;;481    		}
;;;482    	else 
;;;483    		{
;;;484    		snmp_bat_flag[0]&=~0x0200;
;;;485    		if(snmp_bat_flag_puts[0]&0x0200) 
;;;486    			{
;;;487    			snmp_trap_send("BAT #1,equalising charge is off",5,8,15);
;;;488    			snmp_bat_flag_puts[0]&=~0x0200;
;;;489    			}
;;;490    		}
;;;491    
;;;492    	if(vz1_error)										//Уравнительный заряд заблокирован по вентиляции 
;;;493    		{
;;;494    		snmp_bat_flag[0]|=0x0400;
;;;495    		if((snmp_bat_flag_puts[0]&0x0400)==0) 
;;;496    			{
;;;497    			snmp_trap_send("BAT #1,equalising charge is blocked",5,8,16); 
;;;498    			snmp_bat_flag_puts[0]|=0x0400;
;;;499    			}
;;;500    		}
;;;501    	else 
;;;502    		{
;;;503    		snmp_bat_flag[0]&=~0x0400;
;;;504    		if(snmp_bat_flag_puts[0]&0x0400) 
;;;505    			{
;;;506    			snmp_trap_send("BAT #1,equalising charge is unblocked",5,8,17);
;;;507    			snmp_bat_flag_puts[0]&=~0x0400;
;;;508    			} 
;;;509    		}
;;;510    
;;;511    	if(vz2_stat!=vz2sOFF)								//Формовочный заряд 
;;;512    		{
;;;513    		snmp_bat_flag[0]|=0x0800;
;;;514    		if((snmp_bat_flag_puts[0]&0x0800)==0) 
;;;515    			{
;;;516    			snmp_trap_send("BAT #1,molding charge is on",5,8,18); 
;;;517    			snmp_bat_flag_puts[0]|=0x0800;
;;;518    			}
;;;519    		}
;;;520    	else 
;;;521    		{
;;;522    		snmp_bat_flag[0]&=~0x0800;
;;;523    		if(snmp_bat_flag_puts[0]&0x0800) 
;;;524    			{
;;;525    			snmp_trap_send("BAT #1,molding charge is off",5,8,19);
;;;526    			snmp_bat_flag_puts[0]&=~0x0800;
;;;527    			}
;;;528    		}
;;;529    
;;;530    	if(vz2_error) 										//Формовочный заряд заблокирован по вентиляции
;;;531    		{
;;;532    		snmp_bat_flag[0]|=0x1000;
;;;533    		if((snmp_bat_flag_puts[0]&0x1000)==0) 
;;;534    			{
;;;535    			snmp_trap_send("BAT #1,molding charge is blocked",5,8,20); 
;;;536    			snmp_bat_flag_puts[0]|=0x1000;
;;;537    			}
;;;538    		}
;;;539    	else 
;;;540    		{
;;;541    		snmp_bat_flag[0]&=~0x1000;
;;;542    		if(snmp_bat_flag_puts[0]&0x1000) 
;;;543    			{
;;;544    			snmp_trap_send("BAT #1,molding charge is unblocked",5,8,21);
;;;545    			snmp_bat_flag_puts[0]&=~0x1000;
;;;546    			} 
;;;547    		}
;;;548    	}
;;;549    else 
;;;550    	{
;;;551    	snmp_bat_flag[0]=0; 
;;;552    	snmp_bat_flag_puts[0]=0;
000034  f9b40000          LDRSH    r0,[r4,#0]  ; av_tbox_cnt
;;;553    	}
;;;554    
;;;555    if(!snmp_bat_status[1])	 			//Батарея №2
000038  495c              LDR      r1,|L6.428|
00003a  2601              MOVS     r6,#1
00003c  2805              CMP      r0,#5
;;;556    	{
;;;557    	if((bat[1]._Ub<(USIGN*10)))		//Снижение напряжения батареи ниже Uбсигн 
;;;558    		{
;;;559    		snmp_bat_flag[1]|=0x0001; 
;;;560    		if((snmp_bat_flag_puts[1]&0x0001)==0) 
;;;561    			{
;;;562    			snmp_trap_send("BAT #1 Alarm, battery is low",5,8,22); 
;;;563    			snmp_bat_flag_puts[1]|=0x0001;
;;;564    			}
;;;565    		}
;;;566    	else 
;;;567    		{
;;;568    		snmp_bat_flag[1]&=~0x0001; 
;;;569    		if(snmp_bat_flag_puts[1]&0x0001) 
;;;570    			{
;;;571    			snmp_trap_send("BAT #1 Alarm clear, battery is not low",5,8,23);
;;;572    			snmp_bat_flag_puts[1]&=~0x0001;
;;;573    			}
;;;574    		}
;;;575    
;;;576    	if(bat[1]._temper_stat&0x01)	//Повышенная температура батареи, первый порог - предупреждение
;;;577    		{
;;;578    		snmp_bat_flag[1]|=0x0002;
;;;579    		if((snmp_bat_flag_puts[0]&0x0002)==0) 
;;;580    			{
;;;581    			snmp_trap_send("BAT #1 Warning, high battery temperature",5,8,24); 
;;;582    			snmp_bat_flag_puts[1]|=0x0002;
;;;583    			}
;;;584    		}
;;;585    	else 
;;;586    		{
;;;587    		snmp_bat_flag[1]&=~0x0002;
;;;588    		if(snmp_bat_flag_puts[1]&0x0002) 
;;;589    			{
;;;590    			snmp_trap_send("BAT #1 Warning clear, battery temperature is normal",5,8,25);
;;;591    			snmp_bat_flag_puts[1]&=~0x02;
;;;592    			}
;;;593    		}
;;;594    
;;;595    	if(bat[1]._temper_stat&0x02)  	//Повышенная температура батареи, второй порог - авария
;;;596    		{
;;;597    		snmp_bat_flag[1]|=0x0004;
;;;598    		if((snmp_bat_flag_puts[1]&0x0004)==0) 
;;;599    			{
;;;600    			snmp_trap_send("BAT #1 Alarm, high battery temperature",5,8,26); 
;;;601    			snmp_bat_flag_puts[1]|=0x0004;
;;;602    			}
;;;603    		}
;;;604    	else 
;;;605    		{
;;;606    		snmp_bat_flag[1]&=~0x0004;
;;;607    		if(snmp_bat_flag_puts[1]&0x0004) 
;;;608    			{
;;;609    			snmp_trap_send("BAT #1 Alarm clear, battery temperature is normal",5,8,27);
;;;610    			snmp_bat_flag_puts[1]&=~0x0004;
;;;611    			}
;;;612    		}
;;;613    
;;;614    	if(bat[1]._Ib<(-IKB)) snmp_bat_flag[1]|=0x0008;		//Разряд батареи
;;;615    	else if(bat[1]._Ib>IKB) snmp_bat_flag[1]&=~0x0008;	//Заряд батареи
;;;616    
;;;617    	if((spc_stat==spcKE)&&(spc_bat==0))					//Контроль емкости батареи №1 
;;;618    		{
;;;619    		snmp_bat_flag[1]|=0x0010;
;;;620    		if((snmp_bat_flag_puts[1]&0x0010)==0) 
;;;621    			{
;;;622    			snmp_trap_send("BAT #1, capacity test started",5,8,28); 
;;;623    			snmp_bat_flag_puts[1]|=0x0010;
;;;624    			}
;;;625    		}
;;;626    	else 
;;;627    		{
;;;628    		snmp_bat_flag[1]&=~0x0010;
;;;629    		if(snmp_bat_flag_puts[1]&0x0010) 
;;;630    			{
;;;631    			snmp_trap_send("BAT #1, capacity test stopped",5,8,29);
;;;632    			snmp_bat_flag_puts[1]&=~0x0010;
;;;633    			}
;;;634    		}
;;;635    		
;;;636    	if(spc_stat==spcVZ)									//Выравнивающий заряд 
;;;637    		{
;;;638    		snmp_bat_flag[1]|=0x0020;
;;;639    		if((snmp_bat_flag_puts[1]&0x0020)==0) 
;;;640    			{
;;;641    			snmp_trap_send("BAT #1,leveling charge is started",5,8,30); 
;;;642    			snmp_bat_flag_puts[1]|=0x0020;
;;;643    			}
;;;644    		}
;;;645    	else 
;;;646    		{
;;;647    		snmp_bat_flag[1]&=~0x0020;
;;;648    		if(snmp_bat_flag_puts[1]&0x0020) 
;;;649    			{
;;;650    			snmp_trap_send("BAT #1,leveling charge is stopped",5,8,31);
;;;651    			snmp_bat_flag_puts[1]&=~0x0020;
;;;652    			}
;;;653    		}
;;;654    
;;;655    	if(vz_error)										 //Выравнивающий заряд заблокирован по вентиляции
;;;656    		{
;;;657    		snmp_bat_flag[1]|=0x0040;
;;;658    		if((snmp_bat_flag_puts[1]&0x0040)==0) 
;;;659    			{
;;;660    			snmp_trap_send("BAT #1,leveling charge is blocked",5,8,32); 
;;;661    			snmp_bat_flag_puts[1]|=0x0040;
;;;662    			}
;;;663    		}
;;;664    	else 
;;;665    		{
;;;666    		snmp_bat_flag[1]&=~0x0040;
;;;667    		if(snmp_bat_flag_puts[1]&0x0040) 
;;;668    			{
;;;669    			snmp_trap_send("BAT #1,leveling charge is unblocked",5,8,33);
;;;670    			snmp_bat_flag_puts[1]&=~0x0040;
;;;671    			} 
;;;672    		}
;;;673    
;;;674    	if(sp_ch_stat==scsWRK) 								//Ускореннный заряд
;;;675    		{
;;;676    		snmp_bat_flag[1]|=0x0080;
;;;677    		if((snmp_bat_flag_puts[1]&0x0080)==0) 
;;;678    			{
;;;679    			snmp_trap_send("BAT #1,speed charge is started",5,8,34); 
;;;680    			snmp_bat_flag_puts[1]|=0x0080;
;;;681    			}
;;;682    		}
;;;683    	else 
;;;684    		{
;;;685    		snmp_bat_flag[1]&=~0x0080;
;;;686    		if(snmp_bat_flag_puts[1]&0x0080) 
;;;687    			{
;;;688    			snmp_trap_send("BAT #1,speed charge is stopped",5,8,35);
;;;689    			snmp_bat_flag_puts[1]&=~0x0080;
;;;690    			}
;;;691    		}
;;;692    
;;;693    	if(sp_ch_error) 									//Ускореннный заряд заблокирован по вентиляции
;;;694    		{
;;;695    		snmp_bat_flag[1]|=0x0100;
;;;696    		if((snmp_bat_flag_puts[1]&0x0100)==0) 
;;;697    			{
;;;698    			snmp_trap_send("BAT #1,speed charge is blocked",5,8,36); 
;;;699    			snmp_bat_flag_puts[1]|=0x0100;
;;;700    			}
;;;701    		}
;;;702    	else 
;;;703    		{
;;;704    		snmp_bat_flag[1]&=~0x0100;
;;;705    		if(snmp_bat_flag_puts[1]&0x0100) 
;;;706    			{
;;;707    			snmp_trap_send("BAT #1,speed charge is unblocked",5,8,37);
;;;708    			snmp_bat_flag_puts[1]&=~0x0100;
;;;709    			} 
;;;710    		}
;;;711    
;;;712    	if(vz1_stat!=vz1sOFF)								//Уравнительный заряд 
;;;713    		{
;;;714    		snmp_bat_flag[1]|=0x0200;
;;;715    		if((snmp_bat_flag_puts[1]&0x0200)==0) 
;;;716    			{
;;;717    			snmp_trap_send("BAT #1,equalising charge is on",5,8,38); 
;;;718    			snmp_bat_flag_puts[1]|=0x0200;
;;;719    			}
;;;720    		}
;;;721    	else 
;;;722    		{
;;;723    		snmp_bat_flag[1]&=~0x0200;
;;;724    		if(snmp_bat_flag_puts[1]&0x0200) 
;;;725    			{
;;;726    			snmp_trap_send("BAT #1,equalising charge is off",5,8,39);
;;;727    			snmp_bat_flag_puts[1]&=~0x0200;
;;;728    			}
;;;729    		}
;;;730    
;;;731    	if(vz1_error)										//Уравнительный заряд заблокирован по вентиляции 
;;;732    		{
;;;733    		snmp_bat_flag[1]|=0x0400;
;;;734    		if((snmp_bat_flag_puts[1]&0x0400)==0) 
;;;735    			{
;;;736    			snmp_trap_send("BAT #1,equalising charge is blocked",5,8,40); 
;;;737    			snmp_bat_flag_puts[1]|=0x0400;
;;;738    			}
;;;739    		}
;;;740    	else 
;;;741    		{
;;;742    		snmp_bat_flag[1]&=~0x0400;
;;;743    		if(snmp_bat_flag_puts[1]&0x0400) 
;;;744    			{
;;;745    			snmp_trap_send("BAT #1,equalising charge is unblocked",5,8,41);
;;;746    			snmp_bat_flag_puts[1]&=~0x0400;
;;;747    			} 
;;;748    		}
;;;749    
;;;750    	if(vz2_stat!=vz2sOFF)								//Формовочный заряд 
;;;751    		{
;;;752    		snmp_bat_flag[1]|=0x0800;
;;;753    		if((snmp_bat_flag_puts[1]&0x0800)==0) 
;;;754    			{
;;;755    			snmp_trap_send("BAT #1,molding charge is on",5,8,42); 
;;;756    			snmp_bat_flag_puts[1]|=0x0800;
;;;757    			}
;;;758    		}
;;;759    	else 
;;;760    		{
;;;761    		snmp_bat_flag[1]&=~0x0800;
;;;762    		if(snmp_bat_flag_puts[1]&0x0800) 
;;;763    			{
;;;764    			snmp_trap_send("BAT #1,molding charge is off",5,8,43);
;;;765    			snmp_bat_flag_puts[1]&=~0x0800;
;;;766    			}
;;;767    		}
;;;768    
;;;769    	if(vz2_error) 										//Формовочный заряд заблокирован по вентиляции
;;;770    		{
;;;771    		snmp_bat_flag[1]|=0x1000;
;;;772    		if((snmp_bat_flag_puts[1]&0x1000)==0) 
;;;773    			{
;;;774    			snmp_trap_send("BAT #1,molding charge is blocked",5,8,44); 
;;;775    			snmp_bat_flag_puts[1]|=0x1000;
;;;776    			}
;;;777    		}
;;;778    	else 
;;;779    		{
;;;780    		snmp_bat_flag[1]&=~0x1000;
;;;781    		if(snmp_bat_flag_puts[1]&0x1000) 
;;;782    			{
;;;783    			snmp_trap_send("BAT #1,molding charge is unblocked",5,8,45);
;;;784    			snmp_bat_flag_puts[1]&=~0x1000;
;;;785    			} 
;;;786    		}
;;;787    	}
;;;788    else 
;;;789    	{
;;;790    	snmp_bat_flag[1]=0; 
00003e  dd00              BLE      |L6.66|
;;;791    	snmp_bat_flag_puts[1]=0;
000040  700e              STRB     r6,[r1,#0]
                  |L6.66|
;;;792    	}
;;;793    /*
;;;794    if(!snmp_bat_status[1])
;;;795    	{
;;;796    	if((bat[1]._Ub<(USIGN*10))) 
;;;797    		{
;;;798    		snmp_bat_flag[1]|=0x01; 
;;;799    		if((snmp_bat_flag_puts[1]&0x01)==0) 
;;;800    			{
;;;801    			snmp_trap_send("BAT #2 Alarm, battery is low",5,8,0); 
;;;802    			snmp_bat_flag_puts[1]|=0x01;
;;;803    			}
;;;804    		}
;;;805    	else 
;;;806    		{
;;;807    		snmp_bat_flag[1]&=~0x01; 
;;;808    		if(snmp_bat_flag_puts[1]&0x01) 
;;;809    			{
;;;810    			snmp_trap_send("BAT #2 Alarm clear, battery is not low",5,8,1);
;;;811    			snmp_bat_flag_puts[1]&=~0x01;
;;;812    			}
;;;813    		}
;;;814    	if(bat[1]._temper_stat&0x01) 
;;;815    		{
;;;816    		snmp_bat_flag[1]|=0x02;
;;;817    		if((snmp_bat_flag_puts[1]&0x02)==0) 
;;;818    			{
;;;819    			snmp_trap_send("BAT #2 Alarm, high battery temperature",5,8,2); 
;;;820    			snmp_bat_flag_puts[1]|=0x02;
;;;821    			}
;;;822    		}
;;;823    	else 
;;;824    		{
;;;825    		snmp_bat_flag[1]&=~0x02;
;;;826    		if(snmp_bat_flag_puts[1]&0x02) 
;;;827    			{
;;;828    			snmp_trap_send("BAT #2 Alarm clear, battery temperature is normal",5,8,3);
;;;829    			snmp_bat_flag_puts[1]&=~0x02;
;;;830    			}
;;;831    		}
;;;832    	if(bat[1]._temper_stat&0x02) 
;;;833    		{
;;;834    		snmp_bat_flag[1]|=0x04;
;;;835    		if((snmp_bat_flag_puts[1]&0x04)==0) 
;;;836    			{
;;;837    			snmp_trap_send("BAT #2 Alarm, maximum battery temperature",5,8,4); 
;;;838    			snmp_bat_flag_puts[1]|=0x04;
;;;839    			}
;;;840    		}
;;;841    	else 
;;;842    		{
;;;843    		snmp_bat_flag[1]&=~0x04;
;;;844    		if(snmp_bat_flag_puts[1]&0x04) 
;;;845    			{
;;;846    			snmp_trap_send("BAT #2 Alarm clear, battery temperature is normal",5,8,5);
;;;847    			snmp_bat_flag_puts[1]&=~0x04;
;;;848    			}
;;;849    		}
;;;850    		
;;;851    	if(bat[1]._Ib<(-IKB))	snmp_bat_flag[1]|=0x80;
;;;852    	else if(bat[1]._Ib>IKB)snmp_bat_flag[1]&=~0x80;
;;;853    
;;;854    	if((spc_stat==spcKE)&&(spc_bat==1)) 
;;;855    		{
;;;856    		snmp_bat_flag[1]|=0x10;
;;;857    		if((snmp_bat_flag_puts[1]&0x10)==0) 
;;;858    			{
;;;859    			snmp_trap_send("BAT #2, capacity check enabled",5,8,6); 
;;;860    			snmp_bat_flag_puts[1]|=0x10;
;;;861    			}
;;;862    		}
;;;863    	else 
;;;864    		{
;;;865    		snmp_bat_flag[1]&=~0x10;
;;;866    		if(snmp_bat_flag_puts[1]&0x10) 
;;;867    			{
;;;868    			snmp_trap_send("BAT #2, capacity check disabled",5,8,7);
;;;869    			snmp_bat_flag_puts[1]&=~0x10;
;;;870    			}
;;;871    		}
;;;872    		
;;;873    	if(spc_stat==spcVZ) 
;;;874    		{
;;;875    		snmp_bat_flag[1]|=0x20;
;;;876    		if((snmp_bat_flag_puts[1]&0x20)==0) 
;;;877    			{
;;;878    			snmp_trap_send("BAT #2,equalizing charge is on",5,8,8); 
;;;879    			snmp_bat_flag_puts[1]|=0x20;
;;;880    			}
;;;881    		}
;;;882    	else 
;;;883    		{
;;;884    		snmp_bat_flag[1]&=~0x20;
;;;885    		if(snmp_bat_flag_puts[1]&0x20) 
;;;886    			{
;;;887    			snmp_trap_send("BAT #2,equalizing charge is off",5,8,9);
;;;888    			snmp_bat_flag_puts[1]&=~0x20;
;;;889    			}
;;;890    		}
;;;891    
;;;892    	if(vz_error) 
;;;893    		{
;;;894    		snmp_bat_flag[1]|=0x40;
;;;895    		if((snmp_bat_flag_puts[1]&0x40)==0) 
;;;896    			{
;;;897    			snmp_trap_send("BAT #2,equalizing charge blocked",5,8,10); 
;;;898    			snmp_bat_flag_puts[1]|=0x40;
;;;899    			}
;;;900    		}
;;;901    	else 
;;;902    		{
;;;903    		snmp_bat_flag[1]&=~0x40;
;;;904    		if(snmp_bat_flag_puts[1]&0x40) 
;;;905    			{
;;;906    			snmp_trap_send("BAT #2,equalizing charge is not blocked",5,8,11);
;;;907    			snmp_bat_flag_puts[1]&=~0x40;
;;;908    			} 
;;;909    		}
;;;910       }
;;;911    else 
;;;912    	{
;;;913    	snmp_bat_flag[1]=0; 
;;;914    	snmp_bat_flag_puts[1]=0;
;;;915    	} */
;;;916    }
000042  2400              MOVS     r4,#0
000044  2801              CMP      r0,#1
000046  da00              BGE      |L6.74|
000048  700c              STRB     r4,[r1,#0]            ;318
                  |L6.74|
00004a  4959              LDR      r1,|L6.432|
00004c  f9b50000          LDRSH    r0,[r5,#0]            ;318  ; t_box
000050  4a58              LDR      r2,|L6.436|
000052  f9b11000          LDRSH    r1,[r1,#0]            ;320  ; TBOXREG
000056  4f58              LDR      r7,|L6.440|
000058  1e8b              SUBS     r3,r1,#2              ;320
00005a  4298              CMP      r0,r3                 ;320
00005c  da0f              BGE      |L6.126|
00005e  f9921000          LDRSB    r1,[r2,#0]            ;321  ; t_box_cnt
000062  291e              CMP      r1,#0x1e              ;318
000064  da1e              BGE      |L6.164|
000066  f1010101          ADD      r1,r1,#1              ;320
00006a  b249              SXTB     r1,r1                 ;321
00006c  7011              STRB     r1,[r2,#0]            ;321
00006e  291e              CMP      r1,#0x1e              ;323
000070  db18              BLT      |L6.164|
000072  8839              LDRH     r1,[r7,#0]            ;323  ; main_vent_pos
000074  f1a10101          SUB      r1,r1,#1              ;323
000078  8039              STRH     r1,[r7,#0]            ;323
00007a  7014              STRB     r4,[r2,#0]            ;324
00007c  e012              B        |L6.164|
                  |L6.126|
00007e  4288              CMP      r0,r1                 ;324
000080  dd0f              BLE      |L6.162|
000082  f9921000          LDRSB    r1,[r2,#0]            ;324  ; t_box_cnt
000086  291e              CMP      r1,#0x1e              ;329
000088  da0c              BGE      |L6.164|
00008a  f1010101          ADD      r1,r1,#1              ;330
00008e  b249              SXTB     r1,r1                 ;332
000090  7011              STRB     r1,[r2,#0]            ;332
000092  291e              CMP      r1,#0x1e              ;332
000094  db06              BLT      |L6.164|
000096  8839              LDRH     r1,[r7,#0]            ;332  ; main_vent_pos
000098  f1010101          ADD      r1,r1,#1              ;332
00009c  8039              STRH     r1,[r7,#0]            ;333
00009e  7014              STRB     r4,[r2,#0]            ;333
0000a0  e000              B        |L6.164|
                  |L6.162|
0000a2  7014              STRB     r4,[r2,#0]            ;337
                  |L6.164|
0000a4  4945              LDR      r1,|L6.444|
0000a6  f9b11000          LDRSH    r1,[r1,#0]            ;337  ; TBOXVENTMAX
0000aa  4288              CMP      r0,r1                 ;339
0000ac  dd05              BLE      |L6.186|
0000ae  2214              MOVS     r2,#0x14              ;339
0000b0  2100              MOVS     r1,#0                 ;339
0000b2  4841              LDR      r0,|L6.440|
0000b4  f7fffffe          BL       gran
0000b8  e007              B        |L6.202|
                  |L6.186|
0000ba  4841              LDR      r0,|L6.448|
0000bc  2100              MOVS     r1,#0                 ;342
0000be  8800              LDRH     r0,[r0,#0]            ;342  ; pos_vent
0000c0  3009              ADDS     r0,r0,#9              ;342
0000c2  b202              SXTH     r2,r0                 ;342
0000c4  483c              LDR      r0,|L6.440|
0000c6  f7fffffe          BL       gran
                  |L6.202|
0000ca  20f0              MOVS     r0,#0xf0              ;343
0000cc  f7fffffe          BL       mess_find_unvol
0000d0  b128              CBZ      r0,|L6.222|
0000d2  483c              LDR      r0,|L6.452|
0000d4  6801              LDR      r1,[r0,#0]            ;348  ; mess_data
0000d6  29f1              CMP      r1,#0xf1              ;349
0000d8  d101              BNE      |L6.222|
0000da  6840              LDR      r0,[r0,#4]            ;349  ; mess_data
0000dc  8038              STRH     r0,[r7,#0]            ;351
                  |L6.222|
0000de  f9b71000          LDRSH    r1,[r7,#0]            ;351  ; main_vent_pos
0000e2  4839              LDR      r0,|L6.456|
0000e4  2901              CMP      r1,#1                 ;351
0000e6  dc01              BGT      |L6.236|
0000e8  7006              STRB     r6,[r0,#0]            ;352
0000ea  e000              B        |L6.238|
                  |L6.236|
0000ec  7004              STRB     r4,[r0,#0]            ;352
                  |L6.238|
0000ee  4837              LDR      r0,|L6.460|
0000f0  f8df80dc          LDR      r8,|L6.464|
0000f4  f9b00000          LDRSH    r0,[r0,#0]            ;356  ; TBATDISABLE
0000f8  f1a00132          SUB      r1,r0,#0x32           ;358
0000fc  2928              CMP      r1,#0x28              ;358
0000fe  d821              BHI      |L6.324|
000100  f9b51000          LDRSH    r1,[r5,#0]            ;359  ; t_box
000104  4f33              LDR      r7,|L6.468|
000106  4281              CMP      r1,r0                 ;361
000108  dd03              BLE      |L6.274|
00010a  8838              LDRH     r0,[r7,#0]            ;361  ; tbatdisable_cnt
00010c  f1000001          ADD      r0,r0,#1              ;361
000110  8038              STRH     r0,[r7,#0]            ;361
                  |L6.274|
000112  4831              LDR      r0,|L6.472|
000114  f9b00000          LDRSH    r0,[r0,#0]            ;362  ; TBATENABLE
000118  4281              CMP      r1,r0                 ;362
00011a  da03              BGE      |L6.292|
00011c  8838              LDRH     r0,[r7,#0]            ;367  ; tbatdisable_cnt
00011e  f1a00001          SUB      r0,r0,#1              ;367
000122  8038              STRH     r0,[r7,#0]            ;367
                  |L6.292|
000124  2206              MOVS     r2,#6                 ;368
000126  2100              MOVS     r1,#0                 ;368
000128  482a              LDR      r0,|L6.468|
00012a  f7fffffe          BL       gran
00012e  f9b70000          LDRSH    r0,[r7,#0]            ;370  ; tbatdisable_cnt
000132  2805              CMP      r0,#5                 ;370
000134  dd01              BLE      |L6.314|
000136  f8886000          STRB     r6,[r8,#0]            ;371
                  |L6.314|
00013a  2801              CMP      r0,#1                 ;371
00013c  da04              BGE      |L6.328|
00013e  f8884000          STRB     r4,[r8,#0]            ;371
000142  e001              B        |L6.328|
                  |L6.324|
000144  f8884000          STRB     r4,[r8,#0]            ;375
                  |L6.328|
000148  4824              LDR      r0,|L6.476|
00014a  4f25              LDR      r7,|L6.480|
00014c  f9b00000          LDRSH    r0,[r0,#0]            ;375  ; TLOADDISABLE
000150  f1a00132          SUB      r1,r0,#0x32           ;375
000154  291e              CMP      r1,#0x1e              ;375
000156  d820              BHI      |L6.410|
000158  f9b51000          LDRSH    r1,[r5,#0]            ;375  ; t_box
00015c  4d21              LDR      r5,|L6.484|
00015e  4281              CMP      r1,r0                 ;376
000160  dd03              BLE      |L6.362|
000162  8828              LDRH     r0,[r5,#0]            ;376  ; tloaddisable_cnt
000164  f1000001          ADD      r0,r0,#1              ;376
000168  8028              STRH     r0,[r5,#0]            ;378
                  |L6.362|
00016a  481f              LDR      r0,|L6.488|
00016c  f9b00000          LDRSH    r0,[r0,#0]            ;378  ; TLOADENABLE
000170  4281              CMP      r1,r0                 ;378
000172  da03              BGE      |L6.380|
000174  8828              LDRH     r0,[r5,#0]            ;378  ; tloaddisable_cnt
000176  f1a00001          SUB      r0,r0,#1              ;389
00017a  8028              STRH     r0,[r5,#0]            ;389
                  |L6.380|
00017c  2206              MOVS     r2,#6                 ;389
00017e  2100              MOVS     r1,#0                 ;390
000180  4818              LDR      r0,|L6.484|
000182  f7fffffe          BL       gran
000186  f9b50000          LDRSH    r0,[r5,#0]            ;392  ; tloaddisable_cnt
00018a  2805              CMP      r0,#5                 ;392
00018c  dd00              BLE      |L6.400|
00018e  703e              STRB     r6,[r7,#0]            ;392
                  |L6.400|
000190  2801              CMP      r0,#1                 ;393
000192  da00              BGE      |L6.406|
000194  703c              STRB     r4,[r7,#0]            ;393
                  |L6.406|
000196  e8bd81f0          POP      {r4-r8,pc}            ;393
                  |L6.410|
00019a  703c              STRB     r4,[r7,#0]            ;397
00019c  e7fb              B        |L6.406|
;;;917    
                          ENDP

00019e  0000              DCW      0x0000
                  |L6.416|
                          DCD      t_box
                  |L6.420|
                          DCD      TBOXMAX
                  |L6.424|
                          DCD      av_tbox_cnt
                  |L6.428|
                          DCD      av_tbox_stat
                  |L6.432|
                          DCD      TBOXREG
                  |L6.436|
                          DCD      t_box_cnt
                  |L6.440|
                          DCD      main_vent_pos
                  |L6.444|
                          DCD      TBOXVENTMAX
                  |L6.448|
                          DCD      pos_vent
                  |L6.452|
                          DCD      mess_data
                  |L6.456|
                          DCD      mixer_vent_stat
                  |L6.460|
                          DCD      TBATDISABLE
                  |L6.464|
                          DCD      tbatdisable_stat
                  |L6.468|
                          DCD      tbatdisable_cnt
                  |L6.472|
                          DCD      TBATENABLE
                  |L6.476|
                          DCD      TLOADDISABLE
                  |L6.480|
                          DCD      tloaddisable_stat
                  |L6.484|
                          DCD      tloaddisable_cnt
                  |L6.488|
                          DCD      TLOADENABLE

                          AREA ||area_number.7||, CODE, READONLY, ALIGN=2

                          EXPORTAS ||area_number.7||, ||.text||
                  u_avt_set_hndl1 PROC
;;;305    // заполнение флагов для АКБ
;;;306    void bat_flag (void)
000000  e92d5fff          PUSH     {r0-r12,lr}
;;;307    {  
;;;308    if(spc_stat!=spcVZ) 
000004  484e              LDR      r0,|L7.320|
;;;309    	{
;;;310    	vz_error=0;
000006  2165              MOVS     r1,#0x65
000008  2564              MOVS     r5,#0x64              ;308
00000a  f9b00000          LDRSH    r0,[r0,#0]            ;308
00000e  4c4b              LDR      r4,|L7.316|
000010  4341              MULS     r1,r0,r1
;;;311    	sp_ch_error=0;
000012  eb001040          ADD      r0,r0,r0,LSL #5
;;;312    	vz1_error=0;
;;;313    	vz2_error=0;
000016  fbb1f1f5          UDIV     r1,r1,r5
;;;314    	}
;;;315    
;;;316    if(!snmp_bat_status[0])	 			//Батарея №1
00001a  eb000040          ADD      r0,r0,r0,LSL #1
;;;317    	{
;;;318    	if((bat[0]._Ub<(USIGN*10)))		//Снижение напряжения батареи ниже Uбсигн 
00001e  fbb0f0f5          UDIV     r0,r0,r5
000022  f8dfb120          LDR      r11,|L7.324|
000026  b20a              SXTH     r2,r1                 ;316
;;;319    		{
;;;320    		snmp_bat_flag[0]|=0x0001; 
;;;321    		if((snmp_bat_flag_puts[0]&0x0001)==0) 
;;;322    			{
;;;323    			snmp_trap_send("BAT #1 Alarm, battery is low",5,8,0); 
;;;324    			snmp_bat_flag_puts[0]|=0x0001;
;;;325    			}
;;;326    		}
;;;327    	else 
;;;328    		{
;;;329    		snmp_bat_flag[0]&=~0x0001; 
;;;330    		if(snmp_bat_flag_puts[0]&0x0001) 
;;;331    			{
;;;332    			snmp_trap_send("BAT #1 Alarm clear, battery is not low",5,8,1);
;;;333    			snmp_bat_flag_puts[0]&=~0x0001;
;;;334    			}
;;;335    		}
;;;336    
;;;337    	if(bat[0]._temper_stat&0x01)	//Повышенная температура батареи, первый порог - предупреждение
;;;338    		{
;;;339    		snmp_bat_flag[0]|=0x0002;
;;;340    		if((snmp_bat_flag_puts[0]&0x0002)==0) 
;;;341    			{
;;;342    			snmp_trap_send("BAT #1 Warning, high battery temperature",5,8,2); 
;;;343    			snmp_bat_flag_puts[0]|=0x0002;
;;;344    			}
;;;345    		}
;;;346    	else 
;;;347    		{
;;;348    		snmp_bat_flag[0]&=~0x0002;
;;;349    		if(snmp_bat_flag_puts[0]&0x0002) 
;;;350    			{
;;;351    			snmp_trap_send("BAT #1 Warning clear, battery temperature is normal",5,8,3);
;;;352    			snmp_bat_flag_puts[0]&=~0x02;
;;;353    			}
;;;354    		}
;;;355    
;;;356    	if(bat[0]._temper_stat&0x02)  	//Повышенная температура батареи, второй порог - авария
;;;357    		{
;;;358    		snmp_bat_flag[0]|=0x0004;
;;;359    		if((snmp_bat_flag_puts[0]&0x0004)==0) 
;;;360    			{
;;;361    			snmp_trap_send("BAT #1 Alarm, high battery temperature",5,8,4); 
;;;362    			snmp_bat_flag_puts[0]|=0x0004;
;;;363    			}
;;;364    		}
;;;365    	else 
;;;366    		{
;;;367    		snmp_bat_flag[0]&=~0x0004;
;;;368    		if(snmp_bat_flag_puts[0]&0x0004) 
;;;369    			{
;;;370    			snmp_trap_send("BAT #1 Alarm clear, battery temperature is normal",5,8,5);
;;;371    			snmp_bat_flag_puts[0]&=~0x0004;
;;;372    			}
;;;373    		}
;;;374    
;;;375    	if(bat[0]._Ib<(-IKB)) snmp_bat_flag[0]|=0x0008;		//Разряд батареи
000028  7823              LDRB     r3,[r4,#0]  ; uavt_set_stat
00002a  b201              SXTH     r1,r0
00002c  f89b0000          LDRB     r0,[r11,#0]           ;320
000030  4e45              LDR      r6,|L7.328|
;;;376    	else if(bat[0]._Ib>IKB) snmp_bat_flag[0]&=~0x0008;	//Заряд батареи
;;;377    
;;;378    	if((spc_stat==spcKE)&&(spc_bat==0))					//Контроль емкости батареи №1 
;;;379    		{
;;;380    		snmp_bat_flag[0]|=0x0010;
;;;381    		if((snmp_bat_flag_puts[0]&0x0010)==0) 
;;;382    			{
;;;383    			snmp_trap_send("BAT #1, capacity test started",5,8,6); 
;;;384    			snmp_bat_flag_puts[0]|=0x0010;
;;;385    			}
;;;386    		}
;;;387    	else 
;;;388    		{
;;;389    		snmp_bat_flag[0]&=~0x0010;
;;;390    		if(snmp_bat_flag_puts[0]&0x0010) 
;;;391    			{
;;;392    			snmp_trap_send("BAT #1, capacity test stopped",5,8,7);
;;;393    			snmp_bat_flag_puts[0]&=~0x0010;
;;;394    			}
;;;395    		}
;;;396    		
;;;397    	if(spc_stat==spcVZ)									//Выравнивающий заряд 
;;;398    		{
;;;399    		snmp_bat_flag[0]|=0x0020;
;;;400    		if((snmp_bat_flag_puts[0]&0x0020)==0) 
;;;401    			{
;;;402    			snmp_trap_send("BAT #1,leveling charge is started",5,8,8); 
;;;403    			snmp_bat_flag_puts[0]|=0x0020;
;;;404    			}
;;;405    		}
;;;406    	else 
;;;407    		{
;;;408    		snmp_bat_flag[0]&=~0x0020;
;;;409    		if(snmp_bat_flag_puts[0]&0x0020) 
;;;410    			{
;;;411    			snmp_trap_send("BAT #1,leveling charge is stopped",5,8,9);
;;;412    			snmp_bat_flag_puts[0]&=~0x0020;
;;;413    			}
;;;414    		}
;;;415    
;;;416    	if(vz_error)										 //Выравнивающий заряд заблокирован по вентиляции
;;;417    		{
;;;418    		snmp_bat_flag[0]|=0x0040;
;;;419    		if((snmp_bat_flag_puts[0]&0x0040)==0) 
;;;420    			{
;;;421    			snmp_trap_send("BAT #1,leveling charge is blocked",5,8,10); 
;;;422    			snmp_bat_flag_puts[0]|=0x0040;
;;;423    			}
;;;424    		}
;;;425    	else 
;;;426    		{
;;;427    		snmp_bat_flag[0]&=~0x0040;
;;;428    		if(snmp_bat_flag_puts[0]&0x0040) 
;;;429    			{
;;;430    			snmp_trap_send("BAT #1,leveling charge is unblocked",5,8,11);
;;;431    			snmp_bat_flag_puts[0]&=~0x0040;
;;;432    			} 
;;;433    		}
;;;434    
;;;435    	if(sp_ch_stat==scsWRK) 								//Ускореннный заряд
;;;436    		{
;;;437    		snmp_bat_flag[0]|=0x0080;
;;;438    		if((snmp_bat_flag_puts[0]&0x0080)==0) 
;;;439    			{
;;;440    			snmp_trap_send("BAT #1,speed charge is started",5,8,10); 
;;;441    			snmp_bat_flag_puts[0]|=0x0080;
;;;442    			}
;;;443    		}
;;;444    	else 
;;;445    		{
;;;446    		snmp_bat_flag[0]&=~0x0080;
;;;447    		if(snmp_bat_flag_puts[0]&0x0080) 
;;;448    			{
;;;449    			snmp_trap_send("BAT #1,speed charge is stopped",5,8,11);
;;;450    			snmp_bat_flag_puts[0]&=~0x0080;
;;;451    			}
;;;452    		}
;;;453    
;;;454    	if(sp_ch_error) 									//Ускореннный заряд заблокирован по вентиляции
;;;455    		{
;;;456    		snmp_bat_flag[0]|=0x0100;
;;;457    		if((snmp_bat_flag_puts[0]&0x0100)==0) 
;;;458    			{
;;;459    			snmp_trap_send("BAT #1,speed charge is blocked",5,8,12); 
;;;460    			snmp_bat_flag_puts[0]|=0x0100;
;;;461    			}
;;;462    		}
;;;463    	else 
;;;464    		{
;;;465    		snmp_bat_flag[0]&=~0x0100;
;;;466    		if(snmp_bat_flag_puts[0]&0x0100) 
;;;467    			{
;;;468    			snmp_trap_send("BAT #1,speed charge is unblocked",5,8,13);
;;;469    			snmp_bat_flag_puts[0]&=~0x0100;
;;;470    			} 
;;;471    		}
;;;472    
;;;473    	if(vz1_stat!=vz1sOFF)								//Уравнительный заряд 
;;;474    		{
;;;475    		snmp_bat_flag[0]|=0x0200;
;;;476    		if((snmp_bat_flag_puts[0]&0x0200)==0) 
;;;477    			{
;;;478    			snmp_trap_send("BAT #1,equalising charge is on",5,8,14); 
;;;479    			snmp_bat_flag_puts[0]|=0x0200;
;;;480    			}
;;;481    		}
;;;482    	else 
;;;483    		{
;;;484    		snmp_bat_flag[0]&=~0x0200;
;;;485    		if(snmp_bat_flag_puts[0]&0x0200) 
;;;486    			{
;;;487    			snmp_trap_send("BAT #1,equalising charge is off",5,8,15);
;;;488    			snmp_bat_flag_puts[0]&=~0x0200;
;;;489    			}
;;;490    		}
;;;491    
;;;492    	if(vz1_error)										//Уравнительный заряд заблокирован по вентиляции 
;;;493    		{
;;;494    		snmp_bat_flag[0]|=0x0400;
;;;495    		if((snmp_bat_flag_puts[0]&0x0400)==0) 
;;;496    			{
;;;497    			snmp_trap_send("BAT #1,equalising charge is blocked",5,8,16); 
;;;498    			snmp_bat_flag_puts[0]|=0x0400;
;;;499    			}
;;;500    		}
;;;501    	else 
;;;502    		{
;;;503    		snmp_bat_flag[0]&=~0x0400;
;;;504    		if(snmp_bat_flag_puts[0]&0x0400) 
;;;505    			{
;;;506    			snmp_trap_send("BAT #1,equalising charge is unblocked",5,8,17);
;;;507    			snmp_bat_flag_puts[0]&=~0x0400;
;;;508    			} 
;;;509    		}
;;;510    
;;;511    	if(vz2_stat!=vz2sOFF)								//Формовочный заряд 
;;;512    		{
;;;513    		snmp_bat_flag[0]|=0x0800;
;;;514    		if((snmp_bat_flag_puts[0]&0x0800)==0) 
;;;515    			{
;;;516    			snmp_trap_send("BAT #1,molding charge is on",5,8,18); 
;;;517    			snmp_bat_flag_puts[0]|=0x0800;
;;;518    			}
;;;519    		}
;;;520    	else 
;;;521    		{
;;;522    		snmp_bat_flag[0]&=~0x0800;
;;;523    		if(snmp_bat_flag_puts[0]&0x0800) 
;;;524    			{
;;;525    			snmp_trap_send("BAT #1,molding charge is off",5,8,19);
;;;526    			snmp_bat_flag_puts[0]&=~0x0800;
;;;527    			}
;;;528    		}
;;;529    
;;;530    	if(vz2_error) 										//Формовочный заряд заблокирован по вентиляции
;;;531    		{
;;;532    		snmp_bat_flag[0]|=0x1000;
;;;533    		if((snmp_bat_flag_puts[0]&0x1000)==0) 
;;;534    			{
;;;535    			snmp_trap_send("BAT #1,molding charge is blocked",5,8,20); 
;;;536    			snmp_bat_flag_puts[0]|=0x1000;
;;;537    			}
;;;538    		}
;;;539    	else 
;;;540    		{
;;;541    		snmp_bat_flag[0]&=~0x1000;
;;;542    		if(snmp_bat_flag_puts[0]&0x1000) 
;;;543    			{
;;;544    			snmp_trap_send("BAT #1,molding charge is unblocked",5,8,21);
;;;545    			snmp_bat_flag_puts[0]&=~0x1000;
;;;546    			} 
;;;547    		}
;;;548    	}
;;;549    else 
;;;550    	{
;;;551    	snmp_bat_flag[0]=0; 
000032  4f46              LDR      r7,|L7.332|
;;;552    	snmp_bat_flag_puts[0]=0;
000034  f8df8118          LDR      r8,|L7.336|
;;;553    	}
;;;554    
;;;555    if(!snmp_bat_status[1])	 			//Батарея №2
000038  f8df9118          LDR      r9,|L7.340|
00003c  f8dfa118          LDR      r10,|L7.344|
;;;556    	{
;;;557    	if((bat[1]._Ub<(USIGN*10)))		//Снижение напряжения батареи ниже Uбсигн 
;;;558    		{
;;;559    		snmp_bat_flag[1]|=0x0001; 
;;;560    		if((snmp_bat_flag_puts[1]&0x0001)==0) 
;;;561    			{
;;;562    			snmp_trap_send("BAT #1 Alarm, battery is low",5,8,22); 
;;;563    			snmp_bat_flag_puts[1]|=0x0001;
;;;564    			}
;;;565    		}
;;;566    	else 
;;;567    		{
;;;568    		snmp_bat_flag[1]&=~0x0001; 
;;;569    		if(snmp_bat_flag_puts[1]&0x0001) 
;;;570    			{
;;;571    			snmp_trap_send("BAT #1 Alarm clear, battery is not low",5,8,23);
;;;572    			snmp_bat_flag_puts[1]&=~0x0001;
;;;573    			}
;;;574    		}
;;;575    
;;;576    	if(bat[1]._temper_stat&0x01)	//Повышенная температура батареи, первый порог - предупреждение
;;;577    		{
;;;578    		snmp_bat_flag[1]|=0x0002;
;;;579    		if((snmp_bat_flag_puts[0]&0x0002)==0) 
;;;580    			{
;;;581    			snmp_trap_send("BAT #1 Warning, high battery temperature",5,8,24); 
;;;582    			snmp_bat_flag_puts[1]|=0x0002;
;;;583    			}
;;;584    		}
;;;585    	else 
;;;586    		{
;;;587    		snmp_bat_flag[1]&=~0x0002;
;;;588    		if(snmp_bat_flag_puts[1]&0x0002) 
;;;589    			{
;;;590    			snmp_trap_send("BAT #1 Warning clear, battery temperature is normal",5,8,25);
;;;591    			snmp_bat_flag_puts[1]&=~0x02;
;;;592    			}
;;;593    		}
;;;594    
;;;595    	if(bat[1]._temper_stat&0x02)  	//Повышенная температура батареи, второй порог - авария
;;;596    		{
;;;597    		snmp_bat_flag[1]|=0x0004;
;;;598    		if((snmp_bat_flag_puts[1]&0x0004)==0) 
;;;599    			{
;;;600    			snmp_trap_send("BAT #1 Alarm, high battery temperature",5,8,26); 
;;;601    			snmp_bat_flag_puts[1]|=0x0004;
;;;602    			}
;;;603    		}
;;;604    	else 
;;;605    		{
;;;606    		snmp_bat_flag[1]&=~0x0004;
;;;607    		if(snmp_bat_flag_puts[1]&0x0004) 
;;;608    			{
;;;609    			snmp_trap_send("BAT #1 Alarm clear, battery temperature is normal",5,8,27);
;;;610    			snmp_bat_flag_puts[1]&=~0x0004;
;;;611    			}
;;;612    		}
;;;613    
;;;614    	if(bat[1]._Ib<(-IKB)) snmp_bat_flag[1]|=0x0008;		//Разряд батареи
;;;615    	else if(bat[1]._Ib>IKB) snmp_bat_flag[1]&=~0x0008;	//Заряд батареи
;;;616    
;;;617    	if((spc_stat==spcKE)&&(spc_bat==0))					//Контроль емкости батареи №1 
;;;618    		{
;;;619    		snmp_bat_flag[1]|=0x0010;
;;;620    		if((snmp_bat_flag_puts[1]&0x0010)==0) 
;;;621    			{
;;;622    			snmp_trap_send("BAT #1, capacity test started",5,8,28); 
;;;623    			snmp_bat_flag_puts[1]|=0x0010;
;;;624    			}
;;;625    		}
;;;626    	else 
;;;627    		{
;;;628    		snmp_bat_flag[1]&=~0x0010;
;;;629    		if(snmp_bat_flag_puts[1]&0x0010) 
;;;630    			{
;;;631    			snmp_trap_send("BAT #1, capacity test stopped",5,8,29);
;;;632    			snmp_bat_flag_puts[1]&=~0x0010;
;;;633    			}
;;;634    		}
;;;635    		
;;;636    	if(spc_stat==spcVZ)									//Выравнивающий заряд 
;;;637    		{
;;;638    		snmp_bat_flag[1]|=0x0020;
;;;639    		if((snmp_bat_flag_puts[1]&0x0020)==0) 
;;;640    			{
;;;641    			snmp_trap_send("BAT #1,leveling charge is started",5,8,30); 
;;;642    			snmp_bat_flag_puts[1]|=0x0020;
;;;643    			}
;;;644    		}
;;;645    	else 
;;;646    		{
;;;647    		snmp_bat_flag[1]&=~0x0020;
;;;648    		if(snmp_bat_flag_puts[1]&0x0020) 
;;;649    			{
;;;650    			snmp_trap_send("BAT #1,leveling charge is stopped",5,8,31);
;;;651    			snmp_bat_flag_puts[1]&=~0x0020;
;;;652    			}
;;;653    		}
;;;654    
;;;655    	if(vz_error)										 //Выравнивающий заряд заблокирован по вентиляции
;;;656    		{
;;;657    		snmp_bat_flag[1]|=0x0040;
;;;658    		if((snmp_bat_flag_puts[1]&0x0040)==0) 
;;;659    			{
;;;660    			snmp_trap_send("BAT #1,leveling charge is blocked",5,8,32); 
;;;661    			snmp_bat_flag_puts[1]|=0x0040;
;;;662    			}
;;;663    		}
;;;664    	else 
;;;665    		{
;;;666    		snmp_bat_flag[1]&=~0x0040;
;;;667    		if(snmp_bat_flag_puts[1]&0x0040) 
;;;668    			{
;;;669    			snmp_trap_send("BAT #1,leveling charge is unblocked",5,8,33);
;;;670    			snmp_bat_flag_puts[1]&=~0x0040;
;;;671    			} 
;;;672    		}
;;;673    
;;;674    	if(sp_ch_stat==scsWRK) 								//Ускореннный заряд
;;;675    		{
;;;676    		snmp_bat_flag[1]|=0x0080;
;;;677    		if((snmp_bat_flag_puts[1]&0x0080)==0) 
;;;678    			{
;;;679    			snmp_trap_send("BAT #1,speed charge is started",5,8,34); 
;;;680    			snmp_bat_flag_puts[1]|=0x0080;
;;;681    			}
;;;682    		}
;;;683    	else 
;;;684    		{
;;;685    		snmp_bat_flag[1]&=~0x0080;
;;;686    		if(snmp_bat_flag_puts[1]&0x0080) 
;;;687    			{
;;;688    			snmp_trap_send("BAT #1,speed charge is stopped",5,8,35);
;;;689    			snmp_bat_flag_puts[1]&=~0x0080;
;;;690    			}
;;;691    		}
;;;692    
;;;693    	if(sp_ch_error) 									//Ускореннный заряд заблокирован по вентиляции
;;;694    		{
;;;695    		snmp_bat_flag[1]|=0x0100;
;;;696    		if((snmp_bat_flag_puts[1]&0x0100)==0) 
;;;697    			{
;;;698    			snmp_trap_send("BAT #1,speed charge is blocked",5,8,36); 
;;;699    			snmp_bat_flag_puts[1]|=0x0100;
;;;700    			}
;;;701    		}
;;;702    	else 
;;;703    		{
;;;704    		snmp_bat_flag[1]&=~0x0100;
;;;705    		if(snmp_bat_flag_puts[1]&0x0100) 
;;;706    			{
;;;707    			snmp_trap_send("BAT #1,speed charge is unblocked",5,8,37);
;;;708    			snmp_bat_flag_puts[1]&=~0x0100;
;;;709    			} 
;;;710    		}
;;;711    
;;;712    	if(vz1_stat!=vz1sOFF)								//Уравнительный заряд 
;;;713    		{
;;;714    		snmp_bat_flag[1]|=0x0200;
;;;715    		if((snmp_bat_flag_puts[1]&0x0200)==0) 
;;;716    			{
;;;717    			snmp_trap_send("BAT #1,equalising charge is on",5,8,38); 
;;;718    			snmp_bat_flag_puts[1]|=0x0200;
;;;719    			}
;;;720    		}
;;;721    	else 
;;;722    		{
;;;723    		snmp_bat_flag[1]&=~0x0200;
;;;724    		if(snmp_bat_flag_puts[1]&0x0200) 
;;;725    			{
;;;726    			snmp_trap_send("BAT #1,equalising charge is off",5,8,39);
;;;727    			snmp_bat_flag_puts[1]&=~0x0200;
;;;728    			}
;;;729    		}
;;;730    
;;;731    	if(vz1_error)										//Уравнительный заряд заблокирован по вентиляции 
;;;732    		{
;;;733    		snmp_bat_flag[1]|=0x0400;
;;;734    		if((snmp_bat_flag_puts[1]&0x0400)==0) 
;;;735    			{
;;;736    			snmp_trap_send("BAT #1,equalising charge is blocked",5,8,40); 
;;;737    			snmp_bat_flag_puts[1]|=0x0400;
;;;738    			}
;;;739    		}
;;;740    	else 
;;;741    		{
;;;742    		snmp_bat_flag[1]&=~0x0400;
;;;743    		if(snmp_bat_flag_puts[1]&0x0400) 
;;;744    			{
;;;745    			snmp_trap_send("BAT #1,equalising charge is unblocked",5,8,41);
;;;746    			snmp_bat_flag_puts[1]&=~0x0400;
;;;747    			} 
;;;748    		}
;;;749    
;;;750    	if(vz2_stat!=vz2sOFF)								//Формовочный заряд 
;;;751    		{
;;;752    		snmp_bat_flag[1]|=0x0800;
;;;753    		if((snmp_bat_flag_puts[1]&0x0800)==0) 
;;;754    			{
;;;755    			snmp_trap_send("BAT #1,molding charge is on",5,8,42); 
;;;756    			snmp_bat_flag_puts[1]|=0x0800;
;;;757    			}
;;;758    		}
;;;759    	else 
;;;760    		{
;;;761    		snmp_bat_flag[1]&=~0x0800;
;;;762    		if(snmp_bat_flag_puts[1]&0x0800) 
;;;763    			{
;;;764    			snmp_trap_send("BAT #1,molding charge is off",5,8,43);
;;;765    			snmp_bat_flag_puts[1]&=~0x0800;
;;;766    			}
;;;767    		}
;;;768    
;;;769    	if(vz2_error) 										//Формовочный заряд заблокирован по вентиляции
;;;770    		{
;;;771    		snmp_bat_flag[1]|=0x1000;
;;;772    		if((snmp_bat_flag_puts[1]&0x1000)==0) 
;;;773    			{
;;;774    			snmp_trap_send("BAT #1,molding charge is blocked",5,8,44); 
;;;775    			snmp_bat_flag_puts[1]|=0x1000;
;;;776    			}
;;;777    		}
;;;778    	else 
;;;779    		{
;;;780    		snmp_bat_flag[1]&=~0x1000;
;;;781    		if(snmp_bat_flag_puts[1]&0x1000) 
;;;782    			{
;;;783    			snmp_trap_send("BAT #1,molding charge is unblocked",5,8,45);
;;;784    			snmp_bat_flag_puts[1]&=~0x1000;
;;;785    			} 
;;;786    		}
;;;787    	}
;;;788    else 
;;;789    	{
;;;790    	snmp_bat_flag[1]=0; 
;;;791    	snmp_bat_flag_puts[1]=0;
000040  2500              MOVS     r5,#0
;;;792    	}
;;;793    /*
;;;794    if(!snmp_bat_status[1])
;;;795    	{
;;;796    	if((bat[1]._Ub<(USIGN*10))) 
;;;797    		{
;;;798    		snmp_bat_flag[1]|=0x01; 
;;;799    		if((snmp_bat_flag_puts[1]&0x01)==0) 
;;;800    			{
;;;801    			snmp_trap_send("BAT #2 Alarm, battery is low",5,8,0); 
;;;802    			snmp_bat_flag_puts[1]|=0x01;
;;;803    			}
;;;804    		}
;;;805    	else 
;;;806    		{
;;;807    		snmp_bat_flag[1]&=~0x01; 
;;;808    		if(snmp_bat_flag_puts[1]&0x01) 
;;;809    			{
;;;810    			snmp_trap_send("BAT #2 Alarm clear, battery is not low",5,8,1);
;;;811    			snmp_bat_flag_puts[1]&=~0x01;
;;;812    			}
;;;813    		}
;;;814    	if(bat[1]._temper_stat&0x01) 
;;;815    		{
;;;816    		snmp_bat_flag[1]|=0x02;
;;;817    		if((snmp_bat_flag_puts[1]&0x02)==0) 
;;;818    			{
;;;819    			snmp_trap_send("BAT #2 Alarm, high battery temperature",5,8,2); 
;;;820    			snmp_bat_flag_puts[1]|=0x02;
;;;821    			}
;;;822    		}
;;;823    	else 
;;;824    		{
;;;825    		snmp_bat_flag[1]&=~0x02;
;;;826    		if(snmp_bat_flag_puts[1]&0x02) 
;;;827    			{
;;;828    			snmp_trap_send("BAT #2 Alarm clear, battery temperature is normal",5,8,3);
;;;829    			snmp_bat_flag_puts[1]&=~0x02;
;;;830    			}
;;;831    		}
;;;832    	if(bat[1]._temper_stat&0x02) 
;;;833    		{
;;;834    		snmp_bat_flag[1]|=0x04;
;;;835    		if((snmp_bat_flag_puts[1]&0x04)==0) 
;;;836    			{
;;;837    			snmp_trap_send("BAT #2 Alarm, maximum battery temperature",5,8,4); 
;;;838    			snmp_bat_flag_puts[1]|=0x04;
;;;839    			}
;;;840    		}
;;;841    	else 
;;;842    		{
;;;843    		snmp_bat_flag[1]&=~0x04;
;;;844    		if(snmp_bat_flag_puts[1]&0x04) 
;;;845    			{
;;;846    			snmp_trap_send("BAT #2 Alarm clear, battery temperature is normal",5,8,5);
;;;847    			snmp_bat_flag_puts[1]&=~0x04;
;;;848    			}
;;;849    		}
;;;850    		
;;;851    	if(bat[1]._Ib<(-IKB))	snmp_bat_flag[1]|=0x80;
;;;852    	else if(bat[1]._Ib>IKB)snmp_bat_flag[1]&=~0x80;
;;;853    
;;;854    	if((spc_stat==spcKE)&&(spc_bat==1)) 
;;;855    		{
;;;856    		snmp_bat_flag[1]|=0x10;
;;;857    		if((snmp_bat_flag_puts[1]&0x10)==0) 
;;;858    			{
;;;859    			snmp_trap_send("BAT #2, capacity check enabled",5,8,6); 
;;;860    			snmp_bat_flag_puts[1]|=0x10;
;;;861    			}
;;;862    		}
;;;863    	else 
;;;864    		{
;;;865    		snmp_bat_flag[1]&=~0x10;
;;;866    		if(snmp_bat_flag_puts[1]&0x10) 
;;;867    			{
;;;868    			snmp_trap_send("BAT #2, capacity check disabled",5,8,7);
;;;869    			snmp_bat_flag_puts[1]&=~0x10;
;;;870    			}
;;;871    		}
;;;872    		
;;;873    	if(spc_stat==spcVZ) 
;;;874    		{
;;;875    		snmp_bat_flag[1]|=0x20;
;;;876    		if((snmp_bat_flag_puts[1]&0x20)==0) 
;;;877    			{
;;;878    			snmp_trap_send("BAT #2,equalizing charge is on",5,8,8); 
;;;879    			snmp_bat_flag_puts[1]|=0x20;
;;;880    			}
;;;881    		}
;;;882    	else 
;;;883    		{
;;;884    		snmp_bat_flag[1]&=~0x20;
;;;885    		if(snmp_bat_flag_puts[1]&0x20) 
;;;886    			{
;;;887    			snmp_trap_send("BAT #2,equalizing charge is off",5,8,9);
;;;888    			snmp_bat_flag_puts[1]&=~0x20;
;;;889    			}
;;;890    		}
;;;891    
;;;892    	if(vz_error) 
;;;893    		{
;;;894    		snmp_bat_flag[1]|=0x40;
;;;895    		if((snmp_bat_flag_puts[1]&0x40)==0) 
;;;896    			{
;;;897    			snmp_trap_send("BAT #2,equalizing charge blocked",5,8,10); 
;;;898    			snmp_bat_flag_puts[1]|=0x40;
;;;899    			}
;;;900    		}
;;;901    	else 
;;;902    		{
;;;903    		snmp_bat_flag[1]&=~0x40;
;;;904    		if(snmp_bat_flag_puts[1]&0x40) 
;;;905    			{
;;;906    			snmp_trap_send("BAT #2,equalizing charge is not blocked",5,8,11);
;;;907    			snmp_bat_flag_puts[1]&=~0x40;
;;;908    			} 
;;;909    		}
;;;910       }
;;;911    else 
;;;912    	{
;;;913    	snmp_bat_flag[1]=0; 
;;;914    	snmp_bat_flag_puts[1]=0;
;;;915    	} */
;;;916    }
000042  2b01              CMP      r3,#1
000044  d002              BEQ      |L7.76|
000046  2b02              CMP      r3,#2                 ;318
000048  d031              BEQ      |L7.174|
00004a  e071              B        |L7.304|
                  |L7.76|
00004c  803a              STRH     r2,[r7,#0]            ;318
00004e  f8a81000          STRH     r1,[r8,#0]            ;318
000052  2801              CMP      r0,#1                 ;320
000054  d000              BEQ      |L7.88|
000056  7035              STRB     r5,[r6,#0]            ;318
                  |L7.88|
000058  230a              MOVS     r3,#0xa               ;320
00005a  2200              MOVS     r2,#0                 ;320
00005c  21e6              MOVS     r1,#0xe6              ;321
00005e  20e1              MOVS     r0,#0xe1              ;321
000060  f7fffffe          BL       mess_send
000064  f04f0201          MOV      r2,#1                 ;320
000068  f04f0000          MOV      r0,#0                 ;320
00006c  f9b73000          LDRSH    r3,[r7,#0]            ;321
000070  f9b85000          LDRSH    r5,[r8,#0]            ;323
000074  f9ba6000          LDRSH    r6,[r10,#0]           ;323
000078  e00d              B        |L7.150|
                  |L7.122|
00007a  ebc001c0          RSB      r1,r0,r0,LSL #3       ;324
00007e  eb011100          ADD      r1,r1,r0,LSL #4       ;324
000082  eb090181          ADD      r1,r9,r1,LSL #2       ;324
000086  69c9              LDR      r1,[r1,#0x1c]         ;329
000088  4299              CMP      r1,r3                 ;329
00008a  da09              BGE      |L7.160|
00008c  42a9              CMP      r1,r5                 ;330
00008e  dd07              BLE      |L7.160|
000090  f1000001          ADD      r0,r0,#1              ;332
000094  b2c0              UXTB     r0,r0                 ;332
                  |L7.150|
000096  42b0              CMP      r0,r6                 ;332
000098  dbef              BLT      |L7.122|
                  |L7.154|
00009a  2a01              CMP      r2,#1                 ;333
00009c  d003              BEQ      |L7.166|
00009e  e047              B        |L7.304|
                  |L7.160|
0000a0  f04f0200          MOV      r2,#0                 ;333
0000a4  e7f9              B        |L7.154|
                  |L7.166|
0000a6  f04f0002          MOV      r0,#2                 ;337
0000aa  7020              STRB     r0,[r4,#0]            ;339
0000ac  e040              B        |L7.304|
                  |L7.174|
0000ae  803a              STRH     r2,[r7,#0]            ;339
0000b0  f8a81000          STRH     r1,[r8,#0]            ;339
0000b4  2802              CMP      r0,#2                 ;340
0000b6  d000              BEQ      |L7.186|
0000b8  7035              STRB     r5,[r6,#0]            ;342
                  |L7.186|
0000ba  230a              MOVS     r3,#0xa               ;342
0000bc  2200              MOVS     r2,#0                 ;342
0000be  21e6              MOVS     r1,#0xe6              ;342
0000c0  20e1              MOVS     r0,#0xe1              ;342
0000c2  f7fffffe          BL       mess_send
0000c6  f04f0201          MOV      r2,#1                 ;343
0000ca  f04f0000          MOV      r0,#0                 ;343
0000ce  f9b73000          LDRSH    r3,[r7,#0]            ;348
0000d2  f9b87000          LDRSH    r7,[r8,#0]            ;348
0000d6  f9bac000          LDRSH    r12,[r10,#0]          ;349
0000da  e00d              B        |L7.248|
                  |L7.220|
0000dc  ebc001c0          RSB      r1,r0,r0,LSL #3       ;351
0000e0  eb011100          ADD      r1,r1,r0,LSL #4       ;351
0000e4  eb090181          ADD      r1,r9,r1,LSL #2       ;351
0000e8  69c9              LDR      r1,[r1,#0x1c]         ;352
0000ea  4299              CMP      r1,r3                 ;352
0000ec  da09              BGE      |L7.258|
0000ee  42b9              CMP      r1,r7                 ;352
0000f0  dd07              BLE      |L7.258|
0000f2  f1000001          ADD      r0,r0,#1              ;356
0000f6  b2c0              UXTB     r0,r0                 ;356
                  |L7.248|
0000f8  4560              CMP      r0,r12                ;358
0000fa  dbef              BLT      |L7.220|
                  |L7.252|
0000fc  2a01              CMP      r2,#1                 ;358
0000fe  d003              BEQ      |L7.264|
000100  e016              B        |L7.304|
                  |L7.258|
000102  f04f0200          MOV      r2,#0                 ;359
000106  e7f9              B        |L7.252|
                  |L7.264|
000108  20ee              MOVS     r0,#0xee              ;361
00010a  e9cd0500          STRD     r0,r5,[sp,#0]         ;361
00010e  9502              STR      r5,[sp,#8]            ;361
000110  9503              STR      r5,[sp,#0xc]          ;361
000112  7831              LDRB     r1,[r6,#0]            ;362  ; uavt_bps_pntr
000114  4603              MOV      r3,r0                 ;362
000116  2216              MOVS     r2,#0x16              ;362
000118  4608              MOV      r0,r1                 ;362
00011a  f7fffffe          BL       mcp2515_transmit
00011e  7830              LDRB     r0,[r6,#0]            ;367  ; uavt_bps_pntr
000120  1c40              ADDS     r0,r0,#1              ;367
000122  b2c0              UXTB     r0,r0                 ;367
000124  7030              STRB     r0,[r6,#0]            ;368
000126  f9ba1000          LDRSH    r1,[r10,#0]           ;368  ; NUMIST
00012a  4288              CMP      r0,r1                 ;370
00012c  db00              BLT      |L7.304|
00012e  7025              STRB     r5,[r4,#0]            ;370
                  |L7.304|
000130  7820              LDRB     r0,[r4,#0]            ;370  ; uavt_set_stat
000132  f88b0000          STRB     r0,[r11,#0]           ;370
000136  e8bd9fff          POP      {r0-r12,pc}           ;371
;;;917    
                          ENDP

00013a  0000              DCW      0x0000
                  |L7.316|
                          DCD      uavt_set_stat
                  |L7.320|
                          DCD      U_AVT
                  |L7.324|
                          DCD      uavt_set_stat_old
                  |L7.328|
                          DCD      uavt_bps_pntr
                  |L7.332|
                          DCD      u_max_temp
                  |L7.336|
                          DCD      u_min_temp
                  |L7.340|
                          DCD      bps
                  |L7.344|
                          DCD      NUMIST

                          AREA ||area_number.8||, CODE, READONLY, ALIGN=2

                          EXPORTAS ||area_number.8||, ||.text||
                  averageChargeStartStop PROC
;;;305    // заполнение флагов для АКБ
;;;306    void bat_flag (void)
000000  4908              LDR      r1,|L8.36|
;;;307    {  
000002  f44f70b4          MOV      r0,#0x168
;;;308    if(spc_stat!=spcVZ) 
;;;309    	{
;;;310    	vz_error=0;
000006  780a              LDRB     r2,[r1,#0]  ; hv_vz_stat
000008  b132              CBZ      r2,|L8.24|
00000a  f04f0200          MOV      r2,#0                 ;308
00000e  700a              STRB     r2,[r1,#0]            ;308
000010  f04f0100          MOV      r1,#0
;;;311    	sp_ch_error=0;
;;;312    	vz1_error=0;
000014  f7ffbffe          B.W      lc640_write
                  |L8.24|
;;;313    	vz2_error=0;
;;;314    	}
;;;315    
;;;316    if(!snmp_bat_status[0])	 			//Батарея №1
000018  f04f0201          MOV      r2,#1
;;;317    	{
;;;318    	if((bat[0]._Ub<(USIGN*10)))		//Снижение напряжения батареи ниже Uбсигн 
00001c  700a              STRB     r2,[r1,#0]
00001e  4611              MOV      r1,r2
000020  f7ffbffe          B.W      lc640_write
;;;319    		{
;;;320    		snmp_bat_flag[0]|=0x0001; 
;;;321    		if((snmp_bat_flag_puts[0]&0x0001)==0) 
;;;322    			{
;;;323    			snmp_trap_send("BAT #1 Alarm, battery is low",5,8,0); 
;;;324    			snmp_bat_flag_puts[0]|=0x0001;
;;;325    			}
;;;326    		}
;;;327    	else 
;;;328    		{
;;;329    		snmp_bat_flag[0]&=~0x0001; 
;;;330    		if(snmp_bat_flag_puts[0]&0x0001) 
;;;331    			{
;;;332    			snmp_trap_send("BAT #1 Alarm clear, battery is not low",5,8,1);
;;;333    			snmp_bat_flag_puts[0]&=~0x0001;
;;;334    			}
;;;335    		}
;;;336    
;;;337    	if(bat[0]._temper_stat&0x01)	//Повышенная температура батареи, первый порог - предупреждение
;;;338    		{
;;;339    		snmp_bat_flag[0]|=0x0002;
;;;340    		if((snmp_bat_flag_puts[0]&0x0002)==0) 
;;;341    			{
;;;342    			snmp_trap_send("BAT #1 Warning, high battery temperature",5,8,2); 
;;;343    			snmp_bat_flag_puts[0]|=0x0002;
;;;344    			}
;;;345    		}
;;;346    	else 
;;;347    		{
;;;348    		snmp_bat_flag[0]&=~0x0002;
;;;349    		if(snmp_bat_flag_puts[0]&0x0002) 
;;;350    			{
;;;351    			snmp_trap_send("BAT #1 Warning clear, battery temperature is normal",5,8,3);
;;;352    			snmp_bat_flag_puts[0]&=~0x02;
;;;353    			}
;;;354    		}
;;;355    
;;;356    	if(bat[0]._temper_stat&0x02)  	//Повышенная температура батареи, второй порог - авария
;;;357    		{
;;;358    		snmp_bat_flag[0]|=0x0004;
;;;359    		if((snmp_bat_flag_puts[0]&0x0004)==0) 
;;;360    			{
;;;361    			snmp_trap_send("BAT #1 Alarm, high battery temperature",5,8,4); 
;;;362    			snmp_bat_flag_puts[0]|=0x0004;
;;;363    			}
;;;364    		}
;;;365    	else 
;;;366    		{
;;;367    		snmp_bat_flag[0]&=~0x0004;
;;;368    		if(snmp_bat_flag_puts[0]&0x0004) 
;;;369    			{
;;;370    			snmp_trap_send("BAT #1 Alarm clear, battery temperature is normal",5,8,5);
;;;371    			snmp_bat_flag_puts[0]&=~0x0004;
;;;372    			}
;;;373    		}
;;;374    
;;;375    	if(bat[0]._Ib<(-IKB)) snmp_bat_flag[0]|=0x0008;		//Разряд батареи
;;;376    	else if(bat[0]._Ib>IKB) snmp_bat_flag[0]&=~0x0008;	//Заряд батареи
;;;377    
;;;378    	if((spc_stat==spcKE)&&(spc_bat==0))					//Контроль емкости батареи №1 
;;;379    		{
;;;380    		snmp_bat_flag[0]|=0x0010;
;;;381    		if((snmp_bat_flag_puts[0]&0x0010)==0) 
;;;382    			{
;;;383    			snmp_trap_send("BAT #1, capacity test started",5,8,6); 
;;;384    			snmp_bat_flag_puts[0]|=0x0010;
;;;385    			}
;;;386    		}
;;;387    	else 
;;;388    		{
;;;389    		snmp_bat_flag[0]&=~0x0010;
;;;390    		if(snmp_bat_flag_puts[0]&0x0010) 
;;;391    			{
;;;392    			snmp_trap_send("BAT #1, capacity test stopped",5,8,7);
;;;393    			snmp_bat_flag_puts[0]&=~0x0010;
;;;394    			}
;;;395    		}
;;;396    		
;;;397    	if(spc_stat==spcVZ)									//Выравнивающий заряд 
;;;398    		{
;;;399    		snmp_bat_flag[0]|=0x0020;
;;;400    		if((snmp_bat_flag_puts[0]&0x0020)==0) 
;;;401    			{
;;;402    			snmp_trap_send("BAT #1,leveling charge is started",5,8,8); 
;;;403    			snmp_bat_flag_puts[0]|=0x0020;
;;;404    			}
;;;405    		}
;;;406    	else 
;;;407    		{
;;;408    		snmp_bat_flag[0]&=~0x0020;
;;;409    		if(snmp_bat_flag_puts[0]&0x0020) 
;;;410    			{
;;;411    			snmp_trap_send("BAT #1,leveling charge is stopped",5,8,9);
;;;412    			snmp_bat_flag_puts[0]&=~0x0020;
;;;413    			}
;;;414    		}
;;;415    
;;;416    	if(vz_error)										 //Выравнивающий заряд заблокирован по вентиляции
;;;417    		{
;;;418    		snmp_bat_flag[0]|=0x0040;
;;;419    		if((snmp_bat_flag_puts[0]&0x0040)==0) 
;;;420    			{
;;;421    			snmp_trap_send("BAT #1,leveling charge is blocked",5,8,10); 
;;;422    			snmp_bat_flag_puts[0]|=0x0040;
;;;423    			}
;;;424    		}
;;;425    	else 
;;;426    		{
;;;427    		snmp_bat_flag[0]&=~0x0040;
;;;428    		if(snmp_bat_flag_puts[0]&0x0040) 
;;;429    			{
;;;430    			snmp_trap_send("BAT #1,leveling charge is unblocked",5,8,11);
;;;431    			snmp_bat_flag_puts[0]&=~0x0040;
;;;432    			} 
;;;433    		}
;;;434    
;;;435    	if(sp_ch_stat==scsWRK) 								//Ускореннный заряд
;;;436    		{
;;;437    		snmp_bat_flag[0]|=0x0080;
;;;438    		if((snmp_bat_flag_puts[0]&0x0080)==0) 
;;;439    			{
;;;440    			snmp_trap_send("BAT #1,speed charge is started",5,8,10); 
;;;441    			snmp_bat_flag_puts[0]|=0x0080;
;;;442    			}
;;;443    		}
;;;444    	else 
;;;445    		{
;;;446    		snmp_bat_flag[0]&=~0x0080;
;;;447    		if(snmp_bat_flag_puts[0]&0x0080) 
;;;448    			{
;;;449    			snmp_trap_send("BAT #1,speed charge is stopped",5,8,11);
;;;450    			snmp_bat_flag_puts[0]&=~0x0080;
;;;451    			}
;;;452    		}
;;;453    
;;;454    	if(sp_ch_error) 									//Ускореннный заряд заблокирован по вентиляции
;;;455    		{
;;;456    		snmp_bat_flag[0]|=0x0100;
;;;457    		if((snmp_bat_flag_puts[0]&0x0100)==0) 
;;;458    			{
;;;459    			snmp_trap_send("BAT #1,speed charge is blocked",5,8,12); 
;;;460    			snmp_bat_flag_puts[0]|=0x0100;
;;;461    			}
;;;462    		}
;;;463    	else 
;;;464    		{
;;;465    		snmp_bat_flag[0]&=~0x0100;
;;;466    		if(snmp_bat_flag_puts[0]&0x0100) 
;;;467    			{
;;;468    			snmp_trap_send("BAT #1,speed charge is unblocked",5,8,13);
;;;469    			snmp_bat_flag_puts[0]&=~0x0100;
;;;470    			} 
;;;471    		}
;;;472    
;;;473    	if(vz1_stat!=vz1sOFF)								//Уравнительный заряд 
;;;474    		{
;;;475    		snmp_bat_flag[0]|=0x0200;
;;;476    		if((snmp_bat_flag_puts[0]&0x0200)==0) 
;;;477    			{
;;;478    			snmp_trap_send("BAT #1,equalising charge is on",5,8,14); 
;;;479    			snmp_bat_flag_puts[0]|=0x0200;
;;;480    			}
;;;481    		}
;;;482    	else 
;;;483    		{
;;;484    		snmp_bat_flag[0]&=~0x0200;
;;;485    		if(snmp_bat_flag_puts[0]&0x0200) 
;;;486    			{
;;;487    			snmp_trap_send("BAT #1,equalising charge is off",5,8,15);
;;;488    			snmp_bat_flag_puts[0]&=~0x0200;
;;;489    			}
;;;490    		}
;;;491    
;;;492    	if(vz1_error)										//Уравнительный заряд заблокирован по вентиляции 
;;;493    		{
;;;494    		snmp_bat_flag[0]|=0x0400;
;;;495    		if((snmp_bat_flag_puts[0]&0x0400)==0) 
;;;496    			{
;;;497    			snmp_trap_send("BAT #1,equalising charge is blocked",5,8,16); 
;;;498    			snmp_bat_flag_puts[0]|=0x0400;
;;;499    			}
;;;500    		}
;;;501    	else 
;;;502    		{
;;;503    		snmp_bat_flag[0]&=~0x0400;
;;;504    		if(snmp_bat_flag_puts[0]&0x0400) 
;;;505    			{
;;;506    			snmp_trap_send("BAT #1,equalising charge is unblocked",5,8,17);
;;;507    			snmp_bat_flag_puts[0]&=~0x0400;
;;;508    			} 
;;;509    		}
;;;510    
;;;511    	if(vz2_stat!=vz2sOFF)								//Формовочный заряд 
;;;512    		{
;;;513    		snmp_bat_flag[0]|=0x0800;
;;;514    		if((snmp_bat_flag_puts[0]&0x0800)==0) 
;;;515    			{
;;;516    			snmp_trap_send("BAT #1,molding charge is on",5,8,18); 
;;;517    			snmp_bat_flag_puts[0]|=0x0800;
;;;518    			}
;;;519    		}
;;;520    	else 
;;;521    		{
;;;522    		snmp_bat_flag[0]&=~0x0800;
;;;523    		if(snmp_bat_flag_puts[0]&0x0800) 
;;;524    			{
;;;525    			snmp_trap_send("BAT #1,molding charge is off",5,8,19);
;;;526    			snmp_bat_flag_puts[0]&=~0x0800;
;;;527    			}
;;;528    		}
;;;529    
;;;530    	if(vz2_error) 										//Формовочный заряд заблокирован по вентиляции
;;;531    		{
;;;532    		snmp_bat_flag[0]|=0x1000;
;;;533    		if((snmp_bat_flag_puts[0]&0x1000)==0) 
;;;534    			{
;;;535    			snmp_trap_send("BAT #1,molding charge is blocked",5,8,20); 
;;;536    			snmp_bat_flag_puts[0]|=0x1000;
;;;537    			}
;;;538    		}
;;;539    	else 
;;;540    		{
;;;541    		snmp_bat_flag[0]&=~0x1000;
;;;542    		if(snmp_bat_flag_puts[0]&0x1000) 
;;;543    			{
;;;544    			snmp_trap_send("BAT #1,molding charge is unblocked",5,8,21);
;;;545    			snmp_bat_flag_puts[0]&=~0x1000;
;;;546    			} 
;;;547    		}
;;;548    	}
;;;549    else 
;;;550    	{
;;;551    	snmp_bat_flag[0]=0; 
;;;552    	snmp_bat_flag_puts[0]=0;
;;;553    	}
;;;554    
;;;555    if(!snmp_bat_status[1])	 			//Батарея №2
;;;556    	{
;;;557    	if((bat[1]._Ub<(USIGN*10)))		//Снижение напряжения батареи ниже Uбсигн 
;;;558    		{
;;;559    		snmp_bat_flag[1]|=0x0001; 
;;;560    		if((snmp_bat_flag_puts[1]&0x0001)==0) 
;;;561    			{
;;;562    			snmp_trap_send("BAT #1 Alarm, battery is low",5,8,22); 
;;;563    			snmp_bat_flag_puts[1]|=0x0001;
;;;564    			}
;;;565    		}
;;;566    	else 
;;;567    		{
;;;568    		snmp_bat_flag[1]&=~0x0001; 
;;;569    		if(snmp_bat_flag_puts[1]&0x0001) 
;;;570    			{
;;;571    			snmp_trap_send("BAT #1 Alarm clear, battery is not low",5,8,23);
;;;572    			snmp_bat_flag_puts[1]&=~0x0001;
;;;573    			}
;;;574    		}
;;;575    
;;;576    	if(bat[1]._temper_stat&0x01)	//Повышенная температура батареи, первый порог - предупреждение
;;;577    		{
;;;578    		snmp_bat_flag[1]|=0x0002;
;;;579    		if((snmp_bat_flag_puts[0]&0x0002)==0) 
;;;580    			{
;;;581    			snmp_trap_send("BAT #1 Warning, high battery temperature",5,8,24); 
;;;582    			snmp_bat_flag_puts[1]|=0x0002;
;;;583    			}
;;;584    		}
;;;585    	else 
;;;586    		{
;;;587    		snmp_bat_flag[1]&=~0x0002;
;;;588    		if(snmp_bat_flag_puts[1]&0x0002) 
;;;589    			{
;;;590    			snmp_trap_send("BAT #1 Warning clear, battery temperature is normal",5,8,25);
;;;591    			snmp_bat_flag_puts[1]&=~0x02;
;;;592    			}
;;;593    		}
;;;594    
;;;595    	if(bat[1]._temper_stat&0x02)  	//Повышенная температура батареи, второй порог - авария
;;;596    		{
;;;597    		snmp_bat_flag[1]|=0x0004;
;;;598    		if((snmp_bat_flag_puts[1]&0x0004)==0) 
;;;599    			{
;;;600    			snmp_trap_send("BAT #1 Alarm, high battery temperature",5,8,26); 
;;;601    			snmp_bat_flag_puts[1]|=0x0004;
;;;602    			}
;;;603    		}
;;;604    	else 
;;;605    		{
;;;606    		snmp_bat_flag[1]&=~0x0004;
;;;607    		if(snmp_bat_flag_puts[1]&0x0004) 
;;;608    			{
;;;609    			snmp_trap_send("BAT #1 Alarm clear, battery temperature is normal",5,8,27);
;;;610    			snmp_bat_flag_puts[1]&=~0x0004;
;;;611    			}
;;;612    		}
;;;613    
;;;614    	if(bat[1]._Ib<(-IKB)) snmp_bat_flag[1]|=0x0008;		//Разряд батареи
;;;615    	else if(bat[1]._Ib>IKB) snmp_bat_flag[1]&=~0x0008;	//Заряд батареи
;;;616    
;;;617    	if((spc_stat==spcKE)&&(spc_bat==0))					//Контроль емкости батареи №1 
;;;618    		{
;;;619    		snmp_bat_flag[1]|=0x0010;
;;;620    		if((snmp_bat_flag_puts[1]&0x0010)==0) 
;;;621    			{
;;;622    			snmp_trap_send("BAT #1, capacity test started",5,8,28); 
;;;623    			snmp_bat_flag_puts[1]|=0x0010;
;;;624    			}
;;;625    		}
;;;626    	else 
;;;627    		{
;;;628    		snmp_bat_flag[1]&=~0x0010;
;;;629    		if(snmp_bat_flag_puts[1]&0x0010) 
;;;630    			{
;;;631    			snmp_trap_send("BAT #1, capacity test stopped",5,8,29);
;;;632    			snmp_bat_flag_puts[1]&=~0x0010;
;;;633    			}
;;;634    		}
;;;635    		
;;;636    	if(spc_stat==spcVZ)									//Выравнивающий заряд 
;;;637    		{
;;;638    		snmp_bat_flag[1]|=0x0020;
;;;639    		if((snmp_bat_flag_puts[1]&0x0020)==0) 
;;;640    			{
;;;641    			snmp_trap_send("BAT #1,leveling charge is started",5,8,30); 
;;;642    			snmp_bat_flag_puts[1]|=0x0020;
;;;643    			}
;;;644    		}
;;;645    	else 
;;;646    		{
;;;647    		snmp_bat_flag[1]&=~0x0020;
;;;648    		if(snmp_bat_flag_puts[1]&0x0020) 
;;;649    			{
;;;650    			snmp_trap_send("BAT #1,leveling charge is stopped",5,8,31);
;;;651    			snmp_bat_flag_puts[1]&=~0x0020;
;;;652    			}
;;;653    		}
;;;654    
;;;655    	if(vz_error)										 //Выравнивающий заряд заблокирован по вентиляции
;;;656    		{
;;;657    		snmp_bat_flag[1]|=0x0040;
;;;658    		if((snmp_bat_flag_puts[1]&0x0040)==0) 
;;;659    			{
;;;660    			snmp_trap_send("BAT #1,leveling charge is blocked",5,8,32); 
;;;661    			snmp_bat_flag_puts[1]|=0x0040;
;;;662    			}
;;;663    		}
;;;664    	else 
;;;665    		{
;;;666    		snmp_bat_flag[1]&=~0x0040;
;;;667    		if(snmp_bat_flag_puts[1]&0x0040) 
;;;668    			{
;;;669    			snmp_trap_send("BAT #1,leveling charge is unblocked",5,8,33);
;;;670    			snmp_bat_flag_puts[1]&=~0x0040;
;;;671    			} 
;;;672    		}
;;;673    
;;;674    	if(sp_ch_stat==scsWRK) 								//Ускореннный заряд
;;;675    		{
;;;676    		snmp_bat_flag[1]|=0x0080;
;;;677    		if((snmp_bat_flag_puts[1]&0x0080)==0) 
;;;678    			{
;;;679    			snmp_trap_send("BAT #1,speed charge is started",5,8,34); 
;;;680    			snmp_bat_flag_puts[1]|=0x0080;
;;;681    			}
;;;682    		}
;;;683    	else 
;;;684    		{
;;;685    		snmp_bat_flag[1]&=~0x0080;
;;;686    		if(snmp_bat_flag_puts[1]&0x0080) 
;;;687    			{
;;;688    			snmp_trap_send("BAT #1,speed charge is stopped",5,8,35);
;;;689    			snmp_bat_flag_puts[1]&=~0x0080;
;;;690    			}
;;;691    		}
;;;692    
;;;693    	if(sp_ch_error) 									//Ускореннный заряд заблокирован по вентиляции
;;;694    		{
;;;695    		snmp_bat_flag[1]|=0x0100;
;;;696    		if((snmp_bat_flag_puts[1]&0x0100)==0) 
;;;697    			{
;;;698    			snmp_trap_send("BAT #1,speed charge is blocked",5,8,36); 
;;;699    			snmp_bat_flag_puts[1]|=0x0100;
;;;700    			}
;;;701    		}
;;;702    	else 
;;;703    		{
;;;704    		snmp_bat_flag[1]&=~0x0100;
;;;705    		if(snmp_bat_flag_puts[1]&0x0100) 
;;;706    			{
;;;707    			snmp_trap_send("BAT #1,speed charge is unblocked",5,8,37);
;;;708    			snmp_bat_flag_puts[1]&=~0x0100;
;;;709    			} 
;;;710    		}
;;;711    
;;;712    	if(vz1_stat!=vz1sOFF)								//Уравнительный заряд 
;;;713    		{
;;;714    		snmp_bat_flag[1]|=0x0200;
;;;715    		if((snmp_bat_flag_puts[1]&0x0200)==0) 
;;;716    			{
;;;717    			snmp_trap_send("BAT #1,equalising charge is on",5,8,38); 
;;;718    			snmp_bat_flag_puts[1]|=0x0200;
;;;719    			}
;;;720    		}
;;;721    	else 
;;;722    		{
;;;723    		snmp_bat_flag[1]&=~0x0200;
;;;724    		if(snmp_bat_flag_puts[1]&0x0200) 
;;;725    			{
;;;726    			snmp_trap_send("BAT #1,equalising charge is off",5,8,39);
;;;727    			snmp_bat_flag_puts[1]&=~0x0200;
;;;728    			}
;;;729    		}
;;;730    
;;;731    	if(vz1_error)										//Уравнительный заряд заблокирован по вентиляции 
;;;732    		{
;;;733    		snmp_bat_flag[1]|=0x0400;
;;;734    		if((snmp_bat_flag_puts[1]&0x0400)==0) 
;;;735    			{
;;;736    			snmp_trap_send("BAT #1,equalising charge is blocked",5,8,40); 
;;;737    			snmp_bat_flag_puts[1]|=0x0400;
;;;738    			}
;;;739    		}
;;;740    	else 
;;;741    		{
;;;742    		snmp_bat_flag[1]&=~0x0400;
;;;743    		if(snmp_bat_flag_puts[1]&0x0400) 
;;;744    			{
;;;745    			snmp_trap_send("BAT #1,equalising charge is unblocked",5,8,41);
;;;746    			snmp_bat_flag_puts[1]&=~0x0400;
;;;747    			} 
;;;748    		}
;;;749    
;;;750    	if(vz2_stat!=vz2sOFF)								//Формовочный заряд 
;;;751    		{
;;;752    		snmp_bat_flag[1]|=0x0800;
;;;753    		if((snmp_bat_flag_puts[1]&0x0800)==0) 
;;;754    			{
;;;755    			snmp_trap_send("BAT #1,molding charge is on",5,8,42); 
;;;756    			snmp_bat_flag_puts[1]|=0x0800;
;;;757    			}
;;;758    		}
;;;759    	else 
;;;760    		{
;;;761    		snmp_bat_flag[1]&=~0x0800;
;;;762    		if(snmp_bat_flag_puts[1]&0x0800) 
;;;763    			{
;;;764    			snmp_trap_send("BAT #1,molding charge is off",5,8,43);
;;;765    			snmp_bat_flag_puts[1]&=~0x0800;
;;;766    			}
;;;767    		}
;;;768    
;;;769    	if(vz2_error) 										//Формовочный заряд заблокирован по вентиляции
;;;770    		{
;;;771    		snmp_bat_flag[1]|=0x1000;
;;;772    		if((snmp_bat_flag_puts[1]&0x1000)==0) 
;;;773    			{
;;;774    			snmp_trap_send("BAT #1,molding charge is blocked",5,8,44); 
;;;775    			snmp_bat_flag_puts[1]|=0x1000;
;;;776    			}
;;;777    		}
;;;778    	else 
;;;779    		{
;;;780    		snmp_bat_flag[1]&=~0x1000;
;;;781    		if(snmp_bat_flag_puts[1]&0x1000) 
;;;782    			{
;;;783    			snmp_trap_send("BAT #1,molding charge is unblocked",5,8,45);
;;;784    			snmp_bat_flag_puts[1]&=~0x1000;
;;;785    			} 
;;;786    		}
;;;787    	}
;;;788    else 
;;;789    	{
;;;790    	snmp_bat_flag[1]=0; 
;;;791    	snmp_bat_flag_puts[1]=0;
;;;792    	}
;;;793    /*
;;;794    if(!snmp_bat_status[1])
;;;795    	{
;;;796    	if((bat[1]._Ub<(USIGN*10))) 
;;;797    		{
;;;798    		snmp_bat_flag[1]|=0x01; 
;;;799    		if((snmp_bat_flag_puts[1]&0x01)==0) 
;;;800    			{
;;;801    			snmp_trap_send("BAT #2 Alarm, battery is low",5,8,0); 
;;;802    			snmp_bat_flag_puts[1]|=0x01;
;;;803    			}
;;;804    		}
;;;805    	else 
;;;806    		{
;;;807    		snmp_bat_flag[1]&=~0x01; 
;;;808    		if(snmp_bat_flag_puts[1]&0x01) 
;;;809    			{
;;;810    			snmp_trap_send("BAT #2 Alarm clear, battery is not low",5,8,1);
;;;811    			snmp_bat_flag_puts[1]&=~0x01;
;;;812    			}
;;;813    		}
;;;814    	if(bat[1]._temper_stat&0x01) 
;;;815    		{
;;;816    		snmp_bat_flag[1]|=0x02;
;;;817    		if((snmp_bat_flag_puts[1]&0x02)==0) 
;;;818    			{
;;;819    			snmp_trap_send("BAT #2 Alarm, high battery temperature",5,8,2); 
;;;820    			snmp_bat_flag_puts[1]|=0x02;
;;;821    			}
;;;822    		}
;;;823    	else 
;;;824    		{
;;;825    		snmp_bat_flag[1]&=~0x02;
;;;826    		if(snmp_bat_flag_puts[1]&0x02) 
;;;827    			{
;;;828    			snmp_trap_send("BAT #2 Alarm clear, battery temperature is normal",5,8,3);
;;;829    			snmp_bat_flag_puts[1]&=~0x02;
;;;830    			}
;;;831    		}
;;;832    	if(bat[1]._temper_stat&0x02) 
;;;833    		{
;;;834    		snmp_bat_flag[1]|=0x04;
;;;835    		if((snmp_bat_flag_puts[1]&0x04)==0) 
;;;836    			{
;;;837    			snmp_trap_send("BAT #2 Alarm, maximum battery temperature",5,8,4); 
;;;838    			snmp_bat_flag_puts[1]|=0x04;
;;;839    			}
;;;840    		}
;;;841    	else 
;;;842    		{
;;;843    		snmp_bat_flag[1]&=~0x04;
;;;844    		if(snmp_bat_flag_puts[1]&0x04) 
;;;845    			{
;;;846    			snmp_trap_send("BAT #2 Alarm clear, battery temperature is normal",5,8,5);
;;;847    			snmp_bat_flag_puts[1]&=~0x04;
;;;848    			}
;;;849    		}
;;;850    		
;;;851    	if(bat[1]._Ib<(-IKB))	snmp_bat_flag[1]|=0x80;
;;;852    	else if(bat[1]._Ib>IKB)snmp_bat_flag[1]&=~0x80;
;;;853    
;;;854    	if((spc_stat==spcKE)&&(spc_bat==1)) 
;;;855    		{
;;;856    		snmp_bat_flag[1]|=0x10;
;;;857    		if((snmp_bat_flag_puts[1]&0x10)==0) 
;;;858    			{
;;;859    			snmp_trap_send("BAT #2, capacity check enabled",5,8,6); 
;;;860    			snmp_bat_flag_puts[1]|=0x10;
;;;861    			}
;;;862    		}
;;;863    	else 
;;;864    		{
;;;865    		snmp_bat_flag[1]&=~0x10;
;;;866    		if(snmp_bat_flag_puts[1]&0x10) 
;;;867    			{
;;;868    			snmp_trap_send("BAT #2, capacity check disabled",5,8,7);
;;;869    			snmp_bat_flag_puts[1]&=~0x10;
;;;870    			}
;;;871    		}
;;;872    		
;;;873    	if(spc_stat==spcVZ) 
;;;874    		{
;;;875    		snmp_bat_flag[1]|=0x20;
;;;876    		if((snmp_bat_flag_puts[1]&0x20)==0) 
;;;877    			{
;;;878    			snmp_trap_send("BAT #2,equalizing charge is on",5,8,8); 
;;;879    			snmp_bat_flag_puts[1]|=0x20;
;;;880    			}
;;;881    		}
;;;882    	else 
;;;883    		{
;;;884    		snmp_bat_flag[1]&=~0x20;
;;;885    		if(snmp_bat_flag_puts[1]&0x20) 
;;;886    			{
;;;887    			snmp_trap_send("BAT #2,equalizing charge is off",5,8,9);
;;;888    			snmp_bat_flag_puts[1]&=~0x20;
;;;889    			}
;;;890    		}
;;;891    
;;;892    	if(vz_error) 
;;;893    		{
;;;894    		snmp_bat_flag[1]|=0x40;
;;;895    		if((snmp_bat_flag_puts[1]&0x40)==0) 
;;;896    			{
;;;897    			snmp_trap_send("BAT #2,equalizing charge blocked",5,8,10); 
;;;898    			snmp_bat_flag_puts[1]|=0x40;
;;;899    			}
;;;900    		}
;;;901    	else 
;;;902    		{
;;;903    		snmp_bat_flag[1]&=~0x40;
;;;904    		if(snmp_bat_flag_puts[1]&0x40) 
;;;905    			{
;;;906    			snmp_trap_send("BAT #2,equalizing charge is not blocked",5,8,11);
;;;907    			snmp_bat_flag_puts[1]&=~0x40;
;;;908    			} 
;;;909    		}
;;;910       }
;;;911    else 
;;;912    	{
;;;913    	snmp_bat_flag[1]=0; 
;;;914    	snmp_bat_flag_puts[1]=0;
;;;915    	} */
;;;916    }
;;;917    
                          ENDP

                  |L8.36|
                          DCD      hv_vz_stat

                          AREA ||.bss||, DATA, NOINIT, ALIGN=2

                  i_bat_buff
                          %        12
                  adc_buff
                          %        1024
                  adc_buff_
                          %        32
                  main_power_buffer
                          %        32
                  I_from_t_table
                          %        14
                  U_end_from_i_table
                          %        14
                  bat_hndl_plazma
                          %        20

                          AREA ||area_number.11||, DATA, NOINIT, ALIGN=1

                          EXPORTAS ||area_number.11||, ||.bss||
                  adc_buff_max
                          %        24

                          AREA ||area_number.12||, DATA, NOINIT, ALIGN=1

                          EXPORTAS ||area_number.12||, ||.bss||
                  net_buff
                          %        64

                          AREA ||.constdata||, DATA, READONLY, ALIGN=0

                  sk_buff_KONTUR
000000  0d0b0f0e          DCB      0x0d,0x0b,0x0f,0x0e

                          AREA ||area_number.15||, DATA, READONLY, ALIGN=0

                          EXPORTAS ||area_number.15||, ||.constdata||
                  sk_buff_RSTKM
000000  0d0b0f0e          DCB      0x0d,0x0b,0x0f,0x0e

                          AREA ||area_number.16||, DATA, READONLY, ALIGN=0

                          EXPORTAS ||area_number.16||, ||.constdata||
                  sk_buff_GLONASS
000000  0b0d0f0e          DCB      0x0b,0x0d,0x0f,0x0e

                          AREA ||area_number.17||, DATA, READONLY, ALIGN=0

                          EXPORTAS ||area_number.17||, ||.constdata||
                  sk_buff_3U
000000  0b0d0f0e          DCB      0x0b,0x0d,0x0f,0x0e

                          AREA ||area_number.18||, DATA, READONLY, ALIGN=0

                          EXPORTAS ||area_number.18||, ||.constdata||
                  sk_buff_6U
000000  0b0d0f0e          DCB      0x0b,0x0d,0x0f,0x0e

                          AREA ||area_number.19||, DATA, READONLY, ALIGN=2

                          EXPORTAS ||area_number.19||, ||.constdata||
                  sk_buff_220
000000  0b0d0f0e          DCB      0x0b,0x0d,0x0f,0x0e
                          DCD      0x00000258
                          DCD      0x00000708
                          DCD      0x00000e10
                          DCD      0x00002a30
                          DCD      0x00004650
                          DCD      0x00008ca0
                          DCD      0x00011940
                          DCD      0x00000258
                          DCD      0x00000708
                          DCD      0x00000e10
                          DCD      0x00002a30
                          DCD      0x00004650
                          DCD      0x00008ca0
                          DCD      0x00011940

                          AREA ||area_number.20||, DATA, READONLY, ALIGN=0

                          EXPORTAS ||area_number.20||, ||.constdata||
                  sk_buff_TELECORE2015
000000  0b0d0f0e          DCB      0x0b,0x0d,0x0f,0x0e

                          AREA ||.data||, DATA, ALIGN=1

                  adc_buff_min
000000  13881388          DCW      0x1388,0x1388
000004  13881388          DCW      0x1388,0x1388
000008  13881388          DCW      0x1388,0x1388
00000c  13881388          DCW      0x1388,0x1388
000010  13881388          DCW      0x1388,0x1388
                          DCDU     0x00000000

                          AREA ||area_number.22||, DATA, ALIGN=1

                          EXPORTAS ||area_number.22||, ||.data||
                  unet_buff_min
000000  1388              DCW      0x1388

                          AREA ||area_number.23||, DATA, ALIGN=0

                          EXPORTAS ||area_number.23||, ||.data||
                  adc_stat
000000  01                DCB      0x01

                          AREA ||area_number.24||, DATA, ALIGN=1

                          EXPORTAS ||area_number.24||, ||.data||
                  bat_ver_cnt
000000  0096              DCW      0x0096

                          AREA ||area_number.25||, DATA, ALIGN=2

                          EXPORTAS ||area_number.25||, ||.data||
                  vent_stat
000000  00                DCB      0x00
                  vz_error
000001  00                DCB      0x00
                  sp_ch_error
000002  00                DCB      0x00
                  vz1_error
000003  00                DCB      0x00
                  vz2_error
000004  00                DCB      0x00
                  vz1_stat
000005  00                DCB      0x00
                  vz1_stat_old
000006  00                DCB      0x00
                  vz2_stat
000007  00                DCB      0x00
                  vz2_stat_old
000008  00                DCB      0x00
                  bat_hndl_zvu_init
000009  00                DCB      0x00
                  bat_hndl_zvu_ke_init
00000a  00                DCB      0x00
                  bat_hndl_i_vector
00000b  00                DCB      0x00
                  bat_hndl_i_vector_old
00000c  00                DCB      0x00
                  ke_drv_cnt_10s
00000d  00                DCB      0x00
                  i_bat_buff_cnt
00000e  00                DCB      0x00
                  cntrlStatIsDownCnt
00000f  00                DCB      0x00
                  adc_self_ch_cnt
000010  00                DCB      0x00
                  adc_ch_net
000011  00                DCB      0x00
                  adc_ch
000012  00                DCB      0x00
                  adc_ch_cnt
000013  00                DCB      0x00
                  adc_window_flag
000014  00                DCB      0x00
                  ch_cnt0
000015  00                DCB      0x00
                  b1Hz_ch
000016  00                DCB      0x00
                  i
000017  00                DCB      0x00
                  iiii
000018  00                DCB      0x00
                  bAVG
000019  00                DCB      0x00
                  avg_num
00001a  00                DCB      0x00
                  avg_vektor
00001b  00                DCB      0x00
                  kb_full_ver
00001c  00                DCB      0x00
                  kb_start_ips
00001d  00                DCB      0x00
                  num_of_wrks_bps
00001e  00                DCB      0x00
                  num_necc_up
00001f  00                DCB      0x00
                  num_necc_down
000020  00                DCB      0x00
                  sh_cnt0
000021  00                DCB      0x00
                  b1Hz_sh
000022  00                DCB      0x00
                  spc_stat
000023  00                DCB      0x00
                  spc_bat
000024  00                DCB      0x00
                  spc_phase
000025  00                DCB      0x00
                  bAVZ
000026  00                DCB      0x00
                  ke_start_stat
000027  00                DCB      0x00
                  numOfForvardBps
000028  00                DCB      0x00
                  numOfForvardBps_old
000029  00                DCB      0x00
                  numOfForvardBps_minCnt
00002a  00                DCB      0x00
                  bPARALLEL_NOT_ENOUG
00002b  00                DCB      0x00
                  bPARALLEL_ENOUG
00002c  00                DCB      0x00
                  bPARALLEL
00002d  00                DCB      0x00
                  cntrl_hndl_plazma
00002e  00                DCB      0x00
                  volt_region
00002f  00                DCB      0x00
                  bat_hndl_zvu_Q_cnt
000030  0000              DCB      0x00,0x00
                  cntrl_stat
000032  0258              DCW      0x0258
                  cntrl_stat_old
000034  0258              DCW      0x0258
                  avg_main_cnt
000036  0014              DCW      0x0014
                  num_necc_block_cnt
000038  0000              DCB      0x00,0x00
                  net_buff_
00003a  0000              DCB      0x00,0x00
                  adc_result
00003c  0000              DCB      0x00,0x00
                  adc_gorb_cnt
00003e  0000              DCB      0x00,0x00
                  adc_zero_cnt
000040  0000              DCB      0x00,0x00
                  adc_window_cnt
000042  0000              DCB      0x00,0x00
                  adc_net_buff_cnt
000044  0000              DCB      0x00,0x00
                  plazma_sk
000046  0000              DCB      0x00,0x00
                  cntrl_stat_new
000048  0000              DCB      0x00,0x00
                  Ibmax
00004a  0000              DCB      0x00,0x00
                  IZMAX_
00004c  0000              DCB      0x00,0x00
                  Ubpsmax
00004e  0000              DCB      0x00,0x00
                  samokalibr_cnt
000050  0000              DCB      0x00,0x00
                  main_kb_cnt
000052  0000              DCB      0x00,0x00
                  kb_cnt_1lev
000054  0000              DCB      0x00,0x00
                  kb_cnt_2lev
000056  0000              DCB      0x00,0x00
                  kb_start
000058  0000              DCB      0x00,0x00
                  ibat_ips
00005a  0000              DCB      0x00,0x00
                  ibat_ips_
00005c  0000              DCB      0x00,0x00
                  bps_on_mask
00005e  0000              DCB      0x00,0x00
                  bps_off_mask
000060  0000              DCB      0x00,0x00
                  vz_cnt_s
000062  0000              DCB      0x00,0x00
                  vz_cnt_s_
000064  0000              DCB      0x00,0x00
                  vz_cnt_h
000066  0000              DCB      0x00,0x00
                  vz_cnt_h_
000068  0000              DCB      0x00,0x00
                  cnt_end_ke
00006a  0000              DCB      0x00,0x00
                  __ee_vz_cnt
00006c  0000              DCB      0x00,0x00
                  __ee_spc_stat
00006e  0000              DCB      0x00,0x00
                  __ee_spc_bat
000070  0000              DCB      0x00,0x00
                  __ee_spc_phase
000072  0000              DCB      0x00,0x00
                  cntrl_stat_blok_cnt
000074  0000              DCB      0x00,0x00
                  cntrl_stat_blok_cnt_
000076  0000              DCB      0x00,0x00
                  numOfForvardBps_hourCnt
000078  0000              DCB      0x00,0x00
                  vz1_stat_cnt
00007a  0000              DCB      0x00,0x00
                  volt_region_cnt
00007c  0000              DCB      0x00,0x00
                  vz2_stat_cnt
00007e  0000              DCB      0x00,0x00
                  vz2_stat_ph2_cnt
000080  0000              DCB      0x00,0x00
                  plazma_ica1
000082  0000              DCB      0x00,0x00
                  bat_hndl_i
000084  0000              DCB      0x00,0x00
                  bat_hndl_t_razr_hour
000086  0000              DCB      0x00,0x00
                  bat_hndl_t_razr_min
000088  0000              DCB      0x00,0x00
                  bat_hndl_t_razr_mininhour
00008a  0000              DCB      0x00,0x00
                  bat_hndl_i_temp
00008c  0000              DCB      0x00,0x00
                  bat_hndl_u_end
00008e  0000              DCB      0x00,0x00
                  bat_hndl_i_zar_price
                          DCD      0x00000000
                  ibat
                          DCD      0x00000000
                  ibat_
                          DCD      0x00000000
                  i_avg_max
                          DCD      0x00000000
                  i_avg_min
                          DCD      0x00000000
                  i_avg_summ
                          DCD      0x00000000
                  i_avg
                          DCD      0x00000000
                  avg
                          DCD      0x00000000
                  cntrl_stat_blok_cnt_plus
                          DCD      0x00000000
                  cntrl_stat_blok_cnt_minus
                          DCD      0x00000000
                  plazma_inv
                          DCD      0x00000000
                  vz1_wrk_cnt
                          DCD      0x00000000
                  vz1_up_cnt
                          DCD      0x00000000
                  vz2_wrk_cnt
                          DCD      0x00000000
                  vz2_up_cnt
                          DCD      0x00000000
                  bat_hndl_t_razr
                          DCD      0x00000000
                  bat_hndl_t_razr_ke
                          DCD      0x00000000
                  bat_hndl_zvu_Q
                          DCD      0x00000000
                  bat_hndl_proc_razr
                          DCD      0x00000000
                  bat_hndl_remain_time
                          DCD      0x00000000
                  amper_chas_cnt_drv_summ
                          DCD      0x00000000
                  bat_hndl_i_summ
                          DCD      0x00000000
                  net_metr_buff_
                          DCD      0x00000000
0000ec  0000              DCB      0x00,0x00
                  adc_self_ch_buff
0000ee  0000              DCB      0x00,0x00
                          DCD      0x00000000
                  adc_self_ch_disp
                          DCD      0x00000000
0000f8  00000000          DCB      0x00,0x00,0x00,0x00
                  ke_date
                          %        8

                          AREA ||area_number.26||, DATA, ALIGN=0

                          EXPORTAS ||area_number.26||, ||.data||
                  rx_read_power_cnt_phase
000000  0f                DCB      0x0f

                          AREA ||area_number.27||, DATA, ALIGN=1

                          EXPORTAS ||area_number.27||, ||.data||
                  read_power_cnt_main_cnt
000000  0064              DCW      0x0064

                          AREA ||area_number.28||, DATA, ALIGN=0

                          EXPORTAS ||area_number.28||, ||.data||
                  rx_read_power_cnt_plazma
000000  00                DCB      0x00

                          AREA ||area_number.29||, DATA, ALIGN=0

                          EXPORTAS ||area_number.29||, ||.data||
                  rx_read_power_cnt_flag
000000  00                DCB      0x00

                          AREA ||area_number.30||, DATA, ALIGN=0

                          EXPORTAS ||area_number.30||, ||.data||
                  bENERGOMETR_UIP
000000  00                DCB      0x00

                          AREA ||area_number.31||, DATA, ALIGN=1

                          EXPORTAS ||area_number.31||, ||.data||
                  unet_buff_max
000000  0000              DCB      0x00,0x00

                          AREA ||area_number.32||, DATA, ALIGN=0

                          EXPORTAS ||area_number.32||, ||.data||
                  adc_cnt
000000  00                DCB      0x00

                          AREA ||area_number.33||, DATA, ALIGN=0

                          EXPORTAS ||area_number.33||, ||.data||
                  adc_cnt1
000000  00                DCB      0x00

                          AREA ||area_number.34||, DATA, ALIGN=1

                          EXPORTAS ||area_number.34||, ||.data||
                  zero_cnt
000000  0000              DCB      0x00,0x00

                          AREA ||area_number.35||, DATA, ALIGN=0

                          EXPORTAS ||area_number.35||, ||.data||
                  net_buff_cnt
000000  00                DCB      0x00

                          AREA ||area_number.36||, DATA, ALIGN=1

                          EXPORTAS ||area_number.36||, ||.data||
                  ADWR
000000  0000              DCB      0x00,0x00

                          AREA ||area_number.37||, DATA, ALIGN=1

                          EXPORTAS ||area_number.37||, ||.data||
                  period_cnt
000000  0000              DCB      0x00,0x00

                          AREA ||area_number.38||, DATA, ALIGN=1

                          EXPORTAS ||area_number.38||, ||.data||
                  non_zero_cnt
000000  0000              DCB      0x00,0x00

                          AREA ||area_number.39||, DATA, ALIGN=0

                          EXPORTAS ||area_number.39||, ||.data||
                  rele_stat
000000  00                DCB      0x00

                          AREA ||area_number.40||, DATA, ALIGN=0

                          EXPORTAS ||area_number.40||, ||.data||
                  bRELE_OUT
000000  00                DCB      0x00

                          AREA ||area_number.41||, DATA, ALIGN=2

                          EXPORTAS ||area_number.41||, ||.data||
                  main_power_buffer_
                          DCD      0x00000000

                          AREA ||area_number.42||, DATA, ALIGN=1

                          EXPORTAS ||area_number.42||, ||.data||
                  main_power_buffer_cnt
000000  0000              DCB      0x00,0x00

                          AREA ||area_number.43||, DATA, ALIGN=1

                          EXPORTAS ||area_number.43||, ||.data||
                  adc_buff_out_
                          DCDU     0x00000000
000004  0000              DCB      0x00,0x00

                          AREA ||area_number.44||, DATA, ALIGN=1

                          EXPORTAS ||area_number.44||, ||.data||
                  plazma_adc_cnt
000000  0000              DCB      0x00,0x00

                          AREA ||area_number.45||, DATA, ALIGN=0

                          EXPORTAS ||area_number.45||, ||.data||
                  unh_cnt0
000000  00                DCB      0x00

                          AREA ||area_number.46||, DATA, ALIGN=0

                          EXPORTAS ||area_number.46||, ||.data||
                  unh_cnt1
000000  00                DCB      0x00

                          AREA ||area_number.47||, DATA, ALIGN=0

                          EXPORTAS ||area_number.47||, ||.data||
                  b1Hz_unh
000000  00                DCB      0x00

                          AREA ||area_number.48||, DATA, ALIGN=0

                          EXPORTAS ||area_number.48||, ||.data||
                  ch_cnt1
000000  00                DCB      0x00

                          AREA ||area_number.49||, DATA, ALIGN=0

                          EXPORTAS ||area_number.49||, ||.data||
                  b1_30Hz_ch
000000  00                DCB      0x00

                          AREA ||area_number.50||, DATA, ALIGN=0

                          EXPORTAS ||area_number.50||, ||.data||
                  ch_cnt2
000000  00                DCB      0x00

                          AREA ||area_number.51||, DATA, ALIGN=0

                          EXPORTAS ||area_number.51||, ||.data||
                  b1_10Hz_ch
000000  00                DCB      0x00

                          AREA ||area_number.52||, DATA, ALIGN=1

                          EXPORTAS ||area_number.52||, ||.data||
                  IZMAX_70
000000  0000              DCB      0x00,0x00

                          AREA ||area_number.53||, DATA, ALIGN=1

                          EXPORTAS ||area_number.53||, ||.data||
                  IZMAX_130
000000  0000              DCB      0x00,0x00

                          AREA ||area_number.54||, DATA, ALIGN=1

                          EXPORTAS ||area_number.54||, ||.data||
                  cntrl_stat_blck_cnt
000000  0000              DCB      0x00,0x00

                          AREA ||area_number.55||, DATA, ALIGN=0

                          EXPORTAS ||area_number.55||, ||.data||
                  avg_cnt
000000  00                DCB      0x00

                          AREA ||area_number.56||, DATA, ALIGN=0

                          EXPORTAS ||area_number.56||, ||.data||
                  bps_all_off_cnt
000000  00                DCB      0x00

                          AREA ||area_number.57||, DATA, ALIGN=0

                          EXPORTAS ||area_number.57||, ||.data||
                  bps_mask_off_cnt
000000  00                DCB      0x00

                          AREA ||area_number.58||, DATA, ALIGN=0

                          EXPORTAS ||area_number.58||, ||.data||
                  bps_mask_on_off_cnt
000000  00                DCB      0x00

                          AREA ||area_number.59||, DATA, ALIGN=0

                          EXPORTAS ||area_number.59||, ||.data||
                  bps_hndl_2sec_cnt
000000  00                DCB      0x00

                          AREA ||area_number.60||, DATA, ALIGN=0

                          EXPORTAS ||area_number.60||, ||.data||
                  plazma_bat
000000  00                DCB      0x00

                          AREA ||area_number.61||, DATA, ALIGN=0

                          EXPORTAS ||area_number.61||, ||.data||
                  plazma_cntrl_stat
000000  00                DCB      0x00

                          AREA ||area_number.62||, DATA, ALIGN=1

                          EXPORTAS ||area_number.62||, ||.data||
                  ce102m_delayCnt
000000  0000              DCB      0x00,0x00

                          AREA ||area_number.63||, DATA, ALIGN=1

                          EXPORTAS ||area_number.63||, ||.data||
                  volta_short
000000  0000              DCB      0x00,0x00

                          AREA ||area_number.64||, DATA, ALIGN=1

                          EXPORTAS ||area_number.64||, ||.data||
                  curr_short
000000  0000              DCB      0x00,0x00

                          AREA ||area_number.65||, DATA, ALIGN=2

                          EXPORTAS ||area_number.65||, ||.data||
                  power_int
                          DCD      0x00000000

                          AREA ||area_number.66||, DATA, ALIGN=1

                          EXPORTAS ||area_number.66||, ||.data||
                  plazma_ica2
000000  0000              DCB      0x00,0x00

                          AREA ||area_number.67||, DATA, ALIGN=0

                          EXPORTAS ||area_number.67||, ||.data||
                  rele_hndl_plazma
000000  000000            DCB      0x00,0x00,0x00

                          AREA ||area_number.68||, DATA, ALIGN=1

                          EXPORTAS ||area_number.68||, ||.data||
                  spirit_wrk_cnt
000000  0000              DCB      0x00,0x00
