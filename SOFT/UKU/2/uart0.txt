; generated by ARM C/C++ Compiler, 4.1 [Build 644]
; commandline ArmCC [--list --debug -c --asm --interleave -o.\EXE\uart0.o --asm_dir=.\ --list_dir=.\ --depend=.\EXE\uart0.d --cpu=Cortex-M3 --apcs=interwork -O1 -IC:\Keil\ARM\CMSIS\Include -IC:\Keil\ARM\INC\NXP\LPC17xx -D__MICROLIB -DUKU_220_IPS_TERMOKOMPENSAT -DUKU2071x -DUKU_ZVU --omf_browse=.\EXE\uart0.crf uart0.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  crc_87 PROC
;;;77     //-----------------------------------------------
;;;78     char crc_87(char* ptr,char num)
000000  b530              PUSH     {r4,r5,lr}
;;;79     {
;;;80     char r,j;
;;;81     r=*ptr;
000002  7803              LDRB     r3,[r0,#0]
;;;82     
;;;83     for(j=1;j<num;j++)
000004  f04f0201          MOV      r2,#1
;;;84     	{
;;;85          ptr++;
;;;86     	r=((*ptr)^Table87[r]);
000008  4cff              LDR      r4,|L1.1032|
00000a  e008              B        |L1.30|
                  |L1.12|
00000c  f1000001          ADD      r0,r0,#1              ;85
000010  5ce3              LDRB     r3,[r4,r3]
000012  7805              LDRB     r5,[r0,#0]
000014  ea850303          EOR      r3,r5,r3
000018  f1020201          ADD      r2,r2,#1              ;83
00001c  b2d2              UXTB     r2,r2                 ;83
                  |L1.30|
00001e  428a              CMP      r2,r1                 ;83
000020  d3f4              BCC      |L1.12|
;;;87     	}
;;;88     
;;;89     return r;	
000022  4618              MOV      r0,r3
;;;90     } 
000024  bd30              POP      {r4,r5,pc}
;;;91     
                          ENDP

                  crc_95 PROC
;;;92     //-----------------------------------------------
;;;93     char crc_95(char* ptr,char num)
000026  b530              PUSH     {r4,r5,lr}
;;;94     {
;;;95     char r,j;
;;;96     r=*ptr;
000028  7803              LDRB     r3,[r0,#0]
;;;97     
;;;98     for(j=1;j<num;j++)
00002a  f04f0201          MOV      r2,#1
;;;99     	{
;;;100         ptr++;
;;;101    	r=((*ptr)^Table95[r]);
00002e  4cf7              LDR      r4,|L1.1036|
000030  e008              B        |L1.68|
                  |L1.50|
000032  f1000001          ADD      r0,r0,#1              ;100
000036  5ce3              LDRB     r3,[r4,r3]
000038  7805              LDRB     r5,[r0,#0]
00003a  ea850303          EOR      r3,r5,r3
00003e  f1020201          ADD      r2,r2,#1              ;98
000042  b2d2              UXTB     r2,r2                 ;98
                  |L1.68|
000044  428a              CMP      r2,r1                 ;98
000046  d3f4              BCC      |L1.50|
;;;102    	}
;;;103    
;;;104    return r;	
000048  4618              MOV      r0,r3
;;;105    }
00004a  bd30              POP      {r4,r5,pc}
;;;106    
                          ENDP

                  putchar0 PROC
;;;110    //-----------------------------------------------
;;;111    void putchar0(char c)
00004c  b530              PUSH     {r4,r5,lr}
;;;112    {
;;;113    while (tx_counter0 == TX_BUFFER_SIZE0);
00004e  4bf0              LDR      r3,|L1.1040|
000050  f44f6480          MOV      r4,#0x400
000054  89d9              LDRH     r1,[r3,#0xe]
                  |L1.86|
000056  42a1              CMP      r1,r4
000058  d0fd              BEQ      |L1.86|
;;;114    if (tx_counter0 || ((LPC_UART0->LSR & 0x60)==0))
00005a  b931              CBNZ     r1,|L1.106|
00005c  4aed              LDR      r2,|L1.1044|
00005e  7d15              LDRB     r5,[r2,#0x14]
000060  f0150f60          TST      r5,#0x60
000064  d001              BEQ      |L1.106|
;;;115       {
;;;116       tx_buffer0[tx_wr_index0]=c;
;;;117       if (++tx_wr_index0 == TX_BUFFER_SIZE0) tx_wr_index0=0;
;;;118       ++tx_counter0;
;;;119       }
;;;120    else LPC_UART0->THR=c;
000066  7010              STRB     r0,[r2,#0]
;;;121    }
000068  bd30              POP      {r4,r5,pc}
                  |L1.106|
00006a  4deb              LDR      r5,|L1.1048|
00006c  895a              LDRH     r2,[r3,#0xa]          ;116  ; tx_wr_index0
00006e  54a8              STRB     r0,[r5,r2]            ;116
000070  1c52              ADDS     r2,r2,#1              ;117
000072  b290              UXTH     r0,r2                 ;117
000074  8158              STRH     r0,[r3,#0xa]          ;117
000076  42a0              CMP      r0,r4                 ;117
000078  d102              BNE      |L1.128|
00007a  f04f0000          MOV      r0,#0                 ;117
00007e  8158              STRH     r0,[r3,#0xa]          ;117
                  |L1.128|
000080  f1010101          ADD      r1,r1,#1              ;118
000084  81d9              STRH     r1,[r3,#0xe]          ;118
000086  bd30              POP      {r4,r5,pc}
;;;122    
                          ENDP

                  uart_out0 PROC
;;;123    //-----------------------------------------------
;;;124    void uart_out0 (char num,char data0,char data1,char data2,char data3,char data4,char data5)
000088  b5ff              PUSH     {r0-r7,lr}
;;;125    {
00008a  ad09              ADD      r5,sp,#0x24
00008c  cde0              LDM      r5,{r5-r7}
;;;126    char i,t=0;
00008e  f04f0400          MOV      r4,#0
;;;127    //char *ptr=&data1;
;;;128    unsigned char UOB0[16]; 
;;;129    UOB0[0]=data0;
000092  f88d1000          STRB     r1,[sp,#0]
;;;130    UOB0[1]=data1;
000096  f88d2001          STRB     r2,[sp,#1]
;;;131    UOB0[2]=data2;
00009a  f88d3002          STRB     r3,[sp,#2]
;;;132    UOB0[3]=data3;
00009e  f88d5003          STRB     r5,[sp,#3]
;;;133    UOB0[4]=data4;
0000a2  f88d6004          STRB     r6,[sp,#4]
;;;134    UOB0[5]=data5;
0000a6  f88d7005          STRB     r7,[sp,#5]
;;;135    
;;;136    for (i=0;i<num;i++)
0000aa  4621              MOV      r1,r4
0000ac  466d              MOV      r5,sp                 ;128
0000ae  e005              B        |L1.188|
                  |L1.176|
;;;137    	{
;;;138    	t^=UOB0[i];
0000b0  5c6a              LDRB     r2,[r5,r1]
0000b2  ea820404          EOR      r4,r2,r4
0000b6  f1010101          ADD      r1,r1,#1              ;136
0000ba  b2c9              UXTB     r1,r1                 ;136
                  |L1.188|
0000bc  4281              CMP      r1,r0                 ;136
0000be  d3f7              BCC      |L1.176|
;;;139    	}    
;;;140    UOB0[num]=num;
0000c0  5428              STRB     r0,[r5,r0]
;;;141    t^=UOB0[num];
0000c2  ea800204          EOR      r2,r0,r4
;;;142    UOB0[num+1]=t;
0000c6  eb050100          ADD      r1,r5,r0
0000ca  704a              STRB     r2,[r1,#1]
;;;143    UOB0[num+2]=END;
0000cc  f04f020a          MOV      r2,#0xa
0000d0  708a              STRB     r2,[r1,#2]
;;;144    
;;;145    for (i=0;i<num+3;i++)
0000d2  f04f0400          MOV      r4,#0
0000d6  f1000603          ADD      r6,r0,#3
0000da  e005              B        |L1.232|
                  |L1.220|
;;;146    	{
;;;147    	putchar0(UOB0[i]);
0000dc  5d28              LDRB     r0,[r5,r4]
0000de  f7fffffe          BL       putchar0
0000e2  f1040401          ADD      r4,r4,#1              ;145
0000e6  b2e4              UXTB     r4,r4                 ;145
                  |L1.232|
0000e8  42b4              CMP      r4,r6                 ;145
0000ea  d3f7              BCC      |L1.220|
;;;148    	}   	
;;;149    }
0000ec  bdff              POP      {r0-r7,pc}
;;;150    
                          ENDP

                  uart_out_buff0 PROC
;;;151    //-----------------------------------------------
;;;152    void uart_out_buff0 (char *ptr, char len)
0000ee  b570              PUSH     {r4-r6,lr}
;;;153    {
0000f0  b08f              SUB      sp,sp,#0x3c
0000f2  460d              MOV      r5,r1
;;;154    char UOB[60]/*={0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}*/;
;;;155    char i,t=0;
;;;156    
;;;157    //rs232_data_out_buff[4]=210;
;;;158    
;;;159    for(i=0;i<len;i++)
0000f4  f04f0200          MOV      r2,#0
0000f8  466e              MOV      r6,sp                 ;154
0000fa  e004              B        |L1.262|
                  |L1.252|
;;;160    	{
;;;161    	UOB[i]=ptr[i];
0000fc  5c81              LDRB     r1,[r0,r2]
0000fe  54b1              STRB     r1,[r6,r2]
000100  f1020201          ADD      r2,r2,#1              ;159
000104  b2d2              UXTB     r2,r2                 ;159
                  |L1.262|
000106  42aa              CMP      r2,r5                 ;159
000108  d3f8              BCC      |L1.252|
;;;162    	t^=UOB[i];
;;;163    	}
;;;164    
;;;165    for (i=0;i<len;i++)
00010a  f04f0400          MOV      r4,#0
00010e  e005              B        |L1.284|
                  |L1.272|
;;;166    	{
;;;167    	putchar0(UOB[i]);
000110  5d30              LDRB     r0,[r6,r4]
000112  f7fffffe          BL       putchar0
000116  f1040401          ADD      r4,r4,#1              ;165
00011a  b2e4              UXTB     r4,r4                 ;165
                  |L1.284|
00011c  42ac              CMP      r4,r5                 ;165
00011e  d3f7              BCC      |L1.272|
                  |L1.288|
;;;168    	}   
;;;169    }
000120  b00f              ADD      sp,sp,#0x3c
000122  bd70              POP      {r4-r6,pc}
;;;170    
                          ENDP

                  uart_out_adr0 PROC
;;;171    //-----------------------------------------------
;;;172    void uart_out_adr0 (char *ptr, char len)
000124  b570              PUSH     {r4-r6,lr}
;;;173    {
000126  b08f              SUB      sp,sp,#0x3c
;;;174    char UOB[60]/*={0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}*/;
;;;175    char i,t=0;
000128  f04f0300          MOV      r3,#0
;;;176    
;;;177    //rs232_data_out_buff[4]=210;
;;;178    
;;;179    for(i=0;i<len;i++)
00012c  461a              MOV      r2,r3
00012e  466d              MOV      r5,sp                 ;174
000130  e006              B        |L1.320|
                  |L1.306|
;;;180    	{
;;;181    	UOB[i]=ptr[i];
000132  5c84              LDRB     r4,[r0,r2]
000134  54ac              STRB     r4,[r5,r2]
;;;182    	t^=UOB[i];
000136  ea840303          EOR      r3,r4,r3
00013a  f1020201          ADD      r2,r2,#1              ;179
00013e  b2d2              UXTB     r2,r2                 ;179
                  |L1.320|
000140  428a              CMP      r2,r1                 ;179
000142  d3f6              BCC      |L1.306|
;;;183    	}
;;;184    //if(!t)t=0xff;
;;;185    //UOB[8]=5;
;;;186    //UOB[9]=6;
;;;187    UOB[10]=200;
000144  f04f00c8          MOV      r0,#0xc8
000148  f88d000a          STRB     r0,[sp,#0xa]
;;;188    //UOB[11]=8;
;;;189    UOB[len]=len;
00014c  5469              STRB     r1,[r5,r1]
;;;190    t^=len;	
00014e  ea830301          EOR      r3,r3,r1
;;;191    UOB[len+1]=t;	
000152  eb050001          ADD      r0,r5,r1
000156  7043              STRB     r3,[r0,#1]
;;;192    UOB[len+2]=END;
000158  f04f020a          MOV      r2,#0xa
00015c  7082              STRB     r2,[r0,#2]
;;;193    //UOB[0]=i+1;
;;;194    //UOB[i]=t^UOB[0];
;;;195    //UOB[i+1]=END;
;;;196    	
;;;197    //puts(UOB); 
;;;198    for (i=0;i<len+3;i++)
00015e  f04f0400          MOV      r4,#0
000162  f1010603          ADD      r6,r1,#3
000166  e005              B        |L1.372|
                  |L1.360|
;;;199    	{
;;;200    	putchar0(UOB[i]);
000168  5d28              LDRB     r0,[r5,r4]
00016a  f7fffffe          BL       putchar0
00016e  f1040401          ADD      r4,r4,#1              ;198
000172  b2e4              UXTB     r4,r4                 ;198
                  |L1.372|
000174  42b4              CMP      r4,r6                 ;198
000176  d3f7              BCC      |L1.360|
;;;201    	}   
;;;202    }
000178  e7d2              B        |L1.288|
;;;203    
                          ENDP

                  uart_out_adr_block PROC
;;;205    //-----------------------------------------------
;;;206    void uart_out_adr_block (unsigned long adress,char *ptr, char len)
00017a  b5f7              PUSH     {r0-r2,r4-r7,lr}
;;;207    {
00017c  b09a              SUB      sp,sp,#0x68
00017e  460f              MOV      r7,r1
000180  4616              MOV      r6,r2
;;;208    unsigned char UOB[100]={0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};
000182  f04f0164          MOV      r1,#0x64
000186  a801              ADD      r0,sp,#4
000188  f7fffffe          BL       __aeabi_memclr4
;;;209    char /*i,*/temp11,t=0;
;;;210    unsigned i11;
;;;211    
;;;212    t=0;
;;;213    temp11=CMND;
00018c  f04f0016          MOV      r0,#0x16
;;;214    t^=temp11;
;;;215    putchar0(temp11);
000190  f7fffffe          BL       putchar0
;;;216    
;;;217    temp11=10;
000194  f04f000a          MOV      r0,#0xa
;;;218    t^=temp11;
;;;219    putchar0(temp11);
000198  f7fffffe          BL       putchar0
;;;220    
;;;221    temp11=(*((char*)&adress));
00019c  f89d0068          LDRB     r0,[sp,#0x68]
;;;222    t^=temp11;
0001a0  f080051c          EOR      r5,r0,#0x1c
;;;223    putchar0(temp11);
0001a4  f7fffffe          BL       putchar0
;;;224    
;;;225    temp11=(*(((char*)&adress)+1));
0001a8  f89d0069          LDRB     r0,[sp,#0x69]
;;;226    t^=temp11;
0001ac  ea850500          EOR      r5,r5,r0
;;;227    putchar0(temp11);
0001b0  f7fffffe          BL       putchar0
;;;228    
;;;229    temp11=(*(((char*)&adress)+2));
0001b4  f89d006a          LDRB     r0,[sp,#0x6a]
;;;230    t^=temp11;
0001b8  ea850500          EOR      r5,r5,r0
;;;231    putchar0(temp11);
0001bc  f7fffffe          BL       putchar0
;;;232    
;;;233    temp11=(*(((char*)&adress)+3));
0001c0  f89d006b          LDRB     r0,[sp,#0x6b]
;;;234    t^=temp11;
0001c4  ea850500          EOR      r5,r5,r0
;;;235    putchar0(temp11);
0001c8  f7fffffe          BL       putchar0
;;;236    
;;;237    
;;;238    for(i11=0;i11<len;i11++)
0001cc  f04f0400          MOV      r4,#0
0001d0  e006              B        |L1.480|
                  |L1.466|
;;;239    	{
;;;240    	temp11=ptr[i11];
0001d2  5d38              LDRB     r0,[r7,r4]
;;;241    	t^=temp11;
0001d4  ea850500          EOR      r5,r5,r0
;;;242    	putchar0(temp11);
0001d8  f7fffffe          BL       putchar0
0001dc  f1040401          ADD      r4,r4,#1              ;238
                  |L1.480|
0001e0  42b4              CMP      r4,r6                 ;238
0001e2  d3f6              BCC      |L1.466|
;;;243    	}
;;;244    	
;;;245    temp11=(len+6);
0001e4  f1060606          ADD      r6,r6,#6
0001e8  b2f0              UXTB     r0,r6
;;;246    t^=temp11;
0001ea  ea850500          EOR      r5,r5,r0
;;;247    putchar0(temp11);
0001ee  f7fffffe          BL       putchar0
;;;248    
;;;249    putchar0(t);
0001f2  4628              MOV      r0,r5
0001f4  f7fffffe          BL       putchar0
;;;250    
;;;251    putchar0(0x0a);
0001f8  b01d              ADD      sp,sp,#0x74
0001fa  200a              MOVS     r0,#0xa
0001fc  e8bd40f0          POP      {r4-r7,lr}
000200  e7fe              B        putchar0
;;;252    	
;;;253    }
;;;254    
                          ENDP

                  rs232_data_out_1 PROC
;;;255    //-----------------------------------------------
;;;256    void rs232_data_out_1(void)
000202  b500              PUSH     {lr}
;;;257    {
000204  b08f              SUB      sp,sp,#0x3c
;;;258    short rs232_data_out_buff[30];
;;;259    /*
;;;260    load_U=12345;
;;;261    load_I=23456;
;;;262    net_U=2100;
;;;263    net_F=501;
;;;264    */
;;;265    
;;;266    rs232_data_out_buff[0]=avar_stat;
000206  4885              LDR      r0,|L1.1052|
000208  6800              LDR      r0,[r0,#0]  ; avar_stat
00020a  f8ad0000          STRH     r0,[sp,#0]
;;;267    rs232_data_out_buff[1]=spc_stat;
00020e  4884              LDR      r0,|L1.1056|
000210  7800              LDRB     r0,[r0,#0]  ; spc_stat
000212  f8ad0002          STRH     r0,[sp,#2]
;;;268    rs232_data_out_buff[2]=load_U;
000216  4883              LDR      r0,|L1.1060|
000218  8800              LDRH     r0,[r0,#0]  ; load_U
00021a  f8ad0004          STRH     r0,[sp,#4]
;;;269    rs232_data_out_buff[3]=load_I;
00021e  4882              LDR      r0,|L1.1064|
000220  8800              LDRH     r0,[r0,#0]  ; load_I
000222  f8ad0006          STRH     r0,[sp,#6]
;;;270    rs232_data_out_buff[4]=net_U;
000226  4881              LDR      r0,|L1.1068|
000228  8800              LDRH     r0,[r0,#0]  ; net_U
00022a  f8ad0008          STRH     r0,[sp,#8]
;;;271    rs232_data_out_buff[5]=net_F;
00022e  4880              LDR      r0,|L1.1072|
000230  8800              LDRH     r0,[r0,#0]  ; net_F
000232  f8ad000a          STRH     r0,[sp,#0xa]
;;;272    rs232_data_out_buff[6]=t_ext[0];
000236  487f              LDR      r0,|L1.1076|
000238  8800              LDRH     r0,[r0,#0]  ; t_ext
00023a  f8ad000c          STRH     r0,[sp,#0xc]
;;;273    rs232_data_out_buff[7]=bps[0]._Uii;
00023e  487e              LDR      r0,|L1.1080|
000240  69c1              LDR      r1,[r0,#0x1c]  ; bps
000242  f8ad100e          STRH     r1,[sp,#0xe]
;;;274    rs232_data_out_buff[8]=bps[0]._Ii;
000246  6a41              LDR      r1,[r0,#0x24]  ; bps
000248  f8ad1010          STRH     r1,[sp,#0x10]
;;;275    rs232_data_out_buff[9]=bps[0]._Ti;
00024c  6a81              LDR      r1,[r0,#0x28]  ; bps
00024e  f8ad1012          STRH     r1,[sp,#0x12]
;;;276    rs232_data_out_buff[10]=bps[0]._av;
000252  7841              LDRB     r1,[r0,#1]  ; bps
000254  f8ad1014          STRH     r1,[sp,#0x14]
;;;277    rs232_data_out_buff[11]=bps[1]._Uii;
000258  6f81              LDR      r1,[r0,#0x78]  ; bps
00025a  f8ad1016          STRH     r1,[sp,#0x16]
;;;278    rs232_data_out_buff[12]=bps[1]._Ii;
00025e  f8d01080          LDR      r1,[r0,#0x80]  ; bps
000262  f8ad1018          STRH     r1,[sp,#0x18]
;;;279    rs232_data_out_buff[13]=bps[1]._Ti;
000266  f8d01084          LDR      r1,[r0,#0x84]  ; bps
00026a  f8ad101a          STRH     r1,[sp,#0x1a]
;;;280    rs232_data_out_buff[14]=bps[1]._av; 
00026e  f890005d          LDRB     r0,[r0,#0x5d]  ; bps
000272  f8ad001c          STRH     r0,[sp,#0x1c]
;;;281    
;;;282    /*
;;;283    
;;;284    rs232_data_out_buff_char[0]=*((char*)&avar_stat);
;;;285    rs232_data_out_buff_char[1]=*(((char*)&avar_stat)+1);
;;;286    rs232_data_out_buff_char[2]=*((char*)&spc_stat);
;;;287    rs232_data_out_buff_char[3]=*(((char*)&spc_stat)+1);
;;;288    rs232_data_out_buff_char[4]=*((char*)&load_U);
;;;289    rs232_data_out_buff_char[5]=*(((char*)&load_U)+1);
;;;290    rs232_data_out_buff_char[6]=*((char*)&load_I);
;;;291    rs232_data_out_buff_char[7]=*(((char*)&load_I)+1);
;;;292    rs232_data_out_buff_char[8]=*((char*)&net_U);
;;;293    rs232_data_out_buff_char[9]=*(((char*)&net_U)+1);
;;;294    rs232_data_out_buff_char[10]=*((char*)&load_I);
;;;295    rs232_data_out_buff_char[11]=*(((char*)&load_I)+1); */
;;;296    
;;;297    uart_out_adr0 ((char*)rs232_data_out_buff,30);
000276  211e              MOVS     r1,#0x1e
000278  4668              MOV      r0,sp
00027a  f7fffffe          BL       uart_out_adr0
                  |L1.638|
;;;298    }
00027e  b00f              ADD      sp,sp,#0x3c
000280  bd00              POP      {pc}
;;;299    
                          ENDP

                  rs232_data_out PROC
;;;300    //-----------------------------------------------
;;;301    void rs232_data_out(void)
000282  b500              PUSH     {lr}
;;;302    {
000284  b08f              SUB      sp,sp,#0x3c
;;;303    short rs232_data_out_buff[30];
;;;304    
;;;305    rs232_data_out_buff[0]=avar_stat;
000286  4865              LDR      r0,|L1.1052|
000288  6800              LDR      r0,[r0,#0]  ; avar_stat
00028a  f8ad0000          STRH     r0,[sp,#0]
;;;306    rs232_data_out_buff[1]=spc_stat;
00028e  4864              LDR      r0,|L1.1056|
000290  7800              LDRB     r0,[r0,#0]  ; spc_stat
000292  f8ad0002          STRH     r0,[sp,#2]
;;;307    rs232_data_out_buff[2]=load_U;
000296  4863              LDR      r0,|L1.1060|
000298  8800              LDRH     r0,[r0,#0]  ; load_U
00029a  f8ad0004          STRH     r0,[sp,#4]
;;;308    rs232_data_out_buff[3]=load_I;
00029e  4862              LDR      r0,|L1.1064|
0002a0  8800              LDRH     r0,[r0,#0]  ; load_I
0002a2  f8ad0006          STRH     r0,[sp,#6]
;;;309    rs232_data_out_buff[4]=net_Ua;
0002a6  4865              LDR      r0,|L1.1084|
0002a8  8800              LDRH     r0,[r0,#0]  ; net_Ua
0002aa  f8ad0008          STRH     r0,[sp,#8]
;;;310    rs232_data_out_buff[5]=net_Ub;
0002ae  4864              LDR      r0,|L1.1088|
0002b0  8800              LDRH     r0,[r0,#0]  ; net_Ub
0002b2  f8ad000a          STRH     r0,[sp,#0xa]
;;;311    rs232_data_out_buff[6]=net_Uc;
0002b6  4863              LDR      r0,|L1.1092|
0002b8  8800              LDRH     r0,[r0,#0]  ; net_Uc
0002ba  f8ad000c          STRH     r0,[sp,#0xc]
;;;312    rs232_data_out_buff[7]=net_F3;
0002be  4862              LDR      r0,|L1.1096|
0002c0  8800              LDRH     r0,[r0,#0]  ; net_F3
0002c2  f8ad000e          STRH     r0,[sp,#0xe]
;;;313    rs232_data_out_buff[8]=t_ext[0];
0002c6  485b              LDR      r0,|L1.1076|
0002c8  8800              LDRH     r0,[r0,#0]  ; t_ext
0002ca  f8ad0010          STRH     r0,[sp,#0x10]
;;;314    rs232_data_out_buff[9]=bps[0]._Uii;
0002ce  485a              LDR      r0,|L1.1080|
0002d0  69c1              LDR      r1,[r0,#0x1c]  ; bps
0002d2  f8ad1012          STRH     r1,[sp,#0x12]
;;;315    rs232_data_out_buff[10]=bps[0]._Ii;
0002d6  6a41              LDR      r1,[r0,#0x24]  ; bps
0002d8  f8ad1014          STRH     r1,[sp,#0x14]
;;;316    rs232_data_out_buff[11]=bps[0]._Ti;
0002dc  6a81              LDR      r1,[r0,#0x28]  ; bps
0002de  f8ad1016          STRH     r1,[sp,#0x16]
;;;317    rs232_data_out_buff[12]=bps[0]._av;
0002e2  7841              LDRB     r1,[r0,#1]  ; bps
0002e4  f8ad1018          STRH     r1,[sp,#0x18]
;;;318    rs232_data_out_buff[13]=bps[1]._Uii;
0002e8  6f81              LDR      r1,[r0,#0x78]  ; bps
0002ea  f8ad101a          STRH     r1,[sp,#0x1a]
;;;319    rs232_data_out_buff[14]=bps[1]._Ii;
0002ee  f8d01080          LDR      r1,[r0,#0x80]  ; bps
0002f2  f8ad101c          STRH     r1,[sp,#0x1c]
;;;320    rs232_data_out_buff[15]=bps[1]._Ti;
0002f6  f8d01084          LDR      r1,[r0,#0x84]  ; bps
0002fa  f8ad101e          STRH     r1,[sp,#0x1e]
;;;321    rs232_data_out_buff[16]=bps[1]._av;
0002fe  f890005d          LDRB     r0,[r0,#0x5d]  ; bps
000302  f8ad0020          STRH     r0,[sp,#0x20]
;;;322    
;;;323    uart_out_adr0 ((char*)rs232_data_out_buff, 34);
000306  2122              MOVS     r1,#0x22
000308  4668              MOV      r0,sp
00030a  f7fffffe          BL       uart_out_adr0
;;;324    }
00030e  e7b6              B        |L1.638|
;;;325    
                          ENDP

                  rs232_data_out_tki PROC
;;;326    //-----------------------------------------------
;;;327    void rs232_data_out_tki(void)
000310  b500              PUSH     {lr}
;;;328    {
000312  b08f              SUB      sp,sp,#0x3c
;;;329    short rs232_data_out_buff[30];
;;;330    
;;;331    rs232_data_out_buff[0]=avar_stat;
000314  4841              LDR      r0,|L1.1052|
000316  6800              LDR      r0,[r0,#0]  ; avar_stat
000318  f8ad0000          STRH     r0,[sp,#0]
;;;332    rs232_data_out_buff[1]=spc_stat;
00031c  4840              LDR      r0,|L1.1056|
00031e  7800              LDRB     r0,[r0,#0]  ; spc_stat
000320  f8ad0002          STRH     r0,[sp,#2]
;;;333    rs232_data_out_buff[2]=load_U;
000324  483f              LDR      r0,|L1.1060|
000326  8800              LDRH     r0,[r0,#0]  ; load_U
000328  f8ad0004          STRH     r0,[sp,#4]
;;;334    rs232_data_out_buff[3]=load_I;
00032c  483e              LDR      r0,|L1.1064|
00032e  8800              LDRH     r0,[r0,#0]  ; load_I
000330  f8ad0006          STRH     r0,[sp,#6]
;;;335    rs232_data_out_buff[4]=net_Ua;
000334  4841              LDR      r0,|L1.1084|
000336  8800              LDRH     r0,[r0,#0]  ; net_Ua
000338  f8ad0008          STRH     r0,[sp,#8]
;;;336    rs232_data_out_buff[5]=net_Ub;
00033c  4840              LDR      r0,|L1.1088|
00033e  8800              LDRH     r0,[r0,#0]  ; net_Ub
000340  f8ad000a          STRH     r0,[sp,#0xa]
;;;337    rs232_data_out_buff[6]=net_Uc;
000344  483f              LDR      r0,|L1.1092|
000346  8800              LDRH     r0,[r0,#0]  ; net_Uc
000348  f8ad000c          STRH     r0,[sp,#0xc]
;;;338    rs232_data_out_buff[7]=net_F3;
00034c  483e              LDR      r0,|L1.1096|
00034e  8800              LDRH     r0,[r0,#0]  ; net_F3
000350  f8ad000e          STRH     r0,[sp,#0xe]
;;;339    rs232_data_out_buff[8]=t_ext[0];
000354  4837              LDR      r0,|L1.1076|
000356  8800              LDRH     r0,[r0,#0]  ; t_ext
000358  f8ad0010          STRH     r0,[sp,#0x10]
;;;340    rs232_data_out_buff[9]=bps[0]._Uii;
00035c  4836              LDR      r0,|L1.1080|
00035e  69c1              LDR      r1,[r0,#0x1c]  ; bps
000360  f8ad1012          STRH     r1,[sp,#0x12]
;;;341    rs232_data_out_buff[10]=bps[0]._Ii;
000364  6a41              LDR      r1,[r0,#0x24]  ; bps
000366  f8ad1014          STRH     r1,[sp,#0x14]
;;;342    rs232_data_out_buff[11]=bps[0]._Ti;
00036a  6a81              LDR      r1,[r0,#0x28]  ; bps
00036c  f8ad1016          STRH     r1,[sp,#0x16]
;;;343    rs232_data_out_buff[12]=bps[0]._av;
000370  7841              LDRB     r1,[r0,#1]  ; bps
000372  f8ad1018          STRH     r1,[sp,#0x18]
;;;344    rs232_data_out_buff[13]=bps[1]._Uii;
000376  6f81              LDR      r1,[r0,#0x78]  ; bps
000378  f8ad101a          STRH     r1,[sp,#0x1a]
;;;345    rs232_data_out_buff[14]=bps[1]._Ii;
00037c  f8d01080          LDR      r1,[r0,#0x80]  ; bps
000380  f8ad101c          STRH     r1,[sp,#0x1c]
;;;346    rs232_data_out_buff[15]=bps[1]._Ti;
000384  f8d01084          LDR      r1,[r0,#0x84]  ; bps
000388  f8ad101e          STRH     r1,[sp,#0x1e]
;;;347    rs232_data_out_buff[16]=bps[1]._av;
00038c  f890105d          LDRB     r1,[r0,#0x5d]  ; bps
000390  f8ad1020          STRH     r1,[sp,#0x20]
;;;348    rs232_data_out_buff[17]=bps[2]._Uii;
000394  f8d010d4          LDR      r1,[r0,#0xd4]  ; bps
000398  f8ad1022          STRH     r1,[sp,#0x22]
;;;349    rs232_data_out_buff[18]=bps[2]._Ii;
00039c  f8d010dc          LDR      r1,[r0,#0xdc]  ; bps
0003a0  f8ad1024          STRH     r1,[sp,#0x24]
;;;350    rs232_data_out_buff[19]=bps[2]._Ti;
0003a4  f8d010e0          LDR      r1,[r0,#0xe0]  ; bps
0003a8  f8ad1026          STRH     r1,[sp,#0x26]
;;;351    rs232_data_out_buff[20]=bps[2]._av;
0003ac  f89010b9          LDRB     r1,[r0,#0xb9]  ; bps
0003b0  f8ad1028          STRH     r1,[sp,#0x28]
;;;352    rs232_data_out_buff[21]=bps[3]._Uii;
0003b4  f8d01130          LDR      r1,[r0,#0x130]  ; bps
0003b8  f8ad102a          STRH     r1,[sp,#0x2a]
;;;353    rs232_data_out_buff[22]=bps[3]._Ii;
0003bc  f8d01138          LDR      r1,[r0,#0x138]  ; bps
0003c0  f8ad102c          STRH     r1,[sp,#0x2c]
;;;354    rs232_data_out_buff[23]=bps[3]._Ti;
0003c4  f8d0113c          LDR      r1,[r0,#0x13c]  ; bps
0003c8  f8ad102e          STRH     r1,[sp,#0x2e]
;;;355    rs232_data_out_buff[24]=bps[3]._av;
0003cc  f8900115          LDRB     r0,[r0,#0x115]  ; bps
0003d0  f8ad0030          STRH     r0,[sp,#0x30]
;;;356    rs232_data_out_buff[25]=Ib_ips_termokompensat;
0003d4  481d              LDR      r0,|L1.1100|
0003d6  8800              LDRH     r0,[r0,#0]  ; Ib_ips_termokompensat
0003d8  f8ad0032          STRH     r0,[sp,#0x32]
;;;357    
;;;358    uart_out_adr0 ((char*)rs232_data_out_buff, 52);
0003dc  2134              MOVS     r1,#0x34
0003de  4668              MOV      r0,sp
0003e0  f7fffffe          BL       uart_out_adr0
;;;359    }
0003e4  e74b              B        |L1.638|
;;;360    
                          ENDP

                  UARTInit PROC
;;;390    //-----------------------------------------------
;;;391    uint32_t UARTInit( uint32_t PortNum, uint32_t baudrate )
0003e6  e92d47f0          PUSH     {r4-r10,lr}
;;;392    {
;;;393    uint32_t Fdiv;
;;;394    uint32_t pclkdiv, pclk;
;;;395    
;;;396    
;;;397    
;;;398    if ( PortNum == 0 )
;;;399      	{
;;;400    	LPC_PINCON->PINSEL0 &= ~0x000000F0;
;;;401    	LPC_PINCON->PINSEL0 |= 0x00000050;  /* RxD0 is P0.3 and TxD0 is P0.2 */
;;;402    	/* By default, the PCLKSELx value is zero, thus, the PCLK for
;;;403    	all the peripherals is 1/4 of the SystemFrequency. */
;;;404    	/* Bit 6~7 is for UART0 */
;;;405    	pclkdiv = (LPC_SC->PCLKSEL0 >> 6) & 0x03;
;;;406    	switch ( pclkdiv )
;;;407    		{
;;;408    	  	case 0x00:
;;;409    	  	default:
;;;410    		pclk = SystemFrequency/4;
0003ea  4a1b              LDR      r2,|L1.1112|
0003ec  f8df8060          LDR      r8,|L1.1104|
0003f0  f8df9060          LDR      r9,|L1.1108|
0003f4  6812              LDR      r2,[r2,#0]
0003f6  2603              MOVS     r6,#3                 ;394
;;;411    		break;
;;;412    	  	case 0x01:
;;;413    		pclk = SystemFrequency;
;;;414    		break; 
;;;415    	  	case 0x02:
;;;416    		pclk = SystemFrequency/2;
;;;417    		break; 
;;;418    	  	case 0x03:
;;;419    		pclk = SystemFrequency/8;
;;;420    		break;
;;;421    		}
;;;422    
;;;423        	LPC_UART0->LCR = 0x83;		/* 8 bits, no Parity, 1 Stop bit */
0003f8  2783              MOVS     r7,#0x83
;;;424    	Fdiv = ( pclk / 16 ) / baudrate ;	/*baud rate */
;;;425        	LPC_UART0->DLM = Fdiv / 256;							
;;;426        	LPC_UART0->DLL = Fdiv % 256;
;;;427    	LPC_UART0->LCR = 0x03;		/* DLAB = 0 */
;;;428        	LPC_UART0->FCR = 0x07;		/* Enable and reset TX and RX FIFO. */
0003fa  2507              MOVS     r5,#7
0003fc  0893              LSRS     r3,r2,#2              ;410
0003fe  0854              LSRS     r4,r2,#1              ;416
000400  ea4f0cd2          LSR      r12,r2,#3             ;419
000404  b350              CBZ      r0,|L1.1116|
;;;429    
;;;430       	NVIC_EnableIRQ(UART0_IRQn);
;;;431    
;;;432        	LPC_UART0->IER = IER_RBR | IER_THRE | IER_RLS;	/* Enable UART0 interrupt */
;;;433        	return (TRUE);
;;;434      	}
;;;435    else if ( PortNum == 1 )
000406  e02a              B        |L1.1118|
                  |L1.1032|
                          DCD      Table87
                  |L1.1036|
                          DCD      Table95
                  |L1.1040|
                          DCD      ||.data||
                  |L1.1044|
                          DCD      0x4000c000
                  |L1.1048|
                          DCD      ||.bss||+0x464
                  |L1.1052|
                          DCD      avar_stat
                  |L1.1056|
                          DCD      spc_stat
                  |L1.1060|
                          DCD      load_U
                  |L1.1064|
                          DCD      load_I
                  |L1.1068|
                          DCD      net_U
                  |L1.1072|
                          DCD      net_F
                  |L1.1076|
                          DCD      t_ext
                  |L1.1080|
                          DCD      bps
                  |L1.1084|
                          DCD      net_Ua
                  |L1.1088|
                          DCD      net_Ub
                  |L1.1092|
                          DCD      net_Uc
                  |L1.1096|
                          DCD      net_F3
                  |L1.1100|
                          DCD      Ib_ips_termokompensat
                  |L1.1104|
                          DCD      0x4002c000
                  |L1.1108|
                          DCD      0x400fc000
                  |L1.1112|
                          DCD      SystemFrequency
                  |L1.1116|
00045c  e004              B        |L1.1128|
                  |L1.1118|
00045e  2801              CMP      r0,#1
000460  d030              BEQ      |L1.1220|
;;;436      	{
;;;437    	LPC_PINCON->PINSEL4 &= ~0x0000000F;
;;;438    	LPC_PINCON->PINSEL4 |= 0x0000000A;	/* Enable RxD1 P2.1, TxD1 P2.0 */
;;;439    	
;;;440    	/* By default, the PCLKSELx value is zero, thus, the PCLK for
;;;441    	all the peripherals is 1/4 of the SystemFrequency. */
;;;442    	/* Bit 8,9 are for UART1 */
;;;443    	pclkdiv = (LPC_SC->PCLKSEL0 >> 8) & 0x03;
;;;444    	switch ( pclkdiv )
;;;445    		{
;;;446    	  	case 0x00:
;;;447    	  	default:
;;;448    		pclk = SystemFrequency/4;
;;;449    		break;
;;;450    	  	case 0x01:
;;;451    		pclk = SystemFrequency;
;;;452    		break; 
;;;453    	  	case 0x02:
;;;454    		pclk = SystemFrequency/2;
;;;455    		break; 
;;;456    	  	case 0x03:
;;;457    		pclk = SystemFrequency/8;
;;;458    		break;
;;;459    		}
;;;460    
;;;461        	LPC_UART1->LCR = 0x83;		/* 8 bits, no Parity, 1 Stop bit */
;;;462    	Fdiv = ( pclk / 16 ) / baudrate ;	/*baud rate */
;;;463        	LPC_UART1->DLM = Fdiv / 256;							
;;;464        	LPC_UART1->DLL = Fdiv % 256;
;;;465    	LPC_UART1->LCR = 0x03;		/* DLAB = 0 */
;;;466        	LPC_UART1->FCR = 0x07;		/* Enable and reset TX and RX FIFO. */
;;;467    
;;;468       	NVIC_EnableIRQ(UART1_IRQn);
;;;469    
;;;470        	LPC_UART1->IER = IER_RBR | IER_THRE | IER_RLS;	/* Enable UART1 interrupt */
;;;471        	return (TRUE);
;;;472      	}
;;;473    return( FALSE ); 
000462  2000              MOVS     r0,#0
                  |L1.1124|
;;;474    }
000464  e8bd87f0          POP      {r4-r10,pc}
                  |L1.1128|
000468  f8d80000          LDR      r0,[r8,#0]            ;400
00046c  f02000f0          BIC      r0,r0,#0xf0           ;400
000470  f8c80000          STR      r0,[r8,#0]            ;400
000474  f8d80000          LDR      r0,[r8,#0]            ;401
000478  f0400050          ORR      r0,r0,#0x50           ;401
00047c  f8c80000          STR      r0,[r8,#0]            ;401
000480  f8d901a8          LDR      r0,[r9,#0x1a8]        ;405
000484  f3c01081          UBFX     r0,r0,#6,#2           ;405
000488  2801              CMP      r0,#1                 ;406
00048a  d008              BEQ      |L1.1182|
00048c  2802              CMP      r0,#2                 ;406
00048e  d003              BEQ      |L1.1176|
000490  2803              CMP      r0,#3                 ;406
000492  d003              BEQ      |L1.1180|
000494  461a              MOV      r2,r3                 ;410
000496  e002              B        |L1.1182|
                  |L1.1176|
000498  4622              MOV      r2,r4                 ;416
00049a  e000              B        |L1.1182|
                  |L1.1180|
00049c  4662              MOV      r2,r12                ;419
                  |L1.1182|
00049e  4cff              LDR      r4,|L1.2204|
0004a0  7327              STRB     r7,[r4,#0xc]          ;423
0004a2  ea4f1012          LSR      r0,r2,#4              ;424
0004a6  fbb0f0f1          UDIV     r0,r0,r1              ;424
0004aa  ea4f2110          LSR      r1,r0,#8              ;425
0004ae  7121              STRB     r1,[r4,#4]            ;425
0004b0  7020              STRB     r0,[r4,#0]            ;426
0004b2  7326              STRB     r6,[r4,#0xc]          ;427
0004b4  7225              STRB     r5,[r4,#8]            ;428
0004b6  f04f0005          MOV      r0,#5                 ;430
0004ba  f7fffffe          BL       NVIC_EnableIRQ
0004be  6065              STR      r5,[r4,#4]            ;432
0004c0  2001              MOVS     r0,#1                 ;433
0004c2  e7cf              B        |L1.1124|
                  |L1.1220|
0004c4  f8d80010          LDR      r0,[r8,#0x10]         ;437
0004c8  f020000f          BIC      r0,r0,#0xf            ;437
0004cc  f8c80010          STR      r0,[r8,#0x10]         ;437
0004d0  f8d80010          LDR      r0,[r8,#0x10]         ;438
0004d4  f040000a          ORR      r0,r0,#0xa            ;438
0004d8  f8c80010          STR      r0,[r8,#0x10]         ;438
0004dc  f8d901a8          LDR      r0,[r9,#0x1a8]        ;443
0004e0  f3c02001          UBFX     r0,r0,#8,#2           ;443
0004e4  2801              CMP      r0,#1                 ;444
0004e6  d008              BEQ      |L1.1274|
0004e8  2802              CMP      r0,#2                 ;444
0004ea  d003              BEQ      |L1.1268|
0004ec  2803              CMP      r0,#3                 ;444
0004ee  d003              BEQ      |L1.1272|
0004f0  461a              MOV      r2,r3                 ;448
0004f2  e002              B        |L1.1274|
                  |L1.1268|
0004f4  4622              MOV      r2,r4                 ;454
0004f6  e000              B        |L1.1274|
                  |L1.1272|
0004f8  4662              MOV      r2,r12                ;457
                  |L1.1274|
0004fa  4ce9              LDR      r4,|L1.2208|
0004fc  7327              STRB     r7,[r4,#0xc]          ;461
0004fe  ea4f1012          LSR      r0,r2,#4              ;462
000502  fbb0f0f1          UDIV     r0,r0,r1              ;462
000506  ea4f2110          LSR      r1,r0,#8              ;463
00050a  7121              STRB     r1,[r4,#4]            ;463
00050c  7020              STRB     r0,[r4,#0]            ;464
00050e  7326              STRB     r6,[r4,#0xc]          ;465
000510  7225              STRB     r5,[r4,#8]            ;466
000512  f04f0006          MOV      r0,#6                 ;468
000516  f7fffffe          BL       NVIC_EnableIRQ
00051a  6065              STR      r5,[r4,#4]            ;470
00051c  2001              MOVS     r0,#1                 ;471
00051e  e7a1              B        |L1.1124|
;;;475    
                          ENDP

                  getchar0 PROC
;;;476    //-----------------------------------------------
;;;477    char getchar0(void)
000520  4be0              LDR      r3,|L1.2212|
;;;478    {
;;;479    char data;
;;;480    while (rx_counter0==0);
000522  8919              LDRH     r1,[r3,#8]
                  |L1.1316|
000524  2900              CMP      r1,#0
000526  d0fd              BEQ      |L1.1316|
;;;481    data=rx_buffer0[rx_rd_index0];
000528  48df              LDR      r0,|L1.2216|
00052a  88da              LDRH     r2,[r3,#6]  ; rx_rd_index0
00052c  5c80              LDRB     r0,[r0,r2]
;;;482    if (++rx_rd_index0 == RX_BUFFER_SIZE0) rx_rd_index0=0;
00052e  1c52              ADDS     r2,r2,#1
000530  b292              UXTH     r2,r2
000532  80da              STRH     r2,[r3,#6]
000534  f5b26f80          CMP      r2,#0x400
000538  d102              BNE      |L1.1344|
00053a  f04f0200          MOV      r2,#0
00053e  80da              STRH     r2,[r3,#6]
                  |L1.1344|
;;;483    --rx_counter0;
000540  f1a10101          SUB      r1,r1,#1
000544  8119              STRH     r1,[r3,#8]
;;;484    return data;
;;;485    }
000546  4770              BX       lr
;;;486    
                          ENDP

                  UART0_IRQHandler PROC
;;;487    //***********************************************
;;;488    void UART0_IRQHandler (void) 
000548  e92d4ff8          PUSH     {r3-r11,lr}
;;;489    {
;;;490    uint8_t IIRValue, LSRValue;
;;;491    uint8_t Dummy = Dummy;
;;;492    char /*status,u0iir,*/data;
;;;493    
;;;494    plazma_uart0++;
00054c  4ed5              LDR      r6,|L1.2212|
00054e  78f0              LDRB     r0,[r6,#3]  ; plazma_uart0
000550  f1000001          ADD      r0,r0,#1
000554  70f0              STRB     r0,[r6,#3]
;;;495    
;;;496    
;;;497    			
;;;498    IIRValue = LPC_UART0->IIR;
000556  49d1              LDR      r1,|L1.2204|
000558  6888              LDR      r0,[r1,#8]
;;;499        
;;;500    IIRValue >>= 1;			/* skip pending bit in IIR */
00055a  ea4f0050          LSR      r0,r0,#1
;;;501    IIRValue &= 0x07;			/* check bit 1~3, interrupt identification */
00055e  f0000007          AND      r0,r0,#7
;;;502    if ( IIRValue == IIR_RLS )		/* Receive Line Status */
;;;503      	{
;;;504    	LSRValue = LPC_UART0->LSR;
;;;505    
;;;506    	/* Receive Line Status */
;;;507    	if ( LSRValue & (LSR_OE|LSR_PE|LSR_FE|LSR_RXFE|LSR_BI) )
;;;508    		{
;;;509    	  	/* There are errors or break interrupt */
;;;510    	  	/* Read LSR will clear the interrupt */
;;;511    	  	UART0Status = LSRValue;
;;;512    	  	Dummy = LPC_UART0->RBR;		/* Dummy read on RX to clear 
;;;513    							interrupt, then bail out */
;;;514    	  	return;
;;;515    		}
;;;516    	if ( LSRValue & LSR_RDR )	/* Receive Data Ready */			
;;;517    		{
;;;518    		
;;;519    		data=LPC_UART0->RBR;
;;;520    		rx_buffer0[rx_wr_index0]=data;
000562  f8dfb344          LDR      r11,|L1.2216|
;;;521       		bRXIN0=1;
;;;522       		if (++rx_wr_index0 == RX_BUFFER_SIZE0) rx_wr_index0=0;
000566  f44f6a80          MOV      r10,#0x400
00056a  f04f0901          MOV      r9,#1                 ;521
00056e  f04f0400          MOV      r4,#0
000572  2803              CMP      r0,#3                 ;502
000574  d023              BEQ      |L1.1470|
;;;523       		if (++rx_counter0 == RX_BUFFER_SIZE0)
;;;524          		{
;;;525          		rx_counter0=0;
;;;526          		rx_buffer_overflow0=1;
;;;527          		}
;;;528    
;;;529    		
;;;530    		}
;;;531      	}
;;;532    else if ( IIRValue == IIR_RDA )	/* Receive Data Available */
000576  2802              CMP      r0,#2
000578  d040              BEQ      |L1.1532|
;;;533      	{
;;;534    	plazma_bat_drv0++;
;;;535    	modbus_plazma++;
;;;536    	while((LPC_UART0->LSR)&0x0001) {	
;;;537    	data=LPC_UART0->RBR;
;;;538    	rx_buffer0[rx_wr_index0]=data;
;;;539       	bRXIN0=1;
;;;540       	if (++rx_wr_index0 == RX_BUFFER_SIZE0) rx_wr_index0=0;
;;;541       	if (++rx_counter0 == RX_BUFFER_SIZE0)
;;;542          	{
;;;543          	rx_counter0=0;
;;;544          	rx_buffer_overflow0=1;
;;;545          	}
;;;546    	modbus_rx_buffer[modbus_rx_buffer_ptr]=data;
;;;547    	modbus_rx_buffer_ptr++;
;;;548    	modbus_timeout_cnt=0;
;;;549    
;;;550    
;;;551    
;;;552    	
;;;553    
;;;554    	if(data==0x7e)
;;;555    		{
;;;556    		bat_drv_rx_cnt=0;
;;;557    		bat_drv_rx_cnt=0;
;;;558    		}
;;;559    	//if(bat_drv_rx_cnt<50)
;;;560    	bat_drv_rx_buff[bat_drv_rx_cnt++]=data;
;;;561    	//if(bat_drv_rx_cnt==50) bat_drv_rx_in=1; 
;;;562    
;;;563    	if(data==0x0d)
;;;564    		{
;;;565    		if(BAT_TYPE==2)
;;;566    			{
;;;567    			if(sacredSunRequestPhase==0)	mem_copy (liBatteryInBuff, bat_drv_rx_buff,  bat_drv_rx_cnt);
;;;568    			else if(sacredSunRequestPhase==1)	mem_copy (&liBatteryInBuff[150], bat_drv_rx_buff,  bat_drv_rx_cnt);
;;;569    			sacredSunSilentCnt=0;
;;;570    			}
;;;571    		else if (BAT_TYPE==3)
;;;572    			{
;;;573    			numOfPacks_=((ascii2halFhex(bat_drv_rx_buff[15]))<<4)+((ascii2halFhex(bat_drv_rx_buff[16])));
;;;574    			if(numOfPacks_)numOfPacks_--;
;;;575    		   	if(numOfPacks_<0)numOfPacks_=0;
;;;576    			if(numOfPacks_>NUMBAT)numOfPacks_=0;
;;;577    			zTTSilentCnt[numOfPacks_]=50;
;;;578    
;;;579    			if(zTTRequestPhase==0)	mem_copy (liBatteryInBuff, bat_drv_rx_buff,  bat_drv_rx_cnt);
;;;580    			else if(zTTRequestPhase==1)	mem_copy (&liBatteryInBuff[150], bat_drv_rx_buff,  bat_drv_rx_cnt);
;;;581    			//zTTSilentCnt=0;
;;;582    			}
;;;583    		}
;;;584    
;;;585    	}
;;;586      	}
;;;587    else if ( IIRValue == IIR_CTI )	/* Character timeout indicator */
00057a  2806              CMP      r0,#6
00057c  d07e              BEQ      |L1.1660|
;;;588      	{
;;;589    	/* Character Time-out indicator */
;;;590    	UART0Status |= 0x100;		/* Bit 9 as the CTI error */
;;;591      	}
;;;592    else if ( IIRValue == IIR_THRE )	/* THRE, transmit holding register empty */
00057e  2801              CMP      r0,#1
000580  d11b              BNE      |L1.1466|
;;;593      	{
;;;594    	/* THRE interrupt */
;;;595    	
;;;596    	plazma_bat_drv1++;
000582  48ca              LDR      r0,|L1.2220|
000584  8802              LDRH     r2,[r0,#0]  ; plazma_bat_drv1
000586  f1020201          ADD      r2,r2,#1
00058a  8002              STRH     r2,[r0,#0]
;;;597    	LSRValue = LPC_UART0->LSR;		/* Check status in the LSR to see if
00058c  7d08              LDRB     r0,[r1,#0x14]
;;;598    									valid data in U0THR or not */
;;;599    	if ( LSRValue & LSR_THRE )
00058e  0680              LSLS     r0,r0,#26
000590  d575              BPL      |L1.1662|
;;;600    		{
;;;601    	  	UART0TxEmpty = 1;
000592  f8869000          STRB     r9,[r6,#0]
;;;602    		if (tx_counter0)
000596  89f0              LDRH     r0,[r6,#0xe]  ; tx_counter0
000598  2800              CMP      r0,#0
00059a  d00e              BEQ      |L1.1466|
;;;603       			{
;;;604       			--tx_counter0;
00059c  f1a00001          SUB      r0,r0,#1
0005a0  81f0              STRH     r0,[r6,#0xe]
;;;605       			LPC_UART0->THR=tx_buffer0[tx_rd_index0];
0005a2  89b0              LDRH     r0,[r6,#0xc]  ; tx_rd_index0
0005a4  f50b6280          ADD      r2,r11,#0x400
0005a8  5c12              LDRB     r2,[r2,r0]
0005aa  700a              STRB     r2,[r1,#0]
;;;606       			if (++tx_rd_index0 == TX_BUFFER_SIZE0) tx_rd_index0=0;
0005ac  f1000001          ADD      r0,r0,#1
0005b0  b280              UXTH     r0,r0
0005b2  81b0              STRH     r0,[r6,#0xc]
0005b4  4550              CMP      r0,r10
0005b6  d100              BNE      |L1.1466|
0005b8  81b4              STRH     r4,[r6,#0xc]
                  |L1.1466|
;;;607       			}
;;;608    		}
;;;609    	else
;;;610    		{
;;;611    	  	UART0TxEmpty = 0;
;;;612    		}
;;;613      	}
;;;614    }
0005ba  e8bd8ff8          POP      {r3-r11,pc}
                  |L1.1470|
0005be  7d08              LDRB     r0,[r1,#0x14]         ;504
0005c0  f0100f9e          TST      r0,#0x9e              ;507
0005c4  d002              BEQ      |L1.1484|
0005c6  6130              STR      r0,[r6,#0x10]         ;511  ; UART0Status
0005c8  7808              LDRB     r0,[r1,#0]            ;512
0005ca  e7f6              B        |L1.1466|
                  |L1.1484|
0005cc  07c0              LSLS     r0,r0,#31             ;516
0005ce  d0f4              BEQ      |L1.1466|
0005d0  7809              LDRB     r1,[r1,#0]            ;519
0005d2  88b0              LDRH     r0,[r6,#4]            ;520  ; rx_wr_index0
0005d4  f80b1000          STRB     r1,[r11,r0]           ;520
0005d8  f8869001          STRB     r9,[r6,#1]            ;521
0005dc  1c40              ADDS     r0,r0,#1              ;522
0005de  b280              UXTH     r0,r0                 ;522
0005e0  80b0              STRH     r0,[r6,#4]            ;522
0005e2  4550              CMP      r0,r10                ;522
0005e4  d100              BNE      |L1.1512|
0005e6  80b4              STRH     r4,[r6,#4]            ;522
                  |L1.1512|
0005e8  8930              LDRH     r0,[r6,#8]            ;523  ; rx_counter0
0005ea  1c40              ADDS     r0,r0,#1              ;523
0005ec  b280              UXTH     r0,r0                 ;523
0005ee  8130              STRH     r0,[r6,#8]            ;523
0005f0  4550              CMP      r0,r10                ;523
0005f2  d1e2              BNE      |L1.1466|
0005f4  8134              STRH     r4,[r6,#8]            ;525
0005f6  f8869002          STRB     r9,[r6,#2]            ;526
0005fa  e7de              B        |L1.1466|
                  |L1.1532|
0005fc  4aac              LDR      r2,|L1.2224|
0005fe  8810              LDRH     r0,[r2,#0]            ;534  ; plazma_bat_drv0
000600  f1000001          ADD      r0,r0,#1              ;534
000604  8010              STRH     r0,[r2,#0]            ;534
000606  48ab              LDR      r0,|L1.2228|
000608  8802              LDRH     r2,[r0,#0]            ;535  ; modbus_plazma
00060a  f1020201          ADD      r2,r2,#1              ;535
00060e  8002              STRH     r2,[r0,#0]            ;535
000610  48ab              LDR      r0,|L1.2240|
000612  f8df82a4          LDR      r8,|L1.2232|
000616  4da9              LDR      r5,|L1.2236|
000618  9000              STR      r0,[sp,#0]            ;536
00061a  e07f              B        |L1.1820|
                  |L1.1564|
00061c  7800              LDRB     r0,[r0,#0]            ;537
00061e  88b1              LDRH     r1,[r6,#4]            ;538  ; rx_wr_index0
000620  f80b0001          STRB     r0,[r11,r1]           ;538
000624  f8869001          STRB     r9,[r6,#1]            ;539
000628  1c49              ADDS     r1,r1,#1              ;540
00062a  b289              UXTH     r1,r1                 ;540
00062c  80b1              STRH     r1,[r6,#4]            ;540
00062e  4551              CMP      r1,r10                ;540
000630  d100              BNE      |L1.1588|
000632  80b4              STRH     r4,[r6,#4]            ;540
                  |L1.1588|
000634  8931              LDRH     r1,[r6,#8]            ;541  ; rx_counter0
000636  1c49              ADDS     r1,r1,#1              ;541
000638  b289              UXTH     r1,r1                 ;541
00063a  8131              STRH     r1,[r6,#8]            ;541
00063c  4551              CMP      r1,r10                ;541
00063e  d102              BNE      |L1.1606|
000640  8134              STRH     r4,[r6,#8]            ;543
000642  f8869002          STRB     r9,[r6,#2]            ;544
                  |L1.1606|
000646  4aa0              LDR      r2,|L1.2248|
000648  4b9e              LDR      r3,|L1.2244|
00064a  7811              LDRB     r1,[r2,#0]            ;546  ; modbus_rx_buffer_ptr
00064c  5458              STRB     r0,[r3,r1]            ;546
00064e  f1010101          ADD      r1,r1,#1              ;547
000652  7011              STRB     r1,[r2,#0]            ;547
000654  499d              LDR      r1,|L1.2252|
000656  700c              STRB     r4,[r1,#0]            ;548
000658  287e              CMP      r0,#0x7e              ;554
00065a  d100              BNE      |L1.1630|
00065c  802c              STRH     r4,[r5,#0]            ;556
                  |L1.1630|
00065e  8829              LDRH     r1,[r5,#0]            ;560  ; bat_drv_rx_cnt
000660  f1010201          ADD      r2,r1,#1              ;560
000664  b292              UXTH     r2,r2                 ;560
000666  802a              STRH     r2,[r5,#0]            ;560
000668  f8080001          STRB     r0,[r8,r1]            ;560
00066c  280d              CMP      r0,#0xd               ;563
00066e  d155              BNE      |L1.1820|
000670  4897              LDR      r0,|L1.2256|
000672  f9b00000          LDRSH    r0,[r0,#0]            ;565  ; BAT_TYPE
000676  2802              CMP      r0,#2                 ;565
000678  d005              BEQ      |L1.1670|
00067a  e001              B        |L1.1664|
                  |L1.1660|
00067c  e054              B        |L1.1832|
                  |L1.1662|
00067e  e058              B        |L1.1842|
                  |L1.1664|
000680  2803              CMP      r0,#3                 ;571
000682  d14b              BNE      |L1.1820|
000684  e012              B        |L1.1708|
                  |L1.1670|
000686  4893              LDR      r0,|L1.2260|
000688  7800              LDRB     r0,[r0,#0]            ;567  ; sacredSunRequestPhase
00068a  b110              CBZ      r0,|L1.1682|
00068c  2801              CMP      r0,#1                 ;568
00068e  d006              BEQ      |L1.1694|
000690  e009              B        |L1.1702|
                  |L1.1682|
000692  488b              LDR      r0,|L1.2240|
000694  4988              LDR      r1,|L1.2232|
000696  3896              SUBS     r0,r0,#0x96           ;567
000698  f7fffffe          BL       mem_copy
00069c  e003              B        |L1.1702|
                  |L1.1694|
00069e  4986              LDR      r1,|L1.2232|
0006a0  9800              LDR      r0,[sp,#0]            ;568
0006a2  f7fffffe          BL       mem_copy
                  |L1.1702|
0006a6  488c              LDR      r0,|L1.2264|
0006a8  8004              STRH     r4,[r0,#0]            ;569
0006aa  e037              B        |L1.1820|
                  |L1.1708|
0006ac  f8980010          LDRB     r0,[r8,#0x10]         ;573  ; bat_drv_rx_buff
0006b0  f7fffffe          BL       ascii2halFhex
0006b4  4607              MOV      r7,r0                 ;573
0006b6  f898000f          LDRB     r0,[r8,#0xf]          ;573  ; bat_drv_rx_buff
0006ba  f7fffffe          BL       ascii2halFhex
0006be  4987              LDR      r1,|L1.2268|
0006c0  eb071000          ADD      r0,r7,r0,LSL #4       ;573
0006c4  b200              SXTH     r0,r0                 ;573
0006c6  8008              STRH     r0,[r1,#0]            ;573
0006c8  b110              CBZ      r0,|L1.1744|
0006ca  f1a00001          SUB      r0,r0,#1              ;574
0006ce  8008              STRH     r0,[r1,#0]            ;574
                  |L1.1744|
0006d0  f9b10000          LDRSH    r0,[r1,#0]            ;575  ; numOfPacks_
0006d4  2800              CMP      r0,#0                 ;575
0006d6  da00              BGE      |L1.1754|
0006d8  800c              STRH     r4,[r1,#0]            ;575
                  |L1.1754|
0006da  4a81              LDR      r2,|L1.2272|
0006dc  f9b10000          LDRSH    r0,[r1,#0]            ;576  ; numOfPacks_
0006e0  f9b22000          LDRSH    r2,[r2,#0]            ;576  ; NUMBAT
0006e4  4290              CMP      r0,r2                 ;576
0006e6  dd00              BLE      |L1.1770|
0006e8  800c              STRH     r4,[r1,#0]            ;576
                  |L1.1770|
0006ea  4a7e              LDR      r2,|L1.2276|
0006ec  f9b11000          LDRSH    r1,[r1,#0]            ;577  ; numOfPacks_
0006f0  f04f0032          MOV      r0,#0x32              ;577
0006f4  f8220011          STRH     r0,[r2,r1,LSL #1]     ;577
0006f8  487b              LDR      r0,|L1.2280|
0006fa  7800              LDRB     r0,[r0,#0]            ;579  ; zTTRequestPhase
0006fc  b110              CBZ      r0,|L1.1796|
0006fe  2801              CMP      r0,#1                 ;580
000700  d10c              BNE      |L1.1820|
000702  e006              B        |L1.1810|
                  |L1.1796|
000704  486e              LDR      r0,|L1.2240|
000706  882a              LDRH     r2,[r5,#0]            ;579  ; bat_drv_rx_cnt
000708  496b              LDR      r1,|L1.2232|
00070a  3896              SUBS     r0,r0,#0x96           ;579
00070c  f7fffffe          BL       mem_copy
000710  e004              B        |L1.1820|
                  |L1.1810|
000712  882a              LDRH     r2,[r5,#0]            ;580  ; bat_drv_rx_cnt
000714  4968              LDR      r1,|L1.2232|
000716  9800              LDR      r0,[sp,#0]            ;580
000718  f7fffffe          BL       mem_copy
                  |L1.1820|
00071c  485f              LDR      r0,|L1.2204|
00071e  7d01              LDRB     r1,[r0,#0x14]         ;536
000720  07c9              LSLS     r1,r1,#31             ;536
000722  f47faf7b          BNE      |L1.1564|
000726  e748              B        |L1.1466|
                  |L1.1832|
000728  6930              LDR      r0,[r6,#0x10]         ;590  ; UART0Status
00072a  f4407080          ORR      r0,r0,#0x100          ;590
00072e  6130              STR      r0,[r6,#0x10]         ;590  ; UART0Status
000730  e743              B        |L1.1466|
                  |L1.1842|
000732  7034              STRB     r4,[r6,#0]            ;611
000734  e741              B        |L1.1466|
;;;615    
                          ENDP

                  uart_in_an0 PROC
;;;618    //-----------------------------------------------
;;;619    void uart_in_an0(void)
000736  b5f0              PUSH     {r4-r7,lr}
;;;620    {
000738  b089              SUB      sp,sp,#0x24
;;;621    
;;;622    
;;;623    
;;;624    if((UIB0[0]=='r')&&(UIB0[1]=='e')&&(UIB0[2]=='a')&&(UIB0[3]=='d')&&(UIB0[6]==crc_87(UIB0,6))&&(UIB0[7]==crc_95(UIB0,6)))
00073a  4c5b              LDR      r4,|L1.2216|
00073c  2672              MOVS     r6,#0x72
00073e  3c64              SUBS     r4,r4,#0x64
000740  2765              MOVS     r7,#0x65
000742  7820              LDRB     r0,[r4,#0]  ; UIB0
000744  2872              CMP      r0,#0x72
000746  d16a              BNE      |L1.2078|
000748  7860              LDRB     r0,[r4,#1]  ; UIB0
00074a  2865              CMP      r0,#0x65
00074c  d167              BNE      |L1.2078|
00074e  78a0              LDRB     r0,[r4,#2]  ; UIB0
000750  2861              CMP      r0,#0x61
000752  d164              BNE      |L1.2078|
000754  78e0              LDRB     r0,[r4,#3]  ; UIB0
000756  2864              CMP      r0,#0x64
000758  d161              BNE      |L1.2078|
00075a  2106              MOVS     r1,#6
00075c  4620              MOV      r0,r4
00075e  f7fffffe          BL       crc_87
000762  79a1              LDRB     r1,[r4,#6]  ; UIB0
000764  4288              CMP      r0,r1
000766  d15a              BNE      |L1.2078|
000768  2106              MOVS     r1,#6
00076a  4620              MOV      r0,r4
00076c  f7fffffe          BL       crc_95
000770  79e1              LDRB     r1,[r4,#7]  ; UIB0
000772  4288              CMP      r0,r1
000774  d153              BNE      |L1.2078|
;;;625    	{
;;;626    	unsigned short ptr;
;;;627    	unsigned long data1,data2;
;;;628    	char temp_out[20];
;;;629    	ptr=UIB0[4]+(UIB0[5]*256U);
000776  7920              LDRB     r0,[r4,#4]  ; UIB0
000778  7961              LDRB     r1,[r4,#5]  ; UIB0
00077a  eb002001          ADD      r0,r0,r1,LSL #8
00077e  b280              UXTH     r0,r0
000780  4605              MOV      r5,r0
000782  9008              STR      r0,[sp,#0x20]
;;;630    	data1=lc640_read_long(ptr);
000784  4628              MOV      r0,r5
000786  f7fffffe          BL       lc640_read_long
00078a  9007              STR      r0,[sp,#0x1c]
;;;631    	data2=lc640_read_long(ptr+4);
00078c  1d28              ADDS     r0,r5,#4
00078e  f7fffffe          BL       lc640_read_long
000792  9006              STR      r0,[sp,#0x18]
;;;632    	temp_out[0]='r';
000794  f88d6004          STRB     r6,[sp,#4]
;;;633    	temp_out[1]='e';
000798  f88d7005          STRB     r7,[sp,#5]
;;;634    	temp_out[2]='a';
00079c  f04f0061          MOV      r0,#0x61
0007a0  f88d0006          STRB     r0,[sp,#6]
;;;635    	temp_out[3]='d';
0007a4  f04f0064          MOV      r0,#0x64
0007a8  f88d0007          STRB     r0,[sp,#7]
;;;636    	temp_out[4]=*((char*)&ptr);
0007ac  f89d0020          LDRB     r0,[sp,#0x20]
0007b0  f88d0008          STRB     r0,[sp,#8]
;;;637    	temp_out[5]=*(((char*)&ptr)+1);	
0007b4  f89d0021          LDRB     r0,[sp,#0x21]
0007b8  f88d0009          STRB     r0,[sp,#9]
;;;638    	temp_out[6]=*((char*)&data1);
0007bc  f89d001c          LDRB     r0,[sp,#0x1c]
0007c0  f88d000a          STRB     r0,[sp,#0xa]
;;;639    	temp_out[7]=*(((char*)&data1)+1);		
0007c4  f89d001d          LDRB     r0,[sp,#0x1d]
0007c8  f88d000b          STRB     r0,[sp,#0xb]
;;;640    	temp_out[8]=*(((char*)&data1)+2);	
0007cc  f89d001e          LDRB     r0,[sp,#0x1e]
0007d0  f88d000c          STRB     r0,[sp,#0xc]
;;;641    	temp_out[9]=*(((char*)&data1)+3);		
0007d4  f89d001f          LDRB     r0,[sp,#0x1f]
0007d8  f88d000d          STRB     r0,[sp,#0xd]
;;;642    	temp_out[10]=*((char*)&data2);
0007dc  f89d0018          LDRB     r0,[sp,#0x18]
0007e0  f88d000e          STRB     r0,[sp,#0xe]
;;;643    	temp_out[11]=*(((char*)&data2)+1);		
0007e4  f89d0019          LDRB     r0,[sp,#0x19]
0007e8  f88d000f          STRB     r0,[sp,#0xf]
;;;644    	temp_out[12]=*(((char*)&data2)+2);	
0007ec  f89d001a          LDRB     r0,[sp,#0x1a]
0007f0  f88d0010          STRB     r0,[sp,#0x10]
;;;645    	temp_out[13]=*(((char*)&data2)+3);	
0007f4  f89d001b          LDRB     r0,[sp,#0x1b]
0007f8  f88d0011          STRB     r0,[sp,#0x11]
;;;646    	temp_out[14]=crc_87(temp_out,14);	
0007fc  f04f010e          MOV      r1,#0xe
000800  a801              ADD      r0,sp,#4
000802  f7fffffe          BL       crc_87
000806  f88d0012          STRB     r0,[sp,#0x12]
;;;647    	temp_out[15]=crc_95(temp_out,14);			
00080a  210e              MOVS     r1,#0xe
00080c  a801              ADD      r0,sp,#4
00080e  f7fffffe          BL       crc_95
000812  f88d0013          STRB     r0,[sp,#0x13]
;;;648    	uart_out_adr0(temp_out,16);
000816  2110              MOVS     r1,#0x10
000818  a801              ADD      r0,sp,#4
00081a  f7fffffe          BL       uart_out_adr0
                  |L1.2078|
;;;649    	}
;;;650    
;;;651    
;;;652    if((UIB0[0]=='w')&&(UIB0[1]=='r')&&(UIB0[2]=='i')&&(UIB0[3]=='t')&&(UIB0[4]=='e')&&(UIB0[15]==crc_87(UIB0,15))&&(UIB0[16]==crc_95(UIB0,15)))
00081e  7820              LDRB     r0,[r4,#0]  ; UIB0
000820  2877              CMP      r0,#0x77
000822  d17e              BNE      |L1.2338|
000824  7860              LDRB     r0,[r4,#1]  ; UIB0
000826  2872              CMP      r0,#0x72
000828  d17b              BNE      |L1.2338|
00082a  78a0              LDRB     r0,[r4,#2]  ; UIB0
00082c  2869              CMP      r0,#0x69
00082e  d178              BNE      |L1.2338|
000830  78e0              LDRB     r0,[r4,#3]  ; UIB0
000832  2874              CMP      r0,#0x74
000834  d175              BNE      |L1.2338|
000836  7920              LDRB     r0,[r4,#4]  ; UIB0
000838  2865              CMP      r0,#0x65
00083a  d172              BNE      |L1.2338|
00083c  481a              LDR      r0,|L1.2216|
00083e  210f              MOVS     r1,#0xf
000840  3864              SUBS     r0,r0,#0x64
000842  f7fffffe          BL       crc_87
000846  7be1              LDRB     r1,[r4,#0xf]  ; UIB0
000848  4288              CMP      r0,r1
00084a  d16a              BNE      |L1.2338|
00084c  4816              LDR      r0,|L1.2216|
00084e  210f              MOVS     r1,#0xf
000850  3864              SUBS     r0,r0,#0x64
000852  f7fffffe          BL       crc_95
000856  7c21              LDRB     r1,[r4,#0x10]  ; UIB0
000858  4288              CMP      r0,r1
00085a  d17a              BNE      |L1.2386|
;;;653    	{
;;;654    	unsigned short ptr;
;;;655    	unsigned long data1,data2;
;;;656    	char temp_out[20];
;;;657    	ptr=UIB0[5]+(UIB0[6]*256U);
00085c  7960              LDRB     r0,[r4,#5]  ; UIB0
00085e  79a1              LDRB     r1,[r4,#6]  ; UIB0
000860  eb002001          ADD      r0,r0,r1,LSL #8
000864  b280              UXTH     r0,r0
000866  4605              MOV      r5,r0
000868  9008              STR      r0,[sp,#0x20]
;;;658    	*((char*)&data1)=UIB0[7];
00086a  79e0              LDRB     r0,[r4,#7]  ; UIB0
00086c  f88d001c          STRB     r0,[sp,#0x1c]
;;;659    	*(((char*)&data1)+1)=UIB0[8];
000870  7a20              LDRB     r0,[r4,#8]  ; UIB0
000872  f88d001d          STRB     r0,[sp,#0x1d]
;;;660    	*(((char*)&data1)+2)=UIB0[9];
000876  7a60              LDRB     r0,[r4,#9]  ; UIB0
000878  f88d001e          STRB     r0,[sp,#0x1e]
;;;661    	*(((char*)&data1)+3)=UIB0[10];
00087c  7aa0              LDRB     r0,[r4,#0xa]  ; UIB0
00087e  f88d001f          STRB     r0,[sp,#0x1f]
;;;662    	*((char*)&data2)=UIB0[11];
000882  7ae0              LDRB     r0,[r4,#0xb]  ; UIB0
000884  f88d0018          STRB     r0,[sp,#0x18]
;;;663    	*(((char*)&data2)+1)=UIB0[12];
000888  7b20              LDRB     r0,[r4,#0xc]  ; UIB0
00088a  f88d0019          STRB     r0,[sp,#0x19]
;;;664    	*(((char*)&data2)+2)=UIB0[13];
00088e  7b60              LDRB     r0,[r4,#0xd]  ; UIB0
000890  f88d001a          STRB     r0,[sp,#0x1a]
;;;665    	*(((char*)&data2)+3)=UIB0[14];	
000894  7ba0              LDRB     r0,[r4,#0xe]  ; UIB0
000896  f88d001b          STRB     r0,[sp,#0x1b]
;;;666    	lc640_write_long(ptr,data1);
00089a  e027              B        |L1.2284|
                  |L1.2204|
                          DCD      0x4000c000
                  |L1.2208|
                          DCD      0x40010000
                  |L1.2212|
                          DCD      ||.data||
                  |L1.2216|
                          DCD      ||.bss||+0x64
                  |L1.2220|
                          DCD      plazma_bat_drv1
                  |L1.2224|
                          DCD      plazma_bat_drv0
                  |L1.2228|
                          DCD      modbus_plazma
                  |L1.2232|
                          DCD      bat_drv_rx_buff
                  |L1.2236|
                          DCD      bat_drv_rx_cnt
                  |L1.2240|
                          DCD      liBatteryInBuff+0x96
                  |L1.2244|
                          DCD      modbus_rx_buffer
                  |L1.2248|
                          DCD      modbus_rx_buffer_ptr
                  |L1.2252|
                          DCD      modbus_timeout_cnt
                  |L1.2256|
                          DCD      BAT_TYPE
                  |L1.2260|
                          DCD      sacredSunRequestPhase
                  |L1.2264|
                          DCD      sacredSunSilentCnt
                  |L1.2268|
                          DCD      numOfPacks_
                  |L1.2272|
                          DCD      NUMBAT
                  |L1.2276|
                          DCD      zTTSilentCnt
                  |L1.2280|
                          DCD      zTTRequestPhase
                  |L1.2284|
0008ec  4628              MOV      r0,r5
0008ee  9907              LDR      r1,[sp,#0x1c]
0008f0  f7fffffe          BL       lc640_write_long
;;;667    	lc640_write_long(ptr+4,data2);
0008f4  1d28              ADDS     r0,r5,#4
0008f6  9906              LDR      r1,[sp,#0x18]
0008f8  f7fffffe          BL       lc640_write_long
;;;668    	
;;;669    	//data1=lc640_read_long(ptr);
;;;670    	//data2=lc640_read_long(ptr+4);
;;;671    	temp_out[0]='w';
0008fc  f04f0077          MOV      r0,#0x77
000900  f88d0004          STRB     r0,[sp,#4]
;;;672    	temp_out[1]='r';
000904  f88d6005          STRB     r6,[sp,#5]
;;;673    	temp_out[2]='i';
000908  f04f0069          MOV      r0,#0x69
00090c  f88d0006          STRB     r0,[sp,#6]
;;;674    	temp_out[3]='t';
000910  f04f0074          MOV      r0,#0x74
000914  f88d0007          STRB     r0,[sp,#7]
;;;675    	temp_out[4]='e';
000918  f88d7008          STRB     r7,[sp,#8]
;;;676    	temp_out[5]=*((char*)&ptr);
00091c  f89d0020          LDRB     r0,[sp,#0x20]
000920  e000              B        |L1.2340|
                  |L1.2338|
000922  e016              B        |L1.2386|
                  |L1.2340|
000924  f88d0009          STRB     r0,[sp,#9]
;;;677    	temp_out[6]=*(((char*)&ptr)+1);	
000928  f89d0021          LDRB     r0,[sp,#0x21]
00092c  f88d000a          STRB     r0,[sp,#0xa]
;;;678    	/*temp_out[6]=*((char*)&data1);
;;;679    	temp_out[7]=*(((char*)&data1)+1);		
;;;680    	temp_out[8]=*(((char*)&data1)+2);	
;;;681    	temp_out[9]=*(((char*)&data1)+3);		
;;;682    	temp_out[10]=*((char*)&data2);
;;;683    	temp_out[11]=*(((char*)&data2)+1);		
;;;684    	temp_out[12]=*(((char*)&data2)+2);	
;;;685    	temp_out[13]=*(((char*)&data2)+3);	*/
;;;686    	temp_out[7]=crc_87(temp_out,7);	
000930  f04f0107          MOV      r1,#7
000934  a801              ADD      r0,sp,#4
000936  f7fffffe          BL       crc_87
00093a  f88d000b          STRB     r0,[sp,#0xb]
;;;687    	temp_out[8]=crc_95(temp_out,7);			
00093e  2107              MOVS     r1,#7
000940  a801              ADD      r0,sp,#4
000942  f7fffffe          BL       crc_95
000946  f88d000c          STRB     r0,[sp,#0xc]
;;;688    	uart_out_adr0(temp_out,9);
00094a  2109              MOVS     r1,#9
00094c  a801              ADD      r0,sp,#4
00094e  f7fffffe          BL       uart_out_adr0
                  |L1.2386|
;;;689    	}
;;;690    
;;;691    }
000952  b009              ADD      sp,sp,#0x24
000954  bdf0              POP      {r4-r7,pc}
;;;692    
                          ENDP

                  index_offset0 PROC
;;;695    //-----------------------------------------------
;;;696    signed short index_offset0 (signed short index,signed short offset)
000956  4408              ADD      r0,r0,r1
;;;697    {
;;;698    index=index+offset;
000958  b200              SXTH     r0,r0
;;;699    if(index>=RX_BUFFER_SIZE0) index-=RX_BUFFER_SIZE0; 
00095a  f5b06f80          CMP      r0,#0x400
00095e  db02              BLT      |L1.2406|
000960  f5a06080          SUB      r0,r0,#0x400
000964  b200              SXTH     r0,r0
                  |L1.2406|
;;;700    if(index<0) index+=RX_BUFFER_SIZE0;
000966  2800              CMP      r0,#0
000968  da02              BGE      |L1.2416|
00096a  f5006080          ADD      r0,r0,#0x400
00096e  b200              SXTH     r0,r0
                  |L1.2416|
;;;701    return index;
;;;702    }
000970  4770              BX       lr
;;;703    
                          ENDP

                  control_check0 PROC
;;;704    //-----------------------------------------------
;;;705    char control_check0(signed short index)
000972  b570              PUSH     {r4-r6,lr}
;;;706    {
000974  4606              MOV      r6,r0
;;;707    char i=0,ii=0,iii;
000976  f04f0200          MOV      r2,#0
;;;708    
;;;709    if(rx_buffer0[index]!=END) goto error_cc;
00097a  4d3f              LDR      r5,|L1.2680|
00097c  5da8              LDRB     r0,[r5,r6]
00097e  280a              CMP      r0,#0xa
000980  d11e              BNE      |L1.2496|
;;;710    
;;;711    ii=rx_buffer0[index_offset0(index,-2)];
000982  1e91              SUBS     r1,r2,#2
000984  4630              MOV      r0,r6
000986  f7fffffe          BL       index_offset0
00098a  5c2c              LDRB     r4,[r5,r0]
;;;712    iii=0;
00098c  f04f0300          MOV      r3,#0
;;;713    for(i=0;i<=ii;i++)
000990  e00a              B        |L1.2472|
                  |L1.2450|
;;;714    	{
;;;715    	iii^=rx_buffer0[index_offset0(index,-2-ii+i)];
000992  1b11              SUBS     r1,r2,r4
000994  1e89              SUBS     r1,r1,#2
000996  4630              MOV      r0,r6
000998  f7fffffe          BL       index_offset0
00099c  5c28              LDRB     r0,[r5,r0]
00099e  ea800303          EOR      r3,r0,r3
0009a2  f1020201          ADD      r2,r2,#1              ;713
0009a6  b2d2              UXTB     r2,r2                 ;713
                  |L1.2472|
0009a8  42a2              CMP      r2,r4                 ;713
0009aa  d9f2              BLS      |L1.2450|
;;;716    	}
;;;717    if (iii!=rx_buffer0[index_offset0(index,-1)]) goto error_cc;	
0009ac  f04f31ff          MOV      r1,#0xffffffff
0009b0  4630              MOV      r0,r6
0009b2  f7fffffe          BL       index_offset0
0009b6  5c28              LDRB     r0,[r5,r0]
0009b8  4298              CMP      r0,r3
0009ba  d101              BNE      |L1.2496|
;;;718    
;;;719    
;;;720    //success_cc:
;;;721    return 1;
0009bc  2001              MOVS     r0,#1
;;;722    error_cc:
;;;723    return 0;
;;;724    
;;;725    }
0009be  bd70              POP      {r4-r6,pc}
                  |L1.2496|
0009c0  2000              MOVS     r0,#0                 ;723
0009c2  bd70              POP      {r4-r6,pc}
;;;726    
                          ENDP

                  uart_in0 PROC
;;;727    //-----------------------------------------------
;;;728    void uart_in0(void)
0009c4  e92d41f0          PUSH     {r4-r8,lr}
;;;729    {
;;;730    char temp,i/*,count*/;
;;;731    
;;;732    //__disable_irq();
;;;733    
;;;734    if(rx_buffer_overflow0)
0009c8  4d2c              LDR      r5,|L1.2684|
0009ca  2600              MOVS     r6,#0
0009cc  78a8              LDRB     r0,[r5,#2]  ; rx_buffer_overflow0
0009ce  b118              CBZ      r0,|L1.2520|
;;;735    	{
;;;736    	rx_wr_index0=0;
0009d0  80ae              STRH     r6,[r5,#4]
;;;737    	rx_rd_index0=0;
0009d2  80ee              STRH     r6,[r5,#6]
;;;738    	rx_counter0=0;
0009d4  812e              STRH     r6,[r5,#8]
;;;739    	rx_buffer_overflow0=0;
0009d6  70ae              STRB     r6,[r5,#2]
                  |L1.2520|
;;;740    	}    
;;;741    	
;;;742    if(rx_counter0&&(rx_buffer0[index_offset0(rx_wr_index0,-1)])==END)
0009d8  8928              LDRH     r0,[r5,#8]  ; rx_counter0
0009da  2800              CMP      r0,#0
0009dc  d03a              BEQ      |L1.2644|
0009de  88a8              LDRH     r0,[r5,#4]  ; rx_wr_index0
0009e0  f04f32ff          MOV      r2,#0xffffffff
0009e4  4611              MOV      r1,r2
0009e6  b200              SXTH     r0,r0
0009e8  f7fffffe          BL       index_offset0
0009ec  4f22              LDR      r7,|L1.2680|
0009ee  5c38              LDRB     r0,[r7,r0]
0009f0  280a              CMP      r0,#0xa
0009f2  d12f              BNE      |L1.2644|
;;;743    	{
;;;744    	
;;;745         temp=rx_buffer0[index_offset0(rx_wr_index0,-3)];
0009f4  88a8              LDRH     r0,[r5,#4]  ; rx_wr_index0
0009f6  f06f0102          MVN      r1,#2
0009fa  b200              SXTH     r0,r0
0009fc  f7fffffe          BL       index_offset0
000a00  5c3c              LDRB     r4,[r7,r0]
;;;746        	if(temp<100) 
000a02  2c64              CMP      r4,#0x64
000a04  d226              BCS      |L1.2644|
;;;747        		{
;;;748        		if(control_check0(index_offset0(rx_wr_index0,-1)))
000a06  88a8              LDRH     r0,[r5,#4]  ; rx_wr_index0
000a08  4611              MOV      r1,r2
000a0a  b200              SXTH     r0,r0
000a0c  f7fffffe          BL       index_offset0
000a10  f7fffffe          BL       control_check0
000a14  2800              CMP      r0,#0
000a16  d01d              BEQ      |L1.2644|
;;;749        			{
;;;750        		
;;;751        			rx_rd_index0=index_offset0(rx_wr_index0,-3-temp);
000a18  1ce0              ADDS     r0,r4,#3
000a1a  4241              RSBS     r1,r0,#0
000a1c  88a8              LDRH     r0,[r5,#4]  ; rx_wr_index0
000a1e  b200              SXTH     r0,r0
000a20  f7fffffe          BL       index_offset0
000a24  80e8              STRH     r0,[r5,#6]
;;;752        			for(i=0;i<temp;i++)
000a26  f04f0200          MOV      r2,#0
;;;753    				{
;;;754    				UIB0[i]=rx_buffer0[index_offset0(rx_rd_index0,i)];
000a2a  f1a70364          SUB      r3,r7,#0x64
000a2e  e009              B        |L1.2628|
                  |L1.2608|
000a30  88e8              LDRH     r0,[r5,#6]  ; rx_rd_index0
000a32  4611              MOV      r1,r2
000a34  b200              SXTH     r0,r0
000a36  f7fffffe          BL       index_offset0
000a3a  5c38              LDRB     r0,[r7,r0]
000a3c  5498              STRB     r0,[r3,r2]
000a3e  f1020201          ADD      r2,r2,#1              ;752
000a42  b2d2              UXTB     r2,r2                 ;752
                  |L1.2628|
000a44  42a2              CMP      r2,r4                 ;752
000a46  d3f3              BCC      |L1.2608|
;;;755    				} 
;;;756    			rx_rd_index0=rx_wr_index0;
000a48  88a8              LDRH     r0,[r5,#4]  ; rx_wr_index0
000a4a  80e8              STRH     r0,[r5,#6]
;;;757    			rx_counter0=0;
000a4c  812e              STRH     r6,[r5,#8]
;;;758    			
;;;759    			uart_in_an0();
000a4e  e8bd41f0          POP      {r4-r8,lr}
000a52  e7fe              B        uart_in_an0
                  |L1.2644|
;;;760        			}
;;;761     	
;;;762        		} 
;;;763        	}	
;;;764    
;;;765    
;;;766    //__enable_irq();     
;;;767    }   	
000a54  e8bd81f0          POP      {r4-r8,pc}
                          ENDP

                  NVIC_EnableIRQ PROC
;;;927     */
;;;928    static __INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
000a58  f000021f          AND      r2,r0,#0x1f
;;;929    {
;;;930      NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
000a5c  f04f0101          MOV      r1,#1
000a60  fa01f102          LSL      r1,r1,r2
000a64  ea4f1050          LSR      r0,r0,#5
000a68  f04f22e0          MOV      r2,#0xe000e000
000a6c  eb020080          ADD      r0,r2,r0,LSL #2
000a70  f8c01100          STR      r1,[r0,#0x100]
;;;931    }
000a74  4770              BX       lr
;;;932    
                          ENDP

000a76  0000              DCW      0x0000
                  |L1.2680|
                          DCD      ||.bss||+0x64
                  |L1.2684|
                          DCD      ||.data||

                          AREA ||.bss||, DATA, NOINIT, ALIGN=0

                  UIB0
                          %        100
                  rx_buffer0
                          %        1024
                  tx_buffer0
                          %        1024

                          AREA ||area_number.4||, DATA, NOINIT, ALIGN=0

                          EXPORTAS ||area_number.4||, ||.bss||
                  memo_out
                          %        50

                          AREA ||area_number.5||, DATA, NOINIT, ALIGN=0

                          EXPORTAS ||area_number.5||, ||.bss||
                  data_rs
                          %        50

                          AREA ||area_number.6||, DATA, NOINIT, ALIGN=0

                          EXPORTAS ||area_number.6||, ||.bss||
                  data_rs0
                          %        50

                          AREA ||area_number.7||, DATA, NOINIT, ALIGN=1

                          EXPORTAS ||area_number.7||, ||.bss||
                  rs232_data_out_buff
                          %        60

                          AREA ||.data||, DATA, ALIGN=2

                  UART0TxEmpty
000000  01                DCB      0x01
                  bRXIN0
000001  00                DCB      0x00
                  rx_buffer_overflow0
000002  00                DCB      0x00
                  plazma_uart0
000003  00                DCB      0x00
                  rx_wr_index0
000004  0000              DCB      0x00,0x00
                  rx_rd_index0
000006  0000              DCB      0x00,0x00
                  rx_counter0
000008  0000              DCB      0x00,0x00
                  tx_wr_index0
00000a  0000              DCB      0x00,0x00
                  tx_rd_index0
00000c  0000              DCB      0x00,0x00
                  tx_counter0
00000e  0000              DCB      0x00,0x00
                  UART0Status
                          DCD      0x00000000

                          AREA ||area_number.10||, DATA, ALIGN=2

                          EXPORTAS ||area_number.10||, ||.data||
                  UART0Count
                          DCD      0x00000000

                          AREA ||area_number.11||, DATA, ALIGN=0

                          EXPORTAS ||area_number.11||, ||.data||
                  flag0
000000  00                DCB      0x00

;*** Start embedded assembler ***

#line 1 "uart0.c"
	AREA ||.emb_text||, CODE, READONLY
	THUMB
	EXPORT |__asm___7_uart0_c_UIB0____REV16|
#line 112 "C:\\Keil\\ARM\\CMSIS\\Include\\core_cmInstr.h"
|__asm___7_uart0_c_UIB0____REV16| PROC
#line 113

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.emb_text||, CODE, READONLY
	THUMB
	EXPORT |__asm___7_uart0_c_UIB0____REVSH|
#line 130
|__asm___7_uart0_c_UIB0____REVSH| PROC
#line 131

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
