; generated by ARM C/C++ Compiler, 4.1 [Build 644]
; commandline ArmCC [--list --debug -c --asm --interleave -o.\EXE\control.o --asm_dir=.\ --list_dir=.\ --depend=.\EXE\control.d --feedback=.\EXE\UKU_220_IPS_TERMOKOMPENSAT.fed --cpu=Cortex-M3 --apcs=interwork -O1 -IC:\Keil\ARM\CMSIS\Include -IC:\Keil\ARM\INC\NXP\LPC17xx -D__MICROLIB -DUKU_220_IPS_TERMOKOMPENSAT -DUKU2071x -DUKU_ZVU --omf_browse=.\EXE\control.crf control.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  bat_flag PROC
;;;306    // заполнение флагов для АКБ
;;;307    void bat_flag (void)
000000  e92d5ff0          PUSH     {r4-r12,lr}
;;;308    {  
;;;309    if(spc_stat!=spcVZ) 
000004  4efc              LDR      r6,|L1.1016|
;;;310    	{
;;;311    	vz_error=0;
000006  2700              MOVS     r7,#0
000008  f8960023          LDRB     r0,[r6,#0x23]         ;309  ; spc_stat
00000c  2802              CMP      r0,#2                 ;309
00000e  d003              BEQ      |L1.24|
000010  7077              STRB     r7,[r6,#1]
;;;312    	sp_ch_error=0;
000012  70b7              STRB     r7,[r6,#2]
;;;313    	vz1_error=0;
000014  70f7              STRB     r7,[r6,#3]
;;;314    	vz2_error=0;
000016  7137              STRB     r7,[r6,#4]
                  |L1.24|
;;;315    	}
;;;316    
;;;317    if(!snmp_bat_status[0])	 			//Батарея №1
000018  f8dfa3e0          LDR      r10,|L1.1020|
;;;318    	{
;;;319    	if((bat[0]._Ub<(USIGN*10)))		//Снижение напряжения батареи ниже Uбсигн 
00001c  f8dfb3e0          LDR      r11,|L1.1024|
000020  f8df83e0          LDR      r8,|L1.1028|
000024  f8ba0000          LDRH     r0,[r10,#0]           ;317  ; snmp_bat_status
;;;320    		{
;;;321    		snmp_bat_flag[0]|=0x0001; 
;;;322    		if((snmp_bat_flag_puts[0]&0x0001)==0) 
;;;323    			{
;;;324    			snmp_trap_send("BAT #1 Alarm, battery is low",5,8,0); 
;;;325    			snmp_bat_flag_puts[0]|=0x0001;
;;;326    			}
;;;327    		}
;;;328    	else 
;;;329    		{
;;;330    		snmp_bat_flag[0]&=~0x0001; 
;;;331    		if(snmp_bat_flag_puts[0]&0x0001) 
;;;332    			{
;;;333    			snmp_trap_send("BAT #1 Alarm clear, battery is not low",5,8,1);
;;;334    			snmp_bat_flag_puts[0]&=~0x0001;
;;;335    			}
;;;336    		}
;;;337    
;;;338    	if(bat[0]._temper_stat&0x01)	//Повышенная температура батареи, первый порог - предупреждение
;;;339    		{
;;;340    		snmp_bat_flag[0]|=0x0002;
;;;341    		if((snmp_bat_flag_puts[0]&0x0002)==0) 
;;;342    			{
;;;343    			snmp_trap_send("BAT #1 Warning, high battery temperature",5,8,2); 
;;;344    			snmp_bat_flag_puts[0]|=0x0002;
;;;345    			}
;;;346    		}
;;;347    	else 
;;;348    		{
;;;349    		snmp_bat_flag[0]&=~0x0002;
;;;350    		if(snmp_bat_flag_puts[0]&0x0002) 
;;;351    			{
;;;352    			snmp_trap_send("BAT #1 Warning clear, battery temperature is normal",5,8,3);
;;;353    			snmp_bat_flag_puts[0]&=~0x02;
;;;354    			}
;;;355    		}
;;;356    
;;;357    	if(bat[0]._temper_stat&0x02)  	//Повышенная температура батареи, второй порог - авария
;;;358    		{
;;;359    		snmp_bat_flag[0]|=0x0004;
;;;360    		if((snmp_bat_flag_puts[0]&0x0004)==0) 
;;;361    			{
;;;362    			snmp_trap_send("BAT #1 Alarm, high battery temperature",5,8,4); 
;;;363    			snmp_bat_flag_puts[0]|=0x0004;
;;;364    			}
;;;365    		}
;;;366    	else 
;;;367    		{
;;;368    		snmp_bat_flag[0]&=~0x0004;
;;;369    		if(snmp_bat_flag_puts[0]&0x0004) 
;;;370    			{
;;;371    			snmp_trap_send("BAT #1 Alarm clear, battery temperature is normal",5,8,5);
;;;372    			snmp_bat_flag_puts[0]&=~0x0004;
;;;373    			}
;;;374    		}
;;;375    
;;;376    	if(bat[0]._Ib<(-IKB)) snmp_bat_flag[0]|=0x0008;		//Разряд батареи
000028  f8df93dc          LDR      r9,|L1.1032|
00002c  4cf7              LDR      r4,|L1.1036|
00002e  4df8              LDR      r5,|L1.1040|
000030  b148              CBZ      r0,|L1.70|
;;;377    	else if(bat[0]._Ib>IKB) snmp_bat_flag[0]&=~0x0008;	//Заряд батареи
;;;378    
;;;379    	if((spc_stat==spcKE)&&(spc_bat==0))					//Контроль емкости батареи №1 
;;;380    		{
;;;381    		snmp_bat_flag[0]|=0x0010;
;;;382    		if((snmp_bat_flag_puts[0]&0x0010)==0) 
;;;383    			{
;;;384    			snmp_trap_send("BAT #1, capacity test started",5,8,6); 
;;;385    			snmp_bat_flag_puts[0]|=0x0010;
;;;386    			}
;;;387    		}
;;;388    	else 
;;;389    		{
;;;390    		snmp_bat_flag[0]&=~0x0010;
;;;391    		if(snmp_bat_flag_puts[0]&0x0010) 
;;;392    			{
;;;393    			snmp_trap_send("BAT #1, capacity test stopped",5,8,7);
;;;394    			snmp_bat_flag_puts[0]&=~0x0010;
;;;395    			}
;;;396    		}
;;;397    		
;;;398    	if(spc_stat==spcVZ)									//Выравнивающий заряд 
;;;399    		{
;;;400    		snmp_bat_flag[0]|=0x0020;
;;;401    		if((snmp_bat_flag_puts[0]&0x0020)==0) 
;;;402    			{
;;;403    			snmp_trap_send("BAT #1,leveling charge is started",5,8,8); 
;;;404    			snmp_bat_flag_puts[0]|=0x0020;
;;;405    			}
;;;406    		}
;;;407    	else 
;;;408    		{
;;;409    		snmp_bat_flag[0]&=~0x0020;
;;;410    		if(snmp_bat_flag_puts[0]&0x0020) 
;;;411    			{
;;;412    			snmp_trap_send("BAT #1,leveling charge is stopped",5,8,9);
;;;413    			snmp_bat_flag_puts[0]&=~0x0020;
;;;414    			}
;;;415    		}
;;;416    
;;;417    	if(vz_error)										 //Выравнивающий заряд заблокирован по вентиляции
;;;418    		{
;;;419    		snmp_bat_flag[0]|=0x0040;
;;;420    		if((snmp_bat_flag_puts[0]&0x0040)==0) 
;;;421    			{
;;;422    			snmp_trap_send("BAT #1,leveling charge is blocked",5,8,10); 
;;;423    			snmp_bat_flag_puts[0]|=0x0040;
;;;424    			}
;;;425    		}
;;;426    	else 
;;;427    		{
;;;428    		snmp_bat_flag[0]&=~0x0040;
;;;429    		if(snmp_bat_flag_puts[0]&0x0040) 
;;;430    			{
;;;431    			snmp_trap_send("BAT #1,leveling charge is unblocked",5,8,11);
;;;432    			snmp_bat_flag_puts[0]&=~0x0040;
;;;433    			} 
;;;434    		}
;;;435    
;;;436    	if(sp_ch_stat==scsWRK) 								//Ускореннный заряд
;;;437    		{
;;;438    		snmp_bat_flag[0]|=0x0080;
;;;439    		if((snmp_bat_flag_puts[0]&0x0080)==0) 
;;;440    			{
;;;441    			snmp_trap_send("BAT #1,speed charge is started",5,8,10); 
;;;442    			snmp_bat_flag_puts[0]|=0x0080;
;;;443    			}
;;;444    		}
;;;445    	else 
;;;446    		{
;;;447    		snmp_bat_flag[0]&=~0x0080;
;;;448    		if(snmp_bat_flag_puts[0]&0x0080) 
;;;449    			{
;;;450    			snmp_trap_send("BAT #1,speed charge is stopped",5,8,11);
;;;451    			snmp_bat_flag_puts[0]&=~0x0080;
;;;452    			}
;;;453    		}
;;;454    
;;;455    	if(sp_ch_error) 									//Ускореннный заряд заблокирован по вентиляции
;;;456    		{
;;;457    		snmp_bat_flag[0]|=0x0100;
;;;458    		if((snmp_bat_flag_puts[0]&0x0100)==0) 
;;;459    			{
;;;460    			snmp_trap_send("BAT #1,speed charge is blocked",5,8,12); 
;;;461    			snmp_bat_flag_puts[0]|=0x0100;
;;;462    			}
;;;463    		}
;;;464    	else 
;;;465    		{
;;;466    		snmp_bat_flag[0]&=~0x0100;
;;;467    		if(snmp_bat_flag_puts[0]&0x0100) 
;;;468    			{
;;;469    			snmp_trap_send("BAT #1,speed charge is unblocked",5,8,13);
;;;470    			snmp_bat_flag_puts[0]&=~0x0100;
;;;471    			} 
;;;472    		}
;;;473    
;;;474    	if(vz1_stat!=vz1sOFF)								//Уравнительный заряд 
;;;475    		{
;;;476    		snmp_bat_flag[0]|=0x0200;
;;;477    		if((snmp_bat_flag_puts[0]&0x0200)==0) 
;;;478    			{
;;;479    			snmp_trap_send("BAT #1,equalising charge is on",5,8,14); 
;;;480    			snmp_bat_flag_puts[0]|=0x0200;
;;;481    			}
;;;482    		}
;;;483    	else 
;;;484    		{
;;;485    		snmp_bat_flag[0]&=~0x0200;
;;;486    		if(snmp_bat_flag_puts[0]&0x0200) 
;;;487    			{
;;;488    			snmp_trap_send("BAT #1,equalising charge is off",5,8,15);
;;;489    			snmp_bat_flag_puts[0]&=~0x0200;
;;;490    			}
;;;491    		}
;;;492    
;;;493    	if(vz1_error)										//Уравнительный заряд заблокирован по вентиляции 
;;;494    		{
;;;495    		snmp_bat_flag[0]|=0x0400;
;;;496    		if((snmp_bat_flag_puts[0]&0x0400)==0) 
;;;497    			{
;;;498    			snmp_trap_send("BAT #1,equalising charge is blocked",5,8,16); 
;;;499    			snmp_bat_flag_puts[0]|=0x0400;
;;;500    			}
;;;501    		}
;;;502    	else 
;;;503    		{
;;;504    		snmp_bat_flag[0]&=~0x0400;
;;;505    		if(snmp_bat_flag_puts[0]&0x0400) 
;;;506    			{
;;;507    			snmp_trap_send("BAT #1,equalising charge is unblocked",5,8,17);
;;;508    			snmp_bat_flag_puts[0]&=~0x0400;
;;;509    			} 
;;;510    		}
;;;511    
;;;512    	if(vz2_stat!=vz2sOFF)								//Формовочный заряд 
;;;513    		{
;;;514    		snmp_bat_flag[0]|=0x0800;
;;;515    		if((snmp_bat_flag_puts[0]&0x0800)==0) 
;;;516    			{
;;;517    			snmp_trap_send("BAT #1,molding charge is on",5,8,18); 
;;;518    			snmp_bat_flag_puts[0]|=0x0800;
;;;519    			}
;;;520    		}
;;;521    	else 
;;;522    		{
;;;523    		snmp_bat_flag[0]&=~0x0800;
;;;524    		if(snmp_bat_flag_puts[0]&0x0800) 
;;;525    			{
;;;526    			snmp_trap_send("BAT #1,molding charge is off",5,8,19);
;;;527    			snmp_bat_flag_puts[0]&=~0x0800;
;;;528    			}
;;;529    		}
;;;530    
;;;531    	if(vz2_error) 										//Формовочный заряд заблокирован по вентиляции
;;;532    		{
;;;533    		snmp_bat_flag[0]|=0x1000;
;;;534    		if((snmp_bat_flag_puts[0]&0x1000)==0) 
;;;535    			{
;;;536    			snmp_trap_send("BAT #1,molding charge is blocked",5,8,20); 
;;;537    			snmp_bat_flag_puts[0]|=0x1000;
;;;538    			}
;;;539    		}
;;;540    	else 
;;;541    		{
;;;542    		snmp_bat_flag[0]&=~0x1000;
;;;543    		if(snmp_bat_flag_puts[0]&0x1000) 
;;;544    			{
;;;545    			snmp_trap_send("BAT #1,molding charge is unblocked",5,8,21);
;;;546    			snmp_bat_flag_puts[0]&=~0x1000;
;;;547    			} 
;;;548    		}
;;;549    	}
;;;550    else 
;;;551    	{
;;;552    	snmp_bat_flag[0]=0; 
000032  8027              STRH     r7,[r4,#0]
;;;553    	snmp_bat_flag_puts[0]=0;
000034  802f              STRH     r7,[r5,#0]
                  |L1.54|
;;;554    	}
;;;555    
;;;556    if(!snmp_bat_status[1])	 			//Батарея №2
000036  f8ba0002          LDRH     r0,[r10,#2]  ; snmp_bat_status
00003a  2800              CMP      r0,#0
00003c  d07d              BEQ      |L1.314|
;;;557    	{
;;;558    	if((bat[1]._Ub<(USIGN*10)))		//Снижение напряжения батареи ниже Uбсигн 
;;;559    		{
;;;560    		snmp_bat_flag[1]|=0x0001; 
;;;561    		if((snmp_bat_flag_puts[1]&0x0001)==0) 
;;;562    			{
;;;563    			snmp_trap_send("BAT #2 Alarm, battery is low",5,8,22); 
;;;564    			snmp_bat_flag_puts[1]|=0x0001;
;;;565    			}
;;;566    		}
;;;567    	else 
;;;568    		{
;;;569    		snmp_bat_flag[1]&=~0x0001; 
;;;570    		if(snmp_bat_flag_puts[1]&0x0001) 
;;;571    			{
;;;572    			snmp_trap_send("BAT #2 Alarm clear, battery is not low",5,8,23);
;;;573    			snmp_bat_flag_puts[1]&=~0x0001;
;;;574    			}
;;;575    		}
;;;576    
;;;577    	if(bat[1]._temper_stat&0x01)	//Повышенная температура батареи, первый порог - предупреждение
;;;578    		{
;;;579    		snmp_bat_flag[1]|=0x0002;
;;;580    		if((snmp_bat_flag_puts[0]&0x0002)==0) 
;;;581    			{
;;;582    			snmp_trap_send("BAT #2 Warning, high battery temperature",5,8,24); 
;;;583    			snmp_bat_flag_puts[1]|=0x0002;
;;;584    			}
;;;585    		}
;;;586    	else 
;;;587    		{
;;;588    		snmp_bat_flag[1]&=~0x0002;
;;;589    		if(snmp_bat_flag_puts[1]&0x0002) 
;;;590    			{
;;;591    			snmp_trap_send("BAT #2 Warning clear, battery temperature is normal",5,8,25);
;;;592    			snmp_bat_flag_puts[1]&=~0x02;
;;;593    			}
;;;594    		}
;;;595    
;;;596    	if(bat[1]._temper_stat&0x02)  	//Повышенная температура батареи, второй порог - авария
;;;597    		{
;;;598    		snmp_bat_flag[1]|=0x0004;
;;;599    		if((snmp_bat_flag_puts[1]&0x0004)==0) 
;;;600    			{
;;;601    			snmp_trap_send("BAT #2 Alarm, high battery temperature",5,8,26); 
;;;602    			snmp_bat_flag_puts[1]|=0x0004;
;;;603    			}
;;;604    		}
;;;605    	else 
;;;606    		{
;;;607    		snmp_bat_flag[1]&=~0x0004;
;;;608    		if(snmp_bat_flag_puts[1]&0x0004) 
;;;609    			{
;;;610    			snmp_trap_send("BAT #2 Alarm clear, battery temperature is normal",5,8,27);
;;;611    			snmp_bat_flag_puts[1]&=~0x0004;
;;;612    			}
;;;613    		}
;;;614    
;;;615    	if(bat[1]._Ib<(-IKB)) snmp_bat_flag[1]|=0x0008;		//Разряд батареи
;;;616    	else if(bat[1]._Ib>IKB) snmp_bat_flag[1]&=~0x0008;	//Заряд батареи
;;;617    
;;;618    	if((spc_stat==spcKE)&&(spc_bat==0))					//Контроль емкости батареи №1 
;;;619    		{
;;;620    		snmp_bat_flag[1]|=0x0010;
;;;621    		if((snmp_bat_flag_puts[1]&0x0010)==0) 
;;;622    			{
;;;623    			snmp_trap_send("BAT #2, capacity test started",5,8,28); 
;;;624    			snmp_bat_flag_puts[1]|=0x0010;
;;;625    			}
;;;626    		}
;;;627    	else 
;;;628    		{
;;;629    		snmp_bat_flag[1]&=~0x0010;
;;;630    		if(snmp_bat_flag_puts[1]&0x0010) 
;;;631    			{
;;;632    			snmp_trap_send("BAT #2, capacity test stopped",5,8,29);
;;;633    			snmp_bat_flag_puts[1]&=~0x0010;
;;;634    			}
;;;635    		}
;;;636    		
;;;637    	if(spc_stat==spcVZ)									//Выравнивающий заряд 
;;;638    		{
;;;639    		snmp_bat_flag[1]|=0x0020;
;;;640    		if((snmp_bat_flag_puts[1]&0x0020)==0) 
;;;641    			{
;;;642    			snmp_trap_send("BAT #2,leveling charge is started",5,8,30); 
;;;643    			snmp_bat_flag_puts[1]|=0x0020;
;;;644    			}
;;;645    		}
;;;646    	else 
;;;647    		{
;;;648    		snmp_bat_flag[1]&=~0x0020;
;;;649    		if(snmp_bat_flag_puts[1]&0x0020) 
;;;650    			{
;;;651    			snmp_trap_send("BAT #2,leveling charge is stopped",5,8,31);
;;;652    			snmp_bat_flag_puts[1]&=~0x0020;
;;;653    			}
;;;654    		}
;;;655    
;;;656    	if(vz_error)										 //Выравнивающий заряд заблокирован по вентиляции
;;;657    		{
;;;658    		snmp_bat_flag[1]|=0x0040;
;;;659    		if((snmp_bat_flag_puts[1]&0x0040)==0) 
;;;660    			{
;;;661    			snmp_trap_send("BAT #2,leveling charge is blocked",5,8,32); 
;;;662    			snmp_bat_flag_puts[1]|=0x0040;
;;;663    			}
;;;664    		}
;;;665    	else 
;;;666    		{
;;;667    		snmp_bat_flag[1]&=~0x0040;
;;;668    		if(snmp_bat_flag_puts[1]&0x0040) 
;;;669    			{
;;;670    			snmp_trap_send("BAT #2,leveling charge is unblocked",5,8,33);
;;;671    			snmp_bat_flag_puts[1]&=~0x0040;
;;;672    			} 
;;;673    		}
;;;674    
;;;675    	if(sp_ch_stat==scsWRK) 								//Ускореннный заряд
;;;676    		{
;;;677    		snmp_bat_flag[1]|=0x0080;
;;;678    		if((snmp_bat_flag_puts[1]&0x0080)==0) 
;;;679    			{
;;;680    			snmp_trap_send("BAT #2,speed charge is started",5,8,34); 
;;;681    			snmp_bat_flag_puts[1]|=0x0080;
;;;682    			}
;;;683    		}
;;;684    	else 
;;;685    		{
;;;686    		snmp_bat_flag[1]&=~0x0080;
;;;687    		if(snmp_bat_flag_puts[1]&0x0080) 
;;;688    			{
;;;689    			snmp_trap_send("BAT #2,speed charge is stopped",5,8,35);
;;;690    			snmp_bat_flag_puts[1]&=~0x0080;
;;;691    			}
;;;692    		}
;;;693    
;;;694    	if(sp_ch_error) 									//Ускореннный заряд заблокирован по вентиляции
;;;695    		{
;;;696    		snmp_bat_flag[1]|=0x0100;
;;;697    		if((snmp_bat_flag_puts[1]&0x0100)==0) 
;;;698    			{
;;;699    			snmp_trap_send("BAT #2,speed charge is blocked",5,8,36); 
;;;700    			snmp_bat_flag_puts[1]|=0x0100;
;;;701    			}
;;;702    		}
;;;703    	else 
;;;704    		{
;;;705    		snmp_bat_flag[1]&=~0x0100;
;;;706    		if(snmp_bat_flag_puts[1]&0x0100) 
;;;707    			{
;;;708    			snmp_trap_send("BAT #2,speed charge is unblocked",5,8,37);
;;;709    			snmp_bat_flag_puts[1]&=~0x0100;
;;;710    			} 
;;;711    		}
;;;712    
;;;713    	if(vz1_stat!=vz1sOFF)								//Уравнительный заряд 
;;;714    		{
;;;715    		snmp_bat_flag[1]|=0x0200;
;;;716    		if((snmp_bat_flag_puts[1]&0x0200)==0) 
;;;717    			{
;;;718    			snmp_trap_send("BAT #2,equalising charge is on",5,8,38); 
;;;719    			snmp_bat_flag_puts[1]|=0x0200;
;;;720    			}
;;;721    		}
;;;722    	else 
;;;723    		{
;;;724    		snmp_bat_flag[1]&=~0x0200;
;;;725    		if(snmp_bat_flag_puts[1]&0x0200) 
;;;726    			{
;;;727    			snmp_trap_send("BAT #2,equalising charge is off",5,8,39);
;;;728    			snmp_bat_flag_puts[1]&=~0x0200;
;;;729    			}
;;;730    		}
;;;731    
;;;732    	if(vz1_error)										//Уравнительный заряд заблокирован по вентиляции 
;;;733    		{
;;;734    		snmp_bat_flag[1]|=0x0400;
;;;735    		if((snmp_bat_flag_puts[1]&0x0400)==0) 
;;;736    			{
;;;737    			snmp_trap_send("BAT #2,equalising charge is blocked",5,8,40); 
;;;738    			snmp_bat_flag_puts[1]|=0x0400;
;;;739    			}
;;;740    		}
;;;741    	else 
;;;742    		{
;;;743    		snmp_bat_flag[1]&=~0x0400;
;;;744    		if(snmp_bat_flag_puts[1]&0x0400) 
;;;745    			{
;;;746    			snmp_trap_send("BAT #2,equalising charge is unblocked",5,8,41);
;;;747    			snmp_bat_flag_puts[1]&=~0x0400;
;;;748    			} 
;;;749    		}
;;;750    
;;;751    	if(vz2_stat!=vz2sOFF)								//Формовочный заряд 
;;;752    		{
;;;753    		snmp_bat_flag[1]|=0x0800;
;;;754    		if((snmp_bat_flag_puts[1]&0x0800)==0) 
;;;755    			{
;;;756    			snmp_trap_send("BAT #2,molding charge is on",5,8,42); 
;;;757    			snmp_bat_flag_puts[1]|=0x0800;
;;;758    			}
;;;759    		}
;;;760    	else 
;;;761    		{
;;;762    		snmp_bat_flag[1]&=~0x0800;
;;;763    		if(snmp_bat_flag_puts[1]&0x0800) 
;;;764    			{
;;;765    			snmp_trap_send("BAT #2,molding charge is off",5,8,43);
;;;766    			snmp_bat_flag_puts[1]&=~0x0800;
;;;767    			}
;;;768    		}
;;;769    
;;;770    	if(vz2_error) 										//Формовочный заряд заблокирован по вентиляции
;;;771    		{
;;;772    		snmp_bat_flag[1]|=0x1000;
;;;773    		if((snmp_bat_flag_puts[1]&0x1000)==0) 
;;;774    			{
;;;775    			snmp_trap_send("BAT #2,molding charge is blocked",5,8,44); 
;;;776    			snmp_bat_flag_puts[1]|=0x1000;
;;;777    			}
;;;778    		}
;;;779    	else 
;;;780    		{
;;;781    		snmp_bat_flag[1]&=~0x1000;
;;;782    		if(snmp_bat_flag_puts[1]&0x1000) 
;;;783    			{
;;;784    			snmp_trap_send("BAT #2,molding charge is unblocked",5,8,45);
;;;785    			snmp_bat_flag_puts[1]&=~0x1000;
;;;786    			} 
;;;787    		}
;;;788    	}
;;;789    else 
;;;790    	{
;;;791    	snmp_bat_flag[1]=0; 
00003e  8067              STRH     r7,[r4,#2]
;;;792    	snmp_bat_flag_puts[1]=0;
000040  806f              STRH     r7,[r5,#2]
                  |L1.66|
;;;793    	}
;;;794    /*
;;;795    if(!snmp_bat_status[1])
;;;796    	{
;;;797    	if((bat[1]._Ub<(USIGN*10))) 
;;;798    		{
;;;799    		snmp_bat_flag[1]|=0x01; 
;;;800    		if((snmp_bat_flag_puts[1]&0x01)==0) 
;;;801    			{
;;;802    			snmp_trap_send("BAT #2 Alarm, battery is low",5,8,0); 
;;;803    			snmp_bat_flag_puts[1]|=0x01;
;;;804    			}
;;;805    		}
;;;806    	else 
;;;807    		{
;;;808    		snmp_bat_flag[1]&=~0x01; 
;;;809    		if(snmp_bat_flag_puts[1]&0x01) 
;;;810    			{
;;;811    			snmp_trap_send("BAT #2 Alarm clear, battery is not low",5,8,1);
;;;812    			snmp_bat_flag_puts[1]&=~0x01;
;;;813    			}
;;;814    		}
;;;815    	if(bat[1]._temper_stat&0x01) 
;;;816    		{
;;;817    		snmp_bat_flag[1]|=0x02;
;;;818    		if((snmp_bat_flag_puts[1]&0x02)==0) 
;;;819    			{
;;;820    			snmp_trap_send("BAT #2 Alarm, high battery temperature",5,8,2); 
;;;821    			snmp_bat_flag_puts[1]|=0x02;
;;;822    			}
;;;823    		}
;;;824    	else 
;;;825    		{
;;;826    		snmp_bat_flag[1]&=~0x02;
;;;827    		if(snmp_bat_flag_puts[1]&0x02) 
;;;828    			{
;;;829    			snmp_trap_send("BAT #2 Alarm clear, battery temperature is normal",5,8,3);
;;;830    			snmp_bat_flag_puts[1]&=~0x02;
;;;831    			}
;;;832    		}
;;;833    	if(bat[1]._temper_stat&0x02) 
;;;834    		{
;;;835    		snmp_bat_flag[1]|=0x04;
;;;836    		if((snmp_bat_flag_puts[1]&0x04)==0) 
;;;837    			{
;;;838    			snmp_trap_send("BAT #2 Alarm, maximum battery temperature",5,8,4); 
;;;839    			snmp_bat_flag_puts[1]|=0x04;
;;;840    			}
;;;841    		}
;;;842    	else 
;;;843    		{
;;;844    		snmp_bat_flag[1]&=~0x04;
;;;845    		if(snmp_bat_flag_puts[1]&0x04) 
;;;846    			{
;;;847    			snmp_trap_send("BAT #2 Alarm clear, battery temperature is normal",5,8,5);
;;;848    			snmp_bat_flag_puts[1]&=~0x04;
;;;849    			}
;;;850    		}
;;;851    		
;;;852    	if(bat[1]._Ib<(-IKB))	snmp_bat_flag[1]|=0x80;
;;;853    	else if(bat[1]._Ib>IKB)snmp_bat_flag[1]&=~0x80;
;;;854    
;;;855    	if((spc_stat==spcKE)&&(spc_bat==1)) 
;;;856    		{
;;;857    		snmp_bat_flag[1]|=0x10;
;;;858    		if((snmp_bat_flag_puts[1]&0x10)==0) 
;;;859    			{
;;;860    			snmp_trap_send("BAT #2, capacity check enabled",5,8,6); 
;;;861    			snmp_bat_flag_puts[1]|=0x10;
;;;862    			}
;;;863    		}
;;;864    	else 
;;;865    		{
;;;866    		snmp_bat_flag[1]&=~0x10;
;;;867    		if(snmp_bat_flag_puts[1]&0x10) 
;;;868    			{
;;;869    			snmp_trap_send("BAT #2, capacity check disabled",5,8,7);
;;;870    			snmp_bat_flag_puts[1]&=~0x10;
;;;871    			}
;;;872    		}
;;;873    		
;;;874    	if(spc_stat==spcVZ) 
;;;875    		{
;;;876    		snmp_bat_flag[1]|=0x20;
;;;877    		if((snmp_bat_flag_puts[1]&0x20)==0) 
;;;878    			{
;;;879    			snmp_trap_send("BAT #2,equalizing charge is on",5,8,8); 
;;;880    			snmp_bat_flag_puts[1]|=0x20;
;;;881    			}
;;;882    		}
;;;883    	else 
;;;884    		{
;;;885    		snmp_bat_flag[1]&=~0x20;
;;;886    		if(snmp_bat_flag_puts[1]&0x20) 
;;;887    			{
;;;888    			snmp_trap_send("BAT #2,equalizing charge is off",5,8,9);
;;;889    			snmp_bat_flag_puts[1]&=~0x20;
;;;890    			}
;;;891    		}
;;;892    
;;;893    	if(vz_error) 
;;;894    		{
;;;895    		snmp_bat_flag[1]|=0x40;
;;;896    		if((snmp_bat_flag_puts[1]&0x40)==0) 
;;;897    			{
;;;898    			snmp_trap_send("BAT #2,equalizing charge blocked",5,8,10); 
;;;899    			snmp_bat_flag_puts[1]|=0x40;
;;;900    			}
;;;901    		}
;;;902    	else 
;;;903    		{
;;;904    		snmp_bat_flag[1]&=~0x40;
;;;905    		if(snmp_bat_flag_puts[1]&0x40) 
;;;906    			{
;;;907    			snmp_trap_send("BAT #2,equalizing charge is not blocked",5,8,11);
;;;908    			snmp_bat_flag_puts[1]&=~0x40;
;;;909    			} 
;;;910    		}
;;;911       }
;;;912    else 
;;;913    	{
;;;914    	snmp_bat_flag[1]=0; 
;;;915    	snmp_bat_flag_puts[1]=0;
;;;916    	} */
;;;917    }
000042  e8bd9ff0          POP      {r4-r12,pc}
                  |L1.70|
000046  f9bb0000          LDRSH    r0,[r11,#0]           ;319  ; USIGN
00004a  f9b82002          LDRSH    r2,[r8,#2]            ;319  ; bat
00004e  eb000380          ADD      r3,r0,r0,LSL #2       ;319
000052  48ee              LDR      r0,|L1.1036|
000054  ebb20f43          CMP      r2,r3,LSL #1          ;319
000058  f9b01000          LDRSH    r1,[r0,#0]            ;321
00005c  48ec              LDR      r0,|L1.1040|
00005e  f9b00000          LDRSH    r0,[r0,#0]            ;322
000062  da0f              BGE      |L1.132|
000064  f0410101          ORR      r1,r1,#1              ;321
000068  8021              STRH     r1,[r4,#0]            ;321
00006a  07c0              LSLS     r0,r0,#31             ;322
00006c  d119              BNE      |L1.162|
00006e  2300              MOVS     r3,#0                 ;324
000070  2208              MOVS     r2,#8                 ;324
000072  2105              MOVS     r1,#5                 ;324
000074  a0e7              ADR      r0,|L1.1044|
000076  f7fffffe          BL       snmp_trap_send
00007a  8828              LDRH     r0,[r5,#0]            ;325  ; snmp_bat_flag_puts
00007c  f0400001          ORR      r0,r0,#1              ;325
000080  8028              STRH     r0,[r5,#0]            ;325
000082  e00e              B        |L1.162|
                  |L1.132|
000084  f0210101          BIC      r1,r1,#1              ;330
000088  8021              STRH     r1,[r4,#0]            ;330
00008a  07c0              LSLS     r0,r0,#31             ;331
00008c  d009              BEQ      |L1.162|
00008e  2301              MOVS     r3,#1                 ;333
000090  2208              MOVS     r2,#8                 ;333
000092  2105              MOVS     r1,#5                 ;333
000094  a0e7              ADR      r0,|L1.1076|
000096  f7fffffe          BL       snmp_trap_send
00009a  8828              LDRH     r0,[r5,#0]            ;334  ; snmp_bat_flag_puts
00009c  f0200001          BIC      r0,r0,#1              ;334
0000a0  8028              STRH     r0,[r5,#0]            ;334
                  |L1.162|
0000a2  f898003f          LDRB     r0,[r8,#0x3f]         ;338  ; bat
0000a6  07c0              LSLS     r0,r0,#31             ;338
0000a8  d011              BEQ      |L1.206|
0000aa  8820              LDRH     r0,[r4,#0]            ;340  ; snmp_bat_flag
0000ac  f0400002          ORR      r0,r0,#2              ;340
0000b0  8020              STRH     r0,[r4,#0]            ;340
0000b2  8828              LDRH     r0,[r5,#0]            ;341  ; snmp_bat_flag_puts
0000b4  0780              LSLS     r0,r0,#30             ;341
0000b6  d41b              BMI      |L1.240|
0000b8  2302              MOVS     r3,#2                 ;343
0000ba  2208              MOVS     r2,#8                 ;343
0000bc  2105              MOVS     r1,#5                 ;343
0000be  a0e7              ADR      r0,|L1.1116|
0000c0  f7fffffe          BL       snmp_trap_send
0000c4  8828              LDRH     r0,[r5,#0]            ;344  ; snmp_bat_flag_puts
0000c6  f0400002          ORR      r0,r0,#2              ;344
0000ca  8028              STRH     r0,[r5,#0]            ;344
0000cc  e010              B        |L1.240|
                  |L1.206|
0000ce  8820              LDRH     r0,[r4,#0]            ;349  ; snmp_bat_flag
0000d0  f0200002          BIC      r0,r0,#2              ;349
0000d4  8020              STRH     r0,[r4,#0]            ;349
0000d6  8828              LDRH     r0,[r5,#0]            ;350  ; snmp_bat_flag_puts
0000d8  0780              LSLS     r0,r0,#30             ;350
0000da  d509              BPL      |L1.240|
0000dc  2303              MOVS     r3,#3                 ;352
0000de  2208              MOVS     r2,#8                 ;352
0000e0  2105              MOVS     r1,#5                 ;352
0000e2  a0e9              ADR      r0,|L1.1160|
0000e4  f7fffffe          BL       snmp_trap_send
0000e8  8828              LDRH     r0,[r5,#0]            ;353  ; snmp_bat_flag_puts
0000ea  f0200002          BIC      r0,r0,#2              ;353
0000ee  8028              STRH     r0,[r5,#0]            ;353
                  |L1.240|
0000f0  f898003f          LDRB     r0,[r8,#0x3f]         ;357  ; bat
0000f4  0780              LSLS     r0,r0,#30             ;357
0000f6  d511              BPL      |L1.284|
0000f8  8820              LDRH     r0,[r4,#0]            ;359  ; snmp_bat_flag
0000fa  f0400004          ORR      r0,r0,#4              ;359
0000fe  8020              STRH     r0,[r4,#0]            ;359
000100  8828              LDRH     r0,[r5,#0]            ;360  ; snmp_bat_flag_puts
000102  0740              LSLS     r0,r0,#29             ;360
000104  d41d              BMI      |L1.322|
000106  2304              MOVS     r3,#4                 ;362
000108  2208              MOVS     r2,#8                 ;362
00010a  2105              MOVS     r1,#5                 ;362
00010c  a0eb              ADR      r0,|L1.1212|
00010e  f7fffffe          BL       snmp_trap_send
000112  8828              LDRH     r0,[r5,#0]            ;363  ; snmp_bat_flag_puts
000114  f0400004          ORR      r0,r0,#4              ;363
000118  8028              STRH     r0,[r5,#0]            ;363
00011a  e012              B        |L1.322|
                  |L1.284|
00011c  8820              LDRH     r0,[r4,#0]            ;368  ; snmp_bat_flag
00011e  f0200004          BIC      r0,r0,#4              ;368
000122  8020              STRH     r0,[r4,#0]            ;368
000124  8828              LDRH     r0,[r5,#0]            ;369  ; snmp_bat_flag_puts
000126  0740              LSLS     r0,r0,#29             ;369
000128  d50b              BPL      |L1.322|
00012a  2305              MOVS     r3,#5                 ;371
00012c  2208              MOVS     r2,#8                 ;371
00012e  4619              MOV      r1,r3                 ;371
000130  a0ec              ADR      r0,|L1.1252|
000132  f7fffffe          BL       snmp_trap_send
000136  8828              LDRH     r0,[r5,#0]            ;372  ; snmp_bat_flag_puts
000138  e000              B        |L1.316|
                  |L1.314|
00013a  e322              B        |L1.1922|
                  |L1.316|
00013c  f0200004          BIC      r0,r0,#4              ;372
000140  8028              STRH     r0,[r5,#0]            ;372
                  |L1.322|
000142  f9b91000          LDRSH    r1,[r9,#0]            ;376  ; IKB
000146  f9b80008          LDRSH    r0,[r8,#8]            ;376  ; bat
00014a  424a              RSBS     r2,r1,#0              ;376
00014c  4290              CMP      r0,r2                 ;376
00014e  da04              BGE      |L1.346|
000150  8820              LDRH     r0,[r4,#0]            ;376  ; snmp_bat_flag
000152  f0400008          ORR      r0,r0,#8              ;376
000156  8020              STRH     r0,[r4,#0]            ;376
000158  e005              B        |L1.358|
                  |L1.346|
00015a  4288              CMP      r0,r1                 ;377
00015c  dd03              BLE      |L1.358|
00015e  8820              LDRH     r0,[r4,#0]            ;377  ; snmp_bat_flag
000160  f0200008          BIC      r0,r0,#8              ;377
000164  8020              STRH     r0,[r4,#0]            ;377
                  |L1.358|
000166  f8960023          LDRB     r0,[r6,#0x23]         ;379  ; spc_stat
00016a  2801              CMP      r0,#1                 ;379
00016c  d103              BNE      |L1.374|
00016e  f8960024          LDRB     r0,[r6,#0x24]         ;379  ; spc_bat
000172  2800              CMP      r0,#0                 ;379
000174  d03a              BEQ      |L1.492|
                  |L1.374|
000176  8820              LDRH     r0,[r4,#0]            ;390  ; snmp_bat_flag
000178  f0200010          BIC      r0,r0,#0x10           ;390
00017c  8020              STRH     r0,[r4,#0]            ;390
00017e  8828              LDRH     r0,[r5,#0]            ;391  ; snmp_bat_flag_puts
000180  06c0              LSLS     r0,r0,#27             ;391
000182  d509              BPL      |L1.408|
000184  2307              MOVS     r3,#7                 ;393
000186  2208              MOVS     r2,#8                 ;393
000188  2105              MOVS     r1,#5                 ;393
00018a  a0e3              ADR      r0,|L1.1304|
00018c  f7fffffe          BL       snmp_trap_send
000190  8828              LDRH     r0,[r5,#0]            ;394  ; snmp_bat_flag_puts
000192  f0200010          BIC      r0,r0,#0x10           ;394
000196  8028              STRH     r0,[r5,#0]            ;394
                  |L1.408|
000198  f8960023          LDRB     r0,[r6,#0x23]         ;398  ; spc_stat
00019c  2802              CMP      r0,#2                 ;398
00019e  d037              BEQ      |L1.528|
0001a0  8820              LDRH     r0,[r4,#0]            ;409  ; snmp_bat_flag
0001a2  f0200020          BIC      r0,r0,#0x20           ;409
0001a6  8020              STRH     r0,[r4,#0]            ;409
0001a8  8828              LDRH     r0,[r5,#0]            ;410  ; snmp_bat_flag_puts
0001aa  0680              LSLS     r0,r0,#26             ;410
0001ac  d509              BPL      |L1.450|
0001ae  2309              MOVS     r3,#9                 ;412
0001b0  2208              MOVS     r2,#8                 ;412
0001b2  2105              MOVS     r1,#5                 ;412
0001b4  a0e0              ADR      r0,|L1.1336|
0001b6  f7fffffe          BL       snmp_trap_send
0001ba  8828              LDRH     r0,[r5,#0]            ;413  ; snmp_bat_flag_puts
0001bc  f0200020          BIC      r0,r0,#0x20           ;413
0001c0  8028              STRH     r0,[r5,#0]            ;413
                  |L1.450|
0001c2  7870              LDRB     r0,[r6,#1]            ;417  ; vz_error
0001c4  2800              CMP      r0,#0                 ;417
0001c6  d035              BEQ      |L1.564|
0001c8  8820              LDRH     r0,[r4,#0]            ;419  ; snmp_bat_flag
0001ca  f0400040          ORR      r0,r0,#0x40           ;419
0001ce  8020              STRH     r0,[r4,#0]            ;419
0001d0  8828              LDRH     r0,[r5,#0]            ;420  ; snmp_bat_flag_puts
0001d2  0640              LSLS     r0,r0,#25             ;420
0001d4  d43f              BMI      |L1.598|
0001d6  230a              MOVS     r3,#0xa               ;422
0001d8  2208              MOVS     r2,#8                 ;422
0001da  2105              MOVS     r1,#5                 ;422
0001dc  a0df              ADR      r0,|L1.1372|
0001de  f7fffffe          BL       snmp_trap_send
0001e2  8828              LDRH     r0,[r5,#0]            ;423  ; snmp_bat_flag_puts
0001e4  f0400040          ORR      r0,r0,#0x40           ;423
0001e8  8028              STRH     r0,[r5,#0]            ;423
0001ea  e034              B        |L1.598|
                  |L1.492|
0001ec  8820              LDRH     r0,[r4,#0]            ;381  ; snmp_bat_flag
0001ee  f0400010          ORR      r0,r0,#0x10           ;381
0001f2  8020              STRH     r0,[r4,#0]            ;381
0001f4  8828              LDRH     r0,[r5,#0]            ;382  ; snmp_bat_flag_puts
0001f6  06c0              LSLS     r0,r0,#27             ;382
0001f8  d4ce              BMI      |L1.408|
0001fa  2306              MOVS     r3,#6                 ;384
0001fc  2208              MOVS     r2,#8                 ;384
0001fe  2105              MOVS     r1,#5                 ;384
000200  a0df              ADR      r0,|L1.1408|
000202  f7fffffe          BL       snmp_trap_send
000206  8828              LDRH     r0,[r5,#0]            ;385  ; snmp_bat_flag_puts
000208  f0400010          ORR      r0,r0,#0x10           ;385
00020c  8028              STRH     r0,[r5,#0]            ;385
00020e  e7c3              B        |L1.408|
                  |L1.528|
000210  8820              LDRH     r0,[r4,#0]            ;400  ; snmp_bat_flag
000212  f0400020          ORR      r0,r0,#0x20           ;400
000216  8020              STRH     r0,[r4,#0]            ;400
000218  8828              LDRH     r0,[r5,#0]            ;401  ; snmp_bat_flag_puts
00021a  0680              LSLS     r0,r0,#26             ;401
00021c  d4d1              BMI      |L1.450|
00021e  2308              MOVS     r3,#8                 ;403
000220  461a              MOV      r2,r3                 ;403
000222  2105              MOVS     r1,#5                 ;403
000224  a0de              ADR      r0,|L1.1440|
000226  f7fffffe          BL       snmp_trap_send
00022a  8828              LDRH     r0,[r5,#0]            ;404  ; snmp_bat_flag_puts
00022c  f0400020          ORR      r0,r0,#0x20           ;404
000230  8028              STRH     r0,[r5,#0]            ;404
000232  e7c6              B        |L1.450|
                  |L1.564|
000234  8820              LDRH     r0,[r4,#0]            ;428  ; snmp_bat_flag
000236  f0200040          BIC      r0,r0,#0x40           ;428
00023a  8020              STRH     r0,[r4,#0]            ;428
00023c  8828              LDRH     r0,[r5,#0]            ;429  ; snmp_bat_flag_puts
00023e  0640              LSLS     r0,r0,#25             ;429
000240  d509              BPL      |L1.598|
000242  230b              MOVS     r3,#0xb               ;431
000244  2208              MOVS     r2,#8                 ;431
000246  2105              MOVS     r1,#5                 ;431
000248  a0de              ADR      r0,|L1.1476|
00024a  f7fffffe          BL       snmp_trap_send
00024e  8828              LDRH     r0,[r5,#0]            ;432  ; snmp_bat_flag_puts
000250  f0200040          BIC      r0,r0,#0x40           ;432
000254  8028              STRH     r0,[r5,#0]            ;432
                  |L1.598|
000256  48e4              LDR      r0,|L1.1512|
000258  7800              LDRB     r0,[r0,#0]            ;436  ; sp_ch_stat
00025a  2802              CMP      r0,#2                 ;436
00025c  d024              BEQ      |L1.680|
00025e  8820              LDRH     r0,[r4,#0]            ;447  ; snmp_bat_flag
000260  f0200080          BIC      r0,r0,#0x80           ;447
000264  8020              STRH     r0,[r4,#0]            ;447
000266  8828              LDRH     r0,[r5,#0]            ;448  ; snmp_bat_flag_puts
000268  0600              LSLS     r0,r0,#24             ;448
00026a  d509              BPL      |L1.640|
00026c  230b              MOVS     r3,#0xb               ;450
00026e  2208              MOVS     r2,#8                 ;450
000270  2105              MOVS     r1,#5                 ;450
000272  a0de              ADR      r0,|L1.1516|
000274  f7fffffe          BL       snmp_trap_send
000278  8828              LDRH     r0,[r5,#0]            ;451  ; snmp_bat_flag_puts
00027a  f0200080          BIC      r0,r0,#0x80           ;451
00027e  8028              STRH     r0,[r5,#0]            ;451
                  |L1.640|
000280  78b0              LDRB     r0,[r6,#2]            ;455  ; sp_ch_error
000282  b318              CBZ      r0,|L1.716|
000284  8820              LDRH     r0,[r4,#0]            ;457  ; snmp_bat_flag
000286  f4407080          ORR      r0,r0,#0x100          ;457
00028a  8020              STRH     r0,[r4,#0]            ;457
00028c  8828              LDRH     r0,[r5,#0]            ;458  ; snmp_bat_flag_puts
00028e  05c0              LSLS     r0,r0,#23             ;458
000290  d42d              BMI      |L1.750|
000292  230c              MOVS     r3,#0xc               ;460
000294  2208              MOVS     r2,#8                 ;460
000296  2105              MOVS     r1,#5                 ;460
000298  a0dc              ADR      r0,|L1.1548|
00029a  f7fffffe          BL       snmp_trap_send
00029e  8828              LDRH     r0,[r5,#0]            ;461  ; snmp_bat_flag_puts
0002a0  f4407080          ORR      r0,r0,#0x100          ;461
0002a4  8028              STRH     r0,[r5,#0]            ;461
0002a6  e022              B        |L1.750|
                  |L1.680|
0002a8  8820              LDRH     r0,[r4,#0]            ;438  ; snmp_bat_flag
0002aa  f0400080          ORR      r0,r0,#0x80           ;438
0002ae  8020              STRH     r0,[r4,#0]            ;438
0002b0  8828              LDRH     r0,[r5,#0]            ;439  ; snmp_bat_flag_puts
0002b2  0600              LSLS     r0,r0,#24             ;439
0002b4  d4e4              BMI      |L1.640|
0002b6  230a              MOVS     r3,#0xa               ;441
0002b8  2208              MOVS     r2,#8                 ;441
0002ba  2105              MOVS     r1,#5                 ;441
0002bc  a0db              ADR      r0,|L1.1580|
0002be  f7fffffe          BL       snmp_trap_send
0002c2  8828              LDRH     r0,[r5,#0]            ;442  ; snmp_bat_flag_puts
0002c4  f0400080          ORR      r0,r0,#0x80           ;442
0002c8  8028              STRH     r0,[r5,#0]            ;442
0002ca  e7d9              B        |L1.640|
                  |L1.716|
0002cc  8820              LDRH     r0,[r4,#0]            ;466  ; snmp_bat_flag
0002ce  f4207080          BIC      r0,r0,#0x100          ;466
0002d2  8020              STRH     r0,[r4,#0]            ;466
0002d4  8828              LDRH     r0,[r5,#0]            ;467  ; snmp_bat_flag_puts
0002d6  05c0              LSLS     r0,r0,#23             ;467
0002d8  d509              BPL      |L1.750|
0002da  230d              MOVS     r3,#0xd               ;469
0002dc  2208              MOVS     r2,#8                 ;469
0002de  2105              MOVS     r1,#5                 ;469
0002e0  a0da              ADR      r0,|L1.1612|
0002e2  f7fffffe          BL       snmp_trap_send
0002e6  8828              LDRH     r0,[r5,#0]            ;470  ; snmp_bat_flag_puts
0002e8  f4207080          BIC      r0,r0,#0x100          ;470
0002ec  8028              STRH     r0,[r5,#0]            ;470
                  |L1.750|
0002ee  7970              LDRB     r0,[r6,#5]            ;474  ; vz1_stat
0002f0  b188              CBZ      r0,|L1.790|
0002f2  8820              LDRH     r0,[r4,#0]            ;476  ; snmp_bat_flag
0002f4  f4407000          ORR      r0,r0,#0x200          ;476
0002f8  8020              STRH     r0,[r4,#0]            ;476
0002fa  8828              LDRH     r0,[r5,#0]            ;477  ; snmp_bat_flag_puts
0002fc  0580              LSLS     r0,r0,#22             ;477
0002fe  d41b              BMI      |L1.824|
000300  230e              MOVS     r3,#0xe               ;479
000302  2208              MOVS     r2,#8                 ;479
000304  2105              MOVS     r1,#5                 ;479
000306  a0da              ADR      r0,|L1.1648|
000308  f7fffffe          BL       snmp_trap_send
00030c  8828              LDRH     r0,[r5,#0]            ;480  ; snmp_bat_flag_puts
00030e  f4407000          ORR      r0,r0,#0x200          ;480
000312  8028              STRH     r0,[r5,#0]            ;480
000314  e010              B        |L1.824|
                  |L1.790|
000316  8820              LDRH     r0,[r4,#0]            ;485  ; snmp_bat_flag
000318  f4207000          BIC      r0,r0,#0x200          ;485
00031c  8020              STRH     r0,[r4,#0]            ;485
00031e  8828              LDRH     r0,[r5,#0]            ;486  ; snmp_bat_flag_puts
000320  0580              LSLS     r0,r0,#22             ;486
000322  d509              BPL      |L1.824|
000324  230f              MOVS     r3,#0xf               ;488
000326  2208              MOVS     r2,#8                 ;488
000328  2105              MOVS     r1,#5                 ;488
00032a  a0d9              ADR      r0,|L1.1680|
00032c  f7fffffe          BL       snmp_trap_send
000330  8828              LDRH     r0,[r5,#0]            ;489  ; snmp_bat_flag_puts
000332  f4207000          BIC      r0,r0,#0x200          ;489
000336  8028              STRH     r0,[r5,#0]            ;489
                  |L1.824|
000338  78f0              LDRB     r0,[r6,#3]            ;493  ; vz1_error
00033a  b188              CBZ      r0,|L1.864|
00033c  8820              LDRH     r0,[r4,#0]            ;495  ; snmp_bat_flag
00033e  f4406080          ORR      r0,r0,#0x400          ;495
000342  8020              STRH     r0,[r4,#0]            ;495
000344  8828              LDRH     r0,[r5,#0]            ;496  ; snmp_bat_flag_puts
000346  0540              LSLS     r0,r0,#21             ;496
000348  d41b              BMI      |L1.898|
00034a  2310              MOVS     r3,#0x10              ;498
00034c  2208              MOVS     r2,#8                 ;498
00034e  2105              MOVS     r1,#5                 ;498
000350  a0d7              ADR      r0,|L1.1712|
000352  f7fffffe          BL       snmp_trap_send
000356  8828              LDRH     r0,[r5,#0]            ;499  ; snmp_bat_flag_puts
000358  f4406080          ORR      r0,r0,#0x400          ;499
00035c  8028              STRH     r0,[r5,#0]            ;499
00035e  e010              B        |L1.898|
                  |L1.864|
000360  8820              LDRH     r0,[r4,#0]            ;504  ; snmp_bat_flag
000362  f4206080          BIC      r0,r0,#0x400          ;504
000366  8020              STRH     r0,[r4,#0]            ;504
000368  8828              LDRH     r0,[r5,#0]            ;505  ; snmp_bat_flag_puts
00036a  0540              LSLS     r0,r0,#21             ;505
00036c  d509              BPL      |L1.898|
00036e  2311              MOVS     r3,#0x11              ;507
000370  2208              MOVS     r2,#8                 ;507
000372  2105              MOVS     r1,#5                 ;507
000374  a0d7              ADR      r0,|L1.1748|
000376  f7fffffe          BL       snmp_trap_send
00037a  8828              LDRH     r0,[r5,#0]            ;508  ; snmp_bat_flag_puts
00037c  f4206080          BIC      r0,r0,#0x400          ;508
000380  8028              STRH     r0,[r5,#0]            ;508
                  |L1.898|
000382  79f0              LDRB     r0,[r6,#7]            ;512  ; vz2_stat
000384  b188              CBZ      r0,|L1.938|
000386  8820              LDRH     r0,[r4,#0]            ;514  ; snmp_bat_flag
000388  f4406000          ORR      r0,r0,#0x800          ;514
00038c  8020              STRH     r0,[r4,#0]            ;514
00038e  8828              LDRH     r0,[r5,#0]            ;515  ; snmp_bat_flag_puts
000390  0500              LSLS     r0,r0,#20             ;515
000392  d41b              BMI      |L1.972|
000394  2312              MOVS     r3,#0x12              ;517
000396  2208              MOVS     r2,#8                 ;517
000398  2105              MOVS     r1,#5                 ;517
00039a  a0d8              ADR      r0,|L1.1788|
00039c  f7fffffe          BL       snmp_trap_send
0003a0  8828              LDRH     r0,[r5,#0]            ;518  ; snmp_bat_flag_puts
0003a2  f4406000          ORR      r0,r0,#0x800          ;518
0003a6  8028              STRH     r0,[r5,#0]            ;518
0003a8  e010              B        |L1.972|
                  |L1.938|
0003aa  8820              LDRH     r0,[r4,#0]            ;523  ; snmp_bat_flag
0003ac  f4206000          BIC      r0,r0,#0x800          ;523
0003b0  8020              STRH     r0,[r4,#0]            ;523
0003b2  8828              LDRH     r0,[r5,#0]            ;524  ; snmp_bat_flag_puts
0003b4  0500              LSLS     r0,r0,#20             ;524
0003b6  d509              BPL      |L1.972|
0003b8  2313              MOVS     r3,#0x13              ;526
0003ba  2208              MOVS     r2,#8                 ;526
0003bc  2105              MOVS     r1,#5                 ;526
0003be  a0d6              ADR      r0,|L1.1816|
0003c0  f7fffffe          BL       snmp_trap_send
0003c4  8828              LDRH     r0,[r5,#0]            ;527  ; snmp_bat_flag_puts
0003c6  f4206000          BIC      r0,r0,#0x800          ;527
0003ca  8028              STRH     r0,[r5,#0]            ;527
                  |L1.972|
0003cc  7930              LDRB     r0,[r6,#4]            ;531  ; vz2_error
0003ce  b190              CBZ      r0,|L1.1014|
0003d0  8820              LDRH     r0,[r4,#0]            ;533  ; snmp_bat_flag
0003d2  f4405080          ORR      r0,r0,#0x1000         ;533
0003d6  8020              STRH     r0,[r4,#0]            ;533
0003d8  8828              LDRH     r0,[r5,#0]            ;534  ; snmp_bat_flag_puts
0003da  04c0              LSLS     r0,r0,#19             ;534
0003dc  f53fae2b          BMI      |L1.54|
0003e0  2314              MOVS     r3,#0x14              ;536
0003e2  2208              MOVS     r2,#8                 ;536
0003e4  2105              MOVS     r1,#5                 ;536
0003e6  a0d4              ADR      r0,|L1.1848|
0003e8  f7fffffe          BL       snmp_trap_send
0003ec  8828              LDRH     r0,[r5,#0]            ;537  ; snmp_bat_flag_puts
0003ee  f4405080          ORR      r0,r0,#0x1000         ;537
0003f2  8028              STRH     r0,[r5,#0]            ;537
                  |L1.1012|
0003f4  e61f              B        |L1.54|
                  |L1.1014|
0003f6  e1b1              B        |L1.1884|
                  |L1.1016|
                          DCD      ||area_number.25||
                  |L1.1020|
                          DCD      snmp_bat_status
                  |L1.1024|
                          DCD      USIGN
                  |L1.1028|
                          DCD      bat
                  |L1.1032|
                          DCD      IKB
                  |L1.1036|
                          DCD      snmp_bat_flag
                  |L1.1040|
                          DCD      snmp_bat_flag_puts
                  |L1.1044|
000414  42415420          DCB      "BAT #1 Alarm, battery is low",0
000418  23312041
00041c  6c61726d
000420  2c206261
000424  74746572
000428  79206973
00042c  206c6f77
000430  00      
000431  00                DCB      0
000432  00                DCB      0
000433  00                DCB      0
                  |L1.1076|
000434  42415420          DCB      "BAT #1 Alarm clear, battery is not low",0
000438  23312041
00043c  6c61726d
000440  20636c65
000444  61722c20
000448  62617474
00044c  65727920
000450  6973206e
000454  6f74206c
000458  6f7700  
00045b  00                DCB      0
                  |L1.1116|
00045c  42415420          DCB      "BAT #1 Warning, high battery temperature",0
000460  23312057
000464  61726e69
000468  6e672c20
00046c  68696768
000470  20626174
000474  74657279
000478  2074656d
00047c  70657261
000480  74757265
000484  00      
000485  00                DCB      0
000486  00                DCB      0
000487  00                DCB      0
                  |L1.1160|
000488  42415420          DCB      "BAT #1 Warning clear, battery temperature is normal",0
00048c  23312057
000490  61726e69
000494  6e672063
000498  6c656172
00049c  2c206261
0004a0  74746572
0004a4  79207465
0004a8  6d706572
0004ac  61747572
0004b0  65206973
0004b4  206e6f72
0004b8  6d616c00
                  |L1.1212|
0004bc  42415420          DCB      "BAT #1 Alarm, high battery temperature",0
0004c0  23312041
0004c4  6c61726d
0004c8  2c206869
0004cc  67682062
0004d0  61747465
0004d4  72792074
0004d8  656d7065
0004dc  72617475
0004e0  726500  
0004e3  00                DCB      0
                  |L1.1252|
0004e4  42415420          DCB      "BAT #1 Alarm clear, battery temperature is normal",0
0004e8  23312041
0004ec  6c61726d
0004f0  20636c65
0004f4  61722c20
0004f8  62617474
0004fc  65727920
000500  74656d70
000504  65726174
000508  75726520
00050c  6973206e
000510  6f726d61
000514  6c00    
000516  00                DCB      0
000517  00                DCB      0
                  |L1.1304|
000518  42415420          DCB      "BAT #1, capacity test stopped",0
00051c  23312c20
000520  63617061
000524  63697479
000528  20746573
00052c  74207374
000530  6f707065
000534  6400    
000536  00                DCB      0
000537  00                DCB      0
                  |L1.1336|
000538  42415420          DCB      "BAT #1,leveling charge is stopped",0
00053c  23312c6c
000540  6576656c
000544  696e6720
000548  63686172
00054c  67652069
000550  73207374
000554  6f707065
000558  6400    
00055a  00                DCB      0
00055b  00                DCB      0
                  |L1.1372|
00055c  42415420          DCB      "BAT #1,leveling charge is blocked",0
000560  23312c6c
000564  6576656c
000568  696e6720
00056c  63686172
000570  67652069
000574  7320626c
000578  6f636b65
00057c  6400    
00057e  00                DCB      0
00057f  00                DCB      0
                  |L1.1408|
000580  42415420          DCB      "BAT #1, capacity test started",0
000584  23312c20
000588  63617061
00058c  63697479
000590  20746573
000594  74207374
000598  61727465
00059c  6400    
00059e  00                DCB      0
00059f  00                DCB      0
                  |L1.1440|
0005a0  42415420          DCB      "BAT #1,leveling charge is started",0
0005a4  23312c6c
0005a8  6576656c
0005ac  696e6720
0005b0  63686172
0005b4  67652069
0005b8  73207374
0005bc  61727465
0005c0  6400    
0005c2  00                DCB      0
0005c3  00                DCB      0
                  |L1.1476|
0005c4  42415420          DCB      "BAT #1,leveling charge is unblocked",0
0005c8  23312c6c
0005cc  6576656c
0005d0  696e6720
0005d4  63686172
0005d8  67652069
0005dc  7320756e
0005e0  626c6f63
0005e4  6b656400
                  |L1.1512|
                          DCD      sp_ch_stat
                  |L1.1516|
0005ec  42415420          DCB      "BAT #1,speed charge is stopped",0
0005f0  23312c73
0005f4  70656564
0005f8  20636861
0005fc  72676520
000600  69732073
000604  746f7070
000608  656400  
00060b  00                DCB      0
                  |L1.1548|
00060c  42415420          DCB      "BAT #1,speed charge is blocked",0
000610  23312c73
000614  70656564
000618  20636861
00061c  72676520
000620  69732062
000624  6c6f636b
000628  656400  
00062b  00                DCB      0
                  |L1.1580|
00062c  42415420          DCB      "BAT #1,speed charge is started",0
000630  23312c73
000634  70656564
000638  20636861
00063c  72676520
000640  69732073
000644  74617274
000648  656400  
00064b  00                DCB      0
                  |L1.1612|
00064c  42415420          DCB      "BAT #1,speed charge is unblocked",0
000650  23312c73
000654  70656564
000658  20636861
00065c  72676520
000660  69732075
000664  6e626c6f
000668  636b6564
00066c  00      
00066d  00                DCB      0
00066e  00                DCB      0
00066f  00                DCB      0
                  |L1.1648|
000670  42415420          DCB      "BAT #1,equalising charge is on",0
000674  23312c65
000678  7175616c
00067c  6973696e
000680  67206368
000684  61726765
000688  20697320
00068c  6f6e00  
00068f  00                DCB      0
                  |L1.1680|
000690  42415420          DCB      "BAT #1,equalising charge is off",0
000694  23312c65
000698  7175616c
00069c  6973696e
0006a0  67206368
0006a4  61726765
0006a8  20697320
0006ac  6f666600
                  |L1.1712|
0006b0  42415420          DCB      "BAT #1,equalising charge is blocked",0
0006b4  23312c65
0006b8  7175616c
0006bc  6973696e
0006c0  67206368
0006c4  61726765
0006c8  20697320
0006cc  626c6f63
0006d0  6b656400
                  |L1.1748|
0006d4  42415420          DCB      "BAT #1,equalising charge is unblocked",0
0006d8  23312c65
0006dc  7175616c
0006e0  6973696e
0006e4  67206368
0006e8  61726765
0006ec  20697320
0006f0  756e626c
0006f4  6f636b65
0006f8  6400    
0006fa  00                DCB      0
0006fb  00                DCB      0
                  |L1.1788|
0006fc  42415420          DCB      "BAT #1,molding charge is on",0
000700  23312c6d
000704  6f6c6469
000708  6e672063
00070c  68617267
000710  65206973
000714  206f6e00
                  |L1.1816|
000718  42415420          DCB      "BAT #1,molding charge is off",0
00071c  23312c6d
000720  6f6c6469
000724  6e672063
000728  68617267
00072c  65206973
000730  206f6666
000734  00      
000735  00                DCB      0
000736  00                DCB      0
000737  00                DCB      0
                  |L1.1848|
000738  42415420          DCB      "BAT #1,molding charge is blocked",0
00073c  23312c6d
000740  6f6c6469
000744  6e672063
000748  68617267
00074c  65206973
000750  20626c6f
000754  636b6564
000758  00      
000759  00                DCB      0
00075a  00                DCB      0
00075b  00                DCB      0
                  |L1.1884|
00075c  8820              LDRH     r0,[r4,#0]            ;542  ; snmp_bat_flag
00075e  f4205080          BIC      r0,r0,#0x1000         ;542
000762  8020              STRH     r0,[r4,#0]            ;542
000764  8828              LDRH     r0,[r5,#0]            ;543  ; snmp_bat_flag_puts
000766  04c0              LSLS     r0,r0,#19             ;543
000768  f57fae44          BPL      |L1.1012|
00076c  2315              MOVS     r3,#0x15              ;545
00076e  2208              MOVS     r2,#8                 ;545
000770  2105              MOVS     r1,#5                 ;545
000772  a0f7              ADR      r0,|L1.2896|
000774  f7fffffe          BL       snmp_trap_send
000778  8828              LDRH     r0,[r5,#0]            ;546  ; snmp_bat_flag_puts
00077a  f4205080          BIC      r0,r0,#0x1000         ;546
00077e  8028              STRH     r0,[r5,#0]            ;546
000780  e459              B        |L1.54|
                  |L1.1922|
000782  f9bb0000          LDRSH    r0,[r11,#0]           ;558  ; USIGN
000786  f9b8104e          LDRSH    r1,[r8,#0x4e]         ;558  ; bat
00078a  eb000080          ADD      r0,r0,r0,LSL #2       ;558
00078e  ebb10f40          CMP      r1,r0,LSL #1          ;558
000792  da11              BGE      |L1.1976|
000794  8860              LDRH     r0,[r4,#2]            ;560  ; snmp_bat_flag
000796  f0400001          ORR      r0,r0,#1              ;560
00079a  8060              STRH     r0,[r4,#2]            ;560
00079c  8868              LDRH     r0,[r5,#2]            ;561  ; snmp_bat_flag_puts
00079e  07c0              LSLS     r0,r0,#31             ;561
0007a0  d11b              BNE      |L1.2010|
0007a2  2316              MOVS     r3,#0x16              ;563
0007a4  2208              MOVS     r2,#8                 ;563
0007a6  2105              MOVS     r1,#5                 ;563
0007a8  a0f2              ADR      r0,|L1.2932|
0007aa  f7fffffe          BL       snmp_trap_send
0007ae  8868              LDRH     r0,[r5,#2]            ;564  ; snmp_bat_flag_puts
0007b0  f0400001          ORR      r0,r0,#1              ;564
0007b4  8068              STRH     r0,[r5,#2]            ;564
0007b6  e010              B        |L1.2010|
                  |L1.1976|
0007b8  8860              LDRH     r0,[r4,#2]            ;569  ; snmp_bat_flag
0007ba  f0200001          BIC      r0,r0,#1              ;569
0007be  8060              STRH     r0,[r4,#2]            ;569
0007c0  8868              LDRH     r0,[r5,#2]            ;570  ; snmp_bat_flag_puts
0007c2  07c0              LSLS     r0,r0,#31             ;570
0007c4  d009              BEQ      |L1.2010|
0007c6  2317              MOVS     r3,#0x17              ;572
0007c8  2208              MOVS     r2,#8                 ;572
0007ca  2105              MOVS     r1,#5                 ;572
0007cc  a0f1              ADR      r0,|L1.2964|
0007ce  f7fffffe          BL       snmp_trap_send
0007d2  8868              LDRH     r0,[r5,#2]            ;573  ; snmp_bat_flag_puts
0007d4  f0200001          BIC      r0,r0,#1              ;573
0007d8  8068              STRH     r0,[r5,#2]            ;573
                  |L1.2010|
0007da  f898008b          LDRB     r0,[r8,#0x8b]         ;577  ; bat
0007de  07c0              LSLS     r0,r0,#31             ;577
0007e0  d011              BEQ      |L1.2054|
0007e2  8860              LDRH     r0,[r4,#2]            ;579  ; snmp_bat_flag
0007e4  f0400002          ORR      r0,r0,#2              ;579
0007e8  8060              STRH     r0,[r4,#2]            ;579
0007ea  8828              LDRH     r0,[r5,#0]            ;580  ; snmp_bat_flag_puts
0007ec  0780              LSLS     r0,r0,#30             ;580
0007ee  d41b              BMI      |L1.2088|
0007f0  2318              MOVS     r3,#0x18              ;582
0007f2  2208              MOVS     r2,#8                 ;582
0007f4  2105              MOVS     r1,#5                 ;582
0007f6  a0f1              ADR      r0,|L1.3004|
0007f8  f7fffffe          BL       snmp_trap_send
0007fc  8868              LDRH     r0,[r5,#2]            ;583  ; snmp_bat_flag_puts
0007fe  f0400002          ORR      r0,r0,#2              ;583
000802  8068              STRH     r0,[r5,#2]            ;583
000804  e010              B        |L1.2088|
                  |L1.2054|
000806  8860              LDRH     r0,[r4,#2]            ;588  ; snmp_bat_flag
000808  f0200002          BIC      r0,r0,#2              ;588
00080c  8060              STRH     r0,[r4,#2]            ;588
00080e  8868              LDRH     r0,[r5,#2]            ;589  ; snmp_bat_flag_puts
000810  0780              LSLS     r0,r0,#30             ;589
000812  d509              BPL      |L1.2088|
000814  2319              MOVS     r3,#0x19              ;591
000816  2208              MOVS     r2,#8                 ;591
000818  2105              MOVS     r1,#5                 ;591
00081a  a0f3              ADR      r0,|L1.3048|
00081c  f7fffffe          BL       snmp_trap_send
000820  8868              LDRH     r0,[r5,#2]            ;592  ; snmp_bat_flag_puts
000822  f0200002          BIC      r0,r0,#2              ;592
000826  8068              STRH     r0,[r5,#2]            ;592
                  |L1.2088|
000828  f898008b          LDRB     r0,[r8,#0x8b]         ;596  ; bat
00082c  0780              LSLS     r0,r0,#30             ;596
00082e  d511              BPL      |L1.2132|
000830  8860              LDRH     r0,[r4,#2]            ;598  ; snmp_bat_flag
000832  f0400004          ORR      r0,r0,#4              ;598
000836  8060              STRH     r0,[r4,#2]            ;598
000838  8868              LDRH     r0,[r5,#2]            ;599  ; snmp_bat_flag_puts
00083a  0740              LSLS     r0,r0,#29             ;599
00083c  d41b              BMI      |L1.2166|
00083e  231a              MOVS     r3,#0x1a              ;601
000840  2208              MOVS     r2,#8                 ;601
000842  2105              MOVS     r1,#5                 ;601
000844  a0f5              ADR      r0,|L1.3100|
000846  f7fffffe          BL       snmp_trap_send
00084a  8868              LDRH     r0,[r5,#2]            ;602  ; snmp_bat_flag_puts
00084c  f0400004          ORR      r0,r0,#4              ;602
000850  8068              STRH     r0,[r5,#2]            ;602
000852  e010              B        |L1.2166|
                  |L1.2132|
000854  8860              LDRH     r0,[r4,#2]            ;607  ; snmp_bat_flag
000856  f0200004          BIC      r0,r0,#4              ;607
00085a  8060              STRH     r0,[r4,#2]            ;607
00085c  8868              LDRH     r0,[r5,#2]            ;608  ; snmp_bat_flag_puts
00085e  0740              LSLS     r0,r0,#29             ;608
000860  d509              BPL      |L1.2166|
000862  231b              MOVS     r3,#0x1b              ;610
000864  2208              MOVS     r2,#8                 ;610
000866  2105              MOVS     r1,#5                 ;610
000868  a0f6              ADR      r0,|L1.3140|
00086a  f7fffffe          BL       snmp_trap_send
00086e  8868              LDRH     r0,[r5,#2]            ;611  ; snmp_bat_flag_puts
000870  f0200004          BIC      r0,r0,#4              ;611
000874  8068              STRH     r0,[r5,#2]            ;611
                  |L1.2166|
000876  f9b91000          LDRSH    r1,[r9,#0]            ;615  ; IKB
00087a  f9b80054          LDRSH    r0,[r8,#0x54]         ;615  ; bat
00087e  424a              RSBS     r2,r1,#0              ;615
000880  4290              CMP      r0,r2                 ;615
000882  da04              BGE      |L1.2190|
000884  8860              LDRH     r0,[r4,#2]            ;615  ; snmp_bat_flag
000886  f0400008          ORR      r0,r0,#8              ;615
00088a  8060              STRH     r0,[r4,#2]            ;615
00088c  e005              B        |L1.2202|
                  |L1.2190|
00088e  4288              CMP      r0,r1                 ;616
000890  dd03              BLE      |L1.2202|
000892  8860              LDRH     r0,[r4,#2]            ;616  ; snmp_bat_flag
000894  f0200008          BIC      r0,r0,#8              ;616
000898  8060              STRH     r0,[r4,#2]            ;616
                  |L1.2202|
00089a  f8960023          LDRB     r0,[r6,#0x23]         ;618  ; spc_stat
00089e  2801              CMP      r0,#1                 ;618
0008a0  d102              BNE      |L1.2216|
0008a2  f8960024          LDRB     r0,[r6,#0x24]         ;618  ; spc_bat
0008a6  b3c8              CBZ      r0,|L1.2332|
                  |L1.2216|
0008a8  8860              LDRH     r0,[r4,#2]            ;629  ; snmp_bat_flag
0008aa  f0200010          BIC      r0,r0,#0x10           ;629
0008ae  8060              STRH     r0,[r4,#2]            ;629
0008b0  8868              LDRH     r0,[r5,#2]            ;630  ; snmp_bat_flag_puts
0008b2  06c0              LSLS     r0,r0,#27             ;630
0008b4  d509              BPL      |L1.2250|
0008b6  231d              MOVS     r3,#0x1d              ;632
0008b8  2208              MOVS     r2,#8                 ;632
0008ba  2105              MOVS     r1,#5                 ;632
0008bc  a0ee              ADR      r0,|L1.3192|
0008be  f7fffffe          BL       snmp_trap_send
0008c2  8868              LDRH     r0,[r5,#2]            ;633  ; snmp_bat_flag_puts
0008c4  f0200010          BIC      r0,r0,#0x10           ;633
0008c8  8068              STRH     r0,[r5,#2]            ;633
                  |L1.2250|
0008ca  f8960023          LDRB     r0,[r6,#0x23]         ;637  ; spc_stat
0008ce  2802              CMP      r0,#2                 ;637
0008d0  d037              BEQ      |L1.2370|
0008d2  8860              LDRH     r0,[r4,#2]            ;648  ; snmp_bat_flag
0008d4  f0200020          BIC      r0,r0,#0x20           ;648
0008d8  8060              STRH     r0,[r4,#2]            ;648
0008da  8868              LDRH     r0,[r5,#2]            ;649  ; snmp_bat_flag_puts
0008dc  0680              LSLS     r0,r0,#26             ;649
0008de  d509              BPL      |L1.2292|
0008e0  231f              MOVS     r3,#0x1f              ;651
0008e2  2208              MOVS     r2,#8                 ;651
0008e4  2105              MOVS     r1,#5                 ;651
0008e6  a0ec              ADR      r0,|L1.3224|
0008e8  f7fffffe          BL       snmp_trap_send
0008ec  8868              LDRH     r0,[r5,#2]            ;652  ; snmp_bat_flag_puts
0008ee  f0200020          BIC      r0,r0,#0x20           ;652
0008f2  8068              STRH     r0,[r5,#2]            ;652
                  |L1.2292|
0008f4  7870              LDRB     r0,[r6,#1]            ;656  ; vz_error
0008f6  b3b0              CBZ      r0,|L1.2406|
0008f8  8860              LDRH     r0,[r4,#2]            ;658  ; snmp_bat_flag
0008fa  f0400040          ORR      r0,r0,#0x40           ;658
0008fe  8060              STRH     r0,[r4,#2]            ;658
000900  8868              LDRH     r0,[r5,#2]            ;659  ; snmp_bat_flag_puts
000902  0640              LSLS     r0,r0,#25             ;659
000904  d441              BMI      |L1.2442|
000906  2320              MOVS     r3,#0x20              ;661
000908  2208              MOVS     r2,#8                 ;661
00090a  2105              MOVS     r1,#5                 ;661
00090c  a0eb              ADR      r0,|L1.3260|
00090e  f7fffffe          BL       snmp_trap_send
000912  8868              LDRH     r0,[r5,#2]            ;662  ; snmp_bat_flag_puts
000914  f0400040          ORR      r0,r0,#0x40           ;662
000918  8068              STRH     r0,[r5,#2]            ;662
00091a  e036              B        |L1.2442|
                  |L1.2332|
00091c  e7ff              B        |L1.2334|
                  |L1.2334|
00091e  8860              LDRH     r0,[r4,#2]            ;620  ; snmp_bat_flag
000920  f0400010          ORR      r0,r0,#0x10           ;620
000924  8060              STRH     r0,[r4,#2]            ;620
000926  8868              LDRH     r0,[r5,#2]            ;621  ; snmp_bat_flag_puts
000928  06c0              LSLS     r0,r0,#27             ;621
00092a  d4ce              BMI      |L1.2250|
00092c  231c              MOVS     r3,#0x1c              ;623
00092e  2208              MOVS     r2,#8                 ;623
000930  2105              MOVS     r1,#5                 ;623
000932  a0eb              ADR      r0,|L1.3296|
000934  f7fffffe          BL       snmp_trap_send
000938  8868              LDRH     r0,[r5,#2]            ;624  ; snmp_bat_flag_puts
00093a  f0400010          ORR      r0,r0,#0x10           ;624
00093e  8068              STRH     r0,[r5,#2]            ;624
000940  e7c3              B        |L1.2250|
                  |L1.2370|
000942  8860              LDRH     r0,[r4,#2]            ;639  ; snmp_bat_flag
000944  f0400020          ORR      r0,r0,#0x20           ;639
000948  8060              STRH     r0,[r4,#2]            ;639
00094a  8868              LDRH     r0,[r5,#2]            ;640  ; snmp_bat_flag_puts
00094c  0680              LSLS     r0,r0,#26             ;640
00094e  d4d1              BMI      |L1.2292|
000950  231e              MOVS     r3,#0x1e              ;642
000952  2208              MOVS     r2,#8                 ;642
000954  2105              MOVS     r1,#5                 ;642
000956  a0ea              ADR      r0,|L1.3328|
000958  f7fffffe          BL       snmp_trap_send
00095c  8868              LDRH     r0,[r5,#2]            ;643  ; snmp_bat_flag_puts
00095e  f0400020          ORR      r0,r0,#0x20           ;643
000962  8068              STRH     r0,[r5,#2]            ;643
000964  e7c6              B        |L1.2292|
                  |L1.2406|
000966  e7ff              B        |L1.2408|
                  |L1.2408|
000968  8860              LDRH     r0,[r4,#2]            ;667  ; snmp_bat_flag
00096a  f0200040          BIC      r0,r0,#0x40           ;667
00096e  8060              STRH     r0,[r4,#2]            ;667
000970  8868              LDRH     r0,[r5,#2]            ;668  ; snmp_bat_flag_puts
000972  0640              LSLS     r0,r0,#25             ;668
000974  d509              BPL      |L1.2442|
000976  2321              MOVS     r3,#0x21              ;670
000978  2208              MOVS     r2,#8                 ;670
00097a  2105              MOVS     r1,#5                 ;670
00097c  a0e9              ADR      r0,|L1.3364|
00097e  f7fffffe          BL       snmp_trap_send
000982  8868              LDRH     r0,[r5,#2]            ;671  ; snmp_bat_flag_puts
000984  f0200040          BIC      r0,r0,#0x40           ;671
000988  8068              STRH     r0,[r5,#2]            ;671
                  |L1.2442|
00098a  48ef              LDR      r0,|L1.3400|
00098c  7800              LDRB     r0,[r0,#0]            ;675  ; sp_ch_stat
00098e  2802              CMP      r0,#2                 ;675
000990  d024              BEQ      |L1.2524|
000992  8860              LDRH     r0,[r4,#2]            ;686  ; snmp_bat_flag
000994  f0200080          BIC      r0,r0,#0x80           ;686
000998  8060              STRH     r0,[r4,#2]            ;686
00099a  8868              LDRH     r0,[r5,#2]            ;687  ; snmp_bat_flag_puts
00099c  0600              LSLS     r0,r0,#24             ;687
00099e  d509              BPL      |L1.2484|
0009a0  2323              MOVS     r3,#0x23              ;689
0009a2  2208              MOVS     r2,#8                 ;689
0009a4  2105              MOVS     r1,#5                 ;689
0009a6  a0e9              ADR      r0,|L1.3404|
0009a8  f7fffffe          BL       snmp_trap_send
0009ac  8868              LDRH     r0,[r5,#2]            ;690  ; snmp_bat_flag_puts
0009ae  f0200080          BIC      r0,r0,#0x80           ;690
0009b2  8068              STRH     r0,[r5,#2]            ;690
                  |L1.2484|
0009b4  78b0              LDRB     r0,[r6,#2]            ;694  ; sp_ch_error
0009b6  b318              CBZ      r0,|L1.2560|
0009b8  8860              LDRH     r0,[r4,#2]            ;696  ; snmp_bat_flag
0009ba  f4407080          ORR      r0,r0,#0x100          ;696
0009be  8060              STRH     r0,[r4,#2]            ;696
0009c0  8868              LDRH     r0,[r5,#2]            ;697  ; snmp_bat_flag_puts
0009c2  05c0              LSLS     r0,r0,#23             ;697
0009c4  d42d              BMI      |L1.2594|
0009c6  2324              MOVS     r3,#0x24              ;699
0009c8  2208              MOVS     r2,#8                 ;699
0009ca  2105              MOVS     r1,#5                 ;699
0009cc  a0e7              ADR      r0,|L1.3436|
0009ce  f7fffffe          BL       snmp_trap_send
0009d2  8868              LDRH     r0,[r5,#2]            ;700  ; snmp_bat_flag_puts
0009d4  f4407080          ORR      r0,r0,#0x100          ;700
0009d8  8068              STRH     r0,[r5,#2]            ;700
0009da  e022              B        |L1.2594|
                  |L1.2524|
0009dc  8860              LDRH     r0,[r4,#2]            ;677  ; snmp_bat_flag
0009de  f0400080          ORR      r0,r0,#0x80           ;677
0009e2  8060              STRH     r0,[r4,#2]            ;677
0009e4  8868              LDRH     r0,[r5,#2]            ;678  ; snmp_bat_flag_puts
0009e6  0600              LSLS     r0,r0,#24             ;678
0009e8  d4e4              BMI      |L1.2484|
0009ea  2322              MOVS     r3,#0x22              ;680
0009ec  2208              MOVS     r2,#8                 ;680
0009ee  2105              MOVS     r1,#5                 ;680
0009f0  a0e6              ADR      r0,|L1.3468|
0009f2  f7fffffe          BL       snmp_trap_send
0009f6  8868              LDRH     r0,[r5,#2]            ;681  ; snmp_bat_flag_puts
0009f8  f0400080          ORR      r0,r0,#0x80           ;681
0009fc  8068              STRH     r0,[r5,#2]            ;681
0009fe  e7d9              B        |L1.2484|
                  |L1.2560|
000a00  8860              LDRH     r0,[r4,#2]            ;705  ; snmp_bat_flag
000a02  f4207080          BIC      r0,r0,#0x100          ;705
000a06  8060              STRH     r0,[r4,#2]            ;705
000a08  8868              LDRH     r0,[r5,#2]            ;706  ; snmp_bat_flag_puts
000a0a  05c0              LSLS     r0,r0,#23             ;706
000a0c  d509              BPL      |L1.2594|
000a0e  2325              MOVS     r3,#0x25              ;708
000a10  2208              MOVS     r2,#8                 ;708
000a12  2105              MOVS     r1,#5                 ;708
000a14  a0e5              ADR      r0,|L1.3500|
000a16  f7fffffe          BL       snmp_trap_send
000a1a  8868              LDRH     r0,[r5,#2]            ;709  ; snmp_bat_flag_puts
000a1c  f4207080          BIC      r0,r0,#0x100          ;709
000a20  8068              STRH     r0,[r5,#2]            ;709
                  |L1.2594|
000a22  7970              LDRB     r0,[r6,#5]            ;713  ; vz1_stat
000a24  b188              CBZ      r0,|L1.2634|
000a26  8860              LDRH     r0,[r4,#2]            ;715  ; snmp_bat_flag
000a28  f4407000          ORR      r0,r0,#0x200          ;715
000a2c  8060              STRH     r0,[r4,#2]            ;715
000a2e  8868              LDRH     r0,[r5,#2]            ;716  ; snmp_bat_flag_puts
000a30  0580              LSLS     r0,r0,#22             ;716
000a32  d41b              BMI      |L1.2668|
000a34  2326              MOVS     r3,#0x26              ;718
000a36  2208              MOVS     r2,#8                 ;718
000a38  2105              MOVS     r1,#5                 ;718
000a3a  a0e5              ADR      r0,|L1.3536|
000a3c  f7fffffe          BL       snmp_trap_send
000a40  8868              LDRH     r0,[r5,#2]            ;719  ; snmp_bat_flag_puts
000a42  f4407000          ORR      r0,r0,#0x200          ;719
000a46  8068              STRH     r0,[r5,#2]            ;719
000a48  e010              B        |L1.2668|
                  |L1.2634|
000a4a  8860              LDRH     r0,[r4,#2]            ;724  ; snmp_bat_flag
000a4c  f4207000          BIC      r0,r0,#0x200          ;724
000a50  8060              STRH     r0,[r4,#2]            ;724
000a52  8868              LDRH     r0,[r5,#2]            ;725  ; snmp_bat_flag_puts
000a54  0580              LSLS     r0,r0,#22             ;725
000a56  d509              BPL      |L1.2668|
000a58  2327              MOVS     r3,#0x27              ;727
000a5a  2208              MOVS     r2,#8                 ;727
000a5c  2105              MOVS     r1,#5                 ;727
000a5e  a0e4              ADR      r0,|L1.3568|
000a60  f7fffffe          BL       snmp_trap_send
000a64  8868              LDRH     r0,[r5,#2]            ;728  ; snmp_bat_flag_puts
000a66  f4207000          BIC      r0,r0,#0x200          ;728
000a6a  8068              STRH     r0,[r5,#2]            ;728
                  |L1.2668|
000a6c  78f0              LDRB     r0,[r6,#3]            ;732  ; vz1_error
000a6e  b188              CBZ      r0,|L1.2708|
000a70  8860              LDRH     r0,[r4,#2]            ;734  ; snmp_bat_flag
000a72  f4406080          ORR      r0,r0,#0x400          ;734
000a76  8060              STRH     r0,[r4,#2]            ;734
000a78  8868              LDRH     r0,[r5,#2]            ;735  ; snmp_bat_flag_puts
000a7a  0540              LSLS     r0,r0,#21             ;735
000a7c  d41b              BMI      |L1.2742|
000a7e  2328              MOVS     r3,#0x28              ;737
000a80  2208              MOVS     r2,#8                 ;737
000a82  2105              MOVS     r1,#5                 ;737
000a84  a0e2              ADR      r0,|L1.3600|
000a86  f7fffffe          BL       snmp_trap_send
000a8a  8868              LDRH     r0,[r5,#2]            ;738  ; snmp_bat_flag_puts
000a8c  f4406080          ORR      r0,r0,#0x400          ;738
000a90  8068              STRH     r0,[r5,#2]            ;738
000a92  e010              B        |L1.2742|
                  |L1.2708|
000a94  8860              LDRH     r0,[r4,#2]            ;743  ; snmp_bat_flag
000a96  f4206080          BIC      r0,r0,#0x400          ;743
000a9a  8060              STRH     r0,[r4,#2]            ;743
000a9c  8868              LDRH     r0,[r5,#2]            ;744  ; snmp_bat_flag_puts
000a9e  0540              LSLS     r0,r0,#21             ;744
000aa0  d509              BPL      |L1.2742|
000aa2  2329              MOVS     r3,#0x29              ;746
000aa4  2208              MOVS     r2,#8                 ;746
000aa6  2105              MOVS     r1,#5                 ;746
000aa8  a0e2              ADR      r0,|L1.3636|
000aaa  f7fffffe          BL       snmp_trap_send
000aae  8868              LDRH     r0,[r5,#2]            ;747  ; snmp_bat_flag_puts
000ab0  f4206080          BIC      r0,r0,#0x400          ;747
000ab4  8068              STRH     r0,[r5,#2]            ;747
                  |L1.2742|
000ab6  79f0              LDRB     r0,[r6,#7]            ;751  ; vz2_stat
000ab8  b188              CBZ      r0,|L1.2782|
000aba  8860              LDRH     r0,[r4,#2]            ;753  ; snmp_bat_flag
000abc  f4406000          ORR      r0,r0,#0x800          ;753
000ac0  8060              STRH     r0,[r4,#2]            ;753
000ac2  8868              LDRH     r0,[r5,#2]            ;754  ; snmp_bat_flag_puts
000ac4  0500              LSLS     r0,r0,#20             ;754
000ac6  d41b              BMI      |L1.2816|
000ac8  232a              MOVS     r3,#0x2a              ;756
000aca  2208              MOVS     r2,#8                 ;756
000acc  2105              MOVS     r1,#5                 ;756
000ace  a0e3              ADR      r0,|L1.3676|
000ad0  f7fffffe          BL       snmp_trap_send
000ad4  8868              LDRH     r0,[r5,#2]            ;757  ; snmp_bat_flag_puts
000ad6  f4406000          ORR      r0,r0,#0x800          ;757
000ada  8068              STRH     r0,[r5,#2]            ;757
000adc  e010              B        |L1.2816|
                  |L1.2782|
000ade  8860              LDRH     r0,[r4,#2]            ;762  ; snmp_bat_flag
000ae0  f4206000          BIC      r0,r0,#0x800          ;762
000ae4  8060              STRH     r0,[r4,#2]            ;762
000ae6  8868              LDRH     r0,[r5,#2]            ;763  ; snmp_bat_flag_puts
000ae8  0500              LSLS     r0,r0,#20             ;763
000aea  d509              BPL      |L1.2816|
000aec  232b              MOVS     r3,#0x2b              ;765
000aee  2208              MOVS     r2,#8                 ;765
000af0  2105              MOVS     r1,#5                 ;765
000af2  a0e1              ADR      r0,|L1.3704|
000af4  f7fffffe          BL       snmp_trap_send
000af8  8868              LDRH     r0,[r5,#2]            ;766  ; snmp_bat_flag_puts
000afa  f4206000          BIC      r0,r0,#0x800          ;766
000afe  8068              STRH     r0,[r5,#2]            ;766
                  |L1.2816|
000b00  7930              LDRB     r0,[r6,#4]            ;770  ; vz2_error
000b02  b198              CBZ      r0,|L1.2860|
000b04  8860              LDRH     r0,[r4,#2]            ;772  ; snmp_bat_flag
000b06  f4405080          ORR      r0,r0,#0x1000         ;772
000b0a  8060              STRH     r0,[r4,#2]            ;772
000b0c  8868              LDRH     r0,[r5,#2]            ;773  ; snmp_bat_flag_puts
000b0e  04c0              LSLS     r0,r0,#19             ;773
000b10  f53faa97          BMI      |L1.66|
000b14  232c              MOVS     r3,#0x2c              ;775
000b16  2208              MOVS     r2,#8                 ;775
000b18  2105              MOVS     r1,#5                 ;775
000b1a  a0df              ADR      r0,|L1.3736|
000b1c  f7fffffe          BL       snmp_trap_send
000b20  8868              LDRH     r0,[r5,#2]            ;776  ; snmp_bat_flag_puts
000b22  f4405080          ORR      r0,r0,#0x1000         ;776
000b26  8068              STRH     r0,[r5,#2]            ;776
                  |L1.2856|
000b28  e8bd9ff0          POP      {r4-r12,pc}
                  |L1.2860|
000b2c  8860              LDRH     r0,[r4,#2]            ;781  ; snmp_bat_flag
000b2e  f4205080          BIC      r0,r0,#0x1000         ;781
000b32  8060              STRH     r0,[r4,#2]            ;781
000b34  8868              LDRH     r0,[r5,#2]            ;782  ; snmp_bat_flag_puts
000b36  04c0              LSLS     r0,r0,#19             ;782
000b38  d5f6              BPL      |L1.2856|
000b3a  232d              MOVS     r3,#0x2d              ;784
000b3c  2208              MOVS     r2,#8                 ;784
000b3e  2105              MOVS     r1,#5                 ;784
000b40  a0de              ADR      r0,|L1.3772|
000b42  f7fffffe          BL       snmp_trap_send
000b46  8868              LDRH     r0,[r5,#2]            ;785  ; snmp_bat_flag_puts
000b48  f4205080          BIC      r0,r0,#0x1000         ;785
000b4c  8068              STRH     r0,[r5,#2]            ;785
000b4e  e7eb              B        |L1.2856|
                  |L1.2896|
000b50  42415420          DCB      "BAT #1,molding charge is unblocked",0
000b54  23312c6d
000b58  6f6c6469
000b5c  6e672063
000b60  68617267
000b64  65206973
000b68  20756e62
000b6c  6c6f636b
000b70  656400  
000b73  00                DCB      0
                  |L1.2932|
000b74  42415420          DCB      "BAT #2 Alarm, battery is low",0
000b78  23322041
000b7c  6c61726d
000b80  2c206261
000b84  74746572
000b88  79206973
000b8c  206c6f77
000b90  00      
000b91  00                DCB      0
000b92  00                DCB      0
000b93  00                DCB      0
                  |L1.2964|
000b94  42415420          DCB      "BAT #2 Alarm clear, battery is not low",0
000b98  23322041
000b9c  6c61726d
000ba0  20636c65
000ba4  61722c20
000ba8  62617474
000bac  65727920
000bb0  6973206e
000bb4  6f74206c
000bb8  6f7700  
000bbb  00                DCB      0
                  |L1.3004|
000bbc  42415420          DCB      "BAT #2 Warning, high battery temperature",0
000bc0  23322057
000bc4  61726e69
000bc8  6e672c20
000bcc  68696768
000bd0  20626174
000bd4  74657279
000bd8  2074656d
000bdc  70657261
000be0  74757265
000be4  00      
000be5  00                DCB      0
000be6  00                DCB      0
000be7  00                DCB      0
                  |L1.3048|
000be8  42415420          DCB      "BAT #2 Warning clear, battery temperature is normal",0
000bec  23322057
000bf0  61726e69
000bf4  6e672063
000bf8  6c656172
000bfc  2c206261
000c00  74746572
000c04  79207465
000c08  6d706572
000c0c  61747572
000c10  65206973
000c14  206e6f72
000c18  6d616c00
                  |L1.3100|
000c1c  42415420          DCB      "BAT #2 Alarm, high battery temperature",0
000c20  23322041
000c24  6c61726d
000c28  2c206869
000c2c  67682062
000c30  61747465
000c34  72792074
000c38  656d7065
000c3c  72617475
000c40  726500  
000c43  00                DCB      0
                  |L1.3140|
000c44  42415420          DCB      "BAT #2 Alarm clear, battery temperature is normal",0
000c48  23322041
000c4c  6c61726d
000c50  20636c65
000c54  61722c20
000c58  62617474
000c5c  65727920
000c60  74656d70
000c64  65726174
000c68  75726520
000c6c  6973206e
000c70  6f726d61
000c74  6c00    
000c76  00                DCB      0
000c77  00                DCB      0
                  |L1.3192|
000c78  42415420          DCB      "BAT #2, capacity test stopped",0
000c7c  23322c20
000c80  63617061
000c84  63697479
000c88  20746573
000c8c  74207374
000c90  6f707065
000c94  6400    
000c96  00                DCB      0
000c97  00                DCB      0
                  |L1.3224|
000c98  42415420          DCB      "BAT #2,leveling charge is stopped",0
000c9c  23322c6c
000ca0  6576656c
000ca4  696e6720
000ca8  63686172
000cac  67652069
000cb0  73207374
000cb4  6f707065
000cb8  6400    
000cba  00                DCB      0
000cbb  00                DCB      0
                  |L1.3260|
000cbc  42415420          DCB      "BAT #2,leveling charge is blocked",0
000cc0  23322c6c
000cc4  6576656c
000cc8  696e6720
000ccc  63686172
000cd0  67652069
000cd4  7320626c
000cd8  6f636b65
000cdc  6400    
000cde  00                DCB      0
000cdf  00                DCB      0
                  |L1.3296|
000ce0  42415420          DCB      "BAT #2, capacity test started",0
000ce4  23322c20
000ce8  63617061
000cec  63697479
000cf0  20746573
000cf4  74207374
000cf8  61727465
000cfc  6400    
000cfe  00                DCB      0
000cff  00                DCB      0
                  |L1.3328|
000d00  42415420          DCB      "BAT #2,leveling charge is started",0
000d04  23322c6c
000d08  6576656c
000d0c  696e6720
000d10  63686172
000d14  67652069
000d18  73207374
000d1c  61727465
000d20  6400    
000d22  00                DCB      0
000d23  00                DCB      0
                  |L1.3364|
000d24  42415420          DCB      "BAT #2,leveling charge is unblocked",0
000d28  23322c6c
000d2c  6576656c
000d30  696e6720
000d34  63686172
000d38  67652069
000d3c  7320756e
000d40  626c6f63
000d44  6b656400
                  |L1.3400|
                          DCD      sp_ch_stat
                  |L1.3404|
000d4c  42415420          DCB      "BAT #2,speed charge is stopped",0
000d50  23322c73
000d54  70656564
000d58  20636861
000d5c  72676520
000d60  69732073
000d64  746f7070
000d68  656400  
000d6b  00                DCB      0
                  |L1.3436|
000d6c  42415420          DCB      "BAT #2,speed charge is blocked",0
000d70  23322c73
000d74  70656564
000d78  20636861
000d7c  72676520
000d80  69732062
000d84  6c6f636b
000d88  656400  
000d8b  00                DCB      0
                  |L1.3468|
000d8c  42415420          DCB      "BAT #2,speed charge is started",0
000d90  23322c73
000d94  70656564
000d98  20636861
000d9c  72676520
000da0  69732073
000da4  74617274
000da8  656400  
000dab  00                DCB      0
                  |L1.3500|
000dac  42415420          DCB      "BAT #2,speed charge is unblocked",0
000db0  23322c73
000db4  70656564
000db8  20636861
000dbc  72676520
000dc0  69732075
000dc4  6e626c6f
000dc8  636b6564
000dcc  00      
000dcd  00                DCB      0
000dce  00                DCB      0
000dcf  00                DCB      0
                  |L1.3536|
000dd0  42415420          DCB      "BAT #2,equalising charge is on",0
000dd4  23322c65
000dd8  7175616c
000ddc  6973696e
000de0  67206368
000de4  61726765
000de8  20697320
000dec  6f6e00  
000def  00                DCB      0
                  |L1.3568|
000df0  42415420          DCB      "BAT #2,equalising charge is off",0
000df4  23322c65
000df8  7175616c
000dfc  6973696e
000e00  67206368
000e04  61726765
000e08  20697320
000e0c  6f666600
                  |L1.3600|
000e10  42415420          DCB      "BAT #2,equalising charge is blocked",0
000e14  23322c65
000e18  7175616c
000e1c  6973696e
000e20  67206368
000e24  61726765
000e28  20697320
000e2c  626c6f63
000e30  6b656400
                  |L1.3636|
000e34  42415420          DCB      "BAT #2,equalising charge is unblocked",0
000e38  23322c65
000e3c  7175616c
000e40  6973696e
000e44  67206368
000e48  61726765
000e4c  20697320
000e50  756e626c
000e54  6f636b65
000e58  6400    
000e5a  00                DCB      0
000e5b  00                DCB      0
                  |L1.3676|
000e5c  42415420          DCB      "BAT #2,molding charge is on",0
000e60  23322c6d
000e64  6f6c6469
000e68  6e672063
000e6c  68617267
000e70  65206973
000e74  206f6e00
                  |L1.3704|
000e78  42415420          DCB      "BAT #2,molding charge is off",0
000e7c  23322c6d
000e80  6f6c6469
000e84  6e672063
000e88  68617267
000e8c  65206973
000e90  206f6666
000e94  00      
000e95  00                DCB      0
000e96  00                DCB      0
000e97  00                DCB      0
                  |L1.3736|
000e98  42415420          DCB      "BAT #2,molding charge is blocked",0
000e9c  23322c6d
000ea0  6f6c6469
000ea4  6e672063
000ea8  68617267
000eac  65206973
000eb0  20626c6f
000eb4  636b6564
000eb8  00      
000eb9  00                DCB      0
000eba  00                DCB      0
000ebb  00                DCB      0
                  |L1.3772|
000ebc  42415420          DCB      "BAT #2,molding charge is unblocked",0
000ec0  23322c6d
000ec4  6f6c6469
000ec8  6e672063
000ecc  68617267
000ed0  65206973
000ed4  20756e62
000ed8  6c6f636b
000edc  656400  
000edf  00                DCB      0
                          ENDP

                  ke_start PROC
;;;921    //-----------------------------------------------
;;;922    void ke_start(char in)
000ee0  e92d41fc          PUSH     {r2-r8,lr}
;;;923    {          
000ee4  4606              MOV      r6,r0
;;;924    ke_start_stat=(enum_ke_start_stat)0;		 
000ee6  f04f0400          MOV      r4,#0
000eea  4dff              LDR      r5,|L1.4840|
;;;925    /*
;;;926    if(spc_stat==spcVZ)ke_start_stat=kssNOT_VZ;
;;;927    #ifndef UKU_220_IPS_TERMOKOMPENSAT
;;;928    else if(BAT_IS_ON[in]!=bisON)ke_start_stat=kssNOT_BAT;
;;;929    #endif
;;;930    else if(bat[in]._av&(1<<0))ke_start_stat=kssNOT_BAT_AV;
;;;931    else if(bat[in]._temper_stat&(1<<1))ke_start_stat=kssNOT_BAT_AV_T;
;;;932    else if(bat[in]._av&(1<<1))ke_start_stat=kssNOT_BAT_AV_ASS;
;;;933    else if(bat[in]._Ib>IKB)ke_start_stat=kssNOT_BAT_ZAR;
;;;934    else if(bat[in]._Ib<-IKB)ke_start_stat=kssNOT_BAT_RAZR;
;;;935    else if((spc_stat==spcKE)&&(spc_bat==0))ke_start_stat=kssNOT_KE1;
;;;936    else if((spc_stat==spcKE)&&(spc_bat==1))ke_start_stat=kssNOT_KE2;
;;;937    else */
;;;938    	{
;;;939    
;;;940    	ke_start_stat=kssYES;
000eec  f04f0064          MOV      r0,#0x64
000ef0  f105050a          ADD      r5,r5,#0xa
000ef4  7768              STRB     r0,[r5,#0x1d]
;;;941    
;;;942    	spc_stat=spcKE;
000ef6  f04f0701          MOV      r7,#1
000efa  766f              STRB     r7,[r5,#0x19]
;;;943    	__ee_spc_stat=spcKE;
000efc  f8a57064          STRH     r7,[r5,#0x64]
;;;944    	lc640_write_int(EE_SPC_STAT,__ee_spc_stat);
000f00  4639              MOV      r1,r7
000f02  f240209a          MOV      r0,#0x29a
000f06  f7fffffe          BL       lc640_write_int
;;;945    	
;;;946    	spc_bat=0;
000f0a  76ac              STRB     r4,[r5,#0x1a]
;;;947    	__ee_spc_bat=0;
000f0c  f8a54066          STRH     r4,[r5,#0x66]
;;;948    	lc640_write_int(EE_SPC_BAT,__ee_spc_bat);
000f10  4621              MOV      r1,r4
000f12  f240209e          MOV      r0,#0x29e
000f16  f7fffffe          BL       lc640_write_int
;;;949    
;;;950    	bat[0]._zar_cnt_ke=0;
000f1a  f8df83d0          LDR      r8,|L1.4844|
000f1e  f8c84018          STR      r4,[r8,#0x18]  ; bat
;;;951    	lc640_write_int(ADR_EE_BAT_ZAR_CNT_KE[0],0);
000f22  48f3              LDR      r0,|L1.4848|
000f24  2100              MOVS     r1,#0
000f26  f9b00000          LDRSH    r0,[r0,#0]  ; ADR_EE_BAT_ZAR_CNT_KE
000f2a  f7fffffe          BL       lc640_write_int
;;;952    
;;;953    	bat[0]._time_min_cnt_ke=0;
000f2e  f8a8404a          STRH     r4,[r8,#0x4a]
;;;954    	lc640_write_int(EE_ZVU_BAT_MIN_CNT_KE,0);
000f32  2100              MOVS     r1,#0
000f34  f44f70e3          MOV      r0,#0x1c6
000f38  f7fffffe          BL       lc640_write_int
;;;955    
;;;956    	
;;;957    	spc_phase=0;
000f3c  76ec              STRB     r4,[r5,#0x1b]
;;;958    	__ee_spc_phase=0;
000f3e  f8a54068          STRH     r4,[r5,#0x68]
;;;959    	lc640_write_int(EE_SPC_PHASE,__ee_spc_phase);
000f42  4621              MOV      r1,r4
000f44  f44f7028          MOV      r0,#0x2a0
000f48  f7fffffe          BL       lc640_write_int
;;;960    
;;;961    	//ke_mem_hndl(in,lc640_read_int(ADR_EE_BAT_ZAR_CNT_KE[spc_bat]));
;;;962    
;;;963    		{					
;;;964    		signed short temp_temp;
;;;965    		signed char temp;
;;;966    		temp_temp=bat[in]._u_old[((bat_u_old_cnt+1)&0x07)]; 
000f4c  eb060046          ADD      r0,r6,r6,LSL #1
000f50  eb001006          ADD      r0,r0,r6,LSL #4
000f54  eb080180          ADD      r1,r8,r0,LSL #2
000f58  48e6              LDR      r0,|L1.4852|
000f5a  8800              LDRH     r0,[r0,#0]  ; bat_u_old_cnt
000f5c  f1000001          ADD      r0,r0,#1
000f60  f0000007          AND      r0,r0,#7
000f64  eb010040          ADD      r0,r1,r0,LSL #1
000f68  8c00              LDRH     r0,[r0,#0x20]
000f6a  9001              STR      r0,[sp,#4]
;;;967    		    
;;;968    		temp=LPC_RTC->YEAR;
000f6c  4ee2              LDR      r6,|L1.4856|
000f6e  8bb0              LDRH     r0,[r6,#0x1c]
000f70  9000              STR      r0,[sp,#0]
;;;969    		gran_char(&temp,1,99);
000f72  f04f0263          MOV      r2,#0x63
000f76  f04f0101          MOV      r1,#1
000f7a  4668              MOV      r0,sp
000f7c  f7fffffe          BL       gran_char
;;;970    		*((char*)(&(ke_date[0])))=temp;
000f80  4cd9              LDR      r4,|L1.4840|
000f82  f89d0000          LDRB     r0,[sp,#0]
000f86  34fc              ADDS     r4,r4,#0xfc
000f88  7020              STRB     r0,[r4,#0]
;;;971    			
;;;972    		temp=LPC_RTC->MONTH;
000f8a  7e30              LDRB     r0,[r6,#0x18]
000f8c  9000              STR      r0,[sp,#0]
;;;973    		gran_char(&temp,1,12);
000f8e  220c              MOVS     r2,#0xc
000f90  2101              MOVS     r1,#1
000f92  4668              MOV      r0,sp
000f94  f7fffffe          BL       gran_char
;;;974    		*(((char*)(&(ke_date[0])))+1)=temp;
000f98  f89d0000          LDRB     r0,[sp,#0]
000f9c  7060              STRB     r0,[r4,#1]
;;;975    		
;;;976    		temp=LPC_RTC->DOM;
000f9e  7b30              LDRB     r0,[r6,#0xc]
000fa0  9000              STR      r0,[sp,#0]
;;;977    		gran_char(&temp,1,31);
000fa2  221f              MOVS     r2,#0x1f
000fa4  2101              MOVS     r1,#1
000fa6  4668              MOV      r0,sp
000fa8  f7fffffe          BL       gran_char
;;;978    		*(((char*)(&(ke_date[0])))+2)=temp;			
000fac  f89d0000          LDRB     r0,[sp,#0]
000fb0  70a0              STRB     r0,[r4,#2]
;;;979    				
;;;980    		*(((char*)(&(ke_date[0])))+3)=*((char*)&temp_temp);
000fb2  f89d0004          LDRB     r0,[sp,#4]
000fb6  70e0              STRB     r0,[r4,#3]
;;;981    		lc640_write_long(EE_SPC_KE_DATE0,ke_date[0]);
000fb8  f24020a2          MOV      r0,#0x2a2
000fbc  6821              LDR      r1,[r4,#0]  ; ke_date
000fbe  f7fffffe          BL       lc640_write_long
;;;982    
;;;983    		temp=LPC_RTC->HOUR;
000fc2  7a30              LDRB     r0,[r6,#8]
000fc4  9000              STR      r0,[sp,#0]
;;;984    		gran_char(&temp,0,23);
000fc6  2217              MOVS     r2,#0x17
000fc8  2100              MOVS     r1,#0
000fca  4668              MOV      r0,sp
000fcc  f7fffffe          BL       gran_char
;;;985    		*((char*)(&(ke_date[1])))=temp;
000fd0  f89d0000          LDRB     r0,[sp,#0]
000fd4  7120              STRB     r0,[r4,#4]
;;;986                   
;;;987    		temp=LPC_RTC->MIN;
000fd6  7930              LDRB     r0,[r6,#4]
000fd8  9000              STR      r0,[sp,#0]
;;;988    		gran_char(&temp,0,59);
000fda  223b              MOVS     r2,#0x3b
000fdc  2100              MOVS     r1,#0
000fde  4668              MOV      r0,sp
000fe0  f7fffffe          BL       gran_char
;;;989    		*(((char*)(&(ke_date[1])))+1)=temp;
000fe4  f89d0000          LDRB     r0,[sp,#0]
000fe8  7160              STRB     r0,[r4,#5]
;;;990    	          
;;;991    		temp=LPC_RTC->SEC;
000fea  7830              LDRB     r0,[r6,#0]
000fec  9000              STR      r0,[sp,#0]
;;;992    		gran_char(&temp,0,59);
000fee  223b              MOVS     r2,#0x3b
000ff0  2100              MOVS     r1,#0
000ff2  4668              MOV      r0,sp
000ff4  f7fffffe          BL       gran_char
;;;993    		*(((char*)(&(ke_date[1])))+2)=temp;
000ff8  f89d0000          LDRB     r0,[sp,#0]
000ffc  71a0              STRB     r0,[r4,#6]
;;;994    			
;;;995    		*(((char*)(&(ke_date[1])))+3)=*(((char*)&temp_temp)+1);
000ffe  f89d0005          LDRB     r0,[sp,#5]
001002  71e0              STRB     r0,[r4,#7]
;;;996    		lc640_write_long(EE_SPC_KE_DATE1,ke_date[1]);
001004  f24020a6          MOV      r0,#0x2a6
001008  6861              LDR      r1,[r4,#4]  ; ke_date
00100a  f7fffffe          BL       lc640_write_long
;;;997    		}
;;;998    	bat_hndl_zvu_ke_init=1;
00100e  702f              STRB     r7,[r5,#0]
;;;999    	}
;;;1000   }
001010  e8bd81fc          POP      {r2-r8,pc}
;;;1001   #endif
                          ENDP

                  ke_drv PROC
;;;1083   //-----------------------------------------------
;;;1084   void ke_drv(void)
001014  e92d47f0          PUSH     {r4-r10,lr}
;;;1085   {
001018  b088              SUB      sp,sp,#0x20
;;;1086   static char ke_drv_cnt_10s;
;;;1087   static short i_bat_buff[6];
;;;1088   static char i_bat_buff_cnt;
;;;1089   short ke_drv_i_temp;
;;;1090   short ke_drv_i_avg;
;;;1091   char i;
;;;1092   short ke_drv_i_temp_temp;
;;;1093   const long bat_hndl_t_razr_const[7]={600L,1800L,3600L,10800L,18000L,36000L,72000L};
00101a  f04f021c          MOV      r2,#0x1c
00101e  49b7              LDR      r1,|L1.4860|
001020  a801              ADD      r0,sp,#4
001022  f7fffffe          BL       __aeabi_memcpy4
;;;1094   
;;;1095   if(bat_hndl_zvu_ke_init==1)	  //Инициализация при включении контроля емкости 
001026  4eb0              LDR      r6,|L1.4840|
;;;1096   	{
;;;1097   	
;;;1098   	i_bat_buff[0]=0;
001028  4bb5              LDR      r3,|L1.4864|
00102a  2500              MOVS     r5,#0
00102c  7ab0              LDRB     r0,[r6,#0xa]          ;1095  ; bat_hndl_zvu_ke_init
00102e  2801              CMP      r0,#1                 ;1095
001030  d102              BNE      |L1.4152|
001032  801d              STRH     r5,[r3,#0]
;;;1099   	i_bat_buff[0]=0;
;;;1100   	i_bat_buff[0]=0;
;;;1101   	i_bat_buff[0]=0;
;;;1102   	i_bat_buff[0]=0;
;;;1103   	i_bat_buff[0]=0;
;;;1104   	i_bat_buff_cnt=0;
001034  73b5              STRB     r5,[r6,#0xe]
;;;1105   
;;;1106   	bat_hndl_zvu_ke_init=0;
001036  72b5              STRB     r5,[r6,#0xa]
                  |L1.4152|
;;;1107   	}
;;;1108   
;;;1109   
;;;1110   
;;;1111   
;;;1112   if(spc_stat==spcKE)
001038  f8960023          LDRB     r0,[r6,#0x23]  ; spc_stat
00103c  2801              CMP      r0,#1
00103e  d17e              BNE      |L1.4414|
;;;1113   	{
;;;1114   	ke_drv_i_temp=-Ib_ips_termokompensat/10;
001040  48b0              LDR      r0,|L1.4868|
001042  f04f070a          MOV      r7,#0xa
001046  f9b00000          LDRSH    r0,[r0,#0]  ; Ib_ips_termokompensat
00104a  f1c00000          RSB      r0,r0,#0
00104e  fb90f0f7          SDIV     r0,r0,r7
001052  b200              SXTH     r0,r0
;;;1115   	if(ke_drv_i_temp<0)ke_drv_i_temp=0;
001054  2800              CMP      r0,#0
001056  da01              BGE      |L1.4188|
001058  f04f0000          MOV      r0,#0
                  |L1.4188|
;;;1116   
;;;1117   	bat_hndl_plazma[3]=ke_drv_cnt_10s;
00105c  4aaa              LDR      r2,|L1.4872|
00105e  7b71              LDRB     r1,[r6,#0xd]  ; ke_drv_cnt_10s
001060  60d1              STR      r1,[r2,#0xc]  ; bat_hndl_plazma
;;;1118   	if(++ke_drv_cnt_10s>10)
001062  1c49              ADDS     r1,r1,#1
;;;1119   		{
;;;1120   		ke_drv_cnt_10s=0;
;;;1121   
;;;1122   		i_bat_buff_cnt++;
;;;1123   		if(i_bat_buff_cnt>=6)i_bat_buff_cnt=0;
;;;1124   		bat_hndl_plazma[2]=i_bat_buff_cnt;
;;;1125   		i_bat_buff[i_bat_buff_cnt]=ke_drv_i_temp;
;;;1126   		ke_drv_i_temp_temp=0;
;;;1127   		for(i=0;i<6;i++)
;;;1128   			{
;;;1129   			ke_drv_i_temp_temp+=i_bat_buff[i];
;;;1130   			}
;;;1131   		ke_drv_i_avg=ke_drv_i_temp_temp/6;
;;;1132   
;;;1133   		I_from_t_table[0]=BAT_C_POINT_1_6*6; 	//Ток при котором батарея разрядится за 1/6 часа (0.1А)
;;;1134   		I_from_t_table[1]=BAT_C_POINT_1_2*2; 	//Ток при котором батарея разрядится за 1/2 часа (0.1А)
;;;1135   		I_from_t_table[2]=BAT_C_POINT_1; 		//Ток при котором батарея разрядится за 1 час (0.1А)
;;;1136   		I_from_t_table[3]=BAT_C_POINT_3/3; 		//Ток при котором батарея разрядится за 3 часа (0.1А)
;;;1137   		I_from_t_table[4]=BAT_C_POINT_5/5; 		//Ток при котором батарея разрядится за 5 часов (0.1А)
;;;1138   		I_from_t_table[5]=BAT_C_POINT_10/10; 	//Ток при котором батарея разрядится за 10 часов (0.1А)
;;;1139   		I_from_t_table[6]=BAT_C_POINT_20/20; 	//Ток при котором батарея разрядится за 20 часов (0.1А)
;;;1140   		
;;;1141   		U_end_from_i_table[0]=BAT_U_END_1_6;	//Конечное напряжение контроля емкости при разряде за 1/6 часа
;;;1142   		U_end_from_i_table[1]=BAT_U_END_1_2;	//Конечное напряжение контроля емкости при разряде за 1/2 часа
;;;1143   		U_end_from_i_table[2]=BAT_U_END_1;		//Конечное напряжение контроля емкости при разряде за 1 час
;;;1144   		U_end_from_i_table[3]=BAT_U_END_3;		//Конечное напряжение контроля емкости при разряде за 3 часа
;;;1145   		U_end_from_i_table[4]=BAT_U_END_5;		//Конечное напряжение контроля емкости при разряде за 5 часов
;;;1146   		U_end_from_i_table[5]=BAT_U_END_10;		//Конечное напряжение контроля емкости при разряде за 10 часов
;;;1147   		U_end_from_i_table[6]=BAT_U_END_20;		//Конечное напряжение контроля емкости при разряде за 20 часов		
;;;1148   
;;;1149   		bat_hndl_plazma[1]=ke_drv_i_avg;
;;;1150   		bat_hndl_i_temp=ke_drv_i_avg;
001064  4ca0              LDR      r4,|L1.4840|
001066  b2c9              UXTB     r1,r1                 ;1118
001068  3480              ADDS     r4,r4,#0x80
00106a  7371              STRB     r1,[r6,#0xd]          ;1118
00106c  290a              CMP      r1,#0xa               ;1118
00106e  d967              BLS      |L1.4416|
001070  7375              STRB     r5,[r6,#0xd]          ;1120
001072  7bb1              LDRB     r1,[r6,#0xe]          ;1122  ; i_bat_buff_cnt
001074  f1010101          ADD      r1,r1,#1              ;1122
001078  b2c9              UXTB     r1,r1                 ;1122
00107a  73b1              STRB     r1,[r6,#0xe]          ;1122
00107c  2906              CMP      r1,#6                 ;1123
00107e  d300              BCC      |L1.4226|
001080  73b5              STRB     r5,[r6,#0xe]          ;1123
                  |L1.4226|
001082  7bb1              LDRB     r1,[r6,#0xe]          ;1124  ; i_bat_buff_cnt
001084  6091              STR      r1,[r2,#8]            ;1124  ; bat_hndl_plazma
001086  f8230011          STRH     r0,[r3,r1,LSL #1]     ;1125
00108a  f04f0100          MOV      r1,#0                 ;1126
00108e  4608              MOV      r0,r1                 ;1127
                  |L1.4240|
001090  f833c010          LDRH     r12,[r3,r0,LSL #1]    ;1129
001094  4461              ADD      r1,r1,r12             ;1129
001096  b209              SXTH     r1,r1                 ;1129
001098  f1000001          ADD      r0,r0,#1              ;1127
00109c  b2c0              UXTB     r0,r0                 ;1127
00109e  2806              CMP      r0,#6                 ;1127
0010a0  d3f6              BCC      |L1.4240|
0010a2  f04f0006          MOV      r0,#6                 ;1131
0010a6  fb91f0f0          SDIV     r0,r1,r0              ;1131
0010aa  b201              SXTH     r1,r0                 ;1131
0010ac  4897              LDR      r0,|L1.4876|
0010ae  f8df8258          LDR      r8,|L1.4872|
0010b2  8800              LDRH     r0,[r0,#0]            ;1133  ; BAT_C_POINT_1_6
0010b4  f1a8081c          SUB      r8,r8,#0x1c           ;1133
0010b8  eb000040          ADD      r0,r0,r0,LSL #1       ;1133
0010bc  ea4f0040          LSL      r0,r0,#1              ;1133
0010c0  f8a80000          STRH     r0,[r8,#0]            ;1133
0010c4  4892              LDR      r0,|L1.4880|
0010c6  8800              LDRH     r0,[r0,#0]            ;1134  ; BAT_C_POINT_1_2
0010c8  ea4f0040          LSL      r0,r0,#1              ;1134
0010cc  f8a80002          STRH     r0,[r8,#2]            ;1134
0010d0  4890              LDR      r0,|L1.4884|
0010d2  8800              LDRH     r0,[r0,#0]            ;1135  ; BAT_C_POINT_1
0010d4  f8a80004          STRH     r0,[r8,#4]            ;1135
0010d8  488f              LDR      r0,|L1.4888|
0010da  f04f0303          MOV      r3,#3                 ;1136
0010de  f9b00000          LDRSH    r0,[r0,#0]            ;1136  ; BAT_C_POINT_3
0010e2  fb90f0f3          SDIV     r0,r0,r3              ;1136
0010e6  f8a80006          STRH     r0,[r8,#6]            ;1136
0010ea  488c              LDR      r0,|L1.4892|
0010ec  f04f0305          MOV      r3,#5                 ;1137
0010f0  f9b00000          LDRSH    r0,[r0,#0]            ;1137  ; BAT_C_POINT_5
0010f4  fb90f0f3          SDIV     r0,r0,r3              ;1137
0010f8  f8a80008          STRH     r0,[r8,#8]            ;1137
0010fc  4888              LDR      r0,|L1.4896|
0010fe  f9b00000          LDRSH    r0,[r0,#0]            ;1138  ; BAT_C_POINT_10
001102  fb90f0f7          SDIV     r0,r0,r7              ;1138
001106  f8a8000a          STRH     r0,[r8,#0xa]          ;1138
00110a  4886              LDR      r0,|L1.4900|
00110c  f04f0314          MOV      r3,#0x14              ;1139
001110  f9b00000          LDRSH    r0,[r0,#0]            ;1139  ; BAT_C_POINT_20
001114  fb90f0f3          SDIV     r0,r0,r3              ;1139
001118  f8a8000c          STRH     r0,[r8,#0xc]          ;1139
00111c  4882              LDR      r0,|L1.4904|
00111e  f108090e          ADD      r9,r8,#0xe            ;1141
001122  f9b07000          LDRSH    r7,[r0,#0]            ;1141  ; BAT_U_END_1_6
001126  f8a97000          STRH     r7,[r9,#0]            ;1141
00112a  4880              LDR      r0,|L1.4908|
00112c  8800              LDRH     r0,[r0,#0]            ;1142  ; BAT_U_END_1_2
00112e  f8a90002          STRH     r0,[r9,#2]            ;1142
001132  487f              LDR      r0,|L1.4912|
001134  8800              LDRH     r0,[r0,#0]            ;1143  ; BAT_U_END_1
001136  f8a90004          STRH     r0,[r9,#4]            ;1143
00113a  487e              LDR      r0,|L1.4916|
00113c  e001              B        |L1.4418|
                  |L1.4414|
00113e  e11f              B        |L1.4992|
                  |L1.4416|
001140  e061              B        |L1.4614|
                  |L1.4418|
001142  8800              LDRH     r0,[r0,#0]            ;1144  ; BAT_U_END_3
001144  f8a90006          STRH     r0,[r9,#6]            ;1144
001148  487b              LDR      r0,|L1.4920|
00114a  8800              LDRH     r0,[r0,#0]            ;1145  ; BAT_U_END_5
00114c  f8a90008          STRH     r0,[r9,#8]            ;1145
001150  487a              LDR      r0,|L1.4924|
001152  8800              LDRH     r0,[r0,#0]            ;1146  ; BAT_U_END_10
001154  f8a9000a          STRH     r0,[r9,#0xa]          ;1146
001158  4879              LDR      r0,|L1.4928|
00115a  f9b0c000          LDRSH    r12,[r0,#0]           ;1147  ; BAT_U_END_20
00115e  f8a9c00c          STRH     r12,[r9,#0xc]         ;1147
001162  6051              STR      r1,[r2,#4]            ;1149  ; bat_hndl_plazma
001164  81a1              STRH     r1,[r4,#0xc]
;;;1151   		
;;;1152   		for(i=0;i<7;i++)
001166  f04f0000          MOV      r0,#0
                  |L1.4458|
;;;1153   			{
;;;1154   			if(bat_hndl_i_temp>=I_from_t_table[i])
00116a  f9383010          LDRSH    r3,[r8,r0,LSL #1]
00116e  428b              CMP      r3,r1
001170  dd04              BLE      |L1.4476|
001172  f1000001          ADD      r0,r0,#1              ;1152
001176  b2c0              UXTB     r0,r0                 ;1152
001178  2807              CMP      r0,#7                 ;1152
00117a  d3f6              BCC      |L1.4458|
                  |L1.4476|
;;;1155   				{
;;;1156   				break;
;;;1157   				}
;;;1158   			}
;;;1159   
;;;1160   		bat_hndl_plazma[0]=i;
00117c  6010              STR      r0,[r2,#0]  ; bat_hndl_plazma
00117e  f10d0a04          ADD      r10,sp,#4             ;1093
;;;1161   
;;;1162   		 if(i==0) bat_hndl_t_razr_ke=bat_hndl_t_razr_const[0];
001182  b1c8              CBZ      r0,|L1.4536|
;;;1163   		 else if((i>=1)&&(i<7))
001184  1e42              SUBS     r2,r0,#1
001186  2a06              CMP      r2,#6
001188  d219              BCS      |L1.4542|
;;;1164   		 	{
;;;1165   			short i1,i2;
;;;1166   			i1=I_from_t_table[i-1]-bat_hndl_i_temp;
00118a  f8383012          LDRH     r3,[r8,r2,LSL #1]
00118e  eba30101          SUB      r1,r3,r1
001192  b209              SXTH     r1,r1
;;;1167   			i2=I_from_t_table[i-1]-I_from_t_table[i];
001194  f8388010          LDRH     r8,[r8,r0,LSL #1]
001198  eba30308          SUB      r3,r3,r8
00119c  b21b              SXTH     r3,r3
;;;1168   			bat_hndl_t_razr_ke=bat_hndl_t_razr_const[i]-bat_hndl_t_razr_const[i-1];
00119e  f85a8020          LDR      r8,[r10,r0,LSL #2]
0011a2  f85a2022          LDR      r2,[r10,r2,LSL #2]
0011a6  eba80802          SUB      r8,r8,r2
;;;1169   			bat_hndl_t_razr_ke*=(long)i1;
0011aa  fb08f801          MUL      r8,r8,r1
;;;1170   			bat_hndl_t_razr_ke/=(long)i2;
0011ae  fb98f1f3          SDIV     r1,r8,r3
;;;1171   			bat_hndl_t_razr_ke+=bat_hndl_t_razr_const[i-1];
0011b2  4411              ADD      r1,r1,r2
0011b4  6521              STR      r1,[r4,#0x50]  ; bat_hndl_t_razr_ke
;;;1172   			}
0011b6  e006              B        |L1.4550|
                  |L1.4536|
0011b8  9901              LDR      r1,[sp,#4]            ;1162
0011ba  6521              STR      r1,[r4,#0x50]         ;1162  ; bat_hndl_t_razr_ke
0011bc  e003              B        |L1.4550|
                  |L1.4542|
;;;1173   		else if(i>=7)
0011be  2807              CMP      r0,#7
0011c0  d301              BCC      |L1.4550|
;;;1174   			{
;;;1175   			bat_hndl_t_razr_ke=bat_hndl_t_razr_const[6];
0011c2  9907              LDR      r1,[sp,#0x1c]
0011c4  6521              STR      r1,[r4,#0x50]  ; bat_hndl_t_razr_ke
                  |L1.4550|
;;;1176   			}
;;;1177   
;;;1178   		 if(i==0) bat_hndl_u_end=U_end_from_i_table[0];
0011c6  b1c0              CBZ      r0,|L1.4602|
;;;1179   		 else if((i>=1)&&(i<7))
0011c8  1e41              SUBS     r1,r0,#1
0011ca  2906              CMP      r1,#6
0011cc  d217              BCS      |L1.4606|
;;;1180   		 	{
;;;1181   			long u1,tempL;
;;;1182   
;;;1183   			tempL=(long)U_end_from_i_table[i]-(long)U_end_from_i_table[i-1];
0011ce  f9393010          LDRSH    r3,[r9,r0,LSL #1]
0011d2  f9392011          LDRSH    r2,[r9,r1,LSL #1]
0011d6  eba30302          SUB      r3,r3,r2
;;;1184   			u1=bat_hndl_t_razr_ke-bat_hndl_t_razr_const[i-1];
0011da  f85a1021          LDR      r1,[r10,r1,LSL #2]
0011de  6d27              LDR      r7,[r4,#0x50]  ; bat_hndl_t_razr_ke
0011e0  eba70701          SUB      r7,r7,r1
;;;1185   			tempL*=u1;
0011e4  fb03f307          MUL      r3,r3,r7
;;;1186   			u1=bat_hndl_t_razr_const[i]-bat_hndl_t_razr_const[i-1];
0011e8  f85a0020          LDR      r0,[r10,r0,LSL #2]
0011ec  eba00001          SUB      r0,r0,r1
;;;1187   			tempL/=u1;
0011f0  fb93f0f0          SDIV     r0,r3,r0
;;;1188   			tempL+=(long)U_end_from_i_table[i-1];
0011f4  4410              ADD      r0,r0,r2
;;;1189   			bat_hndl_u_end=(short)tempL;
0011f6  81e0              STRH     r0,[r4,#0xe]
;;;1190   			}
0011f8  e005              B        |L1.4614|
                  |L1.4602|
0011fa  81e7              STRH     r7,[r4,#0xe]          ;1178
0011fc  e003              B        |L1.4614|
                  |L1.4606|
;;;1191   		else if(i>=7)
0011fe  2807              CMP      r0,#7
001200  d301              BCC      |L1.4614|
;;;1192   			{
;;;1193   			bat_hndl_u_end=U_end_from_i_table[6];
001202  f8a4c00e          STRH     r12,[r4,#0xe]
                  |L1.4614|
;;;1194   			}
;;;1195   
;;;1196   		}
;;;1197   
;;;1198   
;;;1199   
;;;1200   	if(spc_phase==0)
001206  f8960025          LDRB     r0,[r6,#0x25]  ; spc_phase
;;;1201   		{
;;;1202   		//mess_send(MESS2BAT_HNDL,PARAM_BAT_MASK_OFF_AFTER_2SEC,(1<<(1-spc_bat)),20);
;;;1203   		mess_send(MESS2BPS_HNDL,PARAM_BPS_ALL_OFF_AFTER_2SEC,0xffff,20);
;;;1204   
;;;1205   		bat[0]._zar_cnt_ke+=abs(bat[spc_bat]._Ib);
;;;1206   	    	
;;;1207   		if(bat[0]._zar_cnt_ke>=AH_CONSTANT)
;;;1208   			{
;;;1209   			bat[0]._zar_cnt_ke-=AH_CONSTANT;
;;;1210   			lc640_write_int(ADR_EE_BAT_ZAR_CNT_KE[0],lc640_read_int(ADR_EE_BAT_ZAR_CNT_KE[0])+1);
00120a  4f39              LDR      r7,|L1.4848|
;;;1211   			}
;;;1212   
;;;1213   		bat[0]._time_min_cnt_ke++;
;;;1214   		if(bat[0]._time_min_cnt_ke>=60)
;;;1215   			{
;;;1216   			lc640_write_int(EE_ZVU_BAT_MIN_CNT_KE,lc640_read_int(EE_ZVU_BAT_MIN_CNT_KE)+1);
00120c  f44f78e3          MOV      r8,#0x1c6
001210  bbe8              CBNZ     r0,|L1.4750|
001212  2314              MOVS     r3,#0x14              ;1203
001214  f04f32ff          MOV      r2,#0xffffffff        ;1203
001218  21ce              MOVS     r1,#0xce              ;1203
00121a  20cd              MOVS     r0,#0xcd              ;1203
00121c  f7fffffe          BL       mess_send
001220  f8961024          LDRB     r1,[r6,#0x24]         ;1205  ; spc_bat
001224  f8df90c4          LDR      r9,|L1.4844|
001228  eb010041          ADD      r0,r1,r1,LSL #1       ;1205
00122c  eb001001          ADD      r0,r0,r1,LSL #4       ;1205
001230  eb090080          ADD      r0,r9,r0,LSL #2       ;1205
001234  f9b00008          LDRSH    r0,[r0,#8]            ;1205
001238  f7fffffe          BL       abs
00123c  f8d91018          LDR      r1,[r9,#0x18]         ;1205  ; bat
001240  4401              ADD      r1,r1,r0              ;1205
001242  f8c91018          STR      r1,[r9,#0x18]         ;1205  ; bat
001246  f64840a0          MOV      r0,#0x8ca0            ;1207
00124a  4281              CMP      r1,r0                 ;1207
00124c  db0c              BLT      |L1.4712|
00124e  eba10100          SUB      r1,r1,r0              ;1209
001252  f8c91018          STR      r1,[r9,#0x18]         ;1209  ; bat
001256  8838              LDRH     r0,[r7,#0]            ;1210  ; ADR_EE_BAT_ZAR_CNT_KE
001258  f7fffffe          BL       lc640_read_int
00125c  1c40              ADDS     r0,r0,#1              ;1210
00125e  b201              SXTH     r1,r0                 ;1210
001260  f9b70000          LDRSH    r0,[r7,#0]            ;1210  ; ADR_EE_BAT_ZAR_CNT_KE
001264  f7fffffe          BL       lc640_write_int
                  |L1.4712|
001268  f8b9004a          LDRH     r0,[r9,#0x4a]         ;1213  ; bat
00126c  f1000001          ADD      r0,r0,#1              ;1213
001270  b281              UXTH     r1,r0                 ;1213
001272  f8a9104a          STRH     r1,[r9,#0x4a]         ;1213
001276  293c              CMP      r1,#0x3c              ;1214
001278  d309              BCC      |L1.4750|
00127a  4640              MOV      r0,r8
00127c  f7fffffe          BL       lc640_read_int
001280  1c40              ADDS     r0,r0,#1
001282  b201              SXTH     r1,r0
001284  4640              MOV      r0,r8
001286  f7fffffe          BL       lc640_write_int
;;;1217   			bat[0]._time_min_cnt_ke=0;
00128a  f8a9504a          STRH     r5,[r9,#0x4a]
                  |L1.4750|
;;;1218   			}
;;;1219   		}
;;;1220   
;;;1221   	else if(spc_phase==1)
;;;1222   		{
;;;1223   		//mess_send(MESS2BAT_HNDL,PARAM_BAT_MASK_OFF_AFTER_2SEC,(1<<(1-spc_bat)),20);
;;;1224   		}
;;;1225   
;;;1226   	if(out_U<bat_hndl_u_end)
00128e  482d              LDR      r0,|L1.4932|
001290  f9b4100e          LDRSH    r1,[r4,#0xe]  ; bat_hndl_u_end
001294  f9b00000          LDRSH    r0,[r0,#0]  ; out_U
001298  4288              CMP      r0,r1
00129a  da6f              BGE      |L1.4988|
;;;1227   		{
;;;1228   		cnt_end_ke++;
00129c  f8b6006a          LDRH     r0,[r6,#0x6a]  ; cnt_end_ke
0012a0  f1000001          ADD      r0,r0,#1
0012a4  b200              SXTH     r0,r0
0012a6  f8a6006a          STRH     r0,[r6,#0x6a]
;;;1229   		if(cnt_end_ke>=30)
0012aa  281e              CMP      r0,#0x1e
0012ac  db68              BLT      |L1.4992|
;;;1230   			{
;;;1231   			
;;;1232   			if((spc_stat==spcKE)&&(spc_phase==0))
0012ae  f8960023          LDRB     r0,[r6,#0x23]  ; spc_stat
0012b2  2801              CMP      r0,#1
0012b4  d156              BNE      |L1.4964|
0012b6  f8960025          LDRB     r0,[r6,#0x25]  ; spc_phase
0012ba  b998              CBNZ     r0,|L1.4836|
;;;1233   				{
;;;1234   				lc640_write_int(ADR_EE_BAT_C_REAL[0],lc640_read_int(ADR_EE_BAT_ZAR_CNT_KE[0]));
0012bc  8838              LDRH     r0,[r7,#0]  ; ADR_EE_BAT_ZAR_CNT_KE
0012be  f7fffffe          BL       lc640_read_int
0012c2  b201              SXTH     r1,r0
0012c4  4820              LDR      r0,|L1.4936|
0012c6  f9b00000          LDRSH    r0,[r0,#0]  ; ADR_EE_BAT_C_REAL
0012ca  f7fffffe          BL       lc640_write_int
;;;1235   				ke_zvu_mem_hndl(0,lc640_read_int(ADR_EE_BAT_ZAR_CNT_KE[0]),lc640_read_int(EE_ZVU_BAT_MIN_CNT_KE));
0012ce  4640              MOV      r0,r8
0012d0  f7fffffe          BL       lc640_read_int
0012d4  b284              UXTH     r4,r0
0012d6  8838              LDRH     r0,[r7,#0]  ; ADR_EE_BAT_ZAR_CNT_KE
0012d8  f7fffffe          BL       lc640_read_int
0012dc  b281              UXTH     r1,r0
0012de  4622              MOV      r2,r4
0012e0  2000              MOVS     r0,#0
0012e2  e033              B        |L1.4940|
                  |L1.4836|
0012e4  e03e              B        |L1.4964|
0012e6  0000              DCW      0x0000
                  |L1.4840|
                          DCD      ||area_number.25||
                  |L1.4844|
                          DCD      bat
                  |L1.4848|
                          DCD      ADR_EE_BAT_ZAR_CNT_KE
                  |L1.4852|
                          DCD      bat_u_old_cnt
                  |L1.4856|
                          DCD      0x40024020
                  |L1.4860|
                          DCD      ||area_number.19||+0x4
                  |L1.4864|
                          DCD      ||.bss||
                  |L1.4868|
                          DCD      Ib_ips_termokompensat
                  |L1.4872|
                          DCD      ||.bss||+0x468
                  |L1.4876|
                          DCD      BAT_C_POINT_1_6
                  |L1.4880|
                          DCD      BAT_C_POINT_1_2
                  |L1.4884|
                          DCD      BAT_C_POINT_1
                  |L1.4888|
                          DCD      BAT_C_POINT_3
                  |L1.4892|
                          DCD      BAT_C_POINT_5
                  |L1.4896|
                          DCD      BAT_C_POINT_10
                  |L1.4900|
                          DCD      BAT_C_POINT_20
                  |L1.4904|
                          DCD      BAT_U_END_1_6
                  |L1.4908|
                          DCD      BAT_U_END_1_2
                  |L1.4912|
                          DCD      BAT_U_END_1
                  |L1.4916|
                          DCD      BAT_U_END_3
                  |L1.4920|
                          DCD      BAT_U_END_5
                  |L1.4924|
                          DCD      BAT_U_END_10
                  |L1.4928|
                          DCD      BAT_U_END_20
                  |L1.4932|
                          DCD      out_U
                  |L1.4936|
                          DCD      ADR_EE_BAT_C_REAL
                  |L1.4940|
00134c  f7fffffe          BL       ke_zvu_mem_hndl
;;;1236   				lc640_write_int(ADR_EE_BAT_ZAR_CNT[0],0);
001350  48ff              LDR      r0,|L1.5968|
001352  2100              MOVS     r1,#0
001354  f9b00000          LDRSH    r0,[r0,#0]  ; ADR_EE_BAT_ZAR_CNT
001358  f7fffffe          BL       lc640_write_int
;;;1237   				cntrl_stat=50;
00135c  f04f0032          MOV      r0,#0x32
001360  8670              STRH     r0,[r6,#0x32]
;;;1238   				cntrl_stat_old=50;
001362  86b0              STRH     r0,[r6,#0x34]
                  |L1.4964|
;;;1239   				}
;;;1240   
;;;1241   			spc_stat=spcOFF;
001364  f8865023          STRB     r5,[r6,#0x23]
;;;1242   			__ee_spc_stat=spcOFF;
001368  f8a6506e          STRH     r5,[r6,#0x6e]
;;;1243   			lc640_write_int(EE_SPC_STAT,spcOFF);
00136c  b008              ADD      sp,sp,#0x20
00136e  2100              MOVS     r1,#0
001370  e8bd47f0          POP      {r4-r10,lr}
001374  f240209a          MOV      r0,#0x29a
001378  f7ffbffe          B.W      lc640_write_int
                  |L1.4988|
;;;1244   
;;;1245   			}
;;;1246   		}
;;;1247   	else cnt_end_ke=0;
00137c  f8a6506a          STRH     r5,[r6,#0x6a]
                  |L1.4992|
;;;1248   
;;;1249   	}
;;;1250   			
;;;1251   }
001380  b008              ADD      sp,sp,#0x20
001382  e8bd87f0          POP      {r4-r10,pc}
;;;1252   #endif
                          ENDP

                  vz_start PROC
;;;1322   //-----------------------------------------------
;;;1323   char vz_start(char hour)
001386  b570              PUSH     {r4-r6,lr}
;;;1324   {          
001388  4605              MOV      r5,r0
;;;1325   char out;
;;;1326   out=0;
00138a  f04f0600          MOV      r6,#0
;;;1327   if((spc_stat==spcOFF)&&(speedChrgBlckStat!=1))
00138e  4cf1              LDR      r4,|L1.5972|
001390  f8940023          LDRB     r0,[r4,#0x23]  ; spc_stat
001394  bba0              CBNZ     r0,|L1.5120|
001396  48f0              LDR      r0,|L1.5976|
001398  8800              LDRH     r0,[r0,#0]  ; speedChrgBlckStat
00139a  2801              CMP      r0,#1
00139c  d030              BEQ      |L1.5120|
;;;1328   	{
;;;1329   	spc_stat=spcVZ;
00139e  f1040430          ADD      r4,r4,#0x30
0013a2  f04f0102          MOV      r1,#2
0013a6  f8041c0d          STRB     r1,[r4,#-0xd]
;;;1330   	__ee_spc_stat=spcVZ; 
0013aa  87e1              STRH     r1,[r4,#0x3e]
;;;1331   	lc640_write_int(EE_SPC_STAT,__ee_spc_stat);   
0013ac  f240209a          MOV      r0,#0x29a
0013b0  f7fffffe          BL       lc640_write_int
;;;1332   	vz_cnt_h=hour;
0013b4  86e5              STRH     r5,[r4,#0x36]
;;;1333   	__ee_vz_cnt=hour*60;
0013b6  ebc51005          RSB      r0,r5,r5,LSL #4
0013ba  ea4f0080          LSL      r0,r0,#2
0013be  87a0              STRH     r0,[r4,#0x3c]
0013c0  f1a40430          SUB      r4,r4,#0x30
;;;1334   	if(hour==0)__ee_vz_cnt=30;
0013c4  b91d              CBNZ     r5,|L1.5070|
0013c6  f04f001e          MOV      r0,#0x1e
0013ca  f8a4006c          STRH     r0,[r4,#0x6c]
                  |L1.5070|
;;;1335   	lc640_write_int(EE_VZ_CNT,__ee_vz_cnt);
0013ce  f1040462          ADD      r4,r4,#0x62
0013d2  f44f7027          MOV      r0,#0x29c
0013d6  f9b4100a          LDRSH    r1,[r4,#0xa]  ; __ee_vz_cnt
0013da  f7fffffe          BL       lc640_write_int
;;;1336   	lc640_write_int(EE_SPC_VZ_LENGT,__ee_vz_cnt);	
0013de  f9b4100a          LDRSH    r1,[r4,#0xa]  ; __ee_vz_cnt
0013e2  f44f702a          MOV      r0,#0x2a8
0013e6  f7fffffe          BL       lc640_write_int
;;;1337   	vz_cnt_h_=0;
0013ea  f04f0000          MOV      r0,#0
0013ee  80e0              STRH     r0,[r4,#6]
;;;1338   	vz_cnt_s=0;
0013f0  8020              STRH     r0,[r4,#0]
;;;1339   	vz_cnt_s_=0;
0013f2  8060              STRH     r0,[r4,#2]
;;;1340   	out=1;
0013f4  f04f0601          MOV      r6,#1
;;;1341   	vz_mem_hndl(1);
0013f8  f04f0001          MOV      r0,#1
0013fc  f7fffffe          BL       vz_mem_hndl
                  |L1.5120|
;;;1342   	}
;;;1343   //else if((spc_stat==spc_KE1p1)||(spc_stat==spc_KE1p2)) out=22; 
;;;1344   //else if((spc_stat==spc_KE2p1)||(spc_stat==spc_KE2p2)) out=33;
;;;1345   //plazma=out;	
;;;1346   return out;
001400  4630              MOV      r0,r6
;;;1347   }
001402  bd70              POP      {r4-r6,pc}
;;;1348   
                          ENDP

                  vz_stop PROC
;;;1349   //-----------------------------------------------
;;;1350   void vz_stop(void)
001404  b510              PUSH     {r4,lr}
;;;1351   {
;;;1352   if(spc_stat==spcVZ)
001406  4cd3              LDR      r4,|L1.5972|
001408  f8940023          LDRB     r0,[r4,#0x23]  ; spc_stat
00140c  2802              CMP      r0,#2
00140e  d113              BNE      |L1.5176|
;;;1353        {
;;;1354   vz_mem_hndl(vz_cnt_h);          
001410  f1040430          ADD      r4,r4,#0x30
001414  8ee0              LDRH     r0,[r4,#0x36]  ; vz_cnt_h
001416  f7fffffe          BL       vz_mem_hndl
;;;1355   vz_cnt_s=0;
00141a  f04f0000          MOV      r0,#0
00141e  8660              STRH     r0,[r4,#0x32]
;;;1356   vz_cnt_h=0;
001420  86e0              STRH     r0,[r4,#0x36]
;;;1357   vz_cnt_h_=0;
001422  8720              STRH     r0,[r4,#0x38]
;;;1358   spc_stat=spcOFF;
001424  f8040c0d          STRB     r0,[r4,#-0xd]
;;;1359   
;;;1360   		__ee_spc_stat=spcOFF;
001428  87e0              STRH     r0,[r4,#0x3e]
;;;1361   		lc640_write_int(EE_SPC_STAT,spcOFF);
00142a  4601              MOV      r1,r0
00142c  e8bd4010          POP      {r4,lr}
001430  f240209a          MOV      r0,#0x29a
001434  f7ffbffe          B.W      lc640_write_int
                  |L1.5176|
;;;1362        }
;;;1363   
;;;1364   }
001438  bd10              POP      {r4,pc}
;;;1365   
                          ENDP

                  amper_chas_cnt_drv PROC
;;;1367   //-----------------------------------------------
;;;1368   void amper_chas_cnt_drv(void)
00143a  b510              PUSH     {r4,lr}
;;;1369   {
;;;1370   
;;;1371   amper_chas_cnt_drv_summ+=(long)Ib_ips_termokompensat;
00143c  4ac5              LDR      r2,|L1.5972|
00143e  49c7              LDR      r1,|L1.5980|
001440  3280              ADDS     r2,r2,#0x80
001442  f9b11000          LDRSH    r1,[r1,#0]  ; Ib_ips_termokompensat
001446  6e10              LDR      r0,[r2,#0x60]  ; amper_chas_cnt_drv_summ
001448  4401              ADD      r1,r1,r0
00144a  6611              STR      r1,[r2,#0x60]  ; amper_chas_cnt_drv_summ
;;;1372   
;;;1373   if(amper_chas_cnt_drv_summ>=36000L)
00144c  f64843a0          MOV      r3,#0x8ca0
;;;1374   	{
;;;1375   	amper_chas_cnt_drv_summ-=36000L;
;;;1376   	lc640_write_int(EE_AMPER_CHAS_CNT,lc640_read_int(EE_AMPER_CHAS_CNT)+1);
001450  f44f74e4          MOV      r4,#0x1c8
001454  4299              CMP      r1,r3                 ;1373
001456  db0c              BLT      |L1.5234|
001458  eba10103          SUB      r1,r1,r3              ;1375
00145c  6611              STR      r1,[r2,#0x60]         ;1375  ; amper_chas_cnt_drv_summ
00145e  4620              MOV      r0,r4
001460  f7fffffe          BL       lc640_read_int
001464  1c40              ADDS     r0,r0,#1
001466  b201              SXTH     r1,r0
001468  4620              MOV      r0,r4
00146a  e8bd4010          POP      {r4,lr}
00146e  f7ffbffe          B.W      lc640_write_int
                  |L1.5234|
;;;1377   	}
;;;1378   else if(amper_chas_cnt_drv_summ<=-36000L)
001472  48bb              LDR      r0,|L1.5984|
001474  4281              CMP      r1,r0
001476  dc0c              BGT      |L1.5266|
;;;1379   	{
;;;1380   	amper_chas_cnt_drv_summ+=36000L;
001478  eb010003          ADD      r0,r1,r3
00147c  6610              STR      r0,[r2,#0x60]  ; amper_chas_cnt_drv_summ
;;;1381   	lc640_write_int(EE_AMPER_CHAS_CNT,lc640_read_int(EE_AMPER_CHAS_CNT)-1);
00147e  4620              MOV      r0,r4
001480  f7fffffe          BL       lc640_read_int
001484  1e40              SUBS     r0,r0,#1
001486  b201              SXTH     r1,r0
001488  4620              MOV      r0,r4
00148a  e8bd4010          POP      {r4,lr}
00148e  f7ffbffe          B.W      lc640_write_int
                  |L1.5266|
;;;1382   	}
;;;1383   }
001492  bd10              POP      {r4,pc}
;;;1384   #endif
                          ENDP

                  avz_next_date_hndl PROC
;;;1386   //-----------------------------------------------
;;;1387   void avz_next_date_hndl(void)
001494  b570              PUSH     {r4-r6,lr}
;;;1388   {
;;;1389   if((LPC_RTC->MONTH+AVZ)>12)lc640_write_int(EE_YEAR_AVZ,LPC_RTC->YEAR+1);
001496  4cb3              LDR      r4,|L1.5988|
001498  f8940038          LDRB     r0,[r4,#0x38]
00149c  4db2              LDR      r5,|L1.5992|
00149e  7829              LDRB     r1,[r5,#0]  ; AVZ
0014a0  4408              ADD      r0,r0,r1
0014a2  280c              CMP      r0,#0xc
0014a4  d906              BLS      |L1.5300|
0014a6  8fa0              LDRH     r0,[r4,#0x3c]
0014a8  1c40              ADDS     r0,r0,#1
0014aa  b201              SXTH     r1,r0
0014ac  20b8              MOVS     r0,#0xb8
0014ae  f7fffffe          BL       lc640_write_int
0014b2  e004              B        |L1.5310|
                  |L1.5300|
;;;1390   else lc640_write_int(EE_YEAR_AVZ,LPC_RTC->YEAR);
0014b4  f9b4103c          LDRSH    r1,[r4,#0x3c]
0014b8  20b8              MOVS     r0,#0xb8
0014ba  f7fffffe          BL       lc640_write_int
                  |L1.5310|
;;;1391   
;;;1392   //lc640_write_int(EE_YEAR_AVZ,6);
;;;1393   
;;;1394   if((LPC_RTC->MONTH+AVZ)>12)lc640_write_int(EE_MONTH_AVZ,(LPC_RTC->MONTH+AVZ)-12);
0014be  f8941038          LDRB     r1,[r4,#0x38]
0014c2  7828              LDRB     r0,[r5,#0]  ; AVZ
0014c4  4401              ADD      r1,r1,r0
0014c6  290c              CMP      r1,#0xc
0014c8  d907              BLS      |L1.5338|
0014ca  f8941038          LDRB     r1,[r4,#0x38]
0014ce  380c              SUBS     r0,r0,#0xc
0014d0  4401              ADD      r1,r1,r0
0014d2  20b6              MOVS     r0,#0xb6
0014d4  f7fffffe          BL       lc640_write_int
0014d8  e005              B        |L1.5350|
                  |L1.5338|
;;;1395   else lc640_write_int(EE_MONTH_AVZ,LPC_RTC->MONTH+AVZ);                                                 
0014da  f8941038          LDRB     r1,[r4,#0x38]
0014de  4401              ADD      r1,r1,r0
0014e0  20b6              MOVS     r0,#0xb6
0014e2  f7fffffe          BL       lc640_write_int
                  |L1.5350|
;;;1396   
;;;1397   //lc640_write_int(EE_MONTH_AVZ,5);
;;;1398   
;;;1399   if(LPC_RTC->DOM>28) lc640_write_int(EE_DATE_AVZ,28);
0014e6  f894002c          LDRB     r0,[r4,#0x2c]
0014ea  281c              CMP      r0,#0x1c
0014ec  d904              BLS      |L1.5368|
0014ee  211c              MOVS     r1,#0x1c
0014f0  20b4              MOVS     r0,#0xb4
0014f2  f7fffffe          BL       lc640_write_int
0014f6  e004              B        |L1.5378|
                  |L1.5368|
;;;1400   else lc640_write_int(EE_DATE_AVZ,LPC_RTC->DOM);
0014f8  f894102c          LDRB     r1,[r4,#0x2c]
0014fc  20b4              MOVS     r0,#0xb4
0014fe  f7fffffe          BL       lc640_write_int
                  |L1.5378|
;;;1401   
;;;1402   //lc640_write_int(EE_DATE_AVZ,4);
;;;1403   
;;;1404   lc640_write_int(EE_HOUR_AVZ,LPC_RTC->HOUR);
001502  f1040420          ADD      r4,r4,#0x20
001506  7a21              LDRB     r1,[r4,#8]
001508  f04f00ae          MOV      r0,#0xae
00150c  f7fffffe          BL       lc640_write_int
;;;1405   lc640_write_int(EE_MIN_AVZ,LPC_RTC->MIN);
001510  7921              LDRB     r1,[r4,#4]
001512  20b0              MOVS     r0,#0xb0
001514  f7fffffe          BL       lc640_write_int
;;;1406   lc640_write_int(EE_SEC_AVZ,LPC_RTC->SEC);
001518  7821              LDRB     r1,[r4,#0]
00151a  e8bd4070          POP      {r4-r6,lr}
00151e  20b2              MOVS     r0,#0xb2
001520  f7ffbffe          B.W      lc640_write_int
;;;1407   
;;;1408   }
;;;1409   
                          ENDP

                  avz_drv PROC
;;;1410   //-----------------------------------------------
;;;1411   void avz_drv(void)                               
001524  b510              PUSH     {r4,lr}
;;;1412   {                
;;;1413   if(AVZ!=AVZ_OFF)
001526  4890              LDR      r0,|L1.5992|
;;;1414   	{
;;;1415   	if((LPC_RTC->YEAR==YEAR_AVZ)&&(LPC_RTC->MONTH==MONTH_AVZ)&&(LPC_RTC->DOM==DATE_AVZ)&&(LPC_RTC->HOUR==HOUR_AVZ)&&(LPC_RTC->MIN==MIN_AVZ)&&(LPC_RTC->SEC==SEC_AVZ))
;;;1416   		{
;;;1417   		bAVZ=1;
001528  4c8a              LDR      r4,|L1.5972|
00152a  7800              LDRB     r0,[r0,#0]            ;1413  ; AVZ
00152c  b338              CBZ      r0,|L1.5502|
00152e  488d              LDR      r0,|L1.5988|
001530  8f82              LDRH     r2,[r0,#0x3c]         ;1415
001532  498e              LDR      r1,|L1.5996|
001534  8809              LDRH     r1,[r1,#0]            ;1415  ; YEAR_AVZ
001536  428a              CMP      r2,r1                 ;1415
001538  d121              BNE      |L1.5502|
00153a  f8902038          LDRB     r2,[r0,#0x38]         ;1415
00153e  498c              LDR      r1,|L1.6000|
001540  8809              LDRH     r1,[r1,#0]            ;1415  ; MONTH_AVZ
001542  428a              CMP      r2,r1                 ;1415
001544  d11b              BNE      |L1.5502|
001546  f890102c          LDRB     r1,[r0,#0x2c]         ;1415
00154a  4a8a              LDR      r2,|L1.6004|
00154c  8812              LDRH     r2,[r2,#0]            ;1415  ; DATE_AVZ
00154e  4291              CMP      r1,r2                 ;1415
001550  d115              BNE      |L1.5502|
001552  f8901028          LDRB     r1,[r0,#0x28]         ;1415
001556  4a88              LDR      r2,|L1.6008|
001558  8812              LDRH     r2,[r2,#0]            ;1415  ; HOUR_AVZ
00155a  4291              CMP      r1,r2                 ;1415
00155c  d10f              BNE      |L1.5502|
00155e  f8901024          LDRB     r1,[r0,#0x24]         ;1415
001562  4a86              LDR      r2,|L1.6012|
001564  8812              LDRH     r2,[r2,#0]            ;1415  ; MIN_AVZ
001566  4291              CMP      r1,r2                 ;1415
001568  d109              BNE      |L1.5502|
00156a  f8900020          LDRB     r0,[r0,#0x20]         ;1415
00156e  4984              LDR      r1,|L1.6016|
001570  8809              LDRH     r1,[r1,#0]            ;1415  ; SEC_AVZ
001572  4288              CMP      r0,r1                 ;1415
001574  d103              BNE      |L1.5502|
001576  f04f0001          MOV      r0,#1
00157a  f8840026          STRB     r0,[r4,#0x26]
                  |L1.5502|
;;;1418   		}
;;;1419   	}
;;;1420   if(bAVZ)
00157e  f8940026          LDRB     r0,[r4,#0x26]  ; bAVZ
001582  2800              CMP      r0,#0
001584  d00d              BEQ      |L1.5538|
;;;1421   	{
;;;1422   	if(vz_start(AVZ_TIME))
001586  487f              LDR      r0,|L1.6020|
001588  8800              LDRH     r0,[r0,#0]  ; AVZ_TIME
00158a  b2c0              UXTB     r0,r0
00158c  f7fffffe          BL       vz_start
001590  2800              CMP      r0,#0
001592  d006              BEQ      |L1.5538|
;;;1423   		{
;;;1424   		bAVZ=0;
001594  f04f0000          MOV      r0,#0
001598  f8840026          STRB     r0,[r4,#0x26]
;;;1425   		avz_next_date_hndl();
00159c  e8bd4010          POP      {r4,lr}
0015a0  e7fe              B        avz_next_date_hndl
                  |L1.5538|
;;;1426   		}
;;;1427   	}	
;;;1428   
;;;1429   }
0015a2  bd10              POP      {r4,pc}
;;;1430   
                          ENDP

                  vz_drv PROC
;;;1431   //-----------------------------------------------
;;;1432   void vz_drv(void)
0015a4  b538              PUSH     {r3-r5,lr}
;;;1433   { 
;;;1434   if(spc_stat==spcVZ)
0015a6  4c6b              LDR      r4,|L1.5972|
0015a8  f8940023          LDRB     r0,[r4,#0x23]  ; spc_stat
0015ac  2802              CMP      r0,#2
0015ae  d11d              BNE      |L1.5612|
;;;1435   	{
;;;1436   	if((sk_stat[0]==1)||(VZ_CH_VENT_BLOK==0))
0015b0  4875              LDR      r0,|L1.6024|
0015b2  7800              LDRB     r0,[r0,#0]  ; sk_stat
0015b4  2801              CMP      r0,#1
0015b6  d01a              BEQ      |L1.5614|
0015b8  4874              LDR      r0,|L1.6028|
0015ba  8800              LDRH     r0,[r0,#0]  ; VZ_CH_VENT_BLOK
0015bc  2800              CMP      r0,#0
0015be  d016              BEQ      |L1.5614|
;;;1437   		{
;;;1438   
;;;1439   	if(vz_cnt_s_<3600)
;;;1440   		{
;;;1441   		vz_cnt_s_++;
;;;1442   		if(vz_cnt_s_>=3600)
;;;1443   			{
;;;1444   			vz_cnt_s_=0;
;;;1445   			if(vz_cnt_h)
;;;1446   				{
;;;1447   				vz_cnt_h--;
;;;1448   				vz_cnt_h_++;
;;;1449   				}
;;;1450   			}
;;;1451   		}
;;;1452   
;;;1453   
;;;1454   	if(vz_cnt_s<60)
;;;1455   		{
;;;1456   		vz_cnt_s++;
;;;1457   		if(vz_cnt_s>=60)
;;;1458   			{
;;;1459   			vz_cnt_s=0;
;;;1460   			
;;;1461   			__ee_vz_cnt--;
;;;1462   			lc640_write_int(EE_VZ_CNT,__ee_vz_cnt);
;;;1463   			if((!__ee_vz_cnt)||(speedChrgBlckStat==1))
;;;1464   				{
;;;1465   				spc_stat=spcOFF;
;;;1466   						__ee_spc_stat=spcOFF;
;;;1467   		lc640_write_int(EE_SPC_STAT,spcOFF);
;;;1468   
;;;1469   //				hv_vz_stat=hvsOFF;
;;;1470   //		lc640_write(EE_HV_VZ_STAT,hvsOFF);
;;;1471   				vz_mem_hndl(0);
;;;1472   				}
;;;1473   			}
;;;1474   		}
;;;1475   		vz_error=0; 
;;;1476   		}
;;;1477   	else 
;;;1478   		{
;;;1479   		vz_error=1; 
0015c0  f04f0001          MOV      r0,#1
0015c4  7060              STRB     r0,[r4,#1]
;;;1480   		if(((LPC_RTC->SEC)%10)==0)
0015c6  4872              LDR      r0,|L1.6032|
0015c8  7800              LDRB     r0,[r0,#0]
0015ca  f04f010a          MOV      r1,#0xa
0015ce  fbb0f2f1          UDIV     r2,r0,r1
0015d2  fb010012          MLS      r0,r1,r2,r0
0015d6  2800              CMP      r0,#0
0015d8  d108              BNE      |L1.5612|
;;;1481   			{
;;;1482   			show_mess(	"ВЫРАВНИВАЮЩИЙ ЗАРЯД ",
0015da  f2413088          MOV      r0,#0x1388
0015de  9000              STR      r0,[sp,#0]
0015e0  a36c              ADR      r3,|L1.6036|
0015e2  a272              ADR      r2,|L1.6060|
0015e4  a177              ADR      r1,|L1.6084|
0015e6  a07d              ADR      r0,|L1.6108|
0015e8  f7fffffe          BL       show_mess
                  |L1.5612|
;;;1483   						"    ЗАБЛОКИРОВАН    ",
;;;1484   						"     НЕИСПРАВНА     ",
;;;1485   						"    ВЕНТИЛЯЦИЯ!!!   ",
;;;1486   						5000);			
;;;1487   			}
;;;1488   		}
;;;1489   /*	if(vz_cnt_s_>=3)
;;;1490   		{
;;;1491   		if(sk_stat[0]==0)
;;;1492   		} */
;;;1493   
;;;1494   	}
;;;1495   
;;;1496   
;;;1497   } 
0015ec  bd38              POP      {r3-r5,pc}
                  |L1.5614|
0015ee  f8b40064          LDRH     r0,[r4,#0x64]         ;1439  ; vz_cnt_s_
0015f2  f44f6161          MOV      r1,#0xe10             ;1439
0015f6  2500              MOVS     r5,#0                 ;1436
0015f8  4288              CMP      r0,r1                 ;1439
0015fa  d215              BCS      |L1.5672|
0015fc  f1000001          ADD      r0,r0,#1              ;1441
001600  b280              UXTH     r0,r0                 ;1441
001602  f8a40064          STRH     r0,[r4,#0x64]         ;1441
001606  4288              CMP      r0,r1                 ;1442
001608  d30e              BCC      |L1.5672|
00160a  f8a45064          STRH     r5,[r4,#0x64]         ;1444
00160e  f8b40066          LDRH     r0,[r4,#0x66]         ;1445  ; vz_cnt_h
001612  b148              CBZ      r0,|L1.5672|
001614  f1a00001          SUB      r0,r0,#1              ;1447
001618  f8240f66          STRH     r0,[r4,#0x66]!        ;1447
00161c  8860              LDRH     r0,[r4,#2]            ;1448  ; vz_cnt_h_
00161e  f1000001          ADD      r0,r0,#1              ;1448
001622  8060              STRH     r0,[r4,#2]            ;1448
001624  f1a40466          SUB      r4,r4,#0x66           ;1448
                  |L1.5672|
001628  f8b40062          LDRH     r0,[r4,#0x62]         ;1454  ; vz_cnt_s
00162c  283c              CMP      r0,#0x3c              ;1454
00162e  d225              BCS      |L1.5756|
001630  f1000001          ADD      r0,r0,#1              ;1456
001634  b280              UXTH     r0,r0                 ;1456
001636  f8a40062          STRH     r0,[r4,#0x62]         ;1456
00163a  283c              CMP      r0,#0x3c              ;1457
00163c  d31e              BCC      |L1.5756|
00163e  f8245f62          STRH     r5,[r4,#0x62]!        ;1459
001642  8960              LDRH     r0,[r4,#0xa]          ;1461  ; __ee_vz_cnt
001644  f1a00001          SUB      r0,r0,#1              ;1461
001648  b201              SXTH     r1,r0                 ;1461
00164a  8161              STRH     r1,[r4,#0xa]          ;1461
00164c  f44f7027          MOV      r0,#0x29c             ;1462
001650  f7fffffe          BL       lc640_write_int
001654  8960              LDRH     r0,[r4,#0xa]          ;1463  ; __ee_vz_cnt
001656  f1a40462          SUB      r4,r4,#0x62           ;1463
00165a  b118              CBZ      r0,|L1.5732|
00165c  483e              LDR      r0,|L1.5976|
00165e  8800              LDRH     r0,[r0,#0]            ;1463  ; speedChrgBlckStat
001660  2801              CMP      r0,#1                 ;1463
001662  d10b              BNE      |L1.5756|
                  |L1.5732|
001664  f8845023          STRB     r5,[r4,#0x23]         ;1465
001668  f8a4506e          STRH     r5,[r4,#0x6e]         ;1466
00166c  2100              MOVS     r1,#0                 ;1467
00166e  f240209a          MOV      r0,#0x29a             ;1467
001672  f7fffffe          BL       lc640_write_int
001676  2000              MOVS     r0,#0                 ;1471
001678  f7fffffe          BL       vz_mem_hndl
                  |L1.5756|
00167c  7065              STRB     r5,[r4,#1]            ;1475
00167e  bd38              POP      {r3-r5,pc}
;;;1498   
                          ENDP

                  vz1_drv PROC
;;;1500   //драйвер уравнительного заряда
;;;1501   void vz1_drv(void)
001680  e92d4ff8          PUSH     {r3-r11,lr}
;;;1502   {
;;;1503   if(volt_region_cnt)volt_region_cnt--;
001684  f8df80cc          LDR      r8,|L1.5972|
001688  f9b8007c          LDRSH    r0,[r8,#0x7c]  ; volt_region_cnt
00168c  b118              CBZ      r0,|L1.5782|
00168e  f1a00001          SUB      r0,r0,#1
001692  f8a8007c          STRH     r0,[r8,#0x7c]
                  |L1.5782|
;;;1504   if(vz1_stat==vz1sOFF)
001696  f8980005          LDRB     r0,[r8,#5]  ; vz1_stat
00169a  b928              CBNZ     r0,|L1.5800|
;;;1505   	{
;;;1506   	mess_send(MESS2RELE_HNDL,PARAM_RELE_SAMOKALIBR,0,20);
00169c  2314              MOVS     r3,#0x14
00169e  2200              MOVS     r2,#0
0016a0  2164              MOVS     r1,#0x64
0016a2  20d2              MOVS     r0,#0xd2
0016a4  f7fffffe          BL       mess_send
                  |L1.5800|
;;;1507   	}
;;;1508   if(vz1_stat==vz1sSTEP1)
0016a8  f8980005          LDRB     r0,[r8,#5]  ; vz1_stat
;;;1509   	{
;;;1510   	if(vz1_stat_old!=vz1_stat)
;;;1511   		{
;;;1512   		vz1_stat_cnt=5;
;;;1513   		}
;;;1514   	if(vz1_stat_cnt)
;;;1515   		{
;;;1516   		vz1_stat_cnt--;
;;;1517   		if(vz1_stat_cnt==0)
;;;1518   			{
;;;1519   			vz1_stat=vz1sERR1; 	//Не включилась вентиляция;
;;;1520   			lc640_write(EE_VZ1_STAT,vz1sERR1);
;;;1521   			}
;;;1522   		}
;;;1523   	if(sk_stat[0]==1)
0016ac  4d36              LDR      r5,|L1.6024|
0016ae  f44f7bc9          MOV      r11,#0x192            ;1520
0016b2  2801              CMP      r0,#1                 ;1508
0016b4  d139              BNE      |L1.5930|
0016b6  f8980006          LDRB     r0,[r8,#6]            ;1510  ; vz1_stat_old
0016ba  2801              CMP      r0,#1                 ;1510
0016bc  d003              BEQ      |L1.5830|
0016be  f04f0005          MOV      r0,#5                 ;1512
0016c2  f8a8007a          STRH     r0,[r8,#0x7a]         ;1512
                  |L1.5830|
0016c6  f9b8007a          LDRSH    r0,[r8,#0x7a]         ;1514  ; vz1_stat_cnt
0016ca  b168              CBZ      r0,|L1.5864|
0016cc  f1a00001          SUB      r0,r0,#1              ;1516
0016d0  b200              SXTH     r0,r0                 ;1516
0016d2  f8a8007a          STRH     r0,[r8,#0x7a]         ;1516
0016d6  b938              CBNZ     r0,|L1.5864|
0016d8  f04f000b          MOV      r0,#0xb               ;1519
0016dc  f8880005          STRB     r0,[r8,#5]            ;1519
0016e0  4601              MOV      r1,r0                 ;1520
0016e2  4658              MOV      r0,r11                ;1520
0016e4  f7fffffe          BL       lc640_write
                  |L1.5864|
0016e8  7828              LDRB     r0,[r5,#0]  ; sk_stat
0016ea  2801              CMP      r0,#1
0016ec  d117              BNE      |L1.5918|
;;;1524   		{
;;;1525   		vz1_stat=vz1sSTEP2;
0016ee  f04f0002          MOV      r0,#2
0016f2  f8880005          STRB     r0,[r8,#5]
;;;1526   		lc640_write(EE_VZ1_STAT,vz1sSTEP2);
0016f6  4601              MOV      r1,r0
0016f8  4658              MOV      r0,r11
0016fa  f7fffffe          BL       lc640_write
;;;1527   		tree_up(iVZ1_STEP2_2,1,0,0);
0016fe  2300              MOVS     r3,#0
001700  461a              MOV      r2,r3
001702  2101              MOVS     r1,#1
001704  20df              MOVS     r0,#0xdf
001706  f7fffffe          BL       tree_up
;;;1528   		tree_up(iVZ1_STEP2_1,0,0,0);
00170a  2300              MOVS     r3,#0
00170c  461a              MOV      r2,r3
00170e  4619              MOV      r1,r3
001710  20de              MOVS     r0,#0xde
001712  f7fffffe          BL       tree_up
;;;1529   		ret(1200);
001716  f44f6096          MOV      r0,#0x4b0
00171a  f7fffffe          BL       ||ret||
                  |L1.5918|
;;;1530   		}
;;;1531   	mess_send(MESS2RELE_HNDL,PARAM_RELE_SAMOKALIBR,0,20);
00171e  2314              MOVS     r3,#0x14
001720  2200              MOVS     r2,#0
001722  2164              MOVS     r1,#0x64
001724  20d2              MOVS     r0,#0xd2
001726  f7fffffe          BL       mess_send
                  |L1.5930|
;;;1532   	}
;;;1533   
;;;1534   if(vz1_stat==vz1sSTEP2)
00172a  f8980005          LDRB     r0,[r8,#5]  ; vz1_stat
;;;1535   	{
;;;1536   	if((vz1_stat_old!=vz1_stat)||(vz1_stat_cnt==0))
;;;1537   		{
;;;1538   		vz1_stat_cnt=15;
00172e  f04f090f          MOV      r9,#0xf
001732  2802              CMP      r0,#2                 ;1534
001734  d16c              BNE      |L1.6160|
001736  f8980006          LDRB     r0,[r8,#6]            ;1536  ; vz1_stat_old
00173a  2802              CMP      r0,#2                 ;1536
00173c  d102              BNE      |L1.5956|
00173e  f8b8007a          LDRH     r0,[r8,#0x7a]         ;1536  ; vz1_stat_cnt
001742  b908              CBNZ     r0,|L1.5960|
                  |L1.5956|
001744  f8a8907a          STRH     r9,[r8,#0x7a]
                  |L1.5960|
;;;1539   		}
;;;1540   	vz1_stat_cnt--;
001748  f8b8007a          LDRH     r0,[r8,#0x7a]  ; vz1_stat_cnt
00174c  e052              B        |L1.6132|
00174e  0000              DCW      0x0000
                  |L1.5968|
                          DCD      ADR_EE_BAT_ZAR_CNT
                  |L1.5972|
                          DCD      ||area_number.25||
                  |L1.5976|
                          DCD      speedChrgBlckStat
                  |L1.5980|
                          DCD      Ib_ips_termokompensat
                  |L1.5984|
                          DCD      0xffff7360
                  |L1.5988|
                          DCD      0x40024000
                  |L1.5992|
                          DCD      AVZ
                  |L1.5996|
                          DCD      YEAR_AVZ
                  |L1.6000|
                          DCD      MONTH_AVZ
                  |L1.6004|
                          DCD      DATE_AVZ
                  |L1.6008|
                          DCD      HOUR_AVZ
                  |L1.6012|
                          DCD      MIN_AVZ
                  |L1.6016|
                          DCD      SEC_AVZ
                  |L1.6020|
                          DCD      AVZ_TIME
                  |L1.6024|
                          DCD      sk_stat
                  |L1.6028|
                          DCD      VZ_CH_VENT_BLOK
                  |L1.6032|
                          DCD      0x40024020
                  |L1.6036|
001794  20202020          DCB      "    ",194,197,205,210,200,203,223,214,200,223,"!!!   ",0
001798  c2c5cdd2
00179c  c8cbdfd6
0017a0  c8df2121
0017a4  21202020
0017a8  00      
0017a9  00                DCB      0
0017aa  00                DCB      0
0017ab  00                DCB      0
                  |L1.6060|
0017ac  20202020          DCB      "     ",205,197,200,209,207,208,192,194,205,192,"     ",0
0017b0  20cdc5c8
0017b4  d1cfd0c0
0017b8  c2cdc020
0017bc  20202020
0017c0  00      
0017c1  00                DCB      0
0017c2  00                DCB      0
0017c3  00                DCB      0
                  |L1.6084|
0017c4  20202020          DCB      "    ",199,192,193,203,206,202,200,208,206,194,192,205," "
0017c8  c7c0c1cb
0017cc  cecac8d0
0017d0  cec2c0cd
0017d4  20      
0017d5  20202000          DCB      "   ",0
0017d9  00                DCB      0
0017da  00                DCB      0
0017db  00                DCB      0
                  |L1.6108|
0017dc  c2dbd0c0          DCB      194,219,208,192,194,205,200,194,192,222,217,200,201," ",199
0017e0  c2cdc8c2
0017e4  c0ded9c8
0017e8  c920c7  
0017eb  c0d0dfc4          DCB      192,208,223,196," ",0
0017ef  2000    
0017f1  00                DCB      0
0017f2  00                DCB      0
0017f3  00                DCB      0
                  |L1.6132|
0017f4  f1a00001          SUB      r0,r0,#1
0017f8  f8a8007a          STRH     r0,[r8,#0x7a]
;;;1541   	mess_send(MESS2RELE_HNDL,PARAM_RELE_SAMOKALIBR,0,20);
0017fc  f04f0314          MOV      r3,#0x14
001800  f04f0200          MOV      r2,#0
001804  f04f0164          MOV      r1,#0x64
001808  f04f00d2          MOV      r0,#0xd2
00180c  f7fffffe          BL       mess_send
                  |L1.6160|
;;;1542   	}
;;;1543   
;;;1544   if(vz1_stat==vz1sSTEP3)
001810  f8980005          LDRB     r0,[r8,#5]  ; vz1_stat
;;;1545   	{
;;;1546   	if((vz1_stat_old!=vz1_stat)||(vz1_stat_cnt==0))
;;;1547   		{
;;;1548   		vz1_stat_cnt=10;
001814  240a              MOVS     r4,#0xa
001816  2600              MOVS     r6,#0                 ;1503
001818  f04f0a01          MOV      r10,#1                ;1504
;;;1549   
;;;1550   		}
;;;1551   	vz1_stat_cnt--;
;;;1552   	if((vz1_stat_cnt==10)||(vz1_stat_cnt==9))
;;;1553   		{
;;;1554   		show_mess(	"     ВКЛЮЧИТЕ       ",
00181c  f2413788          MOV      r7,#0x1388
001820  2803              CMP      r0,#3                 ;1544
001822  d131              BNE      |L1.6280|
001824  f8980006          LDRB     r0,[r8,#6]            ;1546  ; vz1_stat_old
001828  2803              CMP      r0,#3                 ;1546
00182a  d102              BNE      |L1.6194|
00182c  f8b8007a          LDRH     r0,[r8,#0x7a]         ;1546  ; vz1_stat_cnt
001830  b908              CBNZ     r0,|L1.6198|
                  |L1.6194|
001832  f8a8407a          STRH     r4,[r8,#0x7a]         ;1548
                  |L1.6198|
001836  f8b8007a          LDRH     r0,[r8,#0x7a]         ;1551  ; vz1_stat_cnt
00183a  f1a00001          SUB      r0,r0,#1              ;1551
00183e  b200              SXTH     r0,r0                 ;1551
001840  f8a8007a          STRH     r0,[r8,#0x7a]         ;1551
001844  280a              CMP      r0,#0xa               ;1552
001846  d001              BEQ      |L1.6220|
001848  2809              CMP      r0,#9                 ;1552
00184a  d106              BNE      |L1.6234|
                  |L1.6220|
00184c  a3e7              ADR      r3,|L1.7148|
00184e  a2ed              ADR      r2,|L1.7172|
001850  a1f2              ADR      r1,|L1.7196|
001852  a0f8              ADR      r0,|L1.7220|
001854  9700              STR      r7,[sp,#0]
001856  f7fffffe          BL       show_mess
                  |L1.6234|
;;;1555   					"      ТУМБЛЕР       ",
;;;1556   					"     ВЫСОКОГО       ",
;;;1557   					"    НАПРЯЖЕНИЯ      ",
;;;1558   					5000);
;;;1559   		}
;;;1560   	if(sk_stat[1]==1)
00185a  7868              LDRB     r0,[r5,#1]  ; sk_stat
00185c  2801              CMP      r0,#1
00185e  d10d              BNE      |L1.6268|
;;;1561   		{
;;;1562   		vz1_stat=vz1sWRK;
001860  f8884005          STRB     r4,[r8,#5]
;;;1563   		lc640_write(EE_VZ1_STAT,vz1sWRK);
001864  210a              MOVS     r1,#0xa
001866  4658              MOV      r0,r11
001868  f7fffffe          BL       lc640_write
;;;1564   		volt_region=1;
00186c  f888a02f          STRB     r10,[r8,#0x2f]
;;;1565   		cntrl_stat=0;
001870  f8a86032          STRH     r6,[r8,#0x32]
;;;1566   		cntrl_stat_new=0;
001874  f8a86048          STRH     r6,[r8,#0x48]
;;;1567   		cntrl_stat_old=0;
001878  f8a86034          STRH     r6,[r8,#0x34]
                  |L1.6268|
;;;1568   		}
;;;1569   	mess_send(MESS2RELE_HNDL,PARAM_RELE_SAMOKALIBR,0,20);
00187c  2314              MOVS     r3,#0x14
00187e  2200              MOVS     r2,#0
001880  2164              MOVS     r1,#0x64
001882  20d2              MOVS     r0,#0xd2
001884  f7fffffe          BL       mess_send
                  |L1.6280|
;;;1570   	}
;;;1571   
;;;1572   if(vz1_stat==vz1sWRK)
001888  f8980005          LDRB     r0,[r8,#5]  ; vz1_stat
00188c  280a              CMP      r0,#0xa
00188e  d17d              BNE      |L1.6540|
;;;1573   	{
;;;1574   	if(vz1_stat_old!=vz1_stat)
001890  f8980006          LDRB     r0,[r8,#6]  ; vz1_stat_old
;;;1575   		{
;;;1576   		vz1_wrk_cnt=3600L/*100L*/*((long)UZ_T);
001894  49ed              LDR      r1,|L1.7244|
001896  280a              CMP      r0,#0xa               ;1574
001898  d008              BEQ      |L1.6316|
00189a  48ed              LDR      r0,|L1.7248|
00189c  f44f6261          MOV      r2,#0xe10
0018a0  f9b00000          LDRSH    r0,[r0,#0]  ; UZ_T
0018a4  fb00f002          MUL      r0,r0,r2
0018a8  63c8              STR      r0,[r1,#0x3c]  ; vz1_wrk_cnt
;;;1577   		//if(VZ_HR==0)  	hv_vz_wrk_cnt=1800L;
;;;1578   		vz1_up_cnt=0L;
0018aa  640e              STR      r6,[r1,#0x40]  ; vz1_up_cnt
                  |L1.6316|
;;;1579   
;;;1580   		}
;;;1581   	vz1_wrk_cnt--;
0018ac  6bc8              LDR      r0,[r1,#0x3c]  ; vz1_wrk_cnt
0018ae  f1a00001          SUB      r0,r0,#1
0018b2  63c8              STR      r0,[r1,#0x3c]  ; vz1_wrk_cnt
;;;1582   	vz1_up_cnt++;
0018b4  6c0a              LDR      r2,[r1,#0x40]  ; vz1_up_cnt
0018b6  f1020201          ADD      r2,r2,#1
0018ba  640a              STR      r2,[r1,#0x40]  ; vz1_up_cnt
;;;1583   
;;;1584   	if(vz1_wrk_cnt==0)
0018bc  b940              CBNZ     r0,|L1.6352|
;;;1585   		{
;;;1586   		vz1_stat=vz1sFINE;
0018be  f8889005          STRB     r9,[r8,#5]
;;;1587   		lc640_write(EE_VZ1_STAT,vz1sFINE);
0018c2  210f              MOVS     r1,#0xf
0018c4  4658              MOV      r0,r11
0018c6  f7fffffe          BL       lc640_write
;;;1588   		uz_mem_hndl(0);
0018ca  2000              MOVS     r0,#0
0018cc  f7fffffe          BL       uz_mem_hndl
                  |L1.6352|
;;;1589   		}
;;;1590   	if(sk_stat[0]==0)
0018d0  7828              LDRB     r0,[r5,#0]  ; sk_stat
0018d2  b938              CBNZ     r0,|L1.6372|
;;;1591   		{
;;;1592   		vz1_stat=vz1sERR2;
0018d4  f04f000c          MOV      r0,#0xc
0018d8  f8880005          STRB     r0,[r8,#5]
;;;1593   		lc640_write(EE_VZ1_STAT,vz1sERR2);
0018dc  4601              MOV      r1,r0
0018de  4658              MOV      r0,r11
0018e0  f7fffffe          BL       lc640_write
                  |L1.6372|
;;;1594   		}
;;;1595   	if(sk_stat[1]==0)
0018e4  7868              LDRB     r0,[r5,#1]  ; sk_stat
0018e6  b938              CBNZ     r0,|L1.6392|
;;;1596   		{
;;;1597   		vz1_stat=vz1sERR3;
0018e8  f04f000d          MOV      r0,#0xd
0018ec  f8880005          STRB     r0,[r8,#5]
;;;1598   		lc640_write(EE_VZ1_STAT,vz1sERR3);
0018f0  4601              MOV      r1,r0
0018f2  4658              MOV      r0,r11
0018f4  f7fffffe          BL       lc640_write
                  |L1.6392|
;;;1599   		}
;;;1600   	if(((Ibmax/10)>IZMAX_)&&(cntrl_stat<=20)&&(volt_region==1)&&(volt_region_cnt==0))
0018f8  f9b8004a          LDRSH    r0,[r8,#0x4a]  ; Ibmax
0018fc  f8b8104c          LDRH     r1,[r8,#0x4c]  ; IZMAX_
001900  fb90f0f4          SDIV     r0,r0,r4
;;;1601   		{
;;;1602   		volt_region=0;
;;;1603   		cntrl_stat=1000;
001904  f44f727a          MOV      r2,#0x3e8
001908  4288              CMP      r0,r1                 ;1600
00190a  dd16              BLE      |L1.6458|
00190c  f9b83032          LDRSH    r3,[r8,#0x32]         ;1600  ; cntrl_stat
001910  2b14              CMP      r3,#0x14              ;1600
001912  dc12              BGT      |L1.6458|
001914  f898302f          LDRB     r3,[r8,#0x2f]         ;1600  ; volt_region
001918  2b01              CMP      r3,#1                 ;1600
00191a  d10e              BNE      |L1.6458|
00191c  f8b8307c          LDRH     r3,[r8,#0x7c]         ;1600  ; volt_region_cnt
001920  b95b              CBNZ     r3,|L1.6458|
001922  f888602f          STRB     r6,[r8,#0x2f]         ;1602
001926  f8a82032          STRH     r2,[r8,#0x32]
;;;1604   		cntrl_stat_new=1000;
00192a  f8a82048          STRH     r2,[r8,#0x48]
;;;1605   		cntrl_stat_old=1000;
00192e  f8a82034          STRH     r2,[r8,#0x34]
;;;1606   		volt_region_cnt=110;
001932  f04f036e          MOV      r3,#0x6e
001936  f8a8307c          STRH     r3,[r8,#0x7c]
                  |L1.6458|
;;;1607   		}
;;;1608   	if(((Ibmax/10)<IZMAX_)&&(cntrl_stat>=1000)&&(volt_region==0)&&(volt_region_cnt==0))
00193a  4288              CMP      r0,r1
00193c  da13              BGE      |L1.6502|
00193e  f9b80032          LDRSH    r0,[r8,#0x32]  ; cntrl_stat
001942  4290              CMP      r0,r2
001944  db0f              BLT      |L1.6502|
001946  f898002f          LDRB     r0,[r8,#0x2f]  ; volt_region
00194a  b960              CBNZ     r0,|L1.6502|
00194c  f8b8007c          LDRH     r0,[r8,#0x7c]  ; volt_region_cnt
001950  b948              CBNZ     r0,|L1.6502|
;;;1609   		{
;;;1610   		volt_region=1;
001952  f888a02f          STRB     r10,[r8,#0x2f]
;;;1611   		cntrl_stat=10;
001956  f8a84032          STRH     r4,[r8,#0x32]
;;;1612   		cntrl_stat_new=10;
00195a  f8a84048          STRH     r4,[r8,#0x48]
;;;1613   		cntrl_stat_old=10;
00195e  f8a84034          STRH     r4,[r8,#0x34]
;;;1614   		volt_region_cnt=10;
001962  f8a8407c          STRH     r4,[r8,#0x7c]
                  |L1.6502|
;;;1615   		}
;;;1616   	if(volt_region==0) 		mess_send(MESS2RELE_HNDL,PARAM_RELE_SAMOKALIBR,0,20);
001966  f898002f          LDRB     r0,[r8,#0x2f]  ; volt_region
00196a  b110              CBZ      r0,|L1.6514|
;;;1617   	else if(volt_region==1) mess_send(MESS2RELE_HNDL,PARAM_RELE_SAMOKALIBR,1,20);
00196c  2801              CMP      r0,#1
00196e  d007              BEQ      |L1.6528|
001970  e00c              B        |L1.6540|
                  |L1.6514|
001972  2314              MOVS     r3,#0x14              ;1616
001974  2200              MOVS     r2,#0                 ;1616
001976  2164              MOVS     r1,#0x64              ;1616
001978  20d2              MOVS     r0,#0xd2              ;1616
00197a  f7fffffe          BL       mess_send
00197e  e005              B        |L1.6540|
                  |L1.6528|
001980  2314              MOVS     r3,#0x14
001982  2201              MOVS     r2,#1
001984  2164              MOVS     r1,#0x64
001986  20d2              MOVS     r0,#0xd2
001988  f7fffffe          BL       mess_send
                  |L1.6540|
;;;1618   	}
;;;1619   
;;;1620   if(vz1_stat==vz1sERR1)		//Отсутствует вентиляция при включении
00198c  f8980005          LDRB     r0,[r8,#5]  ; vz1_stat
001990  280b              CMP      r0,#0xb
001992  d120              BNE      |L1.6614|
;;;1621   	{
;;;1622   	if((vz1_stat_old!=vz1_stat)||(vz1_stat_cnt==0))
001994  f8980006          LDRB     r0,[r8,#6]  ; vz1_stat_old
001998  280b              CMP      r0,#0xb
00199a  d102              BNE      |L1.6562|
00199c  f8b8007a          LDRH     r0,[r8,#0x7a]  ; vz1_stat_cnt
0019a0  b908              CBNZ     r0,|L1.6566|
                  |L1.6562|
;;;1623   		{
;;;1624   		vz1_stat_cnt=10;
0019a2  f8a8407a          STRH     r4,[r8,#0x7a]
                  |L1.6566|
;;;1625   		}
;;;1626   	vz1_stat_cnt--;
0019a6  f8b8007a          LDRH     r0,[r8,#0x7a]  ; vz1_stat_cnt
0019aa  f1a00001          SUB      r0,r0,#1
0019ae  b200              SXTH     r0,r0
0019b0  f8a8007a          STRH     r0,[r8,#0x7a]
;;;1627   	if((vz1_stat_cnt==10)||(vz1_stat_cnt==9))
0019b4  280a              CMP      r0,#0xa
0019b6  d001              BEQ      |L1.6588|
0019b8  2809              CMP      r0,#9
0019ba  d106              BNE      |L1.6602|
                  |L1.6588|
;;;1628   		{
;;;1629   		show_mess(	"УРАВНИТЕЛЬНЫЙ ЗАРЯД ",
0019bc  a3a5              ADR      r3,|L1.7252|
0019be  a2ab              ADR      r2,|L1.7276|
0019c0  a1b0              ADR      r1,|L1.7300|
0019c2  a0b6              ADR      r0,|L1.7324|
0019c4  9700              STR      r7,[sp,#0]
0019c6  f7fffffe          BL       show_mess
                  |L1.6602|
;;;1630   					"   НЕ МОЖЕТ БЫТЬ    ",
;;;1631   					"      ВКЛЮЧЕН       ",
;;;1632   					"  БЕЗ ВЕНТИЛЯЦИИ!!  ",
;;;1633   					5000);
;;;1634   		}
;;;1635   	mess_send(MESS2RELE_HNDL,PARAM_RELE_SAMOKALIBR,0,20);
0019ca  2314              MOVS     r3,#0x14
0019cc  2200              MOVS     r2,#0
0019ce  2164              MOVS     r1,#0x64
0019d0  20d2              MOVS     r0,#0xd2
0019d2  f7fffffe          BL       mess_send
                  |L1.6614|
;;;1636   	}
;;;1637   if(vz1_stat==vz1sERR2)		//Пропала вентиляция при работе
0019d6  f8980005          LDRB     r0,[r8,#5]  ; vz1_stat
0019da  280c              CMP      r0,#0xc
0019dc  d12c              BNE      |L1.6712|
;;;1638   	{
;;;1639   	if((vz1_stat_old!=vz1_stat)||(vz1_stat_cnt==0))
0019de  f8980006          LDRB     r0,[r8,#6]  ; vz1_stat_old
0019e2  280c              CMP      r0,#0xc
0019e4  d102              BNE      |L1.6636|
0019e6  f8b8007a          LDRH     r0,[r8,#0x7a]  ; vz1_stat_cnt
0019ea  b908              CBNZ     r0,|L1.6640|
                  |L1.6636|
;;;1640   		{
;;;1641   		vz1_stat_cnt=10;
0019ec  f8a8407a          STRH     r4,[r8,#0x7a]
                  |L1.6640|
;;;1642   		}
;;;1643   	vz1_stat_cnt--;
0019f0  f8b8007a          LDRH     r0,[r8,#0x7a]  ; vz1_stat_cnt
0019f4  f1a00001          SUB      r0,r0,#1
0019f8  b200              SXTH     r0,r0
0019fa  f8a8007a          STRH     r0,[r8,#0x7a]
;;;1644   	if((vz1_stat_cnt==10)||(vz1_stat_cnt==9))
0019fe  280a              CMP      r0,#0xa
001a00  d001              BEQ      |L1.6662|
001a02  2809              CMP      r0,#9
001a04  d109              BNE      |L1.6682|
                  |L1.6662|
;;;1645   		{
;;;1646   		show_mess(	"УРАВНИТЕЛЬНЫЙ ЗАРЯД ",
001a06  f2af2374          ADR      r3,|L1.6036|
001a0a  f2af2260          ADR      r2,|L1.6060|
001a0e  f2af214c          ADR      r1,|L1.6084|
001a12  a0a2              ADR      r0,|L1.7324|
001a14  9700              STR      r7,[sp,#0]
001a16  f7fffffe          BL       show_mess
                  |L1.6682|
;;;1647   					"    ЗАБЛОКИРОВАН    ",
;;;1648   					"     НЕИСПРАВНА     ",
;;;1649   					"    ВЕНТИЛЯЦИЯ!!!   ",
;;;1650   					5000);
;;;1651   		}
;;;1652   	if(sk_stat[0]==1)
001a1a  7828              LDRB     r0,[r5,#0]  ; sk_stat
001a1c  2801              CMP      r0,#1
001a1e  d105              BNE      |L1.6700|
;;;1653   		{
;;;1654   		vz1_stat=vz1sWRK;
001a20  f8884005          STRB     r4,[r8,#5]
;;;1655   		lc640_write(EE_VZ1_STAT,vz1sWRK);
001a24  210a              MOVS     r1,#0xa
001a26  4658              MOV      r0,r11
001a28  f7fffffe          BL       lc640_write
                  |L1.6700|
;;;1656   		}
;;;1657   	mess_send(MESS2RELE_HNDL,PARAM_RELE_SAMOKALIBR,0,20);
001a2c  2314              MOVS     r3,#0x14
001a2e  2200              MOVS     r2,#0
001a30  2164              MOVS     r1,#0x64
001a32  20d2              MOVS     r0,#0xd2
001a34  f7fffffe          BL       mess_send
                  |L1.6712|
;;;1658   	}
;;;1659   
;;;1660   if(vz1_stat==vz1sERR3)		//Отключен тумблер "Высокое напряжение"
001a38  f8980005          LDRB     r0,[r8,#5]  ; vz1_stat
001a3c  280d              CMP      r0,#0xd
001a3e  d129              BNE      |L1.6804|
;;;1661   	{
;;;1662   	if((vz1_stat_old!=vz1_stat)||(vz1_stat_cnt==0))
001a40  f8980006          LDRB     r0,[r8,#6]  ; vz1_stat_old
001a44  280d              CMP      r0,#0xd
001a46  d102              BNE      |L1.6734|
001a48  f8b8007a          LDRH     r0,[r8,#0x7a]  ; vz1_stat_cnt
001a4c  b908              CBNZ     r0,|L1.6738|
                  |L1.6734|
;;;1663   		{
;;;1664   		vz1_stat_cnt=10;
001a4e  f8a8407a          STRH     r4,[r8,#0x7a]
                  |L1.6738|
;;;1665   		}
;;;1666   	vz1_stat_cnt--;
001a52  f8b8007a          LDRH     r0,[r8,#0x7a]  ; vz1_stat_cnt
001a56  f1a00001          SUB      r0,r0,#1
001a5a  b200              SXTH     r0,r0
001a5c  f8a8007a          STRH     r0,[r8,#0x7a]
;;;1667   	if((vz1_stat_cnt==10)||(vz1_stat_cnt==9))
001a60  280a              CMP      r0,#0xa
001a62  d001              BEQ      |L1.6760|
001a64  2809              CMP      r0,#9
001a66  d106              BNE      |L1.6774|
                  |L1.6760|
;;;1668   		{
;;;1669   		show_mess(	"УРАВНИТЕЛЬНЫЙ ЗАРЯД ",
001a68  a392              ADR      r3,|L1.7348|
001a6a  a298              ADR      r2,|L1.7372|
001a6c  a19d              ADR      r1,|L1.7396|
001a6e  a08b              ADR      r0,|L1.7324|
001a70  9700              STR      r7,[sp,#0]
001a72  f7fffffe          BL       show_mess
                  |L1.6774|
;;;1670   					"  БУДЕТ ПРОДОЛЖЕН   ",
;;;1671   					"  ПОСЛЕ ВКЛЮЧЕНИЯ   ",
;;;1672   					"*   ТУМБЛЕРА!!!     ",
;;;1673   					5000);
;;;1674   		}
;;;1675   	if(sk_stat[1]==1)
001a76  7868              LDRB     r0,[r5,#1]  ; sk_stat
001a78  2801              CMP      r0,#1
001a7a  d105              BNE      |L1.6792|
;;;1676   		{
;;;1677   		vz1_stat=vz1sWRK;
001a7c  f8884005          STRB     r4,[r8,#5]
;;;1678   		lc640_write(EE_VZ1_STAT,vz1sWRK);
001a80  210a              MOVS     r1,#0xa
001a82  4658              MOV      r0,r11
001a84  f7fffffe          BL       lc640_write
                  |L1.6792|
;;;1679   		}
;;;1680   	mess_send(MESS2RELE_HNDL,PARAM_RELE_SAMOKALIBR,0,20);
001a88  2314              MOVS     r3,#0x14
001a8a  2200              MOVS     r2,#0
001a8c  2164              MOVS     r1,#0x64
001a8e  20d2              MOVS     r0,#0xd2
001a90  f7fffffe          BL       mess_send
                  |L1.6804|
;;;1681   	}
;;;1682   if(vz1_stat==vz1sERR4)		//ВЗ закончился а тумблер включен
001a94  f8980005          LDRB     r0,[r8,#5]  ; vz1_stat
001a98  280e              CMP      r0,#0xe
001a9a  d12a              BNE      |L1.6898|
;;;1683   	{
;;;1684   	if((vz1_stat_old!=vz1_stat)||(vz1_stat_cnt==0))
001a9c  f8980006          LDRB     r0,[r8,#6]  ; vz1_stat_old
001aa0  280e              CMP      r0,#0xe
001aa2  d102              BNE      |L1.6826|
001aa4  f8b8007a          LDRH     r0,[r8,#0x7a]  ; vz1_stat_cnt
001aa8  b908              CBNZ     r0,|L1.6830|
                  |L1.6826|
;;;1685   		{
;;;1686   		vz1_stat_cnt=10;
001aaa  f8a8407a          STRH     r4,[r8,#0x7a]
                  |L1.6830|
;;;1687   		}
;;;1688   	vz1_stat_cnt--;
001aae  f8b8007a          LDRH     r0,[r8,#0x7a]  ; vz1_stat_cnt
001ab2  f1a00001          SUB      r0,r0,#1
001ab6  b200              SXTH     r0,r0
001ab8  f8a8007a          STRH     r0,[r8,#0x7a]
;;;1689   	if((vz1_stat_cnt==10)||(vz1_stat_cnt==9))
001abc  280a              CMP      r0,#0xa
001abe  d001              BEQ      |L1.6852|
001ac0  2809              CMP      r0,#9
001ac2  d106              BNE      |L1.6866|
                  |L1.6852|
;;;1690   		{
;;;1691   		show_mess(	"*    ВЫКЛЮЧИТЕ      ",
001ac4  a349              ADR      r3,|L1.7148|
001ac6  a24f              ADR      r2,|L1.7172|
001ac8  a154              ADR      r1,|L1.7196|
001aca  a08c              ADR      r0,|L1.7420|
001acc  9700              STR      r7,[sp,#0]
001ace  f7fffffe          BL       show_mess
                  |L1.6866|
;;;1692   					"      ТУМБЛЕР       ",
;;;1693   					"     ВЫСОКОГО       ",
;;;1694   					"    НАПРЯЖЕНИЯ      ",
;;;1695   					5000);
;;;1696   		}
;;;1697   	if(sk_stat[1]==0)
001ad2  7868              LDRB     r0,[r5,#1]  ; sk_stat
001ad4  b938              CBNZ     r0,|L1.6886|
;;;1698   		{
;;;1699   		vz1_stat=vz1sOFF;
001ad6  f8886005          STRB     r6,[r8,#5]
;;;1700   		lc640_write(EE_VZ1_STAT,vz1sOFF);
001ada  2100              MOVS     r1,#0
001adc  4658              MOV      r0,r11
001ade  f7fffffe          BL       lc640_write
;;;1701   		vz_stop();
001ae2  f7fffffe          BL       vz_stop
                  |L1.6886|
;;;1702   
;;;1703   		}
;;;1704   	mess_send(MESS2RELE_HNDL,PARAM_RELE_SAMOKALIBR,1,20);
001ae6  2314              MOVS     r3,#0x14
001ae8  2201              MOVS     r2,#1
001aea  2164              MOVS     r1,#0x64
001aec  20d2              MOVS     r0,#0xd2
001aee  f7fffffe          BL       mess_send
                  |L1.6898|
;;;1705   	}
;;;1706   if(vz1_stat==vz1sFINE)		//УЗ закончился, напоминание
001af2  f8980005          LDRB     r0,[r8,#5]  ; vz1_stat
;;;1707   	{
;;;1708   	if((vz1_stat_old!=vz1_stat)||(vz1_stat_cnt==0))
;;;1709   		{
;;;1710   		vz1_stat_cnt=10;
;;;1711   		}
;;;1712   	vz1_stat_cnt--;
;;;1713   	if((vz1_stat_cnt==10)||(vz1_stat_cnt==9))
;;;1714   		{
;;;1715   		show_mess(	"   УРАВНИТЕЛЬНЫЙ    ",
001af6  f64037b8          MOV      r7,#0xbb8
001afa  280f              CMP      r0,#0xf               ;1706
001afc  d135              BNE      |L1.7018|
001afe  f8980006          LDRB     r0,[r8,#6]            ;1708  ; vz1_stat_old
001b02  280f              CMP      r0,#0xf               ;1708
001b04  d102              BNE      |L1.6924|
001b06  f8b8007a          LDRH     r0,[r8,#0x7a]         ;1708  ; vz1_stat_cnt
001b0a  b908              CBNZ     r0,|L1.6928|
                  |L1.6924|
001b0c  f8a8407a          STRH     r4,[r8,#0x7a]         ;1710
                  |L1.6928|
001b10  f8b8007a          LDRH     r0,[r8,#0x7a]         ;1712  ; vz1_stat_cnt
001b14  f1a00001          SUB      r0,r0,#1              ;1712
001b18  b200              SXTH     r0,r0                 ;1712
001b1a  f8a8007a          STRH     r0,[r8,#0x7a]         ;1712
001b1e  280a              CMP      r0,#0xa               ;1713
001b20  d001              BEQ      |L1.6950|
001b22  2809              CMP      r0,#9                 ;1713
001b24  d106              BNE      |L1.6964|
                  |L1.6950|
001b26  a37b              ADR      r3,|L1.7444|
001b28  a280              ADR      r2,|L1.7468|
001b2a  a186              ADR      r1,|L1.7492|
001b2c  a08b              ADR      r0,|L1.7516|
001b2e  9700              STR      r7,[sp,#0]
001b30  f7fffffe          BL       show_mess
                  |L1.6964|
;;;1716   					"       ЗАРЯД        ",
;;;1717   					"      УСПЕШНО       ",
;;;1718   					"     ЗАВЕРШЕН       ",
;;;1719   					3000);
;;;1720   		}
;;;1721   	if((vz1_stat_cnt==6)||(vz1_stat_cnt==5))
001b34  f9b8007a          LDRSH    r0,[r8,#0x7a]  ; vz1_stat_cnt
001b38  2806              CMP      r0,#6
001b3a  d001              BEQ      |L1.6976|
001b3c  2805              CMP      r0,#5
001b3e  d106              BNE      |L1.6990|
                  |L1.6976|
;;;1722   		{
;;;1723   		show_mess(	"     ВЫКЛЮЧИТЕ      ",
001b40  a32a              ADR      r3,|L1.7148|
001b42  a230              ADR      r2,|L1.7172|
001b44  a135              ADR      r1,|L1.7196|
001b46  a08b              ADR      r0,|L1.7540|
001b48  9700              STR      r7,[sp,#0]
001b4a  f7fffffe          BL       show_mess
                  |L1.6990|
;;;1724   					"      ТУМБЛЕР       ",
;;;1725   					"     ВЫСОКОГО       ",
;;;1726   					"    НАПРЯЖЕНИЯ      ",
;;;1727   					3000);
;;;1728   		}
;;;1729   	if(sk_stat[1]==0)
001b4e  7868              LDRB     r0,[r5,#1]  ; sk_stat
001b50  b928              CBNZ     r0,|L1.7006|
;;;1730   		{
;;;1731   		vz1_stat=vz1sOFF;
001b52  f8886005          STRB     r6,[r8,#5]
;;;1732   		lc640_write(EE_VZ1_STAT,vz1sOFF);
001b56  2100              MOVS     r1,#0
001b58  4658              MOV      r0,r11
001b5a  f7fffffe          BL       lc640_write
                  |L1.7006|
;;;1733   		}
;;;1734   	mess_send(MESS2RELE_HNDL,PARAM_RELE_SAMOKALIBR,0,20);
001b5e  2314              MOVS     r3,#0x14
001b60  2200              MOVS     r2,#0
001b62  2164              MOVS     r1,#0x64
001b64  20d2              MOVS     r0,#0xd2
001b66  f7fffffe          BL       mess_send
                  |L1.7018|
;;;1735   	}
;;;1736   
;;;1737   if(vz1_stat==vz1sSTOP)		//УЗ прекращен, напоминание
001b6a  f8980005          LDRB     r0,[r8,#5]  ; vz1_stat
001b6e  2810              CMP      r0,#0x10
001b70  d135              BNE      |L1.7134|
;;;1738   	{
;;;1739   	if((vz1_stat_old!=vz1_stat)||(vz1_stat_cnt==0))
001b72  f8980006          LDRB     r0,[r8,#6]  ; vz1_stat_old
001b76  2810              CMP      r0,#0x10
001b78  d102              BNE      |L1.7040|
001b7a  f8b8007a          LDRH     r0,[r8,#0x7a]  ; vz1_stat_cnt
001b7e  b908              CBNZ     r0,|L1.7044|
                  |L1.7040|
;;;1740   		{
;;;1741   		vz1_stat_cnt=10;
001b80  f8a8407a          STRH     r4,[r8,#0x7a]
                  |L1.7044|
;;;1742   		}
;;;1743   	vz1_stat_cnt--;
001b84  f8b8007a          LDRH     r0,[r8,#0x7a]  ; vz1_stat_cnt
001b88  f1a00001          SUB      r0,r0,#1
001b8c  b200              SXTH     r0,r0
001b8e  f8a8007a          STRH     r0,[r8,#0x7a]
;;;1744   	if((vz1_stat_cnt==10)||(vz1_stat_cnt==9))
001b92  280a              CMP      r0,#0xa
001b94  d001              BEQ      |L1.7066|
001b96  2809              CMP      r0,#9
001b98  d106              BNE      |L1.7080|
                  |L1.7066|
;;;1745   		{
;;;1746   		show_mess(	"   УРАВНИТЕЛЬНЫЙ    ",
001b9a  a37c              ADR      r3,|L1.7564|
001b9c  a281              ADR      r2,|L1.7588|
001b9e  a169              ADR      r1,|L1.7492|
001ba0  a06e              ADR      r0,|L1.7516|
001ba2  9700              STR      r7,[sp,#0]
001ba4  f7fffffe          BL       show_mess
                  |L1.7080|
;;;1747   					"       ЗАРЯД        ",
;;;1748   					"     ПРЕКРАЩЕН      ",
;;;1749   					"                    ",
;;;1750   					3000);
;;;1751   		}
;;;1752   	if((vz1_stat_cnt==6)||(vz1_stat_cnt==5))
001ba8  f9b8007a          LDRSH    r0,[r8,#0x7a]  ; vz1_stat_cnt
001bac  2806              CMP      r0,#6
001bae  d001              BEQ      |L1.7092|
001bb0  2805              CMP      r0,#5
001bb2  d106              BNE      |L1.7106|
                  |L1.7092|
;;;1753   		{
;;;1754   		show_mess(	"     ВЫКЛЮЧИТЕ      ",
001bb4  a30d              ADR      r3,|L1.7148|
001bb6  a213              ADR      r2,|L1.7172|
001bb8  a118              ADR      r1,|L1.7196|
001bba  a06e              ADR      r0,|L1.7540|
001bbc  9700              STR      r7,[sp,#0]
001bbe  f7fffffe          BL       show_mess
                  |L1.7106|
;;;1755   					"      ТУМБЛЕР       ",
;;;1756   					"     ВЫСОКОГО       ",
;;;1757   					"    НАПРЯЖЕНИЯ      ",
;;;1758   					3000);
;;;1759   		}
;;;1760   	if(sk_stat[1]==0)
001bc2  7868              LDRB     r0,[r5,#1]  ; sk_stat
001bc4  b928              CBNZ     r0,|L1.7122|
;;;1761   		{
;;;1762   		vz1_stat=vz1sOFF;
001bc6  f8886005          STRB     r6,[r8,#5]
;;;1763   		lc640_write(EE_VZ1_STAT,vz1sOFF);
001bca  2100              MOVS     r1,#0
001bcc  4658              MOV      r0,r11
001bce  f7fffffe          BL       lc640_write
                  |L1.7122|
;;;1764   		}
;;;1765   	mess_send(MESS2RELE_HNDL,PARAM_RELE_SAMOKALIBR,0,20);
001bd2  2314              MOVS     r3,#0x14
001bd4  2200              MOVS     r2,#0
001bd6  2164              MOVS     r1,#0x64
001bd8  20d2              MOVS     r0,#0xd2
001bda  f7fffffe          BL       mess_send
                  |L1.7134|
;;;1766   	}
;;;1767   
;;;1768   vz1_stat_old=vz1_stat;
001bde  f8980005          LDRB     r0,[r8,#5]  ; vz1_stat
001be2  f8880006          STRB     r0,[r8,#6]
;;;1769   
;;;1770   
;;;1771   
;;;1772   }
001be6  e8bd8ff8          POP      {r3-r11,pc}
001bea  0000              DCW      0x0000
                  |L1.7148|
001bec  20202020          DCB      "    ",205,192,207,208,223,198,197,205,200,223,"      ",0
001bf0  cdc0cfd0
001bf4  dfc6c5cd
001bf8  c8df2020
001bfc  20202020
001c00  00      
001c01  00                DCB      0
001c02  00                DCB      0
001c03  00                DCB      0
                  |L1.7172|
001c04  20202020          DCB      "     ",194,219,209,206,202,206,195,206,"       ",0
001c08  20c2dbd1
001c0c  cecacec3
001c10  ce202020
001c14  20202020
001c18  00      
001c19  00                DCB      0
001c1a  00                DCB      0
001c1b  00                DCB      0
                  |L1.7196|
001c1c  20202020          DCB      "      ",210,211,204,193,203,197,208,"       ",0
001c20  2020d2d3
001c24  ccc1cbc5
001c28  d0202020
001c2c  20202020
001c30  00      
001c31  00                DCB      0
001c32  00                DCB      0
001c33  00                DCB      0
                  |L1.7220|
001c34  20202020          DCB      "     ",194,202,203,222,215,200,210,197,"       ",0
001c38  20c2cacb
001c3c  ded7c8d2
001c40  c5202020
001c44  20202020
001c48  00      
001c49  00                DCB      0
001c4a  00                DCB      0
001c4b  00                DCB      0
                  |L1.7244|
                          DCD      ||area_number.25||+0x80
                  |L1.7248|
                          DCD      UZ_T
                  |L1.7252|
001c54  2020c1c5          DCB      "  ",193,197,199," ",194,197,205,210,200,203,223,214,200
001c58  c720c2c5
001c5c  cdd2c8cb
001c60  dfd6c8  
001c63  c8212120          DCB      200,"!!  ",0
001c67  2000    
001c69  00                DCB      0
001c6a  00                DCB      0
001c6b  00                DCB      0
                  |L1.7276|
001c6c  20202020          DCB      "      ",194,202,203,222,215,197,205,"       ",0
001c70  2020c2ca
001c74  cbded7c5
001c78  cd202020
001c7c  20202020
001c80  00      
001c81  00                DCB      0
001c82  00                DCB      0
001c83  00                DCB      0
                  |L1.7300|
001c84  202020cd          DCB      "   ",205,197," ",204,206,198,197,210," ",193,219,210,220
001c88  c520ccce
001c8c  c6c5d220
001c90  c1dbd2dc
001c94  20202020          DCB      "    ",0
001c98  00      
001c99  00                DCB      0
001c9a  00                DCB      0
001c9b  00                DCB      0
                  |L1.7324|
001c9c  d3d0c0c2          DCB      211,208,192,194,205,200,210,197,203,220,205,219,201," ",199
001ca0  cdc8d2c5
001ca4  cbdccddb
001ca8  c920c7  
001cab  c0d0dfc4          DCB      192,208,223,196," ",0
001caf  2000    
001cb1  00                DCB      0
001cb2  00                DCB      0
001cb3  00                DCB      0
                  |L1.7348|
001cb4  2a202020          DCB      "*   ",210,211,204,193,203,197,208,192,"!!!     ",0
001cb8  d2d3ccc1
001cbc  cbc5d0c0
001cc0  21212120
001cc4  20202020
001cc8  00      
001cc9  00                DCB      0
001cca  00                DCB      0
001ccb  00                DCB      0
                  |L1.7372|
001ccc  2020cfce          DCB      "  ",207,206,209,203,197," ",194,202,203,222,215,197,205
001cd0  d1cbc520
001cd4  c2cacbde
001cd8  d7c5cd  
001cdb  c8df2020          DCB      200,223,"   ",0
001cdf  2000    
001ce1  00                DCB      0
001ce2  00                DCB      0
001ce3  00                DCB      0
                  |L1.7396|
001ce4  2020c1d3          DCB      "  ",193,211,196,197,210," ",207,208,206,196,206,203,198
001ce8  c4c5d220
001cec  cfd0cec4
001cf0  cecbc6  
001cf3  c5cd2020          DCB      197,205,"   ",0
001cf7  2000    
001cf9  00                DCB      0
001cfa  00                DCB      0
001cfb  00                DCB      0
                  |L1.7420|
001cfc  2a202020          DCB      "*    ",194,219,202,203,222,215,200,210,197,"      ",0
001d00  20c2dbca
001d04  cbded7c8
001d08  d2c52020
001d0c  20202020
001d10  00      
001d11  00                DCB      0
001d12  00                DCB      0
001d13  00                DCB      0
                  |L1.7444|
001d14  20202020          DCB      "     ",199,192,194,197,208,216,197,205,"       ",0
001d18  20c7c0c2
001d1c  c5d0d8c5
001d20  cd202020
001d24  20202020
001d28  00      
001d29  00                DCB      0
001d2a  00                DCB      0
001d2b  00                DCB      0
                  |L1.7468|
001d2c  20202020          DCB      "      ",211,209,207,197,216,205,206,"       ",0
001d30  2020d3d1
001d34  cfc5d8cd
001d38  ce202020
001d3c  20202020
001d40  00      
001d41  00                DCB      0
001d42  00                DCB      0
001d43  00                DCB      0
                  |L1.7492|
001d44  20202020          DCB      "       ",199,192,208,223,196,"        ",0
001d48  202020c7
001d4c  c0d0dfc4
001d50  20202020
001d54  20202020
001d58  00      
001d59  00                DCB      0
001d5a  00                DCB      0
001d5b  00                DCB      0
                  |L1.7516|
001d5c  202020d3          DCB      "   ",211,208,192,194,205,200,210,197,203,220,205,219,201
001d60  d0c0c2cd
001d64  c8d2c5cb
001d68  dccddbc9
001d6c  20202020          DCB      "    ",0
001d70  00      
001d71  00                DCB      0
001d72  00                DCB      0
001d73  00                DCB      0
                  |L1.7540|
001d74  20202020          DCB      "     ",194,219,202,203,222,215,200,210,197,"      ",0
001d78  20c2dbca
001d7c  cbded7c8
001d80  d2c52020
001d84  20202020
001d88  00      
001d89  00                DCB      0
001d8a  00                DCB      0
001d8b  00                DCB      0
                  |L1.7564|
001d8c  20202020          DCB      "                    ",0
001d90  20202020
001d94  20202020
001d98  20202020
001d9c  20202020
001da0  00      
001da1  00                DCB      0
001da2  00                DCB      0
001da3  00                DCB      0
                  |L1.7588|
001da4  20202020          DCB      "     ",207,208,197,202,208,192,217,197,205,"      ",0
001da8  20cfd0c5
001dac  cad0c0d9
001db0  c5cd2020
001db4  20202020
001db8  00      
001db9  00                DCB      0
001dba  00                DCB      0
001dbb  00                DCB      0
                          ENDP

                  vz1_start PROC
;;;1775   //старт уравнительног заряда
;;;1776   char vz1_start(char hour)
001dbc  b510              PUSH     {r4,lr}
;;;1777   {          
;;;1778   char out;
;;;1779   out=0;
001dbe  f04f0000          MOV      r0,#0
;;;1780   if((spc_stat==spcOFF)&&(speedChrgBlckStat!=1)&&(vz1_stat==vz1sOFF))
001dc2  49fe              LDR      r1,|L1.8636|
001dc4  f8912023          LDRB     r2,[r1,#0x23]  ; spc_stat
001dc8  2a00              CMP      r2,#0
001dca  d110              BNE      |L1.7662|
001dcc  4afc              LDR      r2,|L1.8640|
001dce  8812              LDRH     r2,[r2,#0]  ; speedChrgBlckStat
001dd0  2a01              CMP      r2,#1
001dd2  d00c              BEQ      |L1.7662|
001dd4  794a              LDRB     r2,[r1,#5]  ; vz1_stat
001dd6  2a00              CMP      r2,#0
001dd8  d109              BNE      |L1.7662|
;;;1781   	{
;;;1782   	if(vz1_stat==vz1sOFF)
;;;1783   		{
;;;1784   		vz1_stat=vz1sSTEP1;
001dda  f04f0001          MOV      r0,#1
001dde  7148              STRB     r0,[r1,#5]
;;;1785   		lc640_write(EE_VZ1_STAT,vz1sSTEP1);
001de0  4601              MOV      r1,r0
001de2  f44f70c9          MOV      r0,#0x192
001de6  f7fffffe          BL       lc640_write
;;;1786   		out=1;
001dea  f04f0001          MOV      r0,#1
                  |L1.7662|
;;;1787   		
;;;1788   		}
;;;1789   /*	spc_stat=spcVZ;
;;;1790   	__ee_spc_stat=spcVZ; 
;;;1791   	lc640_write_int(EE_SPC_STAT,__ee_spc_stat);   
;;;1792   	vz_cnt_h=hour;
;;;1793   	__ee_vz_cnt=hour*60;
;;;1794   	if(hour==0)__ee_vz_cnt=30;
;;;1795   	lc640_write_int(EE_VZ_CNT,__ee_vz_cnt);
;;;1796   	lc640_write_int(EE_SPC_VZ_LENGT,__ee_vz_cnt);	
;;;1797   	vz_cnt_h_=0;
;;;1798   	vz_cnt_s=0;
;;;1799   	vz_cnt_s_=0;
;;;1800   	
;;;1801   		*/
;;;1802   	}
;;;1803   //else if((spc_stat==spc_KE1p1)||(spc_stat==spc_KE1p2)) out=22; 
;;;1804   //else if((spc_stat==spc_KE2p1)||(spc_stat==spc_KE2p2)) out=33;
;;;1805   //plazma=out;	
;;;1806   return out;
;;;1807   }
001dee  bd10              POP      {r4,pc}
;;;1808   
                          ENDP

                  vz1_stop PROC
;;;1810   //стоп уравнительног заряда
;;;1811   void vz1_stop(void)
001df0  48f2              LDR      r0,|L1.8636|
;;;1812   {
;;;1813   if(vz1_stat!=vz1sOFF)
001df2  7941              LDRB     r1,[r0,#5]  ; vz1_stat
001df4  2900              CMP      r1,#0
001df6  d006              BEQ      |L1.7686|
;;;1814   	{
;;;1815   	vz1_stat=vz1sSTOP;
001df8  f04f0110          MOV      r1,#0x10
001dfc  7141              STRB     r1,[r0,#5]
;;;1816   	lc640_write(EE_VZ1_STAT,vz1sSTOP);
001dfe  f44f70c9          MOV      r0,#0x192
001e02  f7ffbffe          B.W      lc640_write
                  |L1.7686|
;;;1817   	}
;;;1818   }
001e06  4770              BX       lr
;;;1819   
                          ENDP

                  vz2_drv PROC
;;;1821   //драйвер формовочного заряда
;;;1822   void vz2_drv(void)
001e08  e92d4ff8          PUSH     {r3-r11,lr}
;;;1823   {
;;;1824   
;;;1825   if(vz2_stat==vz2sSTEP1)
001e0c  f8df83ac          LDR      r8,|L1.8636|
;;;1826   	{
;;;1827   	if(vz2_stat_old!=vz2_stat)
;;;1828   		{
;;;1829   		vz2_stat_cnt=5;
;;;1830   		}
;;;1831   	if(vz2_stat_cnt)
;;;1832   		{
;;;1833   		vz2_stat_cnt--;
;;;1834   		if(vz2_stat_cnt==0)
;;;1835   			{
;;;1836   			vz2_stat=vz2sERR1; 	//Не включилась вентиляция;
;;;1837   			lc640_write(EE_VZ2_STAT,vz2sERR1);
;;;1838   			}
;;;1839   		}
;;;1840   	if(sk_stat[0]==1)
001e10  4dec              LDR      r5,|L1.8644|
001e12  f8980007          LDRB     r0,[r8,#7]            ;1825  ; vz2_stat
001e16  2801              CMP      r0,#1                 ;1825
001e18  d13b              BNE      |L1.7826|
001e1a  f8980008          LDRB     r0,[r8,#8]            ;1827  ; vz2_stat_old
001e1e  2801              CMP      r0,#1                 ;1827
001e20  d003              BEQ      |L1.7722|
001e22  f04f0005          MOV      r0,#5                 ;1829
001e26  f8a8007e          STRH     r0,[r8,#0x7e]         ;1829
                  |L1.7722|
001e2a  f9b8007e          LDRSH    r0,[r8,#0x7e]         ;1831  ; vz2_stat_cnt
001e2e  b170              CBZ      r0,|L1.7758|
001e30  f1a00001          SUB      r0,r0,#1              ;1833
001e34  b200              SXTH     r0,r0                 ;1833
001e36  f8a8007e          STRH     r0,[r8,#0x7e]         ;1833
001e3a  b940              CBNZ     r0,|L1.7758|
001e3c  f04f000c          MOV      r0,#0xc               ;1836
001e40  f8880007          STRB     r0,[r8,#7]            ;1836
001e44  4601              MOV      r1,r0                 ;1837
001e46  f44f70ca          MOV      r0,#0x194             ;1837
001e4a  f7fffffe          BL       lc640_write
                  |L1.7758|
001e4e  7828              LDRB     r0,[r5,#0]  ; sk_stat
001e50  2801              CMP      r0,#1
001e52  d118              BNE      |L1.7814|
;;;1841   		{
;;;1842   		vz2_stat=vz2sSTEP2;
001e54  f04f0002          MOV      r0,#2
001e58  f8880007          STRB     r0,[r8,#7]
;;;1843   		lc640_write(EE_VZ2_STAT,vz2sSTEP2);
001e5c  4601              MOV      r1,r0
001e5e  f44f70ca          MOV      r0,#0x194
001e62  f7fffffe          BL       lc640_write
;;;1844   		tree_up(iVZ2_STEP2_2,1,0,0);
001e66  2300              MOVS     r3,#0
001e68  461a              MOV      r2,r3
001e6a  2101              MOVS     r1,#1
001e6c  20e1              MOVS     r0,#0xe1
001e6e  f7fffffe          BL       tree_up
;;;1845   		tree_up(iVZ2_STEP2_1,0,0,0);
001e72  2300              MOVS     r3,#0
001e74  461a              MOV      r2,r3
001e76  4619              MOV      r1,r3
001e78  20e0              MOVS     r0,#0xe0
001e7a  f7fffffe          BL       tree_up
;;;1846   		ret(1200);
001e7e  f44f6096          MOV      r0,#0x4b0
001e82  f7fffffe          BL       ||ret||
                  |L1.7814|
;;;1847   		}
;;;1848   	mess_send(MESS2RELE_HNDL,PARAM_RELE_SAMOKALIBR,0,20);
001e86  2314              MOVS     r3,#0x14
001e88  2200              MOVS     r2,#0
001e8a  2164              MOVS     r1,#0x64
001e8c  20d2              MOVS     r0,#0xd2
001e8e  f7fffffe          BL       mess_send
                  |L1.7826|
;;;1849   	}
;;;1850   
;;;1851   if(vz2_stat==vz2sSTEP2)
001e92  f8980007          LDRB     r0,[r8,#7]  ; vz2_stat
001e96  2802              CMP      r0,#2
001e98  d11a              BNE      |L1.7888|
;;;1852   	{
;;;1853   	if((vz2_stat_old!=vz2_stat)||(vz2_stat_cnt==0))
001e9a  f8980008          LDRB     r0,[r8,#8]  ; vz2_stat_old
001e9e  2802              CMP      r0,#2
001ea0  d102              BNE      |L1.7848|
001ea2  f8b8007e          LDRH     r0,[r8,#0x7e]  ; vz2_stat_cnt
001ea6  b918              CBNZ     r0,|L1.7856|
                  |L1.7848|
;;;1854   		{
;;;1855   		vz2_stat_cnt=15;
001ea8  f04f000f          MOV      r0,#0xf
001eac  f8a8007e          STRH     r0,[r8,#0x7e]
                  |L1.7856|
;;;1856   		}
;;;1857   	vz2_stat_cnt--;
001eb0  f8b8007e          LDRH     r0,[r8,#0x7e]  ; vz2_stat_cnt
001eb4  f1a00001          SUB      r0,r0,#1
001eb8  f8a8007e          STRH     r0,[r8,#0x7e]
;;;1858   	mess_send(MESS2RELE_HNDL,PARAM_RELE_SAMOKALIBR,0,20);
001ebc  f04f0314          MOV      r3,#0x14
001ec0  f04f0200          MOV      r2,#0
001ec4  f04f0164          MOV      r1,#0x64
001ec8  f04f00d2          MOV      r0,#0xd2
001ecc  f7fffffe          BL       mess_send
                  |L1.7888|
;;;1859   	}
;;;1860   
;;;1861   if(vz2_stat==vz2sSTEP3)
001ed0  f8980007          LDRB     r0,[r8,#7]  ; vz2_stat
;;;1862   	{
;;;1863   	if((vz2_stat_old!=vz2_stat)||(vz2_stat_cnt==0))
;;;1864   		{
;;;1865   		vz2_stat_cnt=10;
001ed4  240a              MOVS     r4,#0xa
001ed6  2600              MOVS     r6,#0
;;;1866   		cntrl_stat=0;
;;;1867   		cntrl_stat_new=0;
;;;1868   		cntrl_stat_old=0;
;;;1869   		}
;;;1870   	vz2_stat_cnt--;
;;;1871   	if((vz2_stat_cnt==10)||(vz2_stat_cnt==9))
;;;1872   		{
;;;1873   		show_mess(	"     ВКЛЮЧИТЕ       ",
001ed8  f2413788          MOV      r7,#0x1388
001edc  2803              CMP      r0,#3                 ;1861
001ede  d13e              BNE      |L1.8030|
001ee0  f8980008          LDRB     r0,[r8,#8]            ;1863  ; vz2_stat_old
001ee4  2803              CMP      r0,#3                 ;1863
001ee6  d102              BNE      |L1.7918|
001ee8  f8b8007e          LDRH     r0,[r8,#0x7e]         ;1863  ; vz2_stat_cnt
001eec  b938              CBNZ     r0,|L1.7934|
                  |L1.7918|
001eee  f8a8407e          STRH     r4,[r8,#0x7e]         ;1865
001ef2  f8a86032          STRH     r6,[r8,#0x32]         ;1866
001ef6  f8a86048          STRH     r6,[r8,#0x48]         ;1867
001efa  f8a86034          STRH     r6,[r8,#0x34]         ;1868
                  |L1.7934|
001efe  f8b8007e          LDRH     r0,[r8,#0x7e]         ;1870  ; vz2_stat_cnt
001f02  f1a00001          SUB      r0,r0,#1              ;1870
001f06  b200              SXTH     r0,r0                 ;1870
001f08  f8a8007e          STRH     r0,[r8,#0x7e]         ;1870
001f0c  280a              CMP      r0,#0xa               ;1871
001f0e  d001              BEQ      |L1.7956|
001f10  2809              CMP      r0,#9                 ;1871
001f12  d10a              BNE      |L1.7978|
                  |L1.7956|
001f14  f2af332c          ADR      r3,|L1.7148|
001f18  f2af3218          ADR      r2,|L1.7172|
001f1c  f2af3104          ADR      r1,|L1.7196|
001f20  f2af20f0          ADR      r0,|L1.7220|
001f24  9700              STR      r7,[sp,#0]
001f26  f7fffffe          BL       show_mess
                  |L1.7978|
;;;1874   					"      ТУМБЛЕР       ",
;;;1875   					"     ВЫСОКОГО       ",
;;;1876   					"    НАПРЯЖЕНИЯ      ",
;;;1877   					5000);
;;;1878   		}
;;;1879   	if(sk_stat[1]==1)
001f2a  7868              LDRB     r0,[r5,#1]  ; sk_stat
001f2c  2801              CMP      r0,#1
001f2e  d110              BNE      |L1.8018|
;;;1880   		{
;;;1881   		vz2_stat=vz2sWRK1;
001f30  f8884007          STRB     r4,[r8,#7]
;;;1882   		lc640_write(EE_VZ2_STAT,vz2sWRK1);
001f34  210a              MOVS     r1,#0xa
001f36  f44f70ca          MOV      r0,#0x194
001f3a  f7fffffe          BL       lc640_write
;;;1883   		volt_region=1;
001f3e  f04f0001          MOV      r0,#1
001f42  f888002f          STRB     r0,[r8,#0x2f]
;;;1884   		cntrl_stat=0;
001f46  f8a86032          STRH     r6,[r8,#0x32]
;;;1885   		cntrl_stat_new=0;
001f4a  f8a86048          STRH     r6,[r8,#0x48]
;;;1886   		cntrl_stat_old=0;
001f4e  f8a86034          STRH     r6,[r8,#0x34]
                  |L1.8018|
;;;1887   		}
;;;1888   	mess_send(MESS2RELE_HNDL,PARAM_RELE_SAMOKALIBR,0,20);
001f52  2314              MOVS     r3,#0x14
001f54  2200              MOVS     r2,#0
001f56  2164              MOVS     r1,#0x64
001f58  20d2              MOVS     r0,#0xd2
001f5a  f7fffffe          BL       mess_send
                  |L1.8030|
;;;1889   	}
;;;1890   
;;;1891   if(vz2_stat==vz2sWRK1)
001f5e  f8980007          LDRB     r0,[r8,#7]  ; vz2_stat
;;;1892   	{
;;;1893   
;;;1894   	if(vz2_stat_old!=vz2_stat)
;;;1895   		{
;;;1896   		vz2_wrk_cnt=3600L/*100L*/*((long)FZ_T1);
001f62  f8df9258          LDR      r9,|L1.8636|
;;;1897   		//if(VZ_HR==0)  	hv_vz_wrk_cnt=1800L;
;;;1898   		vz2_up_cnt=0L;
;;;1899   
;;;1900   		}
;;;1901   	vz2_wrk_cnt--;
;;;1902   	vz2_up_cnt++;
;;;1903   
;;;1904   	if(vz2_wrk_cnt==0)
;;;1905   		{
;;;1906   		vz2_stat=vz2sWRK2;
;;;1907   		lc640_write(EE_VZ2_STAT,vz2sWRK2);
;;;1908   		}
;;;1909   	if(sk_stat[0]==0)
;;;1910   		{
;;;1911   		vz2_stat=vz2sERR2;
;;;1912   		lc640_write(EE_VZ2_STAT,vz2sERR2);
;;;1913   		}
;;;1914   	if(sk_stat[1]==0)
;;;1915   		{
;;;1916   		vz2_stat=vz2sERR3;
;;;1917   		lc640_write(EE_VZ2_STAT,vz2sERR3);
;;;1918   		}
;;;1919   	//if(abs(out_U-FZ_U1)<10)
;;;1920   	if((out_U<(FZ_U1+30))&&(out_U>(FZ_U1-10)))
;;;1921   		{
;;;1922   		if((Ib_ips_termokompensat/10)<FZ_ISW12)
;;;1923   			{
;;;1924   			if(vz2_stat_ph2_cnt)
;;;1925   				{
;;;1926   				vz2_stat_ph2_cnt--;
;;;1927   				if(vz2_stat_ph2_cnt==0)
;;;1928   					{
;;;1929   					vz2_stat=vz2sWRK2;
;;;1930   					lc640_write(EE_VZ2_STAT,vz2sWRK2);
;;;1931   					}
;;;1932   				}
;;;1933   			}
;;;1934   		else
;;;1935   			{
;;;1936   			vz2_stat_ph2_cnt=60;
;;;1937   			}
;;;1938   		}
;;;1939   	else
;;;1940   		{
;;;1941   		vz2_stat_ph2_cnt=60;
;;;1942   		}
;;;1943   	if(((Ibmax/10)>IZMAX_)&&(cntrl_stat<=20)&&(volt_region==1)&&(volt_region_cnt==0))
;;;1944   		{
;;;1945   		volt_region=0;
;;;1946   		cntrl_stat=1000;
001f66  f44f7b7a          MOV      r11,#0x3e8
001f6a  f1090980          ADD      r9,r9,#0x80           ;1896
001f6e  f04f0a0b          MOV      r10,#0xb              ;1906
001f72  280a              CMP      r0,#0xa               ;1891
001f74  d17e              BNE      |L1.8308|
001f76  f8980008          LDRB     r0,[r8,#8]            ;1894  ; vz2_stat_old
001f7a  280a              CMP      r0,#0xa               ;1894
001f7c  d00a              BEQ      |L1.8084|
001f7e  4892              LDR      r0,|L1.8648|
001f80  f44f6161          MOV      r1,#0xe10             ;1896
001f84  f9b00000          LDRSH    r0,[r0,#0]            ;1896  ; FZ_T1
001f88  fb00f001          MUL      r0,r0,r1              ;1896
001f8c  f8c90044          STR      r0,[r9,#0x44]         ;1896  ; vz2_wrk_cnt
001f90  f8c96048          STR      r6,[r9,#0x48]         ;1898  ; vz2_up_cnt
                  |L1.8084|
001f94  f8d90044          LDR      r0,[r9,#0x44]         ;1901  ; vz2_wrk_cnt
001f98  f1a00001          SUB      r0,r0,#1              ;1901
001f9c  f8c90044          STR      r0,[r9,#0x44]         ;1901  ; vz2_wrk_cnt
001fa0  f8d91048          LDR      r1,[r9,#0x48]         ;1902  ; vz2_up_cnt
001fa4  f1010101          ADD      r1,r1,#1              ;1902
001fa8  f8c91048          STR      r1,[r9,#0x48]         ;1902  ; vz2_up_cnt
001fac  b930              CBNZ     r0,|L1.8124|
001fae  f888a007          STRB     r10,[r8,#7]           ;1906
001fb2  210b              MOVS     r1,#0xb               ;1907
001fb4  f44f70ca          MOV      r0,#0x194             ;1907
001fb8  f7fffffe          BL       lc640_write
                  |L1.8124|
001fbc  7828              LDRB     r0,[r5,#0]            ;1909  ; sk_stat
001fbe  b940              CBNZ     r0,|L1.8146|
001fc0  f04f000d          MOV      r0,#0xd               ;1911
001fc4  f8880007          STRB     r0,[r8,#7]            ;1911
001fc8  4601              MOV      r1,r0                 ;1912
001fca  f44f70ca          MOV      r0,#0x194             ;1912
001fce  f7fffffe          BL       lc640_write
                  |L1.8146|
001fd2  7868              LDRB     r0,[r5,#1]            ;1914  ; sk_stat
001fd4  b940              CBNZ     r0,|L1.8168|
001fd6  f04f000e          MOV      r0,#0xe               ;1916
001fda  f8880007          STRB     r0,[r8,#7]            ;1916
001fde  4601              MOV      r1,r0                 ;1917
001fe0  f44f70ca          MOV      r0,#0x194             ;1917
001fe4  f7fffffe          BL       lc640_write
                  |L1.8168|
001fe8  4979              LDR      r1,|L1.8656|
001fea  4878              LDR      r0,|L1.8652|
001fec  233c              MOVS     r3,#0x3c              ;1936
001fee  f9b11000          LDRSH    r1,[r1,#0]            ;1920  ; FZ_U1
001ff2  f9b00000          LDRSH    r0,[r0,#0]            ;1920  ; out_U
001ff6  f101021e          ADD      r2,r1,#0x1e           ;1920
001ffa  4290              CMP      r0,r2                 ;1920
001ffc  da20              BGE      |L1.8256|
001ffe  390a              SUBS     r1,r1,#0xa            ;1920
002000  4288              CMP      r0,r1                 ;1920
002002  dd1d              BLE      |L1.8256|
002004  4873              LDR      r0,|L1.8660|
002006  4974              LDR      r1,|L1.8664|
002008  f9b00000          LDRSH    r0,[r0,#0]            ;1922  ; Ib_ips_termokompensat
00200c  f9b11000          LDRSH    r1,[r1,#0]            ;1922  ; FZ_ISW12
002010  fb90f0f4          SDIV     r0,r0,r4              ;1922
002014  4288              CMP      r0,r1                 ;1922
002016  da10              BGE      |L1.8250|
002018  f9b90000          LDRSH    r0,[r9,#0]            ;1924  ; vz2_stat_ph2_cnt
00201c  b190              CBZ      r0,|L1.8260|
00201e  f1a00001          SUB      r0,r0,#1              ;1926
002022  b200              SXTH     r0,r0                 ;1926
002024  f8a90000          STRH     r0,[r9,#0]            ;1926
002028  b960              CBNZ     r0,|L1.8260|
00202a  f888a007          STRB     r10,[r8,#7]           ;1929
00202e  210b              MOVS     r1,#0xb               ;1930
002030  f44f70ca          MOV      r0,#0x194             ;1930
002034  f7fffffe          BL       lc640_write
002038  e004              B        |L1.8260|
                  |L1.8250|
00203a  f8a93000          STRH     r3,[r9,#0]            ;1936
00203e  e001              B        |L1.8260|
                  |L1.8256|
002040  f8a93000          STRH     r3,[r9,#0]            ;1941
                  |L1.8260|
002044  f9b8004a          LDRSH    r0,[r8,#0x4a]         ;1943  ; Ibmax
002048  f8b8104c          LDRH     r1,[r8,#0x4c]         ;1943  ; IZMAX_
00204c  fb90f0f4          SDIV     r0,r0,r4              ;1943
002050  4288              CMP      r0,r1                 ;1943
002052  dd18              BLE      |L1.8326|
002054  f9b82032          LDRSH    r2,[r8,#0x32]         ;1943  ; cntrl_stat
002058  2a14              CMP      r2,#0x14              ;1943
00205a  dc14              BGT      |L1.8326|
00205c  f898202f          LDRB     r2,[r8,#0x2f]         ;1943  ; volt_region
002060  2a01              CMP      r2,#1                 ;1943
002062  d110              BNE      |L1.8326|
002064  f8b8207c          LDRH     r2,[r8,#0x7c]         ;1943  ; volt_region_cnt
002068  b96a              CBNZ     r2,|L1.8326|
00206a  f888602f          STRB     r6,[r8,#0x2f]         ;1945
00206e  f8a8b032          STRH     r11,[r8,#0x32]
;;;1947   		cntrl_stat_new=1000;
002072  e000              B        |L1.8310|
                  |L1.8308|
002074  e032              B        |L1.8412|
                  |L1.8310|
002076  f8a8b048          STRH     r11,[r8,#0x48]
;;;1948   		cntrl_stat_old=1000;
00207a  f8a8b034          STRH     r11,[r8,#0x34]
;;;1949   		volt_region_cnt=110;
00207e  f04f026e          MOV      r2,#0x6e
002082  f8a8207c          STRH     r2,[r8,#0x7c]
                  |L1.8326|
;;;1950   		}
;;;1951   	if(((Ibmax/10)<IZMAX_)&&(cntrl_stat>=1000)&&(volt_region==0)&&(volt_region_cnt==0))
002086  4288              CMP      r0,r1
002088  da15              BGE      |L1.8374|
00208a  f9b80032          LDRSH    r0,[r8,#0x32]  ; cntrl_stat
00208e  4558              CMP      r0,r11
002090  db11              BLT      |L1.8374|
002092  f898002f          LDRB     r0,[r8,#0x2f]  ; volt_region
002096  b970              CBNZ     r0,|L1.8374|
002098  f8b8007c          LDRH     r0,[r8,#0x7c]  ; volt_region_cnt
00209c  b958              CBNZ     r0,|L1.8374|
;;;1952   		{
;;;1953   		volt_region=1;
00209e  f04f0001          MOV      r0,#1
0020a2  f888002f          STRB     r0,[r8,#0x2f]
;;;1954   		cntrl_stat=10;
0020a6  f8a84032          STRH     r4,[r8,#0x32]
;;;1955   		cntrl_stat_new=10;
0020aa  f8a84048          STRH     r4,[r8,#0x48]
;;;1956   		cntrl_stat_old=10;
0020ae  f8a84034          STRH     r4,[r8,#0x34]
;;;1957   		volt_region_cnt=10;
0020b2  f8a8407c          STRH     r4,[r8,#0x7c]
                  |L1.8374|
;;;1958   		}
;;;1959   	if(volt_region==0) 		mess_send(MESS2RELE_HNDL,PARAM_RELE_SAMOKALIBR,0,20);
0020b6  f898002f          LDRB     r0,[r8,#0x2f]  ; volt_region
0020ba  b110              CBZ      r0,|L1.8386|
;;;1960   	else if(volt_region==1) mess_send(MESS2RELE_HNDL,PARAM_RELE_SAMOKALIBR,1,20);
0020bc  2801              CMP      r0,#1
0020be  d007              BEQ      |L1.8400|
0020c0  e00c              B        |L1.8412|
                  |L1.8386|
0020c2  2314              MOVS     r3,#0x14              ;1959
0020c4  2200              MOVS     r2,#0                 ;1959
0020c6  2164              MOVS     r1,#0x64              ;1959
0020c8  20d2              MOVS     r0,#0xd2              ;1959
0020ca  f7fffffe          BL       mess_send
0020ce  e005              B        |L1.8412|
                  |L1.8400|
0020d0  2314              MOVS     r3,#0x14
0020d2  2201              MOVS     r2,#1
0020d4  2164              MOVS     r1,#0x64
0020d6  20d2              MOVS     r0,#0xd2
0020d8  f7fffffe          BL       mess_send
                  |L1.8412|
;;;1961   	}
;;;1962   
;;;1963   if(vz2_stat==vz2sWRK2)
0020dc  f8980007          LDRB     r0,[r8,#7]  ; vz2_stat
0020e0  280b              CMP      r0,#0xb
0020e2  d17d              BNE      |L1.8672|
;;;1964   	{
;;;1965   	if(vz2_stat_old!=vz2_stat)
0020e4  f8980008          LDRB     r0,[r8,#8]  ; vz2_stat_old
0020e8  280b              CMP      r0,#0xb
0020ea  d008              BEQ      |L1.8446|
;;;1966   		{
;;;1967   		vz2_wrk_cnt=3600L/*100L*/*((long)FZ_T2);
0020ec  483b              LDR      r0,|L1.8668|
0020ee  f44f6161          MOV      r1,#0xe10
0020f2  f9b00000          LDRSH    r0,[r0,#0]  ; FZ_T2
0020f6  fb00f001          MUL      r0,r0,r1
0020fa  f8c90044          STR      r0,[r9,#0x44]  ; vz2_wrk_cnt
                  |L1.8446|
;;;1968   		//if(VZ_HR==0)  	hv_vz_wrk_cnt=1800L;
;;;1969   		//vz2_up_cnt=0L;
;;;1970   		}
;;;1971   	vz2_wrk_cnt--;
0020fe  f8d90044          LDR      r0,[r9,#0x44]  ; vz2_wrk_cnt
002102  f1a00001          SUB      r0,r0,#1
002106  f8c90044          STR      r0,[r9,#0x44]  ; vz2_wrk_cnt
;;;1972   	vz2_up_cnt++;
00210a  f8d91048          LDR      r1,[r9,#0x48]  ; vz2_up_cnt
00210e  f1010101          ADD      r1,r1,#1
002112  f8c91048          STR      r1,[r9,#0x48]  ; vz2_up_cnt
;;;1973   
;;;1974   	if(vz2_wrk_cnt==0)
002116  b958              CBNZ     r0,|L1.8496|
;;;1975   		{
;;;1976   		vz2_stat=vz2sFINE;
002118  f04f0012          MOV      r0,#0x12
00211c  f8880007          STRB     r0,[r8,#7]
;;;1977   		lc640_write(EE_VZ2_STAT,vz2sFINE);
002120  4601              MOV      r1,r0
002122  f44f70ca          MOV      r0,#0x194
002126  f7fffffe          BL       lc640_write
;;;1978   		fz_mem_hndl(0);
00212a  2000              MOVS     r0,#0
00212c  f7fffffe          BL       fz_mem_hndl
                  |L1.8496|
;;;1979   		}
;;;1980   	if(sk_stat[0]==0)
002130  7828              LDRB     r0,[r5,#0]  ; sk_stat
002132  b940              CBNZ     r0,|L1.8518|
;;;1981   		{
;;;1982   		vz2_stat=vz2sERR5;
002134  f04f0010          MOV      r0,#0x10
002138  f8880007          STRB     r0,[r8,#7]
;;;1983   		lc640_write(EE_VZ2_STAT,vz2sERR5);
00213c  4601              MOV      r1,r0
00213e  f44f70ca          MOV      r0,#0x194
002142  f7fffffe          BL       lc640_write
                  |L1.8518|
;;;1984   		}
;;;1985   	if(sk_stat[1]==0)
002146  7868              LDRB     r0,[r5,#1]  ; sk_stat
002148  b940              CBNZ     r0,|L1.8540|
;;;1986   		{
;;;1987   		vz2_stat=vz2sERR6;
00214a  f04f0011          MOV      r0,#0x11
00214e  f8880007          STRB     r0,[r8,#7]
;;;1988   		lc640_write(EE_VZ2_STAT,vz2sERR6);
002152  4601              MOV      r1,r0
002154  f44f70ca          MOV      r0,#0x194
002158  f7fffffe          BL       lc640_write
                  |L1.8540|
;;;1989   		}
;;;1990   	if(((Ibmax/10)>IZMAX_)&&(cntrl_stat<=20)&&(volt_region==1)&&(volt_region_cnt==0))
00215c  f9b8004a          LDRSH    r0,[r8,#0x4a]  ; Ibmax
002160  f8b8104c          LDRH     r1,[r8,#0x4c]  ; IZMAX_
002164  fb90f0f4          SDIV     r0,r0,r4
002168  4288              CMP      r0,r1
00216a  dd16              BLE      |L1.8602|
00216c  f9b82032          LDRSH    r2,[r8,#0x32]  ; cntrl_stat
002170  2a14              CMP      r2,#0x14
002172  dc12              BGT      |L1.8602|
002174  f898202f          LDRB     r2,[r8,#0x2f]  ; volt_region
002178  2a01              CMP      r2,#1
00217a  d10e              BNE      |L1.8602|
00217c  f8b8207c          LDRH     r2,[r8,#0x7c]  ; volt_region_cnt
002180  b95a              CBNZ     r2,|L1.8602|
;;;1991   		{
;;;1992   		volt_region=0;
002182  f888602f          STRB     r6,[r8,#0x2f]
;;;1993   		cntrl_stat=1000;
002186  f8a8b032          STRH     r11,[r8,#0x32]
;;;1994   		cntrl_stat_new=1000;
00218a  f8a8b048          STRH     r11,[r8,#0x48]
;;;1995   		cntrl_stat_old=1000;
00218e  f8a8b034          STRH     r11,[r8,#0x34]
;;;1996   		volt_region_cnt=110;
002192  f04f026e          MOV      r2,#0x6e
002196  f8a8207c          STRH     r2,[r8,#0x7c]
                  |L1.8602|
;;;1997   		}
;;;1998   	if(((Ibmax/10)<IZMAX_)&&(cntrl_stat>=1000)&&(volt_region==0)&&(volt_region_cnt==0))
00219a  4288              CMP      r0,r1
00219c  da29              BGE      |L1.8690|
00219e  f9b80032          LDRSH    r0,[r8,#0x32]  ; cntrl_stat
0021a2  4558              CMP      r0,r11
0021a4  db25              BLT      |L1.8690|
0021a6  f898002f          LDRB     r0,[r8,#0x2f]  ; volt_region
0021aa  bb10              CBNZ     r0,|L1.8690|
0021ac  f8b8007c          LDRH     r0,[r8,#0x7c]  ; volt_region_cnt
0021b0  b9f8              CBNZ     r0,|L1.8690|
;;;1999   		{
;;;2000   		volt_region=1;
0021b2  f04f0001          MOV      r0,#1
0021b6  f888002f          STRB     r0,[r8,#0x2f]
;;;2001   		cntrl_stat=10;
0021ba  e012              B        |L1.8674|
                  |L1.8636|
                          DCD      ||area_number.25||
                  |L1.8640|
                          DCD      speedChrgBlckStat
                  |L1.8644|
                          DCD      sk_stat
                  |L1.8648|
                          DCD      FZ_T1
                  |L1.8652|
                          DCD      out_U
                  |L1.8656|
                          DCD      FZ_U1
                  |L1.8660|
                          DCD      Ib_ips_termokompensat
                  |L1.8664|
                          DCD      FZ_ISW12
                  |L1.8668|
                          DCD      FZ_T2
                  |L1.8672|
0021e0  e01a              B        |L1.8728|
                  |L1.8674|
0021e2  f8a84032          STRH     r4,[r8,#0x32]
;;;2002   		cntrl_stat_new=10;
0021e6  f8a84048          STRH     r4,[r8,#0x48]
;;;2003   		cntrl_stat_old=10;
0021ea  f8a84034          STRH     r4,[r8,#0x34]
;;;2004   		volt_region_cnt=10;
0021ee  f8a8407c          STRH     r4,[r8,#0x7c]
                  |L1.8690|
;;;2005   		}
;;;2006   	if(volt_region==0) 		mess_send(MESS2RELE_HNDL,PARAM_RELE_SAMOKALIBR,0,20);
0021f2  f898002f          LDRB     r0,[r8,#0x2f]  ; volt_region
0021f6  b110              CBZ      r0,|L1.8702|
;;;2007   	else if(volt_region==1) mess_send(MESS2RELE_HNDL,PARAM_RELE_SAMOKALIBR,1,20);
0021f8  2801              CMP      r0,#1
0021fa  d007              BEQ      |L1.8716|
0021fc  e00c              B        |L1.8728|
                  |L1.8702|
0021fe  2314              MOVS     r3,#0x14              ;2006
002200  2200              MOVS     r2,#0                 ;2006
002202  2164              MOVS     r1,#0x64              ;2006
002204  20d2              MOVS     r0,#0xd2              ;2006
002206  f7fffffe          BL       mess_send
00220a  e005              B        |L1.8728|
                  |L1.8716|
00220c  2314              MOVS     r3,#0x14
00220e  2201              MOVS     r2,#1
002210  2164              MOVS     r1,#0x64
002212  20d2              MOVS     r0,#0xd2
002214  f7fffffe          BL       mess_send
                  |L1.8728|
;;;2008   	}
;;;2009   
;;;2010   if(vz2_stat==vz2sERR1)		//Отсутствует вентиляция при включении
002218  f8980007          LDRB     r0,[r8,#7]  ; vz2_stat
00221c  280c              CMP      r0,#0xc
00221e  d123              BNE      |L1.8808|
;;;2011   	{
;;;2012   	if((vz2_stat_old!=vz2_stat)||(vz2_stat_cnt==0))
002220  f8980008          LDRB     r0,[r8,#8]  ; vz2_stat_old
002224  280c              CMP      r0,#0xc
002226  d102              BNE      |L1.8750|
002228  f8b8007e          LDRH     r0,[r8,#0x7e]  ; vz2_stat_cnt
00222c  b908              CBNZ     r0,|L1.8754|
                  |L1.8750|
;;;2013   		{
;;;2014   		vz2_stat_cnt=10;
00222e  f8a8407e          STRH     r4,[r8,#0x7e]
                  |L1.8754|
;;;2015   		}
;;;2016   	vz2_stat_cnt--;
002232  f8b8007e          LDRH     r0,[r8,#0x7e]  ; vz2_stat_cnt
002236  f1a00001          SUB      r0,r0,#1
00223a  b200              SXTH     r0,r0
00223c  f8a8007e          STRH     r0,[r8,#0x7e]
;;;2017   	if((vz2_stat_cnt==10)||(vz2_stat_cnt==9))
002240  280a              CMP      r0,#0xa
002242  d001              BEQ      |L1.8776|
002244  2809              CMP      r0,#9
002246  d109              BNE      |L1.8796|
                  |L1.8776|
;;;2018   		{
;;;2019   		show_mess(	" ФОРМОВОЧНЫЙ ЗАРЯД  ",
002248  f2af53f8          ADR      r3,|L1.7252|
00224c  f2af52e4          ADR      r2,|L1.7276|
002250  f2af51d0          ADR      r1,|L1.7300|
002254  a0ff              ADR      r0,|L1.9812|
002256  9700              STR      r7,[sp,#0]
002258  f7fffffe          BL       show_mess
                  |L1.8796|
;;;2020   					"   НЕ МОЖЕТ БЫТЬ    ",
;;;2021   					"      ВКЛЮЧЕН       ",
;;;2022   					"  БЕЗ ВЕНТИЛЯЦИИ!!  ",
;;;2023   					5000);
;;;2024   		}
;;;2025   	mess_send(MESS2RELE_HNDL,PARAM_RELE_SAMOKALIBR,0,20);
00225c  2314              MOVS     r3,#0x14
00225e  2200              MOVS     r2,#0
002260  2164              MOVS     r1,#0x64
002262  20d2              MOVS     r0,#0xd2
002264  f7fffffe          BL       mess_send
                  |L1.8808|
;;;2026   	}
;;;2027   if(vz2_stat==vz2sERR2)		//Пропала вентиляция при работе в первой фазе ФЗ
002268  f8980007          LDRB     r0,[r8,#7]  ; vz2_stat
00226c  280d              CMP      r0,#0xd
00226e  d12d              BNE      |L1.8908|
;;;2028   	{
;;;2029   	if((vz2_stat_old!=vz2_stat)||(vz2_stat_cnt==0))
002270  f8980008          LDRB     r0,[r8,#8]  ; vz2_stat_old
002274  280d              CMP      r0,#0xd
002276  d102              BNE      |L1.8830|
002278  f8b8007e          LDRH     r0,[r8,#0x7e]  ; vz2_stat_cnt
00227c  b908              CBNZ     r0,|L1.8834|
                  |L1.8830|
;;;2030   		{
;;;2031   		vz2_stat_cnt=10;
00227e  f8a8407e          STRH     r4,[r8,#0x7e]
                  |L1.8834|
;;;2032   		}
;;;2033   	vz2_stat_cnt--;
002282  f8b8007e          LDRH     r0,[r8,#0x7e]  ; vz2_stat_cnt
002286  f1a00001          SUB      r0,r0,#1
00228a  b200              SXTH     r0,r0
00228c  f8a8007e          STRH     r0,[r8,#0x7e]
;;;2034   	if((vz2_stat_cnt==10)||(vz2_stat_cnt==9))
002290  280a              CMP      r0,#0xa
002292  d001              BEQ      |L1.8856|
002294  2809              CMP      r0,#9
002296  d109              BNE      |L1.8876|
                  |L1.8856|
;;;2035   		{
;;;2036   		show_mess(	" ФОРМОВОЧНЫЙ ЗАРЯД  ",
002298  f6af3308          ADR      r3,|L1.6036|
00229c  f6af22f4          ADR      r2,|L1.6060|
0022a0  f6af21e0          ADR      r1,|L1.6084|
0022a4  a0eb              ADR      r0,|L1.9812|
0022a6  9700              STR      r7,[sp,#0]
0022a8  f7fffffe          BL       show_mess
                  |L1.8876|
;;;2037   					"    ЗАБЛОКИРОВАН    ",
;;;2038   					"     НЕИСПРАВНА     ",
;;;2039   					"    ВЕНТИЛЯЦИЯ!!!   ",
;;;2040   					5000);
;;;2041   		}
;;;2042   	if(sk_stat[0]==1)
0022ac  7828              LDRB     r0,[r5,#0]  ; sk_stat
0022ae  2801              CMP      r0,#1
0022b0  d106              BNE      |L1.8896|
;;;2043   		{
;;;2044   		vz2_stat=vz2sWRK1;
0022b2  f8884007          STRB     r4,[r8,#7]
;;;2045   		lc640_write(EE_VZ2_STAT,vz2sWRK1);
0022b6  210a              MOVS     r1,#0xa
0022b8  f44f70ca          MOV      r0,#0x194
0022bc  f7fffffe          BL       lc640_write
                  |L1.8896|
;;;2046   		}
;;;2047   	mess_send(MESS2RELE_HNDL,PARAM_RELE_SAMOKALIBR,0,20);
0022c0  2314              MOVS     r3,#0x14
0022c2  2200              MOVS     r2,#0
0022c4  2164              MOVS     r1,#0x64
0022c6  20d2              MOVS     r0,#0xd2
0022c8  f7fffffe          BL       mess_send
                  |L1.8908|
;;;2048   	}
;;;2049   
;;;2050   if(vz2_stat==vz2sERR3)		//Отключен тумблер "Выравнивающий заряд" при работе в первой фазе ФЗ
0022cc  f8980007          LDRB     r0,[r8,#7]  ; vz2_stat
0022d0  280e              CMP      r0,#0xe
0022d2  d12c              BNE      |L1.9006|
;;;2051   	{
;;;2052   	if((vz2_stat_old!=vz2_stat)||(vz2_stat_cnt==0))
0022d4  f8980008          LDRB     r0,[r8,#8]  ; vz2_stat_old
0022d8  280e              CMP      r0,#0xe
0022da  d102              BNE      |L1.8930|
0022dc  f8b8007e          LDRH     r0,[r8,#0x7e]  ; vz2_stat_cnt
0022e0  b908              CBNZ     r0,|L1.8934|
                  |L1.8930|
;;;2053   		{
;;;2054   		vz2_stat_cnt=10;
0022e2  f8a8407e          STRH     r4,[r8,#0x7e]
                  |L1.8934|
;;;2055   		}
;;;2056   	vz2_stat_cnt--;
0022e6  f8b8007e          LDRH     r0,[r8,#0x7e]  ; vz2_stat_cnt
0022ea  f1a00001          SUB      r0,r0,#1
0022ee  b200              SXTH     r0,r0
0022f0  f8a8007e          STRH     r0,[r8,#0x7e]
;;;2057   	if((vz2_stat_cnt==10)||(vz2_stat_cnt==9))
0022f4  280a              CMP      r0,#0xa
0022f6  d001              BEQ      |L1.8956|
0022f8  2809              CMP      r0,#9
0022fa  d108              BNE      |L1.8974|
                  |L1.8956|
;;;2058   		{
;;;2059   		show_mess(	" ФОРМОВОЧНЫЙ ЗАРЯД  ",
0022fc  a3db              ADR      r3,|L1.9836|
0022fe  f2af6234          ADR      r2,|L1.7372|
002302  f2af6120          ADR      r1,|L1.7396|
002306  a0d3              ADR      r0,|L1.9812|
002308  9700              STR      r7,[sp,#0]
00230a  f7fffffe          BL       show_mess
                  |L1.8974|
;;;2060   					"  БУДЕТ ПРОДОЛЖЕН   ",
;;;2061   					"  ПОСЛЕ ВКЛЮЧЕНИЯ   ",
;;;2062   					"    ТУМБЛЕРА!!!     ",
;;;2063   					5000);
;;;2064   		}
;;;2065   	if(sk_stat[1]==1)
00230e  7868              LDRB     r0,[r5,#1]  ; sk_stat
002310  2801              CMP      r0,#1
002312  d106              BNE      |L1.8994|
;;;2066   		{
;;;2067   		vz2_stat=vz2sWRK1;
002314  f8884007          STRB     r4,[r8,#7]
;;;2068   		lc640_write(EE_VZ2_STAT,vz2sWRK1);
002318  210a              MOVS     r1,#0xa
00231a  f44f70ca          MOV      r0,#0x194
00231e  f7fffffe          BL       lc640_write
                  |L1.8994|
;;;2069   		}
;;;2070   	mess_send(MESS2RELE_HNDL,PARAM_RELE_SAMOKALIBR,0,20);
002322  2314              MOVS     r3,#0x14
002324  2200              MOVS     r2,#0
002326  2164              MOVS     r1,#0x64
002328  20d2              MOVS     r0,#0xd2
00232a  f7fffffe          BL       mess_send
                  |L1.9006|
;;;2071   	}
;;;2072   if(vz2_stat==vz2sERR5)		//Пропала вентиляция при работе
00232e  f8980007          LDRB     r0,[r8,#7]  ; vz2_stat
002332  2810              CMP      r0,#0x10
002334  d12d              BNE      |L1.9106|
;;;2073   	{
;;;2074   	if((vz2_stat_old!=vz2_stat)||(vz2_stat_cnt==0))
002336  f8980008          LDRB     r0,[r8,#8]  ; vz2_stat_old
00233a  2810              CMP      r0,#0x10
00233c  d102              BNE      |L1.9028|
00233e  f8b8007e          LDRH     r0,[r8,#0x7e]  ; vz2_stat_cnt
002342  b908              CBNZ     r0,|L1.9032|
                  |L1.9028|
;;;2075   		{
;;;2076   		vz2_stat_cnt=10;
002344  f8a8407e          STRH     r4,[r8,#0x7e]
                  |L1.9032|
;;;2077   		}
;;;2078   	vz2_stat_cnt--;
002348  f8b8007e          LDRH     r0,[r8,#0x7e]  ; vz2_stat_cnt
00234c  f1a00001          SUB      r0,r0,#1
002350  b200              SXTH     r0,r0
002352  f8a8007e          STRH     r0,[r8,#0x7e]
;;;2079   	if((vz2_stat_cnt==10)||(vz2_stat_cnt==9))
002356  280a              CMP      r0,#0xa
002358  d001              BEQ      |L1.9054|
00235a  2809              CMP      r0,#9
00235c  d109              BNE      |L1.9074|
                  |L1.9054|
;;;2080   		{
;;;2081   		show_mess(	" ФОРМОВОЧНЫЙ ЗАРЯД  ",
00235e  f6af33cc          ADR      r3,|L1.6036|
002362  f6af32b8          ADR      r2,|L1.6060|
002366  f6af31a4          ADR      r1,|L1.6084|
00236a  a0ba              ADR      r0,|L1.9812|
00236c  9700              STR      r7,[sp,#0]
00236e  f7fffffe          BL       show_mess
                  |L1.9074|
;;;2082   					"    ЗАБЛОКИРОВАН    ",
;;;2083   					"     НЕИСПРАВНА     ",
;;;2084   					"    ВЕНТИЛЯЦИЯ!!!   ",
;;;2085   					5000);
;;;2086   		}
;;;2087   	if(sk_stat[0]==1)
002372  7828              LDRB     r0,[r5,#0]  ; sk_stat
002374  2801              CMP      r0,#1
002376  d106              BNE      |L1.9094|
;;;2088   		{
;;;2089   		vz2_stat=vz2sWRK2;
002378  f888a007          STRB     r10,[r8,#7]
;;;2090   		lc640_write(EE_VZ2_STAT,vz2sWRK2);
00237c  210b              MOVS     r1,#0xb
00237e  f44f70ca          MOV      r0,#0x194
002382  f7fffffe          BL       lc640_write
                  |L1.9094|
;;;2091   		}
;;;2092   	mess_send(MESS2RELE_HNDL,PARAM_RELE_SAMOKALIBR,0,20);
002386  2314              MOVS     r3,#0x14
002388  2200              MOVS     r2,#0
00238a  2164              MOVS     r1,#0x64
00238c  20d2              MOVS     r0,#0xd2
00238e  f7fffffe          BL       mess_send
                  |L1.9106|
;;;2093   	}
;;;2094   
;;;2095   if(vz2_stat==vz2sERR6)		//Отключен тумблер "Выравнивающий заряд"
002392  f8980007          LDRB     r0,[r8,#7]  ; vz2_stat
002396  2811              CMP      r0,#0x11
002398  d12c              BNE      |L1.9204|
;;;2096   	{
;;;2097   	if((vz2_stat_old!=vz2_stat)||(vz2_stat_cnt==0))
00239a  f8980008          LDRB     r0,[r8,#8]  ; vz2_stat_old
00239e  2811              CMP      r0,#0x11
0023a0  d102              BNE      |L1.9128|
0023a2  f8b8007e          LDRH     r0,[r8,#0x7e]  ; vz2_stat_cnt
0023a6  b908              CBNZ     r0,|L1.9132|
                  |L1.9128|
;;;2098   		{
;;;2099   		vz2_stat_cnt=10;
0023a8  f8a8407e          STRH     r4,[r8,#0x7e]
                  |L1.9132|
;;;2100   		}
;;;2101   	vz2_stat_cnt--;
0023ac  f8b8007e          LDRH     r0,[r8,#0x7e]  ; vz2_stat_cnt
0023b0  f1a00001          SUB      r0,r0,#1
0023b4  b200              SXTH     r0,r0
0023b6  f8a8007e          STRH     r0,[r8,#0x7e]
;;;2102   	if((vz2_stat_cnt==10)||(vz2_stat_cnt==9))
0023ba  280a              CMP      r0,#0xa
0023bc  d001              BEQ      |L1.9154|
0023be  2809              CMP      r0,#9
0023c0  d108              BNE      |L1.9172|
                  |L1.9154|
;;;2103   		{
;;;2104   		show_mess(	" ФОРМОВОЧНЫЙ ЗАРЯД  ",
0023c2  a3aa              ADR      r3,|L1.9836|
0023c4  f2af62fc          ADR      r2,|L1.7372|
0023c8  f2af61e8          ADR      r1,|L1.7396|
0023cc  a0a1              ADR      r0,|L1.9812|
0023ce  9700              STR      r7,[sp,#0]
0023d0  f7fffffe          BL       show_mess
                  |L1.9172|
;;;2105   					"  БУДЕТ ПРОДОЛЖЕН   ",
;;;2106   					"  ПОСЛЕ ВКЛЮЧЕНИЯ   ",
;;;2107   					"    ТУМБЛЕРА!!!     ",
;;;2108   					5000);
;;;2109   		}
;;;2110   	if(sk_stat[1]==1)
0023d4  7868              LDRB     r0,[r5,#1]  ; sk_stat
0023d6  2801              CMP      r0,#1
0023d8  d106              BNE      |L1.9192|
;;;2111   		{
;;;2112   		vz2_stat=vz2sWRK2;
0023da  f888a007          STRB     r10,[r8,#7]
;;;2113   		lc640_write(EE_VZ2_STAT,vz2sWRK2);
0023de  210b              MOVS     r1,#0xb
0023e0  f44f70ca          MOV      r0,#0x194
0023e4  f7fffffe          BL       lc640_write
                  |L1.9192|
;;;2114   		}
;;;2115   	mess_send(MESS2RELE_HNDL,PARAM_RELE_SAMOKALIBR,0,20);
0023e8  2314              MOVS     r3,#0x14
0023ea  2200              MOVS     r2,#0
0023ec  2164              MOVS     r1,#0x64
0023ee  20d2              MOVS     r0,#0xd2
0023f0  f7fffffe          BL       mess_send
                  |L1.9204|
;;;2116   	}
;;;2117   if(vz2_stat==vz2sERR4)		//ВЗ закончился а тумблер включен
0023f4  f8980007          LDRB     r0,[r8,#7]  ; vz2_stat
0023f8  280f              CMP      r0,#0xf
0023fa  d12f              BNE      |L1.9308|
;;;2118   	{
;;;2119   	if((vz2_stat_old!=vz2_stat)||(vz2_stat_cnt==0))
0023fc  f8980008          LDRB     r0,[r8,#8]  ; vz2_stat_old
002400  280f              CMP      r0,#0xf
002402  d102              BNE      |L1.9226|
002404  f8b8007e          LDRH     r0,[r8,#0x7e]  ; vz2_stat_cnt
002408  b908              CBNZ     r0,|L1.9230|
                  |L1.9226|
;;;2120   		{
;;;2121   		vz2_stat_cnt=10;
00240a  f8a8407e          STRH     r4,[r8,#0x7e]
                  |L1.9230|
;;;2122   		}
;;;2123   	vz2_stat_cnt--;
00240e  f8b8007e          LDRH     r0,[r8,#0x7e]  ; vz2_stat_cnt
002412  f1a00001          SUB      r0,r0,#1
002416  b200              SXTH     r0,r0
002418  f8a8007e          STRH     r0,[r8,#0x7e]
;;;2124   	if((vz2_stat_cnt==10)||(vz2_stat_cnt==9))
00241c  280a              CMP      r0,#0xa
00241e  d001              BEQ      |L1.9252|
002420  2809              CMP      r0,#9
002422  d10a              BNE      |L1.9274|
                  |L1.9252|
;;;2125   		{
;;;2126   		show_mess(	"     ВЫКЛЮЧИТЕ      ",
002424  f6af033c          ADR      r3,|L1.7148|
002428  f6af0228          ADR      r2,|L1.7172|
00242c  f6af0114          ADR      r1,|L1.7196|
002430  f2af60c0          ADR      r0,|L1.7540|
002434  9700              STR      r7,[sp,#0]
002436  f7fffffe          BL       show_mess
                  |L1.9274|
;;;2127   					"      ТУМБЛЕР       ",
;;;2128   					"     ВЫСОКОГО       ",
;;;2129   					"    НАПРЯЖЕНИЯ      ",
;;;2130   					5000);
;;;2131   		}
;;;2132   	if(sk_stat[1]==0)
00243a  7868              LDRB     r0,[r5,#1]  ; sk_stat
00243c  b940              CBNZ     r0,|L1.9296|
;;;2133   		{
;;;2134   		vz2_stat=vz2sOFF;
00243e  f8886007          STRB     r6,[r8,#7]
;;;2135   		lc640_write(EE_VZ2_STAT,vz2sOFF);
002442  2100              MOVS     r1,#0
002444  f44f70ca          MOV      r0,#0x194
002448  f7fffffe          BL       lc640_write
;;;2136   		vz_stop();
00244c  f7fffffe          BL       vz_stop
                  |L1.9296|
;;;2137   
;;;2138   		}
;;;2139   	mess_send(MESS2RELE_HNDL,PARAM_RELE_SAMOKALIBR,0,20);
002450  2314              MOVS     r3,#0x14
002452  2200              MOVS     r2,#0
002454  2164              MOVS     r1,#0x64
002456  20d2              MOVS     r0,#0xd2
002458  f7fffffe          BL       mess_send
                  |L1.9308|
;;;2140   	}
;;;2141   if(vz2_stat==vz2sFINE)		//ФЗ закончился, напоминание
00245c  f8980007          LDRB     r0,[r8,#7]  ; vz2_stat
;;;2142   	{
;;;2143   	if((vz2_stat_old!=vz2_stat)||(vz2_stat_cnt==0))
;;;2144   		{
;;;2145   		vz2_stat_cnt=10;
;;;2146   		}
;;;2147   	vz2_stat_cnt--;
;;;2148   	if((vz2_stat_cnt==10)||(vz2_stat_cnt==9))
;;;2149   		{
;;;2150   		show_mess(	"    ФОРМОВОЧНЫЙ     ",
002460  f64037b8          MOV      r7,#0xbb8
002464  2812              CMP      r0,#0x12              ;2141
002466  d13d              BNE      |L1.9444|
002468  f8980008          LDRB     r0,[r8,#8]            ;2143  ; vz2_stat_old
00246c  2812              CMP      r0,#0x12              ;2143
00246e  d102              BNE      |L1.9334|
002470  f8b8007e          LDRH     r0,[r8,#0x7e]         ;2143  ; vz2_stat_cnt
002474  b908              CBNZ     r0,|L1.9338|
                  |L1.9334|
002476  f8a8407e          STRH     r4,[r8,#0x7e]         ;2145
                  |L1.9338|
00247a  f8b8007e          LDRH     r0,[r8,#0x7e]         ;2147  ; vz2_stat_cnt
00247e  f1a00001          SUB      r0,r0,#1              ;2147
002482  b200              SXTH     r0,r0                 ;2147
002484  f8a8007e          STRH     r0,[r8,#0x7e]         ;2147
002488  280a              CMP      r0,#0xa               ;2148
00248a  d001              BEQ      |L1.9360|
00248c  2809              CMP      r0,#9                 ;2148
00248e  d109              BNE      |L1.9380|
                  |L1.9360|
002490  f2af7380          ADR      r3,|L1.7444|
002494  f2af726c          ADR      r2,|L1.7468|
002498  f2af7158          ADR      r1,|L1.7492|
00249c  a079              ADR      r0,|L1.9860|
00249e  9700              STR      r7,[sp,#0]
0024a0  f7fffffe          BL       show_mess
                  |L1.9380|
;;;2151   					"       ЗАРЯД        ",
;;;2152   					"      УСПЕШНО       ",
;;;2153   					"     ЗАВЕРШЕН       ",
;;;2154   					3000);
;;;2155   		}
;;;2156   	if((vz2_stat_cnt==6)||(vz2_stat_cnt==5))
0024a4  f9b8007e          LDRSH    r0,[r8,#0x7e]  ; vz2_stat_cnt
0024a8  2806              CMP      r0,#6
0024aa  d001              BEQ      |L1.9392|
0024ac  2805              CMP      r0,#5
0024ae  d10a              BNE      |L1.9414|
                  |L1.9392|
;;;2157   		{
;;;2158   		show_mess(	"     ВЫКЛЮЧИТЕ      ",
0024b0  f6af03c8          ADR      r3,|L1.7148|
0024b4  f6af02b4          ADR      r2,|L1.7172|
0024b8  f6af01a0          ADR      r1,|L1.7196|
0024bc  f2af704c          ADR      r0,|L1.7540|
0024c0  9700              STR      r7,[sp,#0]
0024c2  f7fffffe          BL       show_mess
                  |L1.9414|
;;;2159   					"      ТУМБЛЕР       ",
;;;2160   					"     ВЫСОКОГО       ",
;;;2161   					"    НАПРЯЖЕНИЯ      ",
;;;2162   					3000);
;;;2163   		}
;;;2164   	if(sk_stat[1]==0)
0024c6  7868              LDRB     r0,[r5,#1]  ; sk_stat
0024c8  b930              CBNZ     r0,|L1.9432|
;;;2165   		{
;;;2166   		vz2_stat=vz2sOFF;
0024ca  f8886007          STRB     r6,[r8,#7]
;;;2167   		lc640_write(EE_VZ2_STAT,vz2sOFF);
0024ce  2100              MOVS     r1,#0
0024d0  f44f70ca          MOV      r0,#0x194
0024d4  f7fffffe          BL       lc640_write
                  |L1.9432|
;;;2168   		}
;;;2169   	mess_send(MESS2RELE_HNDL,PARAM_RELE_SAMOKALIBR,0,20);
0024d8  2314              MOVS     r3,#0x14
0024da  2200              MOVS     r2,#0
0024dc  2164              MOVS     r1,#0x64
0024de  20d2              MOVS     r0,#0xd2
0024e0  f7fffffe          BL       mess_send
                  |L1.9444|
;;;2170   	}
;;;2171   if(vz2_stat==vz2sSTOP)		//ФЗ прекращен, напоминание
0024e4  f8980007          LDRB     r0,[r8,#7]  ; vz2_stat
0024e8  2813              CMP      r0,#0x13
0024ea  d13d              BNE      |L1.9576|
;;;2172   	{
;;;2173   	if((vz2_stat_old!=vz2_stat)||(vz2_stat_cnt==0))
0024ec  f8980008          LDRB     r0,[r8,#8]  ; vz2_stat_old
0024f0  2813              CMP      r0,#0x13
0024f2  d102              BNE      |L1.9466|
0024f4  f8b8007e          LDRH     r0,[r8,#0x7e]  ; vz2_stat_cnt
0024f8  b908              CBNZ     r0,|L1.9470|
                  |L1.9466|
;;;2174   		{
;;;2175   		vz2_stat_cnt=10;
0024fa  f8a8407e          STRH     r4,[r8,#0x7e]
                  |L1.9470|
;;;2176   		}
;;;2177   	vz2_stat_cnt--;
0024fe  f8b8007e          LDRH     r0,[r8,#0x7e]  ; vz2_stat_cnt
002502  f1a00001          SUB      r0,r0,#1
002506  b200              SXTH     r0,r0
002508  f8a8007e          STRH     r0,[r8,#0x7e]
;;;2178   	if((vz2_stat_cnt==10)||(vz2_stat_cnt==9))
00250c  280a              CMP      r0,#0xa
00250e  d001              BEQ      |L1.9492|
002510  2809              CMP      r0,#9
002512  d109              BNE      |L1.9512|
                  |L1.9492|
;;;2179   		{
;;;2180   		show_mess(	"    ФОРМОВОЧНЫЙ     ",
002514  f2af738c          ADR      r3,|L1.7564|
002518  f2af7278          ADR      r2,|L1.7588|
00251c  f2af71dc          ADR      r1,|L1.7492|
002520  a058              ADR      r0,|L1.9860|
002522  9700              STR      r7,[sp,#0]
002524  f7fffffe          BL       show_mess
                  |L1.9512|
;;;2181   					"       ЗАРЯД        ",
;;;2182   					"     ПРЕКРАЩЕН      ",
;;;2183   					"                    ",
;;;2184   					3000);
;;;2185   		}
;;;2186   	if((vz2_stat_cnt==6)||(vz2_stat_cnt==5))
002528  f9b8007e          LDRSH    r0,[r8,#0x7e]  ; vz2_stat_cnt
00252c  2806              CMP      r0,#6
00252e  d001              BEQ      |L1.9524|
002530  2805              CMP      r0,#5
002532  d10a              BNE      |L1.9546|
                  |L1.9524|
;;;2187   		{
;;;2188   		show_mess(	"     ВЫКЛЮЧИТЕ      ",
002534  f6af134c          ADR      r3,|L1.7148|
002538  f6af1238          ADR      r2,|L1.7172|
00253c  f6af1124          ADR      r1,|L1.7196|
002540  f2af70d0          ADR      r0,|L1.7540|
002544  9700              STR      r7,[sp,#0]
002546  f7fffffe          BL       show_mess
                  |L1.9546|
;;;2189   					"      ТУМБЛЕР       ",
;;;2190   					"     ВЫСОКОГО       ",
;;;2191   					"    НАПРЯЖЕНИЯ      ",
;;;2192   					3000);
;;;2193   		}
;;;2194   	if(sk_stat[1]==0)
00254a  7868              LDRB     r0,[r5,#1]  ; sk_stat
00254c  b930              CBNZ     r0,|L1.9564|
;;;2195   		{
;;;2196   		vz2_stat=vz2sOFF;
00254e  f8886007          STRB     r6,[r8,#7]
;;;2197   		lc640_write(EE_VZ2_STAT,vz2sOFF);
002552  2100              MOVS     r1,#0
002554  f44f70ca          MOV      r0,#0x194
002558  f7fffffe          BL       lc640_write
                  |L1.9564|
;;;2198   		}
;;;2199   	mess_send(MESS2RELE_HNDL,PARAM_RELE_SAMOKALIBR,0,20);
00255c  2314              MOVS     r3,#0x14
00255e  2200              MOVS     r2,#0
002560  2164              MOVS     r1,#0x64
002562  20d2              MOVS     r0,#0xd2
002564  f7fffffe          BL       mess_send
                  |L1.9576|
;;;2200   	}
;;;2201   vz2_stat_old=vz2_stat;
002568  f8980007          LDRB     r0,[r8,#7]  ; vz2_stat
00256c  f8880008          STRB     r0,[r8,#8]
;;;2202   
;;;2203   }
002570  e8bd8ff8          POP      {r3-r11,pc}
;;;2204   
                          ENDP

                  vz2_start PROC
;;;2206   //старт уравнительног заряда
;;;2207   char vz2_start(char hour)
002574  b510              PUSH     {r4,lr}
;;;2208   {          
;;;2209   char out;
;;;2210   out=0;
002576  f04f0000          MOV      r0,#0
;;;2211   if((spc_stat==spcOFF)&&(speedChrgBlckStat!=1)&&(vz1_stat==vz1sOFF))
00257a  4948              LDR      r1,|L1.9884|
00257c  f8912023          LDRB     r2,[r1,#0x23]  ; spc_stat
002580  2a00              CMP      r2,#0
002582  d110              BNE      |L1.9638|
002584  4a46              LDR      r2,|L1.9888|
002586  8812              LDRH     r2,[r2,#0]  ; speedChrgBlckStat
002588  2a01              CMP      r2,#1
00258a  d00c              BEQ      |L1.9638|
00258c  794a              LDRB     r2,[r1,#5]  ; vz1_stat
00258e  2a00              CMP      r2,#0
002590  d109              BNE      |L1.9638|
;;;2212   	{
;;;2213   	if(vz1_stat==vz1sOFF)
;;;2214   		{
;;;2215   		vz2_stat=vz2sSTEP1;
002592  f04f0001          MOV      r0,#1
002596  71c8              STRB     r0,[r1,#7]
;;;2216   		lc640_write(EE_VZ2_STAT,vz2sSTEP1);
002598  4601              MOV      r1,r0
00259a  f44f70ca          MOV      r0,#0x194
00259e  f7fffffe          BL       lc640_write
;;;2217   		out=1;
0025a2  f04f0001          MOV      r0,#1
                  |L1.9638|
;;;2218   		
;;;2219   		}
;;;2220   /*	spc_stat=spcVZ;
;;;2221   	__ee_spc_stat=spcVZ; 
;;;2222   	lc640_write_int(EE_SPC_STAT,__ee_spc_stat);   
;;;2223   	vz_cnt_h=hour;
;;;2224   	__ee_vz_cnt=hour*60;
;;;2225   	if(hour==0)__ee_vz_cnt=30;
;;;2226   	lc640_write_int(EE_VZ_CNT,__ee_vz_cnt);
;;;2227   	lc640_write_int(EE_SPC_VZ_LENGT,__ee_vz_cnt);	
;;;2228   	vz_cnt_h_=0;
;;;2229   	vz_cnt_s=0;
;;;2230   	vz_cnt_s_=0;
;;;2231   	
;;;2232   		*/
;;;2233   	}
;;;2234   //else if((spc_stat==spc_KE1p1)||(spc_stat==spc_KE1p2)) out=22; 
;;;2235   //else if((spc_stat==spc_KE2p1)||(spc_stat==spc_KE2p2)) out=33;
;;;2236   //plazma=out;	
;;;2237   return out;
;;;2238   }
0025a6  bd10              POP      {r4,pc}
;;;2239   //-----------------------------------------------
                          ENDP

                  vz2_stop PROC
;;;2240   //стоп формовочного заряда
;;;2241   void vz2_stop(void)
0025a8  483c              LDR      r0,|L1.9884|
;;;2242   {
;;;2243   if(vz2_stat!=vz2sOFF)
0025aa  79c1              LDRB     r1,[r0,#7]  ; vz2_stat
0025ac  2900              CMP      r1,#0
0025ae  d006              BEQ      |L1.9662|
;;;2244   	{
;;;2245   	vz2_stat=vz2sSTOP;
0025b0  f04f0113          MOV      r1,#0x13
0025b4  71c1              STRB     r1,[r0,#7]
;;;2246   	lc640_write(EE_VZ2_STAT,vz2sSTOP);
0025b6  f44f70ca          MOV      r0,#0x194
0025ba  f7ffbffe          B.W      lc640_write
                  |L1.9662|
;;;2247   	}
;;;2248   }
0025be  4770              BX       lr
;;;2249   
                          ENDP

                  kb_init PROC
;;;2250   //-----------------------------------------------
;;;2251   void kb_init(void)
0025c0  4838              LDR      r0,|L1.9892|
;;;2252   {
;;;2253   main_kb_cnt=(TBAT*60)-60/*120*/;
0025c2  f06f013b          MVN      r1,#0x3b
0025c6  8800              LDRH     r0,[r0,#0]  ; TBAT
0025c8  ebc01000          RSB      r0,r0,r0,LSL #4
0025cc  eb010080          ADD      r0,r1,r0,LSL #2
0025d0  4932              LDR      r1,|L1.9884|
0025d2  f8a10052          STRH     r0,[r1,#0x52]
;;;2254   }
0025d6  4770              BX       lr
;;;2255   
                          ENDP

                  kb_hndl PROC
;;;2256   //-----------------------------------------------
;;;2257   void kb_hndl(void)
0025d8  e92d5ff0          PUSH     {r4-r12,lr}
;;;2258   {
;;;2259   
;;;2260   static signed short ibat[2],ibat_[2];
;;;2261   #ifdef UKU_TELECORE2015
;;;2262   if(((++main_kb_cnt>=TBAT*60)&&(TBAT))&&(BAT_TYPE==0 ))
;;;2263   #else 
;;;2264   if(((++main_kb_cnt>=TBAT*60)&&(TBAT)))
0025dc  f8df80bc          LDR      r8,|L1.9884|
;;;2265   #endif
;;;2266   	{
;;;2267   	main_kb_cnt=0;
;;;2268   	
;;;2269   	kb_start[0]=0;
;;;2270   	kb_start[1]=0;
;;;2271   	kb_start_ips=0;
;;;2272   
;;;2273   	if( (BAT_IS_ON[0]==bisON) && (bat[0]._Ub>80) && ( (abs(bat[0]._Ib)<IKB) || (bat[0]._av&1) ) ) kb_start[0]=1;
;;;2274   	if( (BAT_IS_ON[1]==bisON) && (bat[1]._Ub>80) && ( (abs(bat[1]._Ib)<IKB) || (bat[1]._av&1) ) ) kb_start[1]=1;
;;;2275   #ifdef UKU_220_IPS_TERMOKOMPENSAT
;;;2276   	if( (!ips_bat_av_vzvod)                      && ((abs(Ib_ips_termokompensat)<IKB) || (bat_ips._av&1) ) ) kb_start_ips=1;
0025e0  f8dfa0c4          LDR      r10,|L1.9896|
0025e4  2500              MOVS     r5,#0                 ;2264
0025e6  f8b80052          LDRH     r0,[r8,#0x52]         ;2264  ; main_kb_cnt
0025ea  4e30              LDR      r6,|L1.9900|
0025ec  1c40              ADDS     r0,r0,#1              ;2264
0025ee  b201              SXTH     r1,r0                 ;2264
0025f0  482c              LDR      r0,|L1.9892|
0025f2  f8a81052          STRH     r1,[r8,#0x52]         ;2264
0025f6  f8df90b8          LDR      r9,|L1.9904|
0025fa  f9b00000          LDRSH    r0,[r0,#0]            ;2264  ; TBAT
;;;2277   #endif	
;;;2278   	if( (net_av) || (num_of_wrks_bps==0) || ( (spc_stat!=spcOFF) && (spc_stat!=spcVZ) ) 
;;;2279   #ifdef UKU_220_IPS_TERMOKOMPENSAT
;;;2280   	  ||(((vz1_stat!=vz1sOFF)||(vz2_stat!=vz2sOFF))&&SMART_SPC)
;;;2281   #endif
;;;2282   	  ||(sp_ch_stat!=scsOFF) 	)
;;;2283    
;;;2284   		{
;;;2285   		kb_start[0]=0;
;;;2286   		kb_start[1]=0;
;;;2287   		kb_start_ips=0;
;;;2288   		}
;;;2289   
;;;2290   	if((kb_start[0]==1)||(kb_start[1]==1)||(kb_start_ips==1))
;;;2291   		{
;;;2292   		kb_cnt_1lev=10;
0025fe  270a              MOVS     r7,#0xa
002600  ebc01200          RSB      r2,r0,r0,LSL #4       ;2264
002604  f04f0b01          MOV      r11,#1                ;2273
002608  f1080458          ADD      r4,r8,#0x58           ;2269
00260c  ebb10f82          CMP      r1,r2,LSL #2          ;2264
002610  db7e              BLT      |L1.10000|
002612  2800              CMP      r0,#0                 ;2264
002614  d07c              BEQ      |L1.10000|
002616  f8a85052          STRH     r5,[r8,#0x52]         ;2267
00261a  7025              STRB     r5,[r4,#0]            ;2269
00261c  7065              STRB     r5,[r4,#1]            ;2270
00261e  f888501d          STRB     r5,[r8,#0x1d]         ;2271
002622  4824              LDR      r0,|L1.9908|
002624  7800              LDRB     r0,[r0,#0]            ;2273  ; BAT_IS_ON
002626  2855              CMP      r0,#0x55              ;2273
002628  d111              BNE      |L1.9806|
00262a  f9b60002          LDRSH    r0,[r6,#2]            ;2273  ; bat
00262e  2850              CMP      r0,#0x50              ;2273
002630  dd0d              BLE      |L1.9806|
002632  f9b60008          LDRSH    r0,[r6,#8]            ;2273  ; bat
002636  f7fffffe          BL       abs
00263a  f9b91000          LDRSH    r1,[r9,#0]            ;2273  ; IKB
00263e  4288              CMP      r0,r1                 ;2273
002640  db03              BLT      |L1.9802|
002642  f896003d          LDRB     r0,[r6,#0x3d]         ;2273  ; bat
002646  07c0              LSLS     r0,r0,#31             ;2273
002648  d001              BEQ      |L1.9806|
                  |L1.9802|
00264a  f884b000          STRB     r11,[r4,#0]           ;2273
                  |L1.9806|
00264e  4819              LDR      r0,|L1.9908|
002650  7840              LDRB     r0,[r0,#1]            ;2274  ; BAT_IS_ON
002652  e031              B        |L1.9912|
                  |L1.9812|
002654  20d4ced0          DCB      " ",212,206,208,204,206,194,206,215,205,219,201," ",199,192
002658  cccec2ce
00265c  d7cddbc9
002660  20c7c0  
002663  d0dfc420          DCB      208,223,196,"  ",0
002667  2000    
002669  00                DCB      0
00266a  00                DCB      0
00266b  00                DCB      0
                  |L1.9836|
00266c  20202020          DCB      "    ",210,211,204,193,203,197,208,192,"!!!     ",0
002670  d2d3ccc1
002674  cbc5d0c0
002678  21212120
00267c  20202020
002680  00      
002681  00                DCB      0
002682  00                DCB      0
002683  00                DCB      0
                  |L1.9860|
002684  20202020          DCB      "    ",212,206,208,204,206,194,206,215,205,219,201,"    "
002688  d4ced0cc
00268c  cec2ced7
002690  cddbc920
002694  202020  
002697  2000              DCB      " ",0
002699  00                DCB      0
00269a  00                DCB      0
00269b  00                DCB      0
                  |L1.9884|
                          DCD      ||area_number.25||
                  |L1.9888|
                          DCD      speedChrgBlckStat
                  |L1.9892|
                          DCD      TBAT
                  |L1.9896|
                          DCD      Ib_ips_termokompensat
                  |L1.9900|
                          DCD      bat
                  |L1.9904|
                          DCD      IKB
                  |L1.9908|
                          DCD      BAT_IS_ON
                  |L1.9912|
0026b8  2855              CMP      r0,#0x55              ;2274
0026ba  d111              BNE      |L1.9952|
0026bc  f9b6004e          LDRSH    r0,[r6,#0x4e]         ;2274  ; bat
0026c0  2850              CMP      r0,#0x50              ;2274
0026c2  dd0d              BLE      |L1.9952|
0026c4  f9b60054          LDRSH    r0,[r6,#0x54]         ;2274  ; bat
0026c8  f7fffffe          BL       abs
0026cc  f9b91000          LDRSH    r1,[r9,#0]            ;2274  ; IKB
0026d0  4288              CMP      r0,r1                 ;2274
0026d2  db03              BLT      |L1.9948|
0026d4  f8960089          LDRB     r0,[r6,#0x89]         ;2274  ; bat
0026d8  07c0              LSLS     r0,r0,#31             ;2274
0026da  d001              BEQ      |L1.9952|
                  |L1.9948|
0026dc  f884b001          STRB     r11,[r4,#1]           ;2274
                  |L1.9952|
0026e0  48ff              LDR      r0,|L1.10976|
0026e2  7800              LDRB     r0,[r0,#0]            ;2276  ; ips_bat_av_vzvod
0026e4  b970              CBNZ     r0,|L1.9988|
0026e6  f9ba0000          LDRSH    r0,[r10,#0]           ;2276  ; Ib_ips_termokompensat
0026ea  f7fffffe          BL       abs
0026ee  f9b91000          LDRSH    r1,[r9,#0]            ;2276  ; IKB
0026f2  4288              CMP      r0,r1                 ;2276
0026f4  db04              BLT      |L1.9984|
0026f6  48fb              LDR      r0,|L1.10980|
0026f8  f890003d          LDRB     r0,[r0,#0x3d]         ;2276  ; bat_ips
0026fc  07c0              LSLS     r0,r0,#31             ;2276
0026fe  d001              BEQ      |L1.9988|
                  |L1.9984|
002700  f888b01d          STRB     r11,[r8,#0x1d]        ;2276
                  |L1.9988|
002704  48f8              LDR      r0,|L1.10984|
002706  7800              LDRB     r0,[r0,#0]            ;2278  ; net_av
002708  b9a8              CBNZ     r0,|L1.10038|
00270a  f898001e          LDRB     r0,[r8,#0x1e]         ;2278  ; num_of_wrks_bps
00270e  e000              B        |L1.10002|
                  |L1.10000|
002710  e021              B        |L1.10070|
                  |L1.10002|
002712  b180              CBZ      r0,|L1.10038|
002714  f8980023          LDRB     r0,[r8,#0x23]         ;2278  ; spc_stat
002718  b108              CBZ      r0,|L1.10014|
00271a  2802              CMP      r0,#2                 ;2278
00271c  d10b              BNE      |L1.10038|
                  |L1.10014|
00271e  f8980005          LDRB     r0,[r8,#5]            ;2280  ; vz1_stat
002722  f8981007          LDRB     r1,[r8,#7]            ;2280  ; vz2_stat
002726  4308              ORRS     r0,r0,r1              ;2280
002728  d002              BEQ      |L1.10032|
00272a  48f0              LDR      r0,|L1.10988|
00272c  8800              LDRH     r0,[r0,#0]            ;2280  ; SMART_SPC
00272e  b910              CBNZ     r0,|L1.10038|
                  |L1.10032|
002730  48ef              LDR      r0,|L1.10992|
002732  7800              LDRB     r0,[r0,#0]            ;2282  ; sp_ch_stat
002734  b118              CBZ      r0,|L1.10046|
                  |L1.10038|
002736  7025              STRB     r5,[r4,#0]            ;2285
002738  7065              STRB     r5,[r4,#1]            ;2286
00273a  f888501d          STRB     r5,[r8,#0x1d]         ;2287
                  |L1.10046|
00273e  7820              LDRB     r0,[r4,#0]            ;2290  ; kb_start
002740  2801              CMP      r0,#1                 ;2290
002742  d01e              BEQ      |L1.10114|
002744  7860              LDRB     r0,[r4,#1]            ;2290  ; kb_start
002746  2801              CMP      r0,#1                 ;2290
002748  d01b              BEQ      |L1.10114|
00274a  f898001d          LDRB     r0,[r8,#0x1d]         ;2290  ; kb_start_ips
00274e  2801              CMP      r0,#1                 ;2290
002750  d017              BEQ      |L1.10114|
;;;2293   		}
;;;2294   	else kb_cnt_1lev=0;
002752  f8a85054          STRH     r5,[r8,#0x54]
                  |L1.10070|
;;;2295   	}
;;;2296   
;;;2297   if(kb_cnt_1lev)
002756  4641              MOV      r1,r8
002758  f9b80054          LDRSH    r0,[r8,#0x54]  ; kb_cnt_1lev
;;;2298   	{
;;;2299   	kb_cnt_1lev--;
;;;2300   
;;;2301   	if(kb_cnt_1lev>5)mess_send(MESS2CNTRL_HNDL,PARAM_CNTRL_STAT_PLUS,30,15);
;;;2302   	else if(kb_cnt_1lev>0) mess_send(MESS2CNTRL_HNDL,PARAM_CNTRL_STAT_MINUS,30,15);
;;;2303   
;;;2304   
;;;2305   	if(kb_cnt_1lev==5)
;;;2306   		{
;;;2307   		ibat[0]=abs(bat[0]._Ib);
00275c  f8df8394          LDR      r8,|L1.10996|
002760  2800              CMP      r0,#0                 ;2297
002762  d07e              BEQ      |L1.10338|
002764  f1a00001          SUB      r0,r0,#1              ;2299
002768  b200              SXTH     r0,r0                 ;2299
00276a  468b              MOV      r11,r1                ;2299
00276c  f8a10054          STRH     r0,[r1,#0x54]         ;2299
002770  2805              CMP      r0,#5                 ;2301
002772  dd09              BLE      |L1.10120|
002774  230f              MOVS     r3,#0xf               ;2301
002776  221e              MOVS     r2,#0x1e              ;2301
002778  2164              MOVS     r1,#0x64              ;2301
00277a  20e1              MOVS     r0,#0xe1              ;2301
00277c  f7fffffe          BL       mess_send
002780  e00a              B        |L1.10136|
                  |L1.10114|
002782  f8a87054          STRH     r7,[r8,#0x54]         ;2292
002786  e7e6              B        |L1.10070|
                  |L1.10120|
002788  2800              CMP      r0,#0                 ;2302
00278a  dd05              BLE      |L1.10136|
00278c  230f              MOVS     r3,#0xf               ;2302
00278e  221e              MOVS     r2,#0x1e              ;2302
002790  2169              MOVS     r1,#0x69              ;2302
002792  20e1              MOVS     r0,#0xe1              ;2302
002794  f7fffffe          BL       mess_send
                  |L1.10136|
002798  f8bb0054          LDRH     r0,[r11,#0x54]        ;2305  ; kb_cnt_1lev
00279c  2805              CMP      r0,#5                 ;2305
00279e  d111              BNE      |L1.10180|
0027a0  f9b60008          LDRSH    r0,[r6,#8]  ; bat
0027a4  f7fffffe          BL       abs
0027a8  f8a80000          STRH     r0,[r8,#0]
;;;2308   		ibat[1]=abs(bat[1]._Ib);
0027ac  f9b60054          LDRSH    r0,[r6,#0x54]  ; bat
0027b0  f7fffffe          BL       abs
0027b4  f8a80002          STRH     r0,[r8,#2]
;;;2309   		ibat_ips=abs(Ib_ips_termokompensat);
0027b8  f9ba0000          LDRSH    r0,[r10,#0]  ; Ib_ips_termokompensat
0027bc  f7fffffe          BL       abs
0027c0  f8ab005a          STRH     r0,[r11,#0x5a]
                  |L1.10180|
;;;2310   		}
;;;2311   	
;;;2312   	if(kb_cnt_1lev==0)
0027c4  48cb              LDR      r0,|L1.10996|
0027c6  3894              SUBS     r0,r0,#0x94
0027c8  f8b00054          LDRH     r0,[r0,#0x54]  ; kb_cnt_1lev
0027cc  2800              CMP      r0,#0
0027ce  d158              BNE      |L1.10370|
;;;2313   		{
;;;2314   		ibat_[0]=abs(bat[0]._Ib);
0027d0  f9b60008          LDRSH    r0,[r6,#8]  ; bat
0027d4  f7fffffe          BL       abs
0027d8  f8dfb318          LDR      r11,|L1.10996|
0027dc  f10b0b04          ADD      r11,r11,#4
0027e0  f8ab0000          STRH     r0,[r11,#0]
;;;2315   		ibat_[1]=abs(bat[1]._Ib);
0027e4  f9b60054          LDRSH    r0,[r6,#0x54]  ; bat
0027e8  f7fffffe          BL       abs
0027ec  f8ab0002          STRH     r0,[r11,#2]
;;;2316   		ibat_ips_=abs(Ib_ips_termokompensat);
0027f0  f9ba0000          LDRSH    r0,[r10,#0]  ; Ib_ips_termokompensat
0027f4  f7fffffe          BL       abs
0027f8  f1ab0a98          SUB      r10,r11,#0x98
0027fc  f8aa005c          STRH     r0,[r10,#0x5c]
;;;2317   
;;;2318   		kb_cnt_2lev=0;
002800  f8aa5056          STRH     r5,[r10,#0x56]
;;;2319   
;;;2320   
;;;2321   		if(( (ibat[0]+ibat_[0]) < IKB )&& (kb_start[0]==1))
002804  f9b80000          LDRSH    r0,[r8,#0]  ; ibat
002808  f9bb1000          LDRSH    r1,[r11,#0]  ; ibat_
00280c  4408              ADD      r0,r0,r1
00280e  f9b91000          LDRSH    r1,[r9,#0]  ; IKB
002812  4288              CMP      r0,r1
002814  da02              BGE      |L1.10268|
002816  7820              LDRB     r0,[r4,#0]  ; kb_start
002818  2801              CMP      r0,#1
00281a  d034              BEQ      |L1.10374|
                  |L1.10268|
;;;2322   			{
;;;2323   			kb_cnt_2lev=10;  
;;;2324   			}
;;;2325   		else if(bat[0]._Ub>200)
00281c  f9b60002          LDRSH    r0,[r6,#2]  ; bat
002820  28c8              CMP      r0,#0xc8
002822  dd04              BLE      |L1.10286|
;;;2326   			{
;;;2327   			kb_start[0]=0;
002824  7025              STRB     r5,[r4,#0]
;;;2328   			avar_bat_hndl(0,0);
002826  2100              MOVS     r1,#0
002828  4608              MOV      r0,r1
00282a  f7fffffe          BL       avar_bat_hndl
                  |L1.10286|
;;;2329   			}
;;;2330   		
;;;2331   		if(( (ibat[1]+ibat_[1]) < IKB ) && (kb_start[1]==1))
00282e  f9b80002          LDRSH    r0,[r8,#2]  ; ibat
002832  f9bb1002          LDRSH    r1,[r11,#2]  ; ibat_
002836  4408              ADD      r0,r0,r1
002838  f9b91000          LDRSH    r1,[r9,#0]  ; IKB
00283c  4288              CMP      r0,r1
00283e  da02              BGE      |L1.10310|
002840  7860              LDRB     r0,[r4,#1]  ; kb_start
002842  2801              CMP      r0,#1
002844  d022              BEQ      |L1.10380|
                  |L1.10310|
;;;2332   			{
;;;2333   			kb_cnt_2lev=10;     
;;;2334   			}
;;;2335   		else  if(bat[1]._Ub>200)
002846  f9b6004e          LDRSH    r0,[r6,#0x4e]  ; bat
00284a  28c8              CMP      r0,#0xc8
00284c  dd04              BLE      |L1.10328|
;;;2336   			{
;;;2337   			kb_start[1]=0;
00284e  7065              STRB     r5,[r4,#1]
;;;2338   			avar_bat_hndl(1,0);
002850  2100              MOVS     r1,#0
002852  2001              MOVS     r0,#1
002854  f7fffffe          BL       avar_bat_hndl
                  |L1.10328|
;;;2339   			}
;;;2340   #ifdef UKU_220_IPS_TERMOKOMPENSAT
;;;2341   		if(( (ibat_ips+ibat_ips_) < IKB ) && (kb_start_ips==1))
002858  f9ba005a          LDRSH    r0,[r10,#0x5a]  ; ibat_ips
00285c  f9ba105c          LDRSH    r1,[r10,#0x5c]  ; ibat_ips_
002860  e000              B        |L1.10340|
                  |L1.10338|
002862  e01c              B        |L1.10398|
                  |L1.10340|
002864  4408              ADD      r0,r0,r1
002866  f9b91000          LDRSH    r1,[r9,#0]  ; IKB
00286a  4288              CMP      r0,r1
00286c  da09              BGE      |L1.10370|
00286e  f89a001d          LDRB     r0,[r10,#0x1d]  ; kb_start_ips
002872  2801              CMP      r0,#1
002874  d105              BNE      |L1.10370|
;;;2342   			{
;;;2343   			if(KB_ALGORITM==1)
002876  48a0              LDR      r0,|L1.11000|
002878  8800              LDRH     r0,[r0,#0]  ; KB_ALGORITM
00287a  2801              CMP      r0,#1
00287c  d009              BEQ      |L1.10386|
;;;2344   				{
;;;2345   				avar_bat_ips_hndl(1);
;;;2346   				kb_start_ips=0;
;;;2347   				}
;;;2348   			else
;;;2349   				{
;;;2350   				kb_cnt_2lev=10;     
00287e  f8aa7056          STRH     r7,[r10,#0x56]
                  |L1.10370|
;;;2351   				}
;;;2352   			}
;;;2353   #endif
;;;2354   		}	
;;;2355   
;;;2356   
;;;2357   	}
;;;2358   else if(kb_cnt_2lev)
;;;2359   	{
;;;2360   	kb_cnt_2lev--;
;;;2361   
;;;2362   	if(kb_cnt_2lev>5)mess_send(MESS2CNTRL_HNDL,PARAM_CNTRL_STAT_PLUS,200,15);
;;;2363   	else if(kb_cnt_2lev>0) mess_send(MESS2CNTRL_HNDL,PARAM_CNTRL_STAT_MINUS,200,15);
;;;2364   
;;;2365   
;;;2366   	if(kb_cnt_2lev==5)
;;;2367   		{
;;;2368   		ibat[0]=abs(bat[0]._Ib);
;;;2369   		ibat[1]=abs(bat[1]._Ib);
;;;2370   		ibat_ips=abs(Ib_ips_termokompensat);
;;;2371   		}
;;;2372   	
;;;2373   	if(kb_cnt_2lev==0)
;;;2374   		{
;;;2375   		ibat_[0]=abs(bat[0]._Ib);
;;;2376   		ibat_[1]=abs(bat[1]._Ib);
;;;2377   		ibat_ips_=abs(Ib_ips_termokompensat);
;;;2378   
;;;2379   		kb_full_ver=0;
;;;2380   
;;;2381   		if(( (ibat[0]+ibat_[0]) < IKB ) && (kb_start[0]==1))
;;;2382   			{
;;;2383   			kb_full_ver=1;  
;;;2384   			}
;;;2385   		else if(bat[0]._Ub>200)			
;;;2386   			{
;;;2387   			kb_start[0]=0;
;;;2388   			avar_bat_hndl(0,0);
;;;2389   			}
;;;2390   
;;;2391   		if(( (ibat[1]+ibat_[1]) < IKB ) && (kb_start[1]==1))
;;;2392   			{
;;;2393   			kb_full_ver=1;     
;;;2394   			}
;;;2395   		else	if(bat[1]._Ub>200)		
;;;2396   			{
;;;2397   			kb_start[1]=0;
;;;2398   			avar_bat_hndl(1,0);
;;;2399   			}
;;;2400   #ifdef UKU_220_IPS_TERMOKOMPENSAT
;;;2401   		if(( (ibat_ips+ibat_ips_) < IKB )  && (kb_start_ips==1))
;;;2402   			{
;;;2403   			if(KB_ALGORITM==2)
;;;2404   				{
;;;2405   				avar_bat_ips_hndl(1);
;;;2406   				kb_start_ips=0;
;;;2407   				}
;;;2408   			else
;;;2409   				{
;;;2410   				kb_full_ver=1;     
;;;2411   				}
;;;2412   			}
;;;2413   #endif
;;;2414   		}	
;;;2415   	}
;;;2416   
;;;2417   else if(kb_full_ver)
;;;2418   	{
;;;2419   	
;;;2420   	mess_send(MESS2CNTRL_HNDL,PARAM_CNTRL_STAT_STEP_DOWN,0,15);
;;;2421   
;;;2422   	if( abs(bat[0]._Ib) > IKB ) 
;;;2423   		{
;;;2424   		if(kb_start[0]==1)
;;;2425   			{
;;;2426   			kb_start[0]=0;
;;;2427   			avar_bat_hndl(0,0);
;;;2428   			}
;;;2429   		}
;;;2430   
;;;2431   	if( abs(bat[1]._Ib) > IKB ) 
;;;2432   		{
;;;2433   		if(kb_start[1]==1)
;;;2434   			{
;;;2435   			kb_start[1]=0;
;;;2436   			avar_bat_hndl(1,0);
;;;2437   			}
;;;2438   		}
;;;2439   #ifdef UKU_220_IPS_TERMOKOMPENSAT
;;;2440   	if( abs(Ib_ips_termokompensat) > IKB ) 
;;;2441   		{
;;;2442   		if(kb_start_ips==1)
;;;2443   			{
;;;2444   			kb_start_ips=0;
;;;2445   			avar_bat_ips_hndl(0);
;;;2446   			}
;;;2447   		}
;;;2448   #endif
;;;2449   
;;;2450   	if ((kb_start[0]==0) && (kb_start[1]==0) && (kb_start_ips==0)) 
;;;2451   		{
;;;2452   		kb_full_ver=0;
;;;2453   		}
;;;2454   
;;;2455   	if(( (mess_find(MESS2KB_HNDL))	&& (mess_data[0]==PARAM_CNTRL_IS_DOWN) ) || (load_U<(USIGN*10)) )
;;;2456   		{
;;;2457   		kb_full_ver=0;
;;;2458   		if((kb_start[0]==1)&&((load_I>(2*IKB)/10))&&(!(bat[0]._av&0x01))) avar_bat_hndl(0,1);
;;;2459   		if((kb_start[1]==1)&&((load_I>(2*IKB)/10))&&(!(bat[1]._av&0x01))) avar_bat_hndl(1,1);
;;;2460   #ifdef UKU_220_IPS_TERMOKOMPENSAT
;;;2461   		if((kb_start_ips==1)&&((load_I>(2*IKB)/10))&&(!(bat_ips._av&0x01))) avar_bat_ips_hndl(1);
;;;2462   #endif
;;;2463   		}
;;;2464   	}
;;;2465   
;;;2466   }
002882  e8bd9ff0          POP      {r4-r12,pc}
                  |L1.10374|
002886  f8aa7056          STRH     r7,[r10,#0x56]        ;2323
00288a  e7d0              B        |L1.10286|
                  |L1.10380|
00288c  f8aa7056          STRH     r7,[r10,#0x56]        ;2333
002890  e7e2              B        |L1.10328|
                  |L1.10386|
002892  2001              MOVS     r0,#1                 ;2345
002894  f7fffffe          BL       avar_bat_ips_hndl
002898  f88a501d          STRB     r5,[r10,#0x1d]        ;2346
                  |L1.10396|
00289c  e7f1              B        |L1.10370|
                  |L1.10398|
00289e  f9b10056          LDRSH    r0,[r1,#0x56]         ;2358  ; kb_cnt_2lev
0028a2  b3f0              CBZ      r0,|L1.10530|
0028a4  f1a00001          SUB      r0,r0,#1              ;2360
0028a8  b200              SXTH     r0,r0                 ;2360
0028aa  460f              MOV      r7,r1                 ;2360
0028ac  f8a10056          STRH     r0,[r1,#0x56]         ;2360
0028b0  2805              CMP      r0,#5                 ;2362
0028b2  dd06              BLE      |L1.10434|
0028b4  230f              MOVS     r3,#0xf               ;2362
0028b6  22c8              MOVS     r2,#0xc8              ;2362
0028b8  2164              MOVS     r1,#0x64              ;2362
0028ba  20e1              MOVS     r0,#0xe1              ;2362
0028bc  f7fffffe          BL       mess_send
0028c0  e007              B        |L1.10450|
                  |L1.10434|
0028c2  2800              CMP      r0,#0                 ;2363
0028c4  dd05              BLE      |L1.10450|
0028c6  230f              MOVS     r3,#0xf               ;2363
0028c8  22c8              MOVS     r2,#0xc8              ;2363
0028ca  2169              MOVS     r1,#0x69              ;2363
0028cc  20e1              MOVS     r0,#0xe1              ;2363
0028ce  f7fffffe          BL       mess_send
                  |L1.10450|
0028d2  f8b70056          LDRH     r0,[r7,#0x56]         ;2366  ; kb_cnt_2lev
0028d6  2805              CMP      r0,#5                 ;2366
0028d8  d111              BNE      |L1.10494|
0028da  f9b60008          LDRSH    r0,[r6,#8]            ;2368  ; bat
0028de  f7fffffe          BL       abs
0028e2  f8a80000          STRH     r0,[r8,#0]            ;2368
0028e6  f9b60054          LDRSH    r0,[r6,#0x54]         ;2369  ; bat
0028ea  f7fffffe          BL       abs
0028ee  f8a80002          STRH     r0,[r8,#2]            ;2369
0028f2  f9ba0000          LDRSH    r0,[r10,#0]           ;2370  ; Ib_ips_termokompensat
0028f6  f7fffffe          BL       abs
0028fa  f8a7005a          STRH     r0,[r7,#0x5a]         ;2370
                  |L1.10494|
0028fe  487d              LDR      r0,|L1.10996|
002900  3894              SUBS     r0,r0,#0x94           ;2373
002902  f8b00056          LDRH     r0,[r0,#0x56]         ;2373  ; kb_cnt_2lev
002906  2800              CMP      r0,#0                 ;2373
                  |L1.10504|
002908  d1bb              BNE      |L1.10370|
00290a  f9b60008          LDRSH    r0,[r6,#8]            ;2375  ; bat
00290e  f7fffffe          BL       abs
002912  4f78              LDR      r7,|L1.10996|
002914  1d3f              ADDS     r7,r7,#4              ;2375
002916  8038              STRH     r0,[r7,#0]            ;2375
002918  f9b60054          LDRSH    r0,[r6,#0x54]         ;2376  ; bat
00291c  f7fffffe          BL       abs
002920  e000              B        |L1.10532|
                  |L1.10530|
002922  e055              B        |L1.10704|
                  |L1.10532|
002924  8078              STRH     r0,[r7,#2]            ;2376
002926  f9ba0000          LDRSH    r0,[r10,#0]           ;2377  ; Ib_ips_termokompensat
00292a  f7fffffe          BL       abs
00292e  f1a70a98          SUB      r10,r7,#0x98          ;2377
002932  f8aa005c          STRH     r0,[r10,#0x5c]        ;2377
002936  f88a501c          STRB     r5,[r10,#0x1c]        ;2379
00293a  f9b80000          LDRSH    r0,[r8,#0]            ;2381  ; ibat
00293e  f9b71000          LDRSH    r1,[r7,#0]            ;2381  ; ibat_
002942  4408              ADD      r0,r0,r1              ;2381
002944  f9b91000          LDRSH    r1,[r9,#0]            ;2381  ; IKB
002948  4288              CMP      r0,r1                 ;2381
00294a  da02              BGE      |L1.10578|
00294c  7820              LDRB     r0,[r4,#0]            ;2381  ; kb_start
00294e  2801              CMP      r0,#1                 ;2381
002950  d032              BEQ      |L1.10680|
                  |L1.10578|
002952  f9b60002          LDRSH    r0,[r6,#2]            ;2385  ; bat
002956  28c8              CMP      r0,#0xc8              ;2385
002958  dd04              BLE      |L1.10596|
00295a  7025              STRB     r5,[r4,#0]            ;2387
00295c  2100              MOVS     r1,#0                 ;2388
00295e  4608              MOV      r0,r1                 ;2388
002960  f7fffffe          BL       avar_bat_hndl
                  |L1.10596|
002964  f9b80002          LDRSH    r0,[r8,#2]            ;2391  ; ibat
002968  f9b71002          LDRSH    r1,[r7,#2]            ;2391  ; ibat_
00296c  4408              ADD      r0,r0,r1              ;2391
00296e  f9b91000          LDRSH    r1,[r9,#0]            ;2391  ; IKB
002972  4288              CMP      r0,r1                 ;2391
002974  da02              BGE      |L1.10620|
002976  7860              LDRB     r0,[r4,#1]            ;2391  ; kb_start
002978  2801              CMP      r0,#1                 ;2391
00297a  d020              BEQ      |L1.10686|
                  |L1.10620|
00297c  f9b6004e          LDRSH    r0,[r6,#0x4e]         ;2395  ; bat
002980  28c8              CMP      r0,#0xc8              ;2395
002982  dd04              BLE      |L1.10638|
002984  7065              STRB     r5,[r4,#1]            ;2397
002986  2100              MOVS     r1,#0                 ;2398
002988  2001              MOVS     r0,#1                 ;2398
00298a  f7fffffe          BL       avar_bat_hndl
                  |L1.10638|
00298e  f9ba005a          LDRSH    r0,[r10,#0x5a]        ;2401  ; ibat_ips
002992  f9ba105c          LDRSH    r1,[r10,#0x5c]        ;2401  ; ibat_ips_
002996  4408              ADD      r0,r0,r1              ;2401
002998  f9b91000          LDRSH    r1,[r9,#0]            ;2401  ; IKB
00299c  4288              CMP      r0,r1                 ;2401
00299e  f6bfaf7d          BGE      |L1.10396|
0029a2  f89a001d          LDRB     r0,[r10,#0x1d]        ;2401  ; kb_start_ips
0029a6  2801              CMP      r0,#1                 ;2401
0029a8  d1ae              BNE      |L1.10504|
0029aa  4853              LDR      r0,|L1.11000|
0029ac  8800              LDRH     r0,[r0,#0]            ;2403  ; KB_ALGORITM
0029ae  2802              CMP      r0,#2                 ;2403
0029b0  d008              BEQ      |L1.10692|
0029b2  f88ab01c          STRB     r11,[r10,#0x1c]       ;2410
                  |L1.10678|
0029b6  e764              B        |L1.10370|
                  |L1.10680|
0029b8  f88ab01c          STRB     r11,[r10,#0x1c]       ;2383
0029bc  e7d2              B        |L1.10596|
                  |L1.10686|
0029be  f88ab01c          STRB     r11,[r10,#0x1c]       ;2393
0029c2  e7e4              B        |L1.10638|
                  |L1.10692|
0029c4  2001              MOVS     r0,#1                 ;2405
0029c6  f7fffffe          BL       avar_bat_ips_hndl
0029ca  f88a501d          STRB     r5,[r10,#0x1d]        ;2406
0029ce  e758              B        |L1.10370|
                  |L1.10704|
0029d0  7f08              LDRB     r0,[r1,#0x1c]         ;2417  ; kb_full_ver
0029d2  4688              MOV      r8,r1                 ;2417
0029d4  2800              CMP      r0,#0                 ;2417
0029d6  d0ee              BEQ      |L1.10678|
0029d8  230f              MOVS     r3,#0xf               ;2420
0029da  2200              MOVS     r2,#0                 ;2420
0029dc  216e              MOVS     r1,#0x6e              ;2420
0029de  20e1              MOVS     r0,#0xe1              ;2420
0029e0  f7fffffe          BL       mess_send
0029e4  f9b60008          LDRSH    r0,[r6,#8]            ;2422  ; bat
0029e8  f7fffffe          BL       abs
0029ec  f9b91000          LDRSH    r1,[r9,#0]            ;2422  ; IKB
0029f0  4288              CMP      r0,r1                 ;2422
0029f2  dd07              BLE      |L1.10756|
0029f4  7820              LDRB     r0,[r4,#0]            ;2424  ; kb_start
0029f6  2801              CMP      r0,#1                 ;2424
0029f8  d104              BNE      |L1.10756|
0029fa  7025              STRB     r5,[r4,#0]            ;2426
0029fc  2100              MOVS     r1,#0                 ;2427
0029fe  4608              MOV      r0,r1                 ;2427
002a00  f7fffffe          BL       avar_bat_hndl
                  |L1.10756|
002a04  f9b60054          LDRSH    r0,[r6,#0x54]         ;2431  ; bat
002a08  f7fffffe          BL       abs
002a0c  f9b91000          LDRSH    r1,[r9,#0]            ;2431  ; IKB
002a10  4288              CMP      r0,r1                 ;2431
002a12  dd06              BLE      |L1.10786|
002a14  7860              LDRB     r0,[r4,#1]            ;2433  ; kb_start
002a16  2801              CMP      r0,#1                 ;2433
002a18  d103              BNE      |L1.10786|
002a1a  7065              STRB     r5,[r4,#1]            ;2435
002a1c  2100              MOVS     r1,#0                 ;2436
002a1e  f7fffffe          BL       avar_bat_hndl
                  |L1.10786|
002a22  f9ba0000          LDRSH    r0,[r10,#0]           ;2440  ; Ib_ips_termokompensat
002a26  f7fffffe          BL       abs
002a2a  f9b91000          LDRSH    r1,[r9,#0]            ;2440  ; IKB
002a2e  4288              CMP      r0,r1                 ;2440
002a30  dd08              BLE      |L1.10820|
002a32  f898001d          LDRB     r0,[r8,#0x1d]         ;2442  ; kb_start_ips
002a36  2801              CMP      r0,#1                 ;2442
002a38  d104              BNE      |L1.10820|
002a3a  f888501d          STRB     r5,[r8,#0x1d]         ;2444
002a3e  2000              MOVS     r0,#0                 ;2445
002a40  f7fffffe          BL       avar_bat_ips_hndl
                  |L1.10820|
002a44  7820              LDRB     r0,[r4,#0]            ;2450  ; kb_start
002a46  b930              CBNZ     r0,|L1.10838|
002a48  7860              LDRB     r0,[r4,#1]            ;2450  ; kb_start
002a4a  b920              CBNZ     r0,|L1.10838|
002a4c  f898001d          LDRB     r0,[r8,#0x1d]         ;2450  ; kb_start_ips
002a50  b908              CBNZ     r0,|L1.10838|
002a52  f888501c          STRB     r5,[r8,#0x1c]         ;2452
                  |L1.10838|
002a56  20e6              MOVS     r0,#0xe6              ;2455
002a58  f7fffffe          BL       mess_find
002a5c  b118              CBZ      r0,|L1.10854|
002a5e  4827              LDR      r0,|L1.11004|
002a60  6800              LDR      r0,[r0,#0]            ;2455  ; mess_data
002a62  28e7              CMP      r0,#0xe7              ;2455
002a64  d00a              BEQ      |L1.10876|
                  |L1.10854|
002a66  4826              LDR      r0,|L1.11008|
002a68  4926              LDR      r1,|L1.11012|
002a6a  f9b00000          LDRSH    r0,[r0,#0]            ;2455  ; USIGN
002a6e  f9b11000          LDRSH    r1,[r1,#0]            ;2455  ; load_U
002a72  eb000080          ADD      r0,r0,r0,LSL #2       ;2455
002a76  ebb10f40          CMP      r1,r0,LSL #1          ;2455
                  |L1.10874|
002a7a  da9c              BGE      |L1.10678|
                  |L1.10876|
002a7c  f888501c          STRB     r5,[r8,#0x1c]         ;2457
002a80  7820              LDRB     r0,[r4,#0]            ;2458  ; kb_start
002a82  4d21              LDR      r5,|L1.11016|
002a84  2801              CMP      r0,#1                 ;2458
002a86  d10f              BNE      |L1.10920|
002a88  f9b90000          LDRSH    r0,[r9,#0]            ;2458  ; IKB
002a8c  f9b51000          LDRSH    r1,[r5,#0]            ;2458  ; load_I
002a90  0040              LSLS     r0,r0,#1              ;2458
002a92  fb90f0f7          SDIV     r0,r0,r7              ;2458
002a96  4288              CMP      r0,r1                 ;2458
002a98  da06              BGE      |L1.10920|
002a9a  f896003d          LDRB     r0,[r6,#0x3d]         ;2458  ; bat
002a9e  07c0              LSLS     r0,r0,#31             ;2458
002aa0  d102              BNE      |L1.10920|
002aa2  2101              MOVS     r1,#1                 ;2458
002aa4  f7fffffe          BL       avar_bat_hndl
                  |L1.10920|
002aa8  7860              LDRB     r0,[r4,#1]            ;2459  ; kb_start
002aaa  2801              CMP      r0,#1                 ;2459
002aac  d110              BNE      |L1.10960|
002aae  f9b90000          LDRSH    r0,[r9,#0]            ;2459  ; IKB
002ab2  f9b51000          LDRSH    r1,[r5,#0]            ;2459  ; load_I
002ab6  0040              LSLS     r0,r0,#1              ;2459
002ab8  fb90f0f7          SDIV     r0,r0,r7              ;2459
002abc  4288              CMP      r0,r1                 ;2459
002abe  da07              BGE      |L1.10960|
002ac0  f8960089          LDRB     r0,[r6,#0x89]         ;2459  ; bat
002ac4  07c0              LSLS     r0,r0,#31             ;2459
002ac6  d103              BNE      |L1.10960|
002ac8  2101              MOVS     r1,#1                 ;2459
002aca  4608              MOV      r0,r1                 ;2459
002acc  f7fffffe          BL       avar_bat_hndl
                  |L1.10960|
002ad0  f898001d          LDRB     r0,[r8,#0x1d]         ;2461  ; kb_start_ips
002ad4  2801              CMP      r0,#1                 ;2461
                  |L1.10966|
002ad6  f47faee1          BNE      |L1.10396|
002ada  f9b90000          LDRSH    r0,[r9,#0]            ;2461  ; IKB
002ade  e015              B        |L1.11020|
                  |L1.10976|
                          DCD      ips_bat_av_vzvod
                  |L1.10980|
                          DCD      bat_ips
                  |L1.10984|
                          DCD      net_av
                  |L1.10988|
                          DCD      SMART_SPC
                  |L1.10992|
                          DCD      sp_ch_stat
                  |L1.10996|
                          DCD      ||area_number.25||+0x94
                  |L1.11000|
                          DCD      KB_ALGORITM
                  |L1.11004|
                          DCD      mess_data
                  |L1.11008|
                          DCD      USIGN
                  |L1.11012|
                          DCD      load_U
                  |L1.11016|
                          DCD      load_I
                  |L1.11020|
002b0c  0040              LSLS     r0,r0,#1              ;2461
002b0e  fb90f0f7          SDIV     r0,r0,r7              ;2461
002b12  f9b51000          LDRSH    r1,[r5,#0]            ;2461  ; load_I
002b16  4288              CMP      r0,r1                 ;2461
002b18  daaf              BGE      |L1.10874|
002b1a  48f9              LDR      r0,|L1.12032|
002b1c  f890003d          LDRB     r0,[r0,#0x3d]         ;2461  ; bat_ips
002b20  07c0              LSLS     r0,r0,#31             ;2461
002b22  d1d8              BNE      |L1.10966|
002b24  e8bd5ff0          POP      {r4-r12,lr}           ;2461
002b28  2001              MOVS     r0,#1                 ;2461
002b2a  f7ffbffe          B.W      avar_bat_ips_hndl
;;;2467   
                          ENDP

                  samokalibr_hndl PROC
;;;2476   //-----------------------------------------------
;;;2477   void samokalibr_hndl(void)
002b2e  4770              BX       lr
;;;2478   {
;;;2479   #ifndef UKU_220_IPS_TERMOKOMPENSAT
;;;2480   if(++samokalibr_cnt>=1800)samokalibr_cnt=0;
;;;2481   
;;;2482   if((samokalibr_cnt>=1785U)&&(vz2_stat==vz2sOFF))
;;;2483   	{
;;;2484   	mess_send(MESS2RELE_HNDL,PARAM_RELE_SAMOKALIBR,1,15);
;;;2485   	mess_send(MESS2IND_HNDL,PARAM_SAMOKALIBR,0,15);
;;;2486   	mess_send(MESS2MATEMAT,PARAM_SAMOKALIBR,0,15);
;;;2487   	} 
;;;2488   
;;;2489   if((samokalibr_cnt==1799U)&&(vz2_stat==vz2sOFF))
;;;2490   	{
;;;2491   	if((Kibat0[0]!=ad7705_buff_[0])&&(abs(bat[0]._Ib/10)<IZMAX)) lc640_write_int(ADR_KI0BAT[0],ad7705_buff_[0]);
;;;2492   	if((Kibat0[1]!=ad7705_buff_[1])&&(abs(bat[0]._Ib/10)<IZMAX)) lc640_write_int(ADR_KI0BAT[1],ad7705_buff_[1]);
;;;2493   	
;;;2494   	}
;;;2495   #endif	 	
;;;2496   }
;;;2497   
                          ENDP

                  ubat_old_drv PROC
;;;2500   //-----------------------------------------------
;;;2501   void ubat_old_drv(void)
002b30  b510              PUSH     {r4,lr}
;;;2502   {        
;;;2503   bat_u_old_cnt++;
002b32  4cf4              LDR      r4,|L1.12036|
002b34  8820              LDRH     r0,[r4,#0]  ; bat_u_old_cnt
002b36  f1000001          ADD      r0,r0,#1
002b3a  8020              STRH     r0,[r4,#0]
;;;2504   gran_ring(&bat_u_old_cnt,0,8);
002b3c  f04f0208          MOV      r2,#8
002b40  f04f0100          MOV      r1,#0
002b44  4620              MOV      r0,r4
002b46  f7fffffe          BL       gran_ring
;;;2505   
;;;2506   bat[0]._u_old[bat_u_old_cnt]=bat[0]._Ub;
002b4a  49ef              LDR      r1,|L1.12040|
002b4c  f9b40000          LDRSH    r0,[r4,#0]  ; bat_u_old_cnt
002b50  eb010040          ADD      r0,r1,r0,LSL #1
002b54  884a              LDRH     r2,[r1,#2]  ; bat
002b56  8402              STRH     r2,[r0,#0x20]
;;;2507   bat[1]._u_old[bat_u_old_cnt]=bat[1]._Ub;
002b58  f8b1104e          LDRH     r1,[r1,#0x4e]  ; bat
002b5c  f8a0106c          STRH     r1,[r0,#0x6c]
;;;2508   }
002b60  bd10              POP      {r4,pc}
;;;2509   
                          ENDP

                  unet_drv PROC
;;;2510   //-----------------------------------------------
;;;2511   void unet_drv(void)
002b62  e92d41f0          PUSH     {r4-r8,lr}
;;;2512   {
;;;2513   if(net_av_2min_timer)net_av_2min_timer--;
002b66  49e9              LDR      r1,|L1.12044|
002b68  f9b10000          LDRSH    r0,[r1,#0]  ; net_av_2min_timer
002b6c  b110              CBZ      r0,|L1.11124|
002b6e  f1a00001          SUB      r0,r0,#1
002b72  8008              STRH     r0,[r1,#0]
                  |L1.11124|
;;;2514   
;;;2515   if(net_U<UMN)
002b74  4ee6              LDR      r6,|L1.12048|
002b76  48e7              LDR      r0,|L1.12052|
;;;2516   	{
;;;2517   	if((unet_drv_cnt<10)&&(main_1Hz_cnt>15))
002b78  4ae7              LDR      r2,|L1.12056|
002b7a  f9b61000          LDRSH    r1,[r6,#0]            ;2515  ; net_U
002b7e  f9b03000          LDRSH    r3,[r0,#0]            ;2515  ; UMN
;;;2518   		{
;;;2519   		unet_drv_cnt++;
;;;2520   		if(unet_drv_cnt>=10)
;;;2521   			{
;;;2522   			net_Ustore=net_U;
;;;2523   		 	avar_unet_hndl(1);
;;;2524   			
;;;2525   			}
;;;2526   		}
;;;2527   	else if(unet_drv_cnt>=10)unet_drv_cnt=10;
002b82  270a              MOVS     r7,#0xa
002b84  f9920000          LDRSB    r0,[r2,#0]            ;2517
;;;2528   
;;;2529   	if(net_U<net_Ustore) net_Ustore=net_U;	
;;;2530   	}
;;;2531   
;;;2532   else if(net_U>UMN)
;;;2533   	{                 
;;;2534   	if(unet_drv_cnt)
;;;2535   		{
;;;2536   		unet_drv_cnt--;
;;;2537   		if(unet_drv_cnt<=0)
;;;2538   			{
;;;2539   			avar_unet_hndl(0);
;;;2540   			avar_bps_reset_cnt=10;
002b88  4ce4              LDR      r4,|L1.12060|
002b8a  4299              CMP      r1,r3                 ;2515
002b8c  da1d              BGE      |L1.11210|
002b8e  4de4              LDR      r5,|L1.12064|
002b90  280a              CMP      r0,#0xa               ;2517
002b92  da0f              BGE      |L1.11188|
002b94  4be3              LDR      r3,|L1.12068|
002b96  f9b33000          LDRSH    r3,[r3,#0]            ;2517  ; main_1Hz_cnt
002b9a  2b0f              CMP      r3,#0xf               ;2517
002b9c  dd0a              BLE      |L1.11188|
002b9e  f1000001          ADD      r0,r0,#1              ;2519
002ba2  b240              SXTB     r0,r0                 ;2519
002ba4  7010              STRB     r0,[r2,#0]            ;2519
002ba6  280a              CMP      r0,#0xa               ;2520
002ba8  db07              BLT      |L1.11194|
002baa  8029              STRH     r1,[r5,#0]            ;2522
002bac  2001              MOVS     r0,#1                 ;2523
002bae  f7fffffe          BL       avar_unet_hndl
002bb2  e002              B        |L1.11194|
                  |L1.11188|
002bb4  280a              CMP      r0,#0xa               ;2527
002bb6  db00              BLT      |L1.11194|
002bb8  7017              STRB     r7,[r2,#0]            ;2527
                  |L1.11194|
002bba  f9b60000          LDRSH    r0,[r6,#0]            ;2529  ; net_U
002bbe  f9b51000          LDRSH    r1,[r5,#0]            ;2529  ; net_Ustore
002bc2  4288              CMP      r0,r1                 ;2529
002bc4  da0e              BGE      |L1.11236|
002bc6  8028              STRH     r0,[r5,#0]            ;2529
002bc8  e00c              B        |L1.11236|
                  |L1.11210|
002bca  dd0b              BLE      |L1.11236|
002bcc  b150              CBZ      r0,|L1.11236|
002bce  f1a00001          SUB      r0,r0,#1              ;2536
002bd2  b240              SXTB     r0,r0                 ;2536
002bd4  7010              STRB     r0,[r2,#0]            ;2536
002bd6  2800              CMP      r0,#0                 ;2537
002bd8  dc04              BGT      |L1.11236|
002bda  2000              MOVS     r0,#0                 ;2539
002bdc  f7fffffe          BL       avar_unet_hndl
002be0  f8847031          STRB     r7,[r4,#0x31]
                  |L1.11236|
;;;2541   			}
;;;2542   		}
;;;2543   	else if(unet_drv_cnt<0)unet_drv_cnt=0;
;;;2544   	
;;;2545   	}
;;;2546   #ifdef UKU_6U
;;;2547   if(net_U>UMAXN)
;;;2548   	{
;;;2549   	if((unet_max_drv_cnt<10)&&(main_1Hz_cnt>15))
;;;2550   		{
;;;2551   		unet_max_drv_cnt++;
;;;2552   		if(unet_max_drv_cnt>=10)
;;;2553   			{
;;;2554   			net_Ustore=net_U;
;;;2555   		 	avar_unet_hndl(2);
;;;2556   			
;;;2557   			}
;;;2558   		}
;;;2559   	else if(unet_max_drv_cnt>=10)unet_max_drv_cnt=10;
;;;2560   
;;;2561   	if(net_U>net_Ustore) net_Ustore=net_U;	
;;;2562   	}
;;;2563   
;;;2564   else if(net_U<UMAXN)
;;;2565   	{                 
;;;2566   	if(unet_max_drv_cnt)
;;;2567   		{
;;;2568   		unet_max_drv_cnt--;
;;;2569   		if(unet_max_drv_cnt<=0)
;;;2570   			{
;;;2571   			avar_unet_hndl(0);
;;;2572   			avar_bps_reset_cnt=10;
;;;2573   			}
;;;2574   		}
;;;2575   	else if(unet_max_drv_cnt<0)unet_max_drv_cnt=0;
;;;2576   	
;;;2577   	}
;;;2578   #endif /*UKU_6U*/
;;;2579   if(avar_bps_reset_cnt)	avar_bps_reset_cnt--;
002be4  f8940031          LDRB     r0,[r4,#0x31]  ; avar_bps_reset_cnt
002be8  2800              CMP      r0,#0
002bea  d003              BEQ      |L1.11252|
002bec  f1a00001          SUB      r0,r0,#1
002bf0  f8840031          STRB     r0,[r4,#0x31]
                  |L1.11252|
;;;2580   }
002bf4  e8bd81f0          POP      {r4-r8,pc}
;;;2581   
                          ENDP

                  matemat PROC
;;;2583   //-----------------------------------------------
;;;2584   void matemat(void)
002bf8  e92d4ff0          PUSH     {r4-r11,lr}
;;;2585   {
002bfc  b087              SUB      sp,sp,#0x1c
;;;2586   //signed short temp_SS;
;;;2587   signed long temp_SL/*,temp_SL_*/;
;;;2588   char /*temp,*/i;
;;;2589   //signed short temp_SS;
;;;2590   
;;;2591   #ifdef UKU_MGTS
;;;2592   //напряжение сети
;;;2593   temp_SL=(signed long)net_buff_;
;;;2594   temp_SL*=Kunet;
;;;2595   temp_SL/=110000L;
;;;2596   net_U=(signed short)temp_SL;
;;;2597   #endif
;;;2598   
;;;2599   #ifdef UKU_RSTKM
;;;2600   //напряжение сети
;;;2601   temp_SL=(signed long)net_buff_;
;;;2602   temp_SL*=Kunet;
;;;2603   temp_SL/=110000L;
;;;2604   net_U=(signed short)temp_SL;
;;;2605   #endif
;;;2606   
;;;2607   #ifdef UKU_3U
;;;2608   //напряжение сети
;;;2609   temp_SL=(signed long)net_buff_;
;;;2610   temp_SL*=Kunet;
;;;2611   temp_SL/=36000L;
;;;2612   net_U=(signed short)temp_SL;
;;;2613   #endif
;;;2614   
;;;2615   #ifdef UKU_6U
;;;2616   //напряжение сети
;;;2617   
;;;2618   if((AUSW_MAIN%10)||(AUSW_MAIN==2400)||(AUSW_MAIN==4800)||(AUSW_MAIN==6000))
;;;2619   	{
;;;2620   
;;;2621   	if(bps[11]._device==dNET_METR)
;;;2622   		{
;;;2623   		net_metr_buff_[0]=((signed short)bps[11]._buff[0])+(((signed short)bps[11]._buff[1])<<8);
;;;2624   		net_metr_buff_[1]=((signed short)bps[11]._buff[2])+(((signed short)bps[11]._buff[3])<<8);
;;;2625   		net_metr_buff_[2]=((signed short)bps[11]._buff[4])+(((signed short)bps[11]._buff[5])<<8);
;;;2626   
;;;2627   		temp_SL=(signed long)net_metr_buff_[0];
;;;2628   		temp_SL*=KunetA;
;;;2629   		temp_SL/=6000L;
;;;2630   		net_Ua=(signed short)temp_SL;
;;;2631   	
;;;2632   		temp_SL=(signed long)net_metr_buff_[1];
;;;2633   		temp_SL*=KunetB;
;;;2634   		temp_SL/=6000L;
;;;2635   		net_Ub=(signed short)temp_SL;
;;;2636   	
;;;2637   		temp_SL=(signed long)net_metr_buff_[2];
;;;2638   		temp_SL*=KunetC;
;;;2639   		temp_SL/=6000L;
;;;2640   		net_Uc=(signed short)temp_SL;
;;;2641   		}
;;;2642   	else
;;;2643   		{
;;;2644   		temp_SL=(signed long)net_buff_;
;;;2645   		temp_SL*=KunetA;
;;;2646   		temp_SL/=110000L;
;;;2647   		net_Ua=(signed short)temp_SL;
;;;2648   	
;;;2649   		temp_SL=(signed long)adc_buff_[3];
;;;2650   		temp_SL*=KunetB;
;;;2651   		temp_SL/=6000L;
;;;2652   		net_Ub=(signed short)temp_SL;
;;;2653   	
;;;2654   		temp_SL=(signed long)adc_buff_[10];
;;;2655   		temp_SL*=KunetC;
;;;2656   		temp_SL/=6000L;
;;;2657   		net_Uc=(signed short)temp_SL;
;;;2658   		}
;;;2659   
;;;2660   	net_U=net_Ua;
;;;2661   	if(net_Ub<net_U)net_U=net_Ub;
;;;2662   	if(net_Uc<net_U)net_U=net_Uc;
;;;2663   	}
;;;2664   else 
;;;2665   	{
;;;2666   	temp_SL=(signed long)net_buff_;
;;;2667   	temp_SL*=Kunet;
;;;2668   	temp_SL/=110000L;
;;;2669   	net_U=(signed short)temp_SL;
;;;2670   	}
;;;2671   
;;;2672   
;;;2673   
;;;2674   
;;;2675   #endif
;;;2676   
;;;2677   #ifdef UKU_GLONASS
;;;2678   //напряжение сети
;;;2679   temp_SL=(signed long)net_buff_;
;;;2680   temp_SL*=Kunet;
;;;2681   temp_SL/=110000L;
;;;2682   net_U=(signed short)temp_SL;
;;;2683   #endif
;;;2684   
;;;2685   #ifdef UKU_KONTUR
;;;2686   //напряжение сети
;;;2687   temp_SL=(signed long)net_buff_;
;;;2688   temp_SL*=Kunet;
;;;2689   temp_SL/=110000L;
;;;2690   net_U=(signed short)temp_SL;
;;;2691   #endif
;;;2692   
;;;2693   #ifdef IPS_SGEP_GAZPROM
;;;2694   //напряжение сети
;;;2695   temp_SL=(signed long)net_buff_;
;;;2696   temp_SL*=Kunet;
;;;2697   temp_SL/=110000L;
;;;2698   net_U=(signed short)temp_SL;
;;;2699   #endif
;;;2700   
;;;2701   #ifdef UKU_220_V2
;;;2702   //напряжение сети
;;;2703   
;;;2704   if(AUSW_MAIN==22033)
;;;2705   	{
;;;2706   	temp_SL=(signed long)net_buff_;
;;;2707   	temp_SL*=KunetA;
;;;2708   	temp_SL/=6000L;
;;;2709   	net_Ua=(signed short)temp_SL;
;;;2710   
;;;2711   	temp_SL=(signed long)adc_buff_[3];
;;;2712   	temp_SL*=KunetB;
;;;2713   	temp_SL/=6000L;
;;;2714   	net_Ub=(signed short)temp_SL;
;;;2715   
;;;2716   	temp_SL=(signed long)adc_buff_[10];
;;;2717   	temp_SL*=KunetC;
;;;2718   	temp_SL/=6000L;
;;;2719   	net_Uc=(signed short)temp_SL;
;;;2720   
;;;2721   	net_U=net_Ua;
;;;2722   	if(net_Ub<net_U)net_U=net_Ub;
;;;2723   	if(net_Uc<net_U)net_U=net_Uc;
;;;2724   	}
;;;2725   else
;;;2726   	{
;;;2727   	temp_SL=(signed long)net_buff_;
;;;2728   	temp_SL*=Kunet;
;;;2729   	temp_SL/=5000L;
;;;2730   	net_U=(signed short)temp_SL;
;;;2731   	}
;;;2732   #endif
;;;2733   
;;;2734   
;;;2735   #ifdef UKU_220
;;;2736   //напряжение сети
;;;2737   
;;;2738   if(AUSW_MAIN==22035)
;;;2739   	{
;;;2740   	temp_SL=(signed long)net_buff_;
;;;2741   	temp_SL*=KunetA;
;;;2742   	temp_SL/=6000L;
;;;2743   	net_Ua=(signed short)temp_SL;
;;;2744   
;;;2745   	temp_SL=(signed long)adc_buff_[3];
;;;2746   	temp_SL*=KunetB;
;;;2747   	temp_SL/=6000L;
;;;2748   	net_Ub=(signed short)temp_SL;
;;;2749   
;;;2750   	temp_SL=(signed long)adc_buff_[10];
;;;2751   	temp_SL*=KunetC;
;;;2752   	temp_SL/=6000L;
;;;2753   	net_Uc=(signed short)temp_SL;
;;;2754   
;;;2755   	net_U=net_Ua;
;;;2756   	if(net_Ub<net_U)net_U=net_Ub;
;;;2757   	if(net_Uc<net_U)net_U=net_Uc;
;;;2758   	}
;;;2759   else
;;;2760   	{
;;;2761   	temp_SL=(signed long)net_buff_;
;;;2762   	temp_SL*=Kunet;
;;;2763   	#ifdef _ACDC_
;;;2764   	temp_SL/=500L;
;;;2765   	#else
;;;2766   	temp_SL/=5000L;
;;;2767   	#endif
;;;2768   	net_U=(signed short)temp_SL;
;;;2769   	
;;;2770   	}
;;;2771   #endif
;;;2772   
;;;2773   #ifdef UKU_220_IPS_TERMOKOMPENSAT
;;;2774   //напряжение сети
;;;2775   
;;;2776   
;;;2777   	if(bps[11]._device==dNET_METR)
002bfe  48ca              LDR      r0,|L1.12072|
;;;2778   		{
;;;2779   		net_metr_buff_[0]=((signed short)bps[11]._buff[0])+(((signed short)bps[11]._buff[1])<<8);
;;;2780   		net_metr_buff_[1]=((signed short)bps[11]._buff[2])+(((signed short)bps[11]._buff[3])<<8);
;;;2781   		net_metr_buff_[2]=((signed short)bps[11]._buff[4])+(((signed short)bps[11]._buff[5])<<8);
;;;2782   
;;;2783   		temp_SL=(signed long)net_metr_buff_[2];
;;;2784   		temp_SL*=KunetA;
002c00  4bca              LDR      r3,|L1.12076|
;;;2785   		temp_SL/=6000L;
;;;2786   		net_Ua=(signed short)temp_SL;
;;;2787   	
;;;2788   		temp_SL=(signed long)net_metr_buff_[1];
;;;2789   		temp_SL*=KunetB;
002c02  49cc              LDR      r1,|L1.12084|
002c04  f890044c          LDRB     r0,[r0,#0x44c]        ;2777  ; bps
;;;2790   		temp_SL/=6000L;
;;;2791   		net_Ub=(signed short)temp_SL;
;;;2792   	
;;;2793   		temp_SL=(signed long)net_metr_buff_[0];
;;;2794   		temp_SL*=KunetC;
002c08  4acb              LDR      r2,|L1.12088|
002c0a  9006              STR      r0,[sp,#0x18]         ;2784
002c0c  f8dfc320          LDR      r12,|L1.12080|
002c10  f9b39000          LDRSH    r9,[r3,#0]            ;2784
002c14  f9b1b000          LDRSH    r11,[r1,#0]           ;2789
002c18  f9b2a000          LDRSH    r10,[r2,#0]
002c1c  4fc7              LDR      r7,|L1.12092|
;;;2795   		temp_SL/=6000L;
;;;2796   		net_Uc=(signed short)temp_SL;
002c1e  4cc8              LDR      r4,|L1.12096|
;;;2797   
;;;2798   		net_F3=((signed short)bps[11]._buff[6])+(((signed short)bps[11]._buff[7])<<8);
;;;2799   
;;;2800   		net_U=net_Ua;
;;;2801   		if(net_Ub<net_U)net_U=net_Ub;
;;;2802   		if(net_Uc<net_U)net_U=net_Uc;
;;;2803   		}
;;;2804   	  else if(AUSW_MAIN==22033)
;;;2805   	{
;;;2806   	temp_SL=(signed long)net_buff_;
002c20  4ebe              LDR      r6,|L1.12060|
002c22  f2456511          MOV      r5,#0x5611            ;2804
002c26  2807              CMP      r0,#7                 ;2777
002c28  d036              BEQ      |L1.11416|
002c2a  4631              MOV      r1,r6
002c2c  f8df8304          LDR      r8,|L1.12084|
002c30  8f4a              LDRH     r2,[r1,#0x3a]
002c32  4619              MOV      r1,r3                 ;2784
;;;2807   	temp_SL*=KunetA;
;;;2808   	temp_SL/=4000L;
;;;2809   	net_Ua=(signed short)temp_SL;
;;;2810   
;;;2811   	temp_SL=(signed long)adc_buff_[3];
002c34  4bc4              LDR      r3,|L1.12104|
002c36  f9b11000          LDRSH    r1,[r1,#0]            ;2784
002c3a  f9b88000          LDRSH    r8,[r8,#0]            ;2789
002c3e  434a              MULS     r2,r1,r2              ;2807
002c40  f9b31006          LDRSH    r1,[r3,#6]
002c44  f8df92f0          LDR      r9,|L1.12088|
;;;2812   	temp_SL*=KunetB;
002c48  fb01f108          MUL      r1,r1,r8
002c4c  f2417870          MOV      r8,#0x1770            ;2785
;;;2813   	temp_SL/=6000L;
;;;2814   	net_Ub=(signed short)temp_SL;
;;;2815   
;;;2816   	temp_SL=(signed long)adc_buff_[10];
002c50  f9b33014          LDRSH    r3,[r3,#0x14]
002c54  f9b99000          LDRSH    r9,[r9,#0]            ;2794
002c58  fb91f1f8          SDIV     r1,r1,r8              ;2813
;;;2817   	temp_SL*=KunetC;
002c5c  fb03f309          MUL      r3,r3,r9
;;;2818   	temp_SL/=6000L;
002c60  fb93f3f8          SDIV     r3,r3,r8
002c64  48b7              LDR      r0,|L1.12100|
002c66  b209              SXTH     r1,r1                 ;2814
;;;2819   	net_Uc=(signed short)temp_SL;
002c68  b21b              SXTH     r3,r3
002c6a  8800              LDRH     r0,[r0,#0]            ;2804  ; AUSW_MAIN
002c6c  42a8              CMP      r0,r5                 ;2804
002c6e  d154              BNE      |L1.11546|
002c70  f44f607a          MOV      r0,#0xfa0             ;2808
002c74  fb92f0f0          SDIV     r0,r2,r0              ;2808
002c78  b200              SXTH     r0,r0                 ;2809
002c7a  f8ac0000          STRH     r0,[r12,#0]           ;2809
002c7e  8039              STRH     r1,[r7,#0]            ;2814
002c80  8023              STRH     r3,[r4,#0]
;;;2820   
;;;2821   	net_U=net_Ua;
002c82  4aa3              LDR      r2,|L1.12048|
002c84  8010              STRH     r0,[r2,#0]
;;;2822   	if(net_Ub<net_U)net_U=net_Ub;
002c86  4281              CMP      r1,r0
002c88  da00              BGE      |L1.11404|
002c8a  8011              STRH     r1,[r2,#0]
                  |L1.11404|
;;;2823   	if(net_Uc<net_U)net_U=net_Uc;
002c8c  f9b20000          LDRSH    r0,[r2,#0]  ; net_U
002c90  4283              CMP      r3,r0
002c92  da00              BGE      |L1.11414|
002c94  8013              STRH     r3,[r2,#0]
                  |L1.11414|
002c96  e07e              B        |L1.11670|
                  |L1.11416|
002c98  48ac              LDR      r0,|L1.12108|
002c9a  4ba0              LDR      r3,|L1.12060|
002c9c  7801              LDRB     r1,[r0,#0]            ;2779  ; bps
002c9e  7842              LDRB     r2,[r0,#1]            ;2779  ; bps
002ca0  f10303e8          ADD      r3,r3,#0xe8           ;2779
002ca4  eb012102          ADD      r1,r1,r2,LSL #8       ;2779
002ca8  fa1ff881          UXTH     r8,r1                 ;2779
002cac  f8a38000          STRH     r8,[r3,#0]            ;2779
002cb0  7881              LDRB     r1,[r0,#2]            ;2780  ; bps
002cb2  78c2              LDRB     r2,[r0,#3]            ;2780  ; bps
002cb4  eb012102          ADD      r1,r1,r2,LSL #8       ;2780
002cb8  b289              UXTH     r1,r1                 ;2780
002cba  8059              STRH     r1,[r3,#2]            ;2780
002cbc  7902              LDRB     r2,[r0,#4]            ;2781  ; bps
002cbe  f890e005          LDRB     lr,[r0,#5]            ;2781  ; bps
002cc2  eb02220e          ADD      r2,r2,lr,LSL #8       ;2781
002cc6  b292              UXTH     r2,r2                 ;2781
002cc8  809a              STRH     r2,[r3,#4]            ;2781
002cca  fb02f209          MUL      r2,r2,r9              ;2784
002cce  f2417370          MOV      r3,#0x1770            ;2785
002cd2  fb92f2f3          SDIV     r2,r2,r3              ;2785
002cd6  fa0ff982          SXTH     r9,r2                 ;2786
002cda  f8ac9000          STRH     r9,[r12,#0]           ;2786
002cde  fb01f10b          MUL      r1,r1,r11             ;2789
002ce2  fb91f1f3          SDIV     r1,r1,r3              ;2790
002ce6  b209              SXTH     r1,r1                 ;2791
002ce8  8039              STRH     r1,[r7,#0]            ;2791
002cea  fb08f80a          MUL      r8,r8,r10             ;2794
002cee  fb98f2f3          SDIV     r2,r8,r3              ;2795
002cf2  b212              SXTH     r2,r2                 ;2796
002cf4  8022              STRH     r2,[r4,#0]            ;2796
002cf6  7983              LDRB     r3,[r0,#6]            ;2798  ; bps
002cf8  79c0              LDRB     r0,[r0,#7]            ;2798  ; bps
002cfa  eb032000          ADD      r0,r3,r0,LSL #8       ;2798
002cfe  4b94              LDR      r3,|L1.12112|
002d00  8018              STRH     r0,[r3,#0]            ;2798
002d02  4883              LDR      r0,|L1.12048|
002d04  f8a09000          STRH     r9,[r0,#0]            ;2800
002d08  4549              CMP      r1,r9                 ;2801
002d0a  da00              BGE      |L1.11534|
002d0c  8001              STRH     r1,[r0,#0]            ;2801
                  |L1.11534|
002d0e  f9b01000          LDRSH    r1,[r0,#0]            ;2802  ; net_U
002d12  428a              CMP      r2,r1                 ;2802
002d14  da3f              BGE      |L1.11670|
002d16  8002              STRH     r2,[r0,#0]            ;2802
002d18  e03d              B        |L1.11670|
                  |L1.11546|
;;;2824   	}
;;;2825   else if((AUSW_MAIN==22063)||(AUSW_MAIN==22023)||(AUSW_MAIN==22043)||(AUSW_MAIN==22044)||(AUSW_MAIN==22018))
002d1a  f5a048ac          SUB      r8,r0,#0x5600
002d1e  f1b8082f          SUBS     r8,r8,#0x2f
002d22  d00b              BEQ      |L1.11580|
002d24  f1180828          ADDS     r8,r8,#0x28
002d28  d008              BEQ      |L1.11580|
002d2a  f1b80814          SUBS     r8,r8,#0x14
002d2e  d005              BEQ      |L1.11580|
002d30  f1b80801          SUBS     r8,r8,#1
002d34  d002              BEQ      |L1.11580|
002d36  f118081a          ADDS     r8,r8,#0x1a
002d3a  d113              BNE      |L1.11620|
                  |L1.11580|
;;;2826   	{
;;;2827   	temp_SL=(signed long)net_buff_;
;;;2828   	temp_SL*=KunetA;
;;;2829   	temp_SL/=40000L;
002d3c  f6494040          MOV      r0,#0x9c40
002d40  fb92f0f0          SDIV     r0,r2,r0
;;;2830   	net_Ua=(signed short)temp_SL;
002d44  b200              SXTH     r0,r0
002d46  f8ac0000          STRH     r0,[r12,#0]
;;;2831   
;;;2832   	temp_SL=(signed long)adc_buff_[3];
;;;2833   	temp_SL*=KunetB;
;;;2834   	temp_SL/=6000L;
;;;2835   	net_Ub=(signed short)temp_SL;
002d4a  8039              STRH     r1,[r7,#0]
;;;2836   
;;;2837   	temp_SL=(signed long)adc_buff_[10];
;;;2838   	temp_SL*=KunetC;
;;;2839   	temp_SL/=6000L;
;;;2840   	net_Uc=(signed short)temp_SL;
002d4c  8023              STRH     r3,[r4,#0]
;;;2841   
;;;2842   	net_U=net_Ua;
002d4e  4a70              LDR      r2,|L1.12048|
002d50  8010              STRH     r0,[r2,#0]
;;;2843   	if(net_Ub<net_U)net_U=net_Ub;
002d52  4281              CMP      r1,r0
002d54  da00              BGE      |L1.11608|
002d56  8011              STRH     r1,[r2,#0]
                  |L1.11608|
;;;2844   	if(net_Uc<net_U)net_U=net_Uc;
002d58  f9b20000          LDRSH    r0,[r2,#0]  ; net_U
002d5c  4283              CMP      r3,r0
002d5e  da1a              BGE      |L1.11670|
002d60  8013              STRH     r3,[r2,#0]
002d62  e018              B        |L1.11670|
                  |L1.11620|
;;;2845   	}
;;;2846   else	if((AUSW_MAIN==22010)||(AUSW_MAIN==22011) )
;;;2847   	{
;;;2848   	temp_SL=(signed long)net_buff_;
;;;2849   	temp_SL*=Kunet;
002d64  497b              LDR      r1,|L1.12116|
002d66  f5a043aa          SUB      r3,r0,#0x5500         ;2846
002d6a  f9b12000          LDRSH    r2,[r1,#0]
002d6e  496b              LDR      r1,|L1.12060|
002d70  8f49              LDRH     r1,[r1,#0x3a]         ;2806
002d72  4351              MULS     r1,r2,r1
002d74  3bfa              SUBS     r3,r3,#0xfa           ;2846
002d76  d001              BEQ      |L1.11644|
002d78  1e5a              SUBS     r2,r3,#1              ;2846
002d7a  d106              BNE      |L1.11658|
                  |L1.11644|
;;;2850   	temp_SL/=35000L;
002d7c  f64800b8          MOV      r0,#0x88b8
002d80  fb91f0f0          SDIV     r0,r1,r0
;;;2851   	net_U=(signed short)temp_SL;
002d84  4962              LDR      r1,|L1.12048|
002d86  8008              STRH     r0,[r1,#0]
002d88  e005              B        |L1.11670|
                  |L1.11658|
;;;2852   	
;;;2853   	}
;;;2854   else
;;;2855   	{
;;;2856   	temp_SL=(signed long)net_buff_;
;;;2857   	temp_SL*=Kunet;
;;;2858   	#ifdef _ACDC_
;;;2859   	temp_SL/=500L;
002d8a  f44f70fa          MOV      r0,#0x1f4
002d8e  fb91f0f0          SDIV     r0,r1,r0
;;;2860   	#else
;;;2861   	temp_SL/=5000L;
;;;2862   	#endif
;;;2863   	net_U=(signed short)temp_SL;
002d92  495f              LDR      r1,|L1.12048|
002d94  8008              STRH     r0,[r1,#0]
                  |L1.11670|
;;;2864   	
;;;2865   	}
;;;2866   if(bps[11]._device!=dNET_METR) net_F3=net_F;
002d96  9806              LDR      r0,[sp,#0x18]
002d98  2807              CMP      r0,#7
002d9a  d003              BEQ      |L1.11684|
002d9c  486e              LDR      r0,|L1.12120|
002d9e  8801              LDRH     r1,[r0,#0]  ; net_F
002da0  486b              LDR      r0,|L1.12112|
002da2  8001              STRH     r1,[r0,#0]
                  |L1.11684|
;;;2867   #endif
;;;2868   
;;;2869   #ifdef UKU_TELECORE2015
;;;2870   //напряжение сети
;;;2871   temp_SL=(signed long)net_buff_;
;;;2872   temp_SL*=Kunet;
;;;2873   temp_SL/=110000L;
;;;2874   net_U=(signed short)temp_SL;
;;;2875   #endif
;;;2876   
;;;2877   #ifdef UKU_TELECORE2017
;;;2878   //напряжение сети
;;;2879   temp_SL=(signed long)net_buff_;
;;;2880   temp_SL*=Kunet;
;;;2881   temp_SL/=110000L;
;;;2882   net_U=(signed short)temp_SL;
;;;2883   #endif
;;;2884   
;;;2885   //Напряжения батарей
;;;2886   temp_SL=(signed long)adc_buff_[0];
002da4  4f68              LDR      r7,|L1.12104|
002da6  f9b72000          LDRSH    r2,[r7,#0]  ; adc_buff_
;;;2887   temp_SL*=Kubat[0];
002daa  496c              LDR      r1,|L1.12124|
002dac  f9b10000          LDRSH    r0,[r1,#0]  ; Kubat
002db0  4350              MULS     r0,r2,r0
;;;2888   temp_SL/=2000L;
002db2  f44f68fa          MOV      r8,#0x7d0
002db6  fb90f0f8          SDIV     r0,r0,r8
;;;2889   bat[0]._Ub=(signed short)temp_SL;
002dba  4c53              LDR      r4,|L1.12040|
002dbc  8060              STRH     r0,[r4,#2]
;;;2890   
;;;2891   #ifdef UKU_220
;;;2892   //Напряжения батарей
;;;2893   temp_SL=(signed long)adc_buff_[0];
;;;2894   temp_SL*=Kubat[0];
;;;2895   temp_SL/=400L;
;;;2896   bat[0]._Ub=(signed short)temp_SL;
;;;2897   #endif
;;;2898   
;;;2899   #ifdef UKU_220_V2
;;;2900   //Напряжения батарей
;;;2901   temp_SL=(signed long)adc_buff_[0];
;;;2902   temp_SL*=Kubat[0];
;;;2903   temp_SL/=400L;
;;;2904   bat[0]._Ub=(signed short)temp_SL;
;;;2905   #endif
;;;2906   
;;;2907   //adc_buff_[4]=300;
;;;2908   
;;;2909   temp_SL=(signed long)adc_buff_[4];
002dbe  f9b73008          LDRSH    r3,[r7,#8]  ; adc_buff_
;;;2910   temp_SL*=Kubatm[0];
002dc2  4a67              LDR      r2,|L1.12128|
002dc4  f9b20000          LDRSH    r0,[r2,#0]  ; Kubatm
002dc8  fb00f003          MUL      r0,r0,r3
;;;2911   temp_SL/=700L;
002dcc  f44f732f          MOV      r3,#0x2bc
002dd0  fb90f0f3          SDIV     r0,r0,r3
;;;2912   bat[0]._Ubm=(signed short)temp_SL;
002dd4  80a0              STRH     r0,[r4,#4]
;;;2913   
;;;2914   #ifdef UKU_KONTUR
;;;2915   temp_SL=(signed long)adc_buff_[4];
;;;2916   temp_SL*=Kubatm[0];
;;;2917   temp_SL/=2000L;
;;;2918   bat[0]._Ubm=(signed short)temp_SL;
;;;2919   #endif
;;;2920   
;;;2921   #ifdef UKU_6U
;;;2922   temp_SL=(signed long)adc_buff_[4];
;;;2923   temp_SL*=Kubatm[0];
;;;2924   temp_SL/=2000L;
;;;2925   bat[0]._Ubm=(signed short)temp_SL;
;;;2926   #endif
;;;2927   
;;;2928   temp_SL=(signed long)adc_buff_[12];
002dd6  f9b70018          LDRSH    r0,[r7,#0x18]  ; adc_buff_
;;;2929   temp_SL*=Kubat[1];
002dda  f9b11002          LDRSH    r1,[r1,#2]  ; Kubat
002dde  fb01f100          MUL      r1,r1,r0
;;;2930   temp_SL/=2000L;
002de2  fb91f0f8          SDIV     r0,r1,r8
;;;2931   bat[1]._Ub=(signed short)temp_SL;
002de6  f8a4004e          STRH     r0,[r4,#0x4e]
;;;2932   
;;;2933   #ifdef UKU_220
;;;2934   temp_SL=(signed long)adc_buff_[12];
;;;2935   temp_SL*=Kubat[1];
;;;2936   temp_SL/=400L;
;;;2937   bat[1]._Ub=(signed short)temp_SL;
;;;2938   #endif
;;;2939   
;;;2940   #ifdef UKU_220_V2
;;;2941   temp_SL=(signed long)adc_buff_[12];
;;;2942   temp_SL*=Kubat[1];
;;;2943   temp_SL/=400L;
;;;2944   bat[1]._Ub=(signed short)temp_SL;
;;;2945   #endif
;;;2946   
;;;2947   //adc_buff_[1]=300;
;;;2948   
;;;2949   temp_SL=(signed long)adc_buff_[1];
002dea  f9b71002          LDRSH    r1,[r7,#2]  ; adc_buff_
;;;2950   temp_SL*=Kubatm[1];
002dee  f9b20002          LDRSH    r0,[r2,#2]  ; Kubatm
002df2  fb00f001          MUL      r0,r0,r1
;;;2951   temp_SL/=700L;
002df6  fb90f0f3          SDIV     r0,r0,r3
;;;2952   bat[1]._Ubm=(signed short)temp_SL;
002dfa  f8a40050          STRH     r0,[r4,#0x50]
;;;2953   #ifdef UKU_KONTUR
;;;2954   temp_SL=(signed long)adc_buff_[1];
;;;2955   temp_SL*=Kubatm[1];
;;;2956   temp_SL/=2000L;
;;;2957   bat[1]._Ubm=(signed short)temp_SL;
;;;2958   #endif
;;;2959   #ifdef UKU_6U
;;;2960   temp_SL=(signed long)adc_buff_[1];
;;;2961   temp_SL*=Kubatm[1];
;;;2962   temp_SL/=2000L;
;;;2963   bat[1]._Ubm=(signed short)temp_SL;
;;;2964   #endif
;;;2965   
;;;2966   #ifdef UKU_TELECORE2015
;;;2967   temp_SL=(signed long)adc_buff_[2];
;;;2968   temp_SL*=Kubat[0];
;;;2969   temp_SL/=2000L;
;;;2970   bat[0]._Ub=(signed short)temp_SL;
;;;2971   #endif
;;;2972   
;;;2973   /*
;;;2974   //Токи батарей
;;;2975   if(!mess_find_unvol(MESS2MATEMAT))
;;;2976   	{
;;;2977   	temp_SL=(signed long)ad7705_buff_[0];
;;;2978   	temp_SL-=(signed long)Kibat0[0];
;;;2979   	temp_SL*=(signed long)Kibat1[0];
;;;2980   	if((AUSW_MAIN==24120)||(AUSW_MAIN==24210))temp_SL/=300L;
;;;2981   	else temp_SL/=1000L;
;;;2982   	bat[0]._Ib=(signed short)temp_SL;
;;;2983   
;;;2984   	temp_SL=(signed long)ad7705_buff_[1];
;;;2985   	temp_SL-=(signed long)Kibat0[1];
;;;2986   	temp_SL*=(signed long)Kibat1[1];
;;;2987   	if((AUSW_MAIN==24120)||(AUSW_MAIN==24210))temp_SL/=300L;
;;;2988   	else temp_SL/=1000L;
;;;2989   	bat[1]._Ib=(signed short)temp_SL;
;;;2990   	}
;;;2991   */
;;;2992   
;;;2993   
;;;2994   //Токи батарей
;;;2995   if(!mess_find_unvol(MESS2MATEMAT))
002dfe  f04f00dc          MOV      r0,#0xdc
002e02  f7fffffe          BL       mess_find_unvol
;;;2996   	{
;;;2997   	temp_SL=(signed long)ad7705_buff_[0];
;;;2998   	temp_SL-=(signed long)Kibat0[0];
;;;2999   	temp_SL*=(signed long)Kibat1[0];
;;;3000   	if((AUSW_MAIN==24120)||(AUSW_MAIN==24210))temp_SL/=300L;
;;;3001   	else if((AUSW_MAIN==22010)||(AUSW_MAIN==22035)||(AUSW_MAIN==22033))temp_SL/=2000L;
002e06  f2456c13          MOV      r12,#0x5613
002e0a  bbe8              CBNZ     r0,|L1.11912|
002e0c  f8dfa154          LDR      r10,|L1.12132|
002e10  f8ba0000          LDRH     r0,[r10,#0]           ;2997  ; ad7705_buff_
002e14  f8dfb150          LDR      r11,|L1.12136|
002e18  f8bb1000          LDRH     r1,[r11,#0]           ;2998  ; Kibat0
002e1c  eba00001          SUB      r0,r0,r1              ;2998
002e20  4a52              LDR      r2,|L1.12140|
002e22  f9b21000          LDRSH    r1,[r2,#0]            ;2999  ; Kibat1
002e26  fb01f100          MUL      r1,r1,r0              ;2999
002e2a  4846              LDR      r0,|L1.12100|
002e2c  f6456338          MOV      r3,#0x5e38            ;3000
002e30  f6456992          MOV      r9,#0x5e92            ;3000
002e34  8800              LDRH     r0,[r0,#0]            ;3000  ; AUSW_MAIN
002e36  4298              CMP      r0,r3                 ;3000
002e38  d001              BEQ      |L1.11838|
002e3a  4548              CMP      r0,r9                 ;3000
002e3c  d104              BNE      |L1.11848|
                  |L1.11838|
002e3e  f44f7e96          MOV      lr,#0x12c             ;3000
002e42  fb91f1fe          SDIV     r1,r1,lr              ;3000
002e46  e00f              B        |L1.11880|
                  |L1.11848|
002e48  f5a04ea8          SUB      lr,r0,#0x5400
002e4c  f5be7efd          SUBS     lr,lr,#0x1fa
002e50  d003              BEQ      |L1.11866|
002e52  4560              CMP      r0,r12
002e54  d001              BEQ      |L1.11866|
002e56  42a8              CMP      r0,r5
002e58  d102              BNE      |L1.11872|
                  |L1.11866|
002e5a  fb91f1f8          SDIV     r1,r1,r8
002e5e  e003              B        |L1.11880|
                  |L1.11872|
;;;3002   	else temp_SL/=1000L;
002e60  f44f7e7a          MOV      lr,#0x3e8
002e64  fb91f1fe          SDIV     r1,r1,lr
                  |L1.11880|
;;;3003   	#ifdef UKU_TELECORE2015
;;;3004   	temp_SL/=2L;
;;;3005   	//temp_SL=-temp_SL;
;;;3006   	#endif
;;;3007   	//#ifdef UKU_TELECORE2017
;;;3008   	//temp_SL/=-2L;
;;;3009   	//temp_SL=-temp_SL;
;;;3010   	//#endif
;;;3011   	bat[0]._Ib=(signed short)temp_SL;
002e68  8121              STRH     r1,[r4,#8]
;;;3012   
;;;3013   	temp_SL=(signed long)ad7705_buff_[1];
002e6a  f8ba1002          LDRH     r1,[r10,#2]  ; ad7705_buff_
;;;3014   	temp_SL-=(signed long)Kibat0[1];
002e6e  f8bba002          LDRH     r10,[r11,#2]  ; Kibat0
002e72  eba10a0a          SUB      r10,r1,r10
;;;3015   	temp_SL*=(signed long)Kibat1[1];
002e76  f9b21002          LDRSH    r1,[r2,#2]  ; Kibat1
002e7a  fb01f10a          MUL      r1,r1,r10
;;;3016   	if((AUSW_MAIN==24120)||(AUSW_MAIN==24210))temp_SL/=300L;
002e7e  4298              CMP      r0,r3
002e80  d001              BEQ      |L1.11910|
002e82  4548              CMP      r0,r9
002e84  d106              BNE      |L1.11924|
                  |L1.11910|
002e86  e000              B        |L1.11914|
                  |L1.11912|
002e88  e015              B        |L1.11958|
                  |L1.11914|
002e8a  f44f7096          MOV      r0,#0x12c
002e8e  fb91f0f0          SDIV     r0,r1,r0
002e92  e00e              B        |L1.11954|
                  |L1.11924|
;;;3017   	else if((AUSW_MAIN==22010)||(AUSW_MAIN==22035)||(AUSW_MAIN==22033))temp_SL/=2000L;
002e94  f5a042aa          SUB      r2,r0,#0x5500
002e98  3afa              SUBS     r2,r2,#0xfa
002e9a  d003              BEQ      |L1.11940|
002e9c  4560              CMP      r0,r12
002e9e  d001              BEQ      |L1.11940|
002ea0  42a8              CMP      r0,r5
002ea2  d102              BNE      |L1.11946|
                  |L1.11940|
002ea4  fb91f0f8          SDIV     r0,r1,r8
002ea8  e003              B        |L1.11954|
                  |L1.11946|
;;;3018   	else temp_SL/=1000L;
002eaa  f44f707a          MOV      r0,#0x3e8
002eae  fb91f0f0          SDIV     r0,r1,r0
                  |L1.11954|
;;;3019   	bat[1]._Ib=(signed short)temp_SL;
002eb2  f8a40054          STRH     r0,[r4,#0x54]
                  |L1.11958|
;;;3020   	}
;;;3021   
;;;3022   
;;;3023   
;;;3024   
;;;3025   
;;;3026   //Температуры батарей
;;;3027   
;;;3028   #ifdef UKU_KONTUR
;;;3029   if((adc_buff_[6]>800)&&(adc_buff_[6]<3800))bat[0]._nd=0;
;;;3030   else bat[0]._nd=1;
;;;3031   temp_SL=(signed long)adc_buff_[6];
;;;3032   temp_SL*=Ktbat[0];
;;;3033   temp_SL/=20000L;
;;;3034   temp_SL-=273L;
;;;3035   bat[0]._Tb=(signed short)temp_SL;
;;;3036   #else
;;;3037   if((adc_buff_[6]>800)&&(adc_buff_[6]<3800))bat[0]._nd=0;
002eb6  f9b7000c          LDRSH    r0,[r7,#0xc]  ; adc_buff_
002eba  f6403ab7          MOV      r10,#0xbb7
002ebe  4681              MOV      r9,r0
002ec0  f2a03021          SUB      r0,r0,#0x321
;;;3038   else bat[0]._nd=1;
002ec4  2201              MOVS     r2,#1
002ec6  2300              MOVS     r3,#0                 ;3037
002ec8  9005              STR      r0,[sp,#0x14]         ;3037
002eca  4550              CMP      r0,r10                ;3037
002ecc  d201              BCS      |L1.11986|
002ece  7323              STRB     r3,[r4,#0xc]          ;3037
002ed0  e000              B        |L1.11988|
                  |L1.11986|
002ed2  7322              STRB     r2,[r4,#0xc]
                  |L1.11988|
;;;3039   temp_SL=(signed long)adc_buff_[6];
;;;3040   temp_SL*=Ktbat[0];
002ed4  4926              LDR      r1,|L1.12144|
002ed6  f9b10000          LDRSH    r0,[r1,#0]  ; Ktbat
002eda  fb00f009          MUL      r0,r0,r9
;;;3041   temp_SL/=20000L;
002ede  f6446e20          MOV      lr,#0x4e20
002ee2  fb90f0fe          SDIV     r0,r0,lr
;;;3042   temp_SL-=273L;
002ee6  f2a01011          SUB      r0,r0,#0x111
;;;3043   bat[0]._Tb=(signed short)temp_SL;
002eea  8160              STRH     r0,[r4,#0xa]
;;;3044   #endif
;;;3045   
;;;3046   #ifdef UKU_KONTUR
;;;3047   if((adc_buff_[7]>800)&&(adc_buff_[7]<3800))bat[1]._nd=0;
;;;3048   else bat[1]._nd=1;
;;;3049   temp_SL=(signed long)adc_buff_[7];
;;;3050   temp_SL*=Ktbat[1];
;;;3051   temp_SL/=20000L;
;;;3052   temp_SL-=273L;
;;;3053   bat[1]._Tb=(signed short)temp_SL;
;;;3054   #else
;;;3055   if((adc_buff_[7]>800)&&(adc_buff_[7]<3800))bat[1]._nd=0;
002eec  f9b7000e          LDRSH    r0,[r7,#0xe]  ; adc_buff_
002ef0  f2a03b21          SUB      r11,r0,#0x321
002ef4  45d3              CMP      r11,r10
002ef6  d23d              BCS      |L1.12148|
002ef8  f8843058          STRB     r3,[r4,#0x58]
002efc  e03c              B        |L1.12152|
002efe  0000              DCW      0x0000
                  |L1.12032|
                          DCD      bat_ips
                  |L1.12036|
                          DCD      bat_u_old_cnt
                  |L1.12040|
                          DCD      bat
                  |L1.12044|
                          DCD      net_av_2min_timer
                  |L1.12048|
                          DCD      net_U
                  |L1.12052|
                          DCD      UMN
                  |L1.12056|
                          DCD      unet_drv_cnt
                  |L1.12060|
                          DCD      ||area_number.25||
                  |L1.12064|
                          DCD      net_Ustore
                  |L1.12068|
                          DCD      main_1Hz_cnt
                  |L1.12072|
                          DCD      bps
                  |L1.12076|
                          DCD      KunetA
                  |L1.12080|
                          DCD      net_Ua
                  |L1.12084|
                          DCD      KunetB
                  |L1.12088|
                          DCD      KunetC
                  |L1.12092|
                          DCD      net_Ub
                  |L1.12096|
                          DCD      net_Uc
                  |L1.12100|
                          DCD      AUSW_MAIN
                  |L1.12104|
                          DCD      ||.bss||+0x40c
                  |L1.12108|
                          DCD      bps+0x452
                  |L1.12112|
                          DCD      net_F3
                  |L1.12116|
                          DCD      Kunet
                  |L1.12120|
                          DCD      net_F
                  |L1.12124|
                          DCD      Kubat
                  |L1.12128|
                          DCD      Kubatm
                  |L1.12132|
                          DCD      ad7705_buff_
                  |L1.12136|
                          DCD      Kibat0
                  |L1.12140|
                          DCD      Kibat1
                  |L1.12144|
                          DCD      Ktbat
                  |L1.12148|
;;;3056   else bat[1]._nd=1;
002f74  f8842058          STRB     r2,[r4,#0x58]
                  |L1.12152|
;;;3057   temp_SL=(signed long)adc_buff_[7];
;;;3058   temp_SL*=Ktbat[1];
002f78  f9b11002          LDRSH    r1,[r1,#2]  ; Ktbat
002f7c  4341              MULS     r1,r0,r1
;;;3059   temp_SL/=20000L;
002f7e  f6446020          MOV      r0,#0x4e20
002f82  fb91f0f0          SDIV     r0,r1,r0
;;;3060   temp_SL-=273L;
002f86  f2a01011          SUB      r0,r0,#0x111
;;;3061   bat[1]._Tb=(signed short)temp_SL;
002f8a  49ff              LDR      r1,|L1.13192|
002f8c  f8a10056          STRH     r0,[r1,#0x56]
;;;3062   #endif
;;;3063   
;;;3064   #ifdef UKU_6U
;;;3065   
;;;3066   if(NUMMAKB==2)
;;;3067   	{
;;;3068   	if(makb[0]._cnt<5)
;;;3069   		{
;;;3070   		if(makb[0]._T_nd[0]==0)
;;;3071   			{
;;;3072   			bat[0]._Tb=makb[0]._T[0];
;;;3073   			bat[0]._nd=0;
;;;3074   			}
;;;3075   		}
;;;3076   
;;;3077   	if(makb[1]._cnt<5)
;;;3078   		{
;;;3079   		if(makb[1]._T_nd[0]==0)
;;;3080   			{
;;;3081   			bat[1]._Tb=makb[1]._T[0];
;;;3082   			bat[1]._nd=0;
;;;3083   			}
;;;3084   		}
;;;3085   
;;;3086   	}
;;;3087   else if(NUMMAKB==4)
;;;3088   	{
;;;3089   	signed short temp_t;
;;;3090   	temp_t=-20;
;;;3091   	if(makb[0]._cnt<5)
;;;3092   		{
;;;3093   		if(makb[0]._T_nd[0]==0)
;;;3094   			{
;;;3095   			temp_t=makb[0]._T[0];
;;;3096   			bat[0]._nd=0;
;;;3097   			}
;;;3098   		}
;;;3099   	if(makb[1]._cnt<5)
;;;3100   		{
;;;3101   		if(makb[1]._T_nd[0]==0)
;;;3102   			{
;;;3103   			if(temp_t<makb[1]._T[0])
;;;3104   				{
;;;3105   				bat[0]._nd=0;
;;;3106   				temp_t=makb[1]._T[0];
;;;3107   				}
;;;3108   			}
;;;3109   		}
;;;3110   	if(temp_t!=-20)bat[0]._Tb = temp_t;
;;;3111   
;;;3112    	temp_t=-20;
;;;3113   	if(makb[2]._cnt<5)
;;;3114   		{
;;;3115   		if(makb[2]._T_nd[0]==0)
;;;3116   			{
;;;3117   			temp_t=makb[2]._T[0];
;;;3118   			bat[1]._nd=0;
;;;3119   			}
;;;3120   		}
;;;3121   	if(makb[3]._cnt<5)
;;;3122   		{
;;;3123   		if(makb[3]._T_nd[0]==0)
;;;3124   			{
;;;3125   			if(temp_t<makb[3]._T[0])
;;;3126   				{
;;;3127   				bat[1]._nd=0;
;;;3128   				temp_t=makb[3]._T[0];
;;;3129   				}
;;;3130   			}
;;;3131   		}
;;;3132   	if(temp_t!=-20)bat[1]._Tb = temp_t;
;;;3133   	}
;;;3134   
;;;3135   #endif
;;;3136   
;;;3137   
;;;3138   //Напряжение нагрузки
;;;3139   temp_SL=(signed long)adc_buff_[2];
002f90  f9b71004          LDRSH    r1,[r7,#4]  ; adc_buff_
;;;3140   temp_SL*=Kuload;
002f94  48fd              LDR      r0,|L1.13196|
002f96  f9b00000          LDRSH    r0,[r0,#0]  ; Kuload
002f9a  fb01f000          MUL      r0,r1,r0
;;;3141   temp_SL/=2000L;
002f9e  f44f64fa          MOV      r4,#0x7d0
002fa2  fb90f0f4          SDIV     r0,r0,r4
;;;3142   load_U=(signed short)temp_SL;
002fa6  4cfa              LDR      r4,|L1.13200|
002fa8  8020              STRH     r0,[r4,#0]
;;;3143   
;;;3144   #ifdef UKU_220 
;;;3145   //Напряжение нагрузки
;;;3146   temp_SL=(signed long)adc_buff_[2];
;;;3147   temp_SL*=Kuload;
;;;3148   temp_SL/=350L;
;;;3149   load_U=(signed short)temp_SL;
;;;3150   #endif
;;;3151   
;;;3152   #ifdef UKU_220_V2 
;;;3153   //Напряжение нагрузки
;;;3154   temp_SL=(signed long)adc_buff_[2];
;;;3155   temp_SL*=Kuload;
;;;3156   temp_SL/=350L;
;;;3157   load_U=(signed short)temp_SL;
;;;3158   #endif
;;;3159   
;;;3160   #ifdef UKU_220_IPS_TERMOKOMPENSAT
;;;3161   //Напряжение шины
;;;3162   temp_SL=(signed long)adc_buff_[1];
002faa  f9b78002          LDRSH    r8,[r7,#2]  ; adc_buff_
;;;3163   temp_SL*=Kuout;
002fae  48f9              LDR      r0,|L1.13204|
002fb0  f9b00000          LDRSH    r0,[r0,#0]  ; Kuout
002fb4  fb08f800          MUL      r8,r8,r0
;;;3164   if(AUSW_MAIN==22010)temp_SL/=400L;
002fb8  48f7              LDR      r0,|L1.13208|
002fba  f24554fa          MOV      r4,#0x55fa
002fbe  f44f7bc8          MOV      r11,#0x190
002fc2  8800              LDRH     r0,[r0,#0]  ; AUSW_MAIN
002fc4  42a0              CMP      r0,r4
002fc6  d102              BNE      |L1.12238|
002fc8  fb98f8fb          SDIV     r8,r8,r11
002fcc  e003              B        |L1.12246|
                  |L1.12238|
;;;3165   else temp_SL/=500L;
002fce  f44f7efa          MOV      lr,#0x1f4
002fd2  fb98f8fe          SDIV     r8,r8,lr
                  |L1.12246|
;;;3166   out_U=(signed short)temp_SL;
002fd6  f8dfe3c4          LDR      lr,|L1.13212|
002fda  fa0ff888          SXTH     r8,r8
002fde  f8ae8000          STRH     r8,[lr,#0]
;;;3167   load_U=out_U;
002fe2  f8dfe3ac          LDR      lr,|L1.13200|
002fe6  f8ae8000          STRH     r8,[lr,#0]
;;;3168   
;;;3169   //Напряжение выпрямителей
;;;3170   temp_SL=(signed long)adc_buff_[2];
;;;3171   temp_SL*=Kubps;
002fea  4fed              LDR      r7,|L1.13216|
002fec  f9b77000          LDRSH    r7,[r7,#0]  ; Kubps
002ff0  fb01f107          MUL      r1,r1,r7
;;;3172   if(AUSW_MAIN==22010)temp_SL/=400L;
002ff4  d102              BNE      |L1.12284|
002ff6  fb91f1fb          SDIV     r1,r1,r11
002ffa  e003              B        |L1.12292|
                  |L1.12284|
;;;3173   else temp_SL/=500L;
002ffc  f44f74fa          MOV      r4,#0x1f4
003000  fb91f1f4          SDIV     r1,r1,r4
                  |L1.12292|
;;;3174   bps_U=(signed short)temp_SL;
003004  4ce7              LDR      r4,|L1.13220|
003006  b209              SXTH     r1,r1
003008  8021              STRH     r1,[r4,#0]
;;;3175   
;;;3176   if(bps_U<100)
00300a  2964              CMP      r1,#0x64
00300c  da19              BGE      |L1.12354|
;;;3177   	{
;;;3178   	char i;
;;;3179   	for(i=0;i<NUMIST;i++)
00300e  f04f0100          MOV      r1,#0
003012  46a6              MOV      lr,r4                 ;3174
003014  4ce4              LDR      r4,|L1.13224|
003016  f9b4b000          LDRSH    r11,[r4,#0]
00301a  e010              B        |L1.12350|
                  |L1.12316|
;;;3180   		{
;;;3181   		if(bps[i]._Uin>bps_U)bps_U=bps[i]._Uin;
00301c  eb0104c1          ADD      r4,r1,r1,LSL #3
003020  eb041701          ADD      r7,r4,r1,LSL #4
003024  4ce1              LDR      r4,|L1.13228|
003026  eb040487          ADD      r4,r4,r7,LSL #2
00302a  f9be7000          LDRSH    r7,[lr,#0]  ; bps_U
00302e  6a24              LDR      r4,[r4,#0x20]
003030  42bc              CMP      r4,r7
003032  dd01              BLE      |L1.12344|
003034  f8ae4000          STRH     r4,[lr,#0]
                  |L1.12344|
003038  f1010101          ADD      r1,r1,#1              ;3179
00303c  b2c9              UXTB     r1,r1                 ;3179
                  |L1.12350|
00303e  4559              CMP      r1,r11                ;3179
003040  dbec              BLT      |L1.12316|
                  |L1.12354|
;;;3182   		}
;;;3183   	}
;;;3184   
;;;3185   //Суммарный ток выпрямителей
;;;3186   temp_SL=0;
003042  f04f0b00          MOV      r11,#0
;;;3187   for (i=0;i<NUMIST;i++)
003046  4659              MOV      r1,r11
003048  4cd7              LDR      r4,|L1.13224|
00304a  f9b47000          LDRSH    r7,[r4,#0]            ;3179
00304e  4cd7              LDR      r4,|L1.13228|
003050  e00b              B        |L1.12394|
                  |L1.12370|
;;;3188   	{
;;;3189   	temp_SL+=((signed long)bps[i]._Ii);
003052  eb010ec1          ADD      lr,r1,r1,LSL #3
003056  eb0e1e01          ADD      lr,lr,r1,LSL #4
00305a  eb040e8e          ADD      lr,r4,lr,LSL #2
00305e  f8dee024          LDR      lr,[lr,#0x24]
003062  44f3              ADD      r11,r11,lr
003064  f1010101          ADD      r1,r1,#1              ;3187
003068  b2c9              UXTB     r1,r1                 ;3187
                  |L1.12394|
00306a  42b9              CMP      r1,r7                 ;3187
00306c  dbf1              BLT      |L1.12370|
;;;3190   	}
;;;3191   bps_I=(signed short)temp_SL;
00306e  49d0              LDR      r1,|L1.13232|
003070  f8a1b000          STRH     r11,[r1,#0]
;;;3192   
;;;3193   
;;;3194   #endif
;;;3195   
;;;3196   
;;;3197   #ifdef UKU_KONTUR
;;;3198   //Внешний датчик температуры №1(температура внешнего воздуха)
;;;3199   if((adc_buff_[5]>800)&&(adc_buff_[5]<3800))ND_EXT[0]=0;
;;;3200   else ND_EXT[0]=1;
;;;3201   temp_SL=(signed long)adc_buff_[5];
;;;3202   temp_SL*=Ktext[0];
;;;3203   temp_SL/=20000L;
;;;3204   temp_SL-=273L;
;;;3205   t_ext[0]=(signed short)temp_SL;
;;;3206   #else 
;;;3207   //Внешний датчик температуры №1(температура внешнего воздуха)
;;;3208   if((adc_buff_[5]>800)&&(adc_buff_[5]<3800))ND_EXT[0]=0;
003074  49cf              LDR      r1,|L1.13236|
003076  f6403ab7          MOV      r10,#0xbb7
00307a  f9b1b00a          LDRSH    r11,[r1,#0xa]  ; adc_buff_
00307e  49ce              LDR      r1,|L1.13240|
003080  f2ab3e21          SUB      lr,r11,#0x321
003084  f8cde010          STR      lr,[sp,#0x10]
003088  45d6              CMP      lr,r10
00308a  d201              BCS      |L1.12432|
00308c  700b              STRB     r3,[r1,#0]
00308e  e000              B        |L1.12434|
                  |L1.12432|
;;;3209   else ND_EXT[0]=1;
003090  700a              STRB     r2,[r1,#0]
                  |L1.12434|
;;;3210   temp_SL=(signed long)adc_buff_[5];
;;;3211   temp_SL*=Ktext[0];
003092  f8dfa328          LDR      r10,|L1.13244|
003096  f9baa000          LDRSH    r10,[r10,#0]  ; Ktext
00309a  f8cda00c          STR      r10,[sp,#0xc]
00309e  fb0afa0b          MUL      r10,r10,r11
;;;3212   temp_SL/=20000L;
0030a2  f6446e20          MOV      lr,#0x4e20
0030a6  fb9afafe          SDIV     r10,r10,lr
;;;3213   temp_SL-=273L;
0030aa  f2aa1a11          SUB      r10,r10,#0x111
;;;3214   t_ext[0]=(signed short)temp_SL;
0030ae  f8dfe310          LDR      lr,|L1.13248|
0030b2  f8aea000          STRH     r10,[lr,#0]
;;;3215   /*
;;;3216   if((adc_buff_[6]>800)&&(adc_buff_[6]<3800))ND_EXT[1]=0;
;;;3217   else ND_EXT[1]=1;
;;;3218   temp_SL=(signed long)adc_buff_[6];
;;;3219   temp_SL*=Ktext[1];
;;;3220   temp_SL/=20000L;
;;;3221   temp_SL-=273L;
;;;3222   t_ext[1]=(signed short)temp_SL;	*/
;;;3223   #endif
;;;3224   
;;;3225   #ifdef UKU_220
;;;3226   
;;;3227   //Внешний датчик температуры №2(температура отсека ЭПУ)
;;;3228   if((adc_buff_[3]>800)&&(adc_buff_[3]<3800))ND_EXT[1]=0;
;;;3229   else ND_EXT[1]=1;
;;;3230   temp_SL=(signed long)adc_buff_[3];
;;;3231   temp_SL*=Ktext[1];
;;;3232   temp_SL/=20000L;
;;;3233   temp_SL-=273L;
;;;3234   t_ext[1]=(signed short)temp_SL;
;;;3235   
;;;3236   //Внешний датчик температуры №3(температура отсека MSAN)
;;;3237   if((adc_buff_[10]>800)&&(adc_buff_[10]<3800))ND_EXT[2]=0;
;;;3238   else ND_EXT[2]=1;
;;;3239   temp_SL=(signed long)adc_buff_[10];
;;;3240   temp_SL*=Ktext[2];
;;;3241   temp_SL/=20000L;
;;;3242   temp_SL-=273L;
;;;3243   t_ext[2]=(signed short)temp_SL;
;;;3244   
;;;3245   #else
;;;3246   
;;;3247   
;;;3248   #ifdef UKU_220_IPS_TERMOKOMPENSAT
;;;3249   
;;;3250   //Внешний датчик температуры 
;;;3251   if((adc_buff_[6]>800)&&(adc_buff_[6]<3800))ND_EXT[0]=0;
0030b6  f8dda014          LDR      r10,[sp,#0x14]
0030ba  f6403eb7          MOV      lr,#0xbb7
0030be  45f2              CMP      r10,lr
0030c0  d201              BCS      |L1.12486|
0030c2  700b              STRB     r3,[r1,#0]
0030c4  e000              B        |L1.12488|
                  |L1.12486|
;;;3252   else ND_EXT[0]=1;
0030c6  700a              STRB     r2,[r1,#0]
                  |L1.12488|
;;;3253   temp_SL=(signed long)adc_buff_[6];
;;;3254   temp_SL*=Ktext[0];
0030c8  f8dda00c          LDR      r10,[sp,#0xc]
0030cc  fb0afa09          MUL      r10,r10,r9
;;;3255   temp_SL/=20000L;
0030d0  f6446920          MOV      r9,#0x4e20
0030d4  fb9af9f9          SDIV     r9,r10,r9
;;;3256   temp_SL-=273L;
0030d8  f2a91911          SUB      r9,r9,#0x111
;;;3257   t_ext[0]=(signed short)temp_SL;
0030dc  f8dfe2e0          LDR      lr,|L1.13248|
0030e0  f8ae9000          STRH     r9,[lr,#0]
;;;3258   
;;;3259   //Внешний датчик температуры №2
;;;3260   if((adc_buff_[5]>800)&&(adc_buff_[5]<3800))ND_EXT[1]=0;
0030e4  f8dd9010          LDR      r9,[sp,#0x10]
0030e8  f6403ab7          MOV      r10,#0xbb7
0030ec  45d1              CMP      r9,r10
0030ee  d201              BCS      |L1.12532|
0030f0  704b              STRB     r3,[r1,#1]
0030f2  e000              B        |L1.12534|
                  |L1.12532|
;;;3261   else ND_EXT[1]=1;
0030f4  704a              STRB     r2,[r1,#1]
                  |L1.12534|
;;;3262   temp_SL=(signed long)adc_buff_[5];
;;;3263   temp_SL*=Ktext[1];
0030f6  4ab1              LDR      r2,|L1.13244|
0030f8  f9b22002          LDRSH    r2,[r2,#2]  ; Ktext
0030fc  fb02f20b          MUL      r2,r2,r11
;;;3264   temp_SL/=20000L;
003100  f6446920          MOV      r9,#0x4e20
003104  fb92f2f9          SDIV     r2,r2,r9
;;;3265   temp_SL-=273L;
003108  f2a21211          SUB      r2,r2,#0x111
;;;3266   t_ext[1]=(signed short)temp_SL;
00310c  fa0ffa82          SXTH     r10,r2
003110  4aab              LDR      r2,|L1.13248|
003112  f8a2a002          STRH     r10,[r2,#2]
;;;3267   #else
;;;3268   
;;;3269   
;;;3270   
;;;3271   //Внешний датчик температуры №2(температура отсека ЭПУ)
;;;3272   if((adc_buff_[6]>800)&&(adc_buff_[6]<3800))ND_EXT[1]=0;
;;;3273   else ND_EXT[1]=1;
;;;3274   temp_SL=(signed long)adc_buff_[6];
;;;3275   temp_SL*=Ktext[1];
;;;3276   temp_SL/=20000L;
;;;3277   temp_SL-=273L;
;;;3278   t_ext[1]=(signed short)temp_SL;
;;;3279   
;;;3280   //Внешний датчик температуры №3(температура отсека MSAN)
;;;3281   if((adc_buff_[3]>800)&&(adc_buff_[3]<3800))ND_EXT[2]=0;
;;;3282   else ND_EXT[2]=1;
;;;3283   temp_SL=(signed long)adc_buff_[3];
;;;3284   temp_SL*=Ktext[2];
;;;3285   temp_SL/=20000L;
;;;3286   temp_SL-=273L;
;;;3287   t_ext[2]=(signed short)temp_SL;
;;;3288   
;;;3289   #endif
;;;3290   #endif
;;;3291   
;;;3292   #ifdef UKU_220_V2
;;;3293   
;;;3294   //Внешний датчик температуры №2(температура отсека ЭПУ)
;;;3295   if((adc_buff_[3]>800)&&(adc_buff_[3]<3800))ND_EXT[1]=0;
;;;3296   else ND_EXT[1]=1;
;;;3297   temp_SL=(signed long)adc_buff_[3];
;;;3298   temp_SL*=Ktext[1];
;;;3299   temp_SL/=20000L;
;;;3300   temp_SL-=273L;
;;;3301   t_ext[1]=(signed short)temp_SL;
;;;3302   
;;;3303   //Внешний датчик температуры №3(температура отсека MSAN)
;;;3304   if((adc_buff_[10]>800)&&(adc_buff_[10]<3800))ND_EXT[2]=0;
;;;3305   else ND_EXT[2]=1;
;;;3306   temp_SL=(signed long)adc_buff_[10];
;;;3307   temp_SL*=Ktext[2];
;;;3308   temp_SL/=20000L;
;;;3309   temp_SL-=273L;
;;;3310   t_ext[2]=(signed short)temp_SL;
;;;3311   
;;;3312   #else
;;;3313   
;;;3314   #ifdef UKU_220_IPS_TERMOKOMPENSAT
;;;3315   //Ток батареи
;;;3316   if(bps[8]._device==dIBAT_METR)
003116  f8942320          LDRB     r2,[r4,#0x320]  ; bps
;;;3317   	{
;;;3318   	ibat_metr_buff_[0]=((signed long)bps[8]._buff[0])+(((signed long)bps[8]._buff[1])<<8);
;;;3319   	ibat_metr_buff_[1]=((signed long)bps[8]._buff[2])+(((signed long)bps[8]._buff[3])<<8);
;;;3320   	bIBAT_SMKLBR=((signed short)bps[8]._buff[4])+(((signed short)bps[8]._buff[5])<<8);
;;;3321   	if(bIBAT_SMKLBR) bIBAT_SMKLBR_cnt=50;
;;;3322   	if(!bIBAT_SMKLBR)
;;;3323   		{
;;;3324   		signed long temp_SL;
;;;3325   		temp_SL=(signed long)ibat_metr_buff_[0];
;;;3326   		temp_SL-=(signed long)ibat_metr_buff_[1];
;;;3327   		temp_SL*=(signed long)Kibat1[0];
;;;3328   		if((AUSW_MAIN==22010)||(AUSW_MAIN==22011)||(AUSW_MAIN==22035)||(AUSW_MAIN==22033)||(AUSW_MAIN==22063)||(AUSW_MAIN==22023)||(AUSW_MAIN==22043)||(AUSW_MAIN==22044))temp_SL/=2000L;
;;;3329   	
;;;3330   		Ib_ips_termokompensat =(signed short)temp_SL;
00311a  f8df92a8          LDR      r9,|L1.13252|
00311e  2a09              CMP      r2,#9                 ;3316
003120  d15f              BNE      |L1.12770|
003122  f8942326          LDRB     r2,[r4,#0x326]        ;3318  ; bps
003126  f894b327          LDRB     r11,[r4,#0x327]       ;3318  ; bps
00312a  f8dfe29c          LDR      lr,|L1.13256|
00312e  eb02220b          ADD      r2,r2,r11,LSL #8      ;3318
003132  f8ce2000          STR      r2,[lr,#0]            ;3318  ; ibat_metr_buff_
003136  9202              STR      r2,[sp,#8]            ;3318
003138  f8942328          LDRB     r2,[r4,#0x328]        ;3319  ; bps
00313c  f894b329          LDRB     r11,[r4,#0x329]       ;3319  ; bps
003140  eb02220b          ADD      r2,r2,r11,LSL #8      ;3319
003144  f8ce2004          STR      r2,[lr,#4]            ;3319  ; ibat_metr_buff_
003148  f894b32a          LDRB     r11,[r4,#0x32a]       ;3320  ; bps
00314c  f894e32b          LDRB     lr,[r4,#0x32b]        ;3320  ; bps
003150  eb0b2b0e          ADD      r11,r11,lr,LSL #8     ;3320
003154  f8dfe274          LDR      lr,|L1.13260|
003158  fa0ffb8b          SXTH     r11,r11               ;3320
00315c  f8aeb000          STRH     r11,[lr,#0]           ;3320
003160  f1bb0f00          CMP      r11,#0                ;3321
003164  d005              BEQ      |L1.12658|
003166  f8dfb268          LDR      r11,|L1.13264|
00316a  f04f0e32          MOV      lr,#0x32              ;3321
00316e  f8abe000          STRH     lr,[r11,#0]           ;3321
                  |L1.12658|
003172  d136              BNE      |L1.12770|
003174  f8ddb008          LDR      r11,[sp,#8]           ;3325
003178  ebab0b02          SUB      r11,r11,r2            ;3326
00317c  4a95              LDR      r2,|L1.13268|
00317e  f9b22000          LDRSH    r2,[r2,#0]            ;3327  ; Kibat1
003182  fb02f20b          MUL      r2,r2,r11             ;3327
003186  f5a04ba8          SUB      r11,r0,#0x5400        ;3328
00318a  f5bb7bfd          SUBS     r11,r11,#0x1fa        ;3328
00318e  d00f              BEQ      |L1.12720|
003190  f1bb0b01          SUBS     r11,r11,#1            ;3328
003194  d00c              BEQ      |L1.12720|
003196  4560              CMP      r0,r12                ;3328
003198  d00a              BEQ      |L1.12720|
00319a  42a8              CMP      r0,r5                 ;3328
00319c  d008              BEQ      |L1.12720|
00319e  f1bb0534          SUBS     r5,r11,#0x34          ;3328
0031a2  d005              BEQ      |L1.12720|
0031a4  3528              ADDS     r5,r5,#0x28           ;3328
0031a6  d003              BEQ      |L1.12720|
0031a8  3d14              SUBS     r5,r5,#0x14           ;3328
0031aa  d001              BEQ      |L1.12720|
0031ac  1e6d              SUBS     r5,r5,#1              ;3328
0031ae  d103              BNE      |L1.12728|
                  |L1.12720|
0031b0  f44f65fa          MOV      r5,#0x7d0             ;3328
0031b4  fb92f2f5          SDIV     r2,r2,r5              ;3328
                  |L1.12728|
0031b8  b215              SXTH     r5,r2
0031ba  f8a95000          STRH     r5,[r9,#0]
;;;3331   		if(bIBAT_SMKLBR_cnt)
0031be  f8dfc210          LDR      r12,|L1.13264|
;;;3332   			{
;;;3333   			bIBAT_SMKLBR_cnt--;
;;;3334   			Ib_ips_termokompensat=Ib_ips_termokompensat_temp;
0031c2  f8dfb214          LDR      r11,|L1.13272|
0031c6  f9bc2000          LDRSH    r2,[r12,#0]           ;3331  ; bIBAT_SMKLBR_cnt
0031ca  b142              CBZ      r2,|L1.12766|
0031cc  f1a20201          SUB      r2,r2,#1              ;3333
0031d0  f8ac2000          STRH     r2,[r12,#0]           ;3333
0031d4  f8bb2000          LDRH     r2,[r11,#0]  ; Ib_ips_termokompensat_temp
0031d8  f8a92000          STRH     r2,[r9,#0]
0031dc  e001              B        |L1.12770|
                  |L1.12766|
;;;3335   			}
;;;3336   		else 
;;;3337   			{
;;;3338   			Ib_ips_termokompensat_temp=Ib_ips_termokompensat;
0031de  f8ab5000          STRH     r5,[r11,#0]
                  |L1.12770|
;;;3339   			}
;;;3340   		}
;;;3341   	}
;;;3342   
;;;3343   bat[0]._Ub=load_U;
0031e2  4a69              LDR      r2,|L1.13192|
0031e4  f8a28002          STRH     r8,[r2,#2]
0031e8  f8cd8004          STR      r8,[sp,#4]
;;;3344   if(AUSW_MAIN==22018) Ib_ips_termokompensat=bat[0]._Ib;
0031ec  f5a045ac          SUB      r5,r0,#0x5600
0031f0  3d02              SUBS     r5,#2
0031f2  d103              BNE      |L1.12796|
0031f4  8910              LDRH     r0,[r2,#8]  ; bat
0031f6  f8a90000          STRH     r0,[r9,#0]
0031fa  e002              B        |L1.12802|
                  |L1.12796|
;;;3345   else bat[0]._Ib=Ib_ips_termokompensat;
0031fc  f8b90000          LDRH     r0,[r9,#0]  ; Ib_ips_termokompensat
003200  8110              STRH     r0,[r2,#8]
                  |L1.12802|
;;;3346   
;;;3347   #endif
;;;3348   #endif
;;;3349   
;;;3350   
;;;3351   #ifdef UKU_TELECORE2015
;;;3352   
;;;3353   //Внешний датчик температуры №1
;;;3354   if((adc_buff_[7]>800)&&(adc_buff_[7]<3800))ND_EXT[0]=0;
;;;3355   else ND_EXT[0]=1;
;;;3356   temp_SL=(signed long)adc_buff_[7];
;;;3357   temp_SL*=Ktext[0];
;;;3358   temp_SL/=20000L;
;;;3359   temp_SL-=273L;
;;;3360   t_ext[0]=(signed short)temp_SL;
;;;3361   
;;;3362   
;;;3363   //Внешний датчик температуры №2
;;;3364   if((adc_buff_[6]>800)&&(adc_buff_[6]<3800))ND_EXT[1]=0;
;;;3365   else ND_EXT[1]=1;
;;;3366   temp_SL=(signed long)adc_buff_[6];
;;;3367   temp_SL*=Ktext[1];
;;;3368   temp_SL/=20000L;
;;;3369   temp_SL-=273L;
;;;3370   t_ext[1]=(signed short)temp_SL;
;;;3371   
;;;3372   #endif
;;;3373   
;;;3374   #ifdef UKU_TELECORE2017
;;;3375   
;;;3376   //Внешний датчик температуры №1
;;;3377   if((adc_buff_[7]>800)&&(adc_buff_[7]<3800))ND_EXT[0]=0;
;;;3378   else ND_EXT[0]=1;
;;;3379   temp_SL=(signed long)adc_buff_[7];
;;;3380   temp_SL*=Ktext[0];
;;;3381   temp_SL/=20000L;
;;;3382   temp_SL-=273L;
;;;3383   t_ext[0]=(signed short)temp_SL;
;;;3384   
;;;3385   
;;;3386   //Внешний датчик температуры №2
;;;3387   if((adc_buff_[6]>800)&&(adc_buff_[6]<3800))ND_EXT[1]=0;
;;;3388   else ND_EXT[1]=1;
;;;3389   temp_SL=(signed long)adc_buff_[6];
;;;3390   temp_SL*=Ktext[1];
;;;3391   temp_SL/=20000L;
;;;3392   temp_SL-=273L;
;;;3393   t_ext[1]=(signed short)temp_SL;
;;;3394   
;;;3395   #endif
;;;3396   
;;;3397   //напряжение ввода
;;;3398   temp_SL=(signed long)adc_buff_ext_[0];
003202  f8dfc1d8          LDR      r12,|L1.13276|
003206  f8bc5000          LDRH     r5,[r12,#0]  ; adc_buff_ext_
;;;3399   temp_SL*=Kunet_ext[0];
00320a  f8df81d4          LDR      r8,|L1.13280|
00320e  f9b80000          LDRSH    r0,[r8,#0]  ; Kunet_ext
003212  4368              MULS     r0,r5,r0
;;;3400   temp_SL/=4000L;
003214  f44f6b7a          MOV      r11,#0xfa0
003218  fb90f0fb          SDIV     r0,r0,r11
;;;3401   Uvv[0]=(signed short)temp_SL;
00321c  4d71              LDR      r5,|L1.13284|
00321e  b280              UXTH     r0,r0
003220  8028              STRH     r0,[r5,#0]
;;;3402   if(Uvv[0]<100) Uvv0=Uvv[0];
003222  f8dfe1c4          LDR      lr,|L1.13288|
003226  2864              CMP      r0,#0x64
003228  d202              BCS      |L1.12848|
00322a  f8ae0000          STRH     r0,[lr,#0]
00322e  e003              B        |L1.12856|
                  |L1.12848|
;;;3403   else Uvv0=net_U;
003230  486e              LDR      r0,|L1.13292|
003232  8800              LDRH     r0,[r0,#0]  ; net_U
003234  f8ae0000          STRH     r0,[lr,#0]
                  |L1.12856|
;;;3404   
;;;3405   //напряжение пэс
;;;3406   temp_SL=(signed long)adc_buff_ext_[1];
003238  f8bcc002          LDRH     r12,[r12,#2]  ; adc_buff_ext_
;;;3407   temp_SL*=Kunet_ext[1];
00323c  f9b80002          LDRSH    r0,[r8,#2]  ; Kunet_ext
003240  fb00f00c          MUL      r0,r0,r12
;;;3408   temp_SL/=4000L;
003244  fb90f0fb          SDIV     r0,r0,r11
;;;3409   Uvv[1]=(signed short)temp_SL;
003248  8068              STRH     r0,[r5,#2]
;;;3410   
;;;3411   
;;;3412   //напряжение ввода трехфазное
;;;3413   temp_SL=(signed long)eb2_data_short[0];
00324a  4d69              LDR      r5,|L1.13296|
00324c  f9b50000          LDRSH    r0,[r5,#0]  ; eb2_data_short
;;;3414   temp_SL*=Kvv_eb2[0];
003250  f8dfc1a0          LDR      r12,|L1.13300|
003254  f9bc8000          LDRSH    r8,[r12,#0]  ; Kvv_eb2
003258  fb08f800          MUL      r8,r8,r0
;;;3415   temp_SL/=6000L;
00325c  f2417070          MOV      r0,#0x1770
003260  fb98fbf0          SDIV     r11,r8,r0
;;;3416   Uvv_eb2[0]=(signed short)temp_SL;
003264  f8df8190          LDR      r8,|L1.13304|
003268  f8a8b000          STRH     r11,[r8,#0]
;;;3417   
;;;3418   temp_SL=(signed long)eb2_data_short[1];
00326c  f9b5b002          LDRSH    r11,[r5,#2]  ; eb2_data_short
;;;3419   temp_SL*=Kvv_eb2[1];
003270  f9bce002          LDRSH    lr,[r12,#2]  ; Kvv_eb2
003274  fb0efe0b          MUL      lr,lr,r11
;;;3420   temp_SL/=6000L;
003278  fb9efbf0          SDIV     r11,lr,r0
;;;3421   Uvv_eb2[1]=(signed short)temp_SL;
00327c  f8a8b002          STRH     r11,[r8,#2]
;;;3422   
;;;3423   temp_SL=(signed long)eb2_data_short[2];
003280  f9b5b004          LDRSH    r11,[r5,#4]  ; eb2_data_short
;;;3424   temp_SL*=Kvv_eb2[2];
003284  f9bcc004          LDRSH    r12,[r12,#4]  ; Kvv_eb2
003288  fb0cfc0b          MUL      r12,r12,r11
;;;3425   temp_SL/=6000L;
00328c  fb9cfcf0          SDIV     r12,r12,r0
;;;3426   Uvv_eb2[2]=(signed short)temp_SL;
003290  f8a8c004          STRH     r12,[r8,#4]
;;;3427   
;;;3428   //напряжение пэс трехфазное
;;;3429   temp_SL=(signed long)eb2_data_short[3];
003294  f9b5b006          LDRSH    r11,[r5,#6]  ; eb2_data_short
;;;3430   temp_SL*=Kpes_eb2[0];
003298  f8dfc160          LDR      r12,|L1.13308|
00329c  f9bc8000          LDRSH    r8,[r12,#0]  ; Kpes_eb2
0032a0  fb08f80b          MUL      r8,r8,r11
;;;3431   temp_SL/=6000L;
0032a4  fb98fbf0          SDIV     r11,r8,r0
;;;3432   Upes_eb2[0]=(signed short)temp_SL;
0032a8  f8df8154          LDR      r8,|L1.13312|
0032ac  f8a8b000          STRH     r11,[r8,#0]
;;;3433   
;;;3434   temp_SL=(signed long)eb2_data_short[4];
0032b0  f9b5b008          LDRSH    r11,[r5,#8]  ; eb2_data_short
;;;3435   temp_SL*=Kpes_eb2[1];
0032b4  f9bce002          LDRSH    lr,[r12,#2]  ; Kpes_eb2
0032b8  fb0efe0b          MUL      lr,lr,r11
;;;3436   temp_SL/=6000L;
0032bc  fb9efbf0          SDIV     r11,lr,r0
;;;3437   Upes_eb2[1]=(signed short)temp_SL;
0032c0  f8a8b002          STRH     r11,[r8,#2]
;;;3438   
;;;3439   temp_SL=(signed long)eb2_data_short[5];
0032c4  f9b5b00a          LDRSH    r11,[r5,#0xa]  ; eb2_data_short
;;;3440   temp_SL*=Kpes_eb2[2];
0032c8  f9bc5004          LDRSH    r5,[r12,#4]  ; Kpes_eb2
0032cc  fb05f50b          MUL      r5,r5,r11
;;;3441   temp_SL/=6000L;
0032d0  fb95f0f0          SDIV     r0,r5,r0
;;;3442   Upes_eb2[2]=(signed short)temp_SL;
0032d4  f8a80004          STRH     r0,[r8,#4]
;;;3443   
;;;3444   //Вычисление температуры шкафа
;;;3445   
;;;3446   ibt._T[0]=t_ext[1]+273;
0032d8  f20a1a11          ADD      r10,r10,#0x111
0032dc  fa0ffc8a          SXTH     r12,r10
0032e0  f8dfa120          LDR      r10,|L1.13316|
0032e4  4836              LDR      r0,|L1.13248|
0032e6  f8aac000          STRH     r12,[r10,#0]
;;;3447   ibt._T[1]=t_ext[2]+273;
0032ea  8880              LDRH     r0,[r0,#4]  ; t_ext
0032ec  f2001011          ADD      r0,r0,#0x111
0032f0  fa0ff880          SXTH     r8,r0
0032f4  f8aa8002          STRH     r8,[r10,#2]
;;;3448   
;;;3449   ibt._nd[0]=ND_EXT[1];
0032f8  784d              LDRB     r5,[r1,#1]  ; ND_EXT
0032fa  f88a5008          STRB     r5,[r10,#8]
;;;3450   ibt._nd[1]=ND_EXT[2];
0032fe  7888              LDRB     r0,[r1,#2]  ; ND_EXT
003300  f88a0009          STRB     r0,[r10,#9]
;;;3451   
;;;3452   #ifndef UKU_TELECORE2015
;;;3453   if((ibt._nd[0]==0) &&  (ibt._nd[1]==0))
;;;3454   	{
;;;3455   	t_box=((ibt._T[0]+ibt._T[1])/2)-273;
003304  4940              LDR      r1,|L1.13320|
003306  b905              CBNZ     r5,|L1.13066|
003308  b110              CBZ      r0,|L1.13072|
                  |L1.13066|
;;;3456   	}
;;;3457   else if((ibt._nd[0]==1) &&  (ibt._nd[1]==0))
00330a  2d01              CMP      r5,#1
00330c  d00a              BEQ      |L1.13092|
00330e  e00a              B        |L1.13094|
                  |L1.13072|
003310  eb0c0008          ADD      r0,r12,r8             ;3455
003314  eb0075d0          ADD      r5,r0,r0,LSR #31      ;3455
003318  f46f7088          MVN      r0,#0x110             ;3455
00331c  eb000065          ADD      r0,r0,r5,ASR #1       ;3455
003320  8008              STRH     r0,[r1,#0]            ;3455
003322  e01e              B        |L1.13154|
                  |L1.13092|
003324  b108              CBZ      r0,|L1.13098|
                  |L1.13094|
;;;3458   	{
;;;3459   	t_box=ibt._T[1]-273;
;;;3460   	}
;;;3461   else if((ibt._nd[0]==0) &&  (ibt._nd[1]==1))
003326  b12d              CBZ      r5,|L1.13108|
003328  e006              B        |L1.13112|
                  |L1.13098|
00332a  f2a81811          SUB      r8,r8,#0x111          ;3459
00332e  f8a18000          STRH     r8,[r1,#0]            ;3459
003332  e016              B        |L1.13154|
                  |L1.13108|
003334  2801              CMP      r0,#1
003336  d002              BEQ      |L1.13118|
                  |L1.13112|
;;;3462   	{
;;;3463   	t_box=ibt._T[0]-273;
;;;3464   	}
;;;3465   else if((ibt._nd[0]==1) &&  (ibt._nd[1]==1))
003338  2d01              CMP      r5,#1
00333a  d005              BEQ      |L1.13128|
00333c  e011              B        |L1.13154|
                  |L1.13118|
00333e  f2ac1c11          SUB      r12,r12,#0x111        ;3463
003342  f8a1c000          STRH     r12,[r1,#0]           ;3463
003346  e00c              B        |L1.13154|
                  |L1.13128|
003348  2801              CMP      r0,#1
00334a  d10a              BNE      |L1.13154|
;;;3466   	{
;;;3467   	if(t_ext_can_nd<5)t_box= t_ext_can;
00334c  482f              LDR      r0,|L1.13324|
00334e  7800              LDRB     r0,[r0,#0]  ; t_ext_can_nd
003350  2805              CMP      r0,#5
003352  d203              BCS      |L1.13148|
003354  482e              LDR      r0,|L1.13328|
003356  8800              LDRH     r0,[r0,#0]  ; t_ext_can
003358  8008              STRH     r0,[r1,#0]
00335a  e002              B        |L1.13154|
                  |L1.13148|
;;;3468   	else t_box=20;
00335c  f04f0014          MOV      r0,#0x14
003360  8008              STRH     r0,[r1,#0]
                  |L1.13154|
;;;3469   	}
;;;3470   #endif
;;;3471   /*
;;;3472   //Вычисление температуры шкафа
;;;3473   
;;;3474   ibt._T[0]=bat[0]._Tb+273;
;;;3475   ibt._T[1]=bat[1]._Tb+273;
;;;3476   ibt._T[2]=t_ext[1]+273;
;;;3477   ibt._T[3]=t_ext[2]+273;
;;;3478   
;;;3479   ibt._nd[0]=bat[0]._nd;
;;;3480   ibt._nd[1]=bat[1]._nd;
;;;3481   ibt._nd[2]=ND_EXT[1];
;;;3482   ibt._nd[3]=ND_EXT[2];
;;;3483   
;;;3484   ibt._avg1=0;
;;;3485   ibt._avg_cnt=4;
;;;3486   
;;;3487   if(ibt._nd[0]==0)
;;;3488   	{
;;;3489   	ibt._avg1+=ibt._T[0];
;;;3490   	}
;;;3491   else 
;;;3492   	{
;;;3493   	ibt._avg_cnt--;
;;;3494   	}
;;;3495   
;;;3496   if(ibt._nd[1]==0)
;;;3497   	{
;;;3498   	ibt._avg1+=ibt._T[1];
;;;3499   	}
;;;3500   else 
;;;3501   	{
;;;3502   	ibt._avg_cnt--;
;;;3503   	}
;;;3504   
;;;3505   if(ibt._nd[2]==0)
;;;3506   	{
;;;3507   	ibt._avg1+=ibt._T[2];
;;;3508   	}
;;;3509   else 
;;;3510   	{
;;;3511   	ibt._avg_cnt--;
;;;3512   	}
;;;3513   
;;;3514   if(ibt._nd[3]==0)
;;;3515   	{
;;;3516   	ibt._avg1+=ibt._T[3];
;;;3517   	}
;;;3518   else 
;;;3519   	{
;;;3520   	ibt._avg_cnt--;
;;;3521   	}
;;;3522   
;;;3523   if(ibt._avg_cnt==0)
;;;3524   	{
;;;3525   	}
;;;3526   else
;;;3527   	{
;;;3528   	ibt._avg1/=ibt._avg_cnt;
;;;3529   	}
;;;3530   
;;;3531   
;;;3532   if(ibt._nd[0]!=0)
;;;3533   	{
;;;3534   	ibt._T_dispers[0]=0;
;;;3535   	}
;;;3536   else 
;;;3537   	{
;;;3538   	ibt._T_dispers[0]=abs(ibt._T[0]-ibt._avg1);
;;;3539   	}
;;;3540   
;;;3541   if(ibt._nd[1]!=0)
;;;3542   	{
;;;3543   	ibt._T_dispers[1]=0;
;;;3544   	}
;;;3545   else 
;;;3546   	{
;;;3547   	ibt._T_dispers[1]=abs(ibt._T[1]-ibt._avg1);
;;;3548   	}
;;;3549   
;;;3550   if(ibt._nd[2]!=0)
;;;3551   	{
;;;3552   	ibt._T_dispers[2]=0;
;;;3553   	}
;;;3554   else 
;;;3555   	{
;;;3556   	ibt._T_dispers[2]=abs(ibt._T[2]-ibt._avg1);
;;;3557   	}
;;;3558   
;;;3559   if(ibt._nd[3]!=0)
;;;3560   	{
;;;3561   	ibt._T_dispers[3]=0;
;;;3562   	}
;;;3563   else 
;;;3564   	{
;;;3565   	ibt._T_dispers[3]=abs(ibt._T[3]-ibt._avg1);
;;;3566   	}
;;;3567   
;;;3568   if(	ibt._nd[0]&&
;;;3569   	ibt._nd[1]&&
;;;3570   	ibt._nd[2]&&
;;;3571   	ibt._nd[3]
;;;3572   	)
;;;3573   	{
;;;3574   	t_box=(bps[0]._Ti);
;;;3575   	}
;;;3576   
;;;3577   else if(	ibt._nd[0]||
;;;3578   	ibt._nd[1]||
;;;3579   	ibt._nd[2]||
;;;3580   	ibt._nd[3]
;;;3581   	)
;;;3582   	{
;;;3583   	t_box=(ibt._avg1-273);
;;;3584   	}
;;;3585   else 
;;;3586   	{
;;;3587   	ibt._max_dispers_num=0;
;;;3588   	ibt._max_dispers=ibt._T_dispers[0];
;;;3589   
;;;3590   	if(ibt._T_dispers[1]>ibt._max_dispers)
;;;3591   		{
;;;3592   		ibt._max_dispers_num=1;
;;;3593   		ibt._max_dispers=ibt._T_dispers[1];
;;;3594   		}
;;;3595   	if(ibt._T_dispers[2]>ibt._max_dispers)
;;;3596   		{
;;;3597   		ibt._max_dispers_num=2;
;;;3598   		ibt._max_dispers=ibt._T_dispers[2];
;;;3599   		}
;;;3600   	if(ibt._T_dispers[3]>ibt._max_dispers)
;;;3601   		{
;;;3602   		ibt._max_dispers_num=3;
;;;3603   		ibt._max_dispers=ibt._T_dispers[3];
;;;3604   		}
;;;3605   
;;;3606   	ibt._avg2=0;
;;;3607   
;;;3608   	if(ibt._max_dispers_num!=0)
;;;3609   		{
;;;3610   		ibt._avg2+=ibt._T[0];
;;;3611   		}
;;;3612   	if(ibt._max_dispers_num!=1)
;;;3613   		{
;;;3614   		ibt._avg2+=ibt._T[1];
;;;3615   		}
;;;3616   	if(ibt._max_dispers_num!=2)
;;;3617   		{
;;;3618   		ibt._avg2+=ibt._T[2];
;;;3619   		}
;;;3620   	if(ibt._max_dispers_num!=3)
;;;3621   		{
;;;3622   		ibt._avg2+=ibt._T[3];
;;;3623   		}
;;;3624   
;;;3625   	t_box=(ibt._avg2/3)-273;
;;;3626   
;;;3627   	}*/
;;;3628   
;;;3629   
;;;3630   //*********************************************
;;;3631   
;;;3632   #ifndef TELECORE
;;;3633   if((BAT_IS_ON[0]==bisON)&&(bat[0]._Ub>200)) Ibmax=bat[0]._Ib;
003362  492c              LDR      r1,|L1.13332|
003364  7808              LDRB     r0,[r1,#0]  ; BAT_IS_ON
003366  2855              CMP      r0,#0x55
003368  d105              BNE      |L1.13174|
00336a  9801              LDR      r0,[sp,#4]
00336c  28c8              CMP      r0,#0xc8
00336e  dd02              BLE      |L1.13174|
003370  8910              LDRH     r0,[r2,#8]  ; bat
003372  f8a6004a          STRH     r0,[r6,#0x4a]
                  |L1.13174|
;;;3634   if((BAT_IS_ON[1]==bisON)&&(bat[1]._Ub>200)&&(bat[1]._Ib>bat[0]._Ib)) Ibmax=bat[1]._Ib;
003376  7848              LDRB     r0,[r1,#1]  ; BAT_IS_ON
003378  2855              CMP      r0,#0x55
00337a  d155              BNE      |L1.13352|
00337c  f9b2004e          LDRSH    r0,[r2,#0x4e]  ; bat
003380  28c8              CMP      r0,#0xc8
003382  dd51              BLE      |L1.13352|
003384  e048              B        |L1.13336|
003386  0000              DCW      0x0000
                  |L1.13192|
                          DCD      bat
                  |L1.13196|
                          DCD      Kuload
                  |L1.13200|
                          DCD      load_U
                  |L1.13204|
                          DCD      Kuout
                  |L1.13208|
                          DCD      AUSW_MAIN
                  |L1.13212|
                          DCD      out_U
                  |L1.13216|
                          DCD      Kubps
                  |L1.13220|
                          DCD      bps_U
                  |L1.13224|
                          DCD      NUMIST
                  |L1.13228|
                          DCD      bps
                  |L1.13232|
                          DCD      bps_I
                  |L1.13236|
                          DCD      ||.bss||+0x40c
                  |L1.13240|
                          DCD      ND_EXT
                  |L1.13244|
                          DCD      Ktext
                  |L1.13248|
                          DCD      t_ext
                  |L1.13252|
                          DCD      Ib_ips_termokompensat
                  |L1.13256|
                          DCD      ibat_metr_buff_
                  |L1.13260|
                          DCD      bIBAT_SMKLBR
                  |L1.13264|
                          DCD      bIBAT_SMKLBR_cnt
                  |L1.13268|
                          DCD      Kibat1
                  |L1.13272|
                          DCD      Ib_ips_termokompensat_temp
                  |L1.13276|
                          DCD      adc_buff_ext_
                  |L1.13280|
                          DCD      Kunet_ext
                  |L1.13284|
                          DCD      Uvv
                  |L1.13288|
                          DCD      Uvv0
                  |L1.13292|
                          DCD      net_U
                  |L1.13296|
                          DCD      eb2_data_short
                  |L1.13300|
                          DCD      Kvv_eb2
                  |L1.13304|
                          DCD      Uvv_eb2
                  |L1.13308|
                          DCD      Kpes_eb2
                  |L1.13312|
                          DCD      Upes_eb2
                  |L1.13316|
                          DCD      ibt
                  |L1.13320|
                          DCD      t_box
                  |L1.13324|
                          DCD      t_ext_can_nd
                  |L1.13328|
                          DCD      t_ext_can
                  |L1.13332|
                          DCD      BAT_IS_ON
                  |L1.13336|
003418  f9b20054          LDRSH    r0,[r2,#0x54]  ; bat
00341c  f9b21008          LDRSH    r1,[r2,#8]  ; bat
003420  4288              CMP      r0,r1
003422  dd01              BLE      |L1.13352|
003424  f8a6004a          STRH     r0,[r6,#0x4a]
                  |L1.13352|
;;;3635   #endif
;;;3636   
;;;3637   #ifdef TELECORE
;;;3638   Ibmax=0;
;;;3639   /*
;;;3640   if((NUMBAT_TELECORE>0)&&(lakb[0]._communicationFullErrorStat==0)&&(lakb[0]._ch_curr/10>Ibmax))Ibmax=lakb[0]._ch_curr/10;
;;;3641   if((NUMBAT_TELECORE>1)&&(lakb[1]._communicationFullErrorStat==0)&&(lakb[1]._ch_curr/10>Ibmax))Ibmax=lakb[1]._ch_curr/10;
;;;3642   if((NUMBAT_TELECORE>2)&&(lakb[2]._communicationFullErrorStat==0)&&(lakb[2]._ch_curr/10>Ibmax))Ibmax=lakb[2]._ch_curr/10;
;;;3643   */
;;;3644   if((NUMBAT_TELECORE>0)&&(bat[0]._Ib/10>Ibmax))Ibmax=bat[0]._Ib/10;
;;;3645   if((NUMBAT_TELECORE>1)&&(bat[1]._Ib/10>Ibmax))Ibmax=bat[1]._Ib/10;
;;;3646   //if((BAT_IS_ON[0]==bisON)&&(bat[0]._Ub>200)) Ibmax=bat[0]._Ib/1;
;;;3647   //if((BAT_IS_ON[1]==bisON)&&(bat[1]._Ub>200)&&(bat[1]._Ib>bat[0]._Ib)) Ibmax=bat[1]._Ib;
;;;3648   #endif
;;;3649   //Ibmax=bat[0]._Ib;
;;;3650   //if((AUSW_MAIN==22063)||(AUSW_MAIN==22023)||(AUSW_MAIN==22043))Ibmax=Ib_ips_termokompensat;
;;;3651   
;;;3652   #ifdef UKU_TELECORE2017
;;;3653   Ibmax=0;
;;;3654   if((NUMBAT_TELECORE>0)&&(bat[0]._Ib/10>Ibmax))Ibmax=bat[0]._Ib/10;
;;;3655   if((NUMBAT_TELECORE>1)&&(bat[1]._Ib/10>Ibmax))Ibmax=bat[1]._Ib/10;
;;;3656   #endif
;;;3657   
;;;3658   #ifdef UKU_220_IPS_TERMOKOMPENSAT
;;;3659   Ibmax=Ib_ips_termokompensat;
003428  f8b90000          LDRH     r0,[r9,#0]  ; Ib_ips_termokompensat
00342c  f8a6004a          STRH     r0,[r6,#0x4a]
;;;3660   #endif
;;;3661   for(i=0;i<NUMIST;i++)
003430  f04f0100          MOV      r1,#0
003434  e02f              B        |L1.13462|
                  |L1.13366|
;;;3662   	{
;;;3663   	if(bps[i]._cnt<25)
003436  eb0100c1          ADD      r0,r1,r1,LSL #3
00343a  eb001001          ADD      r0,r0,r1,LSL #4
00343e  eb040080          ADD      r0,r4,r0,LSL #2
003442  78c5              LDRB     r5,[r0,#3]
003444  2d19              CMP      r5,#0x19
003446  d21c              BCS      |L1.13442|
;;;3664        	{
;;;3665        	bps[i]._Ii=bps[i]._buff[0]+(bps[i]._buff[1]*256);
003448  7985              LDRB     r5,[r0,#6]
00344a  79c6              LDRB     r6,[r0,#7]
00344c  eb052506          ADD      r5,r5,r6,LSL #8
003450  6245              STR      r5,[r0,#0x24]
;;;3666        	bps[i]._Uin=bps[i]._buff[2]+(bps[i]._buff[3]*256);
003452  7a05              LDRB     r5,[r0,#8]
003454  7a46              LDRB     r6,[r0,#9]
003456  eb052506          ADD      r5,r5,r6,LSL #8
00345a  6205              STR      r5,[r0,#0x20]
;;;3667        	bps[i]._Uii=bps[i]._buff[4]+(bps[i]._buff[5]*256);
00345c  7a85              LDRB     r5,[r0,#0xa]
00345e  7ac6              LDRB     r6,[r0,#0xb]
003460  eb052506          ADD      r5,r5,r6,LSL #8
003464  61c5              STR      r5,[r0,#0x1c]
;;;3668        	bps[i]._Ti=(signed)(bps[i]._buff[6]);
003466  7b05              LDRB     r5,[r0,#0xc]
003468  6285              STR      r5,[r0,#0x28]
;;;3669        	bps[i]._adr_ee=bps[i]._buff[7];
00346a  7b45              LDRB     r5,[r0,#0xd]
00346c  f8805056          STRB     r5,[r0,#0x56]
;;;3670        	bps[i]._flags_tm=bps[i]._buff[8];
003470  7b85              LDRB     r5,[r0,#0xe]
003472  f8805042          STRB     r5,[r0,#0x42]
;;;3671   	    bps[i]._rotor=bps[i]._buff[10]+(bps[i]._buff[11]*256);    
003476  7c05              LDRB     r5,[r0,#0x10]
003478  7c46              LDRB     r6,[r0,#0x11]
00347a  eb052506          ADD      r5,r5,r6,LSL #8
00347e  6505              STR      r5,[r0,#0x50]
003480  e006              B        |L1.13456|
                  |L1.13442|
;;;3672        	} 
;;;3673   	else 
;;;3674        	{
;;;3675        	bps[i]._Uii=0; 
003482  61c3              STR      r3,[r0,#0x1c]
;;;3676        	bps[i]._Ii=0;
003484  6243              STR      r3,[r0,#0x24]
;;;3677        	bps[i]._Uin=0;
003486  6203              STR      r3,[r0,#0x20]
;;;3678        	bps[i]._Ti=0;
003488  6283              STR      r3,[r0,#0x28]
;;;3679        	bps[i]._flags_tm=0; 
00348a  f8803042          STRB     r3,[r0,#0x42]
;;;3680   	     bps[i]._rotor=0;    
00348e  6503              STR      r3,[r0,#0x50]
                  |L1.13456|
003490  f1010101          ADD      r1,r1,#1              ;3661
003494  b2c9              UXTB     r1,r1                 ;3661
                  |L1.13462|
003496  42b9              CMP      r1,r7                 ;3661
003498  dbcd              BLT      |L1.13366|
;;;3681        	}
;;;3682        
;;;3683        }
;;;3684   
;;;3685   load_I=0;
00349a  4dfc              LDR      r5,|L1.14476|
;;;3686   #ifdef TELECORE
;;;3687   
;;;3688   /*for(i=0;i<NUMBAT_TELECORE;i++)
;;;3689   	{
;;;3690   	load_I-=lakb[i]._ch_curr/10;
;;;3691   	}*/
;;;3692   load_I=-(bat[0]._Ib/10)-(bat[1]._Ib/10);
;;;3693   #elif UKU_TELECORE2017
;;;3694   load_I=-(bat[0]._Ib/10)-(bat[1]._Ib/10);
;;;3695   #else
;;;3696   load_I=-(bat[0]._Ib/10)-(bat[1]._Ib/10);
00349c  f9b21008          LDRSH    r1,[r2,#8]  ; bat
0034a0  f04f000a          MOV      r0,#0xa
0034a4  fb91f1f0          SDIV     r1,r1,r0
0034a8  f9b22054          LDRSH    r2,[r2,#0x54]  ; bat
0034ac  fb92f0f0          SDIV     r0,r2,r0
0034b0  4408              ADD      r0,r0,r1
0034b2  f1c00000          RSB      r0,r0,#0
0034b6  b206              SXTH     r6,r0
0034b8  802e              STRH     r6,[r5,#0]
;;;3697   #endif
;;;3698   Isumm=0;
0034ba  4af5              LDR      r2,|L1.14480|
0034bc  8013              STRH     r3,[r2,#0]
;;;3699   
;;;3700   for(i=0;i<NUMIST;i++)
0034be  f04f0000          MOV      r0,#0
0034c2  e012              B        |L1.13546|
                  |L1.13508|
;;;3701        {
;;;3702        if(bps[i]._cnt<5)Isumm+=bps[i]._Ii;
0034c4  eb0001c0          ADD      r1,r0,r0,LSL #3
0034c8  eb011100          ADD      r1,r1,r0,LSL #4
0034cc  eb040181          ADD      r1,r4,r1,LSL #2
0034d0  f891c003          LDRB     r12,[r1,#3]
0034d4  f1bc0f05          CMP      r12,#5
0034d8  d204              BCS      |L1.13540|
0034da  6a49              LDR      r1,[r1,#0x24]
0034dc  f8b2c000          LDRH     r12,[r2,#0]  ; Isumm
0034e0  4461              ADD      r1,r1,r12
0034e2  8011              STRH     r1,[r2,#0]
                  |L1.13540|
0034e4  f1000001          ADD      r0,r0,#1              ;3700
0034e8  b2c0              UXTB     r0,r0                 ;3700
                  |L1.13546|
0034ea  42b8              CMP      r0,r7                 ;3700
0034ec  dbea              BLT      |L1.13508|
;;;3703        }  
;;;3704        
;;;3705   load_I=load_I+Isumm;
0034ee  8810              LDRH     r0,[r2,#0]  ; Isumm
0034f0  4430              ADD      r0,r0,r6
0034f2  b200              SXTH     r0,r0
0034f4  8028              STRH     r0,[r5,#0]
;;;3706   if(load_I<0)load_I=0;
0034f6  2800              CMP      r0,#0
0034f8  da00              BGE      |L1.13564|
0034fa  802b              STRH     r3,[r5,#0]
                  |L1.13564|
;;;3707   
;;;3708   #ifdef UKU_220_IPS_TERMOKOMPENSAT
;;;3709   load_I=0;
0034fc  802b              STRH     r3,[r5,#0]
;;;3710   
;;;3711   Isumm=0;
0034fe  8013              STRH     r3,[r2,#0]
;;;3712   
;;;3713   for(i=0;i<NUMIST;i++)
003500  f04f0000          MOV      r0,#0
003504  e00f              B        |L1.13606|
                  |L1.13574|
;;;3714        {
;;;3715        if(bps[i]._cnt<5)Isumm+=bps[i]._Ii;
003506  eb0001c0          ADD      r1,r0,r0,LSL #3
00350a  eb011100          ADD      r1,r1,r0,LSL #4
00350e  eb040181          ADD      r1,r4,r1,LSL #2
003512  78ce              LDRB     r6,[r1,#3]
003514  2e05              CMP      r6,#5
003516  d203              BCS      |L1.13600|
003518  6a49              LDR      r1,[r1,#0x24]
00351a  8816              LDRH     r6,[r2,#0]  ; Isumm
00351c  4431              ADD      r1,r1,r6
00351e  8011              STRH     r1,[r2,#0]
                  |L1.13600|
003520  f1000001          ADD      r0,r0,#1              ;3713
003524  b2c0              UXTB     r0,r0                 ;3713
                  |L1.13606|
003526  42b8              CMP      r0,r7                 ;3713
003528  dbed              BLT      |L1.13574|
;;;3716        }  
;;;3717        
;;;3718   load_I=load_I+Isumm;
00352a  8811              LDRH     r1,[r2,#0]  ; Isumm
00352c  eb030001          ADD      r0,r3,r1
003530  b200              SXTH     r0,r0
003532  8028              STRH     r0,[r5,#0]
;;;3719   if(load_I<0)load_I=0;
003534  2800              CMP      r0,#0
003536  da00              BGE      |L1.13626|
003538  802b              STRH     r3,[r5,#0]
                  |L1.13626|
;;;3720   
;;;3721   #endif
;;;3722   #ifdef IPS_SGEP_GAZPROM
;;;3723   load_I=Isumm;
;;;3724   #endif
;;;3725   
;;;3726   
;;;3727   #ifdef UKU_GLONASS
;;;3728   inv[0]._Uio=6;
;;;3729   if (NUMINV)
;;;3730   	{
;;;3731   	for(i=0;i<NUMINV;i++)
;;;3732   		{
;;;3733   		if(bps[i+first_inv_slot]._cnt<25)
;;;3734        		{
;;;3735        		inv[i]._Ii=bps[i+first_inv_slot]._buff[0]+(bps[i+first_inv_slot]._buff[1]*256);
;;;3736        		inv[i]._Uin=bps[i+first_inv_slot]._buff[2]+(bps[i+first_inv_slot]._buff[3]*256);
;;;3737        		inv[i]._Uio=bps[i+first_inv_slot]._buff[4]+(bps[i+first_inv_slot]._buff[5]*256);
;;;3738        		inv[i]._Ti=(signed)(bps[i+first_inv_slot]._buff[6]);
;;;3739        		inv[i]._flags_tm=bps[i+first_inv_slot]._buff[8];
;;;3740   	    	//	inv[i]._rotor=bps[i+first_inv_slot]._buff[10]+(bps[i+first_inv_slot]._buff[11]*256);
;;;3741   			inv[i]._cnt=0;    
;;;3742        		} 
;;;3743   		else 
;;;3744        		{
;;;3745        		inv[i]._Uio=0; 
;;;3746        		inv[i]._Ii=0;
;;;3747        		inv[i]._Uin=0;
;;;3748        		inv[i]._Ti=0;
;;;3749        		inv[i]._flags_tm=0; 
;;;3750   //	     	inv[i]._rotor0;
;;;3751   			inv[i]._cnt=25;    
;;;3752        		}
;;;3753        	}
;;;3754      	}
;;;3755   #endif
;;;3756   
;;;3757   #ifndef UKU_GLONASS
;;;3758   if (NUMINV)
00353a  48d6              LDR      r0,|L1.14484|
00353c  f9b05000          LDRSH    r5,[r0,#0]  ; NUMINV
003540  2d00              CMP      r5,#0
003542  d066              BEQ      |L1.13842|
;;;3759   	{
;;;3760   	for(i=0;i<NUMINV;i++)
003544  f04f0200          MOV      r2,#0
;;;3761   		{
;;;3762   		if(bps[i+20]._cnt<25)
;;;3763        		{
;;;3764        		inv[i]._Ii=bps[i+20]._buff[0]+(bps[i+20]._buff[1]*256);
003548  4ed3              LDR      r6,|L1.14488|
00354a  e060              B        |L1.13838|
                  |L1.13644|
00354c  f1020014          ADD      r0,r2,#0x14           ;3762
003550  eb0001c0          ADD      r1,r0,r0,LSL #3       ;3762
003554  eb011000          ADD      r0,r1,r0,LSL #4       ;3762
003558  eb040080          ADD      r0,r4,r0,LSL #2       ;3762
00355c  78c1              LDRB     r1,[r0,#3]            ;3762
00355e  2919              CMP      r1,#0x19              ;3762
003560  d239              BCS      |L1.13782|
003562  7981              LDRB     r1,[r0,#6]
003564  79c7              LDRB     r7,[r0,#7]
003566  eb012707          ADD      r7,r1,r7,LSL #8
00356a  eb020142          ADD      r1,r2,r2,LSL #1
00356e  eb061141          ADD      r1,r6,r1,LSL #5
003572  61cf              STR      r7,[r1,#0x1c]
;;;3765        		inv[i]._Pio=bps[i+20]._buff[2]+(bps[i+20]._buff[3]*256);
003574  7a07              LDRB     r7,[r0,#8]
003576  f890c009          LDRB     r12,[r0,#9]
00357a  eb07270c          ADD      r7,r7,r12,LSL #8
00357e  62cf              STR      r7,[r1,#0x2c]
;;;3766        		inv[i]._Uio=bps[i+20]._buff[4]+(bps[i+20]._buff[5]*256);
003580  7a87              LDRB     r7,[r0,#0xa]
003582  f890c00b          LDRB     r12,[r0,#0xb]
003586  eb07270c          ADD      r7,r7,r12,LSL #8
00358a  618f              STR      r7,[r1,#0x18]
;;;3767        		inv[i]._Ti=(signed)(bps[i+20]._buff[6]);
00358c  7b07              LDRB     r7,[r0,#0xc]
00358e  620f              STR      r7,[r1,#0x20]
;;;3768        		inv[i]._flags_tm=bps[i+20]._buff[7];
003590  7b47              LDRB     r7,[r0,#0xd]
003592  f8817046          STRB     r7,[r1,#0x46]
;;;3769        		inv[i]._Uin=bps[i+20]._buff[8]+(bps[i+20]._buff[9]*256);
003596  7b87              LDRB     r7,[r0,#0xe]
003598  f890c00f          LDRB     r12,[r0,#0xf]
00359c  eb07270c          ADD      r7,r7,r12,LSL #8
0035a0  628f              STR      r7,[r1,#0x28]
;;;3770        		inv[i]._Uil=bps[i+20]._buff[10]+(bps[i+20]._buff[11]*256);
0035a2  7c07              LDRB     r7,[r0,#0x10]
0035a4  f890c011          LDRB     r12,[r0,#0x11]
0035a8  eb07270c          ADD      r7,r7,r12,LSL #8
0035ac  624f              STR      r7,[r1,#0x24]
;;;3771   			inv[i]._cnt=0;
0035ae  708b              STRB     r3,[r1,#2]
;;;3772   			inv[i]._Uoutmin=bps[i+20]._buff[12]; 
0035b0  7c87              LDRB     r7,[r0,#0x12]
0035b2  f8817059          STRB     r7,[r1,#0x59]
;;;3773   			inv[i]._Uoutmax=bps[i+20]._buff[13]; 
0035b6  7cc7              LDRB     r7,[r0,#0x13]
0035b8  f881705a          STRB     r7,[r1,#0x5a]
;;;3774   			inv[i]._Pnom=bps[i+20]._buff[14]; 
0035bc  7d07              LDRB     r7,[r0,#0x14]
0035be  f8817058          STRB     r7,[r1,#0x58]
;;;3775   			inv[i]._net_contr_en=bps[i+20]._buff[15];
0035c2  7d47              LDRB     r7,[r0,#0x15]
0035c4  f881705b          STRB     r7,[r1,#0x5b]
;;;3776   			inv[i]._pwm_en=bps[i+20]._buff[16];  
0035c8  7d87              LDRB     r7,[r0,#0x16]
0035ca  f881705c          STRB     r7,[r1,#0x5c]
;;;3777   			inv[i]._phase_mode=bps[i+20]._buff[17];  
0035ce  7dc0              LDRB     r0,[r0,#0x17]
0035d0  f881005d          STRB     r0,[r1,#0x5d]
0035d4  e018              B        |L1.13832|
                  |L1.13782|
;;;3778        		} 
;;;3779   		else 
;;;3780        		{
;;;3781         		inv[i]._Ii=0;
0035d6  eb020042          ADD      r0,r2,r2,LSL #1
0035da  eb061040          ADD      r0,r6,r0,LSL #5
0035de  61c3              STR      r3,[r0,#0x1c]
;;;3782   			inv[i]._Pio=0;
0035e0  62c3              STR      r3,[r0,#0x2c]
;;;3783   			inv[i]._Uio=0;
0035e2  6183              STR      r3,[r0,#0x18]
;;;3784        		inv[i]._Ti=0;
0035e4  6203              STR      r3,[r0,#0x20]
;;;3785        		inv[i]._flags_tm=0; 
0035e6  f8803046          STRB     r3,[r0,#0x46]
;;;3786        		inv[i]._Uil=0;
0035ea  6243              STR      r3,[r0,#0x24]
;;;3787        		inv[i]._Uin=0;
0035ec  6283              STR      r3,[r0,#0x28]
;;;3788   			inv[i]._cnt=25; 
0035ee  f04f0119          MOV      r1,#0x19
0035f2  7081              STRB     r1,[r0,#2]
;;;3789   			inv[i]._Uoutmin=0; 
0035f4  f8803059          STRB     r3,[r0,#0x59]
;;;3790   			inv[i]._Uoutmax=0; 
0035f8  f880305a          STRB     r3,[r0,#0x5a]
;;;3791   			inv[i]._Pnom=0; 
0035fc  f8803058          STRB     r3,[r0,#0x58]
;;;3792   			inv[i]._net_contr_en=0;
003600  f880305b          STRB     r3,[r0,#0x5b]
;;;3793   			inv[i]._pwm_en=0;   
003604  f880305c          STRB     r3,[r0,#0x5c]
                  |L1.13832|
003608  f1020201          ADD      r2,r2,#1              ;3760
00360c  b2d2              UXTB     r2,r2                 ;3760
                  |L1.13838|
00360e  42aa              CMP      r2,r5                 ;3760
003610  db9c              BLT      |L1.13644|
                  |L1.13842|
;;;3794   			   
;;;3795        		}
;;;3796        	}
;;;3797      	}
;;;3798   #endif
;;;3799   
;;;3800   #ifdef GLADKOV
;;;3801   inv[0]._Ii=bps[4]._buff[0]+(bps[4]._buff[1]*256);
;;;3802   inv[0]._Pio=bps[4]._buff[2]+(bps[4]._buff[3]*256);
;;;3803   inv[0]._Uio=bps[4]._buff[4]+(bps[4]._buff[5]*256);
;;;3804   inv[0]._Ti=(signed)(bps[4]._buff[6]);
;;;3805   inv[0]._flags_tm=bps[4]._buff[7];
;;;3806   inv[0]._Uin=bps[4]._buff[8]+(bps[4]._buff[9]*256);
;;;3807   inv[0]._Uil=bps[4]._buff[10]+(bps[4]._buff[11]*256);
;;;3808   inv[0]._cnt=0;    
;;;3809   
;;;3810   inv[1]._Ii=bps[21]._buff[0]+(bps[21]._buff[1]*256);
;;;3811   inv[1]._Pio=bps[21]._buff[2]+(bps[21]._buff[3]*256);
;;;3812   inv[1]._Uio=bps[21]._buff[4]+(bps[21]._buff[5]*256);
;;;3813   inv[1]._Ti=(signed)(bps[21]._buff[6]);
;;;3814   inv[1]._flags_tm=bps[21]._buff[7];
;;;3815   inv[1]._Uin=bps[21]._buff[8]+(bps[21]._buff[9]*256);
;;;3816   inv[1]._Uil=bps[21]._buff[10]+(bps[21]._buff[11]*256);
;;;3817   inv[1]._cnt=0;    
;;;3818   #endif
;;;3819   
;;;3820   /*
;;;3821   if((BAT_IS_ON[0]==bisON)&&(BAT_TYPE==1))
;;;3822   	{
;;;3823   	lakb[0]._battCommState=0;
;;;3824   	if(lakb[0]._cnt>10)lakb[0]._battCommState=2;
;;;3825   	else if(lakb[0]._bRS485ERR==1)lakb[0]._battCommState=1;
;;;3826   	
;;;3827   	if(lakb[0]._battCommState==0)
;;;3828   		{	
;;;3829   		bat[0]._Ub=(signed short)((lakb[0]._tot_bat_volt+5)/10);
;;;3830   		bat[0]._Ib=(signed short)lakb[0]._ch_curr;
;;;3831   		if(lakb[0]._dsch_curr) bat[0]._Ib=(signed short) (-lakb[0]._dsch_curr);
;;;3832   		bat[0]._Tb=(signed short)lakb[0]._max_cell_temp;
;;;3833   		}
;;;3834   	}
;;;3835   */
;;;3836   
;;;3837   #ifdef UKU_TELECORE2015
;;;3838   
;;;3839   	if(BAT_TYPE==2)
;;;3840   		{
;;;3841   		lakb[0]._ch_curr/*temp_SS*/=((ascii2halFhex(liBatteryInBuff[113]))<<12)+
;;;3842   					 		((ascii2halFhex(liBatteryInBuff[114]))<<8)+
;;;3843   							((ascii2halFhex(liBatteryInBuff[115]))<<4)+
;;;3844   							((ascii2halFhex(liBatteryInBuff[116])));
;;;3845   		
;;;3846   		/*if(temp_SS&0x8000)		lakb[0]._ch_curr=~temp_SS;
;;;3847   		else 				lakb[0]._ch_curr=temp_SS;*/
;;;3848   	
;;;3849   		lakb[0]._tot_bat_volt=	(unsigned short)(((ascii2halFhex(liBatteryInBuff[117]))<<12)+
;;;3850   							((ascii2halFhex(liBatteryInBuff[118]))<<8)+
;;;3851   							((ascii2halFhex(liBatteryInBuff[119]))<<4)+
;;;3852   							((ascii2halFhex(liBatteryInBuff[120]))))/100;
;;;3853   	
;;;3854   		lakb[0]._max_cell_temp= 	(((ascii2halFhex(liBatteryInBuff[93]))<<12)+
;;;3855   							((ascii2halFhex(liBatteryInBuff[94]))<<8)+
;;;3856   							((ascii2halFhex(liBatteryInBuff[95]))<<4)+
;;;3857   							((ascii2halFhex(liBatteryInBuff[96]))))/10-273;
;;;3858   	
;;;3859   		lakb[0]._s_o_c_abs=		(unsigned short)((ascii2halFhex(liBatteryInBuff[121]))<<12)+
;;;3860   							((ascii2halFhex(liBatteryInBuff[122]))<<8)+
;;;3861   							((ascii2halFhex(liBatteryInBuff[123]))<<4)+
;;;3862   							((ascii2halFhex(liBatteryInBuff[124])));
;;;3863   	
;;;3864   		lakb[0]._rat_cap=		(unsigned short)((ascii2halFhex(liBatteryInBuff[127]))<<12)+
;;;3865   							((ascii2halFhex(liBatteryInBuff[128]))<<8)+
;;;3866   							((ascii2halFhex(liBatteryInBuff[129]))<<4)+
;;;3867   							((ascii2halFhex(liBatteryInBuff[130])));
;;;3868   	
;;;3869   		lakb[0]._s_o_c=		lakb[0]._s_o_c_abs/(lakb[0]._rat_cap/100);
;;;3870   	
;;;3871   	
;;;3872   	/*	lakb[0]._rat_cap= (lakb_damp[i][13]*256)+ lakb_damp[i][14];
;;;3873   		lakb[0]._max_cell_volt= (lakb_damp[i][0]*256)+ lakb_damp[i][1];
;;;3874   		lakb[0]._min_cell_volt= (lakb_damp[i][2]*256)+ lakb_damp[i][3];
;;;3875   		lakb[0]._max_cell_temp= lakb_damp[i][4];
;;;3876   		lakb[0]._min_cell_temp= lakb_damp[i][5];
;;;3877   		lakb[0]._tot_bat_volt= (lakb_damp[i][6]*256)+ lakb_damp[i][7];
;;;3878   		lakb[0]._ch_curr= (lakb_damp[i][8]*256)+ lakb_damp[i][8];
;;;3879   		lakb[0]._dsch_curr= (lakb_damp[i][10]*256)+ lakb_damp[i][11];
;;;3880   		lakb[0]._s_o_c= lakb_damp[i][12];
;;;3881   		lakb[0]._r_b_t= lakb_damp[i][15];
;;;3882   		lakb[0]._c_c_l_v= (lakb_damp[i][16]*256)+ lakb_damp[i][17];
;;;3883   		lakb[0]._s_o_h= lakb_damp[i][18];
;;;3884   	
;;;3885   		if(lakb[i]._rat_cap==0)
;;;3886   			{
;;;3887   			if(lakb[i]._isOnCnt)
;;;3888   				{
;;;3889   				lakb[i]._isOnCnt--;
;;;3890   				if(lakb[i]._isOnCnt==0)
;;;3891   					{
;;;3892   					if(lakb[i]._battIsOn!=0) bLAKB_KONF_CH=1;
;;;3893   					}
;;;3894   				}
;;;3895   			}
;;;3896   		else 
;;;3897   			{
;;;3898   			if(lakb[i]._isOnCnt<50)
;;;3899   				{
;;;3900   				lakb[i]._isOnCnt++;
;;;3901   				if(lakb[i]._isOnCnt==50)
;;;3902   					{
;;;3903   					if(lakb[i]._battIsOn!=1) bLAKB_KONF_CH=1;
;;;3904   					}
;;;3905   				}
;;;3906   			}
;;;3907   		gran(&lakb[i]._isOnCnt,0,50);*/
;;;3908   		}
;;;3909   	else if(BAT_TYPE==3)
;;;3910   		{
;;;3911   		//short numOfPacks;
;;;3912   		//short numOfCells, numOfTemperCells, baseOfData;
;;;3913   		
;;;3914   		#ifndef UKU_TELECORE2016
;;;3915   		numOfCells=((ascii2halFhex(liBatteryInBuff[17]))<<4)+((ascii2halFhex(liBatteryInBuff[18])));
;;;3916   		numOfTemperCells=((ascii2halFhex(liBatteryInBuff[17+(numOfCells*4)+2]))<<4)+((ascii2halFhex(liBatteryInBuff[18+(numOfCells*4)+2])));
;;;3917   		numOfPacks=((ascii2halFhex(liBatteryInBuff[15]))<<4)+((ascii2halFhex(liBatteryInBuff[16])));
;;;3918   		if(numOfPacks)numOfPacks-=1;
;;;3919   		if((numOfPacks<0)||(numOfPacks>NUMBAT_TELECORE))numOfPacks=0;
;;;3920   		plazma_numOfCells=numOfCells;
;;;3921   		plazma_numOfTemperCells=numOfTemperCells;
;;;3922   		plazma_numOfPacks=numOfPacks;
;;;3923   
;;;3924   
;;;3925   		baseOfData=16+(numOfCells*4)+2+(numOfTemperCells*4)+2;
;;;3926   
;;;3927   		lakb[numOfPacks]._ch_curr=(signed short)(
;;;3928   							((ascii2halFhex(liBatteryInBuff[1+baseOfData]))<<12)+
;;;3929   							((ascii2halFhex(liBatteryInBuff[2+baseOfData]))<<8)+
;;;3930   							((ascii2halFhex(liBatteryInBuff[3+baseOfData]))<<4)+
;;;3931   							((ascii2halFhex(liBatteryInBuff[4+baseOfData])))
;;;3932   							);	  
;;;3933   
;;;3934   		lakb[numOfPacks]._tot_bat_volt=(signed short)(
;;;3935   							((ascii2halFhex(liBatteryInBuff[1+baseOfData+4]))<<12)+
;;;3936   							((ascii2halFhex(liBatteryInBuff[2+baseOfData+4]))<<8)+
;;;3937   							((ascii2halFhex(liBatteryInBuff[3+baseOfData+4]))<<4)+
;;;3938   							((ascii2halFhex(liBatteryInBuff[4+baseOfData+4])))
;;;3939   							)/10;
;;;3940   
;;;3941   		lakb[numOfPacks]._max_cell_temp=(signed short)(
;;;3942   							((ascii2halFhex(liBatteryInBuff[1+baseOfData-4]))<<12)+
;;;3943   							((ascii2halFhex(liBatteryInBuff[2+baseOfData-4]))<<8)+
;;;3944   							((ascii2halFhex(liBatteryInBuff[3+baseOfData-4]))<<4)+
;;;3945   							((ascii2halFhex(liBatteryInBuff[4+baseOfData-4])))
;;;3946   							)-2730;
;;;3947   
;;;3948   		lakb[numOfPacks]._s_o_c=(signed short)(
;;;3949   							((ascii2halFhex(liBatteryInBuff[1+baseOfData+8]))<<12)+
;;;3950   							((ascii2halFhex(liBatteryInBuff[2+baseOfData+8]))<<8)+
;;;3951   							((ascii2halFhex(liBatteryInBuff[3+baseOfData+8]))<<4)+
;;;3952   							((ascii2halFhex(liBatteryInBuff[4+baseOfData+8])))
;;;3953   							)/10;
;;;3954   
;;;3955   		lakb[numOfPacks]._s_o_h=(signed short)(
;;;3956   							((ascii2halFhex(liBatteryInBuff[1+baseOfData+14]))<<12)+
;;;3957   							((ascii2halFhex(liBatteryInBuff[2+baseOfData+14]))<<8)+
;;;3958   							((ascii2halFhex(liBatteryInBuff[3+baseOfData+14]))<<4)+
;;;3959   							((ascii2halFhex(liBatteryInBuff[4+baseOfData+14])))
;;;3960   							)/10;
;;;3961   		#endif
;;;3962   		
;;;3963   		#ifdef UKU_TELECORE2016
;;;3964   		{
;;;3965   		char i;
;;;3966   		
;;;3967   		for(i=0;i<NUMBAT_TELECORE;i++)
;;;3968   			{
;;;3969   			lakb[i]._s_o_c_percent= (signed short)(((unsigned long)lakb[i]._s_o_c*100UL)/(unsigned long)lakb[i]._s_o_h);
;;;3970   			}
;;;3971   		}
;;;3972   		#endif
;;;3973   		
;;;3974   										  
;;;3975   		}
;;;3976   	
;;;3977   if(sacredSunSilentCnt<3) 
;;;3978   	{
;;;3979       	bat[0]._Ub=lakb[0]._tot_bat_volt;
;;;3980       	bat[0]._Tb=lakb[0]._max_cell_temp;
;;;3981      	//bat[0]._Ib=lakb[0]._ch_curr/10;
;;;3982   	}
;;;3983   else 
;;;3984   	{
;;;3985       	//bat[0]._Ub=0;
;;;3986       	//bat[0]._Tb=0;
;;;3987      	//bat[0]._Ib=0;
;;;3988   	}
;;;3989   
;;;3990   if(BAT_TYPE==1)
;;;3991   	{
;;;3992   	char i;
;;;3993   	for(i=0;i<1;i++)
;;;3994   		{
;;;3995   		lakb[i]._rat_cap= (lakb_damp[i][13]*256)+ lakb_damp[i][14];
;;;3996   		lakb[i]._max_cell_volt= (lakb_damp[i][0]*256)+ lakb_damp[i][1];
;;;3997   		lakb[i]._min_cell_volt= (lakb_damp[i][2]*256)+ lakb_damp[i][3];
;;;3998   		lakb[i]._max_cell_temp= lakb_damp[i][4];
;;;3999   		lakb[i]._min_cell_temp= lakb_damp[i][5];
;;;4000   		lakb[i]._tot_bat_volt= (lakb_damp[i][6]*256)+ lakb_damp[i][7];
;;;4001   		lakb[i]._ch_curr= (lakb_damp[i][8]*256)+ lakb_damp[i][9];
;;;4002   		lakb[i]._dsch_curr= (lakb_damp[i][10]*256)+ lakb_damp[i][11];
;;;4003   		lakb[i]._s_o_c= lakb_damp[i][12];
;;;4004   		lakb[i]._r_b_t= lakb_damp[i][15];
;;;4005   		lakb[i]._c_c_l_v= (lakb_damp[i][16]*256)+ lakb_damp[i][17];
;;;4006   		lakb[i]._s_o_h= lakb_damp[i][18];
;;;4007   		lakb[i]._flags1= lakb_damp[i][34];
;;;4008   		lakb[i]._flags2= lakb_damp[i][35];
;;;4009   		lakb[i]._b_p_ser_num= lakb_damp[i][36];
;;;4010   
;;;4011   /*		if(lakb[i]._rat_cap==0)
;;;4012   			{
;;;4013   			if(lakb[i]._isOnCnt)
;;;4014   				{
;;;4015   				lakb[i]._isOnCnt--;
;;;4016   				if(lakb[i]._isOnCnt==0)
;;;4017   					{
;;;4018   					if(lakb[i]._battIsOn!=0) bLAKB_KONF_CH=1;
;;;4019   					}
;;;4020   				}
;;;4021   			}
;;;4022   		else 
;;;4023   			{
;;;4024   			if(lakb[i]._isOnCnt<50)
;;;4025   				{
;;;4026   				lakb[i]._isOnCnt++;
;;;4027   				if(lakb[i]._isOnCnt==50)
;;;4028   					{
;;;4029   					if(lakb[i]._battIsOn!=1) bLAKB_KONF_CH=1;
;;;4030   					}
;;;4031   				}
;;;4032   			} */
;;;4033   		gran(&lakb[i]._isOnCnt,0,50);
;;;4034   	 	}
;;;4035   
;;;4036   	if(lakb_damp[0][41]==100)
;;;4037   		{
;;;4038   		li_bat._485Error=1;
;;;4039   		}
;;;4040   	if(lakb_damp[0][41]==0)
;;;4041   		{
;;;4042   		//if(bRS485ERR)bLAKB_KONF_CH=1;
;;;4043   		li_bat._485Error=0;
;;;4044   		}
;;;4045   	li_bat._485ErrorCnt=lakb_damp[0][41];
;;;4046   
;;;4047   
;;;4048   	}
;;;4049   
;;;4050   
;;;4051   #endif
;;;4052   
;;;4053   		#ifdef UKU_TELECORE2017
;;;4054   		{
;;;4055   		char i;
;;;4056   		
;;;4057   		for(i=0;i<NUMBAT_TELECORE;i++)
;;;4058   			{
;;;4059   			lakb[i]._s_o_c_percent= (signed short)(((unsigned long)lakb[i]._s_o_c*100UL)/(unsigned long)lakb[i]._s_o_h);
;;;4060   			}
;;;4061   		}
;;;4062   		#endif
;;;4063   #ifdef UKU_TELECORE2015
;;;4064   //вычисление параметров работы батареи
;;;4065   //TODO дописать для всех батарей все параметры и при отцепке батарей
;;;4066   li_bat._batStat=bsOK;
;;;4067   if(BAT_TYPE==1) //COSLIGHT
;;;4068   	{
;;;4069   	if(li_bat._batStat==bsOK)
;;;4070   		{
;;;4071   		li_bat._Ub=lakb[0]._tot_bat_volt/10;
;;;4072   
;;;4073   		if(lakb[0]._ch_curr)li_bat._Ib=lakb[0]._ch_curr/10;
;;;4074   		else if(lakb[0]._dsch_curr) li_bat._Ib=bat[0]._Ib/10;//lakb[0]._dsch_curr/10;
;;;4075   	
;;;4076   		li_bat._ratCap=lakb[0]._rat_cap/100;
;;;4077   		li_bat._soc=lakb[0]._s_o_c;
;;;4078   		li_bat._soh=lakb[0]._s_o_h;
;;;4079   		li_bat._cclv=lakb[0]._c_c_l_v/10;
;;;4080   		li_bat._Tb=lakb[0]._max_cell_temp;
;;;4081   		li_bat._rbt=lakb[0]._r_b_t;
;;;4082   		}
;;;4083   	else 
;;;4084   		{
;;;4085   		li_bat._Ub=bat[0]._Ub;
;;;4086   		li_bat._Ib=bat[0]._Ib/10;
;;;4087   		li_bat._Tb=bat[0]._Tb;
;;;4088   		}
;;;4089   
;;;4090   	if((li_bat._485Error)||(li_bat._canError))
;;;4091   		{
;;;4092   		li_bat._batStat=bsOFF;
;;;4093   		}
;;;4094   	else li_bat._batStat=bsOK;
;;;4095   	}
;;;4096   else if(BAT_TYPE==2) //SACRED SUN
;;;4097   	{
;;;4098   	}
;;;4099   else if(BAT_TYPE==3) //ZTT
;;;4100   	{
;;;4101   	if(li_bat._batStat==bsOK)
;;;4102   		{
;;;4103   
;;;4104   		}
;;;4105   	}
;;;4106   #endif
;;;4107   
;;;4108   
;;;4109   /*
;;;4110   if((BAT_IS_ON[0]==bisON)&&(BAT_TYPE[0]==1)&&(BAT_LINK==0))
;;;4111   	{
;;;4112   
;;;4113   
;;;4114   	if(bat_drv_rx_buff[13]<=0x39)bbb[0]=bat_drv_rx_buff[13]-0x30;
;;;4115   	else bbb[0]=bat_drv_rx_buff[13]-55;
;;;4116   	if(bat_drv_rx_buff[14]<=0x39)bbb[1]=bat_drv_rx_buff[14]-0x30;
;;;4117   	else bbb[1]=bat_drv_rx_buff[14]-55;
;;;4118   	if(bat_drv_rx_buff[15]<=0x39)bbb[2]=bat_drv_rx_buff[15]-0x30;
;;;4119   	else bbb[2]=bat_drv_rx_buff[15]-55;
;;;4120   	if(bat_drv_rx_buff[16]<=0x39)bbb[3]=bat_drv_rx_buff[16]-0x30;
;;;4121   	else bbb[3]=bat_drv_rx_buff[16]-55;
;;;4122   
;;;4123   	tempSS=0;
;;;4124   	tempSS=((bbb[0]*4096)+(bbb[1]*256)+(bbb[2]*16)+bbb[3]);
;;;4125   
;;;4126   	bat[0]._max_cell_volt=(tempSS+5)/10;
;;;4127   
;;;4128   	if(bat_drv_rx_buff[17]<=0x39)bbb[0]=bat_drv_rx_buff[17]-0x30;
;;;4129   	else bbb[0]=bat_drv_rx_buff[17]-55;
;;;4130   	if(bat_drv_rx_buff[18]<=0x39)bbb[1]=bat_drv_rx_buff[18]-0x30;
;;;4131   	else bbb[1]=bat_drv_rx_buff[18]-55;
;;;4132   	if(bat_drv_rx_buff[19]<=0x39)bbb[2]=bat_drv_rx_buff[19]-0x30;
;;;4133   	else bbb[2]=bat_drv_rx_buff[19]-55;
;;;4134   	if(bat_drv_rx_buff[20]<=0x39)bbb[3]=bat_drv_rx_buff[20]-0x30;
;;;4135   	else bbb[3]=bat_drv_rx_buff[20]-55;
;;;4136   
;;;4137   	tempSS=0;
;;;4138   	tempSS=((bbb[0]*4096)+(bbb[1]*256)+(bbb[2]*16)+bbb[3]);
;;;4139   
;;;4140   	bat[0]._min_cell_volt=(tempSS+5)/10;
;;;4141   
;;;4142   
;;;4143   	}*/
;;;4144   }
003612  b007              ADD      sp,sp,#0x1c
003614  e8bd8ff0          POP      {r4-r11,pc}
;;;4145   #endif	//UKU_6U_WEB
                          ENDP

                  mnemo_hndl PROC
;;;4205   //-----------------------------------------------
;;;4206   void mnemo_hndl(void)
003618  4aa0              LDR      r2,|L1.14492|
;;;4207   {
;;;4208   if(((ind==iMn_220)||(ind==iMn))&&(sub_ind==0)&&(MNEMO_ON==mnON))
;;;4209   	{
;;;4210   	if(mnemo_cnt)mnemo_cnt--;
00361a  49a1              LDR      r1,|L1.14496|
00361c  7810              LDRB     r0,[r2,#0]            ;4208  ; a_ind
00361e  2804              CMP      r0,#4                 ;4208
003620  d001              BEQ      |L1.13862|
003622  2801              CMP      r0,#1                 ;4208
003624  d105              BNE      |L1.13874|
                  |L1.13862|
003626  7850              LDRB     r0,[r2,#1]            ;4208  ; a_ind
003628  b918              CBNZ     r0,|L1.13874|
00362a  489e              LDR      r0,|L1.14500|
00362c  7800              LDRB     r0,[r0,#0]            ;4208  ; MNEMO_ON
00362e  2855              CMP      r0,#0x55              ;4208
003630  d003              BEQ      |L1.13882|
                  |L1.13874|
;;;4211   	}
;;;4212   else mnemo_cnt=MNEMO_TIME;
003632  489d              LDR      r0,|L1.14504|
003634  8800              LDRH     r0,[r0,#0]  ; MNEMO_TIME
003636  7008              STRB     r0,[r1,#0]
                  |L1.13880|
;;;4213   }
003638  4770              BX       lr
                  |L1.13882|
00363a  7808              LDRB     r0,[r1,#0]            ;4210  ; mnemo_cnt
00363c  2800              CMP      r0,#0                 ;4210
00363e  d0fb              BEQ      |L1.13880|
003640  f1a00001          SUB      r0,r0,#1              ;4210
003644  7008              STRB     r0,[r1,#0]            ;4210
003646  4770              BX       lr
;;;4214   
                          ENDP

                  apv_start PROC
;;;4215   //-----------------------------------------------
;;;4216   void apv_start(char in)
003648  eb0001c0          ADD      r1,r0,r0,LSL #3
;;;4217   {
;;;4218   if(	(bps[in]._apv_timer_1_lev==0)&&
00364c  eb011100          ADD      r1,r1,r0,LSL #4
003650  4896              LDR      r0,|L1.14508|
003652  eb000081          ADD      r0,r0,r1,LSL #2
003656  f890105e          LDRB     r1,[r0,#0x5e]
00365a  2900              CMP      r1,#0
00365c  d115              BNE      |L1.13962|
;;;4219   	(bps[in]._apv_cnt_1_lev==0)&&
00365e  f890105f          LDRB     r1,[r0,#0x5f]
003662  2900              CMP      r1,#0
003664  d111              BNE      |L1.13962|
;;;4220   	(bps[in]._apv_timer_2_lev==0) )
003666  f8b01060          LDRH     r1,[r0,#0x60]
00366a  2900              CMP      r1,#0
00366c  d10d              BNE      |L1.13962|
;;;4221   		{
;;;4222    		bps[in]._apv_timer_1_lev=60;
00366e  f04f013c          MOV      r1,#0x3c
003672  f8001f5e          STRB     r1,[r0,#0x5e]!
;;;4223   		bps[in]._apv_cnt_1_lev=3;
003676  f04f0103          MOV      r1,#3
00367a  7041              STRB     r1,[r0,#1]
;;;4224   		bps[in]._apv_timer_2_lev=(short)(APV_ON2_TIME*3600);
00367c  498c              LDR      r1,|L1.14512|
00367e  f44f6261          MOV      r2,#0xe10
003682  8809              LDRH     r1,[r1,#0]  ; APV_ON2_TIME
003684  fb01f102          MUL      r1,r1,r2
003688  8041              STRH     r1,[r0,#2]
                  |L1.13962|
;;;4225   		}
;;;4226   }
00368a  4770              BX       lr
;;;4227   
                          ENDP

                  apv_stop PROC
;;;4228   //-----------------------------------------------
;;;4229   void apv_stop(char in)
00368c  eb0002c0          ADD      r2,r0,r0,LSL #3
;;;4230   {
;;;4231   bps[in]._apv_timer_1_lev=0;
003690  eb021200          ADD      r2,r2,r0,LSL #4
003694  4885              LDR      r0,|L1.14508|
003696  f04f0100          MOV      r1,#0
00369a  eb000082          ADD      r0,r0,r2,LSL #2
00369e  f8001f5e          STRB     r1,[r0,#0x5e]!
;;;4232   bps[in]._apv_cnt_1_lev=0;
0036a2  7041              STRB     r1,[r0,#1]
;;;4233   bps[in]._apv_timer_2_lev=0;
0036a4  8041              STRH     r1,[r0,#2]
;;;4234   }
0036a6  4770              BX       lr
;;;4235   
                          ENDP

                  apv_drv PROC
;;;4236   //-----------------------------------------------
;;;4237   void apv_drv(void)		//1 Гц
0036a8  e92d43f0          PUSH     {r4-r9,lr}
;;;4238   {
;;;4239   for(i=0;i<NUMIST;i++)
0036ac  4e81              LDR      r6,|L1.14516|
0036ae  f04f0300          MOV      r3,#0
0036b2  75f3              STRB     r3,[r6,#0x17]
;;;4240   	{
;;;4241   	if(APV_ON1==apvOFF)		//если выключен первый уровень АПВ
;;;4242   		{
;;;4243   		bps[i]._apv_timer_1_lev=0;
;;;4244   		bps[i]._apv_cnt_1_lev=0;
;;;4245   		bps[i]._apv_timer_2_lev=0;
;;;4246   		}
;;;4247   	if(APV_ON2==apvOFF)	   //если выключен второй уровень АПВ
0036b4  4c80              LDR      r4,|L1.14520|
;;;4248   		{
;;;4249   		bps[i]._apv_timer_2_lev=0;
;;;4250   		}
;;;4251   
;;;4252   	if(	(bps[i]._apv_timer_1_lev!=0)||	//если работает АПВ-1 или
;;;4253   		(bps[i]._apv_cnt_1_lev!=0)||	//работает АПВ-1 или
;;;4254   		(bps[i]._apv_timer_2_lev!=0) )		 //работает АПВ-2
;;;4255   			{
;;;4256   			if(bps[i]._state==bsWRK)
;;;4257   				{
;;;4258   				if(bps[i]._apv_succes_timer<60)
;;;4259   					{
;;;4260   					bps[i]._apv_succes_timer++;
;;;4261   					if(bps[i]._apv_succes_timer>=60)
;;;4262   						{
;;;4263   						apv_stop(i);
;;;4264   						}
;;;4265   					}
;;;4266   				}
;;;4267   			else bps[i]._apv_succes_timer=0;
;;;4268   			}
;;;4269   
;;;4270   	if(bps[i]._apv_timer_1_lev)
;;;4271   		{
;;;4272   		bps[i]._apv_timer_2_lev=0;
;;;4273   		bps[i]._apv_timer_1_lev--;
;;;4274   		if(bps[i]._apv_timer_1_lev==0)
;;;4275   			{
;;;4276   			if(bps[i]._apv_cnt_1_lev)
;;;4277   				{
;;;4278   				bps[i]._apv_cnt_1_lev--;
;;;4279   				bps[i]._apv_timer_1_lev=60;
0036b6  f04f073c          MOV      r7,#0x3c
;;;4280   				bps[i]._apv_reset_av_timer=2;
0036ba  f04f0802          MOV      r8,#2
0036be  4d7b              LDR      r5,|L1.14508|
0036c0  f8df91f8          LDR      r9,|L1.14524|
0036c4  e079              B        |L1.14266|
                  |L1.14022|
0036c6  497e              LDR      r1,|L1.14528|
0036c8  7809              LDRB     r1,[r1,#0]            ;4241  ; APV_ON1
0036ca  b949              CBNZ     r1,|L1.14048|
0036cc  eb0001c0          ADD      r1,r0,r0,LSL #3       ;4243
0036d0  eb011100          ADD      r1,r1,r0,LSL #4       ;4243
0036d4  eb050181          ADD      r1,r5,r1,LSL #2       ;4243
0036d8  f8013f5e          STRB     r3,[r1,#0x5e]!        ;4243
0036dc  704b              STRB     r3,[r1,#1]            ;4244
0036de  804b              STRH     r3,[r1,#2]            ;4245
                  |L1.14048|
0036e0  7821              LDRB     r1,[r4,#0]            ;4247  ; APV_ON2
0036e2  b939              CBNZ     r1,|L1.14068|
0036e4  eb0001c0          ADD      r1,r0,r0,LSL #3       ;4249
0036e8  eb011100          ADD      r1,r1,r0,LSL #4       ;4249
0036ec  eb050181          ADD      r1,r5,r1,LSL #2       ;4249
0036f0  f8a13060          STRH     r3,[r1,#0x60]         ;4249
                  |L1.14068|
0036f4  eb0001c0          ADD      r1,r0,r0,LSL #3       ;4252
0036f8  eb011100          ADD      r1,r1,r0,LSL #4       ;4252
0036fc  eb050181          ADD      r1,r5,r1,LSL #2       ;4252
003700  f891205e          LDRB     r2,[r1,#0x5e]         ;4252
003704  b92a              CBNZ     r2,|L1.14098|
003706  f891205f          LDRB     r2,[r1,#0x5f]         ;4253
00370a  b912              CBNZ     r2,|L1.14098|
00370c  f8b12060          LDRH     r2,[r1,#0x60]         ;4254
003710  b122              CBZ      r2,|L1.14108|
                  |L1.14098|
003712  788a              LDRB     r2,[r1,#2]            ;4256
003714  2a01              CMP      r2,#1                 ;4256
003716  d014              BEQ      |L1.14146|
003718  f8813063          STRB     r3,[r1,#0x63]         ;4267
                  |L1.14108|
00371c  7df1              LDRB     r1,[r6,#0x17]         ;4270  ; i
00371e  eb0100c1          ADD      r0,r1,r1,LSL #3       ;4270
003722  eb001001          ADD      r0,r0,r1,LSL #4       ;4270
003726  eb050080          ADD      r0,r5,r0,LSL #2       ;4270
00372a  f890205e          LDRB     r2,[r0,#0x5e]         ;4270
00372e  b30a              CBZ      r2,|L1.14196|
003730  f8a03060          STRH     r3,[r0,#0x60]         ;4272
003734  f1a20201          SUB      r2,r2,#1              ;4273
003738  b2d2              UXTB     r2,r2                 ;4273
00373a  f880205e          STRB     r2,[r0,#0x5e]         ;4273
00373e  b172              CBZ      r2,|L1.14174|
003740  e024              B        |L1.14220|
                  |L1.14146|
003742  f8912063          LDRB     r2,[r1,#0x63]         ;4258
003746  2a3c              CMP      r2,#0x3c              ;4258
003748  d2e8              BCS      |L1.14108|
00374a  f1020201          ADD      r2,r2,#1              ;4260
00374e  b2d2              UXTB     r2,r2                 ;4260
003750  f8812063          STRB     r2,[r1,#0x63]         ;4260
003754  2a3c              CMP      r2,#0x3c              ;4261
003756  d3e1              BCC      |L1.14108|
003758  f7fffffe          BL       apv_stop
00375c  e7de              B        |L1.14108|
                  |L1.14174|
00375e  f890205f          LDRB     r2,[r0,#0x5f]         ;4276
003762  b142              CBZ      r2,|L1.14198|
003764  f1a20201          SUB      r2,r2,#1              ;4278
003768  f880205f          STRB     r2,[r0,#0x5f]         ;4278
00376c  f880705e          STRB     r7,[r0,#0x5e]         ;4279
003770  f8808062          STRB     r8,[r0,#0x62]
                  |L1.14196|
003774  e00a              B        |L1.14220|
                  |L1.14198|
;;;4281   				}
;;;4282   			else
;;;4283   				{
;;;4284   				if(APV_ON2==apvON)
003776  7822              LDRB     r2,[r4,#0]  ; APV_ON2
003778  2a01              CMP      r2,#1
00377a  d107              BNE      |L1.14220|
;;;4285   					{
;;;4286   					bps[i]._apv_timer_1_lev=0;
;;;4287   					bps[i]._apv_cnt_1_lev=0;
;;;4288   					bps[i]._apv_timer_2_lev=(short)(APV_ON2_TIME*3600);
00377c  4a4c              LDR      r2,|L1.14512|
00377e  f44f6c61          MOV      r12,#0xe10
003782  8812              LDRH     r2,[r2,#0]  ; APV_ON2_TIME
003784  fb02f20c          MUL      r2,r2,r12
003788  f8a02060          STRH     r2,[r0,#0x60]
                  |L1.14220|
;;;4289   					}
;;;4290   				}
;;;4291   			
;;;4292   			}
;;;4293   		}
;;;4294   	if(bps[i]._apv_timer_2_lev)
00378c  f8b02060          LDRH     r2,[r0,#0x60]
003790  b14a              CBZ      r2,|L1.14246|
;;;4295   		{
;;;4296   		bps[i]._apv_timer_2_lev--;
003792  f1a20201          SUB      r2,r2,#1
003796  b292              UXTH     r2,r2
003798  f8a02060          STRH     r2,[r0,#0x60]
;;;4297   		if(bps[i]._apv_timer_2_lev==0)
00379c  b91a              CBNZ     r2,|L1.14246|
;;;4298   			{
;;;4299   			bps[i]._apv_cnt_1_lev=2;
00379e  f880805f          STRB     r8,[r0,#0x5f]
;;;4300   			bps[i]._apv_timer_1_lev=60;
0037a2  f880705e          STRB     r7,[r0,#0x5e]
                  |L1.14246|
;;;4301   			}
;;;4302   		}
;;;4303   
;;;4304   	if(bps[i]._apv_reset_av_timer)bps[i]._apv_reset_av_timer--;
0037a6  f8902062          LDRB     r2,[r0,#0x62]
0037aa  b11a              CBZ      r2,|L1.14260|
0037ac  f1a20201          SUB      r2,r2,#1
0037b0  f8802062          STRB     r2,[r0,#0x62]
                  |L1.14260|
0037b4  f1010101          ADD      r1,r1,#1              ;4239
0037b8  75f1              STRB     r1,[r6,#0x17]         ;4239
                  |L1.14266|
0037ba  7df0              LDRB     r0,[r6,#0x17]         ;4239  ; i
0037bc  f9b91000          LDRSH    r1,[r9,#0]            ;4239  ; NUMIST
0037c0  4288              CMP      r0,r1                 ;4239
0037c2  db80              BLT      |L1.14022|
;;;4305   	} 
;;;4306   /*char i;
;;;4307   for(i=0;i<2;i++) 
;;;4308   	{
;;;4309   	if(apv_cnt_sec[i])
;;;4310   		{
;;;4311   		apv_cnt_sec[i]--;
;;;4312   		if(apv_cnt_sec[i]==0)
;;;4313   			{
;;;4314   			cnt_av_umax[i]=0;
;;;4315   			cnt_av_umin[i]=0;
;;;4316   			reset_apv_cnt[i]=600;
;;;4317   			}
;;;4318   		}
;;;4319   	
;;;4320   	if(reset_apv_cnt[i])
;;;4321   		{
;;;4322   		reset_apv_cnt[i]--;
;;;4323   		if(reset_apv_cnt[i]==0)
;;;4324   			{
;;;4325   			apv_cnt[i]=0;
;;;4326   			}
;;;4327   		}	
;;;4328   		
;;;4329   	if(hour_apv_cnt[i])
;;;4330   		{
;;;4331   		hour_apv_cnt[i]--;
;;;4332   		if(hour_apv_cnt[i]==0)
;;;4333   			{
;;;4334   			apv_cnt[i]=0;
;;;4335   			avar_src_reset(i);
;;;4336   			}
;;;4337   		}			
;;;4338   	}
;;;4339   
;;;4340   
;;;4341   
;;;4342   
;;;4343   if(apv_cnt_1)
;;;4344   	{
;;;4345   	apv_cnt_1--;
;;;4346   	if(!apv_cnt_1) 
;;;4347   		{
;;;4348   		avar_src_reset(0);
;;;4349   		avar_src_reset(1);
;;;4350   		//cntrl_stat=0;
;;;4351   		}
;;;4352   	}*/		
;;;4353   }
0037c4  e8bd83f0          POP      {r4-r9,pc}
;;;4354   
                          ENDP

                  adc_init PROC
;;;4355   //-----------------------------------------------
;;;4356   void adc_init(void)
0037c8  483e              LDR      r0,|L1.14532|
;;;4357   {
;;;4358   
;;;4359   SET_REG(LPC_PINCON->PINSEL1,1,(25-16)*2,2);
0037ca  6841              LDR      r1,[r0,#4]
0037cc  f4212140          BIC      r1,r1,#0xc0000
0037d0  f4412180          ORR      r1,r1,#0x40000
0037d4  6041              STR      r1,[r0,#4]
;;;4360   SET_REG(LPC_PINCON->PINSEL1,1,(24-16)*2,2);
0037d6  6841              LDR      r1,[r0,#4]
0037d8  f4213140          BIC      r1,r1,#0x30000
0037dc  f4413180          ORR      r1,r1,#0x10000
0037e0  6041              STR      r1,[r0,#4]
;;;4361   SET_REG(LPC_PINCON->PINSEL1,1,(23-16)*2,2);
0037e2  6841              LDR      r1,[r0,#4]
0037e4  f4214140          BIC      r1,r1,#0xc000
0037e8  f4414180          ORR      r1,r1,#0x4000
0037ec  6041              STR      r1,[r0,#4]
;;;4362   
;;;4363   
;;;4364   SET_REG(LPC_PINCON->PINMODE1,2,(25-16)*2,2);
0037ee  6c41              LDR      r1,[r0,#0x44]
0037f0  f4212140          BIC      r1,r1,#0xc0000
0037f4  f4412100          ORR      r1,r1,#0x80000
0037f8  6441              STR      r1,[r0,#0x44]
;;;4365   SET_REG(LPC_PINCON->PINMODE1,2,(24-16)*2,2);
0037fa  6c41              LDR      r1,[r0,#0x44]
0037fc  f4213140          BIC      r1,r1,#0x30000
003800  f4413100          ORR      r1,r1,#0x20000
003804  6441              STR      r1,[r0,#0x44]
;;;4366   SET_REG(LPC_PINCON->PINMODE1,2,(23-16)*2,2);
003806  6c41              LDR      r1,[r0,#0x44]
003808  f4214140          BIC      r1,r1,#0xc000
00380c  f4414100          ORR      r1,r1,#0x8000
003810  6441              STR      r1,[r0,#0x44]
;;;4367   
;;;4368   SET_REG(LPC_ADC->ADCR,0,24,3);
003812  482d              LDR      r0,|L1.14536|
003814  6801              LDR      r1,[r0,#0]
003816  f02161e0          BIC      r1,r1,#0x7000000
00381a  6001              STR      r1,[r0,#0]
;;;4369   
;;;4370   SET_REG(LPC_ADC->ADCR,1,21,1);
00381c  6801              LDR      r1,[r0,#0]
00381e  f4411100          ORR      r1,r1,#0x200000
003822  6001              STR      r1,[r0,#0]
;;;4371   SET_REG(LPC_ADC->ADCR,0,16,1);
003824  6801              LDR      r1,[r0,#0]
003826  f4213180          BIC      r1,r1,#0x10000
00382a  6001              STR      r1,[r0,#0]
;;;4372   SET_REG(LPC_ADC->ADCR,1,8,8);
00382c  6801              LDR      r1,[r0,#0]
00382e  f421417f          BIC      r1,r1,#0xff00
003832  f4417180          ORR      r1,r1,#0x100
003836  6001              STR      r1,[r0,#0]
;;;4373   
;;;4374   //SET_REG(LPC_GPIO0->FIODIR,7,5,3);
;;;4375   //SET_REG(LPC_GPIO0->FIOPIN,4,5,3);
;;;4376   	
;;;4377   	/*if(adc_ch<=7)*///SET_REG(LPC_ADC->ADCR,1<<5,0,8);
;;;4378        /*else if(adc_ch==8) SET_REG(LPC_ADC->ADCR,1<<2,0,8);
;;;4379        else SET_REG(LPC_ADC->ADCR,1<<4,0,8);*/
;;;4380   
;;;4381   LPC_ADC->ADINTEN     =  (1<< 8);      /* global enable interrupt            */
003838  f44f7180          MOV      r1,#0x100
00383c  60c1              STR      r1,[r0,#0xc]
00383e  4823              LDR      r0,|L1.14540|
003840  f44f0180          MOV      r1,#0x400000
003844  6001              STR      r1,[r0,#0]
;;;4382   
;;;4383   NVIC_EnableIRQ(ADC_IRQn);             /* enable ADC Interrupt               */
;;;4384   
;;;4385   
;;;4386   }
003846  4770              BX       lr
;;;4387   
                          ENDP

                  adc_drv7 PROC
;;;4388   //-----------------------------------------------
;;;4389   void adc_drv7(void) //(Uсети - постоянка)
003848  e92d41f0          PUSH     {r4-r8,lr}
;;;4390   {
;;;4391   //int temp_S;
;;;4392   //char i;
;;;4393   //signed short temp_SS;
;;;4394   
;;;4395   adc_self_ch_disp[0]=abs_pal(adc_self_ch_buff[1]-adc_self_ch_buff[0]);//adc_self_ch_buff[0]&0x0f80;
00384c  4c19              LDR      r4,|L1.14516|
00384e  34ee              ADDS     r4,r4,#0xee
003850  8860              LDRH     r0,[r4,#2]  ; adc_self_ch_buff
003852  8821              LDRH     r1,[r4,#0]  ; adc_self_ch_buff
003854  1a40              SUBS     r0,r0,r1
003856  b200              SXTH     r0,r0
003858  f7fffffe          BL       abs_pal
00385c  1da6              ADDS     r6,r4,#6
00385e  8030              STRH     r0,[r6,#0]
;;;4396   adc_self_ch_disp[1]=abs_pal(adc_self_ch_buff[2]-adc_self_ch_buff[1]);//adc_self_ch_buff[1]&0x0f80;
003860  88a0              LDRH     r0,[r4,#4]  ; adc_self_ch_buff
003862  8861              LDRH     r1,[r4,#2]  ; adc_self_ch_buff
003864  1a40              SUBS     r0,r0,r1
003866  b200              SXTH     r0,r0
003868  f7fffffe          BL       abs_pal
00386c  8070              STRH     r0,[r6,#2]
;;;4397   adc_self_ch_disp[2]=abs_pal(adc_self_ch_buff[2]-adc_self_ch_buff[0]);//adc_self_ch_buff[2]&0x0f80;
00386e  88a0              LDRH     r0,[r4,#4]  ; adc_self_ch_buff
003870  8821              LDRH     r1,[r4,#0]  ; adc_self_ch_buff
003872  1a40              SUBS     r0,r0,r1
003874  b200              SXTH     r0,r0
003876  f7fffffe          BL       abs_pal
00387a  80b0              STRH     r0,[r6,#4]
;;;4398   
;;;4399   //adc_self_ch_disp[0]=adc_self_ch_buff[0]&0x0ff0;
;;;4400   //adc_self_ch_disp[1]=adc_self_ch_buff[1]&0x0ff0;
;;;4401   //adc_self_ch_disp[2]=adc_self_ch_buff[2]&0x0ff0;
;;;4402   
;;;4403   
;;;4404   if(adc_self_ch_disp[2]<300)//==adc_self_ch_disp[2])
00387c  f44f7196          MOV      r1,#0x12c
;;;4405   	{
;;;4406   	adc_result=adc_self_ch_buff[2];
003880  4d0c              LDR      r5,|L1.14516|
003882  4288              CMP      r0,r1                 ;4404
003884  da24              BGE      |L1.14544|
003886  88a0              LDRH     r0,[r4,#4]  ; adc_self_ch_buff
003888  87a8              STRH     r0,[r5,#0x3c]
00388a  e02e              B        |L1.14570|
                  |L1.14476|
                          DCD      load_I
                  |L1.14480|
                          DCD      Isumm
                  |L1.14484|
                          DCD      NUMINV
                  |L1.14488|
                          DCD      inv
                  |L1.14492|
                          DCD      a_ind
                  |L1.14496|
                          DCD      mnemo_cnt
                  |L1.14500|
                          DCD      MNEMO_ON
                  |L1.14504|
                          DCD      MNEMO_TIME
                  |L1.14508|
                          DCD      bps
                  |L1.14512|
                          DCD      APV_ON2_TIME
                  |L1.14516|
                          DCD      ||area_number.25||
                  |L1.14520|
                          DCD      APV_ON2
                  |L1.14524|
                          DCD      NUMIST
                  |L1.14528|
                          DCD      APV_ON1
                  |L1.14532|
                          DCD      0x4002c000
                  |L1.14536|
                          DCD      0x40034000
                  |L1.14540|
                          DCD      0xe000e100
                  |L1.14544|
;;;4407   	} 
;;;4408   else if(adc_self_ch_disp[1]<300)//==adc_self_ch_disp[2])
0038d0  f9b60002          LDRSH    r0,[r6,#2]  ; adc_self_ch_disp
0038d4  4288              CMP      r0,r1
0038d6  da02              BGE      |L1.14558|
;;;4409   	{
;;;4410   	adc_result=adc_self_ch_buff[1];
0038d8  8860              LDRH     r0,[r4,#2]  ; adc_self_ch_buff
0038da  87a8              STRH     r0,[r5,#0x3c]
0038dc  e005              B        |L1.14570|
                  |L1.14558|
;;;4411   	}
;;;4412   else if(adc_self_ch_disp[0]<300)//==adc_self_ch_disp[1])
0038de  f9b60000          LDRSH    r0,[r6,#0]  ; adc_self_ch_disp
0038e2  4288              CMP      r0,r1
0038e4  da01              BGE      |L1.14570|
;;;4413   	{
;;;4414   	adc_result=adc_self_ch_buff[0];
0038e6  8820              LDRH     r0,[r4,#0]  ; adc_self_ch_buff
0038e8  87a8              STRH     r0,[r5,#0x3c]
                  |L1.14570|
;;;4415   	}
;;;4416       //adc_result=92;
;;;4417   
;;;4418   if(adc_ch_net)
0038ea  7c6f              LDRB     r7,[r5,#0x11]  ; adc_ch_net
0038ec  2600              MOVS     r6,#0
0038ee  b347              CBZ      r7,|L1.14658|
;;;4419   	{
;;;4420   
;;;4421   	main_power_buffer[0]+=(long)(adc_result);
0038f0  48f8              LDR      r0,|L1.15572|
0038f2  f9b5103c          LDRSH    r1,[r5,#0x3c]  ; adc_result
0038f6  6802              LDR      r2,[r0,#0]  ; main_power_buffer
0038f8  440a              ADD      r2,r2,r1
0038fa  6002              STR      r2,[r0,#0]  ; main_power_buffer
;;;4422   	main_power_buffer[1]+=(long)(adc_result);
0038fc  6842              LDR      r2,[r0,#4]  ; main_power_buffer
0038fe  440a              ADD      r2,r2,r1
003900  6042              STR      r2,[r0,#4]  ; main_power_buffer
;;;4423   	main_power_buffer[2]+=(long)(adc_result);
003902  6882              LDR      r2,[r0,#8]  ; main_power_buffer
003904  440a              ADD      r2,r2,r1
003906  6082              STR      r2,[r0,#8]  ; main_power_buffer
;;;4424   	main_power_buffer[3]+=(long)(adc_result);
003908  68c2              LDR      r2,[r0,#0xc]  ; main_power_buffer
00390a  4411              ADD      r1,r1,r2
00390c  60c1              STR      r1,[r0,#0xc]  ; main_power_buffer
;;;4425   
;;;4426   	adc_net_buff_cnt++;
00390e  f8b51044          LDRH     r1,[r5,#0x44]  ; adc_net_buff_cnt
003912  f1010101          ADD      r1,r1,#1
003916  b209              SXTH     r1,r1
003918  f8a51044          STRH     r1,[r5,#0x44]
;;;4427   	if(adc_net_buff_cnt>=0x1000)
00391c  f5b15f80          CMP      r1,#0x1000
003920  db01              BLT      |L1.14630|
;;;4428   		{
;;;4429   		adc_net_buff_cnt=0;
003922  f8a56044          STRH     r6,[r5,#0x44]
                  |L1.14630|
;;;4430   		}
;;;4431   	if((adc_net_buff_cnt&0x03ff)==0)
003926  f9b51044          LDRSH    r1,[r5,#0x44]  ; adc_net_buff_cnt
00392a  058a              LSLS     r2,r1,#22
00392c  d131              BNE      |L1.14738|
;;;4432   		{
;;;4433   		#ifdef UKU_220
;;;4434   		net_buff_=(short)((main_power_buffer[adc_net_buff_cnt>>10])>>11);
;;;4435   		#else
;;;4436   		#ifdef UKU_220_V2
;;;4437   		net_buff_=(short)((main_power_buffer[adc_net_buff_cnt>>10])>>11);
;;;4438   		#else
;;;4439   		net_buff_=(short)((main_power_buffer[adc_net_buff_cnt>>10])>>8);
00392e  ea4f21a1          ASR      r1,r1,#10
003932  f8502021          LDR      r2,[r0,r1,LSL #2]
003936  ea4f2222          ASR      r2,r2,#8
00393a  876a              STRH     r2,[r5,#0x3a]
;;;4440   		#endif
;;;4441   		#endif
;;;4442   		main_power_buffer[adc_net_buff_cnt>>10]=0;
00393c  f8406021          STR      r6,[r0,r1,LSL #2]
003940  e027              B        |L1.14738|
                  |L1.14658|
;;;4443   		}
;;;4444   
;;;4445   
;;;4446   	} 
;;;4447   else if(!adc_ch_net)
;;;4448   	{
;;;4449   	adc_buff[adc_ch][adc_ch_cnt]=(long)adc_result;
003942  48e5              LDR      r0,|L1.15576|
003944  7cac              LDRB     r4,[r5,#0x12]  ; adc_ch
003946  7cea              LDRB     r2,[r5,#0x13]  ; adc_ch_cnt
003948  eb001384          ADD      r3,r0,r4,LSL #6
00394c  f9b5103c          LDRSH    r1,[r5,#0x3c]  ; adc_result
003950  f8431022          STR      r1,[r3,r2,LSL #2]
;;;4450   	
;;;4451   	if((adc_ch_cnt&0x03)==0)
003954  0790              LSLS     r0,r2,#30
003956  d10f              BNE      |L1.14712|
;;;4452   		{
;;;4453   		long temp_L;
;;;4454   		char i;
;;;4455   		temp_L=0;
003958  4601              MOV      r1,r0
                  |L1.14682|
;;;4456   		for(i=0;i<16;i++)
;;;4457   			{
;;;4458   			temp_L+=adc_buff[adc_ch][i];
00395a  f853c020          LDR      r12,[r3,r0,LSL #2]
00395e  4461              ADD      r1,r1,r12
003960  f1000001          ADD      r0,r0,#1              ;4456
003964  b2c0              UXTB     r0,r0                 ;4456
003966  2810              CMP      r0,#0x10              ;4456
003968  d3f7              BCC      |L1.14682|
;;;4459   			}
;;;4460   		adc_buff_[adc_ch]= (short)(temp_L>>4);
00396a  ea4f1021          ASR      r0,r1,#4
00396e  49d9              LDR      r1,|L1.15572|
003970  f1a10120          SUB      r1,r1,#0x20
003974  f8210014          STRH     r0,[r1,r4,LSL #1]
                  |L1.14712|
;;;4461   
;;;4462   		//adc_buff_[3]=346;
;;;4463   		}
;;;4464   	if(++adc_ch>=16) 
003978  1c64              ADDS     r4,r4,#1
00397a  b2e0              UXTB     r0,r4
00397c  74a8              STRB     r0,[r5,#0x12]
00397e  2810              CMP      r0,#0x10
003980  d307              BCC      |L1.14738|
;;;4465   		{
;;;4466   		adc_ch=0;
003982  74ae              STRB     r6,[r5,#0x12]
;;;4467   		adc_ch_cnt++;
003984  f1020201          ADD      r2,r2,#1
003988  b2d0              UXTB     r0,r2
00398a  74e8              STRB     r0,[r5,#0x13]
;;;4468   		if(adc_ch_cnt>=16)adc_ch_cnt=0;
00398c  2810              CMP      r0,#0x10
00398e  d300              BCC      |L1.14738|
003990  74ee              STRB     r6,[r5,#0x13]
                  |L1.14738|
;;;4469   		}
;;;4470   	}
;;;4471   
;;;4472   //adc_buff[adc_ch][adc_cnt1]=(adc_self_ch_buff[2]+adc_self_ch_buff[1])/2;
;;;4473   
;;;4474   //if(adc_buff[adc_ch][adc_cnt1]<adc_buff_min[adc_ch])adc_buff_min[adc_ch]=adc_buff[adc_ch][adc_cnt1];
;;;4475   //if(adc_buff[adc_ch][adc_cnt1]>adc_buff_max[adc_ch])adc_buff_max[adc_ch]=adc_buff[adc_ch][adc_cnt1];
;;;4476   /*
;;;4477   	{
;;;4478   	if((adc_cnt1&0x03)==0)
;;;4479   		{
;;;4480   		temp_S=0;
;;;4481   		for(i=0;i<16;i++)
;;;4482   			{
;;;4483   			temp_S+=adc_buff[adc_ch][i];
;;;4484   			} 
;;;4485            	adc_buff_[adc_ch]=temp_S>>4;
;;;4486             }
;;;4487   	}*/
;;;4488   
;;;4489   
;;;4490   		  
;;;4491   
;;;4492   adc_self_ch_cnt=0;
003992  742e              STRB     r6,[r5,#0x10]
;;;4493   
;;;4494   adc_ch_net++;
003994  f1070701          ADD      r7,r7,#1
;;;4495   adc_ch_net&=1;
003998  f0070001          AND      r0,r7,#1
00399c  7468              STRB     r0,[r5,#0x11]
;;;4496   
;;;4497   //SET_REG(LPC_GPIO0->FIODIR,7,5,3);
;;;4498   //SET_REG(LPC_GPIO0->FIOPIN,adc_ch,5,3);
;;;4499   
;;;4500   if(adc_ch_net)
;;;4501   	{
;;;4502   	//LPC_GPIO2->FIODIR|=(1<<7);
;;;4503   	//LPC_GPIO2->FIOPIN|=(1<<7);
;;;4504   	SET_REG(LPC_ADC->ADCR,1<<2,0,8);
00399e  4acf              LDR      r2,|L1.15580|
0039a0  b130              CBZ      r0,|L1.14768|
0039a2  6810              LDR      r0,[r2,#0]
0039a4  f02000ff          BIC      r0,r0,#0xff
0039a8  f1000004          ADD      r0,r0,#4
0039ac  6010              STR      r0,[r2,#0]
0039ae  e03d              B        |L1.14892|
                  |L1.14768|
;;;4505   	}
;;;4506   else
;;;4507   	{
;;;4508   	//LPC_GPIO2->FIODIR|=(1<<7);
;;;4509   	//LPC_GPIO2->FIOPIN&=~(1<<7);
;;;4510   	if(!(adc_ch&(1<<3)))SET_REG(LPC_ADC->ADCR,1<<0,0,8);
0039b0  7ca9              LDRB     r1,[r5,#0x12]  ; adc_ch
0039b2  0708              LSLS     r0,r1,#28
0039b4  d406              BMI      |L1.14788|
0039b6  6810              LDR      r0,[r2,#0]
0039b8  f02000ff          BIC      r0,r0,#0xff
0039bc  f1000001          ADD      r0,r0,#1
0039c0  6010              STR      r0,[r2,#0]
0039c2  e005              B        |L1.14800|
                  |L1.14788|
;;;4511   	else 			SET_REG(LPC_ADC->ADCR,1<<1,0,8);
0039c4  6810              LDR      r0,[r2,#0]
0039c6  f02000ff          BIC      r0,r0,#0xff
0039ca  f1000002          ADD      r0,r0,#2
0039ce  6010              STR      r0,[r2,#0]
                  |L1.14800|
;;;4512   
;;;4513   
;;;4514   	SET_REG(LPC_GPIO0->FIODIR,1,28,1);
0039d0  48c3              LDR      r0,|L1.15584|
0039d2  6803              LDR      r3,[r0,#0]
0039d4  f0435380          ORR      r3,r3,#0x10000000
0039d8  6003              STR      r3,[r0,#0]
;;;4515   	SET_REG(LPC_GPIO1->FIODIR,1,30,1);
0039da  6a03              LDR      r3,[r0,#0x20]
0039dc  f0434380          ORR      r3,r3,#0x40000000
0039e0  6203              STR      r3,[r0,#0x20]
;;;4516   	SET_REG(LPC_GPIO3->FIODIR,1,26,1);
0039e2  6e03              LDR      r3,[r0,#0x60]
0039e4  f0436380          ORR      r3,r3,#0x4000000
0039e8  6603              STR      r3,[r0,#0x60]
;;;4517   
;;;4518   	if(!(adc_ch&(1<<0)))SET_REG(LPC_GPIO0->FIOPIN,0,28,1);
0039ea  07cb              LSLS     r3,r1,#31
0039ec  d00a              BEQ      |L1.14852|
;;;4519   	else 			SET_REG(LPC_GPIO0->FIOPIN,1,28,1);
0039ee  6943              LDR      r3,[r0,#0x14]
0039f0  f0435380          ORR      r3,r3,#0x10000000
0039f4  6143              STR      r3,[r0,#0x14]
                  |L1.14838|
;;;4520   
;;;4521   	if(!(adc_ch&(1<<1)))SET_REG(LPC_GPIO1->FIOPIN,0,30,1);
0039f6  078b              LSLS     r3,r1,#30
0039f8  d409              BMI      |L1.14862|
0039fa  6b43              LDR      r3,[r0,#0x34]
0039fc  f0234380          BIC      r3,r3,#0x40000000
003a00  6343              STR      r3,[r0,#0x34]
003a02  e008              B        |L1.14870|
                  |L1.14852|
003a04  6943              LDR      r3,[r0,#0x14]         ;4518
003a06  f0235380          BIC      r3,r3,#0x10000000     ;4518
003a0a  6143              STR      r3,[r0,#0x14]         ;4518
003a0c  e7f3              B        |L1.14838|
                  |L1.14862|
;;;4522   	else 			SET_REG(LPC_GPIO1->FIOPIN,1,30,1);
003a0e  6b43              LDR      r3,[r0,#0x34]
003a10  f0434380          ORR      r3,r3,#0x40000000
003a14  6343              STR      r3,[r0,#0x34]
                  |L1.14870|
;;;4523   
;;;4524   	if(!(adc_ch&(1<<2)))SET_REG(LPC_GPIO3->FIOPIN,0,26,1);
003a16  0749              LSLS     r1,r1,#29
003a18  d404              BMI      |L1.14884|
003a1a  6f41              LDR      r1,[r0,#0x74]
003a1c  f0216180          BIC      r1,r1,#0x4000000
003a20  6741              STR      r1,[r0,#0x74]
003a22  e003              B        |L1.14892|
                  |L1.14884|
;;;4525   	else 			SET_REG(LPC_GPIO3->FIOPIN,1,26,1);
003a24  6f41              LDR      r1,[r0,#0x74]
003a26  f0416180          ORR      r1,r1,#0x4000000
003a2a  6741              STR      r1,[r0,#0x74]
                  |L1.14892|
;;;4526   	}
;;;4527   	
;;;4528   
;;;4529   
;;;4530   
;;;4531   LPC_ADC->ADCR |=  (1<<24);
003a2c  6810              LDR      r0,[r2,#0]
003a2e  f0407080          ORR      r0,r0,#0x1000000
003a32  6010              STR      r0,[r2,#0]
                  |L1.14900|
;;;4532   
;;;4533   }
003a34  e8bd81f0          POP      {r4-r8,pc}
;;;4534   
                          ENDP

                  avg_hndl PROC
;;;4791   //-----------------------------------------------
;;;4792   void avg_hndl(void)
003a38  e92d41f0          PUSH     {r4-r8,lr}
;;;4793   { 
;;;4794   char i;
;;;4795   
;;;4796   //#define AVGCNTMAX	5
;;;4797   if(avg_main_cnt)
003a3c  4da9              LDR      r5,|L1.15588|
003a3e  f9b50036          LDRSH    r0,[r5,#0x36]  ; avg_main_cnt
003a42  b118              CBZ      r0,|L1.14924|
;;;4798   	{
;;;4799   	avg_main_cnt--;
003a44  f1a00001          SUB      r0,r0,#1
003a48  86e8              STRH     r0,[r5,#0x36]
;;;4800   	//goto avg_hndl_end;
;;;4801   	return;
;;;4802   	}                 
;;;4803   
;;;4804   avg_main_cnt=5;
;;;4805   avg_num=0;
;;;4806   
;;;4807   for(i=0;i<NUMIST;i++)
;;;4808   	{
;;;4809   	if((bps[i]._state==bsWRK)&&(bps[i]._cnt<20))avg_num++;
;;;4810   	}
;;;4811   
;;;4812   /*if((K[NUMI]>=1)&&(bps_state[0]==ssWRK))	avg_num++;
;;;4813   if((K[NUMI]>=2)&&(bps_state[1]==ssWRK))	avg_num++;
;;;4814   if((K[NUMI]>=3)&&(bps_state[2]==ssWRK))	avg_num++;*/
;;;4815   
;;;4816   if(avg_vektor) avg_vektor=0;
;;;4817   else avg_vektor=1;
;;;4818   	
;;;4819   if(avg_num<2)
;;;4820   	{
;;;4821   	//goto avg_hndl_end;
;;;4822   	return;
;;;4823   	}
;;;4824   	
;;;4825   else
;;;4826   	{
;;;4827   	i_avg_min=5000;
;;;4828   	i_avg_max=0;
;;;4829   	i_avg_summ=0;
;;;4830   	for(i=0;i<NUMIST;i++)
;;;4831   		{
;;;4832   		if(bps[i]._state==bsWRK)
;;;4833   			{
;;;4834   			if(bps[i]._Ii>i_avg_max)i_avg_max=bps[i]._Ii;
;;;4835   			if(bps[i]._Ii<i_avg_min)i_avg_min=bps[i]._Ii;
;;;4836   			
;;;4837   			i_avg_summ+=bps[i]._Ii;
;;;4838   			}
;;;4839   		}
;;;4840   	i_avg=i_avg_summ/avg_num;	
;;;4841   	
;;;4842   	if(i_avg_min==0)i_avg_min=1;
;;;4843   
;;;4844   	avg=i_avg_max;
;;;4845   	avg*=100;
;;;4846   	avg/=i_avg_min;
;;;4847   
;;;4848   	if(avg>130) bAVG=1;
;;;4849   	if(avg<110) bAVG=0;
;;;4850   
;;;4851   	if(bAVG==1)
;;;4852   		{
;;;4853   		for(i=0;i<NUMIST;i++)
;;;4854   			{
;;;4855   			if(bps[i]._state==bsWRK)
;;;4856   				{
;;;4857   				if((bps[i]._Ii>i_avg)&&(!avg_vektor))bps[i]._x_--;
;;;4858   				if((bps[i]._Ii<i_avg)&&(avg_vektor))bps[i]._x_++;
;;;4859   			
;;;4860   				if(bps[i]._x_<-50)bps[i]._x_=-50;
;;;4861   				if(bps[i]._x_>50)bps[i]._x_=50;	
;;;4862   				}
;;;4863   			}		
;;;4864   		}			
;;;4865   	}   	 
;;;4866   
;;;4867   
;;;4868   avg_hndl_end:
;;;4869   __nop();  
;;;4870   }
003a4a  e7f3              B        |L1.14900|
                  |L1.14924|
003a4c  f04f0005          MOV      r0,#5                 ;4804
003a50  86e8              STRH     r0,[r5,#0x36]         ;4804
003a52  f04f0700          MOV      r7,#0                 ;4805
003a56  76af              STRB     r7,[r5,#0x1a]         ;4805
003a58  f04f0000          MOV      r0,#0                 ;4807
003a5c  49a3              LDR      r1,|L1.15596|
003a5e  4ca2              LDR      r4,|L1.15592|
003a60  f9b12000          LDRSH    r2,[r1,#0]            ;4807
003a64  e012              B        |L1.14988|
                  |L1.14950|
003a66  eb0001c0          ADD      r1,r0,r0,LSL #3       ;4809
003a6a  eb011100          ADD      r1,r1,r0,LSL #4       ;4809
003a6e  eb040181          ADD      r1,r4,r1,LSL #2       ;4809
003a72  788b              LDRB     r3,[r1,#2]            ;4809
003a74  2b01              CMP      r3,#1                 ;4809
003a76  d106              BNE      |L1.14982|
003a78  78c9              LDRB     r1,[r1,#3]            ;4809
003a7a  2914              CMP      r1,#0x14              ;4809
003a7c  d203              BCS      |L1.14982|
003a7e  7ea9              LDRB     r1,[r5,#0x1a]         ;4809  ; avg_num
003a80  f1010101          ADD      r1,r1,#1              ;4809
003a84  76a9              STRB     r1,[r5,#0x1a]         ;4809
                  |L1.14982|
003a86  f1000001          ADD      r0,r0,#1              ;4807
003a8a  b2c0              UXTB     r0,r0                 ;4807
                  |L1.14988|
003a8c  4290              CMP      r0,r2                 ;4807
003a8e  dbea              BLT      |L1.14950|
003a90  7ee8              LDRB     r0,[r5,#0x1b]         ;4816  ; avg_vektor
003a92  f04f0c01          MOV      r12,#1                ;4809
003a96  b108              CBZ      r0,|L1.15004|
003a98  76ef              STRB     r7,[r5,#0x1b]         ;4816
003a9a  e001              B        |L1.15008|
                  |L1.15004|
003a9c  f885c01b          STRB     r12,[r5,#0x1b]        ;4817
                  |L1.15008|
003aa0  7eae              LDRB     r6,[r5,#0x1a]         ;4819  ; avg_num
003aa2  2e02              CMP      r6,#2                 ;4819
003aa4  d3c6              BCC      |L1.14900|
003aa6  4b8f              LDR      r3,|L1.15588|
003aa8  f2413088          MOV      r0,#0x1388            ;4827
003aac  f1030380          ADD      r3,r3,#0x80           ;4827
003ab0  6218              STR      r0,[r3,#0x20]         ;4827  ; i_avg_min
003ab2  61df              STR      r7,[r3,#0x1c]         ;4828  ; i_avg_max
003ab4  625f              STR      r7,[r3,#0x24]         ;4829  ; i_avg_summ
003ab6  f04f0100          MOV      r1,#0                 ;4830
003aba  e01c              B        |L1.15094|
                  |L1.15036|
003abc  eb0100c1          ADD      r0,r1,r1,LSL #3       ;4832
003ac0  eb001001          ADD      r0,r0,r1,LSL #4       ;4832
003ac4  eb040080          ADD      r0,r4,r0,LSL #2       ;4832
003ac8  f8908002          LDRB     r8,[r0,#2]            ;4832
003acc  f1b80f01          CMP      r8,#1                 ;4832
003ad0  d10e              BNE      |L1.15088|
003ad2  6a40              LDR      r0,[r0,#0x24]         ;4834
003ad4  f8d3801c          LDR      r8,[r3,#0x1c]         ;4834  ; i_avg_max
003ad8  4540              CMP      r0,r8                 ;4834
003ada  dd00              BLE      |L1.15070|
003adc  61d8              STR      r0,[r3,#0x1c]         ;4834  ; i_avg_max
                  |L1.15070|
003ade  f8d38020          LDR      r8,[r3,#0x20]         ;4835  ; i_avg_min
003ae2  4540              CMP      r0,r8                 ;4835
003ae4  da00              BGE      |L1.15080|
003ae6  6218              STR      r0,[r3,#0x20]         ;4835  ; i_avg_min
                  |L1.15080|
003ae8  f8d38024          LDR      r8,[r3,#0x24]         ;4837  ; i_avg_summ
003aec  4440              ADD      r0,r0,r8              ;4837
003aee  6258              STR      r0,[r3,#0x24]         ;4837  ; i_avg_summ
                  |L1.15088|
003af0  f1010101          ADD      r1,r1,#1              ;4830
003af4  b2c9              UXTB     r1,r1                 ;4830
                  |L1.15094|
003af6  4291              CMP      r1,r2                 ;4830
003af8  dbe0              BLT      |L1.15036|
003afa  6a58              LDR      r0,[r3,#0x24]         ;4840  ; i_avg_summ
003afc  fb90f6f6          SDIV     r6,r0,r6              ;4840
003b00  629e              STR      r6,[r3,#0x28]         ;4840  ; i_avg
003b02  6a18              LDR      r0,[r3,#0x20]         ;4842  ; i_avg_min
003b04  b908              CBNZ     r0,|L1.15114|
003b06  f8c3c020          STR      r12,[r3,#0x20]        ;4842  ; i_avg_min
                  |L1.15114|
003b0a  69d8              LDR      r0,[r3,#0x1c]         ;4844  ; i_avg_max
003b0c  f04f0164          MOV      r1,#0x64              ;4845
003b10  fb00f001          MUL      r0,r0,r1              ;4845
003b14  6a19              LDR      r1,[r3,#0x20]         ;4846  ; i_avg_min
003b16  fb90f0f1          SDIV     r0,r0,r1              ;4846
003b1a  62d8              STR      r0,[r3,#0x2c]         ;4846  ; avg
003b1c  2882              CMP      r0,#0x82              ;4848
003b1e  dd01              BLE      |L1.15140|
003b20  f885c019          STRB     r12,[r5,#0x19]        ;4848
                  |L1.15140|
003b24  286e              CMP      r0,#0x6e              ;4849
003b26  da00              BGE      |L1.15146|
003b28  766f              STRB     r7,[r5,#0x19]         ;4849
                  |L1.15146|
003b2a  7e68              LDRB     r0,[r5,#0x19]         ;4851  ; bAVG
003b2c  2801              CMP      r0,#1                 ;4851
003b2e  d138              BNE      |L1.15266|
003b30  f04f0100          MOV      r1,#0                 ;4853
003b34  f06f0731          MVN      r7,#0x31              ;4860
003b38  e031              B        |L1.15262|
                  |L1.15162|
003b3a  eb0100c1          ADD      r0,r1,r1,LSL #3       ;4855
003b3e  eb001001          ADD      r0,r0,r1,LSL #4       ;4855
003b42  eb040080          ADD      r0,r4,r0,LSL #2       ;4855
003b46  7883              LDRB     r3,[r0,#2]            ;4855
003b48  2b01              CMP      r3,#1                 ;4855
003b4a  d125              BNE      |L1.15256|
003b4c  6a43              LDR      r3,[r0,#0x24]         ;4857
003b4e  42b3              CMP      r3,r6                 ;4857
003b50  dd0a              BLE      |L1.15208|
003b52  f895c01b          LDRB     r12,[r5,#0x1b]        ;4857  ; avg_vektor
003b56  f1bc0f00          CMP      r12,#0                ;4857
003b5a  d105              BNE      |L1.15208|
003b5c  f8b0c054          LDRH     r12,[r0,#0x54]        ;4857
003b60  f1ac0c01          SUB      r12,r12,#1            ;4857
003b64  f8a0c054          STRH     r12,[r0,#0x54]        ;4857
                  |L1.15208|
003b68  42b3              CMP      r3,r6                 ;4858
003b6a  da07              BGE      |L1.15228|
003b6c  7eeb              LDRB     r3,[r5,#0x1b]         ;4858  ; avg_vektor
003b6e  b12b              CBZ      r3,|L1.15228|
003b70  f8b03054          LDRH     r3,[r0,#0x54]         ;4858
003b74  f1030301          ADD      r3,r3,#1              ;4858
003b78  f8a03054          STRH     r3,[r0,#0x54]         ;4858
                  |L1.15228|
003b7c  f9b03054          LDRSH    r3,[r0,#0x54]         ;4860
003b80  42bb              CMP      r3,r7                 ;4860
003b82  da01              BGE      |L1.15240|
003b84  f8a07054          STRH     r7,[r0,#0x54]         ;4860
                  |L1.15240|
003b88  f9b03054          LDRSH    r3,[r0,#0x54]         ;4861
003b8c  2b32              CMP      r3,#0x32              ;4861
003b8e  dd03              BLE      |L1.15256|
003b90  f04f0332          MOV      r3,#0x32              ;4861
003b94  f8a03054          STRH     r3,[r0,#0x54]         ;4861
                  |L1.15256|
003b98  f1010101          ADD      r1,r1,#1              ;4853
003b9c  b2c9              UXTB     r1,r1                 ;4853
                  |L1.15262|
003b9e  4291              CMP      r1,r2                 ;4853
003ba0  dbcb              BLT      |L1.15162|
                  |L1.15266|
003ba2  bf00              NOP                            ;4869
003ba4  e746              B        |L1.14900|
;;;4871   
                          ENDP

                  rele_hndl PROC
;;;4884   //*************-----------------------------------------------
;;;4885   void rele_hndl(void)
003ba6  e92d5ff0          PUSH     {r4-r12,lr}
;;;4886   {
;;;4887   //static char cnt_rel_sam;
;;;4888   //char temp;
;;;4889   
;;;4890   //temp=0;
;;;4891   
;;;4892   
;;;4893   SET_REG(LPC_PINCON->PINSEL0,0,4*2,6*2);
003baa  4851              LDR      r0,|L1.15600|
003bac  6801              LDR      r1,[r0,#0]
003bae  4a51              LDR      r2,|L1.15604|
003bb0  ea010102          AND      r1,r1,r2
003bb4  6001              STR      r1,[r0,#0]
;;;4894   SET_REG(LPC_GPIO0->FIODIR,63,4,6);
003bb6  4c4a              LDR      r4,|L1.15584|
003bb8  6821              LDR      r1,[r4,#0]
003bba  f441717c          ORR      r1,r1,#0x3f0
003bbe  6021              STR      r1,[r4,#0]
;;;4895   SET_REG(LPC_PINCON->PINSEL7,0,(25-16)*2,2);
003bc0  69c1              LDR      r1,[r0,#0x1c]
003bc2  f4212140          BIC      r1,r1,#0xc0000
003bc6  61c1              STR      r1,[r0,#0x1c]
;;;4896   SET_REG(LPC_GPIO3->FIODIR,1,25,1);
003bc8  6e21              LDR      r1,[r4,#0x60]
003bca  f0417100          ORR      r1,r1,#0x2000000
003bce  6621              STR      r1,[r4,#0x60]
;;;4897   SET_REG(LPC_PINCON->PINSEL1,0,(29-16)*2,2);
003bd0  6841              LDR      r1,[r0,#4]
003bd2  f0216140          BIC      r1,r1,#0xc000000
003bd6  6041              STR      r1,[r0,#4]
;;;4898   SET_REG(LPC_GPIO0->FIODIR,1,29,1);
003bd8  6820              LDR      r0,[r4,#0]
003bda  f0405000          ORR      r0,r0,#0x20000000
003bde  6020              STR      r0,[r4,#0]
;;;4899   
;;;4900   
;;;4901   
;;;4902   
;;;4903   
;;;4904   
;;;4905   if((((bat[0]._rel_stat)  || (tbatdisable_stat!=tbdsON))&&(tbatdisable_cmnd))	&& (main_1Hz_cnt>5))
003be0  4846              LDR      r0,|L1.15612|
003be2  4d45              LDR      r5,|L1.15608|
003be4  4947              LDR      r1,|L1.15620|
003be6  7802              LDRB     r2,[r0,#0]  ; tbatdisable_stat
003be8  4845              LDR      r0,|L1.15616|
003bea  f895303c          LDRB     r3,[r5,#0x3c]  ; bat
003bee  f9b11000          LDRSH    r1,[r1,#0]
003bf2  7800              LDRB     r0,[r0,#0]
003bf4  4313              ORRS     r3,r3,r2
003bf6  d007              BEQ      |L1.15368|
003bf8  b130              CBZ      r0,|L1.15368|
003bfa  2905              CMP      r1,#5
003bfc  dd04              BLE      |L1.15368|
;;;4906   	{
;;;4907   	SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_BAT1,1);
003bfe  69a3              LDR      r3,[r4,#0x18]
003c00  f4437380          ORR      r3,r3,#0x100
003c04  61a3              STR      r3,[r4,#0x18]
003c06  e003              B        |L1.15376|
                  |L1.15368|
;;;4908   	}
;;;4909   else SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_BAT1,1);	  	
003c08  69e3              LDR      r3,[r4,#0x1c]
003c0a  f4437380          ORR      r3,r3,#0x100
003c0e  61e3              STR      r3,[r4,#0x1c]
                  |L1.15376|
;;;4910   
;;;4911   if((((bat[1]._rel_stat) || (tbatdisable_stat!=tbdsON))&&(tbatdisable_cmnd))	&& (main_1Hz_cnt>5))
003c10  f8953088          LDRB     r3,[r5,#0x88]  ; bat
003c14  4313              ORRS     r3,r3,r2
003c16  d007              BEQ      |L1.15400|
003c18  b130              CBZ      r0,|L1.15400|
003c1a  2905              CMP      r1,#5
003c1c  dd04              BLE      |L1.15400|
;;;4912   	{
;;;4913   	SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_BAT2,1);
003c1e  69a0              LDR      r0,[r4,#0x18]
003c20  f0400040          ORR      r0,r0,#0x40
003c24  61a0              STR      r0,[r4,#0x18]
003c26  e003              B        |L1.15408|
                  |L1.15400|
;;;4914   	}
;;;4915   else SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_BAT2,1);
003c28  69e0              LDR      r0,[r4,#0x1c]
003c2a  f0400040          ORR      r0,r0,#0x40
003c2e  61e0              STR      r0,[r4,#0x1c]
                  |L1.15408|
;;;4916   
;;;4917   
;;;4918   if(mess_find_unvol((MESS2RELE_HNDL))&&(mess_data[0]==PARAM_RELE_SAMOKALIBR)) 
003c30  20d2              MOVS     r0,#0xd2
003c32  f7fffffe          BL       mess_find_unvol
003c36  4d34              LDR      r5,|L1.15624|
003c38  b110              CBZ      r0,|L1.15424|
003c3a  6828              LDR      r0,[r5,#0]  ; mess_data
003c3c  2864              CMP      r0,#0x64
003c3e  d06e              BEQ      |L1.15646|
                  |L1.15424|
;;;4919   	{
;;;4920   	if(mess_data[1]==1)SET_REG(LPC_GPIO0->FIOSET,1,29,1);
;;;4921   	else if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,29,1);
;;;4922   	}
;;;4923   else SET_REG(LPC_GPIO0->FIOCLR,1,29,1);
003c40  69e0              LDR      r0,[r4,#0x1c]
003c42  f0405000          ORR      r0,r0,#0x20000000
003c46  61e0              STR      r0,[r4,#0x1c]
                  |L1.15432|
;;;4924   
;;;4925   
;;;4926   #ifndef UKU2071x
;;;4927   //Реле аварии сети
;;;4928   if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_AV_NET))
;;;4929   	{
;;;4930   	if(mess_data[1]==0) 			SET_REG(LPC_GPIO3->FIOSET,1,SHIFT_REL_AV_NET,1);
;;;4931   	else 						SET_REG(LPC_GPIO3->FIOCLR,1,SHIFT_REL_AV_NET,1);
;;;4932   	}
;;;4933   else	if(!(avar_ind_stat&0x00000001)) 	SET_REG(LPC_GPIO3->FIOSET,1,SHIFT_REL_AV_NET,1);
;;;4934   else 							SET_REG(LPC_GPIO3->FIOCLR,1,SHIFT_REL_AV_NET,1);
;;;4935   #endif
;;;4936   #ifdef UKU2071x
;;;4937   //Реле аварии сети
;;;4938   if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_AV_NET))
003c48  20d2              MOVS     r0,#0xd2
003c4a  f7fffffe          BL       mess_find_unvol
;;;4939   	{
;;;4940   	if(mess_data[1]==0)				SET_REG(LPC_GPIO3->FIOCLR,1,SHIFT_REL_AV_NET,1); 
;;;4941   	else 						SET_REG(LPC_GPIO3->FIOSET,1,SHIFT_REL_AV_NET,1);
;;;4942   	}
;;;4943   else	if(!(avar_ind_stat&0x00000001))	SET_REG(LPC_GPIO3->FIOCLR,1,SHIFT_REL_AV_NET,1);
003c4e  4e2f              LDR      r6,|L1.15628|
003c50  b110              CBZ      r0,|L1.15448|
003c52  6828              LDR      r0,[r5,#0]            ;4938  ; mess_data
003c54  2866              CMP      r0,#0x66              ;4938
003c56  d073              BEQ      |L1.15680|
                  |L1.15448|
003c58  6830              LDR      r0,[r6,#0]  ; avar_ind_stat
003c5a  07c0              LSLS     r0,r0,#31
003c5c  d07c              BEQ      |L1.15704|
;;;4944   else 					  		SET_REG(LPC_GPIO3->FIOSET,1,SHIFT_REL_AV_NET,1);
003c5e  6fa0              LDR      r0,[r4,#0x78]
003c60  f0407000          ORR      r0,r0,#0x2000000
003c64  67a0              STR      r0,[r4,#0x78]
                  |L1.15462|
;;;4945   #endif
;;;4946   
;;;4947   #ifdef UKU_3U
;;;4948   //Реле аварий батарей
;;;4949   if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_AV_BAT1))
;;;4950   	{
;;;4951   	if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_BAT1,1);
;;;4952   	else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_BAT1,1);
;;;4953        }
;;;4954   else 
;;;4955   	{
;;;4956   	if(!(avar_ind_stat&0x00000002)) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_BAT1,1);
;;;4957        else SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_BAT1,1);
;;;4958   	} 
;;;4959   
;;;4960   if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_AV_BAT2))
;;;4961   	{
;;;4962   	if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_BAT2,1);
;;;4963   	else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_BAT2,1);
;;;4964        }
;;;4965   else 
;;;4966   	{
;;;4967   	if(!(avar_ind_stat&0x00000004)) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_BAT2,1);
;;;4968        else SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_BAT2,1);
;;;4969   	} 
;;;4970   
;;;4971   if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_AV_BPS))
;;;4972   	{
;;;4973   	if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_BPS,1);
;;;4974   	else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_BPS,1);
;;;4975        }
;;;4976   else 
;;;4977   	{
;;;4978   	if(!(avar_ind_stat&0x000007f8)) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_BPS,1);
;;;4979        else SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_BPS,1);
;;;4980   	} 
;;;4981   
;;;4982   #endif
;;;4983   
;;;4984   
;;;4985   #ifdef UKU_GLONASS
;;;4986   //Реле аварий батарей
;;;4987   if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_AV_BAT1))
;;;4988   	{
;;;4989   	if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_BAT1,1);
;;;4990   	else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_BAT1,1);
;;;4991        }
;;;4992   else 
;;;4993   	{
;;;4994   	if(!(avar_ind_stat&0x00000002)) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_BAT1,1);
;;;4995        else SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_BAT1,1);
;;;4996   	} 
;;;4997   
;;;4998   if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_AV_BAT2))
;;;4999   	{
;;;5000   	if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_BAT2,1);
;;;5001   	else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_BAT2,1);
;;;5002        }
;;;5003   else 
;;;5004   	{
;;;5005   	if(!(avar_ind_stat&0x00000004)) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_BAT2,1);
;;;5006        else SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_BAT2,1);
;;;5007   	} 
;;;5008   
;;;5009   if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_AV_BPS))
;;;5010   	{
;;;5011   	if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_BPS,1);
;;;5012   	else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_BPS,1);
;;;5013        }
;;;5014   else 
;;;5015   	{
;;;5016   	if(!(avar_ind_stat&0x000007f8)) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_BPS,1);
;;;5017        else SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_BPS,1);
;;;5018   	} 
;;;5019   
;;;5020   #endif
;;;5021   
;;;5022   #ifdef U 
;;;5023   
;;;5024   #endif
;;;5025   
;;;5026   #ifdef UKU_RSTKM
;;;5027   
;;;5028   //Реле общей аварии
;;;5029   if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_AV_COMM))
;;;5030   	{
;;;5031   	if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_COMM,1);
;;;5032   	else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_COMM,1);
;;;5033   	}
;;;5034   else 
;;;5035   	{
;;;5036        if(  (!(avar_ind_stat&0x00007fff))/* &&
;;;5037             ((!SK_REL_EN[0]) || (sk_av_stat[0]!=sasON))  &&
;;;5038             ((!SK_REL_EN[1]) || (sk_av_stat[1]!=sasON))  &&
;;;5039             ((!SK_REL_EN[2]) || (sk_av_stat[2]!=sasON))  &&
;;;5040             ((!SK_REL_EN[3]) || (sk_av_stat[3]!=sasON))*/  )SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_COMM,1);
;;;5041        else SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_COMM,1);
;;;5042   	}
;;;5043   	
;;;5044   
;;;5045   //Реле освещения
;;;5046   if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_LIGHT))
;;;5047   	{
;;;5048   	if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_LIGHT,1);
;;;5049   	else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_LIGHT,1);
;;;5050        }
;;;5051   else 
;;;5052   	{
;;;5053   	if(sk_av_stat[0]!=sasON) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_LIGHT,1);
;;;5054        else SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_LIGHT,1);
;;;5055   	}
;;;5056   
;;;5057   
;;;5058   //Реле выключения нагрузки
;;;5059   if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_LOAD_OFF))
;;;5060   	{
;;;5061   	if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_LOAD_OFF,1);
;;;5062   	else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_LOAD_OFF,1);
;;;5063        }
;;;5064   else if(tloaddisable_cmnd==0)
;;;5065   	{
;;;5066   	SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_LOAD_OFF,1);
;;;5067   	}
;;;5068   else if((tloaddisable_cmnd)&&(tloaddisable_cmnd<=11))
;;;5069   	{
;;;5070   	SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_LOAD_OFF,1);
;;;5071   	}
;;;5072   
;;;5073   else 
;;;5074   	{
;;;5075   	if(!(tloaddisable_stat==tldsON)) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_LOAD_OFF,1);
;;;5076        else SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_LOAD_OFF,1);
;;;5077   	} 
;;;5078   
;;;5079   //Реле осевого вентилятора
;;;5080   if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_VENT))
;;;5081   	{
;;;5082   	if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_VENT,1);
;;;5083   	else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_VENT,1);
;;;5084   	}
;;;5085   else 
;;;5086   	{
;;;5087   	if(mixer_vent_stat==mvsOFF) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_VENT,1);
;;;5088        else SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_VENT,1);
;;;5089   	} 
;;;5090   
;;;5091   #endif
;;;5092   
;;;5093   #ifdef UKU_KONTUR
;;;5094   
;;;5095   //Реле общей аварии
;;;5096   if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_AV_COMM))
;;;5097   	{
;;;5098   	if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_COMM,1);
;;;5099   	else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_COMM,1);
;;;5100   	}
;;;5101   else 
;;;5102   	{
;;;5103        if(  (!(avar_ind_stat&0x00007fff)) &&
;;;5104             ((!SK_REL_EN[0]) || (sk_av_stat[0]!=sasON))  &&
;;;5105             ((!SK_REL_EN[1]) || (sk_av_stat[1]!=sasON))  &&
;;;5106             ((!SK_REL_EN[2]) || (sk_av_stat[2]!=sasON))  /*&&
;;;5107             ((!SK_REL_EN[3]) || (sk_av_stat[3]!=sasON))*/  )SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_COMM,1);
;;;5108        else SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_COMM,1);
;;;5109   	}
;;;5110   
;;;5111   	
;;;5112   //rel_warm_plazma=0;
;;;5113   //Реле освещения   
;;;5114   /*
;;;5115   if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_WARM))
;;;5116   	{
;;;5117   	if(mess_data[1]==0)
;;;5118   		{
;;;5119   		SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_WARM,1);
;;;5120   		rel_warm_plazma=1;
;;;5121   		}
;;;5122   	else if(mess_data[1]==1) 
;;;5123   		{
;;;5124   		SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_WARM,1);
;;;5125   		rel_warm_plazma=2;
;;;5126   		}
;;;5127        }
;;;5128   else 
;;;5129   	{
;;;5130   	if(warm_stat_k==wsOFF) 
;;;5131   		{
;;;5132   		SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_WARM,1);
;;;5133   		rel_warm_plazma=3;
;;;5134   		}
;;;5135        else 
;;;5136   		{
;;;5137   		SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_WARM,1);
;;;5138   		rel_warm_plazma=4;
;;;5139   		}
;;;5140   	}
;;;5141   */
;;;5142   //Реле освещения
;;;5143   if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_LIGHT))
;;;5144   	{
;;;5145   	if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_LIGHT,1);
;;;5146   	else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_LIGHT,1);
;;;5147        }
;;;5148   else 
;;;5149   	{
;;;5150   	if(sk_av_stat[0]!=sasON) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_LIGHT,1);
;;;5151        else SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_LIGHT,1);
;;;5152   	}
;;;5153   
;;;5154   
;;;5155   
;;;5156   //Реле выключения нагрузки
;;;5157   if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_LOAD_OFF))
;;;5158   	{
;;;5159   	if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_LOAD_OFF,1);
;;;5160   	else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_LOAD_OFF,1);
;;;5161        }
;;;5162   else if(tloaddisable_cmnd==0)
;;;5163   	{
;;;5164   	SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_LOAD_OFF,1);
;;;5165   	}
;;;5166   else if((tloaddisable_cmnd)&&(tloaddisable_cmnd<=11))
;;;5167   	{
;;;5168   	SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_LOAD_OFF,1);
;;;5169   	}
;;;5170   
;;;5171   else 
;;;5172   	{
;;;5173   	if(!(tloaddisable_stat==tldsON)) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_LOAD_OFF,1);
;;;5174        else SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_LOAD_OFF,1);
;;;5175   	} 
;;;5176   
;;;5177   //Реле осевого вентилятора или отопителя
;;;5178   if(RELE_LOG)
;;;5179   	{
;;;5180   	if((mess_find_unvol(MESS2RELE_HNDL))&&(mess_data[0]==PARAM_RELE_VENT_WARM))
;;;5181   		{
;;;5182   		if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_VENT_WARM,1);
;;;5183   		else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_VENT_WARM,1);
;;;5184   		}
;;;5185   	else 
;;;5186   		{
;;;5187   		if(warm_stat_k==wsOFF) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_VENT_WARM,1);
;;;5188   	     else SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_VENT_WARM,1);
;;;5189   		} 
;;;5190   
;;;5191   	}
;;;5192   else 
;;;5193   	{
;;;5194   	if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_VENT_WARM))
;;;5195   		{
;;;5196   		if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_VENT_WARM,1);
;;;5197   		else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_VENT_WARM,1);
;;;5198   		}
;;;5199   	else 
;;;5200   		{
;;;5201   		if(vent_stat_k==vsOFF) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_VENT_WARM,1);
;;;5202   	     else SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_VENT_WARM,1);
;;;5203   		} 
;;;5204   	}
;;;5205   #endif
;;;5206   
;;;5207   #ifdef UKU_6U
;;;5208   //Реле аварий батарей
;;;5209   if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_AV_BAT1))
;;;5210   	{
;;;5211   	if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_BAT1,1);
;;;5212   	else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_BAT1,1);
;;;5213        }
;;;5214   else 
;;;5215   	{
;;;5216   	if(!(avar_ind_stat&0x00000002)) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_BAT1,1);
;;;5217        else SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_BAT1,1);
;;;5218   	} 
;;;5219   
;;;5220   if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_AV_BAT2))
;;;5221   	{
;;;5222   	if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_BAT2,1);
;;;5223   	else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_BAT2,1);
;;;5224       }
;;;5225   else if(NPN_OUT==npnoRELEAVBAT2)
;;;5226   	{
;;;5227   	if(npn_stat==npnsOFF)//&&(mess_find_unvol(MESS2RELE_HNDL))&&(mess_data[0]==PARAM_RELE_NPN))
;;;5228   		{
;;;5229   		/*if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_BAT2,1);
;;;5230   		else if(mess_data[1]==1)*/ SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_BAT2,1);
;;;5231        	}
;;;5232   	else SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_BAT2,1);
;;;5233   	}
;;;5234   else 
;;;5235   	{
;;;5236   	if(!(avar_ind_stat&0x00000004)) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_BAT2,1);
;;;5237       else SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_BAT2,1);
;;;5238   	} 
;;;5239   
;;;5240   if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_AV_BPS))
;;;5241   	{
;;;5242   	if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_BPS,1);
;;;5243   	else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_BPS,1);
;;;5244        }
;;;5245   else 
;;;5246   	{
;;;5247   	if(!(avar_ind_stat&0x000007f8)) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_BPS,1);
;;;5248        else SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_BPS,1);
;;;5249   	} 
;;;5250   
;;;5251   if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_VENT))
;;;5252   	{
;;;5253   	if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_VENT,1);
;;;5254   	else SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_VENT,1);
;;;5255   	}
;;;5256   else if((NPN_OUT==npnoRELEVENT))
;;;5257   	{
;;;5258   	if(npn_stat==npnsOFF)//&&(mess_find_unvol(MESS2RELE_HNDL))&&(mess_data[0]==PARAM_RELE_NPN))
;;;5259   		{
;;;5260   		/*if(mess_data[1]==0)*/ SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_VENT,1);
;;;5261   		//else SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_VENT,1);
;;;5262       	}
;;;5263   	else SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_VENT,1);
;;;5264   	}
;;;5265   else 
;;;5266   	{
;;;5267   	if(!vent_stat) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_VENT,1);
;;;5268   	else SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_VENT,1);
;;;5269   	}
;;;5270   
;;;5271   #endif
;;;5272   
;;;5273   #ifdef UKU_220
;;;5274   //Реле аварий батарей
;;;5275   if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_AV_BAT))
;;;5276   	{
;;;5277   	if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_BAT,1);
;;;5278   	else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_BAT,1);
;;;5279        }
;;;5280   else 
;;;5281   	{
;;;5282   	if(!(avar_ind_stat&0x00000002)) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_BAT,1);
;;;5283        else SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_BAT,1);
;;;5284   	} 
;;;5285   
;;;5286   if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_AV_BPS))
;;;5287   	{
;;;5288   	if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_BPS,1);
;;;5289   	else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_BPS,1);
;;;5290        }
;;;5291   else 
;;;5292   	{
;;;5293   	if(!(avar_ind_stat&0x000007f8)) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_BPS,1);
;;;5294        else SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_BPS,1);
;;;5295   	} 
;;;5296   
;;;5297   if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_VENT))
;;;5298   	{
;;;5299   	if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_VENT,1);
;;;5300   	else SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_VENT,1);
;;;5301   	}
;;;5302   else 
;;;5303   	{
;;;5304   	if((RELE_VENT_LOGIC==0)||(RELE_VENT_LOGIC==1))
;;;5305   		{
;;;5306   		if(vent_stat) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_VENT,1);
;;;5307   		else SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_VENT,1);
;;;5308   		}
;;;5309   	else 
;;;5310   		{
;;;5311   		if((avar_ind_stat&0x00000004)) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_VENT,1);
;;;5312        	else SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_VENT,1);
;;;5313   		}
;;;5314   	}
;;;5315   
;;;5316   #endif
;;;5317   
;;;5318   #ifdef UKU_220_V2
;;;5319   //Реле аварий батарей
;;;5320   if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_AV_BAT))
;;;5321   	{
;;;5322   	if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_BAT,1);
;;;5323   	else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_BAT,1);
;;;5324        }
;;;5325   else 
;;;5326   	{
;;;5327   	if(!(avar_ind_stat&0x00000002)) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_BAT,1);
;;;5328        else SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_BAT,1);
;;;5329   	} 
;;;5330   
;;;5331   if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_AV_BPS))
;;;5332   	{
;;;5333   	if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_BPS,1);
;;;5334   	else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_BPS,1);
;;;5335        }
;;;5336   else 
;;;5337   	{
;;;5338   	if(!(avar_ind_stat&0x000007f8)) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_BPS,1);
;;;5339        else SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_BPS,1);
;;;5340   	} 
;;;5341   
;;;5342   if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_VENT))
;;;5343   	{
;;;5344   	if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_VENT,1);
;;;5345   	else SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_VENT,1);
;;;5346   	}
;;;5347   else 
;;;5348   	{
;;;5349   	if((RELE_VENT_LOGIC==0)||(RELE_VENT_LOGIC==1))
;;;5350   		{
;;;5351   		if(vent_stat) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_VENT,1);
;;;5352   		else SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_VENT,1);
;;;5353   		}
;;;5354   	else 
;;;5355   		{
;;;5356   		if((avar_ind_stat&0x00000004)) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_VENT,1);
;;;5357        	else SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_VENT,1);
;;;5358   		}
;;;5359   	}
;;;5360   
;;;5361   #endif
;;;5362   
;;;5363   #ifdef UKU_220_IPS_TERMOKOMPENSAT
;;;5364   
;;;5365   if((AUSW_MAIN==22010)||(AUSW_MAIN==22011))
003c66  482a              LDR      r0,|L1.15632|
;;;5366   	{
;;;5367   	#ifndef UKU2071x
;;;5368   	if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_AV_NET))
;;;5369   		{
;;;5370   		if(mess_data[1]==0) SET_REG(LPC_GPIO3->FIOSET,1,25,1);
;;;5371   		else SET_REG(LPC_GPIO3->FIOCLR,1,25,1);
;;;5372   		}
;;;5373   	else	if(!(avar_ind_stat&0x00000001)) SET_REG(LPC_GPIO3->FIOSET,1,25,1);
;;;5374   	else SET_REG(LPC_GPIO3->FIOCLR,1,25,1);
;;;5375   	#endif
;;;5376   
;;;5377   	#ifdef UKU2071x
;;;5378   		#ifndef APSENERGIA
;;;5379   		if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_AV_NET))
;;;5380   			{
;;;5381   			if(mess_data[1]==0) SET_REG(LPC_GPIO3->FIOCLR,1,25,1);
;;;5382   			else SET_REG(LPC_GPIO3->FIOSET,1,25,1);
;;;5383   			}
;;;5384   		else	if(!(avar_ind_stat&0x00000001)) SET_REG(LPC_GPIO3->FIOCLR,1,25,1);
;;;5385   		else SET_REG(LPC_GPIO3->FIOSET,1,25,1);
;;;5386   		#endif
;;;5387   
;;;5388   		#ifdef APSENERGIA
;;;5389   		if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_AV_NET))
;;;5390   			{
;;;5391   			if(mess_data[1]==0) SET_REG(LPC_GPIO3->FIOCLR,1,25,1);
;;;5392   			else SET_REG(LPC_GPIO3->FIOSET,1,25,1);
;;;5393   			}
;;;5394   		else if((mess_find_unvol(MESS2RELE_HNDL))&& (mess_data[0]==PARAM_RELE_BAT_IS_DISCHARGED))  SET_REG(LPC_GPIO3->FIOCLR,1,25,1);
;;;5395   		else SET_REG(LPC_GPIO3->FIOSET,1,25,1);
;;;5396   		#endif
;;;5397   
;;;5398   	#endif
;;;5399   	if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_AV_BPS))
;;;5400   		{
;;;5401   		if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,7,1);
;;;5402   		else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOSET,1,7,1);
;;;5403   	     }
;;;5404   	else 
;;;5405   		{
;;;5406   		if(!(avar_ind_stat&0x100007f8)) SET_REG(LPC_GPIO0->FIOCLR,1,7,1);
;;;5407   	     else SET_REG(LPC_GPIO0->FIOSET,1,7,1);
;;;5408   		} 
;;;5409   
;;;5410   	//Реле аварий батарей
;;;5411   	#ifndef APSENERGIA
;;;5412   	if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_AV_BAT))
;;;5413   		{
;;;5414   		if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,4,1);
;;;5415   		else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOSET,1,4,1);
;;;5416        	}
;;;5417   	else 
;;;5418   		{
;;;5419   		if(!(ips_bat_av_stat)) SET_REG(LPC_GPIO0->FIOCLR,1,4,1);
003c68  f8df80a8          LDR      r8,|L1.15636|
003c6c  4f2a              LDR      r7,|L1.15640|
003c6e  8800              LDRH     r0,[r0,#0]            ;5365  ; AUSW_MAIN
003c70  f5a041aa          SUB      r1,r0,#0x5500         ;5365
003c74  39fa              SUBS     r1,r1,#0xfa           ;5365
003c76  d001              BEQ      |L1.15484|
003c78  1e49              SUBS     r1,r1,#1              ;5365
003c7a  d172              BNE      |L1.15714|
                  |L1.15484|
003c7c  20d2              MOVS     r0,#0xd2              ;5379
003c7e  f7fffffe          BL       mess_find_unvol
003c82  b110              CBZ      r0,|L1.15498|
003c84  6828              LDR      r0,[r5,#0]            ;5379  ; mess_data
003c86  2866              CMP      r0,#0x66              ;5379
003c88  d06e              BEQ      |L1.15720|
                  |L1.15498|
003c8a  6830              LDR      r0,[r6,#0]            ;5384  ; avar_ind_stat
003c8c  07c0              LSLS     r0,r0,#31             ;5384
003c8e  d077              BEQ      |L1.15744|
003c90  6fa0              LDR      r0,[r4,#0x78]         ;5385
003c92  f0407000          ORR      r0,r0,#0x2000000      ;5385
003c96  67a0              STR      r0,[r4,#0x78]         ;5385
                  |L1.15512|
003c98  20d2              MOVS     r0,#0xd2              ;5399
003c9a  f7fffffe          BL       mess_find_unvol
003c9e  b110              CBZ      r0,|L1.15526|
003ca0  6828              LDR      r0,[r5,#0]            ;5399  ; mess_data
003ca2  286a              CMP      r0,#0x6a              ;5399
003ca4  d073              BEQ      |L1.15758|
                  |L1.15526|
003ca6  6830              LDR      r0,[r6,#0]            ;5406  ; avar_ind_stat
003ca8  4238              TST      r0,r7                 ;5406
003caa  d07f              BEQ      |L1.15788|
003cac  69a0              LDR      r0,[r4,#0x18]         ;5407
003cae  f0400080          ORR      r0,r0,#0x80           ;5407
003cb2  61a0              STR      r0,[r4,#0x18]         ;5407
                  |L1.15540|
003cb4  20d2              MOVS     r0,#0xd2              ;5412
003cb6  f7fffffe          BL       mess_find_unvol
003cba  b110              CBZ      r0,|L1.15554|
003cbc  6828              LDR      r0,[r5,#0]            ;5412  ; mess_data
003cbe  2867              CMP      r0,#0x67              ;5412
003cc0  d079              BEQ      |L1.15798|
                  |L1.15554|
003cc2  f8980000          LDRB     r0,[r8,#0]  ; ips_bat_av_stat
003cc6  b348              CBZ      r0,|L1.15644|
;;;5420        	else SET_REG(LPC_GPIO0->FIOSET,1,4,1);
003cc8  69a0              LDR      r0,[r4,#0x18]
003cca  f0400010          ORR      r0,r0,#0x10
003cce  61a0              STR      r0,[r4,#0x18]
003cd0  e1fe              B        |L1.16592|
003cd2  e024              B        |L1.15646|
                  |L1.15572|
                          DCD      ||.bss||+0x42c
                  |L1.15576|
                          DCD      ||.bss||+0xc
                  |L1.15580|
                          DCD      0x40034000
                  |L1.15584|
                          DCD      0x2009c000
                  |L1.15588|
                          DCD      ||area_number.25||
                  |L1.15592|
                          DCD      bps
                  |L1.15596|
                          DCD      NUMIST
                  |L1.15600|
                          DCD      0x4002c000
                  |L1.15604|
                          DCD      0xfff000ff
                  |L1.15608|
                          DCD      bat
                  |L1.15612|
                          DCD      tbatdisable_stat
                  |L1.15616|
                          DCD      tbatdisable_cmnd
                  |L1.15620|
                          DCD      main_1Hz_cnt
                  |L1.15624|
                          DCD      mess_data
                  |L1.15628|
                          DCD      avar_ind_stat
                  |L1.15632|
                          DCD      AUSW_MAIN
                  |L1.15636|
                          DCD      ips_bat_av_stat
                  |L1.15640|
                          DCD      0x100007f8
                  |L1.15644|
003d1c  e05a              B        |L1.15828|
                  |L1.15646|
003d1e  6868              LDR      r0,[r5,#4]            ;4920  ; mess_data
003d20  2801              CMP      r0,#1                 ;4920
003d22  d006              BEQ      |L1.15666|
003d24  2800              CMP      r0,#0                 ;4921
003d26  d18f              BNE      |L1.15432|
003d28  69e0              LDR      r0,[r4,#0x1c]         ;4921
003d2a  f0405000          ORR      r0,r0,#0x20000000     ;4921
003d2e  61e0              STR      r0,[r4,#0x1c]         ;4921
003d30  e78a              B        |L1.15432|
                  |L1.15666|
003d32  69a0              LDR      r0,[r4,#0x18]         ;4920
003d34  f0405000          ORR      r0,r0,#0x20000000     ;4920
003d38  61a0              STR      r0,[r4,#0x18]         ;4920
003d3a  e785              B        |L1.15432|
003d3c  e000              B        |L1.15680|
003d3e  e00b              B        |L1.15704|
                  |L1.15680|
003d40  6868              LDR      r0,[r5,#4]            ;4940  ; mess_data
003d42  b120              CBZ      r0,|L1.15694|
003d44  6fa0              LDR      r0,[r4,#0x78]         ;4941
003d46  f0407000          ORR      r0,r0,#0x2000000      ;4941
003d4a  67a0              STR      r0,[r4,#0x78]         ;4941
003d4c  e78b              B        |L1.15462|
                  |L1.15694|
003d4e  6fe0              LDR      r0,[r4,#0x7c]         ;4940
003d50  f0407000          ORR      r0,r0,#0x2000000      ;4940
003d54  67e0              STR      r0,[r4,#0x7c]         ;4940
003d56  e786              B        |L1.15462|
                  |L1.15704|
003d58  6fe0              LDR      r0,[r4,#0x7c]         ;4943
003d5a  f0407000          ORR      r0,r0,#0x2000000      ;4943
003d5e  67e0              STR      r0,[r4,#0x7c]         ;4943
003d60  e781              B        |L1.15462|
                  |L1.15714|
003d62  e03c              B        |L1.15838|
003d64  e000              B        |L1.15720|
003d66  e00b              B        |L1.15744|
                  |L1.15720|
003d68  6868              LDR      r0,[r5,#4]            ;5381  ; mess_data
003d6a  b120              CBZ      r0,|L1.15734|
003d6c  6fa0              LDR      r0,[r4,#0x78]         ;5382
003d6e  f0407000          ORR      r0,r0,#0x2000000      ;5382
003d72  67a0              STR      r0,[r4,#0x78]         ;5382
003d74  e790              B        |L1.15512|
                  |L1.15734|
003d76  6fe0              LDR      r0,[r4,#0x7c]         ;5381
003d78  f0407000          ORR      r0,r0,#0x2000000      ;5381
003d7c  67e0              STR      r0,[r4,#0x7c]         ;5381
003d7e  e78b              B        |L1.15512|
                  |L1.15744|
003d80  6fe0              LDR      r0,[r4,#0x7c]         ;5384
003d82  f0407000          ORR      r0,r0,#0x2000000      ;5384
003d86  67e0              STR      r0,[r4,#0x7c]         ;5384
003d88  e786              B        |L1.15512|
003d8a  e000              B        |L1.15758|
003d8c  e00e              B        |L1.15788|
                  |L1.15758|
003d8e  6868              LDR      r0,[r5,#4]            ;5401  ; mess_data
003d90  b130              CBZ      r0,|L1.15776|
003d92  2801              CMP      r0,#1                 ;5402
003d94  d18e              BNE      |L1.15540|
003d96  69a0              LDR      r0,[r4,#0x18]         ;5402
003d98  f0400080          ORR      r0,r0,#0x80           ;5402
003d9c  61a0              STR      r0,[r4,#0x18]         ;5402
003d9e  e789              B        |L1.15540|
                  |L1.15776|
003da0  69e0              LDR      r0,[r4,#0x1c]         ;5401
003da2  f0400080          ORR      r0,r0,#0x80           ;5401
003da6  61e0              STR      r0,[r4,#0x1c]         ;5401
003da8  e784              B        |L1.15540|
003daa  e004              B        |L1.15798|
                  |L1.15788|
003dac  69e0              LDR      r0,[r4,#0x1c]         ;5406
003dae  f0400080          ORR      r0,r0,#0x80           ;5406
003db2  61e0              STR      r0,[r4,#0x1c]         ;5406
003db4  e77e              B        |L1.15540|
                  |L1.15798|
003db6  6868              LDR      r0,[r5,#4]            ;5414  ; mess_data
003db8  b110              CBZ      r0,|L1.15808|
003dba  2801              CMP      r0,#1                 ;5415
003dbc  d005              BEQ      |L1.15818|
003dbe  e187              B        |L1.16592|
                  |L1.15808|
003dc0  69e0              LDR      r0,[r4,#0x1c]         ;5414
003dc2  f0400010          ORR      r0,r0,#0x10           ;5414
003dc6  61e0              STR      r0,[r4,#0x1c]         ;5414
003dc8  e182              B        |L1.16592|
                  |L1.15818|
003dca  69a0              LDR      r0,[r4,#0x18]         ;5415
003dcc  f0400010          ORR      r0,r0,#0x10           ;5415
003dd0  61a0              STR      r0,[r4,#0x18]         ;5415
003dd2  e17d              B        |L1.16592|
                  |L1.15828|
003dd4  69e0              LDR      r0,[r4,#0x1c]         ;5419
003dd6  f0400010          ORR      r0,r0,#0x10           ;5419
003dda  61e0              STR      r0,[r4,#0x1c]         ;5419
003ddc  e178              B        |L1.16592|
                  |L1.15838|
;;;5421   		}
;;;5422   	#endif
;;;5423   	#ifdef APSENERGIA
;;;5424   	if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_AV_BAT))
;;;5425   		{
;;;5426   		if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,4,1);
;;;5427   		else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOSET,1,4,1);
;;;5428        	}
;;;5429   	else 
;;;5430   		{
;;;5431   		if(!apsEnergiaStat)SET_REG(LPC_GPIO0->FIOSET,1,4,1);
;;;5432   		else SET_REG(LPC_GPIO0->FIOCLR,1,4,1);
;;;5433   		}
;;;5434   	#endif
;;;5435   	}
;;;5436   
;;;5437   else	if(AUSW_MAIN==22023)
003dde  f5a041ac          SUB      r1,r0,#0x5600
003de2  3907              SUBS     r1,#7
003de4  d162              BNE      |L1.16044|
;;;5438   	{
;;;5439   
;;;5440   	//Реле аварий батарей
;;;5441   	if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_AV_BAT))
003de6  20d2              MOVS     r0,#0xd2
003de8  f7fffffe          BL       mess_find_unvol
003dec  b110              CBZ      r0,|L1.15860|
003dee  6828              LDR      r0,[r5,#0]  ; mess_data
003df0  2867              CMP      r0,#0x67
003df2  d023              BEQ      |L1.15932|
                  |L1.15860|
;;;5442   		{
;;;5443   		if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,4,1);
;;;5444   		else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOSET,1,4,1);
;;;5445        	}
;;;5446   	else 
;;;5447   		{
;;;5448   		if(!(ips_bat_av_stat)) SET_REG(LPC_GPIO0->FIOCLR,1,4,1);
003df4  f8980000          LDRB     r0,[r8,#0]  ; ips_bat_av_stat
003df8  b370              CBZ      r0,|L1.15960|
;;;5449        	else SET_REG(LPC_GPIO0->FIOSET,1,4,1);
003dfa  69a0              LDR      r0,[r4,#0x18]
003dfc  f0400010          ORR      r0,r0,#0x10
003e00  61a0              STR      r0,[r4,#0x18]
                  |L1.15874|
;;;5450   		} 
;;;5451   
;;;5452   
;;;5453   	//Реле аварии сети ТУТ КАКАЯ то ЛАЖА с аварией сети. Обращение к разным портам
;;;5454   	#ifndef UKU2071x
;;;5455   	if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_AV_NET))
;;;5456   		{
;;;5457   		if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_NET,1);
;;;5458   		else SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_NET,1);
;;;5459   		}
;;;5460   	else	if(!(avar_ind_stat&0x00000001)) SET_REG(LPC_GPIO1->FIOCLR,1,SHIFT_REL_AV_NET,1);
;;;5461   	else SET_REG(LPC_GPIO3->FIOCLR,1,SHIFT_REL_AV_NET,1);
;;;5462   	#endif
;;;5463   	#ifdef UKU2071x
;;;5464   	if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_AV_NET))
003e02  20d2              MOVS     r0,#0xd2
003e04  f7fffffe          BL       mess_find_unvol
003e08  b110              CBZ      r0,|L1.15888|
003e0a  6828              LDR      r0,[r5,#0]  ; mess_data
003e0c  2866              CMP      r0,#0x66
003e0e  d028              BEQ      |L1.15970|
                  |L1.15888|
;;;5465   		{
;;;5466   		if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_NET,1);
;;;5467   		else SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_NET,1);
;;;5468   		}
;;;5469   	else	if(!(avar_ind_stat&0x00000001)) SET_REG(LPC_GPIO1->FIOSET,1,SHIFT_REL_AV_NET,1);
003e10  6830              LDR      r0,[r6,#0]  ; avar_ind_stat
003e12  07c0              LSLS     r0,r0,#31
003e14  d031              BEQ      |L1.15994|
;;;5470   	else SET_REG(LPC_GPIO3->FIOSET,1,SHIFT_REL_AV_NET,1);
003e16  6fa0              LDR      r0,[r4,#0x78]
003e18  f0407000          ORR      r0,r0,#0x2000000
003e1c  67a0              STR      r0,[r4,#0x78]
                  |L1.15902|
;;;5471   	#endif
;;;5472   
;;;5473   	if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_AV_BPS))
003e1e  20d2              MOVS     r0,#0xd2
003e20  f7fffffe          BL       mess_find_unvol
003e24  b110              CBZ      r0,|L1.15916|
003e26  6828              LDR      r0,[r5,#0]  ; mess_data
003e28  286a              CMP      r0,#0x6a
003e2a  d02b              BEQ      |L1.16004|
                  |L1.15916|
;;;5474   		{
;;;5475   		if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,7,1);
;;;5476   		else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOSET,1,7,1);
;;;5477   	     }
;;;5478   	else 
;;;5479   		{
;;;5480   		if(!(avar_ind_stat&0x100007f8)) SET_REG(LPC_GPIO0->FIOCLR,1,7,1);
003e2c  6830              LDR      r0,[r6,#0]  ; avar_ind_stat
003e2e  4238              TST      r0,r7
003e30  d037              BEQ      |L1.16034|
;;;5481   	     else SET_REG(LPC_GPIO0->FIOSET,1,7,1);
003e32  69a0              LDR      r0,[r4,#0x18]
003e34  f0400080          ORR      r0,r0,#0x80
003e38  61a0              STR      r0,[r4,#0x18]
003e3a  e149              B        |L1.16592|
                  |L1.15932|
003e3c  6868              LDR      r0,[r5,#4]            ;5443  ; mess_data
003e3e  b130              CBZ      r0,|L1.15950|
003e40  2801              CMP      r0,#1                 ;5444
003e42  d1de              BNE      |L1.15874|
003e44  69a0              LDR      r0,[r4,#0x18]         ;5444
003e46  f0400010          ORR      r0,r0,#0x10           ;5444
003e4a  61a0              STR      r0,[r4,#0x18]         ;5444
003e4c  e7d9              B        |L1.15874|
                  |L1.15950|
003e4e  69e0              LDR      r0,[r4,#0x1c]         ;5443
003e50  f0400010          ORR      r0,r0,#0x10           ;5443
003e54  61e0              STR      r0,[r4,#0x1c]         ;5443
003e56  e7d4              B        |L1.15874|
                  |L1.15960|
003e58  69e0              LDR      r0,[r4,#0x1c]         ;5448
003e5a  f0400010          ORR      r0,r0,#0x10           ;5448
003e5e  61e0              STR      r0,[r4,#0x1c]         ;5448
003e60  e7cf              B        |L1.15874|
                  |L1.15970|
003e62  6868              LDR      r0,[r5,#4]            ;5466  ; mess_data
003e64  b120              CBZ      r0,|L1.15984|
003e66  69e0              LDR      r0,[r4,#0x1c]         ;5467
003e68  f0407000          ORR      r0,r0,#0x2000000      ;5467
003e6c  61e0              STR      r0,[r4,#0x1c]         ;5467
003e6e  e7d6              B        |L1.15902|
                  |L1.15984|
003e70  69a0              LDR      r0,[r4,#0x18]         ;5466
003e72  f0407000          ORR      r0,r0,#0x2000000      ;5466
003e76  61a0              STR      r0,[r4,#0x18]         ;5466
003e78  e7d1              B        |L1.15902|
                  |L1.15994|
003e7a  6ba0              LDR      r0,[r4,#0x38]         ;5469
003e7c  f0407000          ORR      r0,r0,#0x2000000      ;5469
003e80  63a0              STR      r0,[r4,#0x38]         ;5469
003e82  e7cc              B        |L1.15902|
                  |L1.16004|
003e84  6868              LDR      r0,[r5,#4]            ;5475  ; mess_data
003e86  b110              CBZ      r0,|L1.16014|
003e88  2801              CMP      r0,#1                 ;5476
003e8a  d005              BEQ      |L1.16024|
003e8c  e120              B        |L1.16592|
                  |L1.16014|
003e8e  69e0              LDR      r0,[r4,#0x1c]         ;5475
003e90  f0400080          ORR      r0,r0,#0x80           ;5475
003e94  61e0              STR      r0,[r4,#0x1c]         ;5475
003e96  e11b              B        |L1.16592|
                  |L1.16024|
003e98  69a0              LDR      r0,[r4,#0x18]         ;5476
003e9a  f0400080          ORR      r0,r0,#0x80           ;5476
003e9e  61a0              STR      r0,[r4,#0x18]         ;5476
003ea0  e116              B        |L1.16592|
                  |L1.16034|
003ea2  69e0              LDR      r0,[r4,#0x1c]         ;5480
003ea4  f0400080          ORR      r0,r0,#0x80           ;5480
003ea8  61e0              STR      r0,[r4,#0x1c]         ;5480
003eaa  e111              B        |L1.16592|
                  |L1.16044|
;;;5482   		} 
;;;5483   	}
;;;5484   else	if((AUSW_MAIN==22043)||(AUSW_MAIN==22044))
003eac  f5a041ac          SUB      r1,r0,#0x5600
003eb0  391b              SUBS     r1,r1,#0x1b
003eb2  d001              BEQ      |L1.16056|
003eb4  1e49              SUBS     r1,r1,#1
003eb6  d170              BNE      |L1.16282|
                  |L1.16056|
;;;5485   	{
;;;5486   	//Реле аварий батарей
;;;5487   	if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_AV_BAT))
003eb8  20d2              MOVS     r0,#0xd2
003eba  f7fffffe          BL       mess_find_unvol
003ebe  b110              CBZ      r0,|L1.16070|
003ec0  6828              LDR      r0,[r5,#0]  ; mess_data
003ec2  2867              CMP      r0,#0x67
003ec4  d031              BEQ      |L1.16170|
                  |L1.16070|
;;;5488   		{
;;;5489   		if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,4,1);
;;;5490   		else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOSET,1,4,1);
;;;5491        	}
;;;5492   	else 
;;;5493   		{
;;;5494   		if(!(ips_bat_av_stat)) SET_REG(LPC_GPIO0->FIOCLR,1,4,1);
003ec6  f8980000          LDRB     r0,[r8,#0]  ; ips_bat_av_stat
003eca  b3b8              CBZ      r0,|L1.16188|
;;;5495        	else SET_REG(LPC_GPIO0->FIOSET,1,4,1);
003ecc  69a0              LDR      r0,[r4,#0x18]
003ece  f0400010          ORR      r0,r0,#0x10
003ed2  61a0              STR      r0,[r4,#0x18]
                  |L1.16084|
;;;5496   		} 
;;;5497   	//Реле аварии сети ТУТ КАКАЯ то ЛАЖА с аварией сети. Обращение к разным портам
;;;5498   	#ifndef UKU2071x 
;;;5499   	if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_AV_NET))
;;;5500   		{
;;;5501   		if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_NET,1);
;;;5502   		else SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_NET,1);
;;;5503   		}
;;;5504   	else	if(!(avar_ind_stat&0x00000001)) SET_REG(LPC_GPIO1->FIOCLR,1,SHIFT_REL_AV_NET,1);
;;;5505   	else SET_REG(LPC_GPIO3->FIOCLR,1,SHIFT_REL_AV_NET,1);
;;;5506   	#endif
;;;5507   	#ifdef UKU2071x 
;;;5508   	if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_AV_NET))
003ed4  20d2              MOVS     r0,#0xd2
003ed6  f7fffffe          BL       mess_find_unvol
003eda  b110              CBZ      r0,|L1.16098|
003edc  6828              LDR      r0,[r5,#0]  ; mess_data
003ede  2866              CMP      r0,#0x66
003ee0  d037              BEQ      |L1.16210|
                  |L1.16098|
;;;5509   		{
;;;5510   		if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_NET,1);
;;;5511   		else SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_NET,1);
;;;5512   		}
;;;5513   	else	if(!(avar_ind_stat&0x00000001)) SET_REG(LPC_GPIO1->FIOSET,1,SHIFT_REL_AV_NET,1);
003ee2  6830              LDR      r0,[r6,#0]  ; avar_ind_stat
003ee4  07c0              LSLS     r0,r0,#31
003ee6  d040              BEQ      |L1.16234|
;;;5514   	else SET_REG(LPC_GPIO3->FIOSET,1,SHIFT_REL_AV_NET,1);
003ee8  6fa0              LDR      r0,[r4,#0x78]
003eea  f0407000          ORR      r0,r0,#0x2000000
003eee  67a0              STR      r0,[r4,#0x78]
                  |L1.16112|
;;;5515   	#endif
;;;5516   
;;;5517   	if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_AV_BPS))
003ef0  20d2              MOVS     r0,#0xd2
003ef2  f7fffffe          BL       mess_find_unvol
003ef6  b110              CBZ      r0,|L1.16126|
003ef8  6828              LDR      r0,[r5,#0]  ; mess_data
003efa  286a              CMP      r0,#0x6a
003efc  d03a              BEQ      |L1.16244|
                  |L1.16126|
;;;5518   		{
;;;5519   		if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,7,1);
;;;5520   		else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOSET,1,7,1);
;;;5521   	     }
;;;5522   	else 
;;;5523   		{
;;;5524   		if(!(avar_ind_stat&0x100007f8)) SET_REG(LPC_GPIO0->FIOCLR,1,7,1);
003efe  6830              LDR      r0,[r6,#0]  ; avar_ind_stat
003f00  4238              TST      r0,r7
003f02  d045              BEQ      |L1.16272|
;;;5525   	     else SET_REG(LPC_GPIO0->FIOSET,1,7,1);
003f04  69a0              LDR      r0,[r4,#0x18]
003f06  f0400080          ORR      r0,r0,#0x80
003f0a  61a0              STR      r0,[r4,#0x18]
                  |L1.16140|
;;;5526   		}
;;;5527   	//Реле аварии БПС
;;;5528   	if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_AV_BPS))
003f0c  20d2              MOVS     r0,#0xd2
003f0e  f7fffffe          BL       mess_find_unvol
003f12  b110              CBZ      r0,|L1.16154|
003f14  6828              LDR      r0,[r5,#0]  ; mess_data
003f16  286a              CMP      r0,#0x6a
003f18  d040              BEQ      |L1.16284|
                  |L1.16154|
;;;5529   		{
;;;5530   		if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_BPS,1);
;;;5531   		else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_BPS,1);
;;;5532        	}
;;;5533   	else 
;;;5534   		{
;;;5535   		if(!(avar_ind_stat&0x100007f8)) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_BPS,1);
003f1a  6830              LDR      r0,[r6,#0]  ; avar_ind_stat
003f1c  4238              TST      r0,r7
003f1e  d04c              BEQ      |L1.16314|
;;;5536        	else SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_BPS,1);
003f20  69a0              LDR      r0,[r4,#0x18]
003f22  f0400020          ORR      r0,r0,#0x20
003f26  61a0              STR      r0,[r4,#0x18]
003f28  e0d2              B        |L1.16592|
                  |L1.16170|
003f2a  6868              LDR      r0,[r5,#4]            ;5489  ; mess_data
003f2c  b138              CBZ      r0,|L1.16190|
003f2e  2801              CMP      r0,#1                 ;5490
003f30  d1d0              BNE      |L1.16084|
003f32  69a0              LDR      r0,[r4,#0x18]         ;5490
003f34  f0400010          ORR      r0,r0,#0x10           ;5490
003f38  61a0              STR      r0,[r4,#0x18]         ;5490
003f3a  e7cb              B        |L1.16084|
                  |L1.16188|
003f3c  e004              B        |L1.16200|
                  |L1.16190|
003f3e  69e0              LDR      r0,[r4,#0x1c]         ;5489
003f40  f0400010          ORR      r0,r0,#0x10           ;5489
003f44  61e0              STR      r0,[r4,#0x1c]         ;5489
003f46  e7c5              B        |L1.16084|
                  |L1.16200|
003f48  69e0              LDR      r0,[r4,#0x1c]         ;5494
003f4a  f0400010          ORR      r0,r0,#0x10           ;5494
003f4e  61e0              STR      r0,[r4,#0x1c]         ;5494
003f50  e7c0              B        |L1.16084|
                  |L1.16210|
003f52  6868              LDR      r0,[r5,#4]            ;5510  ; mess_data
003f54  b120              CBZ      r0,|L1.16224|
003f56  69e0              LDR      r0,[r4,#0x1c]         ;5511
003f58  f0407000          ORR      r0,r0,#0x2000000      ;5511
003f5c  61e0              STR      r0,[r4,#0x1c]         ;5511
003f5e  e7c7              B        |L1.16112|
                  |L1.16224|
003f60  69a0              LDR      r0,[r4,#0x18]         ;5510
003f62  f0407000          ORR      r0,r0,#0x2000000      ;5510
003f66  61a0              STR      r0,[r4,#0x18]         ;5510
003f68  e7c2              B        |L1.16112|
                  |L1.16234|
003f6a  6ba0              LDR      r0,[r4,#0x38]         ;5513
003f6c  f0407000          ORR      r0,r0,#0x2000000      ;5513
003f70  63a0              STR      r0,[r4,#0x38]         ;5513
003f72  e7bd              B        |L1.16112|
                  |L1.16244|
003f74  6868              LDR      r0,[r5,#4]            ;5519  ; mess_data
003f76  b130              CBZ      r0,|L1.16262|
003f78  2801              CMP      r0,#1                 ;5520
003f7a  d1c7              BNE      |L1.16140|
003f7c  69a0              LDR      r0,[r4,#0x18]         ;5520
003f7e  f0400080          ORR      r0,r0,#0x80           ;5520
003f82  61a0              STR      r0,[r4,#0x18]         ;5520
003f84  e7c2              B        |L1.16140|
                  |L1.16262|
003f86  69e0              LDR      r0,[r4,#0x1c]         ;5519
003f88  f0400080          ORR      r0,r0,#0x80           ;5519
003f8c  61e0              STR      r0,[r4,#0x1c]         ;5519
003f8e  e7bd              B        |L1.16140|
                  |L1.16272|
003f90  69e0              LDR      r0,[r4,#0x1c]         ;5524
003f92  f0400080          ORR      r0,r0,#0x80           ;5524
003f96  61e0              STR      r0,[r4,#0x1c]         ;5524
003f98  e7b8              B        |L1.16140|
                  |L1.16282|
003f9a  e013              B        |L1.16324|
                  |L1.16284|
003f9c  6868              LDR      r0,[r5,#4]            ;5530  ; mess_data
003f9e  b110              CBZ      r0,|L1.16294|
003fa0  2801              CMP      r0,#1                 ;5531
003fa2  d005              BEQ      |L1.16304|
003fa4  e094              B        |L1.16592|
                  |L1.16294|
003fa6  69e0              LDR      r0,[r4,#0x1c]         ;5530
003fa8  f0400020          ORR      r0,r0,#0x20           ;5530
003fac  61e0              STR      r0,[r4,#0x1c]         ;5530
003fae  e08f              B        |L1.16592|
                  |L1.16304|
003fb0  69a0              LDR      r0,[r4,#0x18]         ;5531
003fb2  f0400020          ORR      r0,r0,#0x20           ;5531
003fb6  61a0              STR      r0,[r4,#0x18]         ;5531
003fb8  e08a              B        |L1.16592|
                  |L1.16314|
003fba  69e0              LDR      r0,[r4,#0x1c]         ;5535
003fbc  f0400020          ORR      r0,r0,#0x20           ;5535
003fc0  61e0              STR      r0,[r4,#0x1c]         ;5535
003fc2  e085              B        |L1.16592|
                  |L1.16324|
;;;5537   		} 
;;;5538   	}
;;;5539   else	if((AUSW_MAIN==22033)||(AUSW_MAIN==22018))
003fc4  f5a041ac          SUB      r1,r0,#0x5600
003fc8  3911              SUBS     r1,r1,#0x11
003fca  d001              BEQ      |L1.16336|
003fcc  310f              ADDS     r1,r1,#0xf
003fce  d163              BNE      |L1.16536|
                  |L1.16336|
;;;5540   	{
;;;5541   	#ifndef UKU2071x 
;;;5542   	if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_AV_NET))
;;;5543   		{
;;;5544   		if(mess_data[1]==0) SET_REG(LPC_GPIO3->FIOSET,1,25,1);
;;;5545   		else SET_REG(LPC_GPIO3->FIOCLR,1,25,1);
;;;5546   		}
;;;5547   	else	if(!(avar_ind_stat&0x00000001)) SET_REG(LPC_GPIO3->FIOSET,1,25,1);
;;;5548   	else SET_REG(LPC_GPIO3->FIOCLR,1,25,1);
;;;5549   	#endif
;;;5550   	#ifdef UKU2071x 
;;;5551   	if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_AV_NET))
003fd0  20d2              MOVS     r0,#0xd2
003fd2  f7fffffe          BL       mess_find_unvol
003fd6  b110              CBZ      r0,|L1.16350|
003fd8  6828              LDR      r0,[r5,#0]  ; mess_data
003fda  2866              CMP      r0,#0x66
003fdc  d023              BEQ      |L1.16422|
                  |L1.16350|
;;;5552   		{
;;;5553   		if(mess_data[1]==0) SET_REG(LPC_GPIO3->FIOCLR,1,25,1);
;;;5554   		else SET_REG(LPC_GPIO3->FIOSET,1,25,1);
;;;5555   		}
;;;5556   	else	if(!(avar_ind_stat&0x00000001)) SET_REG(LPC_GPIO3->FIOCLR,1,25,1);
003fde  6830              LDR      r0,[r6,#0]  ; avar_ind_stat
003fe0  07c0              LSLS     r0,r0,#31
003fe2  d02c              BEQ      |L1.16446|
;;;5557   	else SET_REG(LPC_GPIO3->FIOSET,1,25,1);
003fe4  6fa0              LDR      r0,[r4,#0x78]
003fe6  f0407000          ORR      r0,r0,#0x2000000
003fea  67a0              STR      r0,[r4,#0x78]
                  |L1.16364|
;;;5558   	#endif
;;;5559   	
;;;5560   	
;;;5561   	if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_AV_BPS))
003fec  20d2              MOVS     r0,#0xd2
003fee  f7fffffe          BL       mess_find_unvol
003ff2  b110              CBZ      r0,|L1.16378|
003ff4  6828              LDR      r0,[r5,#0]  ; mess_data
003ff6  286a              CMP      r0,#0x6a
003ff8  d026              BEQ      |L1.16456|
                  |L1.16378|
;;;5562   		{
;;;5563   		if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,7,1);
;;;5564   		else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOSET,1,7,1);
;;;5565   	     }
;;;5566   	else 
;;;5567   		{
;;;5568   		if(!(avar_ind_stat&0x100007f8)) SET_REG(LPC_GPIO0->FIOCLR,1,7,1);
003ffa  6830              LDR      r0,[r6,#0]  ; avar_ind_stat
003ffc  4238              TST      r0,r7
003ffe  d031              BEQ      |L1.16484|
;;;5569   	     else SET_REG(LPC_GPIO0->FIOSET,1,7,1);
004000  69a0              LDR      r0,[r4,#0x18]
004002  f0400080          ORR      r0,r0,#0x80
004006  61a0              STR      r0,[r4,#0x18]
                  |L1.16392|
;;;5570   		} 
;;;5571   
;;;5572   	//Реле аварий батарей
;;;5573   	if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_AV_BAT))
004008  20d2              MOVS     r0,#0xd2
00400a  f7fffffe          BL       mess_find_unvol
00400e  b110              CBZ      r0,|L1.16406|
004010  6828              LDR      r0,[r5,#0]  ; mess_data
004012  2867              CMP      r0,#0x67
004014  d02b              BEQ      |L1.16494|
                  |L1.16406|
;;;5574   		{
;;;5575   		if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,4,1);
;;;5576   		else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOSET,1,4,1);
;;;5577        	}
;;;5578   	else 
;;;5579   		{
;;;5580   		if(!(ips_bat_av_stat)) SET_REG(LPC_GPIO0->FIOCLR,1,4,1);
004016  f8980000          LDRB     r0,[r8,#0]  ; ips_bat_av_stat
00401a  b390              CBZ      r0,|L1.16514|
;;;5581        	else SET_REG(LPC_GPIO0->FIOSET,1,4,1);
00401c  69a0              LDR      r0,[r4,#0x18]
00401e  f0400010          ORR      r0,r0,#0x10
004022  61a0              STR      r0,[r4,#0x18]
004024  e054              B        |L1.16592|
                  |L1.16422|
004026  6868              LDR      r0,[r5,#4]            ;5553  ; mess_data
004028  b120              CBZ      r0,|L1.16436|
00402a  6fa0              LDR      r0,[r4,#0x78]         ;5554
00402c  f0407000          ORR      r0,r0,#0x2000000      ;5554
004030  67a0              STR      r0,[r4,#0x78]         ;5554
004032  e7db              B        |L1.16364|
                  |L1.16436|
004034  6fe0              LDR      r0,[r4,#0x7c]         ;5553
004036  f0407000          ORR      r0,r0,#0x2000000      ;5553
00403a  67e0              STR      r0,[r4,#0x7c]         ;5553
00403c  e7d6              B        |L1.16364|
                  |L1.16446|
00403e  6fe0              LDR      r0,[r4,#0x7c]         ;5556
004040  f0407000          ORR      r0,r0,#0x2000000      ;5556
004044  67e0              STR      r0,[r4,#0x7c]         ;5556
004046  e7d1              B        |L1.16364|
                  |L1.16456|
004048  6868              LDR      r0,[r5,#4]            ;5563  ; mess_data
00404a  b130              CBZ      r0,|L1.16474|
00404c  2801              CMP      r0,#1                 ;5564
00404e  d1db              BNE      |L1.16392|
004050  69a0              LDR      r0,[r4,#0x18]         ;5564
004052  f0400080          ORR      r0,r0,#0x80           ;5564
004056  61a0              STR      r0,[r4,#0x18]         ;5564
004058  e7d6              B        |L1.16392|
                  |L1.16474|
00405a  69e0              LDR      r0,[r4,#0x1c]         ;5563
00405c  f0400080          ORR      r0,r0,#0x80           ;5563
004060  61e0              STR      r0,[r4,#0x1c]         ;5563
004062  e7d1              B        |L1.16392|
                  |L1.16484|
004064  69e0              LDR      r0,[r4,#0x1c]         ;5568
004066  f0400080          ORR      r0,r0,#0x80           ;5568
00406a  61e0              STR      r0,[r4,#0x1c]         ;5568
00406c  e7cc              B        |L1.16392|
                  |L1.16494|
00406e  6868              LDR      r0,[r5,#4]            ;5575  ; mess_data
004070  b110              CBZ      r0,|L1.16504|
004072  2801              CMP      r0,#1                 ;5576
004074  d006              BEQ      |L1.16516|
004076  e02b              B        |L1.16592|
                  |L1.16504|
004078  69e0              LDR      r0,[r4,#0x1c]         ;5575
00407a  f0400010          ORR      r0,r0,#0x10           ;5575
00407e  61e0              STR      r0,[r4,#0x1c]         ;5575
004080  e026              B        |L1.16592|
                  |L1.16514|
004082  e004              B        |L1.16526|
                  |L1.16516|
004084  69a0              LDR      r0,[r4,#0x18]         ;5576
004086  f0400010          ORR      r0,r0,#0x10           ;5576
00408a  61a0              STR      r0,[r4,#0x18]         ;5576
00408c  e020              B        |L1.16592|
                  |L1.16526|
00408e  69e0              LDR      r0,[r4,#0x1c]         ;5580
004090  f0400010          ORR      r0,r0,#0x10           ;5580
004094  61e0              STR      r0,[r4,#0x1c]         ;5580
004096  e01b              B        |L1.16592|
                  |L1.16536|
;;;5582   		} 
;;;5583   	} 	 
;;;5584   else	
;;;5585   	{
;;;5586   	//Реле аварии сети ТУТ КАКАЯ то ЛАЖА с аварией сети. Обращение к разным портам
;;;5587   	#ifndef UKU2071x 
;;;5588   	if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_AV_NET))
;;;5589   		{
;;;5590   		if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_NET,1);
;;;5591   		else SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_NET,1);
;;;5592   		}
;;;5593   	else	if(!(avar_ind_stat&0x00000001)) SET_REG(LPC_GPIO1->FIOCLR,1,SHIFT_REL_AV_NET,1);
;;;5594   	else SET_REG(LPC_GPIO3->FIOCLR,1,SHIFT_REL_AV_NET,1);
;;;5595   	#endif
;;;5596   	#ifdef UKU2071x 
;;;5597   	if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_AV_NET))
004098  20d2              MOVS     r0,#0xd2
00409a  f7fffffe          BL       mess_find_unvol
00409e  b110              CBZ      r0,|L1.16550|
0040a0  6828              LDR      r0,[r5,#0]  ; mess_data
0040a2  2866              CMP      r0,#0x66
0040a4  d026              BEQ      |L1.16628|
                  |L1.16550|
;;;5598   		{
;;;5599   		if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_NET,1);
;;;5600   		else SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_NET,1);
;;;5601   		}
;;;5602   	else	if(!(avar_ind_stat&0x00000001)) SET_REG(LPC_GPIO1->FIOSET,1,SHIFT_REL_AV_NET,1);
0040a6  6830              LDR      r0,[r6,#0]  ; avar_ind_stat
0040a8  07c0              LSLS     r0,r0,#31
0040aa  d02f              BEQ      |L1.16652|
;;;5603   	else SET_REG(LPC_GPIO3->FIOSET,1,SHIFT_REL_AV_NET,1);
0040ac  6fa0              LDR      r0,[r4,#0x78]
0040ae  f0407000          ORR      r0,r0,#0x2000000
0040b2  67a0              STR      r0,[r4,#0x78]
                  |L1.16564|
;;;5604   	#endif
;;;5605   
;;;5606   	if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_AV_BPS))
0040b4  20d2              MOVS     r0,#0xd2
0040b6  f7fffffe          BL       mess_find_unvol
0040ba  b110              CBZ      r0,|L1.16578|
0040bc  6828              LDR      r0,[r5,#0]  ; mess_data
0040be  286a              CMP      r0,#0x6a
0040c0  d029              BEQ      |L1.16662|
                  |L1.16578|
;;;5607   		{
;;;5608   		if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_BPS,1);
;;;5609   		else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_BPS,1);
;;;5610        	}
;;;5611   	else 
;;;5612   		{
;;;5613   		if(!(avar_ind_stat&0x100007f8)) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_BPS,1);
0040c2  6830              LDR      r0,[r6,#0]  ; avar_ind_stat
0040c4  4238              TST      r0,r7
0040c6  d034              BEQ      |L1.16690|
;;;5614        	else SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_BPS,1);
0040c8  69a0              LDR      r0,[r4,#0x18]
0040ca  f0400020          ORR      r0,r0,#0x20
0040ce  61a0              STR      r0,[r4,#0x18]
                  |L1.16592|
;;;5615   		}
;;;5616   	}
;;;5617   //Дополнительное реле УКУ 
;;;5618   if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_EXT))	 
0040d0  20d2              MOVS     r0,#0xd2
0040d2  f7fffffe          BL       mess_find_unvol
;;;5619   	{
;;;5620   	if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,9,1);
;;;5621   	else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOSET,1,9,1);
;;;5622   	}
;;;5623   else if(DOP_RELE_FUNC==0)	//если допреле подключено к ускоренному заряду
;;;5624   	{
;;;5625   	if((!speedChIsOn)&&(spc_stat!=spcVZ)&&(hv_vz_stat==hvsOFF)&&(sp_ch_stat==scsOFF)&&(vz1_stat==vz1sOFF)&&(vz2_stat==vz2sOFF)&&(load_U/10<UVENTOFF))   SET_REG(LPC_GPIO0->FIOCLR,1,9,1);
0040d6  f8df83fc          LDR      r8,|L1.17620|
0040da  4fff              LDR      r7,|L1.17624|
0040dc  4eff              LDR      r6,|L1.17628|
0040de  b110              CBZ      r0,|L1.16614|
0040e0  6828              LDR      r0,[r5,#0]            ;5618  ; mess_data
0040e2  2871              CMP      r0,#0x71              ;5618
0040e4  d02a              BEQ      |L1.16700|
                  |L1.16614|
0040e6  48fe              LDR      r0,|L1.17632|
0040e8  f9b00000          LDRSH    r0,[r0,#0]            ;5623  ; DOP_RELE_FUNC
0040ec  b380              CBZ      r0,|L1.16720|
;;;5626   	else if((speedChIsOn)||(spc_stat==spcVZ)||(hv_vz_stat!=hvsOFF)||(sp_ch_stat!=scsOFF)||(vz1_stat!=vz1sOFF)||(vz2_stat!=vz2sOFF)) SET_REG(LPC_GPIO0->FIOSET,1,9,1);
;;;5627   	}
;;;5628   else if(DOP_RELE_FUNC==1)  //если допреле подключено к индикации разряженной батареи
0040ee  2801              CMP      r0,#1
0040f0  d066              BEQ      |L1.16832|
0040f2  e070              B        |L1.16854|
                  |L1.16628|
0040f4  6868              LDR      r0,[r5,#4]            ;5599  ; mess_data
0040f6  b120              CBZ      r0,|L1.16642|
0040f8  69e0              LDR      r0,[r4,#0x1c]         ;5600
0040fa  f0407000          ORR      r0,r0,#0x2000000      ;5600
0040fe  61e0              STR      r0,[r4,#0x1c]         ;5600
004100  e7d8              B        |L1.16564|
                  |L1.16642|
004102  69a0              LDR      r0,[r4,#0x18]         ;5599
004104  f0407000          ORR      r0,r0,#0x2000000      ;5599
004108  61a0              STR      r0,[r4,#0x18]         ;5599
00410a  e7d3              B        |L1.16564|
                  |L1.16652|
00410c  6ba0              LDR      r0,[r4,#0x38]         ;5602
00410e  f0407000          ORR      r0,r0,#0x2000000      ;5602
004112  63a0              STR      r0,[r4,#0x38]         ;5602
004114  e7ce              B        |L1.16564|
                  |L1.16662|
004116  6868              LDR      r0,[r5,#4]            ;5608  ; mess_data
004118  b130              CBZ      r0,|L1.16680|
00411a  2801              CMP      r0,#1                 ;5609
00411c  d1d8              BNE      |L1.16592|
00411e  69a0              LDR      r0,[r4,#0x18]         ;5609
004120  f0400020          ORR      r0,r0,#0x20           ;5609
004124  61a0              STR      r0,[r4,#0x18]         ;5609
004126  e7d3              B        |L1.16592|
                  |L1.16680|
004128  69e0              LDR      r0,[r4,#0x1c]         ;5608
00412a  f0400020          ORR      r0,r0,#0x20           ;5608
00412e  61e0              STR      r0,[r4,#0x1c]         ;5608
004130  e7ce              B        |L1.16592|
                  |L1.16690|
004132  69e0              LDR      r0,[r4,#0x1c]         ;5613
004134  f0400020          ORR      r0,r0,#0x20           ;5613
004138  61e0              STR      r0,[r4,#0x1c]         ;5613
00413a  e7c9              B        |L1.16592|
                  |L1.16700|
00413c  6868              LDR      r0,[r5,#4]            ;5620  ; mess_data
00413e  b110              CBZ      r0,|L1.16710|
004140  2801              CMP      r0,#1                 ;5621
004142  d006              BEQ      |L1.16722|
004144  e047              B        |L1.16854|
                  |L1.16710|
004146  69e0              LDR      r0,[r4,#0x1c]         ;5620
004148  f4407000          ORR      r0,r0,#0x200          ;5620
00414c  61e0              STR      r0,[r4,#0x1c]         ;5620
00414e  e042              B        |L1.16854|
                  |L1.16720|
004150  e004              B        |L1.16732|
                  |L1.16722|
004152  69a0              LDR      r0,[r4,#0x18]         ;5621
004154  f4407000          ORR      r0,r0,#0x200          ;5621
004158  61a0              STR      r0,[r4,#0x18]         ;5621
00415a  e03c              B        |L1.16854|
                  |L1.16732|
00415c  48e1              LDR      r0,|L1.17636|
00415e  49e2              LDR      r1,|L1.17640|
004160  f9b00000          LDRSH    r0,[r0,#0]            ;5625  ; speedChIsOn
004164  b9d0              CBNZ     r0,|L1.16796|
004166  f8962023          LDRB     r2,[r6,#0x23]         ;5625  ; spc_stat
00416a  2a02              CMP      r2,#2                 ;5625
00416c  d016              BEQ      |L1.16796|
00416e  780a              LDRB     r2,[r1,#0]            ;5625  ; hv_vz_stat
004170  b9a2              CBNZ     r2,|L1.16796|
004172  783a              LDRB     r2,[r7,#0]            ;5625  ; sp_ch_stat
004174  b992              CBNZ     r2,|L1.16796|
004176  7972              LDRB     r2,[r6,#5]            ;5625  ; vz1_stat
004178  b982              CBNZ     r2,|L1.16796|
00417a  79f2              LDRB     r2,[r6,#7]            ;5625  ; vz2_stat
00417c  b972              CBNZ     r2,|L1.16796|
00417e  f9b82000          LDRSH    r2,[r8,#0]            ;5625  ; load_U
004182  230a              MOVS     r3,#0xa               ;5625
004184  fb92f2f3          SDIV     r2,r2,r3              ;5625
004188  4bd8              LDR      r3,|L1.17644|
00418a  f9b33000          LDRSH    r3,[r3,#0]            ;5625  ; UVENTOFF
00418e  429a              CMP      r2,r3                 ;5625
004190  da04              BGE      |L1.16796|
004192  69e0              LDR      r0,[r4,#0x1c]         ;5625
004194  f4407000          ORR      r0,r0,#0x200          ;5625
004198  61e0              STR      r0,[r4,#0x1c]         ;5625
00419a  e01c              B        |L1.16854|
                  |L1.16796|
00419c  b958              CBNZ     r0,|L1.16822|
00419e  f8960023          LDRB     r0,[r6,#0x23]         ;5626  ; spc_stat
0041a2  2802              CMP      r0,#2                 ;5626
0041a4  d007              BEQ      |L1.16822|
0041a6  7808              LDRB     r0,[r1,#0]            ;5626  ; hv_vz_stat
0041a8  b928              CBNZ     r0,|L1.16822|
0041aa  7838              LDRB     r0,[r7,#0]            ;5626  ; sp_ch_stat
0041ac  b918              CBNZ     r0,|L1.16822|
0041ae  7970              LDRB     r0,[r6,#5]            ;5626  ; vz1_stat
0041b0  b908              CBNZ     r0,|L1.16822|
0041b2  79f0              LDRB     r0,[r6,#7]            ;5626  ; vz2_stat
0041b4  b178              CBZ      r0,|L1.16854|
                  |L1.16822|
0041b6  69a0              LDR      r0,[r4,#0x18]         ;5626
0041b8  f4407000          ORR      r0,r0,#0x200          ;5626
0041bc  61a0              STR      r0,[r4,#0x18]         ;5626
0041be  e00a              B        |L1.16854|
                  |L1.16832|
;;;5629   	{
;;;5630   	if((mess_find_unvol(MESS2RELE_HNDL))&& (mess_data[0]==PARAM_RELE_BAT_IS_DISCHARGED)) SET_REG(LPC_GPIO0->FIOCLR,1,9,1);
0041c0  20d2              MOVS     r0,#0xd2
0041c2  f7fffffe          BL       mess_find_unvol
0041c6  b110              CBZ      r0,|L1.16846|
0041c8  6828              LDR      r0,[r5,#0]  ; mess_data
0041ca  2872              CMP      r0,#0x72
0041cc  d017              BEQ      |L1.16894|
                  |L1.16846|
;;;5631   	else SET_REG(LPC_GPIO0->FIOSET,1,9,1);
0041ce  69a0              LDR      r0,[r4,#0x18]
0041d0  f4407000          ORR      r0,r0,#0x200
0041d4  61a0              STR      r0,[r4,#0x18]
                  |L1.16854|
;;;5632   	}
;;;5633   	
;;;5634   //Блок выносной реле
;;;5635   if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_BDR1))
0041d6  20d2              MOVS     r0,#0xd2
0041d8  f7fffffe          BL       mess_find_unvol
;;;5636   	{
;;;5637   	if(mess_data[1]==0) 		bdr_transmit_stat&=0xfe;
0041dc  f8df9310          LDR      r9,|L1.17648|
;;;5638   	else if(mess_data[1]==1) 	bdr_transmit_stat|=0x01;
;;;5639   	}
;;;5640   else 
;;;5641   	{
;;;5642   	if(bdr_avar_stat&0x01)  	bdr_transmit_stat|=0x01;
0041e0  4cc4              LDR      r4,|L1.17652|
0041e2  b110              CBZ      r0,|L1.16874|
0041e4  6828              LDR      r0,[r5,#0]            ;5635  ; mess_data
0041e6  2875              CMP      r0,#0x75              ;5635
0041e8  d00e              BEQ      |L1.16904|
                  |L1.16874|
0041ea  7820              LDRB     r0,[r4,#0]  ; bdr_avar_stat
0041ec  07c0              LSLS     r0,r0,#31
0041ee  d01e              BEQ      |L1.16942|
0041f0  f8990000          LDRB     r0,[r9,#0]  ; bdr_transmit_stat
0041f4  f0400001          ORR      r0,r0,#1
0041f8  f8890000          STRB     r0,[r9,#0]
0041fc  e01d              B        |L1.16954|
                  |L1.16894|
0041fe  69e0              LDR      r0,[r4,#0x1c]         ;5630
004200  f4407000          ORR      r0,r0,#0x200          ;5630
004204  61e0              STR      r0,[r4,#0x1c]         ;5630
004206  e7e6              B        |L1.16854|
                  |L1.16904|
004208  6868              LDR      r0,[r5,#4]            ;5637  ; mess_data
00420a  b110              CBZ      r0,|L1.16914|
00420c  2801              CMP      r0,#1                 ;5638
00420e  d007              BEQ      |L1.16928|
004210  e013              B        |L1.16954|
                  |L1.16914|
004212  f8990000          LDRB     r0,[r9,#0]            ;5637  ; bdr_transmit_stat
004216  f00000fe          AND      r0,r0,#0xfe           ;5637
00421a  f8890000          STRB     r0,[r9,#0]            ;5637
00421e  e00c              B        |L1.16954|
                  |L1.16928|
004220  f8990000          LDRB     r0,[r9,#0]            ;5638  ; bdr_transmit_stat
004224  f0400001          ORR      r0,r0,#1              ;5638
004228  f8890000          STRB     r0,[r9,#0]            ;5638
00422c  e005              B        |L1.16954|
                  |L1.16942|
;;;5643   	else 						bdr_transmit_stat&=0xfe;
00422e  f8990000          LDRB     r0,[r9,#0]  ; bdr_transmit_stat
004232  f00000fe          AND      r0,r0,#0xfe
004236  f8890000          STRB     r0,[r9,#0]
                  |L1.16954|
;;;5644   	}	
;;;5645   
;;;5646   if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_BDR2))
00423a  20d2              MOVS     r0,#0xd2
00423c  f7fffffe          BL       mess_find_unvol
004240  b110              CBZ      r0,|L1.16968|
004242  6828              LDR      r0,[r5,#0]  ; mess_data
004244  2876              CMP      r0,#0x76
004246  d009              BEQ      |L1.16988|
                  |L1.16968|
;;;5647   	{
;;;5648   	if(mess_data[1]==0) 		bdr_transmit_stat&=0xfd;
;;;5649   	else if(mess_data[1]==1) 	bdr_transmit_stat|=0x02;
;;;5650   	}
;;;5651   else 
;;;5652   	{
;;;5653   	if(bdr_avar_stat&0x01)  	bdr_transmit_stat|=0x02;
004248  7820              LDRB     r0,[r4,#0]  ; bdr_avar_stat
00424a  07c0              LSLS     r0,r0,#31
00424c  d019              BEQ      |L1.17026|
00424e  f8990000          LDRB     r0,[r9,#0]  ; bdr_transmit_stat
004252  f0400002          ORR      r0,r0,#2
004256  f8890000          STRB     r0,[r9,#0]
00425a  e018              B        |L1.17038|
                  |L1.16988|
00425c  6868              LDR      r0,[r5,#4]            ;5648  ; mess_data
00425e  b110              CBZ      r0,|L1.16998|
004260  2801              CMP      r0,#1                 ;5649
004262  d007              BEQ      |L1.17012|
004264  e013              B        |L1.17038|
                  |L1.16998|
004266  f8990000          LDRB     r0,[r9,#0]            ;5648  ; bdr_transmit_stat
00426a  f00000fd          AND      r0,r0,#0xfd           ;5648
00426e  f8890000          STRB     r0,[r9,#0]            ;5648
004272  e00c              B        |L1.17038|
                  |L1.17012|
004274  f8990000          LDRB     r0,[r9,#0]            ;5649  ; bdr_transmit_stat
004278  f0400002          ORR      r0,r0,#2              ;5649
00427c  f8890000          STRB     r0,[r9,#0]            ;5649
004280  e005              B        |L1.17038|
                  |L1.17026|
;;;5654   	else 						bdr_transmit_stat&=0xfd;
004282  f8990000          LDRB     r0,[r9,#0]  ; bdr_transmit_stat
004286  f00000fd          AND      r0,r0,#0xfd
00428a  f8890000          STRB     r0,[r9,#0]
                  |L1.17038|
;;;5655   	}	
;;;5656   	
;;;5657   if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_BDR3))
00428e  20d2              MOVS     r0,#0xd2
004290  f7fffffe          BL       mess_find_unvol
004294  b110              CBZ      r0,|L1.17052|
004296  6828              LDR      r0,[r5,#0]  ; mess_data
004298  2877              CMP      r0,#0x77
00429a  d009              BEQ      |L1.17072|
                  |L1.17052|
;;;5658   	{
;;;5659   	if(mess_data[1]==0) 		bdr_transmit_stat&=0xfb;
;;;5660   	else if(mess_data[1]==1) 	bdr_transmit_stat|=0x04;
;;;5661   	}
;;;5662   else 
;;;5663   	{
;;;5664   	if(bdr_avar_stat&0x01)  	bdr_transmit_stat|=0x04;
00429c  7820              LDRB     r0,[r4,#0]  ; bdr_avar_stat
00429e  07c0              LSLS     r0,r0,#31
0042a0  d019              BEQ      |L1.17110|
0042a2  f8990000          LDRB     r0,[r9,#0]  ; bdr_transmit_stat
0042a6  f0400004          ORR      r0,r0,#4
0042aa  f8890000          STRB     r0,[r9,#0]
0042ae  e018              B        |L1.17122|
                  |L1.17072|
0042b0  6868              LDR      r0,[r5,#4]            ;5659  ; mess_data
0042b2  b110              CBZ      r0,|L1.17082|
0042b4  2801              CMP      r0,#1                 ;5660
0042b6  d007              BEQ      |L1.17096|
0042b8  e013              B        |L1.17122|
                  |L1.17082|
0042ba  f8990000          LDRB     r0,[r9,#0]            ;5659  ; bdr_transmit_stat
0042be  f00000fb          AND      r0,r0,#0xfb           ;5659
0042c2  f8890000          STRB     r0,[r9,#0]            ;5659
0042c6  e00c              B        |L1.17122|
                  |L1.17096|
0042c8  f8990000          LDRB     r0,[r9,#0]            ;5660  ; bdr_transmit_stat
0042cc  f0400004          ORR      r0,r0,#4              ;5660
0042d0  f8890000          STRB     r0,[r9,#0]            ;5660
0042d4  e005              B        |L1.17122|
                  |L1.17110|
;;;5665   	else 						bdr_transmit_stat&=0xfb;
0042d6  f8990000          LDRB     r0,[r9,#0]  ; bdr_transmit_stat
0042da  f00000fb          AND      r0,r0,#0xfb
0042de  f8890000          STRB     r0,[r9,#0]
                  |L1.17122|
;;;5666   	}	
;;;5667   	
;;;5668   if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_BDR4))
0042e2  20d2              MOVS     r0,#0xd2
0042e4  f7fffffe          BL       mess_find_unvol
0042e8  b110              CBZ      r0,|L1.17136|
0042ea  6828              LDR      r0,[r5,#0]  ; mess_data
0042ec  2878              CMP      r0,#0x78
0042ee  d009              BEQ      |L1.17156|
                  |L1.17136|
;;;5669   	{
;;;5670   	if(mess_data[1]==0) 		bdr_transmit_stat&=0xf7;
;;;5671   	else if(mess_data[1]==1) 	bdr_transmit_stat|=0x08;
;;;5672   	}
;;;5673   else 
;;;5674   	{
;;;5675   	if(bdr_avar_stat&0x01)  	bdr_transmit_stat|=0x08;
0042f0  7820              LDRB     r0,[r4,#0]  ; bdr_avar_stat
0042f2  07c0              LSLS     r0,r0,#31
0042f4  d019              BEQ      |L1.17194|
0042f6  f8990000          LDRB     r0,[r9,#0]  ; bdr_transmit_stat
0042fa  f0400008          ORR      r0,r0,#8
0042fe  f8890000          STRB     r0,[r9,#0]
004302  e018              B        |L1.17206|
                  |L1.17156|
004304  6868              LDR      r0,[r5,#4]            ;5670  ; mess_data
004306  b110              CBZ      r0,|L1.17166|
004308  2801              CMP      r0,#1                 ;5671
00430a  d007              BEQ      |L1.17180|
00430c  e013              B        |L1.17206|
                  |L1.17166|
00430e  f8990000          LDRB     r0,[r9,#0]            ;5670  ; bdr_transmit_stat
004312  f00000f7          AND      r0,r0,#0xf7           ;5670
004316  f8890000          STRB     r0,[r9,#0]            ;5670
00431a  e00c              B        |L1.17206|
                  |L1.17180|
00431c  f8990000          LDRB     r0,[r9,#0]            ;5671  ; bdr_transmit_stat
004320  f0400008          ORR      r0,r0,#8              ;5671
004324  f8890000          STRB     r0,[r9,#0]            ;5671
004328  e005              B        |L1.17206|
                  |L1.17194|
;;;5676   	else 						bdr_transmit_stat&=0xf7;
00432a  f8990000          LDRB     r0,[r9,#0]  ; bdr_transmit_stat
00432e  f00000f7          AND      r0,r0,#0xf7
004332  f8890000          STRB     r0,[r9,#0]
                  |L1.17206|
;;;5677   	}	
;;;5678   					 	
;;;5679   #endif
;;;5680   
;;;5681   #ifdef UKU_KONTUR
;;;5682   
;;;5683   //Реле общей аварии
;;;5684   if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_AV_COMM))
;;;5685   	{
;;;5686   	if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_COMM,1);
;;;5687   	else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_COMM,1);
;;;5688   	}
;;;5689   else 
;;;5690   	{
;;;5691        if(  (!(avar_ind_stat&0x00007fff)) &&
;;;5692             ((!SK_REL_EN[0]) || (sk_av_stat[0]!=sasON))  &&
;;;5693             ((!SK_REL_EN[1]) || (sk_av_stat[1]!=sasON))  &&
;;;5694             ((!SK_REL_EN[2]) || (sk_av_stat[2]!=sasON))  /*&&
;;;5695             ((!SK_REL_EN[3]) || (sk_av_stat[3]!=sasON))*/  )SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_COMM,1);
;;;5696        else SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_COMM,1);
;;;5697   	}
;;;5698   
;;;5699   	
;;;5700   //rel_warm_plazma=0;
;;;5701   //Реле освещения   
;;;5702   /*
;;;5703   if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_WARM))
;;;5704   	{
;;;5705   	if(mess_data[1]==0)
;;;5706   		{
;;;5707   		SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_WARM,1);
;;;5708   		rel_warm_plazma=1;
;;;5709   		}
;;;5710   	else if(mess_data[1]==1) 
;;;5711   		{
;;;5712   		SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_WARM,1);
;;;5713   		rel_warm_plazma=2;
;;;5714   		}
;;;5715        }
;;;5716   else 
;;;5717   	{
;;;5718   	if(warm_stat_k==wsOFF) 
;;;5719   		{
;;;5720   		SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_WARM,1);
;;;5721   		rel_warm_plazma=3;
;;;5722   		}
;;;5723        else 
;;;5724   		{
;;;5725   		SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_WARM,1);
;;;5726   		rel_warm_plazma=4;
;;;5727   		}
;;;5728   	}
;;;5729   */
;;;5730   //Реле освещения
;;;5731   if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_LIGHT))
;;;5732   	{
;;;5733   	if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_LIGHT,1);
;;;5734   	else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_LIGHT,1);
;;;5735        }
;;;5736   else 
;;;5737   	{
;;;5738   	if(sk_av_stat[0]!=sasON) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_LIGHT,1);
;;;5739        else SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_LIGHT,1);
;;;5740   	}
;;;5741   
;;;5742   
;;;5743   
;;;5744   //Реле выключения нагрузки
;;;5745   if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_LOAD_OFF))
;;;5746   	{
;;;5747   	if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_LOAD_OFF,1);
;;;5748   	else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_LOAD_OFF,1);
;;;5749        }
;;;5750   else if(tloaddisable_cmnd==0)
;;;5751   	{
;;;5752   	SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_LOAD_OFF,1);
;;;5753   	}
;;;5754   else if((tloaddisable_cmnd)&&(tloaddisable_cmnd<=11))
;;;5755   	{
;;;5756   	SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_LOAD_OFF,1);
;;;5757   	}
;;;5758   
;;;5759   else 
;;;5760   	{
;;;5761   	if(!(tloaddisable_stat==tldsON)) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_LOAD_OFF,1);
;;;5762        else SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_LOAD_OFF,1);
;;;5763   	} 
;;;5764   
;;;5765   //Реле осевого вентилятора или отопителя
;;;5766   if(RELE_LOG)
;;;5767   	{
;;;5768   	if((mess_find_unvol(MESS2RELE_HNDL))&&(mess_data[0]==PARAM_RELE_VENT_WARM))
;;;5769   		{
;;;5770   		if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_VENT_WARM,1);
;;;5771   		else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_VENT_WARM,1);
;;;5772   		}
;;;5773   	else 
;;;5774   		{
;;;5775   		if(warm_stat_k==wsOFF) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_VENT_WARM,1);
;;;5776   	     else SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_VENT_WARM,1);
;;;5777   		} 
;;;5778   
;;;5779   	}
;;;5780   else 
;;;5781   	{
;;;5782   	if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_VENT_WARM))
;;;5783   		{
;;;5784   		if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_VENT_WARM,1);
;;;5785   		else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_VENT_WARM,1);
;;;5786   		}
;;;5787   	else 
;;;5788   		{
;;;5789   		if(vent_stat_k==vsOFF) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_VENT_WARM,1);
;;;5790   	     else SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_VENT_WARM,1);
;;;5791   		} 
;;;5792   	}
;;;5793   #endif
;;;5794   
;;;5795   
;;;5796   #ifdef UKU_TELECORE2015
;;;5797   //Реле аварии сети
;;;5798   if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_AV_NET))
;;;5799   	{
;;;5800   	if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_NET,1);
;;;5801   	else SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_NET,1);
;;;5802   	}
;;;5803   else	if(!(avar_ind_stat&0x00000001)) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_NET,1);
;;;5804   else SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_NET,1);
;;;5805   
;;;5806   
;;;5807   //Реле освещения
;;;5808   if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_LIGHT))
;;;5809   	{
;;;5810   	if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_LIGHT,1);
;;;5811   	else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_LIGHT,1);
;;;5812        }
;;;5813   else 
;;;5814   	{
;;;5815   	if(sk_av_stat[0]!=sasON) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_LIGHT,1);
;;;5816        else SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_LIGHT,1);
;;;5817   	}
;;;5818   
;;;5819   //Реле отопителя
;;;5820   if((mess_find_unvol(MESS2RELE_HNDL))&&(mess_data[0]==PARAM_RELE_WARM))
;;;5821   	{
;;;5822   	if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_WARM,1);
;;;5823   	else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_WARM,1);
;;;5824   	}
;;;5825   else 
;;;5826   	{
;;;5827   	if(warm_stat_k==wsOFF) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_WARM,1);
;;;5828        else SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_WARM,1);
;;;5829   	} 
;;;5830   //Реле вентилятора
;;;5831   if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_VENT))
;;;5832   	{
;;;5833   	if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_VENT,1);
;;;5834   	else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_VENT,1);
;;;5835   	}
;;;5836   else 
;;;5837   	{
;;;5838   	if(vent_stat_k==vsOFF) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_VENT,1);
;;;5839        else SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_VENT,1);
;;;5840   	} 
;;;5841   
;;;5842   //Реле внутреннего вентилятора
;;;5843   if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_VVENT))
;;;5844   	{
;;;5845   	if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_VVENT,1);
;;;5846   	else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_VVENT,1);
;;;5847   	}
;;;5848   else 
;;;5849   	{
;;;5850   	if(vvent_stat_k==vsOFF) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_VVENT,1);
;;;5851        else SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_VVENT,1);
;;;5852   	} 
;;;5853   
;;;5854   #endif
;;;5855   
;;;5856   #ifdef UKU_TELECORE2017
;;;5857   //Реле аварии сети
;;;5858   if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_AV_NET))
;;;5859   	{
;;;5860   	if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_NET,1);
;;;5861   	else SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_NET,1);
;;;5862   	}
;;;5863   else	if(!(avar_ind_stat&0x00000001)) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_NET,1);
;;;5864   else SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_NET,1);
;;;5865   
;;;5866   
;;;5867   //Реле освещения
;;;5868   if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_LIGHT))
;;;5869   	{
;;;5870   	if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_LIGHT,1);
;;;5871   	else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_LIGHT,1);
;;;5872        }
;;;5873   else 
;;;5874   	{
;;;5875   	if(sk_av_stat[0]!=sasON) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_LIGHT,1);
;;;5876        else SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_LIGHT,1);
;;;5877   	}
;;;5878   
;;;5879   //Реле отопителя
;;;5880   if((mess_find_unvol(MESS2RELE_HNDL))&&(mess_data[0]==PARAM_RELE_WARM))
;;;5881   	{
;;;5882   	if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_WARM,1);
;;;5883   	else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_WARM,1);
;;;5884   	}
;;;5885   else 
;;;5886   	{
;;;5887   	if(warm_stat_k==wsOFF) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_WARM,1);
;;;5888        else SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_WARM,1);
;;;5889   	} 
;;;5890   //Реле вентилятора
;;;5891   if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_VENT))
;;;5892   	{
;;;5893   	if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_VENT,1);
;;;5894   	else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_VENT,1);
;;;5895   	}
;;;5896   else 
;;;5897   	{
;;;5898   	if(vent_stat_k==vsOFF) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_VENT,1);
;;;5899        else SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_VENT,1);
;;;5900   	} 
;;;5901   
;;;5902   //Реле внутреннего вентилятора
;;;5903   if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_VVENT))
;;;5904   	{
;;;5905   	if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_VVENT,1);
;;;5906   	else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_VVENT,1);
;;;5907   	}
;;;5908   else 
;;;5909   	{
;;;5910   	if(vvent_stat_k==vsOFF) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_VVENT,1);
;;;5911        else SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_VVENT,1);
;;;5912   	} 
;;;5913   
;;;5914   //Реле выключения нагрузки
;;;5915   if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_LOAD_OFF))
;;;5916   	{
;;;5917   	if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_LOAD_OFF,1);
;;;5918   	else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_LOAD_OFF,1);
;;;5919        }
;;;5920   else if(tloaddisable_cmnd==0)
;;;5921   	{
;;;5922   	SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_LOAD_OFF,1);
;;;5923   	}
;;;5924   else if((tloaddisable_cmnd)&&(tloaddisable_cmnd<=11))
;;;5925   	{
;;;5926   	SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_LOAD_OFF,1);
;;;5927   	}
;;;5928   
;;;5929   else 
;;;5930   	{
;;;5931   	if(!(tloaddisable_stat==tldsON)) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_LOAD_OFF,1);
;;;5932        else SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_LOAD_OFF,1);
;;;5933   	} 
;;;5934   
;;;5935   
;;;5936   #endif
;;;5937   
;;;5938   #ifdef IPS_SGEP_GAZPROM
;;;5939   rele_hndl_plazma[0]++;
;;;5940   if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_AV_BPS))
;;;5941   	{
;;;5942   	rele_hndl_plazma[1]++;
;;;5943   	if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_BPS,1);
;;;5944   	else/* if(mess_data[1]==1)*/ SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_BPS,1);
;;;5945        }
;;;5946   else 
;;;5947   	{
;;;5948   	if(!(avar_ind_stat&0x000007f8)) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_BPS,1);
;;;5949        else SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_BPS,1);
;;;5950   	} 
;;;5951   
;;;5952   if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_AV_NET))
;;;5953   	{
;;;5954   	rele_hndl_plazma[2]++;
;;;5955   	if(mess_data[1]==0) SET_REG(LPC_GPIO3->FIOSET,1,25,1);
;;;5956   	else SET_REG(LPC_GPIO3->FIOCLR,1,25,1);
;;;5957   	}
;;;5958   else	if(!(avar_ind_stat&0x00000001)) SET_REG(LPC_GPIO3->FIOCLR,1,25,1);
;;;5959   else SET_REG(LPC_GPIO3->FIOSET,1,25,1);
;;;5960   #endif
;;;5961   
;;;5962   if(NUMBDR==1)
004336  4870              LDR      r0,|L1.17656|
004338  8800              LDRH     r0,[r0,#0]  ; NUMBDR
00433a  2801              CMP      r0,#1
00433c  d17e              BNE      |L1.17468|
;;;5963   	{
;;;5964   	char ii_;
;;;5965   	char bdr_avar_stat_temp=0;
00433e  f04f0000          MOV      r0,#0
;;;5966   	for	(ii_=0;ii_<4;ii_++)
004342  4601              MOV      r1,r0
;;;5967   		{
;;;5968   		//АБ разряжена
;;;5969   		if((RELE_SET_MASK[ii_]&0x01)&&
;;;5970   			(load_U<(USIGN*10)))			bdr_avar_stat_temp|=(1<<ii_);
;;;5971   		//Ускоренный заряд
;;;5972   		if((RELE_SET_MASK[ii_]&0x02)&&
;;;5973   			(sp_ch_stat==scsWRK))			bdr_avar_stat_temp|=(1<<ii_);
;;;5974   		//Выравнивающий заряд
;;;5975   		if((RELE_SET_MASK[ii_]&0x04)&&
;;;5976   			(spc_stat==spcVZ))			bdr_avar_stat_temp|=(1<<ii_);
;;;5977   		//Общая авария ЗВУ
;;;5978   		if((RELE_SET_MASK[ii_]&0x08)&&
;;;5979   			(avar_stat))					bdr_avar_stat_temp|=(1<<ii_);
;;;5980   		//Uвых завышено
;;;5981   		if((RELE_SET_MASK[ii_]&0x10)&&
;;;5982   			(uout_av==1))					bdr_avar_stat_temp|=(1<<ii_);
004344  f8dfa1b4          LDR      r10,|L1.17660|
;;;5983   		//Uвых занижено
;;;5984   		if((RELE_SET_MASK[ii_]&0x20)&&
;;;5985   			(uout_av==2))					bdr_avar_stat_temp|=(1<<ii_);
;;;5986   		if((RELE_SET_MASK[ii_]&0x40)&&
;;;5987   			(
;;;5988   			((bps[0]._av&(1<<4))&&(NUMIST>=1))||
004348  f8df91b4          LDR      r9,|L1.17664|
00434c  4d6d              LDR      r5,|L1.17668|
00434e  f8dfb1b8          LDR      r11,|L1.17672|
004352  f04f0301          MOV      r3,#1                 ;4920
                  |L1.17238|
004356  f93b2011          LDRSH    r2,[r11,r1,LSL #1]    ;5969
00435a  ea5f7cc2          LSLS     r12,r2,#31            ;5969
00435e  d010              BEQ      |L1.17282|
004360  f8dfc1a8          LDR      r12,|L1.17676|
004364  f9b8e000          LDRSH    lr,[r8,#0]            ;5970  ; load_U
004368  f9bcc000          LDRSH    r12,[r12,#0]          ;5970  ; USIGN
00436c  eb0c0c8c          ADD      r12,r12,r12,LSL #2    ;5970
004370  ebbe0f4c          CMP      lr,r12,LSL #1         ;5970
004374  da05              BGE      |L1.17282|
004376  fa03fc01          LSL      r12,r3,r1             ;5970
00437a  ea4c0c00          ORR      r12,r12,r0            ;5970
00437e  f00c00ff          AND      r0,r12,#0xff          ;5970
                  |L1.17282|
004382  ea5f7c82          LSLS     r12,r2,#30            ;5972
004386  d50a              BPL      |L1.17310|
004388  f897c000          LDRB     r12,[r7,#0]           ;5973  ; sp_ch_stat
00438c  f1bc0f02          CMP      r12,#2                ;5973
004390  d105              BNE      |L1.17310|
004392  fa03fc01          LSL      r12,r3,r1             ;5973
004396  ea4c0c00          ORR      r12,r12,r0            ;5973
00439a  f00c00ff          AND      r0,r12,#0xff          ;5973
                  |L1.17310|
00439e  ea5f7c42          LSLS     r12,r2,#29            ;5975
0043a2  d50a              BPL      |L1.17338|
0043a4  f896c023          LDRB     r12,[r6,#0x23]        ;5976  ; spc_stat
0043a8  f1bc0f02          CMP      r12,#2                ;5976
0043ac  d105              BNE      |L1.17338|
0043ae  fa03fc01          LSL      r12,r3,r1             ;5976
0043b2  ea4c0c00          ORR      r12,r12,r0            ;5976
0043b6  f00c00ff          AND      r0,r12,#0xff          ;5976
                  |L1.17338|
0043ba  ea5f7c02          LSLS     r12,r2,#28            ;5978
0043be  d50c              BPL      |L1.17370|
0043c0  f8dfc14c          LDR      r12,|L1.17680|
0043c4  f8dcc000          LDR      r12,[r12,#0]          ;5979  ; avar_stat
0043c8  f1bc0f00          CMP      r12,#0                ;5979
0043cc  d005              BEQ      |L1.17370|
0043ce  fa03fc01          LSL      r12,r3,r1             ;5979
0043d2  ea4c0c00          ORR      r12,r12,r0            ;5979
0043d6  f00c00ff          AND      r0,r12,#0xff          ;5979
                  |L1.17370|
0043da  ea5f6cc2          LSLS     r12,r2,#27            ;5981
0043de  d50a              BPL      |L1.17398|
0043e0  f89ac000          LDRB     r12,[r10,#0]          ;5982  ; uout_av
0043e4  f1bc0f01          CMP      r12,#1                ;5982
0043e8  d105              BNE      |L1.17398|
0043ea  fa03fc01          LSL      r12,r3,r1             ;5982
0043ee  ea4c0c00          ORR      r12,r12,r0            ;5982
0043f2  f00c00ff          AND      r0,r12,#0xff          ;5982
                  |L1.17398|
0043f6  ea5f6c82          LSLS     r12,r2,#26            ;5984
0043fa  d50a              BPL      |L1.17426|
0043fc  f89ac000          LDRB     r12,[r10,#0]          ;5985  ; uout_av
004400  f1bc0f02          CMP      r12,#2                ;5985
004404  d105              BNE      |L1.17426|
004406  fa03fc01          LSL      r12,r3,r1             ;5985
00440a  ea4c0c00          ORR      r12,r12,r0            ;5985
00440e  f00c00ff          AND      r0,r12,#0xff          ;5985
                  |L1.17426|
004412  ea5f6c42          LSLS     r12,r2,#25            ;5986
004416  d525              BPL      |L1.17508|
004418  f899c001          LDRB     r12,[r9,#1]  ; bps
00441c  ea5f6ccc          LSLS     r12,r12,#27
004420  d504              BPL      |L1.17452|
004422  f9b5c000          LDRSH    r12,[r5,#0]  ; NUMIST
004426  f1bc0f01          CMP      r12,#1
00442a  da15              BGE      |L1.17496|
                  |L1.17452|
;;;5989   			((bps[1]._av&(1<<4))&&(NUMIST>=2))||
00442c  f899c065          LDRB     r12,[r9,#0x65]  ; bps
004430  ea5f6ccc          LSLS     r12,r12,#27
004434  d506              BPL      |L1.17476|
004436  f9b5c000          LDRSH    r12,[r5,#0]  ; NUMIST
00443a  e000              B        |L1.17470|
                  |L1.17468|
00443c  e047              B        |L1.17614|
                  |L1.17470|
00443e  f1bc0f02          CMP      r12,#2
004442  da09              BGE      |L1.17496|
                  |L1.17476|
;;;5990   			((bps[2]._av&(1<<4))&&(NUMIST>=3))
004444  f899c0c9          LDRB     r12,[r9,#0xc9]  ; bps
004448  ea5f6ccc          LSLS     r12,r12,#27
00444c  d50a              BPL      |L1.17508|
00444e  f9b5c000          LDRSH    r12,[r5,#0]  ; NUMIST
004452  f1bc0f03          CMP      r12,#3
004456  db05              BLT      |L1.17508|
                  |L1.17496|
;;;5991   			))bdr_avar_stat_temp|=(1<<ii_);
004458  fa03fc01          LSL      r12,r3,r1
00445c  ea4c0c00          ORR      r12,r12,r0
004460  f00c00ff          AND      r0,r12,#0xff
                  |L1.17508|
;;;5992   		if((RELE_SET_MASK[ii_]&0x80)&&
004464  ea5f6c02          LSLS     r12,r2,#24
004468  d523              BPL      |L1.17586|
;;;5993   			(
;;;5994   			((bps[0]._av&(0x0f))&&(NUMIST>=1))||
00446a  f899c001          LDRB     r12,[r9,#1]  ; bps
00446e  ea5f7c0c          LSLS     r12,r12,#28
004472  d004              BEQ      |L1.17534|
004474  f9b5c000          LDRSH    r12,[r5,#0]  ; NUMIST
004478  f1bc0f01          CMP      r12,#1
00447c  da13              BGE      |L1.17574|
                  |L1.17534|
;;;5995   			((bps[1]._av&(0x0f))&&(NUMIST>=2))||
00447e  f899c065          LDRB     r12,[r9,#0x65]  ; bps
004482  ea5f7c0c          LSLS     r12,r12,#28
004486  d004              BEQ      |L1.17554|
004488  f9b5c000          LDRSH    r12,[r5,#0]  ; NUMIST
00448c  f1bc0f02          CMP      r12,#2
004490  da09              BGE      |L1.17574|
                  |L1.17554|
;;;5996   			((bps[2]._av&(0x0f))&&(NUMIST>=3))
004492  f899c0c9          LDRB     r12,[r9,#0xc9]  ; bps
004496  ea5f7c0c          LSLS     r12,r12,#28
00449a  d00a              BEQ      |L1.17586|
00449c  f9b5c000          LDRSH    r12,[r5,#0]  ; NUMIST
0044a0  f1bc0f03          CMP      r12,#3
0044a4  db05              BLT      |L1.17586|
                  |L1.17574|
;;;5997   			))bdr_avar_stat_temp|=(1<<ii_);
0044a6  fa03fc01          LSL      r12,r3,r1
0044aa  ea4c0c00          ORR      r12,r12,r0
0044ae  f00c00ff          AND      r0,r12,#0xff
                  |L1.17586|
;;;5998   
;;;5999   		if(!(RELE_SET_MASK[ii_]&(1<<15))) bdr_avar_stat_temp^=(1<<ii_); 
0044b2  0412              LSLS     r2,r2,#16
0044b4  d404              BMI      |L1.17600|
0044b6  fa03f201          LSL      r2,r3,r1
0044ba  ea820200          EOR      r2,r2,r0
0044be  b2d0              UXTB     r0,r2
                  |L1.17600|
0044c0  f1010101          ADD      r1,r1,#1              ;5966
0044c4  b2c9              UXTB     r1,r1                 ;5966
0044c6  2904              CMP      r1,#4                 ;5966
0044c8  f4ffaf45          BCC      |L1.17238|
;;;6000   		}
;;;6001   	bdr_avar_stat=bdr_avar_stat_temp;
0044cc  7020              STRB     r0,[r4,#0]
                  |L1.17614|
;;;6002   	}
;;;6003   }
0044ce  e8bd9ff0          POP      {r4-r12,pc}
0044d2  0000              DCW      0x0000
                  |L1.17620|
                          DCD      load_U
                  |L1.17624|
                          DCD      sp_ch_stat
                  |L1.17628|
                          DCD      ||area_number.25||
                  |L1.17632|
                          DCD      DOP_RELE_FUNC
                  |L1.17636|
                          DCD      speedChIsOn
                  |L1.17640|
                          DCD      hv_vz_stat
                  |L1.17644|
                          DCD      UVENTOFF
                  |L1.17648|
                          DCD      bdr_transmit_stat
                  |L1.17652|
                          DCD      bdr_avar_stat
                  |L1.17656|
                          DCD      NUMBDR
                  |L1.17660|
                          DCD      uout_av
                  |L1.17664|
                          DCD      bps
                  |L1.17668|
                          DCD      NUMIST
                  |L1.17672|
                          DCD      RELE_SET_MASK
                  |L1.17676|
                          DCD      USIGN
                  |L1.17680|
                          DCD      avar_stat
                          ENDP

                  bps_hndl PROC
;;;6006   //-----------------------------------------------
;;;6007   void bps_hndl(void)
004514  e92d5ff0          PUSH     {r4-r12,lr}
;;;6008   {
;;;6009   char ptr__,i;
;;;6010   unsigned short tempUS;
;;;6011   
;;;6012   if(sh_cnt0<10)
004518  4eff              LDR      r6,|L1.18712|
;;;6013   	{
;;;6014   	sh_cnt0++;
;;;6015   	if(sh_cnt0>=10)
;;;6016   		{
;;;6017   		sh_cnt0=0;
00451a  2700              MOVS     r7,#0
;;;6018   		b1Hz_sh=1;
00451c  f04f0a01          MOV      r10,#1
004520  f8960021          LDRB     r0,[r6,#0x21]         ;6012  ; sh_cnt0
004524  280a              CMP      r0,#0xa               ;6012
004526  d20a              BCS      |L1.17726|
004528  f1000001          ADD      r0,r0,#1              ;6014
00452c  b2c0              UXTB     r0,r0                 ;6014
00452e  f8860021          STRB     r0,[r6,#0x21]         ;6014
004532  280a              CMP      r0,#0xa               ;6015
004534  d303              BCC      |L1.17726|
004536  f8867021          STRB     r7,[r6,#0x21]         ;6017
00453a  f886a022          STRB     r10,[r6,#0x22]
                  |L1.17726|
;;;6019   		}
;;;6020   	}
;;;6021   
;;;6022   /*if(sh_cnt1<5)
;;;6023   	{
;;;6024   	sh_cnt1++;
;;;6025   	if(sh_cnt1==5)
;;;6026   		{
;;;6027   		sh_cnt1=0;
;;;6028   		b2Hz_sh=1;
;;;6029   		}
;;;6030   	} */
;;;6031   
;;;6032   
;;;6033   /*
;;;6034   if(mess_find(MESS_SRC_ON_OFF))
;;;6035   	{
;;;6036   	if(mess_data[0]==_MESS_SRC_MASK_BLOK_2SEC)
;;;6037   		{
;;;6038   		char i;
;;;6039   		for(i=0;i<NUMIST;i++)
;;;6040   			{
;;;6041   			if(mess_data[1]&(1<<i))src[i]._ist_blok_cnt=20;
;;;6042   			}
;;;6043   		
;;;6044   		}
;;;6045   	else if(mess_data[0]==_MESS_SRC_MASK_UNBLOK)
;;;6046   		{
;;;6047   		char i;
;;;6048   		for(i=0;i<NUMIST;i++)
;;;6049   			{
;;;6050   			if(mess_data[1]&(1<<i))src[i]._ist_blok_cnt=0;
;;;6051   			}
;;;6052   		
;;;6053   		}
;;;6054   	}
;;;6055   	
;;;6056   else if(mess_find(_MESS_SRC_MASK_ON))
;;;6057   	{				
;;;6058   	if(mess_data[0]==_MESS_SRC_MASK_ON)
;;;6059   		{
;;;6060   		char i;
;;;6061   		for(i=0;i<NUMIST;i++)
;;;6062   			{
;;;6063   			if(mess_data[1]&(1<<i))
;;;6064   				{
;;;6065   				src[i]._ist_blok_cnt=0;
;;;6066   				src[i]._flags_tu=2;
;;;6067   				}
;;;6068   			}
;;;6069   		
;;;6070   		}				
;;;6071   	}*/
;;;6072   
;;;6073   
;;;6074   
;;;6075   /*else*/ 
;;;6076   bps_on_mask=0;
00453e  f8a6705e          STRH     r7,[r6,#0x5e]
;;;6077   bps_off_mask=0;
004542  f8a67060          STRH     r7,[r6,#0x60]
;;;6078   
;;;6079   if(mess_find_unvol(MESS2BPS_HNDL))
004546  20cd              MOVS     r0,#0xcd
004548  f7fffffe          BL       mess_find_unvol
;;;6080   	{
;;;6081   	if(mess_data[0]==PARAM_BPS_ALL_OFF_AFTER_2SEC)
;;;6082   		{
;;;6083   		bps_off_mask=0xffff;
;;;6084   		}
;;;6085   
;;;6086   	if(mess_data[0]==PARAM_BPS_MASK_OFF_AFTER_2SEC)
;;;6087   		{
;;;6088   		bps_off_mask=mess_data[1];
;;;6089   		}
;;;6090   
;;;6091   	if(mess_data[0]==PARAM_BPS_MASK_ON)
;;;6092   		{
;;;6093   		bps_on_mask=mess_data[1];
;;;6094   		}
;;;6095   
;;;6096   	if(mess_data[0]==PARAM_BPS_ALL_ON)
;;;6097   		{
;;;6098   		bps_on_mask=0xffff;
;;;6099   		}
;;;6100   
;;;6101   	if(mess_data[0]==PARAM_BPS_MASK_ON_OFF_AFTER_2SEC)
;;;6102   		{
;;;6103   		bps_on_mask=mess_data[1];
;;;6104   		bps_off_mask=~(mess_data[1]);
;;;6105   		}
;;;6106   
;;;6107   
;;;6108   	for(i=0;i<=NUMIST;i++)
;;;6109   		{
;;;6110   		if(bps_off_mask&(1<<i)) bps[i]._blok_cnt++;
00454c  f8df83cc          LDR      r8,|L1.18716|
004550  f8dfb3cc          LDR      r11,|L1.18720|
004554  b3a0              CBZ      r0,|L1.17856|
004556  4af3              LDR      r2,|L1.18724|
004558  f64f73ff          MOV      r3,#0xffff            ;6083
00455c  6810              LDR      r0,[r2,#0]            ;6081  ; mess_data
00455e  28ce              CMP      r0,#0xce              ;6081
004560  d101              BNE      |L1.17766|
004562  f8a63060          STRH     r3,[r6,#0x60]         ;6083
                  |L1.17766|
004566  28cf              CMP      r0,#0xcf              ;6086
004568  d102              BNE      |L1.17776|
00456a  6851              LDR      r1,[r2,#4]            ;6088  ; mess_data
00456c  f8a61060          STRH     r1,[r6,#0x60]         ;6088
                  |L1.17776|
004570  28d1              CMP      r0,#0xd1              ;6091
004572  d102              BNE      |L1.17786|
004574  6851              LDR      r1,[r2,#4]            ;6093  ; mess_data
004576  f8a6105e          STRH     r1,[r6,#0x5e]         ;6093
                  |L1.17786|
00457a  28d2              CMP      r0,#0xd2              ;6096
00457c  d101              BNE      |L1.17794|
00457e  f8a6305e          STRH     r3,[r6,#0x5e]         ;6098
                  |L1.17794|
004582  28d0              CMP      r0,#0xd0              ;6101
004584  d106              BNE      |L1.17812|
004586  6850              LDR      r0,[r2,#4]            ;6103  ; mess_data
004588  f8a6005e          STRH     r0,[r6,#0x5e]         ;6103
00458c  ea6f0000          MVN      r0,r0                 ;6104
004590  f8a60060          STRH     r0,[r6,#0x60]         ;6104
                  |L1.17812|
004594  f04f0400          MOV      r4,#0                 ;6108
004598  e037              B        |L1.17930|
                  |L1.17818|
00459a  f8b60060          LDRH     r0,[r6,#0x60]  ; bps_off_mask
00459e  fa0af904          LSL      r9,r10,r4
0045a2  ea190f00          TST      r9,r0
0045a6  d00c              BEQ      |L1.17858|
0045a8  eb0400c4          ADD      r0,r4,r4,LSL #3
0045ac  eb001004          ADD      r0,r0,r4,LSL #4
0045b0  eb080080          ADD      r0,r8,r0,LSL #2
0045b4  f8301f40          LDRH     r1,[r0,#0x40]!
0045b8  f1010101          ADD      r1,r1,#1
0045bc  8001              STRH     r1,[r0,#0]
0045be  e008              B        |L1.17874|
                  |L1.17856|
0045c0  e028              B        |L1.17940|
                  |L1.17858|
;;;6111   		else bps[i]._blok_cnt=0;
0045c2  eb0400c4          ADD      r0,r4,r4,LSL #3
0045c6  eb001004          ADD      r0,r0,r4,LSL #4
0045ca  eb080080          ADD      r0,r8,r0,LSL #2
0045ce  f8a07040          STRH     r7,[r0,#0x40]
                  |L1.17874|
;;;6112   		gran(&bps[i]._blok_cnt,0,50);
0045d2  eb0400c4          ADD      r0,r4,r4,LSL #3
0045d6  eb001004          ADD      r0,r0,r4,LSL #4
0045da  eb080580          ADD      r5,r8,r0,LSL #2
0045de  f1050040          ADD      r0,r5,#0x40
0045e2  2232              MOVS     r2,#0x32
0045e4  2100              MOVS     r1,#0
0045e6  f7fffffe          BL       gran
;;;6113   		if(bps[i]._blok_cnt>20) bps[i]._flags_tu=1;
0045ea  f9b50040          LDRSH    r0,[r5,#0x40]
0045ee  2814              CMP      r0,#0x14
0045f0  dd01              BLE      |L1.17910|
0045f2  f885a02c          STRB     r10,[r5,#0x2c]
                  |L1.17910|
;;;6114   		if(bps_on_mask&(1<<i)) bps[i]._flags_tu=0;
0045f6  f8b6005e          LDRH     r0,[r6,#0x5e]  ; bps_on_mask
0045fa  ea190f00          TST      r9,r0
0045fe  d001              BEQ      |L1.17924|
004600  f885702c          STRB     r7,[r5,#0x2c]
                  |L1.17924|
004604  f1040401          ADD      r4,r4,#1              ;6108
004608  b2e4              UXTB     r4,r4                 ;6108
                  |L1.17930|
00460a  f9bb0000          LDRSH    r0,[r11,#0]           ;6108  ; NUMIST
00460e  4284              CMP      r4,r0                 ;6108
004610  ddc3              BLE      |L1.17818|
004612  e08d              B        |L1.18224|
                  |L1.17940|
;;;6115   	     }
;;;6116   
;;;6117   	
;;;6118   /*
;;;6119   
;;;6120   	if(bps_all_off_cnt>20)
;;;6121   		{
;;;6122   		for(i=0;i<=NUMIST;i++)
;;;6123   			{
;;;6124   	     	bps[i]._flags_tu=1;
;;;6125   	     	}
;;;6126   		}
;;;6127   	else if(bps_mask_off_cnt>20)
;;;6128   		{
;;;6129   		for(i=0;i<=NUMIST;i++)
;;;6130   			{
;;;6131   			if(mess_data[1]&(1<<i)) bps[i]._flags_tu=1;
;;;6132   	     	}
;;;6133   		}	
;;;6134   		
;;;6135   	else if(bps_mask_on_off_cnt>20)
;;;6136   		{
;;;6137   		for(i=0;i<=NUMIST;i++)
;;;6138   			{
;;;6139   			if(mess_data[1]&(1<<i)) bps[i]._flags_tu=1;
;;;6140   			else bps[i]._flags_tu=0;
;;;6141   	     	}
;;;6142   		}
;;;6143   		
;;;6144   	if(mess_data[0]==PARAM_BPS_MASK_ON)
;;;6145   		{
;;;6146   		for(i=0;i<=NUMIST;i++)
;;;6147   			{
;;;6148   			if(mess_data[1]&(1<<i)) bps[i]._flags_tu=0;
;;;6149   	     	}
;;;6150   		}
;;;6151   */										
;;;6152   	}
;;;6153   
;;;6154   
;;;6155   else if(b1Hz_sh)
004614  f8960022          LDRB     r0,[r6,#0x22]  ; b1Hz_sh
004618  b3e8              CBZ      r0,|L1.18070|
;;;6156   	{
;;;6157   	ptr__=0;
00461a  f04f0400          MOV      r4,#0
;;;6158        for(i=0;i<=NUMIST;i++)
00461e  4621              MOV      r1,r4
004620  f9bb0000          LDRSH    r0,[r11,#0]           ;6108
004624  e00a              B        |L1.17980|
                  |L1.17958|
;;;6159   		{
;;;6160   	     bps[i]._flags_tu=1;
004626  eb0102c1          ADD      r2,r1,r1,LSL #3
00462a  eb021201          ADD      r2,r2,r1,LSL #4
00462e  eb080282          ADD      r2,r8,r2,LSL #2
004632  f882a02c          STRB     r10,[r2,#0x2c]
004636  f1010101          ADD      r1,r1,#1              ;6158
00463a  b2c9              UXTB     r1,r1                 ;6158
                  |L1.17980|
00463c  4281              CMP      r1,r0                 ;6158
00463e  ddf2              BLE      |L1.17958|
;;;6161   	     }	
;;;6162     	     
;;;6163     	for(i=0;(i<NUMIST)&&(ptr__<num_necc);i++)
004640  f04f0100          MOV      r1,#0
004644  e023              B        |L1.18062|
                  |L1.17990|
;;;6164     		{
;;;6165   		char ii,iii;
;;;6166   
;;;6167   		ii=(char)NUMIST;
004646  b2c2              UXTB     r2,r0
;;;6168   		//if(ii<0)ii=0;
;;;6169   		if(ii>32)ii=32;
004648  2a20              CMP      r2,#0x20
00464a  d901              BLS      |L1.18000|
00464c  f04f0220          MOV      r2,#0x20
                  |L1.18000|
;;;6170   		iii=numOfForvardBps;
004650  f8963028          LDRB     r3,[r6,#0x28]  ; numOfForvardBps
;;;6171   		//if(iii<0)iii=0;
;;;6172   		if(iii>=NUMIST)iii=0;
004654  4283              CMP      r3,r0
004656  db01              BLT      |L1.18012|
004658  f04f0300          MOV      r3,#0
                  |L1.18012|
;;;6173   		iii+=i;
00465c  440b              ADD      r3,r3,r1
00465e  b2db              UXTB     r3,r3
;;;6174   		iii=iii%ii;
004660  fbb3f5f2          UDIV     r5,r3,r2
004664  fb023215          MLS      r2,r2,r5,r3
;;;6175   		
;;;6176     	     if((bps[iii]._state==bsRDY)||(bps[iii]._state==bsWRK))
004668  eb0203c2          ADD      r3,r2,r2,LSL #3
00466c  eb031202          ADD      r2,r3,r2,LSL #4
004670  eb080282          ADD      r2,r8,r2,LSL #2
004674  7893              LDRB     r3,[r2,#2]
004676  2b02              CMP      r3,#2
004678  d001              BEQ      |L1.18046|
00467a  2b01              CMP      r3,#1
00467c  d104              BNE      |L1.18056|
                  |L1.18046|
;;;6177     	         	{
;;;6178     	         	bps[iii]._flags_tu=0;
00467e  f882702c          STRB     r7,[r2,#0x2c]
;;;6179     	         	ptr__++;
004682  f1040401          ADD      r4,r4,#1
004686  b2e4              UXTB     r4,r4
                  |L1.18056|
004688  f1010101          ADD      r1,r1,#1              ;6163
00468c  b2c9              UXTB     r1,r1                 ;6163
                  |L1.18062|
00468e  4281              CMP      r1,r0                 ;6163
004690  da06              BGE      |L1.18080|
004692  4aa5              LDR      r2,|L1.18728|
004694  e000              B        |L1.18072|
                  |L1.18070|
004696  e04b              B        |L1.18224|
                  |L1.18072|
004698  f9b22000          LDRSH    r2,[r2,#0]            ;6163  ; num_necc
00469c  4294              CMP      r4,r2                 ;6163
00469e  dbd2              BLT      |L1.17990|
                  |L1.18080|
;;;6180     	         	}
;;;6181   			
;;;6182     	     }
;;;6183   	bps[numOfForvardBps_old]._flags_tu=0;
0046a0  f8961029          LDRB     r1,[r6,#0x29]  ; numOfForvardBps_old
0046a4  eb0102c1          ADD      r2,r1,r1,LSL #3
0046a8  eb021101          ADD      r1,r2,r1,LSL #4
0046ac  eb080181          ADD      r1,r8,r1,LSL #2
0046b0  f881702c          STRB     r7,[r1,#0x2c]
;;;6184   
;;;6185   	if(main_1Hz_cnt<60)
0046b4  499d              LDR      r1,|L1.18732|
0046b6  f9b11000          LDRSH    r1,[r1,#0]  ; main_1Hz_cnt
0046ba  293c              CMP      r1,#0x3c
0046bc  da0f              BGE      |L1.18142|
;;;6186   		{
;;;6187        	for(i=0;i<=NUMIST;i++)
0046be  f04f0100          MOV      r1,#0
0046c2  e00a              B        |L1.18138|
                  |L1.18116|
;;;6188   			{
;;;6189   	     	bps[i]._flags_tu=0;
0046c4  eb0102c1          ADD      r2,r1,r1,LSL #3
0046c8  eb021201          ADD      r2,r2,r1,LSL #4
0046cc  eb080282          ADD      r2,r8,r2,LSL #2
0046d0  f882702c          STRB     r7,[r2,#0x2c]
0046d4  f1010101          ADD      r1,r1,#1              ;6187
0046d8  b2c9              UXTB     r1,r1                 ;6187
                  |L1.18138|
0046da  4281              CMP      r1,r0                 ;6187
0046dc  ddf2              BLE      |L1.18116|
                  |L1.18142|
;;;6190   	     	}	
;;;6191   		}
;;;6192   	if(ipsBlckStat)
0046de  4994              LDR      r1,|L1.18736|
0046e0  8809              LDRH     r1,[r1,#0]  ; ipsBlckStat
0046e2  b179              CBZ      r1,|L1.18180|
;;;6193   		{
;;;6194        	for(i=0;i<=NUMIST;i++)
0046e4  f04f0100          MOV      r1,#0
0046e8  e00a              B        |L1.18176|
                  |L1.18154|
;;;6195   			{
;;;6196   	     	bps[i]._flags_tu=1;
0046ea  eb0102c1          ADD      r2,r1,r1,LSL #3
0046ee  eb021201          ADD      r2,r2,r1,LSL #4
0046f2  eb080282          ADD      r2,r8,r2,LSL #2
0046f6  f882a02c          STRB     r10,[r2,#0x2c]
0046fa  f1010101          ADD      r1,r1,#1              ;6194
0046fe  b2c9              UXTB     r1,r1                 ;6194
                  |L1.18176|
004700  4281              CMP      r1,r0                 ;6194
004702  ddf2              BLE      |L1.18154|
                  |L1.18180|
;;;6197   	     	}
;;;6198   		}
;;;6199   
;;;6200        for(i=0;i<=NUMIST;i++)
004704  f04f0100          MOV      r1,#0
;;;6201   		{
;;;6202   	    if(bps[i]._flags_tu==1) 	bps[i]._x_=-50;
004708  f06f0331          MVN      r3,#0x31
00470c  e00e              B        |L1.18220|
                  |L1.18190|
00470e  eb0102c1          ADD      r2,r1,r1,LSL #3
004712  eb021201          ADD      r2,r2,r1,LSL #4
004716  eb080282          ADD      r2,r8,r2,LSL #2
00471a  f892402c          LDRB     r4,[r2,#0x2c]
00471e  2c01              CMP      r4,#1
004720  d101              BNE      |L1.18214|
004722  f8a23054          STRH     r3,[r2,#0x54]
                  |L1.18214|
004726  f1010101          ADD      r1,r1,#1              ;6200
00472a  b2c9              UXTB     r1,r1                 ;6200
                  |L1.18220|
00472c  4281              CMP      r1,r0                 ;6200
00472e  ddee              BLE      |L1.18190|
                  |L1.18224|
;;;6203   	   	}	
;;;6204   		 
;;;6205     	}
;;;6206   
;;;6207   
;;;6208   for(i=0;i<NUMIST;i++)
004730  f04f0000          MOV      r0,#0
;;;6209        {
;;;6210        if(bps[i]._ist_blok_host_cnt!=0)
;;;6211             {
;;;6212             bps[i]._flags_tu=99;
004734  f04f0463          MOV      r4,#0x63
004738  f9bb1000          LDRSH    r1,[r11,#0]           ;6108
00473c  e00f              B        |L1.18270|
                  |L1.18238|
00473e  eb0002c0          ADD      r2,r0,r0,LSL #3       ;6210
004742  eb021200          ADD      r2,r2,r0,LSL #4       ;6210
004746  eb080282          ADD      r2,r8,r2,LSL #2       ;6210
00474a  6bd3              LDR      r3,[r2,#0x3c]         ;6210
00474c  b123              CBZ      r3,|L1.18264|
00474e  f882402c          STRB     r4,[r2,#0x2c]
;;;6213   	     bps[i]._ist_blok_host_cnt--;
004752  f1a30301          SUB      r3,r3,#1
004756  63d3              STR      r3,[r2,#0x3c]
                  |L1.18264|
004758  f1000001          ADD      r0,r0,#1              ;6208
00475c  b2c0              UXTB     r0,r0                 ;6208
                  |L1.18270|
00475e  4288              CMP      r0,r1                 ;6208
004760  dbed              BLT      |L1.18238|
;;;6214             }
;;;6215        }
;;;6216   
;;;6217   
;;;6218   
;;;6219   
;;;6220   b1Hz_sh=0;
004762  f8867022          STRB     r7,[r6,#0x22]
;;;6221   
;;;6222   
;;;6223   num_of_wrks_bps=0;
004766  77b7              STRB     r7,[r6,#0x1e]
;;;6224   tempUS=0;
004768  f04f0200          MOV      r2,#0
;;;6225   for(i=0;i<NUMIST;i++)
00476c  4610              MOV      r0,r2
00476e  e013              B        |L1.18328|
                  |L1.18288|
;;;6226   	{
;;;6227   	if(bps[i]._state==bsWRK)
004770  eb0003c0          ADD      r3,r0,r0,LSL #3
004774  eb031300          ADD      r3,r3,r0,LSL #4
004778  eb080383          ADD      r3,r8,r3,LSL #2
00477c  789c              LDRB     r4,[r3,#2]
00477e  2c01              CMP      r4,#1
004780  d107              BNE      |L1.18322|
;;;6228   		{
;;;6229   		num_of_wrks_bps++;
004782  7fb4              LDRB     r4,[r6,#0x1e]  ; num_of_wrks_bps
004784  f1040401          ADD      r4,r4,#1
004788  77b4              STRB     r4,[r6,#0x1e]
;;;6230   		if(bps[i]._Uii>tempUS)tempUS=bps[i]._Uii;
00478a  69db              LDR      r3,[r3,#0x1c]
00478c  4293              CMP      r3,r2
00478e  dd00              BLE      |L1.18322|
004790  b29a              UXTH     r2,r3
                  |L1.18322|
004792  f1000001          ADD      r0,r0,#1              ;6225
004796  b2c0              UXTB     r0,r0                 ;6225
                  |L1.18328|
004798  4288              CMP      r0,r1                 ;6225
00479a  dbe9              BLT      |L1.18288|
;;;6231   		}
;;;6232   	}
;;;6233   Ubpsmax=tempUS;
00479c  f8a6204e          STRH     r2,[r6,#0x4e]
;;;6234   
;;;6235   bPARALLEL_ENOUG=0;
0047a0  f886702c          STRB     r7,[r6,#0x2c]
;;;6236   bPARALLEL_NOT_ENOUG=1;
0047a4  f886a02b          STRB     r10,[r6,#0x2b]
;;;6237   
;;;6238   for(i=0;i<NUMIST;i++)
0047a8  f04f0000          MOV      r0,#0
;;;6239   	{
;;;6240   	if(bps[i]._Ti>=TSIGN)
0047ac  4a61              LDR      r2,|L1.18740|
0047ae  f9b23000          LDRSH    r3,[r2,#0]
;;;6241   		{
;;;6242   		bPARALLEL_ENOUG=1;
;;;6243   		}
;;;6244   	if(bps[i]._Ti>=(TSIGN-5))
0047b2  f1a30405          SUB      r4,r3,#5
0047b6  e011              B        |L1.18396|
                  |L1.18360|
0047b8  eb0002c0          ADD      r2,r0,r0,LSL #3       ;6240
0047bc  eb021200          ADD      r2,r2,r0,LSL #4       ;6240
0047c0  eb080282          ADD      r2,r8,r2,LSL #2       ;6240
0047c4  6a92              LDR      r2,[r2,#0x28]         ;6240
0047c6  429a              CMP      r2,r3                 ;6240
0047c8  db01              BLT      |L1.18382|
0047ca  f886a02c          STRB     r10,[r6,#0x2c]        ;6242
                  |L1.18382|
0047ce  42a2              CMP      r2,r4
0047d0  db01              BLT      |L1.18390|
;;;6245   		{
;;;6246   		bPARALLEL_NOT_ENOUG=0;
0047d2  f886702b          STRB     r7,[r6,#0x2b]
                  |L1.18390|
0047d6  f1000001          ADD      r0,r0,#1              ;6238
0047da  b2c0              UXTB     r0,r0                 ;6238
                  |L1.18396|
0047dc  4288              CMP      r0,r1                 ;6238
0047de  dbeb              BLT      |L1.18360|
;;;6247   		}
;;;6248   	}
;;;6249   
;;;6250   if(bPARALLEL_ENOUG==1)
0047e0  f896002c          LDRB     r0,[r6,#0x2c]  ; bPARALLEL_ENOUG
0047e4  2801              CMP      r0,#1
0047e6  d00a              BEQ      |L1.18430|
;;;6251   	{
;;;6252   	bPARALLEL=1;
;;;6253   	}
;;;6254   else if(bPARALLEL && bPARALLEL_NOT_ENOUG)
0047e8  f896002d          LDRB     r0,[r6,#0x2d]  ; bPARALLEL
0047ec  2800              CMP      r0,#0
0047ee  d005              BEQ      |L1.18428|
0047f0  f896002b          LDRB     r0,[r6,#0x2b]  ; bPARALLEL_NOT_ENOUG
0047f4  2800              CMP      r0,#0
0047f6  d001              BEQ      |L1.18428|
;;;6255   	{
;;;6256   	bPARALLEL=0;
0047f8  f886702d          STRB     r7,[r6,#0x2d]
                  |L1.18428|
;;;6257   	}
;;;6258   }
0047fc  e667              B        |L1.17614|
                  |L1.18430|
0047fe  f886a02d          STRB     r10,[r6,#0x2d]        ;6252
004802  e664              B        |L1.17614|
;;;6259   
                          ENDP

                  powerAntiAliasingHndl PROC
;;;6266   //-----------------------------------------------
;;;6267   void powerAntiAliasingHndl(void)
004804  b570              PUSH     {r4-r6,lr}
;;;6268   {
;;;6269   if((power_summary_tempo/10UL)==(power_summary_tempo_old/10UL))
004806  230a              MOVS     r3,#0xa
004808  4c4c              LDR      r4,|L1.18748|
00480a  484b              LDR      r0,|L1.18744|
;;;6270   	{
;;;6271   	if(powerSummaryCnt<15)powerSummaryCnt++;
;;;6272   	if(powerSummaryCnt>=10)
;;;6273   		{
;;;6274   		power_summary=power_summary_tempo;
;;;6275   		}
;;;6276   	}
;;;6277   else powerSummaryCnt=0;
00480c  2500              MOVS     r5,#0
00480e  6822              LDR      r2,[r4,#0]            ;6269  ; power_summary_tempo_old
004810  6800              LDR      r0,[r0,#0]            ;6269  ; power_summary_tempo
004812  fbb2f6f3          UDIV     r6,r2,r3              ;6269
004816  fbb0f1f3          UDIV     r1,r0,r3              ;6269
00481a  4a49              LDR      r2,|L1.18752|
00481c  42b1              CMP      r1,r6                 ;6269
00481e  d10b              BNE      |L1.18488|
004820  7811              LDRB     r1,[r2,#0]            ;6271  ; powerSummaryCnt
004822  290f              CMP      r1,#0xf               ;6271
004824  d202              BCS      |L1.18476|
004826  f1010101          ADD      r1,r1,#1              ;6271
00482a  7011              STRB     r1,[r2,#0]            ;6271
                  |L1.18476|
00482c  7811              LDRB     r1,[r2,#0]            ;6272  ; powerSummaryCnt
00482e  290a              CMP      r1,#0xa               ;6272
004830  d303              BCC      |L1.18490|
004832  4944              LDR      r1,|L1.18756|
004834  6008              STR      r0,[r1,#0]            ;6274  ; power_summary
004836  e000              B        |L1.18490|
                  |L1.18488|
004838  7015              STRB     r5,[r2,#0]
                  |L1.18490|
;;;6278   power_summary_tempo_old=power_summary_tempo;
00483a  6020              STR      r0,[r4,#0]  ; power_summary_tempo_old
;;;6279   
;;;6280   if((power_current_tempo/10UL)==(power_current_tempo_old/10UL))
00483c  4842              LDR      r0,|L1.18760|
00483e  4c43              LDR      r4,|L1.18764|
004840  f9b00000          LDRSH    r0,[r0,#0]  ; power_current_tempo
004844  f9b42000          LDRSH    r2,[r4,#0]  ; power_current_tempo_old
004848  fbb0f1f3          UDIV     r1,r0,r3
00484c  fbb2f3f3          UDIV     r3,r2,r3
;;;6281   	{
;;;6282   	if(powerCurrentCnt<15)powerCurrentCnt++;
004850  4a3f              LDR      r2,|L1.18768|
004852  4299              CMP      r1,r3                 ;6280
004854  d10b              BNE      |L1.18542|
004856  7811              LDRB     r1,[r2,#0]  ; powerCurrentCnt
004858  290f              CMP      r1,#0xf
00485a  d202              BCS      |L1.18530|
00485c  f1010101          ADD      r1,r1,#1
004860  7011              STRB     r1,[r2,#0]
                  |L1.18530|
;;;6283   	if(powerCurrentCnt>=10)
004862  7811              LDRB     r1,[r2,#0]  ; powerCurrentCnt
004864  290a              CMP      r1,#0xa
004866  d303              BCC      |L1.18544|
;;;6284   		{
;;;6285   		power_current=power_current_tempo;
004868  493a              LDR      r1,|L1.18772|
00486a  8008              STRH     r0,[r1,#0]
00486c  e000              B        |L1.18544|
                  |L1.18542|
;;;6286   		}
;;;6287   	}
;;;6288   else powerCurrentCnt=0;
00486e  7015              STRB     r5,[r2,#0]
                  |L1.18544|
;;;6289   power_current_tempo_old=power_current_tempo;
004870  8020              STRH     r0,[r4,#0]
;;;6290   }
004872  bd70              POP      {r4-r6,pc}
;;;6291   
                          ENDP

                  energometr_hndl PROC
;;;6401   //-----------------------------------------------
;;;6402   void energometr_hndl(void)
004874  4770              BX       lr
;;;6403   {
;;;6404   //2F 3F 21 0D 0A 
;;;6405   //05 33 0A 2F 45 4B 54 35 43 45 31 30 32 4D 76 30 31 0D 0A 
;;;6406   //2F 3F 21 0D 0A 
;;;6407   //05 33 0A 2F 45 4B 54 35 43 45 31 30 32 4D 76 30 31 0D 0A 
;;;6408   //06 30 35 31 0D 0A 
;;;6409   //06 33 0A 01 50 30 02 28 31 31 38 36 35 32 39 32 32 29 03 2A 
;;;6410   
;;;6411   #ifdef CE102M_ENABLED
;;;6412   /*if
;;;6413   uart_out1 (5,0xaf,0x3f,0x21,0x8d,0x0a,0);*/
;;;6414   
;;;6415   if(read_power_cnt_main_cnt)
;;;6416   	{
;;;6417   	read_power_cnt_main_cnt--;
;;;6418   	if(read_power_cnt_main_cnt==0)
;;;6419   		{
;;;6420   		rx_read_power_cnt_phase=0;
;;;6421   		if(bENERGOMETR_UIP==0)bENERGOMETR_UIP=1;
;;;6422   		else if(bENERGOMETR_UIP==1)bENERGOMETR_UIP=2;
;;;6423   		else bENERGOMETR_UIP=0;
;;;6424   		//bENERGOMETR_UIP=2;
;;;6425   		}
;;;6426   	}
;;;6427   
;;;6428   if (rx_read_power_cnt_phase==0)
;;;6429   	{
;;;6430   	char command_with_crc[20];
;;;6431   	
;;;6432      	command_with_crc[0]=0xaf;  // /
;;;6433   	command_with_crc[1]=0x3f;  // ?
;;;6434   	command_with_crc[2]=0x21;  // !
;;;6435   	command_with_crc[3]=0x8d;  // CR
;;;6436   	command_with_crc[4]=0x0a;  // LF
;;;6437   
;;;6438   	uart_out__adr1(command_with_crc,5);
;;;6439   
;;;6440   	rx_wr_index1=0;
;;;6441   	rx_read_power_cnt_phase=1;
;;;6442   
;;;6443   	read_power_cnt_main_cnt=50;
;;;6444   	}
;;;6445   if ((rx_read_power_cnt_phase==2)&&(!ce102m_delayCnt))
;;;6446   	{
;;;6447   	char command_with_crc[20];
;;;6448   	
;;;6449   	command_with_crc[0]=0x06;  //  
;;;6450   	command_with_crc[1]=0x30;  // 0
;;;6451   	command_with_crc[2]=0x35;  // 5
;;;6452   	command_with_crc[3]=0xb1;  // 1
;;;6453   	command_with_crc[4]=0x8d;  // CR
;;;6454   	command_with_crc[5]=0x0a;  // LF
;;;6455   	
;;;6456   	uart_out__adr1(command_with_crc,6);
;;;6457   	
;;;6458   	rx_wr_index1=0;
;;;6459   	rx_read_power_cnt_phase=3;
;;;6460   
;;;6461   	read_power_cnt_main_cnt=50;
;;;6462   	}  
;;;6463   
;;;6464   if ((rx_read_power_cnt_phase==4)&&(!ce102m_delayCnt))
;;;6465   	{
;;;6466   	char command_with_crc[20];
;;;6467   	
;;;6468   	command_with_crc[0]=0x81;  //  
;;;6469   	command_with_crc[1]=0xd2;  // 0
;;;6470   	command_with_crc[2]=0xb1;  // 5
;;;6471   	command_with_crc[3]=0x82;  // 1
;;;6472   	command_with_crc[4]=0x56;  // CR
;;;6473   	command_with_crc[5]=0xcf;  // LF
;;;6474   	command_with_crc[6]=0xcc;  // 1
;;;6475   	command_with_crc[7]=0xd4;  // CR
;;;6476   	command_with_crc[8]=0x41;  // LF
;;;6477   	command_with_crc[9]=0x28;  // 1
;;;6478   	command_with_crc[10]=0xa9;  // CR
;;;6479   	command_with_crc[11]=0x03;  // LF
;;;6480   	command_with_crc[12]=0x5f;  // LF
;;;6481   		
;;;6482   	uart_out__adr1(command_with_crc,13);
;;;6483   	
;;;6484   	rx_wr_index1=0;
;;;6485   	rx_read_power_cnt_phase=5;
;;;6486   
;;;6487   	read_power_cnt_main_cnt=50;
;;;6488   	}  
;;;6489   
;;;6490   if ((rx_read_power_cnt_phase==8)&&(!ce102m_delayCnt))
;;;6491   	{
;;;6492   	char command_with_crc[20];
;;;6493   	
;;;6494   	command_with_crc[0]=0x81;  //  
;;;6495   	command_with_crc[1]=0xd2;  // 0
;;;6496   	command_with_crc[2]=0xb1;  // 5
;;;6497   	command_with_crc[3]=0x82;  // 1
;;;6498   	command_with_crc[4]=0xc3;  // CR
;;;6499   	command_with_crc[5]=0x55;  // LF
;;;6500   	command_with_crc[6]=0xd2;  // 1
;;;6501   	command_with_crc[7]=0xd2;  // CR
;;;6502   	command_with_crc[8]=0xc5;  // LF
;;;6503   	command_with_crc[9]=0x28;  // 1
;;;6504   	command_with_crc[10]=0xa9;  // CR
;;;6505   	command_with_crc[11]=0x03;  // LF
;;;6506   	command_with_crc[12]=0x5a;  // LF
;;;6507   		
;;;6508   	uart_out__adr1(command_with_crc,13);
;;;6509   	
;;;6510   	rx_wr_index1=0;
;;;6511   	rx_read_power_cnt_phase=9;
;;;6512   
;;;6513   	read_power_cnt_main_cnt=50;
;;;6514   	}  
;;;6515   
;;;6516   if ((rx_read_power_cnt_phase==20)&&(!ce102m_delayCnt))
;;;6517   	{
;;;6518   	char command_with_crc[20];
;;;6519   	
;;;6520   	command_with_crc[0]=0x81;  //  		01
;;;6521   	command_with_crc[1]=0xd2;  // R		52
;;;6522   	command_with_crc[2]=0xb1;  // 1		31
;;;6523   	command_with_crc[3]=0x82;  // 		02
;;;6524   	command_with_crc[4]=0x50;  // P		50
;;;6525   	command_with_crc[5]=0xcf;  // O	  	4f
;;;6526   	command_with_crc[6]=0xd7;  // W		57
;;;6527   	command_with_crc[7]=0xc5;  // E		45
;;;6528   	command_with_crc[8]=0x50;  // P		50
;;;6529   	command_with_crc[9]=0x28;  // (		28
;;;6530   	command_with_crc[10]=0xa9;  // )	29
;;;6531   	command_with_crc[11]=0x03;  // 		03
;;;6532   	command_with_crc[12]=0xe4;  // d	64
;;;6533   		
;;;6534   	uart_out__adr1(command_with_crc,13);
;;;6535   	
;;;6536   	rx_wr_index1=0;
;;;6537   	rx_read_power_cnt_phase=21;
;;;6538   
;;;6539   	read_power_cnt_main_cnt=50;
;;;6540   	}  
;;;6541   
;;;6542   
;;;6543   #endif
;;;6544   }
;;;6545   
                          ENDP

                  ips_current_average_hndl PROC
;;;6546   //-----------------------------------------------
;;;6547   void ips_current_average_hndl(void)		//процедура выравнивания токов между комплектами ЗВУ 1Гц
004876  e92d4ff0          PUSH     {r4-r11,lr}
;;;6548   {
00487a  b089              SUB      sp,sp,#0x24
;;;6549   
;;;6550   if(++ica_timer_cnt>=10) 
00487c  4e36              LDR      r6,|L1.18776|
;;;6551   	{
;;;6552   	ica_timer_cnt=0;
00487e  2400              MOVS     r4,#0
004880  7830              LDRB     r0,[r6,#0]            ;6550  ; ica_timer_cnt
004882  1c40              ADDS     r0,r0,#1              ;6550
004884  b2c0              UXTB     r0,r0                 ;6550
004886  7030              STRB     r0,[r6,#0]            ;6550
004888  280a              CMP      r0,#0xa               ;6550
00488a  d300              BCC      |L1.18574|
00488c  7034              STRB     r4,[r6,#0]
                  |L1.18574|
;;;6553   	}
;;;6554   
;;;6555   if((ica_timer_cnt==0) && (num_of_wrks_bps)&&((spc_stat==spcOFF)&&(vz1_stat==vz1sOFF)&&(vz2_stat==vz2sOFF)&&(sp_ch_stat==scsOFF)))
00488e  7830              LDRB     r0,[r6,#0]  ; ica_timer_cnt
004890  4f32              LDR      r7,|L1.18780|
;;;6556   	{
;;;6557   	
;;;6558   	ica_plazma[0]++;
;;;6559   
;;;6560   	ica_my_current=bps_I;
;;;6561   
;;;6562   	if((ica_my_current>ica_your_current)&&((ica_my_current-ica_your_current)>=5)&&((ICA_EN==1)||((ICA_EN==2)&&(ica_cntrl_hndl_cnt>5))))
004892  f8dfb0cc          LDR      r11,|L1.18784|
004896  4d20              LDR      r5,|L1.18712|
004898  bbe8              CBNZ     r0,|L1.18710|
00489a  7fa8              LDRB     r0,[r5,#0x1e]         ;6555  ; num_of_wrks_bps
00489c  b3d8              CBZ      r0,|L1.18710|
00489e  f8950023          LDRB     r0,[r5,#0x23]         ;6555  ; spc_stat
0048a2  7969              LDRB     r1,[r5,#5]            ;6555  ; vz1_stat
0048a4  4308              ORRS     r0,r0,r1              ;6555
0048a6  79e9              LDRB     r1,[r5,#7]            ;6555  ; vz2_stat
0048a8  4308              ORRS     r0,r0,r1              ;6555
0048aa  7839              LDRB     r1,[r7,#0]            ;6555  ; sp_ch_stat
0048ac  4308              ORRS     r0,r0,r1              ;6555
0048ae  d17e              BNE      |L1.18862|
0048b0  f8df90b0          LDR      r9,|L1.18788|
0048b4  f8990000          LDRB     r0,[r9,#0]            ;6558  ; ica_plazma
0048b8  f1000001          ADD      r0,r0,#1              ;6558
0048bc  f8890000          STRB     r0,[r9,#0]            ;6558
0048c0  4829              LDR      r0,|L1.18792|
0048c2  f9b01000          LDRSH    r1,[r0,#0]            ;6560  ; bps_I
0048c6  4829              LDR      r0,|L1.18796|
0048c8  8001              STRH     r1,[r0,#0]            ;6560
0048ca  4829              LDR      r0,|L1.18800|
;;;6563   		{
;;;6564   		ica_plazma[1]++;
;;;6565   		ica_u_necc--;
0048cc  f8dfa0a4          LDR      r10,|L1.18804|
0048d0  f9b02000          LDRSH    r2,[r0,#0]            ;6562  ; ica_your_current
0048d4  4648              MOV      r0,r9                 ;6558
0048d6  f9bac000          LDRSH    r12,[r10,#0]
0048da  7843              LDRB     r3,[r0,#1]            ;6564
0048dc  4826              LDR      r0,|L1.18808|
0048de  4291              CMP      r1,r2                 ;6562
0048e0  f9b08000          LDRSH    r8,[r0,#0]            ;6562
0048e4  4658              MOV      r0,r11                ;6562
0048e6  f9b00000          LDRSH    r0,[r0,#0]            ;6562
0048ea  dd47              BLE      |L1.18812|
0048ec  eba10e02          SUB      lr,r1,r2              ;6562
0048f0  f1be0f05          CMP      lr,#5                 ;6562
0048f4  db42              BLT      |L1.18812|
0048f6  2801              CMP      r0,#1                 ;6562
0048f8  d004              BEQ      |L1.18692|
0048fa  2802              CMP      r0,#2                 ;6562
0048fc  d13e              BNE      |L1.18812|
0048fe  f1b80f05          CMP      r8,#5                 ;6562
004902  dd3b              BLE      |L1.18812|
                  |L1.18692|
004904  f1030301          ADD      r3,r3,#1              ;6564
004908  f8893001          STRB     r3,[r9,#1]            ;6564
00490c  f1ac0c01          SUB      r12,r12,#1
004910  f8aac000          STRH     r12,[r10,#0]
004914  e046              B        |L1.18852|
                  |L1.18710|
004916  e04a              B        |L1.18862|
                  |L1.18712|
                          DCD      ||area_number.25||
                  |L1.18716|
                          DCD      bps
                  |L1.18720|
                          DCD      NUMIST
                  |L1.18724|
                          DCD      mess_data
                  |L1.18728|
                          DCD      num_necc
                  |L1.18732|
                          DCD      main_1Hz_cnt
                  |L1.18736|
                          DCD      ipsBlckStat
                  |L1.18740|
                          DCD      TSIGN
                  |L1.18744|
                          DCD      power_summary_tempo
                  |L1.18748|
                          DCD      power_summary_tempo_old
                  |L1.18752|
                          DCD      powerSummaryCnt
                  |L1.18756|
                          DCD      power_summary
                  |L1.18760|
                          DCD      power_current_tempo
                  |L1.18764|
                          DCD      power_current_tempo_old
                  |L1.18768|
                          DCD      powerCurrentCnt
                  |L1.18772|
                          DCD      power_current
                  |L1.18776|
                          DCD      ica_timer_cnt
                  |L1.18780|
                          DCD      sp_ch_stat
                  |L1.18784|
                          DCD      ICA_EN
                  |L1.18788|
                          DCD      ica_plazma
                  |L1.18792|
                          DCD      bps_I
                  |L1.18796|
                          DCD      ica_my_current
                  |L1.18800|
                          DCD      ica_your_current
                  |L1.18804|
                          DCD      ica_u_necc
                  |L1.18808|
                          DCD      ica_cntrl_hndl_cnt
                  |L1.18812|
;;;6566   		}
;;;6567   	else if((ica_my_current<ica_your_current)&&((ica_your_current-ica_my_current)>=5)&&((ICA_EN==1)||((ICA_EN==2)&&(ica_cntrl_hndl_cnt>5))))
00497c  4291              CMP      r1,r2
00497e  da11              BGE      |L1.18852|
004980  1a51              SUBS     r1,r2,r1
004982  2905              CMP      r1,#5
004984  db0e              BLT      |L1.18852|
004986  2801              CMP      r0,#1
004988  d004              BEQ      |L1.18836|
00498a  2802              CMP      r0,#2
00498c  d10a              BNE      |L1.18852|
00498e  f1b80f05          CMP      r8,#5
004992  dd07              BLE      |L1.18852|
                  |L1.18836|
;;;6568   		{
;;;6569   		ica_plazma[1]--;
004994  f1a30301          SUB      r3,r3,#1
004998  f8893001          STRB     r3,[r9,#1]
;;;6570   		ica_u_necc++;
00499c  f10c0c01          ADD      r12,r12,#1
0049a0  f8aac000          STRH     r12,[r10,#0]
                  |L1.18852|
;;;6571   		}
;;;6572   	gran(&ica_u_necc,-100,100);
0049a4  2264              MOVS     r2,#0x64
0049a6  4251              RSBS     r1,r2,#0
0049a8  48f8              LDR      r0,|L1.19852|
0049aa  f7fffffe          BL       gran
                  |L1.18862|
;;;6573   	}
;;;6574   
;;;6575   
;;;6576   if((ICA_EN==1)&&((spc_stat==spcOFF)&&(vz1_stat==vz1sOFF)&&(vz2_stat==vz2sOFF)&&(sp_ch_stat==scsOFF)) && (num_of_wrks_bps))
0049ae  f8bb0000          LDRH     r0,[r11,#0]  ; ICA_EN
0049b2  2801              CMP      r0,#1
0049b4  d169              BNE      |L1.19082|
0049b6  f8950023          LDRB     r0,[r5,#0x23]  ; spc_stat
0049ba  7969              LDRB     r1,[r5,#5]  ; vz1_stat
0049bc  4308              ORRS     r0,r0,r1
0049be  79e9              LDRB     r1,[r5,#7]  ; vz2_stat
0049c0  4308              ORRS     r0,r0,r1
0049c2  7839              LDRB     r1,[r7,#0]  ; sp_ch_stat
0049c4  4308              ORRS     r0,r0,r1
0049c6  d160              BNE      |L1.19082|
0049c8  7fa8              LDRB     r0,[r5,#0x1e]  ; num_of_wrks_bps
0049ca  2800              CMP      r0,#0
0049cc  d05d              BEQ      |L1.19082|
;;;6577   	{
;;;6578   	
;;;6579   //	ica_connect_cnt++;
;;;6580   
;;;6581   	if(ica_timer_cnt==8)
0049ce  7830              LDRB     r0,[r6,#0]  ; ica_timer_cnt
;;;6582   		{
;;;6583   		char modbus_buff[20],i;
;;;6584   		short crc_temp;
;;;6585   	
;;;6586   		modbus_buff[0] = ICA_MODBUS_ADDRESS;
0049d0  4bef              LDR      r3,|L1.19856|
;;;6587   		modbus_buff[1] = 4;
;;;6588   		modbus_buff[2] = 0;
;;;6589   		modbus_buff[3] = 2;
;;;6590   		modbus_buff[4] = 0;	
;;;6591   		modbus_buff[5] = 1;
;;;6592   	
;;;6593   		crc_temp= CRC16_2(modbus_buff,6);
;;;6594   	
;;;6595   		modbus_buff[6]= (char)crc_temp;
;;;6596   		modbus_buff[7]= (char)(crc_temp>>8);
;;;6597   	
;;;6598   		if(ICA_CH==0)
0049d2  4ff0              LDR      r7,|L1.19860|
0049d4  2808              CMP      r0,#8                 ;6581
0049d6  d05b              BEQ      |L1.19088|
;;;6599   			{
;;;6600   			for (i=0;i<8;i++)
;;;6601   				{
;;;6602   				putchar_sc16is700(modbus_buff[i]);
;;;6603   				}
;;;6604   			}
;;;6605   		else if(ICA_CH==2)
;;;6606   			{
;;;6607   			uart_out1 (5,4,0,2,0,1,0);
;;;6608   			}
;;;6609   		}
;;;6610   	else
;;;6611   		{
;;;6612   		char modbus_buff[20],i;
;;;6613   		short crc_temp, tempSSSS;
;;;6614   
;;;6615   		tempSSSS=cntrl_stat_old;
0049d8  f9b56034          LDRSH    r6,[r5,#0x34]  ; cntrl_stat_old
;;;6616   		if(	(main_kb_cnt==(TBAT*60)-21) || (main_kb_cnt==(TBAT*60)-20) || (main_kb_cnt==(TBAT*60)-19)) tempSSSS=((short)TBAT)|0x4000;
0049dc  48ee              LDR      r0,|L1.19864|
0049de  f06f0214          MVN      r2,#0x14
0049e2  f9b00000          LDRSH    r0,[r0,#0]  ; TBAT
0049e6  ebc01100          RSB      r1,r0,r0,LSL #4
0049ea  eb020c81          ADD      r12,r2,r1,LSL #2
0049ee  f9b52052          LDRSH    r2,[r5,#0x52]  ; main_kb_cnt
0049f2  4594              CMP      r12,r2
0049f4  d00b              BEQ      |L1.18958|
0049f6  f06f0513          MVN      r5,#0x13
0049fa  eb050581          ADD      r5,r5,r1,LSL #2
0049fe  4295              CMP      r5,r2
004a00  d005              BEQ      |L1.18958|
004a02  f06f0512          MVN      r5,#0x12
004a06  eb050181          ADD      r1,r5,r1,LSL #2
004a0a  4291              CMP      r1,r2
004a0c  d101              BNE      |L1.18962|
                  |L1.18958|
004a0e  f4404680          ORR      r6,r0,#0x4000
                  |L1.18962|
;;;6617   
;;;6618   
;;;6619   		modbus_buff[0] = ICA_MODBUS_ADDRESS;
004a12  8818              LDRH     r0,[r3,#0]  ; ICA_MODBUS_ADDRESS
004a14  f88d0010          STRB     r0,[sp,#0x10]
;;;6620   		modbus_buff[1] = 6;
004a18  f04f0006          MOV      r0,#6
004a1c  f88d0011          STRB     r0,[sp,#0x11]
;;;6621   		modbus_buff[2] = 0;
004a20  f88d4012          STRB     r4,[sp,#0x12]
;;;6622   		modbus_buff[3] = 100;
004a24  f04f0064          MOV      r0,#0x64
004a28  f88d0013          STRB     r0,[sp,#0x13]
;;;6623   		modbus_buff[4] = (char)(tempSSSS/256);	
004a2c  ea4f70e6          ASR      r0,r6,#31
004a30  eb066010          ADD      r0,r6,r0,LSR #24
004a34  ea4f2120          ASR      r1,r0,#8
004a38  f88d1014          STRB     r1,[sp,#0x14]
;;;6624   		modbus_buff[5] = (char)(tempSSSS%256);
004a3c  4630              MOV      r0,r6
004a3e  f88d0015          STRB     r0,[sp,#0x15]
;;;6625   	
;;;6626   		crc_temp= CRC16_2(modbus_buff,6);
004a42  f04f0106          MOV      r1,#6
004a46  a804              ADD      r0,sp,#0x10
004a48  f7fffffe          BL       CRC16_2
;;;6627   	
;;;6628   		modbus_buff[6]= (char)crc_temp;
004a4c  f88d0016          STRB     r0,[sp,#0x16]
;;;6629   		modbus_buff[7]= (char)(crc_temp>>8);
004a50  ea4f2020          ASR      r0,r0,#8
004a54  f88d0017          STRB     r0,[sp,#0x17]
;;;6630   	
;;;6631   		crc_temp= CRC16_2(modbus_buff,6);
004a58  f04f0106          MOV      r1,#6
004a5c  a804              ADD      r0,sp,#0x10
004a5e  f7fffffe          BL       CRC16_2
;;;6632   	
;;;6633   		plazma_ica1=tempSSSS;
004a62  48ce              LDR      r0,|L1.19868|
004a64  8046              STRH     r6,[r0,#2]
;;;6634   		if(ICA_CH==0)
004a66  f9b70000          LDRSH    r0,[r7,#0]  ; ICA_CH
004a6a  b3f0              CBZ      r0,|L1.19178|
;;;6635   			{
;;;6636   			for (i=0;i<8;i++)
;;;6637   				{
;;;6638   				putchar_sc16is700(modbus_buff[i]);
;;;6639   				}
;;;6640   			}
;;;6641   		else if(ICA_CH==2)
004a6c  2802              CMP      r0,#2
004a6e  d10c              BNE      |L1.19082|
;;;6642   			{
;;;6643   			uart_out1 (5,6,0,100,modbus_buff[4],modbus_buff[5],0);
004a70  f89d0015          LDRB     r0,[sp,#0x15]
004a74  f89d1014          LDRB     r1,[sp,#0x14]
004a78  e9cd0401          STRD     r0,r4,[sp,#4]
004a7c  9100              STR      r1,[sp,#0]
004a7e  2364              MOVS     r3,#0x64
004a80  2200              MOVS     r2,#0
004a82  2106              MOVS     r1,#6
004a84  2005              MOVS     r0,#5
004a86  f7fffffe          BL       uart_out1
                  |L1.19082|
;;;6644   			}
;;;6645   		}
;;;6646   	}
;;;6647   }
004a8a  b009              ADD      sp,sp,#0x24
004a8c  e8bd8ff0          POP      {r4-r11,pc}
                  |L1.19088|
004a90  8818              LDRH     r0,[r3,#0]            ;6586  ; ICA_MODBUS_ADDRESS
004a92  f88d0010          STRB     r0,[sp,#0x10]         ;6586
004a96  f04f0004          MOV      r0,#4                 ;6587
004a9a  f88d0011          STRB     r0,[sp,#0x11]         ;6587
004a9e  f88d4012          STRB     r4,[sp,#0x12]         ;6588
004aa2  f04f0002          MOV      r0,#2                 ;6589
004aa6  f88d0013          STRB     r0,[sp,#0x13]         ;6589
004aaa  f88d4014          STRB     r4,[sp,#0x14]         ;6590
004aae  f04f0501          MOV      r5,#1                 ;6591
004ab2  f88d5015          STRB     r5,[sp,#0x15]         ;6591
004ab6  f04f0106          MOV      r1,#6                 ;6593
004aba  a804              ADD      r0,sp,#0x10           ;6593
004abc  f7fffffe          BL       CRC16_2
004ac0  f88d0016          STRB     r0,[sp,#0x16]         ;6595
004ac4  ea4f2020          ASR      r0,r0,#8              ;6596
004ac8  f88d0017          STRB     r0,[sp,#0x17]         ;6596
004acc  f9b70000          LDRSH    r0,[r7,#0]            ;6598  ; ICA_CH
004ad0  b160              CBZ      r0,|L1.19180|
004ad2  2802              CMP      r0,#2                 ;6605
004ad4  d1d9              BNE      |L1.19082|
004ad6  e9cd4500          STRD     r4,r5,[sp,#0]         ;6607
004ada  2302              MOVS     r3,#2                 ;6607
004adc  2200              MOVS     r2,#0                 ;6607
004ade  2104              MOVS     r1,#4                 ;6607
004ae0  2005              MOVS     r0,#5                 ;6607
004ae2  9402              STR      r4,[sp,#8]            ;6607
004ae4  f7fffffe          BL       uart_out1
004ae8  e7cf              B        |L1.19082|
                  |L1.19178|
004aea  e00b              B        |L1.19204|
                  |L1.19180|
004aec  f04f0400          MOV      r4,#0                 ;6600
004af0  ad04              ADD      r5,sp,#0x10           ;6583
                  |L1.19186|
004af2  5d28              LDRB     r0,[r5,r4]            ;6602
004af4  f7fffffe          BL       putchar_sc16is700
004af8  f1040401          ADD      r4,r4,#1              ;6600
004afc  b2e4              UXTB     r4,r4                 ;6600
004afe  2c08              CMP      r4,#8                 ;6600
004b00  d3f7              BCC      |L1.19186|
004b02  e7c2              B        |L1.19082|
                  |L1.19204|
004b04  f04f0400          MOV      r4,#0                 ;6636
004b08  ad04              ADD      r5,sp,#0x10           ;6612
                  |L1.19210|
004b0a  5d28              LDRB     r0,[r5,r4]            ;6638
004b0c  f7fffffe          BL       putchar_sc16is700
004b10  f1040401          ADD      r4,r4,#1              ;6636
004b14  b2e4              UXTB     r4,r4                 ;6636
004b16  2c08              CMP      r4,#8                 ;6636
004b18  d3f7              BCC      |L1.19210|
004b1a  e7b6              B        |L1.19082|
;;;6648   
                          ENDP

                  ipsBlckHndl PROC
;;;6731   //-----------------------------------------------
;;;6732   void ipsBlckHndl(char in)
004b1c  b510              PUSH     {r4,lr}
;;;6733   {
;;;6734   
;;;6735   ipsBlckStat=0;
004b1e  4ba0              LDR      r3,|L1.19872|
004b20  f04f0000          MOV      r0,#0
004b24  8018              STRH     r0,[r3,#0]
;;;6736   if(ipsBlckSrc==1)
004b26  489f              LDR      r0,|L1.19876|
004b28  f04f0401          MOV      r4,#1
;;;6737   	{
;;;6738   	if(((ipsBlckLog==0)&&(adc_buff_[11]>2000)) || ((ipsBlckLog==1)&&(adc_buff_[11]<2000))) ipsBlckStat=1;
004b2c  f44f62fa          MOV      r2,#0x7d0
004b30  f9b01000          LDRSH    r1,[r0,#0]            ;6736  ; ipsBlckSrc
004b34  489c              LDR      r0,|L1.19880|
004b36  2901              CMP      r1,#1                 ;6736
004b38  f9b00000          LDRSH    r0,[r0,#0]
004b3c  d006              BEQ      |L1.19276|
;;;6739   	}
;;;6740   else if(ipsBlckSrc==2)
004b3e  2902              CMP      r1,#2
004b40  d10f              BNE      |L1.19298|
004b42  499a              LDR      r1,|L1.19884|
;;;6741   	{
;;;6742   	if(((ipsBlckLog==0)&&(adc_buff_[13]>2000)) || ((ipsBlckLog==1)&&(adc_buff_[13]<2000))) ipsBlckStat=1;
004b44  f9b1101a          LDRSH    r1,[r1,#0x1a]
004b48  b160              CBZ      r0,|L1.19300|
004b4a  e00d              B        |L1.19304|
                  |L1.19276|
004b4c  4997              LDR      r1,|L1.19884|
004b4e  f9b11016          LDRSH    r1,[r1,#0x16]         ;6738
004b52  b908              CBNZ     r0,|L1.19288|
004b54  4291              CMP      r1,r2                 ;6738
004b56  dc03              BGT      |L1.19296|
                  |L1.19288|
004b58  2801              CMP      r0,#1                 ;6738
004b5a  d102              BNE      |L1.19298|
004b5c  4291              CMP      r1,r2                 ;6738
004b5e  da00              BGE      |L1.19298|
                  |L1.19296|
004b60  801c              STRH     r4,[r3,#0]            ;6738
                  |L1.19298|
;;;6743   	}
;;;6744   }
004b62  bd10              POP      {r4,pc}
                  |L1.19300|
004b64  4291              CMP      r1,r2                 ;6742
004b66  dc03              BGT      |L1.19312|
                  |L1.19304|
004b68  2801              CMP      r0,#1                 ;6742
004b6a  d1fa              BNE      |L1.19298|
004b6c  4291              CMP      r1,r2                 ;6742
004b6e  daf8              BGE      |L1.19298|
                  |L1.19312|
004b70  801c              STRH     r4,[r3,#0]            ;6742
004b72  bd10              POP      {r4,pc}
;;;6745   
                          ENDP

                  bps_drv PROC
;;;6746   //-----------------------------------------------
;;;6747   void bps_drv(char in)
004b74  e92d41f0          PUSH     {r4-r8,lr}
;;;6748   {
004b78  4606              MOV      r6,r0
;;;6749   char temp;
;;;6750   
;;;6751   if (bps[in]._device!=dSRC) return;
004b7a  eb0600c6          ADD      r0,r6,r6,LSL #3
004b7e  498c              LDR      r1,|L1.19888|
004b80  eb001006          ADD      r0,r0,r6,LSL #4
004b84  f8112020          LDRB     r2,[r1,r0,LSL #2]
004b88  2a03              CMP      r2,#3
004b8a  d17d              BNE      |L1.19592|
;;;6752   temp=bps[in]._flags_tm;
004b8c  eb010480          ADD      r4,r1,r0,LSL #2
004b90  f8945042          LDRB     r5,[r4,#0x42]
;;;6753   if(temp&(1<<AV_T))
004b94  07a8              LSLS     r0,r5,#30
004b96  d517              BPL      |L1.19400|
;;;6754   	{
;;;6755   	if(bps[in]._temp_av_cnt<1200) 
004b98  f9b41046          LDRSH    r1,[r4,#0x46]
004b9c  f44f6296          MOV      r2,#0x4b0
004ba0  4291              CMP      r1,r2
004ba2  da22              BGE      |L1.19434|
;;;6756   		{
;;;6757   		bps[in]._temp_av_cnt++;
004ba4  f1010101          ADD      r1,r1,#1
004ba8  b208              SXTH     r0,r1
004baa  f8a40046          STRH     r0,[r4,#0x46]
;;;6758   		if(bps[in]._temp_av_cnt>=1200)
004bae  4290              CMP      r0,r2
004bb0  db1b              BLT      |L1.19434|
;;;6759   			{
;;;6760   			bps[in]._temp_av_cnt=1200;
004bb2  f8a42046          STRH     r2,[r4,#0x46]
;;;6761   		   	if(!(bps[in]._av&(1<<0)))avar_bps_hndl(in,0,1);
004bb6  7860              LDRB     r0,[r4,#1]
004bb8  07c0              LSLS     r0,r0,#31
004bba  d116              BNE      |L1.19434|
004bbc  2201              MOVS     r2,#1
004bbe  2100              MOVS     r1,#0
004bc0  4630              MOV      r0,r6
004bc2  f7fffffe          BL       avar_bps_hndl
004bc6  e010              B        |L1.19434|
                  |L1.19400|
;;;6762   			}
;;;6763   		}
;;;6764   	}
;;;6765   
;;;6766   else if(!(temp&(1<<AV_T)))
;;;6767   	{
;;;6768   	if(bps[in]._temp_av_cnt) 
004bc8  f9b40046          LDRSH    r0,[r4,#0x46]
004bcc  b168              CBZ      r0,|L1.19434|
;;;6769   		{
;;;6770   		bps[in]._temp_av_cnt--;
004bce  f1a00001          SUB      r0,r0,#1
004bd2  b200              SXTH     r0,r0
004bd4  f8a40046          STRH     r0,[r4,#0x46]
;;;6771   		if(!bps[in]._temp_av_cnt)
004bd8  b938              CBNZ     r0,|L1.19434|
;;;6772   			{
;;;6773   			if(bps[in]._av&(1<<0))avar_bps_hndl(in,0,0);
004bda  7860              LDRB     r0,[r4,#1]
004bdc  07c0              LSLS     r0,r0,#31
004bde  d004              BEQ      |L1.19434|
004be0  2200              MOVS     r2,#0
004be2  4611              MOV      r1,r2
004be4  4630              MOV      r0,r6
004be6  f7fffffe          BL       avar_bps_hndl
                  |L1.19434|
;;;6774   			}
;;;6775   		} 	
;;;6776   
;;;6777   	}
;;;6778   
;;;6779   if((temp&(1<<AVUMAX)))
004bea  0728              LSLS     r0,r5,#28
;;;6780   	{
;;;6781   	if(bps[in]._umax_av_cnt<10) 
;;;6782   		{
;;;6783   		bps[in]._umax_av_cnt++;
;;;6784   		if(bps[in]._umax_av_cnt>=10)
;;;6785   			{ 
;;;6786   			bps[in]._umax_av_cnt=10;
004bec  f04f080a          MOV      r8,#0xa
004bf0  f04f0700          MOV      r7,#0                 ;6761
004bf4  d518              BPL      |L1.19496|
004bf6  f9b41048          LDRSH    r1,[r4,#0x48]         ;6781
004bfa  290a              CMP      r1,#0xa               ;6781
004bfc  da29              BGE      |L1.19538|
004bfe  f1010101          ADD      r1,r1,#1              ;6783
004c02  b208              SXTH     r0,r1                 ;6783
004c04  f8a40048          STRH     r0,[r4,#0x48]         ;6783
004c08  280a              CMP      r0,#0xa               ;6784
004c0a  db22              BLT      |L1.19538|
004c0c  f8a48048          STRH     r8,[r4,#0x48]
;;;6787   			if(!(bps[in]._av&(1<<1)))avar_bps_hndl(in,1,1);
004c10  7860              LDRB     r0,[r4,#1]
004c12  0780              LSLS     r0,r0,#30
004c14  d404              BMI      |L1.19488|
004c16  2201              MOVS     r2,#1
004c18  4611              MOV      r1,r2
004c1a  4630              MOV      r0,r6
004c1c  f7fffffe          BL       avar_bps_hndl
                  |L1.19488|
;;;6788   			apv_start(in);
004c20  4630              MOV      r0,r6
004c22  f7fffffe          BL       apv_start
004c26  e014              B        |L1.19538|
                  |L1.19496|
;;;6789   		  	/*if((K[APV]!=ON)||((apv_cnt[in,0]==0)&&(apv_cnt[in,1]==0)&&(apv_cnt[in,2]==0)&&(apv_flags[in]==afOFF)))avar_s_hndl(in,1,1);
;;;6790   			if((apv_cnt[in,0]==0)&&(apv_cnt[in,1]==0)&&(apv_cnt[in,2]==0)&&(apv_flags[in]==afON))
;;;6791   				{
;;;6792   				apv_cnt[in,0]=APV_INIT;
;;;6793   				apv_cnt[in,1]=APV_INIT;
;;;6794   				apv_cnt[in,2]=APV_INIT;
;;;6795   				apv_flags[in]=afOFF;
;;;6796   				}				*/
;;;6797   						
;;;6798   			}
;;;6799   		} 
;;;6800   	}		
;;;6801   else if(!(temp&(1<<AVUMAX)))
;;;6802   	{
;;;6803   	if(bps[in]._umax_av_cnt>0) 
004c28  f9b41048          LDRSH    r1,[r4,#0x48]
004c2c  2900              CMP      r1,#0
004c2e  dd0d              BLE      |L1.19532|
;;;6804   		{
;;;6805   		bps[in]._umax_av_cnt--;
004c30  f1a10101          SUB      r1,r1,#1
004c34  b208              SXTH     r0,r1
004c36  f8a40048          STRH     r0,[r4,#0x48]
;;;6806   		if(bps[in]._umax_av_cnt==0)
004c3a  b950              CBNZ     r0,|L1.19538|
;;;6807   			{
;;;6808   			bps[in]._umax_av_cnt=0;
;;;6809   			avar_bps_hndl(in,1,0);
004c3c  f04f0200          MOV      r2,#0
004c40  f04f0101          MOV      r1,#1
004c44  4630              MOV      r0,r6
004c46  f7fffffe          BL       avar_bps_hndl
004c4a  e002              B        |L1.19538|
                  |L1.19532|
;;;6810   			//apv_stop(in);
;;;6811   	 //		apv_cnt[in,0]=0;
;;;6812   	//		apv_cnt[in,1]=0;
;;;6813   	 //		apv_cnt[in,2]=0;			
;;;6814   			}
;;;6815   		}
;;;6816   	else if(bps[in]._umax_av_cnt<0) bps[in]._umax_av_cnt=0;		 
004c4c  da01              BGE      |L1.19538|
004c4e  f8a47048          STRH     r7,[r4,#0x48]
                  |L1.19538|
;;;6817   	}
;;;6818   
;;;6819   if(temp&(1<<AVUMIN))
004c52  06e8              LSLS     r0,r5,#27
004c54  d519              BPL      |L1.19594|
;;;6820   	{
;;;6821   	if(bps[in]._umin_av_cnt<10) 
004c56  f9b4004a          LDRSH    r0,[r4,#0x4a]
004c5a  280a              CMP      r0,#0xa
004c5c  da23              BGE      |L1.19622|
;;;6822   		{
;;;6823   		bps[in]._umin_av_cnt++;
004c5e  f1000001          ADD      r0,r0,#1
004c62  b200              SXTH     r0,r0
004c64  f8a4004a          STRH     r0,[r4,#0x4a]
;;;6824   		if(bps[in]._umin_av_cnt>=10)
004c68  280a              CMP      r0,#0xa
004c6a  db1c              BLT      |L1.19622|
;;;6825   			{ 
;;;6826   			bps[in]._umin_av_cnt=10;
004c6c  f8a4804a          STRH     r8,[r4,#0x4a]
;;;6827   			if(!(bps[in]._av&(1<<2)))avar_bps_hndl(in,2,1);
004c70  7860              LDRB     r0,[r4,#1]
004c72  0740              LSLS     r0,r0,#29
004c74  d404              BMI      |L1.19584|
004c76  2201              MOVS     r2,#1
004c78  2102              MOVS     r1,#2
004c7a  4630              MOV      r0,r6
004c7c  f7fffffe          BL       avar_bps_hndl
                  |L1.19584|
;;;6828   			apv_start(in);
004c80  4630              MOV      r0,r6
004c82  f7fffffe          BL       apv_start
004c86  e00e              B        |L1.19622|
                  |L1.19592|
004c88  e0b3              B        |L1.19954|
                  |L1.19594|
;;;6829   		  	/*	if((K[APV]!=ON)||((apv_cnt[in,0]==0)&&(apv_cnt[in,1]==0)&&(apv_cnt[in,2]==0)&&(apv_flags[in]==afOFF)))avar_s_hndl(in,2,1);
;;;6830   			if((apv_cnt[in,0]==0)&&(apv_cnt[in,1]==0)&&(apv_cnt[in,2]==0)&&(apv_flags[in]==afON))
;;;6831   				{
;;;6832   				apv_cnt[in,0]=APV_INIT;
;;;6833   				apv_cnt[in,1]=APV_INIT;
;;;6834   				apv_cnt[in,2]=APV_INIT;
;;;6835   				apv_flags[in]=afOFF;
;;;6836   				}*/				
;;;6837   			}
;;;6838   		} 
;;;6839   	}	
;;;6840   	
;;;6841   else if(!(temp&(1<<AVUMIN)))
;;;6842   	{
;;;6843   	if(bps[in]._umin_av_cnt) 
004c8a  f9b4004a          LDRSH    r0,[r4,#0x4a]
004c8e  b150              CBZ      r0,|L1.19622|
;;;6844   		{
;;;6845   		bps[in]._umin_av_cnt--;
004c90  f1a00001          SUB      r0,r0,#1
004c94  b200              SXTH     r0,r0
004c96  f8a4004a          STRH     r0,[r4,#0x4a]
;;;6846   		if(bps[in]._umin_av_cnt==0)
004c9a  b920              CBNZ     r0,|L1.19622|
;;;6847   			{
;;;6848   			bps[in]._umin_av_cnt=0;
;;;6849   			avar_bps_hndl(in,2,0);
004c9c  2200              MOVS     r2,#0
004c9e  2102              MOVS     r1,#2
004ca0  4630              MOV      r0,r6
004ca2  f7fffffe          BL       avar_bps_hndl
                  |L1.19622|
;;;6850   			//apv_stop(in);
;;;6851   		//	apv_cnt[in,0]=0;
;;;6852   		//	apv_cnt[in,1]=0;
;;;6853   		//	apv_cnt[in,2]=0;
;;;6854   			}
;;;6855   		}
;;;6856   	else if(bps[in]._umin_av_cnt>10)bps[in]._umin_av_cnt--;	 
;;;6857   	}
;;;6858   
;;;6859   if((bps[in]._Uii<(UB20-DU))&&(bps[in]._state==bsWRK))
004ca6  4943              LDR      r1,|L1.19892|
004ca8  69e0              LDR      r0,[r4,#0x1c]
004caa  f9b12000          LDRSH    r2,[r1,#0]  ; UB20
004cae  4942              LDR      r1,|L1.19896|
004cb0  f9b11000          LDRSH    r1,[r1,#0]  ; DU
004cb4  1a51              SUBS     r1,r2,r1
004cb6  4288              CMP      r0,r1
004cb8  da02              BGE      |L1.19648|
004cba  78a2              LDRB     r2,[r4,#2]
004cbc  2a01              CMP      r2,#1
004cbe  d00b              BEQ      |L1.19672|
                  |L1.19648|
;;;6860   	{
;;;6861   	if(bps[in]._umin_av_cnt_uku<300) 
;;;6862   		{
;;;6863   		bps[in]._umin_av_cnt_uku++;
;;;6864   		if(bps[in]._umin_av_cnt_uku>=300)
;;;6865   			{ 
;;;6866   			bps[in]._umin_av_cnt_uku=300;
;;;6867   			if(!(bps[in]._av&(1<<2)))avar_bps_hndl(in,2,1);
;;;6868   		  	/*	if((K[APV]!=ON)||((apv_cnt[in,0]==0)&&(apv_cnt[in,1]==0)&&(apv_cnt[in,2]==0)&&(apv_flags[in]==afOFF)))avar_s_hndl(in,2,1);
;;;6869   			if((apv_cnt[in,0]==0)&&(apv_cnt[in,1]==0)&&(apv_cnt[in,2]==0)&&(apv_flags[in]==afON))
;;;6870   				{
;;;6871   				apv_cnt[in,0]=APV_INIT;
;;;6872   				apv_cnt[in,1]=APV_INIT;
;;;6873   				apv_cnt[in,2]=APV_INIT;
;;;6874   				apv_flags[in]=afOFF;
;;;6875   				}*/				
;;;6876   			}
;;;6877   		} 
;;;6878   	}	
;;;6879   	
;;;6880   else if(bps[in]._Uii>=(UB20-DU))
004cc0  4288              CMP      r0,r1
004cc2  db26              BLT      |L1.19730|
;;;6881   	{
;;;6882   	if(bps[in]._umin_av_cnt_uku) 
004cc4  f9b4104c          LDRSH    r1,[r4,#0x4c]
004cc8  b319              CBZ      r1,|L1.19730|
;;;6883   		{
;;;6884   		bps[in]._umin_av_cnt_uku--;
004cca  f1a10101          SUB      r1,r1,#1
004cce  b208              SXTH     r0,r1
004cd0  f8a4004c          STRH     r0,[r4,#0x4c]
;;;6885   		if(bps[in]._umin_av_cnt_uku==0)
004cd4  b1c0              CBZ      r0,|L1.19720|
004cd6  e01c              B        |L1.19730|
                  |L1.19672|
004cd8  f9b4104c          LDRSH    r1,[r4,#0x4c]         ;6861
004cdc  f44f7296          MOV      r2,#0x12c             ;6861
004ce0  4291              CMP      r1,r2                 ;6861
004ce2  da16              BGE      |L1.19730|
004ce4  f1010101          ADD      r1,r1,#1              ;6863
004ce8  b208              SXTH     r0,r1                 ;6863
004cea  f8a4004c          STRH     r0,[r4,#0x4c]         ;6863
004cee  4290              CMP      r0,r2                 ;6864
004cf0  db0f              BLT      |L1.19730|
004cf2  f8a4204c          STRH     r2,[r4,#0x4c]         ;6866
004cf6  7860              LDRB     r0,[r4,#1]            ;6867
004cf8  0740              LSLS     r0,r0,#29             ;6867
004cfa  d40a              BMI      |L1.19730|
004cfc  2201              MOVS     r2,#1                 ;6867
004cfe  2102              MOVS     r1,#2                 ;6867
004d00  4630              MOV      r0,r6                 ;6867
004d02  f7fffffe          BL       avar_bps_hndl
004d06  e004              B        |L1.19730|
                  |L1.19720|
;;;6886   			{
;;;6887   			bps[in]._umin_av_cnt_uku=0;
;;;6888   			avar_bps_hndl(in,2,0);
004d08  2200              MOVS     r2,#0
004d0a  2102              MOVS     r1,#2
004d0c  4630              MOV      r0,r6
004d0e  f7fffffe          BL       avar_bps_hndl
                  |L1.19730|
;;;6889   		//	apv_cnt[in,0]=0;
;;;6890   		//	apv_cnt[in,1]=0;
;;;6891   		//	apv_cnt[in,2]=0;
;;;6892   			}
;;;6893   		}
;;;6894   	else if(bps[in]._umin_av_cnt_uku>300)bps[in]._umin_av_cnt_uku=300;	 
;;;6895   	}
;;;6896   
;;;6897   //bps[in]._state=bsOFF;
;;;6898   
;;;6899   if (bps[in]._av&0x0f)					bps[in]._state=bsAV;
004d12  7860              LDRB     r0,[r4,#1]
004d14  0700              LSLS     r0,r0,#28
004d16  d003              BEQ      |L1.19744|
004d18  f04f0004          MOV      r0,#4
004d1c  70a0              STRB     r0,[r4,#2]
004d1e  e017              B        |L1.19792|
                  |L1.19744|
;;;6900   else if ( (net_av) && (bps[in]._cnt>20)/*&& 
004d20  4826              LDR      r0,|L1.19900|
004d22  7800              LDRB     r0,[r0,#0]  ; net_av
004d24  b130              CBZ      r0,|L1.19764|
004d26  78e0              LDRB     r0,[r4,#3]
004d28  2814              CMP      r0,#0x14
004d2a  d903              BLS      |L1.19764|
;;;6901   		(bps[in]._Uii<200)*/)				bps[in]._state=bsOFF_AV_NET;
004d2c  f04f0005          MOV      r0,#5
004d30  70a0              STRB     r0,[r4,#2]
004d32  e00d              B        |L1.19792|
                  |L1.19764|
;;;6902   else if (bps[in]._flags_tm&BIN8(100000))	bps[in]._state=bsRDY;
004d34  f8940042          LDRB     r0,[r4,#0x42]
004d38  0680              LSLS     r0,r0,#26
004d3a  d503              BPL      |L1.19780|
004d3c  f04f0002          MOV      r0,#2
004d40  70a0              STRB     r0,[r4,#2]
004d42  e005              B        |L1.19792|
                  |L1.19780|
;;;6903   else if (bps[in]._cnt<20)				bps[in]._state=bsWRK;
004d44  78e0              LDRB     r0,[r4,#3]
004d46  2814              CMP      r0,#0x14
004d48  d202              BCS      |L1.19792|
004d4a  f04f0001          MOV      r0,#1
004d4e  70a0              STRB     r0,[r4,#2]
                  |L1.19792|
;;;6904   
;;;6905   
;;;6906   
;;;6907   //else if(bps[in]._flags_tm&BIN8(100000)) bps[in]._state=ssBL;
;;;6908   //else if((!(bps[in]._flags_tm&BIN8(100000)))&&(net_U>100))bps[in]._state=ssWRK;
;;;6909   //else bps[0]._state=ssNOT;
;;;6910   
;;;6911   //bps[in]._is_ready=0;
;;;6912   //bps[in]._is_wrk=0;
;;;6913   //if(bps[in]._av_net) bps[in]._flags_bp='N';// не подключен
;;;6914   //else if(bps[in]._av_u_max) bps[in]._flags_bp='P';// завышено напряжение(u_.av_.bAS1T)) bps_state[0]=ssAV;
;;;6915   //else if(bps[in]._av_u_min) bps[in]._flags_bp='M';// занижено напряжение
;;;6916   //else if(bps[in]._av_temper) bps[in]._flags_bp='T';// температура
;;;6917   //else if(bps[in]._flags_tm&BIN8(100000)) 
;;;6918   //	{
;;;6919   //	bps[in]._flags_bp='B';// заблокирован
;;;6920   //	bps[in]._is_ready=1;
;;;6921   //	}
;;;6922   //else if((!(bps[in]._flags_tm&BIN8(100000)))&&(net_U>100))
;;;6923   //     {
;;;6924   //     bps[in]._flags_bp='W';// работает
;;;6925   //     bps[in]._is_ready=1;
;;;6926   //     bps[in]._is_wrk=1;
;;;6927        
;;;6928   //     }
;;;6929   //else bps[in]._is_ready=1;     
;;;6930   
;;;6931   
;;;6932   
;;;6933   
;;;6934   
;;;6935   /*
;;;6936   bps[in]._flags_tu&=BIN8(11111110);
;;;6937   if(bps[in]._ist_blok_cnt)
;;;6938   	{
;;;6939   	bps[in]._ist_blok_cnt--;
;;;6940   	bps[in]._flags_tu|=BIN8(1);
;;;6941   	}
;;;6942   
;;;6943   	   */ 
;;;6944   
;;;6945   //Пересброс БПСа при потере связи
;;;6946   if(bps[in]._cnt>=10) bps[in]._flags_tu|=BIN8(10000000);
004d50  78e0              LDRB     r0,[r4,#3]
004d52  280a              CMP      r0,#0xa
004d54  d306              BCC      |L1.19812|
004d56  f894002c          LDRB     r0,[r4,#0x2c]
004d5a  f0400080          ORR      r0,r0,#0x80
004d5e  f884002c          STRB     r0,[r4,#0x2c]
004d62  e005              B        |L1.19824|
                  |L1.19812|
;;;6947   else bps[in]._flags_tu&=BIN8(1111111);
004d64  f894002c          LDRB     r0,[r4,#0x2c]
004d68  f000007f          AND      r0,r0,#0x7f
004d6c  f884002c          STRB     r0,[r4,#0x2c]
                  |L1.19824|
;;;6948   
;;;6949   if(avar_bps_reset_cnt) 
004d70  480a              LDR      r0,|L1.19868|
004d72  3880              SUBS     r0,r0,#0x80
004d74  f8901031          LDRB     r1,[r0,#0x31]  ; avar_bps_reset_cnt
004d78  b139              CBZ      r1,|L1.19850|
;;;6950   	{
;;;6951   	bps[in]._flags_tu|=BIN8(10);
004d7a  f894102c          LDRB     r1,[r4,#0x2c]
004d7e  f0410102          ORR      r1,r1,#2
004d82  f884102c          STRB     r1,[r4,#0x2c]
;;;6952   	bps[in]._av=0;
004d86  7067              STRB     r7,[r4,#1]
004d88  e02a              B        |L1.19936|
                  |L1.19850|
004d8a  e019              B        |L1.19904|
                  |L1.19852|
                          DCD      ica_u_necc
                  |L1.19856|
                          DCD      ICA_MODBUS_ADDRESS
                  |L1.19860|
                          DCD      ICA_CH
                  |L1.19864|
                          DCD      TBAT
                  |L1.19868|
                          DCD      ||area_number.25||+0x80
                  |L1.19872|
                          DCD      ipsBlckStat
                  |L1.19876|
                          DCD      ipsBlckSrc
                  |L1.19880|
                          DCD      ipsBlckLog
                  |L1.19884|
                          DCD      ||.bss||+0x40c
                  |L1.19888|
                          DCD      bps
                  |L1.19892|
                          DCD      UB20
                  |L1.19896|
                          DCD      ||DU||
                  |L1.19900|
                          DCD      net_av
                  |L1.19904|
;;;6953   	}
;;;6954   else if(bps[in]._apv_reset_av_timer) bps[in]._flags_tu|=BIN8(10);
004dc0  f8941062          LDRB     r1,[r4,#0x62]
004dc4  b131              CBZ      r1,|L1.19924|
004dc6  f894102c          LDRB     r1,[r4,#0x2c]
004dca  f0410102          ORR      r1,r1,#2
004dce  f884102c          STRB     r1,[r4,#0x2c]
004dd2  e005              B        |L1.19936|
                  |L1.19924|
;;;6955   else bps[in]._flags_tu&=BIN8(11111101);
004dd4  f894102c          LDRB     r1,[r4,#0x2c]
004dd8  f00101fd          AND      r1,r1,#0xfd
004ddc  f884102c          STRB     r1,[r4,#0x2c]
                  |L1.19936|
;;;6956   	
;;;6957   bps[in]._vol_u=cntrl_stat+bps[in]._x_;	
004de0  f9b41054          LDRSH    r1,[r4,#0x54]
004de4  f9b00032          LDRSH    r0,[r0,#0x32]  ; cntrl_stat
004de8  4408              ADD      r0,r0,r1
004dea  6320              STR      r0,[r4,#0x30]
;;;6958   bps[in]._vol_i=1000;
004dec  f44f707a          MOV      r0,#0x3e8
004df0  6360              STR      r0,[r4,#0x34]
                  |L1.19954|
;;;6959   //bps[0]._vol_u=500;
;;;6960   //bps[1]._vol_u=cntrl_stat_pwm; 
;;;6961   }
004df2  e8bd81f0          POP      {r4-r8,pc}
;;;6962   
                          ENDP

                  avt_hndl PROC
;;;6963   //-----------------------------------------------
;;;6964   void avt_hndl(void)
004df6  b570              PUSH     {r4-r6,lr}
;;;6965   {
;;;6966   char i;
;;;6967   for(i=0;i<12;i++)
004df8  f04f0000          MOV      r0,#0
;;;6968   	{
;;;6969   	if(eb2_data_short[6]&(1<<i))
004dfc  49ff              LDR      r1,|L1.20988|
004dfe  f04f0401          MOV      r4,#1
004e02  4603              MOV      r3,r0                 ;6967
004e04  f9b1200c          LDRSH    r2,[r1,#0xc]
;;;6970   		{
;;;6971   		avt_stat[i]=avtON;
004e08  4dfd              LDR      r5,|L1.20992|
                  |L1.19978|
004e0a  fa04f100          LSL      r1,r4,r0              ;6969
004e0e  420a              TST      r2,r1                 ;6969
004e10  d001              BEQ      |L1.19990|
004e12  542c              STRB     r4,[r5,r0]
004e14  e000              B        |L1.19992|
                  |L1.19990|
;;;6972   		}
;;;6973   	else avt_stat[i]=avtOFF;
004e16  542b              STRB     r3,[r5,r0]
                  |L1.19992|
004e18  f1000001          ADD      r0,r0,#1              ;6967
004e1c  b2c0              UXTB     r0,r0                 ;6967
004e1e  280c              CMP      r0,#0xc               ;6967
004e20  d3f3              BCC      |L1.19978|
;;;6974   	}
;;;6975   
;;;6976   if((avt_stat_old[0]!=avt_stat[0])&&(NUMAVT>=1))
004e22  4ef8              LDR      r6,|L1.20996|
004e24  7828              LDRB     r0,[r5,#0]  ; avt_stat
004e26  4cf8              LDR      r4,|L1.21000|
004e28  7831              LDRB     r1,[r6,#0]  ; avt_stat_old
004e2a  4281              CMP      r1,r0
004e2c  d00b              BEQ      |L1.20038|
004e2e  f9b41000          LDRSH    r1,[r4,#0]  ; NUMAVT
004e32  2901              CMP      r1,#1
004e34  db07              BLT      |L1.20038|
;;;6977   	{
;;;6978   	if(avt_stat[0]==avtON) 	snmp_trap_send("Avtomat #1 is ON ",11,1,1);
004e36  2801              CMP      r0,#1
004e38  d07e              BEQ      |L1.20280|
;;;6979   	else 				snmp_trap_send("Avtomat #1 is OFF",11,1,0);
004e3a  2300              MOVS     r3,#0
004e3c  2201              MOVS     r2,#1
004e3e  210b              MOVS     r1,#0xb
004e40  a0f2              ADR      r0,|L1.21004|
004e42  f7fffffe          BL       snmp_trap_send
                  |L1.20038|
;;;6980   	}
;;;6981   if((avt_stat_old[1]!=avt_stat[1])&&(NUMAVT>=2))
004e46  7871              LDRB     r1,[r6,#1]  ; avt_stat_old
004e48  7868              LDRB     r0,[r5,#1]  ; avt_stat
004e4a  4281              CMP      r1,r0
004e4c  d00b              BEQ      |L1.20070|
004e4e  f9b41000          LDRSH    r1,[r4,#0]  ; NUMAVT
004e52  2902              CMP      r1,#2
004e54  db07              BLT      |L1.20070|
;;;6982   	{
;;;6983   	if(avt_stat[1]==avtON) 	snmp_trap_send("Avtomat #2 is ON ",11,2,1);
004e56  2801              CMP      r0,#1
004e58  d06f              BEQ      |L1.20282|
;;;6984   	else 				snmp_trap_send("Avtomat #2 is OFF",11,2,0);
004e5a  2300              MOVS     r3,#0
004e5c  2202              MOVS     r2,#2
004e5e  210b              MOVS     r1,#0xb
004e60  a0ef              ADR      r0,|L1.21024|
004e62  f7fffffe          BL       snmp_trap_send
                  |L1.20070|
;;;6985   	}
;;;6986   if((avt_stat_old[2]!=avt_stat[2])&&(NUMAVT>=3))
004e66  78b1              LDRB     r1,[r6,#2]  ; avt_stat_old
004e68  78a8              LDRB     r0,[r5,#2]  ; avt_stat
004e6a  4281              CMP      r1,r0
004e6c  d00b              BEQ      |L1.20102|
004e6e  f9b41000          LDRSH    r1,[r4,#0]  ; NUMAVT
004e72  2903              CMP      r1,#3
004e74  db07              BLT      |L1.20102|
;;;6987   	{
;;;6988   	if(avt_stat[2]==avtON) 	snmp_trap_send("Avtomat #3 is ON ",11,3,1);
004e76  2801              CMP      r0,#1
004e78  d072              BEQ      |L1.20320|
;;;6989   	else 				snmp_trap_send("Avtomat #3 is OFF",11,3,0);
004e7a  2300              MOVS     r3,#0
004e7c  2203              MOVS     r2,#3
004e7e  210b              MOVS     r1,#0xb
004e80  a0ec              ADR      r0,|L1.21044|
004e82  f7fffffe          BL       snmp_trap_send
                  |L1.20102|
;;;6990   	}
;;;6991   if((avt_stat_old[3]!=avt_stat[3])&&(NUMAVT>=4))
004e86  78f1              LDRB     r1,[r6,#3]  ; avt_stat_old
004e88  78e8              LDRB     r0,[r5,#3]  ; avt_stat
004e8a  4281              CMP      r1,r0
004e8c  d00b              BEQ      |L1.20134|
004e8e  f9b41000          LDRSH    r1,[r4,#0]  ; NUMAVT
004e92  2904              CMP      r1,#4
004e94  db07              BLT      |L1.20134|
;;;6992   	{
;;;6993   	if(avt_stat[3]==avtON) 	snmp_trap_send("Avtomat #4 is ON ",11,4,1);
004e96  2801              CMP      r0,#1
004e98  d079              BEQ      |L1.20366|
;;;6994   	else 				snmp_trap_send("Avtomat #4 is OFF",11,4,0);
004e9a  2300              MOVS     r3,#0
004e9c  2204              MOVS     r2,#4
004e9e  210b              MOVS     r1,#0xb
004ea0  a0e9              ADR      r0,|L1.21064|
004ea2  f7fffffe          BL       snmp_trap_send
                  |L1.20134|
;;;6995   	}
;;;6996   if((avt_stat_old[4]!=avt_stat[4])&&(NUMAVT>=5))
004ea6  7931              LDRB     r1,[r6,#4]  ; avt_stat_old
004ea8  7928              LDRB     r0,[r5,#4]  ; avt_stat
004eaa  4281              CMP      r1,r0
004eac  d00b              BEQ      |L1.20166|
004eae  f9b41000          LDRSH    r1,[r4,#0]  ; NUMAVT
004eb2  2905              CMP      r1,#5
004eb4  db07              BLT      |L1.20166|
;;;6997   	{
;;;6998   	if(avt_stat[4]==avtON) 	snmp_trap_send("Avtomat #5 is ON ",11,5,1);
004eb6  2801              CMP      r0,#1
004eb8  d071              BEQ      |L1.20382|
;;;6999   	else 				snmp_trap_send("Avtomat #5 is OFF",11,5,0);
004eba  2300              MOVS     r3,#0
004ebc  2205              MOVS     r2,#5
004ebe  210b              MOVS     r1,#0xb
004ec0  a0e6              ADR      r0,|L1.21084|
004ec2  f7fffffe          BL       snmp_trap_send
                  |L1.20166|
;;;7000   	}
;;;7001   if((avt_stat_old[5]!=avt_stat[5])&&(NUMAVT>=6))
004ec6  7971              LDRB     r1,[r6,#5]  ; avt_stat_old
004ec8  7968              LDRB     r0,[r5,#5]  ; avt_stat
004eca  4281              CMP      r1,r0
004ecc  d00b              BEQ      |L1.20198|
004ece  f9b41000          LDRSH    r1,[r4,#0]  ; NUMAVT
004ed2  2906              CMP      r1,#6
004ed4  db07              BLT      |L1.20198|
;;;7002   	{
;;;7003   	if(avt_stat[5]==avtON) 	snmp_trap_send("Avtomat #6 is ON ",11,6,1);
004ed6  2801              CMP      r0,#1
004ed8  d068              BEQ      |L1.20396|
;;;7004   	else 				snmp_trap_send("Avtomat #6 is OFF",11,6,0);
004eda  2300              MOVS     r3,#0
004edc  2206              MOVS     r2,#6
004ede  210b              MOVS     r1,#0xb
004ee0  a0e3              ADR      r0,|L1.21104|
004ee2  f7fffffe          BL       snmp_trap_send
                  |L1.20198|
;;;7005   	}
;;;7006   if((avt_stat_old[6]!=avt_stat[6])&&(NUMAVT>=7))
004ee6  79b1              LDRB     r1,[r6,#6]  ; avt_stat_old
004ee8  79a8              LDRB     r0,[r5,#6]  ; avt_stat
004eea  4281              CMP      r1,r0
004eec  d00b              BEQ      |L1.20230|
004eee  f9b41000          LDRSH    r1,[r4,#0]  ; NUMAVT
004ef2  2907              CMP      r1,#7
004ef4  db07              BLT      |L1.20230|
;;;7007   	{
;;;7008   	if(avt_stat[6]==avtON) 	snmp_trap_send("Avtomat #7 is ON ",11,7,1);
004ef6  2801              CMP      r0,#1
004ef8  d05f              BEQ      |L1.20410|
;;;7009   	else 				snmp_trap_send("Avtomat #7 is OFF",11,7,0);
004efa  2300              MOVS     r3,#0
004efc  2207              MOVS     r2,#7
004efe  210b              MOVS     r1,#0xb
004f00  a0e0              ADR      r0,|L1.21124|
004f02  f7fffffe          BL       snmp_trap_send
                  |L1.20230|
;;;7010   	}
;;;7011   if((avt_stat_old[7]!=avt_stat[7])&&(NUMAVT>=8))
004f06  79f1              LDRB     r1,[r6,#7]  ; avt_stat_old
004f08  79e8              LDRB     r0,[r5,#7]  ; avt_stat
004f0a  4281              CMP      r1,r0
004f0c  d00b              BEQ      |L1.20262|
004f0e  f9b41000          LDRSH    r1,[r4,#0]  ; NUMAVT
004f12  2908              CMP      r1,#8
004f14  db07              BLT      |L1.20262|
;;;7012   	{
;;;7013   	if(avt_stat[7]==avtON) 	snmp_trap_send("Avtomat #8 is ON ",11,8,1);
004f16  2801              CMP      r0,#1
004f18  d056              BEQ      |L1.20424|
;;;7014   	else 				snmp_trap_send("Avtomat #8 is OFF",11,8,0);
004f1a  2300              MOVS     r3,#0
004f1c  2208              MOVS     r2,#8
004f1e  210b              MOVS     r1,#0xb
004f20  a0dd              ADR      r0,|L1.21144|
004f22  f7fffffe          BL       snmp_trap_send
                  |L1.20262|
;;;7015   	}
;;;7016   if((avt_stat_old[8]!=avt_stat[8])&&(NUMAVT>=9))
004f26  7a31              LDRB     r1,[r6,#8]  ; avt_stat_old
004f28  7a28              LDRB     r0,[r5,#8]  ; avt_stat
004f2a  4281              CMP      r1,r0
004f2c  d00e              BEQ      |L1.20300|
004f2e  f9b41000          LDRSH    r1,[r4,#0]  ; NUMAVT
004f32  2909              CMP      r1,#9
004f34  db0a              BLT      |L1.20300|
;;;7017   	{
;;;7018   	if(avt_stat[8]==avtON) 	snmp_trap_send("Avtomat #9 is ON ",11,9,1);
004f36  e001              B        |L1.20284|
                  |L1.20280|
004f38  e013              B        |L1.20322|
                  |L1.20282|
004f3a  e019              B        |L1.20336|
                  |L1.20284|
004f3c  2801              CMP      r0,#1
004f3e  d04a              BEQ      |L1.20438|
;;;7019   	else 				snmp_trap_send("Avtomat #9 is OFF",11,9,0);
004f40  2300              MOVS     r3,#0
004f42  2209              MOVS     r2,#9
004f44  210b              MOVS     r1,#0xb
004f46  a0d9              ADR      r0,|L1.21164|
004f48  f7fffffe          BL       snmp_trap_send
                  |L1.20300|
;;;7020   	}
;;;7021   
;;;7022   for(i=0;i<12;i++)
004f4c  f04f0000          MOV      r0,#0
                  |L1.20304|
;;;7023   	{
;;;7024   	avt_stat_old[i]=avt_stat[i];
004f50  5c29              LDRB     r1,[r5,r0]
004f52  5431              STRB     r1,[r6,r0]
004f54  f1000001          ADD      r0,r0,#1              ;7022
004f58  b2c0              UXTB     r0,r0                 ;7022
004f5a  280c              CMP      r0,#0xc               ;7022
004f5c  d3f8              BCC      |L1.20304|
                  |L1.20318|
;;;7025   	}
;;;7026   }
004f5e  bd70              POP      {r4-r6,pc}
                  |L1.20320|
004f60  e00e              B        |L1.20352|
                  |L1.20322|
004f62  2301              MOVS     r3,#1                 ;6978
004f64  461a              MOV      r2,r3                 ;6978
004f66  210b              MOVS     r1,#0xb               ;6978
004f68  a0d5              ADR      r0,|L1.21184|
004f6a  f7fffffe          BL       snmp_trap_send
004f6e  e76a              B        |L1.20038|
                  |L1.20336|
004f70  2301              MOVS     r3,#1                 ;6983
004f72  2202              MOVS     r2,#2                 ;6983
004f74  210b              MOVS     r1,#0xb               ;6983
004f76  a0d7              ADR      r0,|L1.21204|
004f78  f7fffffe          BL       snmp_trap_send
004f7c  e773              B        |L1.20070|
004f7e  e006              B        |L1.20366|
                  |L1.20352|
004f80  2301              MOVS     r3,#1                 ;6988
004f82  2203              MOVS     r2,#3                 ;6988
004f84  210b              MOVS     r1,#0xb               ;6988
004f86  a0d8              ADR      r0,|L1.21224|
004f88  f7fffffe          BL       snmp_trap_send
004f8c  e77b              B        |L1.20102|
                  |L1.20366|
004f8e  2301              MOVS     r3,#1                 ;6993
004f90  2204              MOVS     r2,#4                 ;6993
004f92  210b              MOVS     r1,#0xb               ;6993
004f94  a0d9              ADR      r0,|L1.21244|
004f96  f7fffffe          BL       snmp_trap_send
004f9a  e784              B        |L1.20134|
004f9c  e7ff              B        |L1.20382|
                  |L1.20382|
004f9e  2301              MOVS     r3,#1                 ;6998
004fa0  2205              MOVS     r2,#5                 ;6998
004fa2  210b              MOVS     r1,#0xb               ;6998
004fa4  a0da              ADR      r0,|L1.21264|
004fa6  f7fffffe          BL       snmp_trap_send
004faa  e78c              B        |L1.20166|
                  |L1.20396|
004fac  2301              MOVS     r3,#1                 ;7003
004fae  2206              MOVS     r2,#6                 ;7003
004fb0  210b              MOVS     r1,#0xb               ;7003
004fb2  a0dc              ADR      r0,|L1.21284|
004fb4  f7fffffe          BL       snmp_trap_send
004fb8  e795              B        |L1.20198|
                  |L1.20410|
004fba  2301              MOVS     r3,#1                 ;7008
004fbc  2207              MOVS     r2,#7                 ;7008
004fbe  210b              MOVS     r1,#0xb               ;7008
004fc0  a0dd              ADR      r0,|L1.21304|
004fc2  f7fffffe          BL       snmp_trap_send
004fc6  e79e              B        |L1.20230|
                  |L1.20424|
004fc8  2301              MOVS     r3,#1                 ;7013
004fca  2208              MOVS     r2,#8                 ;7013
004fcc  210b              MOVS     r1,#0xb               ;7013
004fce  a0df              ADR      r0,|L1.21324|
004fd0  f7fffffe          BL       snmp_trap_send
004fd4  e7a7              B        |L1.20262|
                  |L1.20438|
004fd6  2301              MOVS     r3,#1                 ;7018
004fd8  2209              MOVS     r2,#9                 ;7018
004fda  210b              MOVS     r1,#0xb               ;7018
004fdc  a0e0              ADR      r0,|L1.21344|
004fde  f7fffffe          BL       snmp_trap_send
004fe2  e7b3              B        |L1.20300|
;;;7027   
                          ENDP

                  bat_hndl PROC
;;;7028   //-----------------------------------------------
;;;7029   void bat_hndl(void)
004fe4  b570              PUSH     {r4-r6,lr}
;;;7030   {
;;;7031   /*if(mess_find(_MESS_BAT_MASK_ON))
;;;7032   	{
;;;7033   	if(mess_data[0]==_MESS_BAT_MASK_ON)
;;;7034   		{
;;;7035   		char i;
;;;7036   		for(i=0;i<2;i++)
;;;7037   			{
;;;7038   			if(mess_data[1]&(1<<i))
;;;7039   				{
;;;7040   				bat[i]._cnt_to_block=0;
;;;7041        			bat[i]._rel_stat=0;
;;;7042        			}
;;;7043   			}
;;;7044   		}
;;;7045   	}
;;;7046   if(mess_find(_MESS_BAT_MASK_OFF))
;;;7047   	{		
;;;7048   	if(mess_data[0]==_MESS_BAT_MASK_OFF)
;;;7049   		{
;;;7050   		char i;
;;;7051   		for(i=0;i<2;i++)
;;;7052   			{
;;;7053   			if((mess_data[1]&(1<<i)) && (bat[i]._cnt_to_block==0) && (bat[i]._rel_stat==0))
;;;7054   				{
;;;7055   				bat[i]._cnt_to_block=20;
;;;7056   				bat[i]._rel_stat=1;
;;;7057        			}
;;;7058   			}
;;;7059   		
;;;7060   		}		
;;;7061   	}*/
;;;7062   
;;;7063   if(mess_find_unvol(MESS2BAT_HNDL))
004fe6  20c8              MOVS     r0,#0xc8
004fe8  f7fffffe          BL       mess_find_unvol
;;;7064   	{ 
;;;7065   	char i;
;;;7066   	
;;;7067   	if(mess_data[0]==PARAM_BAT_ALL_OFF_AFTER_2SEC)
;;;7068   		{
;;;7069   		for(i=0;i<MAX_NUM_OF_BAT;i++)
;;;7070   			{
;;;7071   			if(bat[i]._cnt_to_block<50)bat[i]._cnt_to_block++;
004fec  49e1              LDR      r1,|L1.21364|
004fee  2200              MOVS     r2,#0                 ;7069
004ff0  b3a8              CBZ      r0,|L1.20574|
004ff2  4be1              LDR      r3,|L1.21368|
;;;7072   			}
;;;7073   		}
;;;7074   
;;;7075   	else if(mess_data[0]==PARAM_BAT_MASK_OFF_AFTER_2SEC)
;;;7076   		{
;;;7077   		for(i=0;i<MAX_NUM_OF_BAT;i++)
;;;7078   			{
;;;7079   			if(mess_data[1]&(1<<i))
004ff4  2401              MOVS     r4,#1
004ff6  6818              LDR      r0,[r3,#0]            ;7067  ; mess_data
004ff8  28c9              CMP      r0,#0xc9              ;7067
004ffa  d01c              BEQ      |L1.20534|
004ffc  28ca              CMP      r0,#0xca              ;7075
004ffe  d02f              BEQ      |L1.20576|
;;;7080   				{
;;;7081   				if(bat[i]._cnt_to_block<50) bat[i]._cnt_to_block++;
;;;7082   				}
;;;7083   			else bat[i]._cnt_to_block=0;
;;;7084   			}
;;;7085   		}
;;;7086   	else 
;;;7087   	 	{
;;;7088   		for(i=0;i<MAX_NUM_OF_BAT;i++)
005000  4610              MOV      r0,r2
                  |L1.20482|
;;;7089   			{
;;;7090   			bat[i]._cnt_to_block=0;
005002  eb000340          ADD      r3,r0,r0,LSL #1
005006  eb031300          ADD      r3,r3,r0,LSL #4
00500a  f8012023          STRB     r2,[r1,r3,LSL #2]
00500e  f1000001          ADD      r0,r0,#1              ;7088
005012  b2c0              UXTB     r0,r0                 ;7088
005014  2802              CMP      r0,#2                 ;7088
005016  d3f4              BCC      |L1.20482|
                  |L1.20504|
;;;7091   			}
;;;7092   
;;;7093   		}
;;;7094   	for(i=0;i<MAX_NUM_OF_BAT;i++)
005018  f04f0000          MOV      r0,#0
                  |L1.20508|
;;;7095   		{
;;;7096   		if(bat[i]._cnt_to_block>20)bat[i]._rel_stat=1;
00501c  eb000340          ADD      r3,r0,r0,LSL #1
005020  eb031300          ADD      r3,r3,r0,LSL #4
005024  f8115023          LDRB     r5,[r1,r3,LSL #2]
005028  2d14              CMP      r5,#0x14
00502a  d939              BLS      |L1.20640|
00502c  eb010383          ADD      r3,r1,r3,LSL #2
005030  f883403c          STRB     r4,[r3,#0x3c]
005034  e038              B        |L1.20648|
                  |L1.20534|
005036  f04f0000          MOV      r0,#0                 ;7069
                  |L1.20538|
00503a  eb000340          ADD      r3,r0,r0,LSL #1       ;7071
00503e  eb031500          ADD      r5,r3,r0,LSL #4       ;7071
005042  f8113025          LDRB     r3,[r1,r5,LSL #2]     ;7071
005046  2b32              CMP      r3,#0x32              ;7071
005048  d203              BCS      |L1.20562|
00504a  f1030301          ADD      r3,r3,#1              ;7071
00504e  f8013025          STRB     r3,[r1,r5,LSL #2]     ;7071
                  |L1.20562|
005052  f1000001          ADD      r0,r0,#1              ;7069
005056  b2c0              UXTB     r0,r0                 ;7069
005058  2802              CMP      r0,#2                 ;7069
00505a  d3ee              BCC      |L1.20538|
00505c  e7dc              B        |L1.20504|
                  |L1.20574|
00505e  e029              B        |L1.20660|
                  |L1.20576|
005060  f04f0000          MOV      r0,#0                 ;7077
005064  685e              LDR      r6,[r3,#4]            ;7079
                  |L1.20582|
005066  fa04f300          LSL      r3,r4,r0              ;7079
00506a  421e              TST      r6,r3                 ;7079
00506c  d00c              BEQ      |L1.20616|
00506e  eb000340          ADD      r3,r0,r0,LSL #1       ;7081
005072  eb031500          ADD      r5,r3,r0,LSL #4       ;7081
005076  f8113025          LDRB     r3,[r1,r5,LSL #2]     ;7081
00507a  2b32              CMP      r3,#0x32              ;7081
00507c  d20a              BCS      |L1.20628|
00507e  f1030301          ADD      r3,r3,#1              ;7081
005082  f8013025          STRB     r3,[r1,r5,LSL #2]     ;7081
005086  e005              B        |L1.20628|
                  |L1.20616|
005088  eb000340          ADD      r3,r0,r0,LSL #1       ;7083
00508c  eb031300          ADD      r3,r3,r0,LSL #4       ;7083
005090  f8012023          STRB     r2,[r1,r3,LSL #2]     ;7083
                  |L1.20628|
005094  f1000001          ADD      r0,r0,#1              ;7077
005098  b2c0              UXTB     r0,r0                 ;7077
00509a  2802              CMP      r0,#2                 ;7077
00509c  d3e3              BCC      |L1.20582|
00509e  e7bb              B        |L1.20504|
                  |L1.20640|
;;;7097   		else bat[i]._rel_stat=0;
0050a0  eb010383          ADD      r3,r1,r3,LSL #2
0050a4  f883203c          STRB     r2,[r3,#0x3c]
                  |L1.20648|
0050a8  f1000001          ADD      r0,r0,#1              ;7094
0050ac  b2c0              UXTB     r0,r0                 ;7094
0050ae  2802              CMP      r0,#2                 ;7094
0050b0  d3b4              BCC      |L1.20508|
;;;7098   		}
;;;7099   
;;;7100   	}
;;;7101   
;;;7102   else 
;;;7103   	{
;;;7104   	char i;
;;;7105   	for(i=0;i<MAX_NUM_OF_BAT;i++)
;;;7106   		{
;;;7107   		bat[i]._cnt_to_block=0;
;;;7108   		bat[i]._rel_stat=0;
;;;7109   		}
;;;7110   
;;;7111   	}
;;;7112   
;;;7113   /*if(mess_find_unvol(MESS2BAT_HNDL1))
;;;7114   	{
;;;7115   	if(PARAM_BAT_ON)
;;;7116   		{
;;;7117   		char i;
;;;7118   		for(i=0;i<MAX_NUM_OF_BAT;i++)
;;;7119   			{
;;;7120   			if(mess_data[1]&(1<<i))
;;;7121   				{
;;;7122   				bat[i]._cnt_to_block=0;
;;;7123   				bat[i]._rel_stat=0;
;;;7124   				}
;;;7125   			}
;;;7126   		}
;;;7127   	} */
;;;7128   }
0050b2  e754              B        |L1.20318|
                  |L1.20660|
0050b4  f04f0000          MOV      r0,#0                 ;7105
                  |L1.20664|
0050b8  eb000340          ADD      r3,r0,r0,LSL #1       ;7107
0050bc  eb031300          ADD      r3,r3,r0,LSL #4       ;7107
0050c0  f8012023          STRB     r2,[r1,r3,LSL #2]     ;7107
0050c4  eb010383          ADD      r3,r1,r3,LSL #2       ;7108
0050c8  f883203c          STRB     r2,[r3,#0x3c]         ;7108
0050cc  f1000001          ADD      r0,r0,#1              ;7105
0050d0  b2c0              UXTB     r0,r0                 ;7105
0050d2  2802              CMP      r0,#2                 ;7105
0050d4  d3f0              BCC      |L1.20664|
0050d6  e742              B        |L1.20318|
;;;7129   
                          ENDP

                  bat_drv PROC
;;;7767   //-----------------------------------------------
;;;7768   void bat_drv(char in)
0050d8  e92d4ffe          PUSH     {r1-r11,lr}
;;;7769   {
0050dc  4605              MOV      r5,r0
;;;7770   unsigned short /*tempUS,*/tempUS_;
;;;7771   unsigned long tempUL,tempUL_;
;;;7772   unsigned short b_zar;
;;;7773   //static unsigned short time_cnt[2];
;;;7774   
;;;7775   
;;;7776   
;;;7777   if(cntrl_stat_blok_cnt_plus[in])cntrl_stat_blok_cnt_plus[in]--;
0050de  49a7              LDR      r1,|L1.21372|
0050e0  f9310015          LDRSH    r0,[r1,r5,LSL #1]
0050e4  b118              CBZ      r0,|L1.20718|
0050e6  f1a00001          SUB      r0,r0,#1
0050ea  f8210015          STRH     r0,[r1,r5,LSL #1]
                  |L1.20718|
;;;7778   if(cntrl_stat_blok_cnt_minus[in])cntrl_stat_blok_cnt_minus[in]--;
0050ee  4aa3              LDR      r2,|L1.21372|
0050f0  1d12              ADDS     r2,r2,#4
0050f2  f9320015          LDRSH    r0,[r2,r5,LSL #1]
0050f6  b118              CBZ      r0,|L1.20736|
0050f8  f1a00001          SUB      r0,r0,#1
0050fc  f8220015          STRH     r0,[r2,r5,LSL #1]
                  |L1.20736|
;;;7779   
;;;7780   
;;;7781   if(bat[in]._Ib>IZMAX) cntrl_stat_blok_cnt_plus[in]=100;
005100  eb050045          ADD      r0,r5,r5,LSL #1
005104  4b9b              LDR      r3,|L1.21364|
005106  eb001005          ADD      r0,r0,r5,LSL #4
00510a  eb030480          ADD      r4,r3,r0,LSL #2
00510e  4b9c              LDR      r3,|L1.21376|
005110  9002              STR      r0,[sp,#8]
005112  f9b40008          LDRSH    r0,[r4,#8]
005116  f9b36000          LDRSH    r6,[r3,#0]  ; IZMAX
00511a  2364              MOVS     r3,#0x64
00511c  42b0              CMP      r0,r6
00511e  dd01              BLE      |L1.20772|
005120  f8213015          STRH     r3,[r1,r5,LSL #1]
                  |L1.20772|
;;;7782   if(bat[in]._Ib<0)     cntrl_stat_blok_cnt_minus[in]=100;
005124  2800              CMP      r0,#0
005126  da01              BGE      |L1.20780|
005128  f8223015          STRH     r3,[r2,r5,LSL #1]
                  |L1.20780|
;;;7783   
;;;7784   if(cntrl_stat_blok_cnt_plus[in] && cntrl_stat_blok_cnt_minus[in])
;;;7785        {
;;;7786        if(!cntrl_stat_blok_cnt_)
00512c  4893              LDR      r0,|L1.21372|
00512e  f8313015          LDRH     r3,[r1,r5,LSL #1]     ;7784
005132  38b0              SUBS     r0,r0,#0xb0
005134  2700              MOVS     r7,#0
005136  b14b              CBZ      r3,|L1.20812|
005138  f8323015          LDRH     r3,[r2,r5,LSL #1]     ;7784
00513c  b133              CBZ      r3,|L1.20812|
00513e  f8b03076          LDRH     r3,[r0,#0x76]  ; cntrl_stat_blok_cnt_
005142  b1a3              CBZ      r3,|L1.20846|
;;;7787             {
;;;7788             cntrl_stat_blok_cnt_=600; 
;;;7789             cntrl_stat_blok_cnt_plus[in]=0;
;;;7790             cntrl_stat_blok_cnt_minus[in]=0;
;;;7791             }
;;;7792        else cntrl_stat_blok_cnt=3000;
005144  f64031b8          MOV      r1,#0xbb8
005148  f8a01074          STRH     r1,[r0,#0x74]
                  |L1.20812|
;;;7793        }
;;;7794   cntrl_stat_blok_cnt=0;
00514c  f8a07074          STRH     r7,[r0,#0x74]
;;;7795   
;;;7796   if(++(bat[in]._time_cnt)>=10)
005150  f894003e          LDRB     r0,[r4,#0x3e]
005154  1c40              ADDS     r0,r0,#1
005156  b2c0              UXTB     r0,r0
005158  f884003e          STRB     r0,[r4,#0x3e]
00515c  280a              CMP      r0,#0xa
00515e  d301              BCC      |L1.20836|
;;;7797   	{
;;;7798   	bat[in]._time_cnt=0;
005160  f884703e          STRB     r7,[r4,#0x3e]
                  |L1.20836|
;;;7799   	//bat[in]._zar_cnt++;
;;;7800   	}
;;;7801   
;;;7802   if(main_10Hz_cnt==50)
005164  4e87              LDR      r6,|L1.21380|
005166  8830              LDRH     r0,[r6,#0]  ; main_10Hz_cnt
005168  2832              CMP      r0,#0x32
00516a  d009              BEQ      |L1.20864|
00516c  e017              B        |L1.20894|
                  |L1.20846|
00516e  f44f7316          MOV      r3,#0x258             ;7788
005172  f8a03076          STRH     r3,[r0,#0x76]         ;7788
005176  f8217015          STRH     r7,[r1,r5,LSL #1]     ;7789
00517a  f8227015          STRH     r7,[r2,r5,LSL #1]     ;7790
00517e  e7e5              B        |L1.20812|
                  |L1.20864|
;;;7803   	{
;;;7804   	if(!bat[in]._rel_stat)
005180  f894003c          LDRB     r0,[r4,#0x3c]
005184  b958              CBNZ     r0,|L1.20894|
;;;7805   		{
;;;7806   		
;;;7807   		if(bat[in]._Ub<80) 
005186  f9b40002          LDRSH    r0,[r4,#2]
00518a  2850              CMP      r0,#0x50
00518c  da07              BGE      |L1.20894|
;;;7808   			{
;;;7809   			
;;;7810   			if(!(bat[in]._av&1))
00518e  f894003d          LDRB     r0,[r4,#0x3d]
005192  07c0              LSLS     r0,r0,#31
005194  d103              BNE      |L1.20894|
;;;7811   				{
;;;7812   				avar_bat_hndl(in,1);
005196  2101              MOVS     r1,#1
005198  4628              MOV      r0,r5
00519a  f7fffffe          BL       avar_bat_hndl
                  |L1.20894|
;;;7813   				//if(in==0)plazma_bat++;
;;;7814   				}
;;;7815   			}				
;;;7816   
;;;7817   		}
;;;7818   	}
;;;7819   
;;;7820   if(main_10Hz_cnt>200)
00519e  f9b60000          LDRSH    r0,[r6,#0]  ; main_10Hz_cnt
;;;7821   	{
;;;7822   	if(abs(bat[in]._Ib)>IKB) 
0051a2  4e79              LDR      r6,|L1.21384|
0051a4  28c8              CMP      r0,#0xc8              ;7820
0051a6  dd0f              BLE      |L1.20936|
0051a8  f9b40008          LDRSH    r0,[r4,#8]
0051ac  f7fffffe          BL       abs
0051b0  f9b61000          LDRSH    r1,[r6,#0]  ; IKB
0051b4  4288              CMP      r0,r1
0051b6  dd07              BLE      |L1.20936|
;;;7823   		{
;;;7824   		if((bat[in]._av&1))avar_bat_hndl(in,0);
0051b8  f894003d          LDRB     r0,[r4,#0x3d]
0051bc  07c0              LSLS     r0,r0,#31
0051be  d003              BEQ      |L1.20936|
0051c0  2100              MOVS     r1,#0
0051c2  4628              MOV      r0,r5
0051c4  f7fffffe          BL       avar_bat_hndl
                  |L1.20936|
;;;7825   		}
;;;7826   	}
;;;7827   
;;;7828   #ifdef APSENERGIA
;;;7829   //if(bat[in]._Ib>(-IKB))
;;;7830   
;;;7831   
;;;7832   #endif
;;;7833   
;;;7834   if(bat[in]._Ib>(-IKB))
0051c8  f9b61000          LDRSH    r1,[r6,#0]  ; IKB
0051cc  f9b40008          LDRSH    r0,[r4,#8]
0051d0  4249              RSBS     r1,r1,#0
0051d2  4288              CMP      r0,r1
0051d4  dd0e              BLE      |L1.20980|
;;;7835   	{
;;;7836   	if(bat[in]._cnt_wrk<10)
0051d6  7b60              LDRB     r0,[r4,#0xd]
0051d8  280a              CMP      r0,#0xa
0051da  d20c              BCS      |L1.20982|
;;;7837   		{
;;;7838   		bat[in]._cnt_wrk++;
0051dc  f1000001          ADD      r0,r0,#1
0051e0  b2c0              UXTB     r0,r0
0051e2  7360              STRB     r0,[r4,#0xd]
;;;7839   		if((bat[in]._cnt_wrk>=10)&&(bat[in]._wrk)) 
0051e4  280a              CMP      r0,#0xa
0051e6  d307              BCC      |L1.20984|
0051e8  7ba0              LDRB     r0,[r4,#0xe]
0051ea  2800              CMP      r0,#0
0051ec  d004              BEQ      |L1.20984|
;;;7840   			{
;;;7841   			bat[in]._wrk=0;
0051ee  73a7              STRB     r7,[r4,#0xe]
;;;7842   			//beep_init(0x7L,'O');
;;;7843   			//wrk_mem_hndl(0);
;;;7844   			wrk_mem_hndl(in);
0051f0  4628              MOV      r0,r5
0051f2  e0cb              B        |L1.21388|
                  |L1.20980|
0051f4  e0d1              B        |L1.21402|
                  |L1.20982|
0051f6  e0cc              B        |L1.21394|
                  |L1.20984|
0051f8  e111              B        |L1.21534|
0051fa  0000              DCW      0x0000
                  |L1.20988|
                          DCD      eb2_data_short
                  |L1.20992|
                          DCD      avt_stat
                  |L1.20996|
                          DCD      avt_stat_old
                  |L1.21000|
                          DCD      NUMAVT
                  |L1.21004|
00520c  4176746f          DCB      "Avtomat #1 is OFF",0
005210  6d617420
005214  23312069
005218  73204f46
00521c  4600    
00521e  00                DCB      0
00521f  00                DCB      0
                  |L1.21024|
005220  4176746f          DCB      "Avtomat #2 is OFF",0
005224  6d617420
005228  23322069
00522c  73204f46
005230  4600    
005232  00                DCB      0
005233  00                DCB      0
                  |L1.21044|
005234  4176746f          DCB      "Avtomat #3 is OFF",0
005238  6d617420
00523c  23332069
005240  73204f46
005244  4600    
005246  00                DCB      0
005247  00                DCB      0
                  |L1.21064|
005248  4176746f          DCB      "Avtomat #4 is OFF",0
00524c  6d617420
005250  23342069
005254  73204f46
005258  4600    
00525a  00                DCB      0
00525b  00                DCB      0
                  |L1.21084|
00525c  4176746f          DCB      "Avtomat #5 is OFF",0
005260  6d617420
005264  23352069
005268  73204f46
00526c  4600    
00526e  00                DCB      0
00526f  00                DCB      0
                  |L1.21104|
005270  4176746f          DCB      "Avtomat #6 is OFF",0
005274  6d617420
005278  23362069
00527c  73204f46
005280  4600    
005282  00                DCB      0
005283  00                DCB      0
                  |L1.21124|
005284  4176746f          DCB      "Avtomat #7 is OFF",0
005288  6d617420
00528c  23372069
005290  73204f46
005294  4600    
005296  00                DCB      0
005297  00                DCB      0
                  |L1.21144|
005298  4176746f          DCB      "Avtomat #8 is OFF",0
00529c  6d617420
0052a0  23382069
0052a4  73204f46
0052a8  4600    
0052aa  00                DCB      0
0052ab  00                DCB      0
                  |L1.21164|
0052ac  4176746f          DCB      "Avtomat #9 is OFF",0
0052b0  6d617420
0052b4  23392069
0052b8  73204f46
0052bc  4600    
0052be  00                DCB      0
0052bf  00                DCB      0
                  |L1.21184|
0052c0  4176746f          DCB      "Avtomat #1 is ON ",0
0052c4  6d617420
0052c8  23312069
0052cc  73204f4e
0052d0  2000    
0052d2  00                DCB      0
0052d3  00                DCB      0
                  |L1.21204|
0052d4  4176746f          DCB      "Avtomat #2 is ON ",0
0052d8  6d617420
0052dc  23322069
0052e0  73204f4e
0052e4  2000    
0052e6  00                DCB      0
0052e7  00                DCB      0
                  |L1.21224|
0052e8  4176746f          DCB      "Avtomat #3 is ON ",0
0052ec  6d617420
0052f0  23332069
0052f4  73204f4e
0052f8  2000    
0052fa  00                DCB      0
0052fb  00                DCB      0
                  |L1.21244|
0052fc  4176746f          DCB      "Avtomat #4 is ON ",0
005300  6d617420
005304  23342069
005308  73204f4e
00530c  2000    
00530e  00                DCB      0
00530f  00                DCB      0
                  |L1.21264|
005310  4176746f          DCB      "Avtomat #5 is ON ",0
005314  6d617420
005318  23352069
00531c  73204f4e
005320  2000    
005322  00                DCB      0
005323  00                DCB      0
                  |L1.21284|
005324  4176746f          DCB      "Avtomat #6 is ON ",0
005328  6d617420
00532c  23362069
005330  73204f4e
005334  2000    
005336  00                DCB      0
005337  00                DCB      0
                  |L1.21304|
005338  4176746f          DCB      "Avtomat #7 is ON ",0
00533c  6d617420
005340  23372069
005344  73204f4e
005348  2000    
00534a  00                DCB      0
00534b  00                DCB      0
                  |L1.21324|
00534c  4176746f          DCB      "Avtomat #8 is ON ",0
005350  6d617420
005354  23382069
005358  73204f4e
00535c  2000    
00535e  00                DCB      0
00535f  00                DCB      0
                  |L1.21344|
005360  4176746f          DCB      "Avtomat #9 is ON ",0
005364  6d617420
005368  23392069
00536c  73204f4e
005370  2000    
005372  00                DCB      0
005373  00                DCB      0
                  |L1.21364|
                          DCD      bat
                  |L1.21368|
                          DCD      mess_data
                  |L1.21372|
                          DCD      ||area_number.25||+0xb0
                  |L1.21376|
                          DCD      IZMAX
                  |L1.21380|
                          DCD      main_10Hz_cnt
                  |L1.21384|
                          DCD      IKB
                  |L1.21388|
00538c  f7fffffe          BL       wrk_mem_hndl
005390  e069              B        |L1.21606|
                  |L1.21394|
;;;7845   			//plazma++;
;;;7846   			}
;;;7847   		}
;;;7848   	else bat[in]._cnt_wrk=10;	
005392  f04f000a          MOV      r0,#0xa
005396  7360              STRB     r0,[r4,#0xd]
005398  e065              B        |L1.21606|
                  |L1.21402|
;;;7849   	}	
;;;7850   
;;;7851   else if(bat[in]._Ib<(-IKB))
00539a  da64              BGE      |L1.21606|
;;;7852   	{
;;;7853   	if(bat[in]._cnt_wrk)
00539c  7b60              LDRB     r0,[r4,#0xd]
00539e  b3f0              CBZ      r0,|L1.21534|
;;;7854   		{
;;;7855   		bat[in]._cnt_wrk--;
0053a0  f1a00001          SUB      r0,r0,#1
0053a4  b2c0              UXTB     r0,r0
0053a6  7360              STRB     r0,[r4,#0xd]
;;;7856   		if((bat[in]._cnt_wrk==0)&&(bat[in]._wrk==0)) 
0053a8  bbc8              CBNZ     r0,|L1.21534|
0053aa  7ba0              LDRB     r0,[r4,#0xe]
0053ac  bbb8              CBNZ     r0,|L1.21534|
;;;7857   			{
;;;7858   			bat[in]._wrk=1;
0053ae  f04f0001          MOV      r0,#1
0053b2  73a0              STRB     r0,[r4,#0xe]
;;;7859   
;;;7860   				{
;;;7861   				char temp;
;;;7862   				signed short temp_temp;
;;;7863   				temp_temp=bat[in]._u_old[((bat_u_old_cnt+1)&0x07)];
0053b4  48ff              LDR      r0,|L1.22452|
0053b6  8800              LDRH     r0,[r0,#0]  ; bat_u_old_cnt
0053b8  f1000001          ADD      r0,r0,#1
0053bc  f0000007          AND      r0,r0,#7
0053c0  eb040040          ADD      r0,r4,r0,LSL #1
0053c4  8c00              LDRH     r0,[r0,#0x20]
0053c6  9000              STR      r0,[sp,#0]
;;;7864   			 
;;;7865   				temp=LPC_RTC->YEAR;
0053c8  4efb              LDR      r6,|L1.22456|
0053ca  8bb0              LDRH     r0,[r6,#0x1c]
0053cc  9001              STR      r0,[sp,#4]
;;;7866   				gran_char((signed char*)&temp,1,99);
0053ce  f04f0263          MOV      r2,#0x63
0053d2  f04f0101          MOV      r1,#1
0053d6  a801              ADD      r0,sp,#4
0053d8  f7fffffe          BL       gran_char
;;;7867   				*((char*)(&(bat[in]._wrk_date[0])))=temp;
0053dc  f104041c          ADD      r4,r4,#0x1c
0053e0  f89d0004          LDRB     r0,[sp,#4]
0053e4  7620              STRB     r0,[r4,#0x18]
;;;7868   			
;;;7869   				temp=LPC_RTC->MONTH;
0053e6  7e30              LDRB     r0,[r6,#0x18]
0053e8  9001              STR      r0,[sp,#4]
;;;7870   				gran_char((signed char*)&temp,1,12);
0053ea  f04f020c          MOV      r2,#0xc
0053ee  f04f0101          MOV      r1,#1
0053f2  a801              ADD      r0,sp,#4
0053f4  f7fffffe          BL       gran_char
;;;7871   				*(((char*)(&(bat[in]._wrk_date[0])))+1)=temp;
0053f8  f89d0004          LDRB     r0,[sp,#4]
0053fc  7660              STRB     r0,[r4,#0x19]
;;;7872   			
;;;7873   				temp=LPC_RTC->DOM;
0053fe  7b30              LDRB     r0,[r6,#0xc]
005400  9001              STR      r0,[sp,#4]
;;;7874   				gran_char((signed char*)&temp,1,31);
005402  221f              MOVS     r2,#0x1f
005404  2101              MOVS     r1,#1
005406  a801              ADD      r0,sp,#4
005408  f7fffffe          BL       gran_char
;;;7875   				*(((char*)(&(bat[in]._wrk_date[0])))+2)=temp;			
00540c  f89d0004          LDRB     r0,[sp,#4]
005410  76a0              STRB     r0,[r4,#0x1a]
;;;7876   				
;;;7877   				*(((char*)(&(bat[in]._wrk_date[0])))+3)=*((char*)&temp_temp);
005412  f89d0000          LDRB     r0,[sp,#0]
005416  76e0              STRB     r0,[r4,#0x1b]
;;;7878   
;;;7879   				temp=LPC_RTC->HOUR;
005418  7a30              LDRB     r0,[r6,#8]
00541a  9001              STR      r0,[sp,#4]
;;;7880   				gran_char((signed char*)&temp,0,23);
00541c  e000              B        |L1.21536|
                  |L1.21534|
00541e  e022              B        |L1.21606|
                  |L1.21536|
005420  2217              MOVS     r2,#0x17
005422  2100              MOVS     r1,#0
005424  a801              ADD      r0,sp,#4
005426  f7fffffe          BL       gran_char
;;;7881   				*((char*)(&(bat[in]._wrk_date[1])))=temp;
00542a  f89d0004          LDRB     r0,[sp,#4]
00542e  7720              STRB     r0,[r4,#0x1c]
;;;7882                  	
;;;7883   				temp=LPC_RTC->MIN;
005430  7930              LDRB     r0,[r6,#4]
005432  9001              STR      r0,[sp,#4]
;;;7884   				gran_char((signed char*)&temp,0,59);
005434  223b              MOVS     r2,#0x3b
005436  2100              MOVS     r1,#0
005438  a801              ADD      r0,sp,#4
00543a  f7fffffe          BL       gran_char
;;;7885   				*(((char*)(&(bat[in]._wrk_date[1])))+1)=temp;
00543e  f89d0004          LDRB     r0,[sp,#4]
005442  7760              STRB     r0,[r4,#0x1d]
;;;7886   	          
;;;7887   				temp=LPC_RTC->SEC;
005444  7830              LDRB     r0,[r6,#0]
005446  9001              STR      r0,[sp,#4]
;;;7888   				gran_char((signed char*)&temp,0,59);
005448  223b              MOVS     r2,#0x3b
00544a  2100              MOVS     r1,#0
00544c  a801              ADD      r0,sp,#4
00544e  f7fffffe          BL       gran_char
;;;7889   				*(((char*)(&(bat[in]._wrk_date[1])))+2)=temp;
005452  f89d0004          LDRB     r0,[sp,#4]
005456  77a0              STRB     r0,[r4,#0x1e]
;;;7890   			
;;;7891   				*(((char*)(&(bat[in]._wrk_date[1])))+3)=*(((char*)&temp_temp)+1);
005458  f89d0001          LDRB     r0,[sp,#1]
00545c  77e0              STRB     r0,[r4,#0x1f]
;;;7892   				bat[in]._Iintegr=0;		//Счетчик десятков милиамперсекунд
00545e  8027              STRH     r7,[r4,#0]
;;;7893   				bat[in]._Iintegr_=0;	//Счетчик сотен милиамперчасов
005460  8067              STRH     r7,[r4,#2]
005462  f1a4041c          SUB      r4,r4,#0x1c
                  |L1.21606|
;;;7894   				}
;;;7895   	
;;;7896   			}
;;;7897   
;;;7898   		}
;;;7899   	else bat[in]._cnt_wrk=0;	 
;;;7900   	
;;;7901   	}					
;;;7902   
;;;7903   /*
;;;7904   if(Ibat>=(-IKB))
;;;7905   	{
;;;7906   	if(cnt_wrk<10)
;;;7907   		{
;;;7908   		cnt_wrk++;
;;;7909   		if((cnt_wrk>=10)&&(wrk!=wrkOFF)) 
;;;7910   			{
;;;7911   			wrk=wrkOFF;
;;;7912   			//beep_init(0x7L,'O');
;;;7913   			wrk_mem_hndl(ibat_integr);
;;;7914   			}
;;;7915   		}
;;;7916   	else cnt_wrk=10;	
;;;7917   	}	
;;;7918   
;;;7919   else if((Ibat<(-IKB))&&(spc_stat!=spc_KE))
;;;7920   	{
;;;7921   	if(cnt_wrk)
;;;7922   		{
;;;7923   		cnt_wrk--;
;;;7924   		if((cnt_wrk==0)&&(wrk!=wrkON)) 
;;;7925   			{
;;;7926   			char temp;
;;;7927   			signed short temp_temp;
;;;7928   			temp_temp=ubat_old[((ubat_old_cnt+1)&0x07)];
;;;7929   			 
;;;7930   			wrk=wrkON;
;;;7931   			
;;;7932   			temp=_year;
;;;7933   			gran_char(&temp,1,99);
;;;7934   			*((char*)(&(wrk_date[0])))=temp;
;;;7935   			
;;;7936   			temp=_month;
;;;7937   			gran_char(&temp,1,12);
;;;7938   			*(((char*)(&(wrk_date[0])))+1)=temp;
;;;7939   			
;;;7940   			temp=_date;
;;;7941   			gran_char(&temp,1,31);
;;;7942   			*(((char*)(&(wrk_date[0])))+2)=temp;			
;;;7943   				
;;;7944   			*(((char*)(&(wrk_date[0])))+3)=*((char*)&temp_temp);
;;;7945   
;;;7946   			temp=_hour;
;;;7947   			gran_char(&temp,0,23);
;;;7948   			*((char*)(&(wrk_date[1])))=temp;
;;;7949                  
;;;7950   			temp=_min;
;;;7951   			gran_char(&temp,0,59);
;;;7952   			*(((char*)(&(wrk_date[1])))+1)=temp;
;;;7953   	          
;;;7954   			temp=_sec;
;;;7955   			gran_char(&temp,0,59);
;;;7956   			*(((char*)(&(wrk_date[1])))+2)=temp;
;;;7957   			
;;;7958   			*(((char*)(&(wrk_date[1])))+3)=*(((char*)&temp_temp)+1);
;;;7959   
;;;7960   			
;;;7961   			//beep_init(0xFL,'O'); 
;;;7962   			ibat_integr=0;
;;;7963   			ibat_integr_=0;
;;;7964   			}
;;;7965   		}
;;;7966   	else cnt_wrk=0;	 
;;;7967   	
;;;7968   	}
;;;7969   if(wrk==wrkON)
;;;7970   	{
;;;7971   	ibat_integr_+=-Ibat;
;;;7972   	if(ibat_integr_>=SEC_IN_HOUR*10L)
;;;7973   		{
;;;7974   		ibat_integr_-=SEC_IN_HOUR*10L;
;;;7975   		ibat_integr++;
;;;7976   		}
;;;7977   	}
;;;7978   
;;;7979   */
;;;7980   
;;;7981   
;;;7982   /*if(bat[in]._cnt_to_block)
;;;7983   	{
;;;7984   	bat[in]._cnt_to_block--;
;;;7985   	if(!(bat[in]._cnt_to_block))
;;;7986   		{
;;;7987   		//bat[in]._rel_stat=1;
;;;7988   		}
;;;7989   	}
;;;7990   */
;;;7991   
;;;7992   
;;;7993   
;;;7994   
;;;7995   //unsigned int tempUI,tempUI_;
;;;7996   //unsigned int b_zar; 
;;;7997   //char i;
;;;7998   //Ibat[0]=5000;                     
;;;7999   
;;;8000   
;;;8001                               
;;;8002   if(bat[in]._time_cnt==0)
;;;8003   	{
;;;8004   	bat[in]._zar_cnt+=(signed long)bat[in]._Ib;
;;;8005   	
;;;8006   	if(bat[in]._zar_cnt>=AH_CONSTANT)
005466  f64848a0          MOV      r8,#0x8ca0
00546a  f894003e          LDRB     r0,[r4,#0x3e]         ;8002
00546e  bba8              CBNZ     r0,|L1.21724|
005470  f9b41008          LDRSH    r1,[r4,#8]            ;8004
005474  6960              LDR      r0,[r4,#0x14]         ;8004
005476  4408              ADD      r0,r0,r1              ;8004
005478  6160              STR      r0,[r4,#0x14]         ;8004
;;;8007   		{
;;;8008   		if(BAT_C_REAL[in]==0x5555) tempUS_=BAT_C_NOM[in];
;;;8009   		else tempUS_=BAT_C_REAL[in];
;;;8010   		
;;;8011   		b_zar=lc640_read_int(ADR_EE_BAT_ZAR_CNT[in]);
00547a  f8df9340          LDR      r9,|L1.22460|
00547e  f8dfa340          LDR      r10,|L1.22464|
005482  f2455b55          MOV      r11,#0x5555           ;8008
005486  4540              CMP      r0,r8                 ;8006
005488  db29              BLT      |L1.21726|
00548a  f93a0015          LDRSH    r0,[r10,r5,LSL #1]    ;8008
00548e  4558              CMP      r0,r11                ;8008
005490  d103              BNE      |L1.21658|
005492  48cc              LDR      r0,|L1.22468|
005494  f8306015          LDRH     r6,[r0,r5,LSL #1]     ;8008
005498  e001              B        |L1.21662|
                  |L1.21658|
00549a  f83a6015          LDRH     r6,[r10,r5,LSL #1]    ;8009
                  |L1.21662|
00549e  f8390015          LDRH     r0,[r9,r5,LSL #1]
0054a2  f7fffffe          BL       lc640_read_int
0054a6  b280              UXTH     r0,r0
;;;8012   
;;;8013   		if(b_zar<(tempUS_/**10*/))
0054a8  42b0              CMP      r0,r6
0054aa  d20e              BCS      |L1.21706|
;;;8014   			{
;;;8015   			bat[in]._zar_cnt-=AH_CONSTANT;
0054ac  6961              LDR      r1,[r4,#0x14]
0054ae  f5a14100          SUB      r1,r1,#0x8000
0054b2  f5a1614a          SUB      r1,r1,#0xca0
0054b6  6161              STR      r1,[r4,#0x14]
;;;8016   
;;;8017   			lc640_write_int(ADR_EE_BAT_ZAR_CNT[in],b_zar+1);
0054b8  f9392015          LDRSH    r2,[r9,r5,LSL #1]
0054bc  f1000001          ADD      r0,r0,#1
0054c0  b201              SXTH     r1,r0
0054c2  4610              MOV      r0,r2
0054c4  f7fffffe          BL       lc640_write_int
0054c8  e032              B        |L1.21808|
                  |L1.21706|
;;;8018   			}
;;;8019   		else if(b_zar>(tempUS_/**10*/))  
0054ca  d931              BLS      |L1.21808|
;;;8020   			{
;;;8021   			lc640_write_int(ADR_EE_BAT_ZAR_CNT[in],tempUS_);
0054cc  f9390015          LDRSH    r0,[r9,r5,LSL #1]
0054d0  b231              SXTH     r1,r6
0054d2  f7fffffe          BL       lc640_write_int
;;;8022   			bat[in]._zar_cnt=AH_CONSTANT;
0054d6  f8c48014          STR      r8,[r4,#0x14]
0054da  e029              B        |L1.21808|
                  |L1.21724|
0054dc  e054              B        |L1.21896|
                  |L1.21726|
;;;8023   
;;;8024   			}
;;;8025   
;;;8026   		}
;;;8027   
;;;8028   	else if(bat[in]._zar_cnt<=-AH_CONSTANT)
0054de  49ba              LDR      r1,|L1.22472|
0054e0  4288              CMP      r0,r1
0054e2  dc25              BGT      |L1.21808|
;;;8029   		{
;;;8030   		if(BAT_C_REAL[in]==0x5555) tempUS_=BAT_C_NOM[in];
0054e4  f93a0015          LDRSH    r0,[r10,r5,LSL #1]
0054e8  4558              CMP      r0,r11
0054ea  d103              BNE      |L1.21748|
0054ec  48b5              LDR      r0,|L1.22468|
0054ee  f8306015          LDRH     r6,[r0,r5,LSL #1]
0054f2  e001              B        |L1.21752|
                  |L1.21748|
;;;8031   		else tempUS_=BAT_C_REAL[in];
0054f4  f83a6015          LDRH     r6,[r10,r5,LSL #1]
                  |L1.21752|
;;;8032   		
;;;8033   		b_zar=lc640_read_int(ADR_EE_BAT_ZAR_CNT[in]);
0054f8  f8390015          LDRH     r0,[r9,r5,LSL #1]
0054fc  f7fffffe          BL       lc640_read_int
005500  b280              UXTH     r0,r0
;;;8034   
;;;8035   		if(b_zar>tempUS_)
005502  42b0              CMP      r0,r6
005504  d905              BLS      |L1.21778|
;;;8036   			{
;;;8037   			lc640_write_int(ADR_EE_BAT_ZAR_CNT[in],tempUS_);
005506  f9390015          LDRSH    r0,[r9,r5,LSL #1]
00550a  b231              SXTH     r1,r6
00550c  f7fffffe          BL       lc640_write_int
;;;8038   			b_zar=tempUS_;
005510  4630              MOV      r0,r6
                  |L1.21778|
;;;8039   			}
;;;8040   		if(b_zar)
005512  b158              CBZ      r0,|L1.21804|
;;;8041   			{
;;;8042   			bat[in]._zar_cnt+=AH_CONSTANT;
005514  6961              LDR      r1,[r4,#0x14]
005516  4441              ADD      r1,r1,r8
005518  6161              STR      r1,[r4,#0x14]
;;;8043   
;;;8044   			lc640_write_int(ADR_EE_BAT_ZAR_CNT[in],b_zar-1);
00551a  f9392015          LDRSH    r2,[r9,r5,LSL #1]
00551e  f1a00001          SUB      r0,r0,#1
005522  b201              SXTH     r1,r0
005524  4610              MOV      r0,r2
005526  f7fffffe          BL       lc640_write_int
00552a  e001              B        |L1.21808|
                  |L1.21804|
;;;8045   			}
;;;8046   		else 
;;;8047   			{
;;;8048   			bat[in]._zar_cnt=-AH_CONSTANT;
00552c  48a6              LDR      r0,|L1.22472|
00552e  6160              STR      r0,[r4,#0x14]
                  |L1.21808|
;;;8049   			}
;;;8050   
;;;8051   		}
;;;8052   
;;;8053   			
;;;8054   	tempUL=(unsigned long)lc640_read_int(ADR_EE_BAT_ZAR_CNT[in]);
005530  f8390015          LDRH     r0,[r9,r5,LSL #1]
005534  f7fffffe          BL       lc640_read_int
005538  4601              MOV      r1,r0
;;;8055   	
;;;8056   	if(BAT_C_REAL[in]==0x5555) tempUL_=(unsigned long)BAT_C_NOM[in];
00553a  f93a0015          LDRSH    r0,[r10,r5,LSL #1]
00553e  4558              CMP      r0,r11
005540  d102              BNE      |L1.21832|
005542  48a0              LDR      r0,|L1.22468|
005544  f9300015          LDRSH    r0,[r0,r5,LSL #1]
                  |L1.21832|
;;;8057   	else tempUL_=(unsigned long)BAT_C_REAL[in];
;;;8058   		           	
;;;8059   	tempUL*=1000L;
005548  f44f727a          MOV      r2,#0x3e8
00554c  fb01f102          MUL      r1,r1,r2
;;;8060   
;;;8061   
;;;8062   	if(tempUL_==0) tempUL=0;
005550  b158              CBZ      r0,|L1.21866|
;;;8063   	else tempUL/=tempUL_;
005552  fbb1f0f0          UDIV     r0,r1,r0
                  |L1.21846|
;;;8064   
;;;8065   	tempUL/=10L;
005556  f04f010a          MOV      r1,#0xa
00555a  fbb0f0f1          UDIV     r0,r0,r1
;;;8066   
;;;8067   	bat[in]._zar=(unsigned short)tempUL;
00555e  8220              STRH     r0,[r4,#0x10]
;;;8068   
;;;8069   	if(BAT_TYPE==1)
005560  489a              LDR      r0,|L1.22476|
005562  8800              LDRH     r0,[r0,#0]  ; BAT_TYPE
005564  2801              CMP      r0,#1
005566  d003              BEQ      |L1.21872|
005568  e008              B        |L1.21884|
                  |L1.21866|
00556a  f04f0000          MOV      r0,#0                 ;8062
00556e  e7f2              B        |L1.21846|
                  |L1.21872|
;;;8070   		{
;;;8071   		bat[in]._zar=lakb[in]._s_o_c;
005570  4997              LDR      r1,|L1.22480|
005572  9802              LDR      r0,[sp,#8]
005574  eb010080          ADD      r0,r1,r0,LSL #2
005578  8a40              LDRH     r0,[r0,#0x12]
00557a  8220              STRH     r0,[r4,#0x10]
                  |L1.21884|
;;;8072   		}
;;;8073   	
;;;8074   	gran((signed short*)&bat[in]._zar,0,100);
00557c  f1040010          ADD      r0,r4,#0x10
005580  2264              MOVS     r2,#0x64
005582  2100              MOVS     r1,#0
005584  f7fffffe          BL       gran
                  |L1.21896|
;;;8075        }
;;;8076   
;;;8077   
;;;8078   //Подсчет тока разряда батареи      
;;;8079   if(bat[in]._wrk==1)
005588  7ba0              LDRB     r0,[r4,#0xe]
00558a  2801              CMP      r0,#1
00558c  d113              BNE      |L1.21942|
;;;8080   	{
;;;8081   	if(bat[in]._Iintegr<36000)
00558e  8ba0              LDRH     r0,[r4,#0x1c]
005590  4540              CMP      r0,r8
005592  d20f              BCS      |L1.21940|
;;;8082   		{          
;;;8083   		bat[in]._Iintegr+=abs(bat[in]._Ib);
005594  f9b40008          LDRSH    r0,[r4,#8]
005598  f7fffffe          BL       abs
00559c  8ba1              LDRH     r1,[r4,#0x1c]
00559e  4408              ADD      r0,r0,r1
0055a0  b280              UXTH     r0,r0
0055a2  83a0              STRH     r0,[r4,#0x1c]
;;;8084   		if(bat[in]._Iintegr>=36000)
0055a4  4540              CMP      r0,r8
0055a6  d306              BCC      |L1.21942|
;;;8085   			{
;;;8086   			bat[in]._Iintegr=0;		//Счетчик десятков милиамперсекунд
0055a8  83a7              STRH     r7,[r4,#0x1c]
;;;8087   			bat[in]._Iintegr_++;	//Счетчик сотен милиамперчасов
0055aa  8be0              LDRH     r0,[r4,#0x1e]
0055ac  f1000001          ADD      r0,r0,#1
0055b0  83e0              STRH     r0,[r4,#0x1e]
0055b2  e000              B        |L1.21942|
                  |L1.21940|
;;;8088   			}
;;;8089   		}
;;;8090   	else 
;;;8091   		{
;;;8092   		bat[in]._Iintegr=0;
0055b4  83a7              STRH     r7,[r4,#0x1c]
                  |L1.21942|
;;;8093   		}	
;;;8094   	} 
;;;8095   	    
;;;8096   #ifdef UKU_220_IPS_TERMOKOMPENSAT
;;;8097   if((t_ext[0]>TBATSIGN)&&(!ND_EXT[0]))	
0055b6  4e87              LDR      r6,|L1.22484|
0055b8  4987              LDR      r1,|L1.22488|
0055ba  f8df9220          LDR      r9,|L1.22492|
0055be  f9b60000          LDRSH    r0,[r6,#0]  ; t_ext
0055c2  f9b11000          LDRSH    r1,[r1,#0]  ; TBATSIGN
0055c6  4288              CMP      r0,r1
0055c8  dd02              BLE      |L1.21968|
0055ca  f8990000          LDRB     r0,[r9,#0]  ; ND_EXT
0055ce  b380              CBZ      r0,|L1.22066|
                  |L1.21968|
;;;8098   	{
;;;8099   	bat[in]._sign_temper_cnt++;
;;;8100   	}
;;;8101   else 
;;;8102   	{
;;;8103   	bat[in]._sign_temper_cnt--;
0055d0  f8b40040          LDRH     r0,[r4,#0x40]
0055d4  f1a00001          SUB      r0,r0,#1
0055d8  f8a40040          STRH     r0,[r4,#0x40]
                  |L1.21980|
;;;8104   	}
;;;8105   #else
;;;8106   if((bat[in]._Tb>TBATSIGN)&&(!bat[in]._nd))	
;;;8107   	{
;;;8108   	bat[in]._sign_temper_cnt++;
;;;8109   	}
;;;8110   else 
;;;8111   	{
;;;8112   	bat[in]._sign_temper_cnt--;
;;;8113   	}
;;;8114   #endif
;;;8115   gran(&bat[in]._sign_temper_cnt,0,600);
0055dc  f44f7b16          MOV      r11,#0x258
0055e0  f1040040          ADD      r0,r4,#0x40
0055e4  465a              MOV      r2,r11
0055e6  2100              MOVS     r1,#0
0055e8  f7fffffe          BL       gran
;;;8116   if(bat[in]._sign_temper_cnt>=590)	bat[in]._temper_stat|=(1<<0);
0055ec  f9b40040          LDRSH    r0,[r4,#0x40]
0055f0  f2402a4e          MOV      r10,#0x24e
0055f4  4550              CMP      r0,r10
0055f6  db05              BLT      |L1.22020|
0055f8  f894103f          LDRB     r1,[r4,#0x3f]
0055fc  f0410101          ORR      r1,r1,#1
005600  f884103f          STRB     r1,[r4,#0x3f]
                  |L1.22020|
;;;8117   if(bat[in]._sign_temper_cnt<=10)	bat[in]._temper_stat&=~(1<<0);
005604  280a              CMP      r0,#0xa
005606  dc05              BGT      |L1.22036|
005608  f894003f          LDRB     r0,[r4,#0x3f]
00560c  f0200001          BIC      r0,r0,#1
005610  f884003f          STRB     r0,[r4,#0x3f]
                  |L1.22036|
;;;8118   
;;;8119   if((bat[in]._temper_stat&(1<<0))&&(!(bat[in]._temper_stat&(1<<4))))	avar_bat_temper_hndl(in,1);
005614  f894003f          LDRB     r0,[r4,#0x3f]
005618  07c1              LSLS     r1,r0,#31
00561a  d005              BEQ      |L1.22056|
00561c  06c0              LSLS     r0,r0,#27
00561e  d403              BMI      |L1.22056|
005620  2101              MOVS     r1,#1
005622  4628              MOV      r0,r5
005624  f7fffffe          BL       avar_bat_temper_hndl
                  |L1.22056|
;;;8120   if((!(bat[in]._temper_stat&(1<<0)))&&(bat[in]._temper_stat&(1<<4)))	avar_bat_temper_hndl(in,0);
005628  f894003f          LDRB     r0,[r4,#0x3f]
00562c  07c1              LSLS     r1,r0,#31
00562e  d008              BEQ      |L1.22082|
005630  e00d              B        |L1.22094|
                  |L1.22066|
005632  e7ff              B        |L1.22068|
                  |L1.22068|
005634  f8b40040          LDRH     r0,[r4,#0x40]         ;8099
005638  f1000001          ADD      r0,r0,#1              ;8099
00563c  f8a40040          STRH     r0,[r4,#0x40]         ;8099
005640  e7cc              B        |L1.21980|
                  |L1.22082|
005642  06c0              LSLS     r0,r0,#27
005644  d503              BPL      |L1.22094|
005646  2100              MOVS     r1,#0
005648  4628              MOV      r0,r5
00564a  f7fffffe          BL       avar_bat_temper_hndl
                  |L1.22094|
;;;8121   
;;;8122   if(bat[in]._temper_stat&(1<<0))		bat[in]._temper_stat|=(1<<4);
00564e  f894003f          LDRB     r0,[r4,#0x3f]
005652  07c1              LSLS     r1,r0,#31
005654  d004              BEQ      |L1.22112|
005656  f0400010          ORR      r0,r0,#0x10
00565a  f884003f          STRB     r0,[r4,#0x3f]
00565e  e003              B        |L1.22120|
                  |L1.22112|
;;;8123   else 								bat[in]._temper_stat&=~(1<<4);
005660  f0200010          BIC      r0,r0,#0x10
005664  f884003f          STRB     r0,[r4,#0x3f]
                  |L1.22120|
;;;8124   
;;;8125   #ifdef UKU_220_IPS_TERMOKOMPENSAT
;;;8126   if((t_ext[0]>TBATMAX)&&(!ND_EXT[0]))	
005668  495d              LDR      r1,|L1.22496|
00566a  f9b60000          LDRSH    r0,[r6,#0]  ; t_ext
00566e  f9b11000          LDRSH    r1,[r1,#0]  ; TBATMAX
005672  4288              CMP      r0,r1
005674  dd02              BLE      |L1.22140|
005676  f8990000          LDRB     r0,[r9,#0]  ; ND_EXT
00567a  b3d0              CBZ      r0,|L1.22258|
                  |L1.22140|
;;;8127   	{
;;;8128   	bat[in]._max_temper_cnt++;
;;;8129   	}
;;;8130   else 
;;;8131   	{
;;;8132   	bat[in]._max_temper_cnt--;
00567c  f8b40042          LDRH     r0,[r4,#0x42]
005680  f1a00001          SUB      r0,r0,#1
005684  f8a40042          STRH     r0,[r4,#0x42]
                  |L1.22152|
;;;8133   	}
;;;8134   #else
;;;8135   if((bat[in]._Tb>TBATMAX)&&(!bat[in]._nd))	
;;;8136   	{
;;;8137   	bat[in]._max_temper_cnt++;
;;;8138   	}
;;;8139   else 
;;;8140   	{
;;;8141   	bat[in]._max_temper_cnt--;
;;;8142   	}
;;;8143   #endif
;;;8144   
;;;8145   gran(&bat[in]._max_temper_cnt,0,600);
005688  f1040042          ADD      r0,r4,#0x42
00568c  465a              MOV      r2,r11
00568e  2100              MOVS     r1,#0
005690  f7fffffe          BL       gran
;;;8146   if(bat[in]._max_temper_cnt>=590)	bat[in]._temper_stat|=(1<<1);
005694  f9b40042          LDRSH    r0,[r4,#0x42]
005698  4550              CMP      r0,r10
00569a  db05              BLT      |L1.22184|
00569c  f894103f          LDRB     r1,[r4,#0x3f]
0056a0  f0410102          ORR      r1,r1,#2
0056a4  f884103f          STRB     r1,[r4,#0x3f]
                  |L1.22184|
;;;8147   if(bat[in]._max_temper_cnt<=10)	bat[in]._temper_stat&=~(1<<1);
0056a8  280a              CMP      r0,#0xa
0056aa  dc05              BGT      |L1.22200|
0056ac  f894003f          LDRB     r0,[r4,#0x3f]
0056b0  f0200002          BIC      r0,r0,#2
0056b4  f884003f          STRB     r0,[r4,#0x3f]
                  |L1.22200|
;;;8148   
;;;8149   if((bat[in]._temper_stat&(1<<1))&&(!(bat[in]._temper_stat&(1<<5))))	avar_bat_temper_hndl(in,3);
0056b8  f894003f          LDRB     r0,[r4,#0x3f]
0056bc  0781              LSLS     r1,r0,#30
0056be  d505              BPL      |L1.22220|
0056c0  0680              LSLS     r0,r0,#26
0056c2  d403              BMI      |L1.22220|
0056c4  2103              MOVS     r1,#3
0056c6  4628              MOV      r0,r5
0056c8  f7fffffe          BL       avar_bat_temper_hndl
                  |L1.22220|
;;;8150   if((!(bat[in]._temper_stat&(1<<1)))&&(bat[in]._temper_stat&(1<<5)))	avar_bat_temper_hndl(in,2);
0056cc  f894003f          LDRB     r0,[r4,#0x3f]
0056d0  0781              LSLS     r1,r0,#30
0056d2  d405              BMI      |L1.22240|
0056d4  0680              LSLS     r0,r0,#26
0056d6  d503              BPL      |L1.22240|
0056d8  2102              MOVS     r1,#2
0056da  4628              MOV      r0,r5
0056dc  f7fffffe          BL       avar_bat_temper_hndl
                  |L1.22240|
;;;8151   
;;;8152   if(bat[in]._temper_stat&(1<<1))		bat[in]._temper_stat|=(1<<5);
0056e0  f894003f          LDRB     r0,[r4,#0x3f]
0056e4  0781              LSLS     r1,r0,#30
0056e6  d50c              BPL      |L1.22274|
0056e8  f0400020          ORR      r0,r0,#0x20
0056ec  f884003f          STRB     r0,[r4,#0x3f]
0056f0  e00b              B        |L1.22282|
                  |L1.22258|
0056f2  e7ff              B        |L1.22260|
                  |L1.22260|
0056f4  f8b40042          LDRH     r0,[r4,#0x42]         ;8128
0056f8  f1000001          ADD      r0,r0,#1              ;8128
0056fc  f8a40042          STRH     r0,[r4,#0x42]         ;8128
005700  e7c2              B        |L1.22152|
                  |L1.22274|
;;;8153   else 								bat[in]._temper_stat&=~(1<<5);
005702  f0200020          BIC      r0,r0,#0x20
005706  f884003f          STRB     r0,[r4,#0x3f]
                  |L1.22282|
;;;8154   
;;;8155   //Подсчет наработки батареи
;;;8156   if(bat[in]._resurs_cnt<36000)
00570a  6c60              LDR      r0,[r4,#0x44]
00570c  4540              CMP      r0,r8
00570e  da13              BGE      |L1.22328|
;;;8157   	{               
;;;8158   	bat[in]._resurs_cnt++;
005710  f1000001          ADD      r0,r0,#1
005714  6460              STR      r0,[r4,#0x44]
;;;8159   	if(bat[in]._resurs_cnt>=36000)
005716  4540              CMP      r0,r8
005718  db0f              BLT      |L1.22330|
;;;8160   		{
;;;8161   		bat[in]._resurs_cnt=0;
00571a  6467              STR      r7,[r4,#0x44]
;;;8162   		lc640_write_int(ADR_EE_BAT_RESURS[in],lc640_read_int(ADR_EE_BAT_RESURS[in])+1);
00571c  4c31              LDR      r4,|L1.22500|
00571e  f8340015          LDRH     r0,[r4,r5,LSL #1]
005722  f7fffffe          BL       lc640_read_int
005726  1c40              ADDS     r0,r0,#1
005728  b201              SXTH     r1,r0
00572a  f9340015          LDRSH    r0,[r4,r5,LSL #1]
00572e  b003              ADD      sp,sp,#0xc
005730  e8bd4ff0          POP      {r4-r11,lr}
005734  f7ffbffe          B.W      lc640_write_int
                  |L1.22328|
;;;8163   		}
;;;8164   	}
;;;8165   else bat[in]._resurs_cnt=0;
005738  6467              STR      r7,[r4,#0x44]
                  |L1.22330|
;;;8166   
;;;8167   
;;;8168   #ifndef UKU_220_V2
;;;8169   #ifndef UKU_GLONASS
;;;8170   #ifndef UKU_220_IPS_TERMOKOMPENSAT
;;;8171   //#ifndef UKU_6U
;;;8172   //#ifndef UKU_220
;;;8173   if(UBM_AV)
;;;8174        {
;;;8175        signed short temp_SS;
;;;8176   #ifdef UKU_220
;;;8177   temp_SS=bat[in]._Ub/2;
;;;8178   #else
;;;8179        if(U0B<600)
;;;8180             {
;;;8181   
;;;8182             temp_SS=bat[in]._Ub/4;
;;;8183             }
;;;8184        else temp_SS=bat[in]._Ub/5;
;;;8185   	
;;;8186   	temp_SS+=temp_SS;     
;;;8187   #endif
;;;8188        temp_SS-=(bat[in]._Ubm);
;;;8189   
;;;8190        temp_SS=abs(temp_SS);
;;;8191   
;;;8192        temp_SS*=10;
;;;8193   
;;;8194        temp_SS/=12;
;;;8195   
;;;8196        bat[in]._dUbm=temp_SS;
;;;8197   
;;;8198   
;;;8199        if(	(bat[in]._dUbm>UBM_AV) &&
;;;8200   		(abs(bat[in]._Ib)<(5*IKB)) &&
;;;8201   		(bat[in]._Ub>((short)(((long)USIGN*115)/100))) &&
;;;8202   		(!(bat[in]._av & 2))  )
;;;8203   		{
;;;8204   		bat[in]._cnt_as++;
;;;8205   		if(bat[in]._cnt_as==3000)
;;;8206   			{
;;;8207   			avar_bat_as_hndl(in,1);
;;;8208   			}
;;;8209   		if(bat[in]._cnt_as>=3005) bat[in]._cnt_as=3005;
;;;8210   		}
;;;8211   	else 
;;;8212   		{
;;;8213   		if(bat[in]._cnt_as)
;;;8214   			{
;;;8215   			bat[in]._cnt_as--;
;;;8216   			if(bat[in]._cnt_as==0)avar_bat_as_hndl(in,0);
;;;8217   			}
;;;8218   		}
;;;8219        
;;;8220        }
;;;8221   //#endif 
;;;8222   #endif 
;;;8223   #endif
;;;8224   #endif
;;;8225   
;;;8226   }
00573a  e8bd8ffe          POP      {r1-r11,pc}
;;;8227   
                          ENDP

                  bat_hndl_zvu PROC
;;;8229   //-----------------------------------------------
;;;8230   void bat_hndl_zvu(void)
00573e  e92d4ff0          PUSH     {r4-r11,lr}
;;;8231   {
005742  b089              SUB      sp,sp,#0x24
;;;8232   char i;
;;;8233   short bat_hndl_i_temp;
;;;8234   const long bat_hndl_t_razr_const[7]={600L,1800L,3600L,10800L,18000L,36000L,72000L};
005744  f04f021c          MOV      r2,#0x1c
005748  4927              LDR      r1,|L1.22504|
00574a  4668              MOV      r0,sp
00574c  f7fffffe          BL       __aeabi_memcpy4
;;;8235   
;;;8236   //Ib_ips_termokompensat=-17000;
;;;8237    
;;;8238   if(bat_hndl_zvu_init==0)
005750  4c26              LDR      r4,|L1.22508|
;;;8239   	{
;;;8240   	//Инициализация при включении системы
;;;8241   	bat_hndl_zvu_Q=(long)lc640_read_int(EE_BAT1_ZAR_CNT);
;;;8242   	if((bat_hndl_zvu_Q>100L)||(bat_hndl_zvu_Q<0L)) bat_hndl_zvu_Q=100L;
005752  2564              MOVS     r5,#0x64
;;;8243   	bat_hndl_zvu_Q*=10000L;
;;;8244   
;;;8245   	bat_hndl_zvu_init=1;
;;;8246   	}
;;;8247   else 
;;;8248   	{
;;;8249   	if(Ib_ips_termokompensat<-IKB)
;;;8250   		{
;;;8251   		bat_hndl_i_vector=0;
;;;8252   		bat_hndl_i_zar_price=0L;
;;;8253   			
;;;8254   		bat_hndl_i=-Ib_ips_termokompensat;
;;;8255   		I_from_t_table[0]=BAT_C_POINT_1_6*6; //Ток при котором батарея разрядится за 1/6 часа (0.1А)
;;;8256   		I_from_t_table[1]=BAT_C_POINT_1_2*2; //Ток при котором батарея разрядится за 1/2 часа (0.1А)
;;;8257   		I_from_t_table[2]=BAT_C_POINT_1; //Ток при котором батарея разрядится за 1 час (0.1А)
;;;8258   		I_from_t_table[3]=BAT_C_POINT_3/3; //Ток при котором батарея разрядится за 3 часа (0.1А)
;;;8259   		I_from_t_table[4]=BAT_C_POINT_5/5; //Ток при котором батарея разрядится за 5 часов (0.1А)
;;;8260   		I_from_t_table[5]=BAT_C_POINT_10/10; //Ток при котором батарея разрядится за 10 часов (0.1А)
;;;8261   		I_from_t_table[6]=BAT_C_POINT_20/20; //Ток при котором батарея разрядится за 20 часов (0.1А)
;;;8262   		
;;;8263   		I_from_t_table[0]=(short)((((long)I_from_t_table[0])*((long)BAT_K_OLD))/100L);
;;;8264   		I_from_t_table[1]=(short)((((long)I_from_t_table[1])*((long)BAT_K_OLD))/100L);
;;;8265   		I_from_t_table[2]=(short)((((long)I_from_t_table[2])*((long)BAT_K_OLD))/100L);
;;;8266   		I_from_t_table[3]=(short)((((long)I_from_t_table[3])*((long)BAT_K_OLD))/100L);
;;;8267   		I_from_t_table[4]=(short)((((long)I_from_t_table[4])*((long)BAT_K_OLD))/100L);
;;;8268   		I_from_t_table[5]=(short)((((long)I_from_t_table[5])*((long)BAT_K_OLD))/100L);
;;;8269   		I_from_t_table[6]=(short)((((long)I_from_t_table[6])*((long)BAT_K_OLD))/100L);
;;;8270   
;;;8271   		bat_hndl_i_temp=bat_hndl_i/10;
;;;8272   		for(i=0;i<7;i++)
;;;8273   			{
;;;8274   			if(bat_hndl_i_temp>=I_from_t_table[i])
;;;8275   				{
;;;8276   				break;
;;;8277   				}
;;;8278   			}
;;;8279   		 if(i==0) bat_hndl_t_razr=bat_hndl_t_razr_const[0];
;;;8280   		 else if((i>=1)&&(i<7))
;;;8281   		 	{
;;;8282   			short i1,i2;
;;;8283   			i1=I_from_t_table[i-1]-bat_hndl_i_temp;
;;;8284   			i2=I_from_t_table[i-1]-I_from_t_table[i];
;;;8285   			bat_hndl_t_razr=bat_hndl_t_razr_const[i]-bat_hndl_t_razr_const[i-1];
;;;8286   			bat_hndl_t_razr*=(long)i1;
;;;8287   			bat_hndl_t_razr/=(long)i2;
;;;8288   			bat_hndl_t_razr+=bat_hndl_t_razr_const[i-1];
;;;8289   			}
;;;8290   		else if(i>=7)
;;;8291   			{
;;;8292   			bat_hndl_t_razr=bat_hndl_t_razr_const[6];
;;;8293   			}
;;;8294   		bat_hndl_proc_razr=1000000L/bat_hndl_t_razr;
005754  f8df8098          LDR      r8,|L1.22512|
005758  7a60              LDRB     r0,[r4,#9]            ;8238  ; bat_hndl_zvu_init
00575a  2700              MOVS     r7,#0                 ;8238
00575c  f04f0901          MOV      r9,#1                 ;8245
005760  f1040680          ADD      r6,r4,#0x80           ;8241
005764  2800              CMP      r0,#0                 ;8238
005766  d07e              BEQ      |L1.22630|
005768  4923              LDR      r1,|L1.22520|
00576a  4822              LDR      r0,|L1.22516|
00576c  f9b12000          LDRSH    r2,[r1,#0]            ;8249  ; IKB
005770  4631              MOV      r1,r6                 ;8241
005772  f9b00000          LDRSH    r0,[r0,#0]            ;8249  ; Ib_ips_termokompensat
005776  4253              RSBS     r3,r2,#0              ;8249
005778  6d49              LDR      r1,[r1,#0x54]         ;8241
00577a  4298              CMP      r0,r3                 ;8249
00577c  da74              BGE      |L1.22632|
00577e  72e7              STRB     r7,[r4,#0xb]          ;8251
005780  6137              STR      r7,[r6,#0x10]         ;8252  ; bat_hndl_i_zar_price
005782  f1c00000          RSB      r0,r0,#0              ;8254
005786  b200              SXTH     r0,r0                 ;8254
005788  80b0              STRH     r0,[r6,#4]            ;8254
00578a  9008              STR      r0,[sp,#0x20]         ;8254
00578c  481b              LDR      r0,|L1.22524|
00578e  4a1c              LDR      r2,|L1.22528|
005790  8800              LDRH     r0,[r0,#0]            ;8255  ; BAT_C_POINT_1_6
005792  eb000040          ADD      r0,r0,r0,LSL #1       ;8255
005796  ea4f0040          LSL      r0,r0,#1              ;8255
00579a  fa0ffb80          SXTH     r11,r0                ;8255
00579e  4819              LDR      r0,|L1.22532|
0057a0  8800              LDRH     r0,[r0,#0]            ;8256  ; BAT_C_POINT_1_2
0057a2  ea4f0040          LSL      r0,r0,#1              ;8256
0057a6  b203              SXTH     r3,r0                 ;8256
0057a8  4817              LDR      r0,|L1.22536|
0057aa  f9b0c000          LDRSH    r12,[r0,#0]           ;8257  ; BAT_C_POINT_1
0057ae  4817              LDR      r0,|L1.22540|
0057b0  e02e              B        |L1.22544|
0057b2  0000              DCW      0x0000
                  |L1.22452|
                          DCD      bat_u_old_cnt
                  |L1.22456|
                          DCD      0x40024020
                  |L1.22460|
                          DCD      ADR_EE_BAT_ZAR_CNT
                  |L1.22464|
                          DCD      BAT_C_REAL
                  |L1.22468|
                          DCD      BAT_C_NOM
                  |L1.22472|
                          DCD      0xffff7360
                  |L1.22476|
                          DCD      BAT_TYPE
                  |L1.22480|
                          DCD      lakb
                  |L1.22484|
                          DCD      t_ext
                  |L1.22488|
                          DCD      TBATSIGN
                  |L1.22492|
                          DCD      ND_EXT
                  |L1.22496|
                          DCD      TBATMAX
                  |L1.22500|
                          DCD      ADR_EE_BAT_RESURS
                  |L1.22504|
                          DCD      ||area_number.19||+0x20
                  |L1.22508|
                          DCD      ||area_number.25||
                  |L1.22512|
                          DCD      0x000f4240
                  |L1.22516|
                          DCD      Ib_ips_termokompensat
                  |L1.22520|
                          DCD      IKB
                  |L1.22524|
                          DCD      BAT_C_POINT_1_6
                  |L1.22528|
                          DCD      ||.bss||+0x44c
                  |L1.22532|
                          DCD      BAT_C_POINT_1_2
                  |L1.22536|
                          DCD      BAT_C_POINT_1
                  |L1.22540|
                          DCD      BAT_C_POINT_3
                  |L1.22544|
005810  f9b00000          LDRSH    r0,[r0,#0]            ;8258  ; BAT_C_POINT_3
005814  f04f0903          MOV      r9,#3                 ;8258
005818  fb90f0f9          SDIV     r0,r0,r9              ;8258
00581c  b200              SXTH     r0,r0                 ;8258
00581e  9007              STR      r0,[sp,#0x1c]         ;8258
005820  48ff              LDR      r0,|L1.23584|
005822  f04f0905          MOV      r9,#5                 ;8259
005826  f9b00000          LDRSH    r0,[r0,#0]            ;8259  ; BAT_C_POINT_5
00582a  fb90f0f9          SDIV     r0,r0,r9              ;8259
00582e  fa0ff980          SXTH     r9,r0                 ;8259
005832  48fc              LDR      r0,|L1.23588|
005834  f9b0a000          LDRSH    r10,[r0,#0]           ;8260  ; BAT_C_POINT_10
005838  f04f000a          MOV      r0,#0xa               ;8260
00583c  fb9af0f0          SDIV     r0,r10,r0             ;8260
005840  fa0ffe80          SXTH     lr,r0                 ;8260
005844  48f8              LDR      r0,|L1.23592|
005846  f04f0a14          MOV      r10,#0x14             ;8261
00584a  f9b00000          LDRSH    r0,[r0,#0]            ;8261  ; BAT_C_POINT_20
00584e  fb90f0fa          SDIV     r0,r0,r10             ;8261
005852  fa0ffa80          SXTH     r10,r0                ;8261
005856  48f5              LDR      r0,|L1.23596|
005858  f9b00000          LDRSH    r0,[r0,#0]            ;8263  ; BAT_K_OLD
00585c  fb0bfb00          MUL      r11,r11,r0            ;8263
005860  fb9bfbf5          SDIV     r11,r11,r5            ;8263
005864  e001              B        |L1.22634|
                  |L1.22630|
005866  e04e              B        |L1.22790|
                  |L1.22632|
005868  e082              B        |L1.22896|
                  |L1.22634|
00586a  f8a2b000          STRH     r11,[r2,#0]           ;8263
00586e  fb03f300          MUL      r3,r3,r0              ;8264
005872  fb93f3f5          SDIV     r3,r3,r5              ;8264
005876  8053              STRH     r3,[r2,#2]            ;8264
005878  fb0cfc00          MUL      r12,r12,r0            ;8265
00587c  fb9cf3f5          SDIV     r3,r12,r5             ;8265
005880  8093              STRH     r3,[r2,#4]            ;8265
005882  9b07              LDR      r3,[sp,#0x1c]         ;8266
005884  fb03f300          MUL      r3,r3,r0              ;8266
005888  fb93f3f5          SDIV     r3,r3,r5              ;8266
00588c  80d3              STRH     r3,[r2,#6]            ;8266
00588e  fb09f900          MUL      r9,r9,r0              ;8267
005892  fb99f3f5          SDIV     r3,r9,r5              ;8267
005896  8113              STRH     r3,[r2,#8]            ;8267
005898  fb0efe00          MUL      lr,lr,r0              ;8268
00589c  fb9ef3f5          SDIV     r3,lr,r5              ;8268
0058a0  8153              STRH     r3,[r2,#0xa]          ;8268
0058a2  fb0afa00          MUL      r10,r10,r0            ;8269
0058a6  fb9af0f5          SDIV     r0,r10,r5             ;8269
0058aa  8190              STRH     r0,[r2,#0xc]          ;8269
0058ac  9808              LDR      r0,[sp,#0x20]         ;8271
0058ae  f04f030a          MOV      r3,#0xa               ;8271
0058b2  fb90f0f3          SDIV     r0,r0,r3              ;8271
0058b6  b203              SXTH     r3,r0                 ;8271
0058b8  f04f0000          MOV      r0,#0                 ;8272
                  |L1.22716|
0058bc  f9325010          LDRSH    r5,[r2,r0,LSL #1]     ;8274
0058c0  429d              CMP      r5,r3                 ;8274
0058c2  dd04              BLE      |L1.22734|
0058c4  f1000001          ADD      r0,r0,#1              ;8272
0058c8  b2c0              UXTB     r0,r0                 ;8272
0058ca  2807              CMP      r0,#7                 ;8272
0058cc  d3f6              BCC      |L1.22716|
                  |L1.22734|
0058ce  b358              CBZ      r0,|L1.22824|
0058d0  1e45              SUBS     r5,r0,#1              ;8280
0058d2  2d06              CMP      r5,#6                 ;8280
0058d4  d22b              BCS      |L1.22830|
0058d6  f832c015          LDRH     r12,[r2,r5,LSL #1]    ;8283
0058da  ebac0303          SUB      r3,r12,r3             ;8283
0058de  b21b              SXTH     r3,r3                 ;8283
0058e0  f8322010          LDRH     r2,[r2,r0,LSL #1]     ;8284
0058e4  ebac0202          SUB      r2,r12,r2             ;8284
0058e8  fa0ffc82          SXTH     r12,r2                ;8284
0058ec  f85d9020          LDR      r9,[sp,r0,LSL #2]     ;8285
0058f0  f85d0025          LDR      r0,[sp,r5,LSL #2]     ;8285
0058f4  eba90200          SUB      r2,r9,r0              ;8285
0058f8  fb02f203          MUL      r2,r2,r3              ;8286
0058fc  fb92f2fc          SDIV     r2,r2,r12             ;8287
005900  4410              ADD      r0,r0,r2              ;8288
005902  64f0              STR      r0,[r6,#0x4c]         ;8288  ; bat_hndl_t_razr
005904  e017              B        |L1.22838|
                  |L1.22790|
005906  f44f70ef          MOV      r0,#0x1de             ;8241
00590a  f7fffffe          BL       lc640_read_int
00590e  6570              STR      r0,[r6,#0x54]         ;8241  ; bat_hndl_zvu_Q
005910  2865              CMP      r0,#0x65              ;8242
005912  d300              BCC      |L1.22806|
005914  6575              STR      r5,[r6,#0x54]         ;8242  ; bat_hndl_zvu_Q
                  |L1.22806|
005916  6d70              LDR      r0,[r6,#0x54]         ;8243  ; bat_hndl_zvu_Q
005918  f2427110          MOV      r1,#0x2710            ;8243
00591c  fb00f001          MUL      r0,r0,r1              ;8243
005920  6570              STR      r0,[r6,#0x54]         ;8243  ; bat_hndl_zvu_Q
005922  f8849009          STRB     r9,[r4,#9]            ;8245
005926  e066              B        |L1.23030|
                  |L1.22824|
005928  9800              LDR      r0,[sp,#0]            ;8279
00592a  64f0              STR      r0,[r6,#0x4c]         ;8279  ; bat_hndl_t_razr
00592c  e003              B        |L1.22838|
                  |L1.22830|
00592e  2807              CMP      r0,#7                 ;8290
005930  d301              BCC      |L1.22838|
005932  9806              LDR      r0,[sp,#0x18]         ;8292
005934  64f0              STR      r0,[r6,#0x4c]         ;8292  ; bat_hndl_t_razr
                  |L1.22838|
005936  6cf0              LDR      r0,[r6,#0x4c]  ; bat_hndl_t_razr
005938  fb98f0f0          SDIV     r0,r8,r0
00593c  65b0              STR      r0,[r6,#0x58]  ; bat_hndl_proc_razr
;;;8295   
;;;8296   		if(bat_hndl_zvu_Q>bat_hndl_proc_razr)bat_hndl_zvu_Q-=bat_hndl_proc_razr;
00593e  4281              CMP      r1,r0
005940  dd03              BLE      |L1.22858|
005942  eba10000          SUB      r0,r1,r0
005946  6570              STR      r0,[r6,#0x54]  ; bat_hndl_zvu_Q
005948  e000              B        |L1.22860|
                  |L1.22858|
;;;8297   		else bat_hndl_zvu_Q=0L;
00594a  6577              STR      r7,[r6,#0x54]  ; bat_hndl_zvu_Q
                  |L1.22860|
;;;8298   
;;;8299   		bat_hndl_t_razr_hour=(short)(bat_hndl_remain_time/3600L);
00594c  6df1              LDR      r1,[r6,#0x5c]  ; bat_hndl_remain_time
00594e  f44f6061          MOV      r0,#0xe10
005952  fb91f0f0          SDIV     r0,r1,r0
005956  80f0              STRH     r0,[r6,#6]
;;;8300   		bat_hndl_t_razr_min=(short)(bat_hndl_remain_time/60L);
005958  f04f003c          MOV      r0,#0x3c
00595c  fb91f1f0          SDIV     r1,r1,r0
005960  b209              SXTH     r1,r1
005962  8131              STRH     r1,[r6,#8]
;;;8301   		bat_hndl_t_razr_mininhour=bat_hndl_t_razr_min%60L;
005964  fb91f2f0          SDIV     r2,r1,r0
005968  fb001012          MLS      r0,r0,r2,r1
00596c  8170              STRH     r0,[r6,#0xa]
00596e  e016              B        |L1.22942|
                  |L1.22896|
;;;8302   
;;;8303   		}
;;;8304   	else if(Ib_ips_termokompensat>IKB)
005970  4290              CMP      r0,r2
005972  dd14              BLE      |L1.22942|
;;;8305   		{
;;;8306   		bat_hndl_i_vector=1;
005974  f884900b          STRB     r9,[r4,#0xb]
;;;8307   
;;;8308   		bat_hndl_i=Ib_ips_termokompensat;
005978  80b0              STRH     r0,[r6,#4]
;;;8309   		bat_hndl_i_summ+=(long)bat_hndl_i;
00597a  6e72              LDR      r2,[r6,#0x64]  ; bat_hndl_i_summ
00597c  4410              ADD      r0,r0,r2
00597e  6670              STR      r0,[r6,#0x64]  ; bat_hndl_i_summ
;;;8310   		if(bat_hndl_i_summ>=36000L)
005980  f64842a0          MOV      r2,#0x8ca0
005984  4290              CMP      r0,r2
005986  db0a              BLT      |L1.22942|
;;;8311   
;;;8312   		//bat_hndl_t_razr=BAT_C_POINT_20*36000L/bat_hndl_i;
;;;8313   		//bat_hndl_proc_razr=1000000L/bat_hndl_t_razr;
;;;8314   			{
;;;8315   			bat_hndl_i_summ-=36000L;
005988  eba00002          SUB      r0,r0,r2
00598c  6670              STR      r0,[r6,#0x64]  ; bat_hndl_i_summ
;;;8316   			if(bat_hndl_zvu_Q<1000000L)bat_hndl_zvu_Q+=bat_hndl_i_zar_price;
00598e  4541              CMP      r1,r8
005990  da03              BGE      |L1.22938|
005992  6930              LDR      r0,[r6,#0x10]  ; bat_hndl_i_zar_price
005994  4408              ADD      r0,r0,r1
005996  6570              STR      r0,[r6,#0x54]  ; bat_hndl_zvu_Q
005998  e001              B        |L1.22942|
                  |L1.22938|
;;;8317   			else bat_hndl_zvu_Q=1000000L; 
00599a  f8c68054          STR      r8,[r6,#0x54]  ; bat_hndl_zvu_Q
                  |L1.22942|
;;;8318   			}
;;;8319   		}
;;;8320   
;;;8321   
;;;8322   	if(bat_hndl_i_vector!=bat_hndl_i_vector_old)
00599e  7ae0              LDRB     r0,[r4,#0xb]  ; bat_hndl_i_vector
0059a0  7b21              LDRB     r1,[r4,#0xc]  ; bat_hndl_i_vector_old
0059a2  4288              CMP      r0,r1
0059a4  d00d              BEQ      |L1.22978|
;;;8323   		{
;;;8324   		if(bat_hndl_i_vector==1)
0059a6  2801              CMP      r0,#1
0059a8  d10b              BNE      |L1.22978|
;;;8325   			{
;;;8326   			signed short tempSS;
;;;8327   			tempSS=lc640_read_int(EE_AMPER_CHAS_CNT);
0059aa  f44f70e4          MOV      r0,#0x1c8
0059ae  f7fffffe          BL       lc640_read_int
0059b2  b200              SXTH     r0,r0
;;;8328   			bat_hndl_i_zar_price=(bat_hndl_zvu_Q-1000000L)/((long)tempSS);
0059b4  4a9e              LDR      r2,|L1.23600|
0059b6  6d71              LDR      r1,[r6,#0x54]  ; bat_hndl_zvu_Q
0059b8  4411              ADD      r1,r1,r2
0059ba  fb91f0f0          SDIV     r0,r1,r0
0059be  6130              STR      r0,[r6,#0x10]  ; bat_hndl_i_zar_price
;;;8329   			bat_hndl_i_summ=0;
0059c0  6677              STR      r7,[r6,#0x64]  ; bat_hndl_i_summ
                  |L1.22978|
;;;8330   			}
;;;8331   		}
;;;8332   	bat_hndl_i_vector_old=bat_hndl_i_vector;
0059c2  7ae0              LDRB     r0,[r4,#0xb]  ; bat_hndl_i_vector
0059c4  7320              STRB     r0,[r4,#0xc]
;;;8333   
;;;8334   	if((bat_hndl_zvu_Q/10000L)!=lc640_read_int(EE_BAT1_ZAR_CNT)) lc640_write_int(EE_BAT1_ZAR_CNT,bat_hndl_zvu_Q/10000L);
0059c6  6d70              LDR      r0,[r6,#0x54]  ; bat_hndl_zvu_Q
0059c8  f2427a10          MOV      r10,#0x2710
0059cc  fb90f5fa          SDIV     r5,r0,r10
0059d0  f44f79ef          MOV      r9,#0x1de
0059d4  4648              MOV      r0,r9
0059d6  f7fffffe          BL       lc640_read_int
0059da  4285              CMP      r5,r0
0059dc  d006              BEQ      |L1.23020|
0059de  6d70              LDR      r0,[r6,#0x54]  ; bat_hndl_zvu_Q
0059e0  fb90f0fa          SDIV     r0,r0,r10
0059e4  b201              SXTH     r1,r0
0059e6  4648              MOV      r0,r9
0059e8  f7fffffe          BL       lc640_write_int
                  |L1.23020|
;;;8335   	bat_hndl_remain_time=bat_hndl_zvu_Q/bat_hndl_proc_razr;
0059ec  e9d60115          LDRD     r0,r1,[r6,#0x54]
0059f0  fb90f0f1          SDIV     r0,r0,r1
0059f4  65f0              STR      r0,[r6,#0x5c]  ; bat_hndl_remain_time
                  |L1.23030|
;;;8336   	}
;;;8337   
;;;8338   if(bat_hndl_zvu_Q>1000000L)	bat_hndl_zvu_Q=1000000L;
0059f6  6d70              LDR      r0,[r6,#0x54]  ; bat_hndl_zvu_Q
0059f8  4540              CMP      r0,r8
0059fa  dd02              BLE      |L1.23042|
0059fc  f8c68054          STR      r8,[r6,#0x54]  ; bat_hndl_zvu_Q
005a00  e002              B        |L1.23048|
                  |L1.23042|
;;;8339   else if(bat_hndl_zvu_Q<0L)	bat_hndl_zvu_Q=0L;
005a02  2800              CMP      r0,#0
005a04  da00              BGE      |L1.23048|
005a06  6577              STR      r7,[r6,#0x54]  ; bat_hndl_zvu_Q
                  |L1.23048|
;;;8340   
;;;8341   if((Ib_ips_termokompensat/10<(2*IKB))&&(Ib_ips_termokompensat/10>(-2*IKB))&&(!(bat[0]._av&0x01))&& (out_U<=u_necc_up) && (out_U>u_necc_dn) && (main_kb_cnt>=10) && (main_kb_cnt<=200) /*(main_kb_cnt==((TBAT*60)-10))*//*&& ((TVENTMAX!=0))*/ )
005a08  488a              LDR      r0,|L1.23604|
005a0a  f9b01000          LDRSH    r1,[r0,#0]  ; Ib_ips_termokompensat
005a0e  200a              MOVS     r0,#0xa
005a10  fb91f0f0          SDIV     r0,r1,r0
005a14  4988              LDR      r1,|L1.23608|
005a16  f9b11000          LDRSH    r1,[r1,#0]  ; IKB
005a1a  ebb00f41          CMP      r0,r1,LSL #1
005a1e  da30              BGE      |L1.23170|
005a20  4249              RSBS     r1,r1,#0
005a22  ebb00f41          CMP      r0,r1,LSL #1
005a26  dd2c              BLE      |L1.23170|
005a28  4884              LDR      r0,|L1.23612|
005a2a  f890003d          LDRB     r0,[r0,#0x3d]  ; bat
005a2e  07c0              LSLS     r0,r0,#31
005a30  d127              BNE      |L1.23170|
005a32  4883              LDR      r0,|L1.23616|
005a34  4983              LDR      r1,|L1.23620|
005a36  f9b00000          LDRSH    r0,[r0,#0]  ; out_U
005a3a  f9b11000          LDRSH    r1,[r1,#0]  ; u_necc_up
005a3e  4288              CMP      r0,r1
005a40  dc1f              BGT      |L1.23170|
005a42  4981              LDR      r1,|L1.23624|
005a44  f9b11000          LDRSH    r1,[r1,#0]  ; u_necc_dn
005a48  4288              CMP      r0,r1
005a4a  dd1a              BLE      |L1.23170|
005a4c  f9b40052          LDRSH    r0,[r4,#0x52]  ; main_kb_cnt
005a50  280a              CMP      r0,#0xa
005a52  db16              BLT      |L1.23170|
005a54  28c8              CMP      r0,#0xc8
005a56  dc14              BGT      |L1.23170|
;;;8342   	{
;;;8343   	if(bat_hndl_zvu_Q_cnt<60)
005a58  f8940030          LDRB     r0,[r4,#0x30]  ; bat_hndl_zvu_Q_cnt
005a5c  283c              CMP      r0,#0x3c
005a5e  d20d              BCS      |L1.23164|
;;;8344   		{
;;;8345   		bat_hndl_zvu_Q_cnt++;
005a60  f1000001          ADD      r0,r0,#1
005a64  b2c0              UXTB     r0,r0
005a66  f8840030          STRB     r0,[r4,#0x30]
;;;8346   		if(bat_hndl_zvu_Q_cnt>=60)
005a6a  283c              CMP      r0,#0x3c
005a6c  d306              BCC      |L1.23164|
;;;8347   			{
;;;8348   			lc640_write_int(EE_BAT1_ZAR_CNT,100);
005a6e  2164              MOVS     r1,#0x64
005a70  f44f70ef          MOV      r0,#0x1de
005a74  f7fffffe          BL       lc640_write_int
;;;8349   			bat_hndl_zvu_Q=1000000L;
005a78  f8c68054          STR      r8,[r6,#0x54]  ; bat_hndl_zvu_Q
                  |L1.23164|
;;;8350   
;;;8351   
;;;8352   			}
;;;8353   		}
;;;8354   	}
;;;8355   else 
;;;8356   	{
;;;8357   	bat_hndl_zvu_Q_cnt=0;
;;;8358   	}
;;;8359   
;;;8360   
;;;8361   
;;;8362   };
005a7c  b009              ADD      sp,sp,#0x24
005a7e  e8bd8ff0          POP      {r4-r11,pc}
                  |L1.23170|
005a82  f8847030          STRB     r7,[r4,#0x30]         ;8357
005a86  e7f9              B        |L1.23164|
;;;8363   #endif
                          ENDP

                  u_avt_set_hndl PROC
;;;8367   //Установка напряжения автономной работы в полуавтоматическом режиме
;;;8368   void u_avt_set_hndl(void)
005a88  e92d5fff          PUSH     {r0-r12,lr}
;;;8369   {
;;;8370   if(uavt_set_stat==uassSTEP1)
005a8c  4d6f              LDR      r5,|L1.23628|
;;;8371   	{
;;;8372   	char i,find_succes;
;;;8373   
;;;8374   	//u_max_temp=U_AVT+10;//(short)((((long)U_AVT)*101U)/100U);
;;;8375   	//u_min_temp=U_AVT-10;//(short)((((long)U_AVT)*99U)/100U);
;;;8376   	if(uavt_set_stat_old!=uavt_set_stat)
;;;8377   		{
;;;8378   		uavt_set_error_cnt=60;
005a8e  4e70              LDR      r6,|L1.23632|
005a90  f8df81c0          LDR      r8,|L1.23636|
005a94  7828              LDRB     r0,[r5,#0]            ;8370  ; uavt_set_stat
;;;8379   		}
;;;8380   	//mess_send(MESS2UNECC_HNDL,PARAM_UNECC_SET,U_AVT,10);
;;;8381   	mess_send(MESS2CNTRL_HNDL,PARAM_CNTRL_STAT_FAST_REG,0,10);
;;;8382   	find_succes=0;
;;;8383   /*	for(i=0;i<NUMIST;i++)
;;;8384   		{
;;;8385   		if((bps[i]._Uii<u_max_temp)&&(bps[i]._Uii>u_min_temp))continue;
;;;8386   		else
;;;8387   			{
;;;8388   			find_succes=0;
;;;8389   			break;
;;;8390   			}
;;;8391   		}*/
;;;8392   	if((bps_U>=U_AVT-1)&&(bps_U<=U_AVT+1))find_succes=1;
005a96  f8dfa1c0          LDR      r10,|L1.23640|
005a9a  2400              MOVS     r4,#0                 ;8381
;;;8393   
;;;8394   	if(find_succes==1)
;;;8395   		{
;;;8396   		uavt_set_stat=uassSTEP2;
005a9c  f04f0902          MOV      r9,#2
;;;8397   		}
;;;8398   	if(uavt_set_error_cnt)
;;;8399   		{
;;;8400   		uavt_set_error_cnt--;
;;;8401   		if(!uavt_set_error_cnt)
;;;8402   			{
;;;8403   			uavt_set_stat=uassOFF;
;;;8404   			uavt_set_result_stat=uasrsERR;
;;;8405   			avt_error_bps=100;
005aa0  f04f0b64          MOV      r11,#0x64
005aa4  2801              CMP      r0,#1                 ;8370
005aa6  d12e              BNE      |L1.23302|
005aa8  f8980000          LDRB     r0,[r8,#0]            ;8376  ; uavt_set_stat_old
005aac  2801              CMP      r0,#1                 ;8376
005aae  d002              BEQ      |L1.23222|
005ab0  f04f003c          MOV      r0,#0x3c              ;8378
005ab4  7030              STRB     r0,[r6,#0]            ;8378
                  |L1.23222|
005ab6  230a              MOVS     r3,#0xa               ;8381
005ab8  2200              MOVS     r2,#0                 ;8381
005aba  21e6              MOVS     r1,#0xe6              ;8381
005abc  20e1              MOVS     r0,#0xe1              ;8381
005abe  f7fffffe          BL       mess_send
005ac2  f04f0000          MOV      r0,#0                 ;8382
005ac6  4965              LDR      r1,|L1.23644|
005ac8  f9b12000          LDRSH    r2,[r1,#0]            ;8392  ; bps_U
005acc  f9ba1000          LDRSH    r1,[r10,#0]           ;8392  ; U_AVT
005ad0  f1a10301          SUB      r3,r1,#1              ;8392
005ad4  429a              CMP      r2,r3                 ;8392
005ad6  db04              BLT      |L1.23266|
005ad8  1c49              ADDS     r1,r1,#1              ;8392
005ada  428a              CMP      r2,r1                 ;8392
005adc  dc01              BGT      |L1.23266|
005ade  f04f0001          MOV      r0,#1                 ;8392
                  |L1.23266|
005ae2  2801              CMP      r0,#1                 ;8394
005ae4  d101              BNE      |L1.23274|
005ae6  f8859000          STRB     r9,[r5,#0]            ;8396
                  |L1.23274|
005aea  7830              LDRB     r0,[r6,#0]            ;8398  ; uavt_set_error_cnt
005aec  b158              CBZ      r0,|L1.23302|
005aee  f1a00001          SUB      r0,r0,#1              ;8400
005af2  b2c0              UXTB     r0,r0                 ;8400
005af4  7030              STRB     r0,[r6,#0]            ;8400
005af6  b930              CBNZ     r0,|L1.23302|
005af8  702c              STRB     r4,[r5,#0]            ;8403
005afa  4859              LDR      r0,|L1.23648|
005afc  f8809000          STRB     r9,[r0,#0]            ;8404
005b00  4858              LDR      r0,|L1.23652|
005b02  f880b000          STRB     r11,[r0,#0]
                  |L1.23302|
;;;8406   			}
;;;8407   		}
;;;8408   	}
;;;8409   if(uavt_set_stat==uassSTEP2)
005b06  782a              LDRB     r2,[r5,#0]  ; uavt_set_stat
;;;8410   	{
;;;8411   	char i,find_succes;
;;;8412   
;;;8413   	u_max_temp=(short)((((long)U_AVT)*101U)/100U);
005b08  4957              LDR      r1,|L1.23656|
;;;8414   	u_min_temp=(short)((((long)U_AVT)*99U)/100U);
005b0a  4858              LDR      r0,|L1.23660|
;;;8415   
;;;8416   	if(uavt_set_stat_old!=uavt_set_stat)
;;;8417   		{
;;;8418   		uavt_set_error_cnt=60;
;;;8419   		}
;;;8420   
;;;8421   	mess_send(MESS2UNECC_HNDL,PARAM_UNECC_SET,U_AVT,10);
;;;8422   	mess_send(MESS2CNTRL_HNDL,PARAM_CNTRL_STAT_FAST_REG,0,10);
;;;8423   	find_succes=1;
;;;8424   
;;;8425   	for(i=0;i<NUMIST;i++)
;;;8426   		{
;;;8427   		if((bps[i]._Uii<u_max_temp)&&(bps[i]._Uii>u_min_temp))continue;
;;;8428   		else
;;;8429   			{
;;;8430   			find_succes=0;
;;;8431   			avt_error_bps=i+1;
;;;8432   			break;
;;;8433   			}
;;;8434   		}
;;;8435   
;;;8436   	if(find_succes==1)
;;;8437   		{
;;;8438   		uavt_set_stat=uassSTEP3;
;;;8439   		uavt_bps_pntr=0;
005b0c  4f58              LDR      r7,|L1.23664|
005b0e  2a02              CMP      r2,#2                 ;8409
005b10  d002              BEQ      |L1.23320|
;;;8440   		avt_plazma=0;
;;;8441   		}
;;;8442   
;;;8443   	if(uavt_set_error_cnt)
;;;8444   		{
;;;8445   		uavt_set_error_cnt--;
;;;8446   		if(!uavt_set_error_cnt)
;;;8447   			{
;;;8448   			uavt_set_stat=uassOFF;
;;;8449   			uavt_set_result_stat=uasrsERR;
;;;8450   			}
;;;8451   		}
;;;8452   	}
;;;8453   else if(uavt_set_stat==uassSTEP3)
005b12  2a03              CMP      r2,#3
005b14  d05e              BEQ      |L1.23508|
005b16  e0fb              B        |L1.23824|
                  |L1.23320|
005b18  f9ba2000          LDRSH    r2,[r10,#0]           ;8413  ; U_AVT
005b1c  f04f0365          MOV      r3,#0x65              ;8413
005b20  fb02f303          MUL      r3,r2,r3              ;8413
005b24  fbb3f3fb          UDIV     r3,r3,r11             ;8413
005b28  468a              MOV      r10,r1                ;8413
005b2a  800b              STRH     r3,[r1,#0]            ;8413
005b2c  eb021142          ADD      r1,r2,r2,LSL #5       ;8414
005b30  eb010141          ADD      r1,r1,r1,LSL #1       ;8414
005b34  fbb1f1fb          UDIV     r1,r1,r11             ;8414
005b38  4683              MOV      r11,r0                ;8414
005b3a  8001              STRH     r1,[r0,#0]            ;8414
005b3c  f8980000          LDRB     r0,[r8,#0]            ;8416  ; uavt_set_stat_old
005b40  2802              CMP      r0,#2                 ;8416
005b42  d002              BEQ      |L1.23370|
005b44  f04f003c          MOV      r0,#0x3c              ;8418
005b48  7030              STRB     r0,[r6,#0]            ;8418
                  |L1.23370|
005b4a  230a              MOVS     r3,#0xa               ;8421
005b4c  21bf              MOVS     r1,#0xbf              ;8421
005b4e  20be              MOVS     r0,#0xbe              ;8421
005b50  f7fffffe          BL       mess_send
005b54  230a              MOVS     r3,#0xa               ;8422
005b56  2200              MOVS     r2,#0                 ;8422
005b58  21e6              MOVS     r1,#0xe6              ;8422
005b5a  20e1              MOVS     r0,#0xe1              ;8422
005b5c  f7fffffe          BL       mess_send
005b60  f04f0201          MOV      r2,#1                 ;8423
005b64  f04f0000          MOV      r0,#0                 ;8425
005b68  4943              LDR      r1,|L1.23672|
005b6a  f9ba3000          LDRSH    r3,[r10,#0]           ;8425
005b6e  f8dfe104          LDR      lr,|L1.23668|
005b72  f9bbc000          LDRSH    r12,[r11,#0]          ;8427
005b76  f9b1a000          LDRSH    r10,[r1,#0]           ;8425
005b7a  e00d              B        |L1.23448|
                  |L1.23420|
005b7c  eb0001c0          ADD      r1,r0,r0,LSL #3       ;8427
005b80  eb011100          ADD      r1,r1,r0,LSL #4       ;8427
005b84  eb0e0181          ADD      r1,lr,r1,LSL #2       ;8427
005b88  69c9              LDR      r1,[r1,#0x1c]         ;8427
005b8a  4299              CMP      r1,r3                 ;8427
005b8c  da09              BGE      |L1.23458|
005b8e  4561              CMP      r1,r12                ;8427
005b90  dd07              BLE      |L1.23458|
005b92  f1000001          ADD      r0,r0,#1              ;8425
005b96  b2c0              UXTB     r0,r0                 ;8425
                  |L1.23448|
005b98  4550              CMP      r0,r10                ;8425
005b9a  dbef              BLT      |L1.23420|
                  |L1.23452|
005b9c  2a01              CMP      r2,#1                 ;8436
005b9e  d007              BEQ      |L1.23472|
005ba0  e00c              B        |L1.23484|
                  |L1.23458|
005ba2  f04f0200          MOV      r2,#0                 ;8430
005ba6  492f              LDR      r1,|L1.23652|
005ba8  f1000001          ADD      r0,r0,#1              ;8431
005bac  7008              STRB     r0,[r1,#0]            ;8431
005bae  e7f5              B        |L1.23452|
                  |L1.23472|
005bb0  f04f0003          MOV      r0,#3                 ;8438
005bb4  7028              STRB     r0,[r5,#0]            ;8438
005bb6  703c              STRB     r4,[r7,#0]            ;8439
005bb8  4830              LDR      r0,|L1.23676|
005bba  7004              STRB     r4,[r0,#0]            ;8440
                  |L1.23484|
005bbc  7830              LDRB     r0,[r6,#0]            ;8443  ; uavt_set_error_cnt
005bbe  b370              CBZ      r0,|L1.23582|
005bc0  f1a00001          SUB      r0,r0,#1              ;8445
005bc4  b2c0              UXTB     r0,r0                 ;8445
005bc6  7030              STRB     r0,[r6,#0]            ;8445
005bc8  bb48              CBNZ     r0,|L1.23582|
005bca  702c              STRB     r4,[r5,#0]            ;8448
005bcc  4824              LDR      r0,|L1.23648|
005bce  f8809000          STRB     r9,[r0,#0]            ;8449
005bd2  e09d              B        |L1.23824|
                  |L1.23508|
;;;8454   	{
;;;8455   	char i,find_succes;
;;;8456   
;;;8457   	u_max_temp=(short)((((long)U_AVT)*101U)/100U);
005bd4  f9ba2000          LDRSH    r2,[r10,#0]  ; U_AVT
005bd8  f04f0365          MOV      r3,#0x65
005bdc  fb02f303          MUL      r3,r2,r3
005be0  fbb3f3fb          UDIV     r3,r3,r11
005be4  468a              MOV      r10,r1
005be6  800b              STRH     r3,[r1,#0]
;;;8458   	u_min_temp=(short)((((long)U_AVT)*99U)/100U);
005be8  eb021142          ADD      r1,r2,r2,LSL #5
005bec  eb010141          ADD      r1,r1,r1,LSL #1
005bf0  fbb1f1fb          UDIV     r1,r1,r11
005bf4  4683              MOV      r11,r0
005bf6  8001              STRH     r1,[r0,#0]
;;;8459   	
;;;8460   	if(uavt_set_stat_old!=uavt_set_stat)
005bf8  f8980000          LDRB     r0,[r8,#0]  ; uavt_set_stat_old
005bfc  2803              CMP      r0,#3
005bfe  d000              BEQ      |L1.23554|
;;;8461   		{
;;;8462   		uavt_bps_pntr=0;
005c00  703c              STRB     r4,[r7,#0]
                  |L1.23554|
;;;8463   		}
;;;8464   
;;;8465   	mess_send(MESS2UNECC_HNDL,PARAM_UNECC_SET,U_AVT,10);
005c02  230a              MOVS     r3,#0xa
005c04  21bf              MOVS     r1,#0xbf
005c06  20be              MOVS     r0,#0xbe
005c08  f7fffffe          BL       mess_send
;;;8466   	mess_send(MESS2CNTRL_HNDL,PARAM_CNTRL_STAT_FAST_REG,0,10);
005c0c  230a              MOVS     r3,#0xa
005c0e  2200              MOVS     r2,#0
005c10  21e6              MOVS     r1,#0xe6
005c12  20e1              MOVS     r0,#0xe1
005c14  f7fffffe          BL       mess_send
;;;8467   
;;;8468   	find_succes=1;
005c18  f04f0601          MOV      r6,#1
;;;8469   	for(i=0;i<NUMIST;i++)
005c1c  e030              B        |L1.23680|
                  |L1.23582|
005c1e  e077              B        |L1.23824|
                  |L1.23584|
                          DCD      BAT_C_POINT_5
                  |L1.23588|
                          DCD      BAT_C_POINT_10
                  |L1.23592|
                          DCD      BAT_C_POINT_20
                  |L1.23596|
                          DCD      BAT_K_OLD
                  |L1.23600|
                          DCD      0xfff0bdc0
                  |L1.23604|
                          DCD      Ib_ips_termokompensat
                  |L1.23608|
                          DCD      IKB
                  |L1.23612|
                          DCD      bat
                  |L1.23616|
                          DCD      out_U
                  |L1.23620|
                          DCD      u_necc_up
                  |L1.23624|
                          DCD      u_necc_dn
                  |L1.23628|
                          DCD      uavt_set_stat
                  |L1.23632|
                          DCD      uavt_set_error_cnt
                  |L1.23636|
                          DCD      uavt_set_stat_old
                  |L1.23640|
                          DCD      U_AVT
                  |L1.23644|
                          DCD      bps_U
                  |L1.23648|
                          DCD      uavt_set_result_stat
                  |L1.23652|
                          DCD      avt_error_bps
                  |L1.23656|
                          DCD      u_max_temp
                  |L1.23660|
                          DCD      u_min_temp
                  |L1.23664|
                          DCD      uavt_bps_pntr
                  |L1.23668|
                          DCD      bps
                  |L1.23672|
                          DCD      NUMIST
                  |L1.23676|
                          DCD      avt_plazma
                  |L1.23680|
005c80  f04f0000          MOV      r0,#0
005c84  f8df942c          LDR      r9,|L1.24756|
005c88  f9ba2000          LDRSH    r2,[r10,#0]
005c8c  f8dfc420          LDR      r12,|L1.24752|
005c90  f9bb3000          LDRSH    r3,[r11,#0]           ;8427
005c94  f9b9a000          LDRSH    r10,[r9,#0]           ;8425
005c98  e00d              B        |L1.23734|
                  |L1.23706|
;;;8470   		{
;;;8471   		if((bps[i]._Uii<u_max_temp)&&(bps[i]._Uii>u_min_temp))continue;
005c9a  eb0001c0          ADD      r1,r0,r0,LSL #3
005c9e  eb011100          ADD      r1,r1,r0,LSL #4
005ca2  eb0c0181          ADD      r1,r12,r1,LSL #2
005ca6  69c9              LDR      r1,[r1,#0x1c]
005ca8  4291              CMP      r1,r2
005caa  da0f              BGE      |L1.23756|
005cac  4299              CMP      r1,r3
005cae  dd0d              BLE      |L1.23756|
005cb0  f1000001          ADD      r0,r0,#1              ;8469
005cb4  b2c0              UXTB     r0,r0                 ;8469
                  |L1.23734|
005cb6  4550              CMP      r0,r10                ;8469
005cb8  dbef              BLT      |L1.23706|
                  |L1.23738|
;;;8472   		else
;;;8473   			{
;;;8474   			find_succes=0;
;;;8475   			break;
;;;8476   			}
;;;8477   		}
;;;8478   
;;;8479   	if(mess_find( (MESS2IND_HNDL)) && (mess_data[0]==PARAM_U_AVT_GOOD) )
005cba  20d7              MOVS     r0,#0xd7
005cbc  f7fffffe          BL       mess_find
005cc0  b1a0              CBZ      r0,|L1.23788|
005cc2  48fd              LDR      r0,|L1.24760|
005cc4  6800              LDR      r0,[r0,#0]  ; mess_data
005cc6  28d9              CMP      r0,#0xd9
005cc8  d003              BEQ      |L1.23762|
005cca  e00f              B        |L1.23788|
                  |L1.23756|
005ccc  f04f0600          MOV      r6,#0                 ;8474
005cd0  e7f3              B        |L1.23738|
                  |L1.23762|
;;;8480   		{
;;;8481   		if(++uavt_bps_pntr>=NUMIST)
005cd2  7838              LDRB     r0,[r7,#0]  ; uavt_bps_pntr
005cd4  1c40              ADDS     r0,r0,#1
005cd6  b2c0              UXTB     r0,r0
005cd8  7038              STRB     r0,[r7,#0]
005cda  f9b91000          LDRSH    r1,[r9,#0]  ; NUMIST
005cde  4288              CMP      r0,r1
005ce0  db04              BLT      |L1.23788|
;;;8482   			{
;;;8483   			uavt_set_stat=uassOFF;
005ce2  702c              STRB     r4,[r5,#0]
;;;8484   			uavt_set_result_stat=uasrsSUCCESS;
005ce4  49f5              LDR      r1,|L1.24764|
005ce6  f04f0003          MOV      r0,#3
005cea  7008              STRB     r0,[r1,#0]
                  |L1.23788|
;;;8485   			}
;;;8486   		//uavt_bps_pntr++;
;;;8487   		//if()
;;;8488   		}
;;;8489   	if(find_succes==1)
005cec  2e01              CMP      r6,#1
005cee  d10f              BNE      |L1.23824|
;;;8490   		{
;;;8491   		mcp2515_transmit(uavt_bps_pntr,uavt_bps_pntr,CMND,0xee,0xee,0,0,0);
005cf0  20ee              MOVS     r0,#0xee
005cf2  e9cd0400          STRD     r0,r4,[sp,#0]
005cf6  9402              STR      r4,[sp,#8]
005cf8  9403              STR      r4,[sp,#0xc]
005cfa  7839              LDRB     r1,[r7,#0]  ; uavt_bps_pntr
005cfc  4603              MOV      r3,r0
005cfe  2216              MOVS     r2,#0x16
005d00  4608              MOV      r0,r1
005d02  f7fffffe          BL       mcp2515_transmit
;;;8492   		avt_plazma++;
005d06  48ee              LDR      r0,|L1.24768|
005d08  7801              LDRB     r1,[r0,#0]  ; avt_plazma
005d0a  f1010101          ADD      r1,r1,#1
005d0e  7001              STRB     r1,[r0,#0]
                  |L1.23824|
;;;8493   		}
;;;8494   	}
;;;8495   
;;;8496   
;;;8497   
;;;8498   uavt_set_stat_old=uavt_set_stat;
005d10  7828              LDRB     r0,[r5,#0]  ; uavt_set_stat
005d12  f8880000          STRB     r0,[r8,#0]
;;;8499   
;;;8500   }
005d16  e8bd9fff          POP      {r0-r12,pc}
;;;8501   
                          ENDP

                  u_necc_hndl PROC
;;;8576   //-----------------------------------------------
;;;8577   void u_necc_hndl(void)
005d1a  b5f8              PUSH     {r3-r7,lr}
;;;8578   {
;;;8579   signed long temp_L;
;;;8580   signed long temp_SL;
;;;8581   //signed short temp_SS;
;;;8582   
;;;8583   //char i;
;;;8584   
;;;8585   //temp_SS=0;
;;;8586   signed short t[2];
;;;8587   
;;;8588   
;;;8589   
;;;8590   
;;;8591   #ifdef UKU_220_IPS_TERMOKOMPENSAT
;;;8592   
;;;8593   if(!TERMOKOMPENS)
005d1c  48e9              LDR      r0,|L1.24772|
;;;8594   	{
;;;8595   	//u_necc=U0B;
;;;8596   	u_necc=UB20;
;;;8597   	}
;;;8598   else
;;;8599   	{
;;;8600   	if(ND_EXT[0])t[0]=20;
;;;8601   	else t[0]=t_ext[0];
;;;8602   
;;;8603   	mat_temper=t[0];
;;;8604   			
;;;8605   	if(mat_temper<0)temp_SL=UB0; 
;;;8606   	else 
;;;8607   		{
;;;8608   		if(mat_temper>40)mat_temper=40; 
;;;8609   		temp_SL=(UB20-UB0)*10;
;;;8610   		temp_SL*=mat_temper;
;;;8611   		temp_SL/=200;
;;;8612   		temp_SL+=UB0;
;;;8613   		}
;;;8614   	if((spc_stat==spcVZ)&&((sk_stat[0]==1)||(VZ_CH_VENT_BLOK==0)))
005d1e  4dec              LDR      r5,|L1.24784|
005d20  4cec              LDR      r4,|L1.24788|
005d22  8801              LDRH     r1,[r0,#0]            ;8593  ; TERMOKOMPENS
005d24  48e8              LDR      r0,|L1.24776|
005d26  f9b03000          LDRSH    r3,[r0,#0]            ;8596
;;;8615   		{
;;;8616   		temp_SL=UVZ;
005d2a  48e8              LDR      r0,|L1.24780|
005d2c  f9b02000          LDRSH    r2,[r0,#0]
005d30  b139              CBZ      r1,|L1.23874|
005d32  48e9              LDR      r0,|L1.24792|
005d34  7800              LDRB     r0,[r0,#0]            ;8600  ; ND_EXT
005d36  b130              CBZ      r0,|L1.23878|
005d38  f04f0014          MOV      r0,#0x14              ;8600
005d3c  f8ad0000          STRH     r0,[sp,#0]            ;8600
005d40  e005              B        |L1.23886|
                  |L1.23874|
005d42  8023              STRH     r3,[r4,#0]            ;8596
005d44  e02c              B        |L1.23968|
                  |L1.23878|
005d46  48e5              LDR      r0,|L1.24796|
005d48  8800              LDRH     r0,[r0,#0]            ;8601  ; t_ext
005d4a  f8ad0000          STRH     r0,[sp,#0]            ;8601
                  |L1.23886|
005d4e  4ee4              LDR      r6,|L1.24800|
005d50  f9bd1000          LDRSH    r1,[sp,#0]            ;8603
005d54  6031              STR      r1,[r6,#0]            ;8603  ; mat_temper
005d56  48e3              LDR      r0,|L1.24804|
005d58  2900              CMP      r1,#0                 ;8605
005d5a  f9b00000          LDRSH    r0,[r0,#0]            ;8605
005d5e  db12              BLT      |L1.23942|
005d60  2928              CMP      r1,#0x28              ;8608
005d62  dd02              BLE      |L1.23914|
005d64  f04f0128          MOV      r1,#0x28              ;8608
005d68  6031              STR      r1,[r6,#0]            ;8608  ; mat_temper
                  |L1.23914|
005d6a  eba30100          SUB      r1,r3,r0              ;8609
005d6e  eb010181          ADD      r1,r1,r1,LSL #2       ;8609
005d72  ea4f0141          LSL      r1,r1,#1              ;8609
005d76  6833              LDR      r3,[r6,#0]            ;8610  ; mat_temper
005d78  fb01f103          MUL      r1,r1,r3              ;8610
005d7c  f04f03c8          MOV      r3,#0xc8              ;8611
005d80  fb91f1f3          SDIV     r1,r1,r3              ;8611
005d84  4408              ADD      r0,r0,r1              ;8612
                  |L1.23942|
005d86  f8951023          LDRB     r1,[r5,#0x23]         ;8614  ; spc_stat
005d8a  2902              CMP      r1,#2                 ;8614
005d8c  d107              BNE      |L1.23966|
005d8e  49d6              LDR      r1,|L1.24808|
005d90  7809              LDRB     r1,[r1,#0]            ;8614  ; sk_stat
005d92  2901              CMP      r1,#1                 ;8614
005d94  d002              BEQ      |L1.23964|
005d96  49d5              LDR      r1,|L1.24812|
005d98  8809              LDRH     r1,[r1,#0]            ;8614  ; VZ_CH_VENT_BLOK
005d9a  b901              CBNZ     r1,|L1.23966|
                  |L1.23964|
005d9c  4610              MOV      r0,r2
                  |L1.23966|
;;;8617   		}
;;;8618   	u_necc=(unsigned int)temp_SL;
005d9e  8020              STRH     r0,[r4,#0]
                  |L1.23968|
;;;8619   	///u_necc=3456;
;;;8620   	}  
;;;8621   
;;;8622   //u_necc=2355;
;;;8623   
;;;8624   if((speedChIsOn)||(sp_ch_stat==scsWRK))
005da0  48d3              LDR      r0,|L1.24816|
005da2  8800              LDRH     r0,[r0,#0]  ; speedChIsOn
005da4  b918              CBNZ     r0,|L1.23982|
005da6  48d3              LDR      r0,|L1.24820|
005da8  7800              LDRB     r0,[r0,#0]  ; sp_ch_stat
005daa  2802              CMP      r0,#2
005dac  d102              BNE      |L1.23988|
                  |L1.23982|
;;;8625   	{
;;;8626   	u_necc=speedChrgVolt;
005dae  48d2              LDR      r0,|L1.24824|
005db0  8800              LDRH     r0,[r0,#0]  ; speedChrgVolt
005db2  8020              STRH     r0,[r4,#0]
                  |L1.23988|
;;;8627   	}
;;;8628   if(hv_vz_stat==hvsWRK)
005db4  48d1              LDR      r0,|L1.24828|
005db6  7800              LDRB     r0,[r0,#0]  ; hv_vz_stat
005db8  2805              CMP      r0,#5
005dba  d100              BNE      |L1.23998|
;;;8629   	{
;;;8630   	u_necc=UVZ;
005dbc  8022              STRH     r2,[r4,#0]
                  |L1.23998|
;;;8631   	}
;;;8632   if(vz1_stat==vz1sWRK)
005dbe  7968              LDRB     r0,[r5,#5]  ; vz1_stat
005dc0  280a              CMP      r0,#0xa
005dc2  d102              BNE      |L1.24010|
;;;8633   	{
;;;8634   	u_necc=UZ_U;
005dc4  48ce              LDR      r0,|L1.24832|
005dc6  8800              LDRH     r0,[r0,#0]  ; UZ_U
005dc8  8020              STRH     r0,[r4,#0]
                  |L1.24010|
;;;8635   	}
;;;8636   if(vz2_stat==vz2sWRK1)
005dca  79e8              LDRB     r0,[r5,#7]  ; vz2_stat
005dcc  280a              CMP      r0,#0xa
005dce  d102              BNE      |L1.24022|
;;;8637   	{
;;;8638   	u_necc=FZ_U1;
005dd0  49cc              LDR      r1,|L1.24836|
005dd2  8809              LDRH     r1,[r1,#0]  ; FZ_U1
005dd4  8021              STRH     r1,[r4,#0]
                  |L1.24022|
;;;8639   	}
;;;8640   if(vz2_stat==vz2sWRK2)
005dd6  280b              CMP      r0,#0xb
005dd8  d102              BNE      |L1.24032|
;;;8641   	{
;;;8642   	u_necc=FZ_U2;
005dda  48cb              LDR      r0,|L1.24840|
005ddc  8800              LDRH     r0,[r0,#0]  ; FZ_U2
005dde  8020              STRH     r0,[r4,#0]
                  |L1.24032|
;;;8643   	}
;;;8644   
;;;8645   if((uavt_set_stat==uassSTEP1)||(uavt_set_stat==uassSTEP2))
005de0  48ca              LDR      r0,|L1.24844|
005de2  7800              LDRB     r0,[r0,#0]  ; uavt_set_stat
005de4  2801              CMP      r0,#1
005de6  d001              BEQ      |L1.24044|
005de8  2802              CMP      r0,#2
005dea  d102              BNE      |L1.24050|
                  |L1.24044|
;;;8646   	{
;;;8647   	u_necc=U_AVT;
005dec  48c8              LDR      r0,|L1.24848|
005dee  8800              LDRH     r0,[r0,#0]  ; U_AVT
005df0  8020              STRH     r0,[r4,#0]
                  |L1.24050|
;;;8648   	}
;;;8649   
;;;8650   if(mess_find_unvol(MESS2UNECC_HNDL))
005df2  20be              MOVS     r0,#0xbe
005df4  f7fffffe          BL       mess_find_unvol
005df8  b128              CBZ      r0,|L1.24070|
;;;8651   	{		
;;;8652   	if(mess_data[0]==PARAM_UNECC_SET)
005dfa  48af              LDR      r0,|L1.24760|
005dfc  6801              LDR      r1,[r0,#0]  ; mess_data
005dfe  29bf              CMP      r1,#0xbf
005e00  d101              BNE      |L1.24070|
;;;8653   		{
;;;8654   		u_necc=mess_data[1];
005e02  6840              LDR      r0,[r0,#4]  ; mess_data
005e04  8020              STRH     r0,[r4,#0]
                  |L1.24070|
;;;8655   		}		
;;;8656   	} 
;;;8657   
;;;8658   //if(ICA_EN)u_necc+=ica_u_necc;
;;;8659   #endif
;;;8660   
;;;8661   
;;;8662   #ifndef UKU_220_IPS_TERMOKOMPENSAT
;;;8663   
;;;8664   #ifndef UKU_TELECORE2015
;;;8665   #ifndef UKU_TELECORE2017
;;;8666   if(unh_cnt0<10)
;;;8667   	{
;;;8668   	unh_cnt0++;
;;;8669   	if(unh_cnt0>=10)
;;;8670   		{
;;;8671   		unh_cnt0=0;
;;;8672   		b1Hz_unh=1;
;;;8673   		}
;;;8674   	}
;;;8675   
;;;8676   if(unh_cnt1<5)
;;;8677   	{
;;;8678   	unh_cnt1++;
;;;8679   	if(unh_cnt1==5)
;;;8680   		{
;;;8681   		unh_cnt1=0;
;;;8682   //		b2Hz_unh=1;
;;;8683   		}
;;;8684   	} 
;;;8685   
;;;8686   
;;;8687   
;;;8688   if(mess_find_unvol(MESS2UNECC_HNDL))
;;;8689   	{		
;;;8690   	if(mess_data[0]==PARAM_UNECC_SET)
;;;8691   		{
;;;8692   		u_necc=mess_data[1];
;;;8693   		}		
;;;8694   	}
;;;8695   
;;;8696   
;;;8697   else if(b1Hz_unh)
;;;8698   	{
;;;8699   	
;;;8700   	if((BAT_IS_ON[0]!=bisON) && (BAT_IS_ON[1]!=bisON))
;;;8701   		{
;;;8702   		
;;;8703   		u_necc=U0B;
;;;8704   		#ifdef IPS_SGEP_GAZPROM
;;;8705   		u_necc=UB0;
;;;8706   		#endif
;;;8707   		}
;;;8708   	else 
;;;8709   		{
;;;8710   		if(BAT_TYPE==0) //если батарея обычная
;;;8711   			{
;;;8712   			for(i=0;i<2;i++)
;;;8713   				{
;;;8714   				if(BAT_IS_ON[i]==bisON)
;;;8715   					{
;;;8716   					if(bat[i]._nd)t[i]=20;
;;;8717   					else t[i]=bat[i]._Tb;
;;;8718   					}
;;;8719   				else
;;;8720   					{
;;;8721   					t[i]=-20;
;;;8722   					}
;;;8723   				}
;;;8724   			if(t[0]>t[1])mat_temper=t[0];
;;;8725   			else mat_temper=t[1];
;;;8726   			
;;;8727   		
;;;8728   			if(mat_temper<0)temp_SL=UB0; 
;;;8729   			else 
;;;8730   				{
;;;8731   				if(mat_temper>40)mat_temper=40; 
;;;8732   				temp_SL=(UB20-UB0)*10;
;;;8733   				temp_SL*=mat_temper;
;;;8734   				temp_SL/=200;
;;;8735   				temp_SL+=UB0;
;;;8736   				}
;;;8737   			if((spc_stat==spcVZ)&&(sk_stat[0]==1))
;;;8738   				{
;;;8739   				temp_SL=UVZ;
;;;8740   				}
;;;8741   			u_necc=(unsigned int)temp_SL;
;;;8742   			}
;;;8743   		else if(BAT_TYPE==1) //если батарея китайская
;;;8744   			{
;;;8745   			u_necc=U0B;
;;;8746   					
;;;8747   			u_necc=bat[0]._Ub+10;
;;;8748   
;;;8749   			
;;;8750   			if((spc_stat==spcVZ)&&(sk_stat[0]==1))
;;;8751   				{
;;;8752   				u_necc=UVZ;
;;;8753   				}
;;;8754   			if(u_necc>=UB0) u_necc=UB0;
;;;8755   			if(u_necc>=UB20) u_necc=UB20;
;;;8756   			}
;;;8757   		}  
;;;8758   	}
;;;8759   #endif
;;;8760   #endif
;;;8761   
;;;8762   #ifdef UKU_TELECORE2015
;;;8763   
;;;8764   if(unh_cnt0<10)
;;;8765   	{
;;;8766   	unh_cnt0++;
;;;8767   	if(unh_cnt0>=10)
;;;8768   		{
;;;8769   		unh_cnt0=0;
;;;8770   		b1Hz_unh=1;
;;;8771   		}
;;;8772   	}
;;;8773   
;;;8774   if(unh_cnt1<5)
;;;8775   	{
;;;8776   	unh_cnt1++;
;;;8777   	if(unh_cnt1==5)
;;;8778   		{
;;;8779   		unh_cnt1=0;
;;;8780   //		b2Hz_unh=1;
;;;8781   		}
;;;8782   	} 
;;;8783   
;;;8784   
;;;8785   
;;;8786   if(mess_find_unvol(MESS2UNECC_HNDL))
;;;8787   	{		
;;;8788   	if(mess_data[0]==PARAM_UNECC_SET)
;;;8789   		{
;;;8790   		u_necc=mess_data[1];
;;;8791   		}		
;;;8792   	}
;;;8793   
;;;8794   
;;;8795   else if(b1Hz_unh)
;;;8796   	{
;;;8797   	b1Hz_unh=0;
;;;8798   
;;;8799   	if(BAT_TYPE==0)
;;;8800   		{
;;;8801   		if(bat[0]._nd)mat_temper=20;
;;;8802   		else mat_temper=bat[0]._Tb;
;;;8803   
;;;8804   			
;;;8805   		if(mat_temper<0)temp_SL=UB0; 
;;;8806   		else 
;;;8807   			{
;;;8808   			if(mat_temper>40)mat_temper=40; 
;;;8809   			temp_SL=(UB20-UB0)*10;
;;;8810   			temp_SL*=mat_temper;
;;;8811   			temp_SL/=200;
;;;8812   			temp_SL+=UB0;
;;;8813   			}
;;;8814   		if((spc_stat==spcVZ)&&(sk_stat[0]==1))
;;;8815   			{
;;;8816   			temp_SL=UVZ;
;;;8817   			}
;;;8818   		u_necc=(unsigned int)temp_SL;
;;;8819   	///u_necc=3456;
;;;8820   		}
;;;8821   	else if(BAT_TYPE==1)
;;;8822   		{
;;;8823   		
;;;8824   		gran(&DU_LI_BAT,1,30);
;;;8825   		u_necc=li_bat._Ub+DU_LI_BAT;
;;;8826   		gran(&u_necc,0,UB0);
;;;8827   		gran(&u_necc,0,UB20);
;;;8828   		gran(&u_necc,0,540);		
;;;8829   
;;;8830   
;;;8831   		if(li_bat._batStat!=bsOK)
;;;8832   			{
;;;8833   			u_necc=U0B;
;;;8834   			}
;;;8835   		if((spc_stat==spcVZ)&&(sk_stat[0]==1))
;;;8836   			{
;;;8837   			u_necc=UVZ;
;;;8838   			}
;;;8839   		/* 
;;;8840   		u_necc=U0B;
;;;8841   		
;;;8842   
;;;8843   	
;;;8844   		u_necc=UB0;
;;;8845   		u_necc=li_bat._Ub+10;
;;;8846   		if((li_bat._Ub<450)||(li_bat._Ub>550))
;;;8847   			{
;;;8848   			lakb_error_cnt++;
;;;8849   			if(lakb_error_cnt>=30)
;;;8850   				{
;;;8851   				lakb_error_cnt=30;
;;;8852   				u_necc=U0B;
;;;8853   				}
;;;8854   			}
;;;8855   		else lakb_error_cnt=0;*/
;;;8856   		}
;;;8857   	else if(BAT_TYPE==2)
;;;8858   		{
;;;8859   		u_necc=U0B;
;;;8860   		
;;;8861   		if((spc_stat==spcVZ)&&(sk_stat[0]==1))
;;;8862   			{
;;;8863   			u_necc=UVZ;
;;;8864   			}
;;;8865   	
;;;8866   		u_necc=UB0;
;;;8867   		}
;;;8868   
;;;8869   	else if(BAT_TYPE==3)
;;;8870   		{
;;;8871   		u_necc=U0B;
;;;8872   		
;;;8873   		if((spc_stat==spcVZ)&&(sk_stat[0]==1))
;;;8874   			{
;;;8875   			u_necc=UVZ;
;;;8876   			}
;;;8877   
;;;8878   		gran(&DU_LI_BAT,1,30);
;;;8879   
;;;8880   
;;;8881   		if(lakbNotErrorNum==0)
;;;8882   			{
;;;8883   			u_necc=U0B;
;;;8884   			}
;;;8885   		else 
;;;8886   			{
;;;8887   			signed short i;
;;;8888   			//signed short u_necc_max;
;;;8889   			//u_necc_max=0;
;;;8890   			char soc_flag=0;
;;;8891   
;;;8892   			for(i=(NUMBAT_TELECORE-1);i>=0;i--)
;;;8893   				{
;;;8894   				if(lakb[i]._communicationFullErrorStat==0)u_necc=lakb[i]._tot_bat_volt+DU_LI_BAT;
;;;8895   				if(lakb[i]._s_o_c_percent<QSODERG_LI_BAT)soc_flag=1;
;;;8896   				}
;;;8897   
;;;8898   			if(soc_flag==0)u_necc=USODERG_LI_BAT;
;;;8899   			}
;;;8900   		gran(&u_necc,0,UB0);
;;;8901   		//gran(&u_necc,0,UB20);
;;;8902   		gran(&u_necc,0,540);
;;;8903   		}
;;;8904   	}
;;;8905   
;;;8906   #endif 
;;;8907   
;;;8908   #ifdef UKU_TELECORE2017
;;;8909   
;;;8910   if(unh_cnt0<10)
;;;8911   	{
;;;8912   	unh_cnt0++;
;;;8913   	if(unh_cnt0>=10)
;;;8914   		{
;;;8915   		unh_cnt0=0;
;;;8916   		b1Hz_unh=1;
;;;8917   		}
;;;8918   	}
;;;8919   
;;;8920   if(unh_cnt1<5)
;;;8921   	{
;;;8922   	unh_cnt1++;
;;;8923   	if(unh_cnt1==5)
;;;8924   		{
;;;8925   		unh_cnt1=0;
;;;8926   //		b2Hz_unh=1;
;;;8927   		}
;;;8928   	} 
;;;8929   
;;;8930   
;;;8931   
;;;8932   if(mess_find_unvol(MESS2UNECC_HNDL))
;;;8933   	{		
;;;8934   	if(mess_data[0]==PARAM_UNECC_SET)
;;;8935   		{
;;;8936   		u_necc=mess_data[1];
;;;8937   		}		
;;;8938   	}
;;;8939   
;;;8940   
;;;8941   else if(b1Hz_unh)
;;;8942   	{
;;;8943   	b1Hz_unh=0;
;;;8944   
;;;8945   	if(BAT_TYPE==0)
;;;8946   		{
;;;8947   		if(bat[0]._nd)mat_temper=20;
;;;8948   		else mat_temper=bat[0]._Tb;
;;;8949   
;;;8950   			
;;;8951   		if(mat_temper<0)temp_SL=UB0; 
;;;8952   		else 
;;;8953   			{
;;;8954   			if(mat_temper>40)mat_temper=40; 
;;;8955   			temp_SL=(UB20-UB0)*10;
;;;8956   			temp_SL*=mat_temper;
;;;8957   			temp_SL/=200;
;;;8958   			temp_SL+=UB0;
;;;8959   			}
;;;8960   		if((spc_stat==spcVZ)&&(sk_stat[0]==1))
;;;8961   			{
;;;8962   			temp_SL=UVZ;
;;;8963   			}
;;;8964   		u_necc=(unsigned int)temp_SL;
;;;8965   	///u_necc=3456;
;;;8966   		}
;;;8967   	else if(BAT_TYPE==1)
;;;8968   		{
;;;8969   		
;;;8970   		gran(&DU_LI_BAT,1,30);
;;;8971   		u_necc=li_bat._Ub+DU_LI_BAT;
;;;8972   		gran(&u_necc,0,UB0);
;;;8973   		gran(&u_necc,0,UB20);
;;;8974   		gran(&u_necc,0,540);		
;;;8975   
;;;8976   
;;;8977   		if(li_bat._batStat!=bsOK)
;;;8978   			{
;;;8979   			u_necc=U0B;
;;;8980   			}
;;;8981   		if((spc_stat==spcVZ)&&(sk_stat[0]==1))
;;;8982   			{
;;;8983   			u_necc=UVZ;
;;;8984   			}
;;;8985   		}
;;;8986   	else if(BAT_TYPE==2)
;;;8987   		{
;;;8988   		u_necc=U0B;
;;;8989   		
;;;8990   		if((spc_stat==spcVZ)&&(sk_stat[0]==1))
;;;8991   			{
;;;8992   			u_necc=UVZ;
;;;8993   			}
;;;8994   	
;;;8995   		u_necc=UB0;
;;;8996   		}
;;;8997   
;;;8998   	else if(BAT_TYPE==3)
;;;8999   		{
;;;9000   		u_necc=U0B;
;;;9001   		
;;;9002   		if((spc_stat==spcVZ)&&(sk_stat[0]==1))
;;;9003   			{
;;;9004   			u_necc=UVZ;
;;;9005   			}
;;;9006   
;;;9007   		gran(&DU_LI_BAT,1,30);
;;;9008   
;;;9009   
;;;9010   		if(lakbNotErrorNum==0)
;;;9011   			{
;;;9012   			u_necc=U0B;
;;;9013   			}
;;;9014   		else 
;;;9015   			{
;;;9016   			signed short i;
;;;9017   			//signed short u_necc_max;
;;;9018   			//u_necc_max=0;
;;;9019   			char soc_flag=0;
;;;9020   
;;;9021   			for(i=(NUMBAT_TELECORE-1);i>=0;i--)
;;;9022   				{
;;;9023   				if(lakb[i]._communicationFullErrorStat==0)u_necc=lakb[i]._tot_bat_volt+DU_LI_BAT;
;;;9024   				if(lakb[i]._s_o_c_percent<QSODERG_LI_BAT)soc_flag=1;
;;;9025   				}
;;;9026   
;;;9027   			if(soc_flag==0)u_necc=USODERG_LI_BAT;
;;;9028   			}
;;;9029   		gran(&u_necc,0,UB0);
;;;9030   		//gran(&u_necc,0,UB20);
;;;9031   		gran(&u_necc,0,540);
;;;9032   		}
;;;9033   	}
;;;9034   
;;;9035   #endif 
;;;9036   //u_necc=2356;
;;;9037   
;;;9038   if((speedChIsOn)||(sp_ch_stat==scsWRK))
;;;9039   	{
;;;9040   	u_necc=speedChrgVolt;
;;;9041   	}
;;;9042   #endif//gran(&u_necc,400,UMAX);
;;;9043   
;;;9044   
;;;9045   
;;;9046   temp_L=(signed long) u_necc;
005e06  f9b40000          LDRSH    r0,[r4,#0]  ; u_necc
;;;9047   temp_L*=98L;
005e0a  f04f0162          MOV      r1,#0x62
005e0e  fb00f101          MUL      r1,r0,r1
;;;9048   temp_L/=100L;
005e12  f04f0264          MOV      r2,#0x64
005e16  fb91f1f2          SDIV     r1,r1,r2
;;;9049   u_necc_dn=(signed short)temp_L;
005e1a  4bbe              LDR      r3,|L1.24852|
005e1c  8019              STRH     r1,[r3,#0]
;;;9050   
;;;9051   temp_L=(signed long) u_necc;
;;;9052   temp_L*=102L;
005e1e  f04f0166          MOV      r1,#0x66
005e22  fb00f001          MUL      r0,r0,r1
;;;9053   temp_L/=100L;
005e26  fb90f0f2          SDIV     r0,r0,r2
;;;9054   u_necc_up=(signed short)temp_L;
005e2a  49bb              LDR      r1,|L1.24856|
005e2c  8008              STRH     r0,[r1,#0]
;;;9055   /*
;;;9056   #ifdef IPS_SGEP_GAZPROM
;;;9057   u_necc=248;
;;;9058   #endif */
;;;9059   }
005e2e  bdf8              POP      {r3-r7,pc}
;;;9060   
                          ENDP

                  num_necc_hndl PROC
;;;9062   //-----------------------------------------------
;;;9063   void num_necc_hndl(void)
005e30  e92d41f0          PUSH     {r4-r8,lr}
;;;9064   {
;;;9065   
;;;9066   static short num_necc_block_cnt;
;;;9067   if(num_necc_block_cnt) num_necc_block_cnt--;
005e34  4ca6              LDR      r4,|L1.24784|
005e36  f9b40038          LDRSH    r0,[r4,#0x38]  ; num_necc_block_cnt
005e3a  b110              CBZ      r0,|L1.24130|
005e3c  f1a00001          SUB      r0,r0,#1
005e40  8720              STRH     r0,[r4,#0x38]
                  |L1.24130|
;;;9068   
;;;9069   Isumm_=Isumm;
005e42  48b6              LDR      r0,|L1.24860|
005e44  4db6              LDR      r5,|L1.24864|
005e46  8800              LDRH     r0,[r0,#0]  ; Isumm
005e48  8028              STRH     r0,[r5,#0]
;;;9070   
;;;9071   if(bat[0]._Ib<0) Isumm_+=(abs(bat[0]._Ib))/10;
005e4a  4eb6              LDR      r6,|L1.24868|
005e4c  270a              MOVS     r7,#0xa
005e4e  f9b60008          LDRSH    r0,[r6,#8]  ; bat
005e52  2800              CMP      r0,#0
005e54  da06              BGE      |L1.24164|
005e56  f7fffffe          BL       abs
005e5a  fb90f0f7          SDIV     r0,r0,r7
005e5e  8829              LDRH     r1,[r5,#0]  ; Isumm_
005e60  4408              ADD      r0,r0,r1
005e62  8028              STRH     r0,[r5,#0]
                  |L1.24164|
;;;9072   if(bat[1]._Ib<0) Isumm_+=(abs(bat[1]._Ib))/10;
005e64  f9b60054          LDRSH    r0,[r6,#0x54]  ; bat
005e68  2800              CMP      r0,#0
005e6a  da06              BGE      |L1.24186|
005e6c  f7fffffe          BL       abs
005e70  fb90f0f7          SDIV     r0,r0,r7
005e74  8829              LDRH     r1,[r5,#0]  ; Isumm_
005e76  4408              ADD      r0,r0,r1
005e78  8028              STRH     r0,[r5,#0]
                  |L1.24186|
;;;9073   
;;;9074   num_necc_up=(Isumm_/((signed short)IMAX))+1;
005e7a  49ab              LDR      r1,|L1.24872|
005e7c  f9b50000          LDRSH    r0,[r5,#0]  ; Isumm_
005e80  f9b11000          LDRSH    r1,[r1,#0]  ; IMAX
005e84  fb90f1f1          SDIV     r1,r0,r1
005e88  f1010101          ADD      r1,r1,#1
005e8c  b2c9              UXTB     r1,r1
005e8e  77e1              STRB     r1,[r4,#0x1f]
;;;9075   ////Isumm_+=(signed short)((IMAX*(10-KIMAX))/10);
;;;9076   ////Isumm_+=(signed short)(IMAX-IMIN);
;;;9077   
;;;9078   num_necc_down=(Isumm_/((signed short)IMIN))+1;
005e90  4aa6              LDR      r2,|L1.24876|
005e92  f9b22000          LDRSH    r2,[r2,#0]  ; IMIN
005e96  fb90f0f2          SDIV     r0,r0,r2
005e9a  f1000001          ADD      r0,r0,#1
005e9e  b2c2              UXTB     r2,r0
005ea0  f8842020          STRB     r2,[r4,#0x20]
;;;9079   
;;;9080   if(num_necc_up>num_necc)
005ea4  48a2              LDR      r0,|L1.24880|
;;;9081   	{
;;;9082   	num_necc=num_necc_up;
;;;9083   	num_necc_block_cnt=60;
005ea6  f04f053c          MOV      r5,#0x3c
005eaa  f9b03000          LDRSH    r3,[r0,#0]            ;9080  ; num_necc
005eae  4299              CMP      r1,r3                 ;9080
005eb0  dd02              BLE      |L1.24248|
005eb2  8001              STRH     r1,[r0,#0]            ;9082
005eb4  8725              STRH     r5,[r4,#0x38]
005eb6  e005              B        |L1.24260|
                  |L1.24248|
;;;9084   	}
;;;9085   else if(num_necc_down<num_necc)
005eb8  429a              CMP      r2,r3
005eba  da03              BGE      |L1.24260|
;;;9086   	{
;;;9087   	if(!num_necc_block_cnt)
005ebc  8f21              LDRH     r1,[r4,#0x38]  ; num_necc_block_cnt
005ebe  b909              CBNZ     r1,|L1.24260|
;;;9088   		{
;;;9089   		num_necc=num_necc_down;
005ec0  8002              STRH     r2,[r0,#0]
;;;9090   		num_necc_block_cnt=60;
005ec2  8725              STRH     r5,[r4,#0x38]
                  |L1.24260|
;;;9091   		}
;;;9092   	}
;;;9093   
;;;9094   if(PAR) num_necc=NUMIST;
005ec4  499b              LDR      r1,|L1.24884|
005ec6  880a              LDRH     r2,[r1,#0]  ; PAR
005ec8  497a              LDR      r1,|L1.24756|
005eca  b10a              CBZ      r2,|L1.24272|
005ecc  880a              LDRH     r2,[r1,#0]  ; NUMIST
005ece  8002              STRH     r2,[r0,#0]
                  |L1.24272|
;;;9095   #ifdef UKU_220_IPS_TERMOKOMPENSAT
;;;9096   if(bPARALLEL) num_necc=NUMIST;
005ed0  f894202d          LDRB     r2,[r4,#0x2d]  ; bPARALLEL
005ed4  b10a              CBZ      r2,|L1.24282|
005ed6  880a              LDRH     r2,[r1,#0]  ; NUMIST
005ed8  8002              STRH     r2,[r0,#0]
                  |L1.24282|
;;;9097   if(vz1_stat==vz1sWRK)num_necc=NUMIST; //Включаем все источники если уравнительный заряд
005eda  7962              LDRB     r2,[r4,#5]  ; vz1_stat
005edc  2a0a              CMP      r2,#0xa
005ede  d101              BNE      |L1.24292|
005ee0  880a              LDRH     r2,[r1,#0]  ; NUMIST
005ee2  8002              STRH     r2,[r0,#0]
                  |L1.24292|
;;;9098   if((vz2_stat==vz2sWRK1)||(vz2_stat==vz2sWRK2))num_necc=NUMIST; //Включаем все источники если уравнительный заряд
005ee4  79e2              LDRB     r2,[r4,#7]  ; vz2_stat
005ee6  2a0a              CMP      r2,#0xa
005ee8  d001              BEQ      |L1.24302|
005eea  2a0b              CMP      r2,#0xb
005eec  d101              BNE      |L1.24306|
                  |L1.24302|
005eee  880a              LDRH     r2,[r1,#0]  ; NUMIST
005ef0  8002              STRH     r2,[r0,#0]
                  |L1.24306|
;;;9099   #endif
;;;9100   
;;;9101   gran(&num_necc,1,NUMIST);
005ef2  f9b12000          LDRSH    r2,[r1,#0]  ; NUMIST
005ef6  e8bd41f0          POP      {r4-r8,lr}
005efa  2101              MOVS     r1,#1
005efc  488c              LDR      r0,|L1.24880|
005efe  f7ffbffe          B.W      gran
;;;9102   
;;;9103   }
;;;9104   
                          ENDP

                  cntrl_hndl PROC
;;;9107   //-----------------------------------------------
;;;9108   void cntrl_hndl(void)
005f02  e92d5ff0          PUSH     {r4-r12,lr}
;;;9109   {
;;;9110   
;;;9111   
;;;9112   
;;;9113   IZMAX_=IZMAX;
005f06  488c              LDR      r0,|L1.24888|
005f08  4c71              LDR      r4,|L1.24784|
005f0a  8800              LDRH     r0,[r0,#0]  ; IZMAX
005f0c  f8a4004c          STRH     r0,[r4,#0x4c]
;;;9114   
;;;9115   //cntrl_hndl_plazma=10;
;;;9116   
;;;9117   if((speedChIsOn)||(sp_ch_stat==scsWRK))IZMAX_=speedChrgCurr;
005f10  4877              LDR      r0,|L1.24816|
005f12  8800              LDRH     r0,[r0,#0]  ; speedChIsOn
005f14  b918              CBNZ     r0,|L1.24350|
005f16  4877              LDR      r0,|L1.24820|
005f18  7800              LDRB     r0,[r0,#0]  ; sp_ch_stat
005f1a  2802              CMP      r0,#2
005f1c  d103              BNE      |L1.24358|
                  |L1.24350|
005f1e  4887              LDR      r0,|L1.24892|
005f20  8800              LDRH     r0,[r0,#0]  ; speedChrgCurr
005f22  f8a4004c          STRH     r0,[r4,#0x4c]
                  |L1.24358|
;;;9118   if(vz1_stat==vz1sWRK) IZMAX_=UZ_IMAX;
005f26  7960              LDRB     r0,[r4,#5]  ; vz1_stat
005f28  280a              CMP      r0,#0xa
005f2a  d103              BNE      |L1.24372|
005f2c  4884              LDR      r0,|L1.24896|
005f2e  8800              LDRH     r0,[r0,#0]  ; UZ_IMAX
005f30  f8a4004c          STRH     r0,[r4,#0x4c]
                  |L1.24372|
;;;9119   if(vz2_stat==vz2sWRK1) IZMAX_=FZ_IMAX1;
005f34  79e0              LDRB     r0,[r4,#7]  ; vz2_stat
005f36  280a              CMP      r0,#0xa
005f38  d103              BNE      |L1.24386|
005f3a  4982              LDR      r1,|L1.24900|
005f3c  8809              LDRH     r1,[r1,#0]  ; FZ_IMAX1
005f3e  f8a4104c          STRH     r1,[r4,#0x4c]
                  |L1.24386|
;;;9120   if(vz2_stat==vz2sWRK2) IZMAX_=FZ_IMAX2;
005f42  280b              CMP      r0,#0xb
005f44  d103              BNE      |L1.24398|
005f46  4880              LDR      r0,|L1.24904|
005f48  8800              LDRH     r0,[r0,#0]  ; FZ_IMAX2
005f4a  f8a4004c          STRH     r0,[r4,#0x4c]
                  |L1.24398|
;;;9121   //if(spc_stat==spcVZ) IZMAX_=IMAX_VZ;
;;;9122   
;;;9123   if(cntrl_stat_blok_cnt)cntrl_stat_blok_cnt--;
005f4e  f9b40074          LDRSH    r0,[r4,#0x74]  ; cntrl_stat_blok_cnt
005f52  b118              CBZ      r0,|L1.24412|
005f54  f1a00001          SUB      r0,r0,#1
005f58  f8a40074          STRH     r0,[r4,#0x74]
                  |L1.24412|
;;;9124   if(cntrl_stat_blok_cnt_)cntrl_stat_blok_cnt_--;
005f5c  f9b40076          LDRSH    r0,[r4,#0x76]  ; cntrl_stat_blok_cnt_
005f60  b118              CBZ      r0,|L1.24426|
005f62  f1a00001          SUB      r0,r0,#1
005f66  f8a40076          STRH     r0,[r4,#0x76]
                  |L1.24426|
;;;9125   
;;;9126   if((bat[0]._temper_stat&0x03)||(bat[1]._temper_stat&0x03))IZMAX_=IZMAX_/10;
005f6a  486e              LDR      r0,|L1.24868|
005f6c  f04f080a          MOV      r8,#0xa               ;9118
005f70  f890103f          LDRB     r1,[r0,#0x3f]  ; bat
005f74  0789              LSLS     r1,r1,#30
005f76  d103              BNE      |L1.24448|
005f78  f890008b          LDRB     r0,[r0,#0x8b]  ; bat
005f7c  0780              LSLS     r0,r0,#30
005f7e  d005              BEQ      |L1.24460|
                  |L1.24448|
005f80  f8b4004c          LDRH     r0,[r4,#0x4c]  ; IZMAX_
005f84  fbb0f0f8          UDIV     r0,r0,r8
005f88  f8a4004c          STRH     r0,[r4,#0x4c]
                  |L1.24460|
;;;9127   
;;;9128   
;;;9129   #ifdef UKU_220_IPS_TERMOKOMPENSAT
;;;9130   if((REG_SPEED<1)||(REG_SPEED>5)) REG_SPEED=1;
005f8c  486f              LDR      r0,|L1.24908|
005f8e  2601              MOVS     r6,#1
005f90  f9b01000          LDRSH    r1,[r0,#0]  ; REG_SPEED
005f94  1e49              SUBS     r1,r1,#1
005f96  2905              CMP      r1,#5
005f98  d300              BCC      |L1.24476|
005f9a  8006              STRH     r6,[r0,#0]
                  |L1.24476|
;;;9131   if(ch_cnt0<(10*REG_SPEED))
005f9c  f9b00000          LDRSH    r0,[r0,#0]  ; REG_SPEED
005fa0  2500              MOVS     r5,#0                 ;9117
005fa2  eb000180          ADD      r1,r0,r0,LSL #2
005fa6  7d60              LDRB     r0,[r4,#0x15]  ; ch_cnt0
005fa8  ebb00f41          CMP      r0,r1,LSL #1
005fac  da08              BGE      |L1.24512|
;;;9132   	{
;;;9133   	ch_cnt0++;
005fae  f1000001          ADD      r0,r0,#1
005fb2  b2c0              UXTB     r0,r0
005fb4  7560              STRB     r0,[r4,#0x15]
;;;9134   	if(ch_cnt0>=10*REG_SPEED)
005fb6  ebb00f41          CMP      r0,r1,LSL #1
005fba  db01              BLT      |L1.24512|
;;;9135   		{
;;;9136   		ch_cnt0=0;
005fbc  7565              STRB     r5,[r4,#0x15]
;;;9137   		b1Hz_ch=1;
005fbe  75a6              STRB     r6,[r4,#0x16]
                  |L1.24512|
;;;9138   		}
;;;9139   	}
;;;9140   #endif
;;;9141   #ifndef UKU_220_IPS_TERMOKOMPENSAT
;;;9142   if(ch_cnt0<10)
;;;9143   	{
;;;9144   	ch_cnt0++;
;;;9145   	if(ch_cnt0>=10)
;;;9146   		{
;;;9147   		ch_cnt0=0;
;;;9148   		b1Hz_ch=1;
;;;9149   		}
;;;9150   	}
;;;9151   #endif
;;;9152   
;;;9153   
;;;9154   if(mess_find_unvol(MESS2CNTRL_HNDL))
005fc0  20e1              MOVS     r0,#0xe1
005fc2  f7fffffe          BL       mess_find_unvol
;;;9155   	{
;;;9156   	if(mess_data[0]==PARAM_CNTRL_STAT_PLUS)
;;;9157   		{
;;;9158   		cntrl_stat/*_new*/=cntrl_stat_old+mess_data[1];
;;;9159   		}
;;;9160   	else if(mess_data[0]==PARAM_CNTRL_STAT_MINUS)
;;;9161   		{
;;;9162   		cntrl_stat/*_new*/=cntrl_stat_old-mess_data[1];
;;;9163   		}
;;;9164   	else if(mess_data[0]==PARAM_CNTRL_STAT_STEP_DOWN)
;;;9165   		{
;;;9166   		static char cntrlStatIsDownCnt;
;;;9167   		cntrl_stat--;
;;;9168   
;;;9169   		if((cntrl_stat<=30)||(load_U<USIGN))
;;;9170   			{
;;;9171   			if(++cntrlStatIsDownCnt==250)mess_send(MESS2KB_HNDL,PARAM_CNTRL_IS_DOWN,0,10);
;;;9172   			}
;;;9173   		else 
;;;9174   			{
;;;9175   			cntrlStatIsDownCnt=0;
;;;9176   			}
;;;9177   
;;;9178   		}
;;;9179   	else if(mess_data[0]==PARAM_CNTRL_STAT_SET)
;;;9180   		{
;;;9181   		cntrl_stat/*_new*/=mess_data[1];
;;;9182   		}
;;;9183   
;;;9184   	else if(mess_data[0]==PARAM_CNTRL_STAT_FAST_REG)
;;;9185   		{
;;;9186   		#ifdef UKU_220_IPS_TERMOKOMPENSAT
;;;9187   		if(bps_U>u_necc)
005fc6  f8dfc188          LDR      r12,|L1.24912|
005fca  4a42              LDR      r2,|L1.24788|
;;;9188   			{
;;;9189   			cntrl_hndl_plazma=11;
;;;9190   			if(((bps_U-u_necc)>40)&&(cntrl_stat/*_new*/>0))cntrl_stat/*_new*/-=5;
;;;9191   			else if((cntrl_stat/*_new*/)&&b1Hz_ch)cntrl_stat/*_new*/--;
;;;9192   			}
;;;9193   		else if(bps_U<u_necc)
;;;9194   			{
;;;9195   			cntrl_hndl_plazma=12;	
;;;9196   			if(((u_necc-bps_U)>40)&&(cntrl_stat/*_new*/<1015))cntrl_stat/*_new*/+=5;
;;;9197   			else	if((cntrl_stat/*_new*/<1020)&&b1Hz_ch)cntrl_stat/*_new*/++;
;;;9198   			}
;;;9199   		#elif defined(UKU_220)
;;;9200   		if(load_U>u_necc)
;;;9201   			{
;;;9202   			cntrl_hndl_plazma=13;
;;;9203   			if(((load_U-u_necc)>40)&&(cntrl_stat/*_new*/>0))cntrl_stat/*_new*/-=5;
;;;9204   			else if((cntrl_stat/*_new*/)&&b1Hz_ch)cntrl_stat/*_new*/--;
;;;9205   			}
;;;9206   		else if(load_U<u_necc)
;;;9207   			{
;;;9208   			cntrl_hndl_plazma=14;	
;;;9209   			if(((u_necc-load_U)>40)&&(cntrl_stat/*_new*/<1015))cntrl_stat/*_new*/+=5;
;;;9210   			else	if((cntrl_stat/*_new*/<1020)&&b1Hz_ch)cntrl_stat/*_new*/++;
;;;9211   			}
;;;9212   		#elif defined(UKU_220_V2)
;;;9213   		if(load_U>u_necc)
;;;9214   			{
;;;9215   			cntrl_hndl_plazma=15;
;;;9216   			if(((load_U-u_necc)>40)&&(cntrl_stat/*_new*/>0))cntrl_stat/*_new*/-=5;
;;;9217   			else if((cntrl_stat/*_new*/)&&b1Hz_ch)cntrl_stat/*_new*/--;
;;;9218   			}
;;;9219   		else if(load_U<u_necc)
;;;9220   			{
;;;9221   			cntrl_hndl_plazma=16;	
;;;9222   			if(((u_necc-load_U)>40)&&(cntrl_stat/*_new*/<1015))cntrl_stat/*_new*/+=5;
;;;9223   			else	if((cntrl_stat/*_new*/<1020)&&b1Hz_ch)cntrl_stat/*_new*/++;
;;;9224   			}
;;;9225   		#else
;;;9226   
;;;9227   		if(load_U>u_necc)
;;;9228   			{
;;;9229   			cntrl_hndl_plazma=17;
;;;9230   			if(((load_U-u_necc)>10)&&(cntrl_stat/*_new*/>0))cntrl_stat/*_new*/-=5;
;;;9231   			else if((cntrl_stat/*_new*/)&&b1Hz_ch)cntrl_stat/*_new*/--;
;;;9232   			}
;;;9233   		else if(load_U<u_necc)
;;;9234   			{
;;;9235   			cntrl_hndl_plazma=18;	
;;;9236   			if(((u_necc-load_U)>10)&&(cntrl_stat/*_new*/<1015))cntrl_stat/*_new*/+=5;
;;;9237   			else	if((cntrl_stat/*_new*/<1020)&&b1Hz_ch)cntrl_stat/*_new*/++;
;;;9238   			}
;;;9239   		#endif	
;;;9240   	 	}
;;;9241   
;;;9242   	/*gran(&cntrl_stat_new,10,1010);			
;;;9243   	cntrl_stat_old=cntrl_stat_new;
;;;9244   	cntrl_stat=cntrl_stat_new;*/
;;;9245   	}
;;;9246   
;;;9247   #ifdef UKU_220_IPS_TERMOKOMPENSAT
;;;9248   else if((b1Hz_ch)&&((!bIBAT_SMKLBR)||(bps[8]._cnt>40)))
005fcc  f8df90e0          LDR      r9,|L1.24752|
;;;9249   	{
;;;9250   	cntrl_stat_new=cntrl_stat_old;
;;;9251   	cntrl_hndl_plazma=19;
;;;9252   	if((Ibmax/10)>(2*IZMAX_))
;;;9253   		{
;;;9254   		cntrl_hndl_plazma=20;
;;;9255             if(cntrl_stat_blok_cnt)cntrl_stat_new--;
;;;9256   		else	cntrl_stat_new-=10;
;;;9257   		}		
;;;9258   	else if(((Ibmax/10)<(IZMAX_*2))&&(Ibmax>(IZMAX_*15)))
;;;9259   		{
;;;9260   		cntrl_hndl_plazma=21;
;;;9261             if(cntrl_stat_blok_cnt)cntrl_stat_new--;
;;;9262             else	cntrl_stat_new-=3;
;;;9263   		}   
;;;9264   	else if((Ibmax<(IZMAX_*15))&&((Ibmax/10)>IZMAX_))
;;;9265   		{
;;;9266   		cntrl_hndl_plazma=22;
;;;9267   		cntrl_stat_new--;
;;;9268   		}
;;;9269   		
;;;9270   	else if(bps_U<u_necc)
;;;9271   		{
;;;9272   		cntrl_hndl_plazma=23;
;;;9273   		if(bps_U<(u_necc-(UB0-UB20)))
;;;9274   			{
;;;9275   			cntrl_hndl_plazma=24;
;;;9276   			if(Ibmax<0)
;;;9277   				{
;;;9278   				cntrl_hndl_plazma=25;
;;;9279                       if(cntrl_stat_blok_cnt)cntrl_stat_new++;
;;;9280   				else cntrl_stat_new+=10;
;;;9281   				}
;;;9282   			else if(Ibmax<(IZMAX_*5))
;;;9283   				{
;;;9284   				cntrl_hndl_plazma=26;
;;;9285                       if(cntrl_stat_blok_cnt)cntrl_stat_new++;
;;;9286   				else	cntrl_stat_new+=2;
;;;9287   				}
;;;9288   			else if(Ibmax<((IZMAX_*10)/*-10*/))//(Ibmax<((IZMAX_*95)/10))
;;;9289   				{
;;;9290   				cntrl_hndl_plazma=27;
;;;9291   				cntrl_stat_new++;
;;;9292   				}					
;;;9293   			}
;;;9294   		else if(bps_U<(u_necc-((UB0-UB20)/4)))
;;;9295   			{
;;;9296   			cntrl_hndl_plazma=28;
;;;9297   			if(Ibmax<(IZMAX_*5))
;;;9298   				{
;;;9299   				cntrl_hndl_plazma=29;
;;;9300                       if(cntrl_stat_blok_cnt)cntrl_stat_new++;
;;;9301   				else	cntrl_stat_new+=2;
;;;9302   				}
;;;9303   			else if(Ibmax<((IZMAX_*10)/*-10*/))//(Ibmax<((IZMAX_*95)/10))
;;;9304   				{
;;;9305   				cntrl_hndl_plazma=30;
;;;9306   				cntrl_stat_new++;
;;;9307   				}					
;;;9308   			}	
;;;9309   		else if(bps_U<(u_necc-1))
;;;9310   			{
;;;9311   			cntrl_hndl_plazma=31;
;;;9312   			if(Ibmax<((IZMAX_*10)/*-10*/))//(Ibmax<((IZMAX_*95)/10))
;;;9313   				{
;;;9314   				cntrl_hndl_plazma=32;
;;;9315   				cntrl_stat_new++;
;;;9316   				}					
;;;9317   			}					
;;;9318   		}	
;;;9319   	else if((bps_U>u_necc)/*&&(!cntrl_blok)*/)
;;;9320   		{ 	
;;;9321   		cntrl_hndl_plazma=33;
;;;9322   		if(bps_U>(u_necc+(UB0-UB20)))
;;;9323   			{
;;;9324   			cntrl_hndl_plazma=34;
;;;9325                  if((cntrl_stat_blok_cnt)||(!TERMOKOMPENS))cntrl_stat_new--;
;;;9326   			else	cntrl_stat_new-=10;
;;;9327   			}
;;;9328   		else if(bps_U>(u_necc+((UB0-UB20)/4)))
;;;9329   			{
;;;9330   			cntrl_hndl_plazma=35;
;;;9331                  if(cntrl_stat_blok_cnt)cntrl_stat_new--;
;;;9332   			else cntrl_stat_new-=2;
;;;9333   			}	
;;;9334   		else if(bps_U>(u_necc+1))
;;;9335   			{
;;;9336   			cntrl_hndl_plazma=36;
;;;9337   			cntrl_stat_new--;
;;;9338   			}					
;;;9339   		}
;;;9340   
;;;9341   	if((hv_vz_stat==hvsOFF)&&(vz1_stat==vz1sOFF)&&(vz2_stat==vz2sOFF))
;;;9342   		{
;;;9343   		if(((sk_stat[1]==1)&&(sk_stat_old[1]==0))&&(VZ_KIND==1))cntrl_stat_new=50;
;;;9344   		}
;;;9345   
;;;9346   	gran(&cntrl_stat_new,10,1010);
;;;9347   	if(net_av_2min_timer)cntrl_stat_new=cntrl_stat_old;			
;;;9348   	cntrl_stat_old=cntrl_stat_new;
;;;9349   	cntrl_stat=cntrl_stat_new;
;;;9350   	
;;;9351   	if(ICA_EN==0)
;;;9352   		{
;;;9353   		if(ica_cntrl_hndl_cnt)
005fd0  4f60              LDR      r7,|L1.24916|
005fd2  b398              CBZ      r0,|L1.24636|
005fd4  4938              LDR      r1,|L1.24760|
005fd6  6808              LDR      r0,[r1,#0]            ;9156  ; mess_data
005fd8  2864              CMP      r0,#0x64              ;9156
005fda  d008              BEQ      |L1.24558|
005fdc  2869              CMP      r0,#0x69              ;9160
005fde  d00b              BEQ      |L1.24568|
005fe0  286e              CMP      r0,#0x6e              ;9164
005fe2  d00f              BEQ      |L1.24580|
005fe4  28e5              CMP      r0,#0xe5              ;9179
005fe6  d02c              BEQ      |L1.24642|
005fe8  28e6              CMP      r0,#0xe6              ;9184
005fea  d02d              BEQ      |L1.24648|
                  |L1.24556|
005fec  e22b              B        |L1.25670|
                  |L1.24558|
005fee  6848              LDR      r0,[r1,#4]            ;9158  ; mess_data
005ff0  8ea1              LDRH     r1,[r4,#0x34]         ;9158  ; cntrl_stat_old
005ff2  4408              ADD      r0,r0,r1              ;9158
005ff4  8660              STRH     r0,[r4,#0x32]         ;9158
005ff6  e226              B        |L1.25670|
                  |L1.24568|
005ff8  6848              LDR      r0,[r1,#4]            ;9162  ; mess_data
005ffa  8ea1              LDRH     r1,[r4,#0x34]         ;9162  ; cntrl_stat_old
005ffc  eba10000          SUB      r0,r1,r0              ;9162
006000  8660              STRH     r0,[r4,#0x32]         ;9162
006002  e220              B        |L1.25670|
                  |L1.24580|
006004  8e60              LDRH     r0,[r4,#0x32]         ;9167  ; cntrl_stat
006006  f1a00001          SUB      r0,r0,#1              ;9167
00600a  b200              SXTH     r0,r0                 ;9167
00600c  8660              STRH     r0,[r4,#0x32]         ;9167
00600e  281e              CMP      r0,#0x1e              ;9169
006010  dd07              BLE      |L1.24610|
006012  4851              LDR      r0,|L1.24920|
006014  4951              LDR      r1,|L1.24924|
006016  f9b00000          LDRSH    r0,[r0,#0]            ;9169  ; load_U
00601a  f9b11000          LDRSH    r1,[r1,#0]            ;9169  ; USIGN
00601e  4288              CMP      r0,r1                 ;9169
006020  da0d              BGE      |L1.24638|
                  |L1.24610|
006022  7be0              LDRB     r0,[r4,#0xf]          ;9171  ; cntrlStatIsDownCnt
006024  1c40              ADDS     r0,r0,#1              ;9171
006026  b2c0              UXTB     r0,r0                 ;9171
006028  73e0              STRB     r0,[r4,#0xf]          ;9171
00602a  28fa              CMP      r0,#0xfa              ;9171
00602c  d1de              BNE      |L1.24556|
00602e  230a              MOVS     r3,#0xa               ;9171
006030  2200              MOVS     r2,#0                 ;9171
006032  21e7              MOVS     r1,#0xe7              ;9171
006034  20e6              MOVS     r0,#0xe6              ;9171
006036  f7fffffe          BL       mess_send
00603a  e204              B        |L1.25670|
                  |L1.24636|
00603c  e09c              B        |L1.24952|
                  |L1.24638|
00603e  73e5              STRB     r5,[r4,#0xf]          ;9175
006040  e201              B        |L1.25670|
                  |L1.24642|
006042  6848              LDR      r0,[r1,#4]            ;9181  ; mess_data
006044  8660              STRH     r0,[r4,#0x32]         ;9181
006046  e1fe              B        |L1.25670|
                  |L1.24648|
006048  f9bc0000          LDRSH    r0,[r12,#0]           ;9187  ; bps_U
00604c  f9b21000          LDRSH    r1,[r2,#0]            ;9187  ; u_necc
006050  4288              CMP      r0,r1                 ;9187
006052  dd1a              BLE      |L1.24714|
006054  f04f020b          MOV      r2,#0xb               ;9189
006058  f884202e          STRB     r2,[r4,#0x2e]         ;9189
00605c  eba00001          SUB      r0,r0,r1              ;9190
006060  2828              CMP      r0,#0x28              ;9190
006062  dd07              BLE      |L1.24692|
006064  f9b40032          LDRSH    r0,[r4,#0x32]         ;9190  ; cntrl_stat
006068  2800              CMP      r0,#0                 ;9190
00606a  dd03              BLE      |L1.24692|
00606c  f1a00005          SUB      r0,r0,#5              ;9190
006070  8660              STRH     r0,[r4,#0x32]         ;9190
006072  e1e8              B        |L1.25670|
                  |L1.24692|
006074  f9b40032          LDRSH    r0,[r4,#0x32]         ;9191  ; cntrl_stat
006078  2800              CMP      r0,#0                 ;9191
00607a  d0b7              BEQ      |L1.24556|
00607c  7da1              LDRB     r1,[r4,#0x16]         ;9191  ; b1Hz_ch
00607e  2900              CMP      r1,#0                 ;9191
006080  d0b4              BEQ      |L1.24556|
006082  f1a00001          SUB      r0,r0,#1              ;9191
006086  8660              STRH     r0,[r4,#0x32]         ;9191
                  |L1.24712|
006088  e1dd              B        |L1.25670|
                  |L1.24714|
00608a  daaf              BGE      |L1.24556|
00608c  f04f020c          MOV      r2,#0xc               ;9195
006090  f884202e          STRB     r2,[r4,#0x2e]         ;9195
006094  eba10000          SUB      r0,r1,r0              ;9196
006098  2828              CMP      r0,#0x28              ;9196
00609a  dd61              BLE      |L1.24928|
00609c  f9b40032          LDRSH    r0,[r4,#0x32]         ;9196  ; cntrl_stat
0060a0  f24031f7          MOV      r1,#0x3f7             ;9196
0060a4  4288              CMP      r0,r1                 ;9196
0060a6  da5b              BGE      |L1.24928|
0060a8  f1000005          ADD      r0,r0,#5              ;9196
0060ac  8660              STRH     r0,[r4,#0x32]         ;9196
                  |L1.24750|
0060ae  e1ca              B        |L1.25670|
                  |L1.24752|
                          DCD      bps
                  |L1.24756|
                          DCD      NUMIST
                  |L1.24760|
                          DCD      mess_data
                  |L1.24764|
                          DCD      uavt_set_result_stat
                  |L1.24768|
                          DCD      avt_plazma
                  |L1.24772|
                          DCD      TERMOKOMPENS
                  |L1.24776|
                          DCD      UB20
                  |L1.24780|
                          DCD      UVZ
                  |L1.24784|
                          DCD      ||area_number.25||
                  |L1.24788|
                          DCD      u_necc
                  |L1.24792|
                          DCD      ND_EXT
                  |L1.24796|
                          DCD      t_ext
                  |L1.24800|
                          DCD      mat_temper
                  |L1.24804|
                          DCD      UB0
                  |L1.24808|
                          DCD      sk_stat
                  |L1.24812|
                          DCD      VZ_CH_VENT_BLOK
                  |L1.24816|
                          DCD      speedChIsOn
                  |L1.24820|
                          DCD      sp_ch_stat
                  |L1.24824|
                          DCD      speedChrgVolt
                  |L1.24828|
                          DCD      hv_vz_stat
                  |L1.24832|
                          DCD      UZ_U
                  |L1.24836|
                          DCD      FZ_U1
                  |L1.24840|
                          DCD      FZ_U2
                  |L1.24844|
                          DCD      uavt_set_stat
                  |L1.24848|
                          DCD      U_AVT
                  |L1.24852|
                          DCD      u_necc_dn
                  |L1.24856|
                          DCD      u_necc_up
                  |L1.24860|
                          DCD      Isumm
                  |L1.24864|
                          DCD      Isumm_
                  |L1.24868|
                          DCD      bat
                  |L1.24872|
                          DCD      IMAX
                  |L1.24876|
                          DCD      IMIN
                  |L1.24880|
                          DCD      num_necc
                  |L1.24884|
                          DCD      PAR
                  |L1.24888|
                          DCD      IZMAX
                  |L1.24892|
                          DCD      speedChrgCurr
                  |L1.24896|
                          DCD      UZ_IMAX
                  |L1.24900|
                          DCD      FZ_IMAX1
                  |L1.24904|
                          DCD      FZ_IMAX2
                  |L1.24908|
                          DCD      REG_SPEED
                  |L1.24912|
                          DCD      bps_U
                  |L1.24916|
                          DCD      ica_cntrl_hndl_cnt
                  |L1.24920|
                          DCD      load_U
                  |L1.24924|
                          DCD      USIGN
                  |L1.24928|
006160  f9b40032          LDRSH    r0,[r4,#0x32]         ;9197  ; cntrl_stat
006164  f5b07f7f          CMP      r0,#0x3fc             ;9197
006168  da8e              BGE      |L1.24712|
00616a  7da1              LDRB     r1,[r4,#0x16]         ;9197  ; b1Hz_ch
00616c  2900              CMP      r1,#0                 ;9197
00616e  d08b              BEQ      |L1.24712|
006170  f1000001          ADD      r0,r0,#1              ;9197
006174  8660              STRH     r0,[r4,#0x32]         ;9197
006176  e166              B        |L1.25670|
                  |L1.24952|
006178  7da0              LDRB     r0,[r4,#0x16]         ;9248  ; b1Hz_ch
00617a  2800              CMP      r0,#0                 ;9248
00617c  d084              BEQ      |L1.24712|
00617e  48fd              LDR      r0,|L1.25972|
006180  8800              LDRH     r0,[r0,#0]            ;9248  ; bIBAT_SMKLBR
006182  b118              CBZ      r0,|L1.24972|
006184  f8990323          LDRB     r0,[r9,#0x323]        ;9248  ; bps
006188  2828              CMP      r0,#0x28              ;9248
00618a  d990              BLS      |L1.24750|
                  |L1.24972|
00618c  f104042e          ADD      r4,r4,#0x2e           ;9250
006190  f9b40006          LDRSH    r0,[r4,#6]            ;9250  ; cntrl_stat_old
006194  8360              STRH     r0,[r4,#0x1a]         ;9250
006196  f04f0113          MOV      r1,#0x13              ;9251
00619a  7021              STRB     r1,[r4,#0]            ;9251
00619c  f9b4101c          LDRSH    r1,[r4,#0x1c]         ;9252  ; Ibmax
0061a0  8be3              LDRH     r3,[r4,#0x1e]         ;9252  ; IZMAX_
0061a2  fb91f8f8          SDIV     r8,r1,r8              ;9252
0061a6  f1a4042e          SUB      r4,r4,#0x2e           ;9252
0061aa  ebb80f43          CMP      r8,r3,LSL #1          ;9252
0061ae  dd10              BLE      |L1.25042|
0061b0  f04f0114          MOV      r1,#0x14              ;9254
0061b4  f884102e          STRB     r1,[r4,#0x2e]         ;9254
0061b8  f8b41074          LDRH     r1,[r4,#0x74]         ;9255  ; cntrl_stat_blok_cnt
0061bc  b121              CBZ      r1,|L1.25032|
0061be  f1a00001          SUB      r0,r0,#1              ;9255
0061c2  f8a40048          STRH     r0,[r4,#0x48]         ;9255
0061c6  e102              B        |L1.25550|
                  |L1.25032|
0061c8  f1a0000a          SUB      r0,r0,#0xa            ;9256
0061cc  f8a40048          STRH     r0,[r4,#0x48]         ;9256
0061d0  e0fd              B        |L1.25550|
                  |L1.25042|
0061d2  da14              BGE      |L1.25086|
0061d4  ebc31a03          RSB      r10,r3,r3,LSL #4      ;9258
0061d8  458a              CMP      r10,r1                ;9258
0061da  da10              BGE      |L1.25086|
0061dc  f04f0115          MOV      r1,#0x15              ;9260
0061e0  f884102e          STRB     r1,[r4,#0x2e]         ;9260
0061e4  f8b41074          LDRH     r1,[r4,#0x74]         ;9261  ; cntrl_stat_blok_cnt
0061e8  b121              CBZ      r1,|L1.25076|
0061ea  f1a00001          SUB      r0,r0,#1              ;9261
0061ee  f8a40048          STRH     r0,[r4,#0x48]         ;9261
0061f2  e0ec              B        |L1.25550|
                  |L1.25076|
0061f4  f1a00003          SUB      r0,r0,#3              ;9262
0061f8  f8a40048          STRH     r0,[r4,#0x48]         ;9262
0061fc  e0e7              B        |L1.25550|
                  |L1.25086|
0061fe  ebc31a03          RSB      r10,r3,r3,LSL #4      ;9264
006202  458a              CMP      r10,r1                ;9264
006204  dd0a              BLE      |L1.25116|
006206  4598              CMP      r8,r3                 ;9264
006208  dd08              BLE      |L1.25116|
00620a  f04f0116          MOV      r1,#0x16              ;9266
00620e  f884102e          STRB     r1,[r4,#0x2e]         ;9266
006212  f1a00001          SUB      r0,r0,#1              ;9267
006216  f8a40048          STRH     r0,[r4,#0x48]         ;9267
00621a  e0d8              B        |L1.25550|
                  |L1.25116|
00621c  f9bcc000          LDRSH    r12,[r12,#0]          ;9270  ; bps_U
006220  f9b22000          LDRSH    r2,[r2,#0]            ;9270  ; u_necc
006224  f8df8350          LDR      r8,|L1.25976|
006228  f8dfb350          LDR      r11,|L1.25980|
00622c  4594              CMP      r12,r2                ;9270
00622e  da72              BGE      |L1.25366|
006230  f04f0a17          MOV      r10,#0x17             ;9272
006234  f884a02e          STRB     r10,[r4,#0x2e]        ;9272
006238  f9b88000          LDRSH    r8,[r8,#0]            ;9273  ; UB0
00623c  f9bba000          LDRSH    r10,[r11,#0]          ;9273  ; UB20
006240  eba8080a          SUB      r8,r8,r10             ;9273
006244  eba20a08          SUB      r10,r2,r8             ;9273
006248  45e2              CMP      r10,r12               ;9273
00624a  dd37              BLE      |L1.25276|
00624c  f04f0218          MOV      r2,#0x18              ;9275
006250  f884202e          STRB     r2,[r4,#0x2e]         ;9275
006254  2900              CMP      r1,#0                 ;9276
006256  da10              BGE      |L1.25210|
006258  f04f0119          MOV      r1,#0x19              ;9278
00625c  f884102e          STRB     r1,[r4,#0x2e]         ;9278
006260  f8b41074          LDRH     r1,[r4,#0x74]         ;9279  ; cntrl_stat_blok_cnt
006264  b121              CBZ      r1,|L1.25200|
006266  f1000001          ADD      r0,r0,#1              ;9279
00626a  f8a40048          STRH     r0,[r4,#0x48]         ;9279
00626e  e0ae              B        |L1.25550|
                  |L1.25200|
006270  f100000a          ADD      r0,r0,#0xa            ;9280
006274  f8a40048          STRH     r0,[r4,#0x48]         ;9280
006278  e0a9              B        |L1.25550|
                  |L1.25210|
00627a  eb030283          ADD      r2,r3,r3,LSL #2       ;9282
00627e  428a              CMP      r2,r1                 ;9282
006280  dd10              BLE      |L1.25252|
006282  f04f011a          MOV      r1,#0x1a              ;9284
006286  f884102e          STRB     r1,[r4,#0x2e]         ;9284
00628a  f8b41074          LDRH     r1,[r4,#0x74]         ;9285  ; cntrl_stat_blok_cnt
00628e  b121              CBZ      r1,|L1.25242|
006290  f1000001          ADD      r0,r0,#1              ;9285
006294  f8a40048          STRH     r0,[r4,#0x48]         ;9285
006298  e099              B        |L1.25550|
                  |L1.25242|
00629a  f1000002          ADD      r0,r0,#2              ;9286
00629e  f8a40048          STRH     r0,[r4,#0x48]         ;9286
0062a2  e094              B        |L1.25550|
                  |L1.25252|
0062a4  ebb10f42          CMP      r1,r2,LSL #1          ;9288
0062a8  da07              BGE      |L1.25274|
0062aa  f04f011b          MOV      r1,#0x1b              ;9290
0062ae  f884102e          STRB     r1,[r4,#0x2e]         ;9290
0062b2  f1000001          ADD      r0,r0,#1              ;9291
0062b6  f8a40048          STRH     r0,[r4,#0x48]         ;9291
                  |L1.25274|
0062ba  e088              B        |L1.25550|
                  |L1.25276|
0062bc  ea4f7ae8          ASR      r10,r8,#31            ;9294
0062c0  eb08789a          ADD      r8,r8,r10,LSR #30     ;9294
0062c4  eba208a8          SUB      r8,r2,r8,ASR #2       ;9294
0062c8  45e0              CMP      r8,r12                ;9294
0062ca  dd25              BLE      |L1.25368|
0062cc  f04f021c          MOV      r2,#0x1c              ;9296
0062d0  f884202e          STRB     r2,[r4,#0x2e]         ;9296
0062d4  eb030283          ADD      r2,r3,r3,LSL #2       ;9297
0062d8  428a              CMP      r2,r1                 ;9297
0062da  dd10              BLE      |L1.25342|
0062dc  f04f011d          MOV      r1,#0x1d              ;9299
0062e0  f884102e          STRB     r1,[r4,#0x2e]         ;9299
0062e4  f8b41074          LDRH     r1,[r4,#0x74]         ;9300  ; cntrl_stat_blok_cnt
0062e8  b121              CBZ      r1,|L1.25332|
0062ea  f1000001          ADD      r0,r0,#1              ;9300
0062ee  f8a40048          STRH     r0,[r4,#0x48]         ;9300
0062f2  e06c              B        |L1.25550|
                  |L1.25332|
0062f4  f1000002          ADD      r0,r0,#2              ;9301
0062f8  f8a40048          STRH     r0,[r4,#0x48]         ;9301
0062fc  e067              B        |L1.25550|
                  |L1.25342|
0062fe  ebb10f42          CMP      r1,r2,LSL #1          ;9303
006302  da64              BGE      |L1.25550|
006304  f04f011e          MOV      r1,#0x1e              ;9305
006308  f884102e          STRB     r1,[r4,#0x2e]         ;9305
00630c  f1000001          ADD      r0,r0,#1              ;9306
006310  f8a40048          STRH     r0,[r4,#0x48]         ;9306
006314  e05b              B        |L1.25550|
                  |L1.25366|
006316  e014              B        |L1.25410|
                  |L1.25368|
006318  1e52              SUBS     r2,r2,#1              ;9309
00631a  4594              CMP      r12,r2                ;9309
00631c  da57              BGE      |L1.25550|
00631e  f04f021f          MOV      r2,#0x1f              ;9311
006322  f884202e          STRB     r2,[r4,#0x2e]         ;9311
006326  eb030283          ADD      r2,r3,r3,LSL #2       ;9312
00632a  ebb10f42          CMP      r1,r2,LSL #1          ;9312
00632e  da4e              BGE      |L1.25550|
006330  f04f0120          MOV      r1,#0x20              ;9314
006334  f884102e          STRB     r1,[r4,#0x2e]         ;9314
006338  f1000001          ADD      r0,r0,#1              ;9315
00633c  f8a40048          STRH     r0,[r4,#0x48]         ;9315
006340  e045              B        |L1.25550|
                  |L1.25410|
006342  dd44              BLE      |L1.25550|
006344  f04f0121          MOV      r1,#0x21              ;9321
006348  f884102e          STRB     r1,[r4,#0x2e]         ;9321
00634c  f9b81000          LDRSH    r1,[r8,#0]            ;9322  ; UB0
006350  f9bb3000          LDRSH    r3,[r11,#0]           ;9322  ; UB20
006354  eba10103          SUB      r1,r1,r3              ;9322
006358  eb010302          ADD      r3,r1,r2              ;9322
00635c  4563              CMP      r3,r12                ;9322
00635e  da13              BGE      |L1.25480|
006360  f04f0122          MOV      r1,#0x22              ;9324
006364  f884102e          STRB     r1,[r4,#0x2e]         ;9324
006368  f8b41074          LDRH     r1,[r4,#0x74]         ;9325  ; cntrl_stat_blok_cnt
00636c  b939              CBNZ     r1,|L1.25470|
00636e  4984              LDR      r1,|L1.25984|
006370  8809              LDRH     r1,[r1,#0]            ;9325  ; TERMOKOMPENS
006372  b121              CBZ      r1,|L1.25470|
006374  f1a0000a          SUB      r0,r0,#0xa            ;9326
006378  f8a40048          STRH     r0,[r4,#0x48]         ;9326
00637c  e027              B        |L1.25550|
                  |L1.25470|
00637e  f1a00001          SUB      r0,r0,#1              ;9325
006382  f8a40048          STRH     r0,[r4,#0x48]         ;9325
006386  e022              B        |L1.25550|
                  |L1.25480|
006388  17cb              ASRS     r3,r1,#31             ;9328
00638a  eb017193          ADD      r1,r1,r3,LSR #30      ;9328
00638e  eb0201a1          ADD      r1,r2,r1,ASR #2       ;9328
006392  4561              CMP      r1,r12                ;9328
006394  da10              BGE      |L1.25528|
006396  f04f0123          MOV      r1,#0x23              ;9330
00639a  f884102e          STRB     r1,[r4,#0x2e]         ;9330
00639e  f8b41074          LDRH     r1,[r4,#0x74]         ;9331  ; cntrl_stat_blok_cnt
0063a2  b121              CBZ      r1,|L1.25518|
0063a4  f1a00001          SUB      r0,r0,#1              ;9331
0063a8  f8a40048          STRH     r0,[r4,#0x48]         ;9331
0063ac  e00f              B        |L1.25550|
                  |L1.25518|
0063ae  f1a00002          SUB      r0,r0,#2              ;9332
0063b2  f8a40048          STRH     r0,[r4,#0x48]         ;9332
0063b6  e00a              B        |L1.25550|
                  |L1.25528|
0063b8  1c52              ADDS     r2,r2,#1              ;9334
0063ba  4594              CMP      r12,r2                ;9334
0063bc  dd07              BLE      |L1.25550|
0063be  f04f0124          MOV      r1,#0x24              ;9336
0063c2  f884102e          STRB     r1,[r4,#0x2e]         ;9336
0063c6  f1a00001          SUB      r0,r0,#1              ;9337
0063ca  f8a40048          STRH     r0,[r4,#0x48]         ;9337
                  |L1.25550|
0063ce  486d              LDR      r0,|L1.25988|
0063d0  7961              LDRB     r1,[r4,#5]            ;9341  ; vz1_stat
0063d2  7800              LDRB     r0,[r0,#0]            ;9341  ; hv_vz_stat
0063d4  4308              ORRS     r0,r0,r1              ;9341
0063d6  79e1              LDRB     r1,[r4,#7]            ;9341  ; vz2_stat
0063d8  4308              ORRS     r0,r0,r1              ;9341
0063da  d10e              BNE      |L1.25594|
0063dc  486a              LDR      r0,|L1.25992|
0063de  7840              LDRB     r0,[r0,#1]            ;9343  ; sk_stat
0063e0  2801              CMP      r0,#1                 ;9343
0063e2  d10a              BNE      |L1.25594|
0063e4  4869              LDR      r0,|L1.25996|
0063e6  7840              LDRB     r0,[r0,#1]            ;9343  ; sk_stat_old
0063e8  b938              CBNZ     r0,|L1.25594|
0063ea  4869              LDR      r0,|L1.26000|
0063ec  8800              LDRH     r0,[r0,#0]            ;9343  ; VZ_KIND
0063ee  2801              CMP      r0,#1                 ;9343
0063f0  d103              BNE      |L1.25594|
0063f2  f04f0032          MOV      r0,#0x32              ;9343
0063f6  f8a40048          STRH     r0,[r4,#0x48]         ;9343
                  |L1.25594|
0063fa  f24032f2          MOV      r2,#0x3f2             ;9346
0063fe  210a              MOVS     r1,#0xa               ;9346
006400  4864              LDR      r0,|L1.26004|
006402  f7fffffe          BL       gran
006406  4864              LDR      r0,|L1.26008|
006408  8800              LDRH     r0,[r0,#0]            ;9347  ; net_av_2min_timer
00640a  b110              CBZ      r0,|L1.25618|
00640c  8ea0              LDRH     r0,[r4,#0x34]         ;9347  ; cntrl_stat_old
00640e  f8a40048          STRH     r0,[r4,#0x48]         ;9347
                  |L1.25618|
006412  f8b40048          LDRH     r0,[r4,#0x48]         ;9348  ; cntrl_stat_new
006416  86a0              STRH     r0,[r4,#0x34]         ;9348
006418  8660              STRH     r0,[r4,#0x32]         ;9349
00641a  4860              LDR      r0,|L1.26012|
00641c  f9b00000          LDRSH    r0,[r0,#0]            ;9351  ; ICA_EN
006420  b938              CBNZ     r0,|L1.25650|
006422  8839              LDRH     r1,[r7,#0]  ; ica_cntrl_hndl_cnt
006424  b129              CBZ      r1,|L1.25650|
;;;9354   			{
;;;9355   			cntrl_stat = ica_cntrl_hndl;
006426  495e              LDR      r1,|L1.26016|
006428  8809              LDRH     r1,[r1,#0]  ; ica_cntrl_hndl
00642a  8661              STRH     r1,[r4,#0x32]
;;;9356   			cntrl_stat_new = ica_cntrl_hndl;//=10*PWM_START;
00642c  f8a41048          STRH     r1,[r4,#0x48]
;;;9357   			cntrl_stat_old = ica_cntrl_hndl;//=10*PWM_START;
006430  86a1              STRH     r1,[r4,#0x34]
                  |L1.25650|
;;;9358   			}
;;;9359   		}
;;;9360   	
;;;9361   	if((ICA_EN==1)||(ICA_EN==2))
006432  2801              CMP      r0,#1
006434  d001              BEQ      |L1.25658|
006436  2802              CMP      r0,#2
006438  d105              BNE      |L1.25670|
                  |L1.25658|
;;;9362   		{
;;;9363   		cntrl_stat=cntrl_stat_new+ica_u_necc;
00643a  495a              LDR      r1,|L1.26020|
00643c  f8b40048          LDRH     r0,[r4,#0x48]  ; cntrl_stat_new
006440  8809              LDRH     r1,[r1,#0]  ; ica_u_necc
006442  4408              ADD      r0,r0,r1
006444  8660              STRH     r0,[r4,#0x32]
                  |L1.25670|
;;;9364   		}			
;;;9365   	}
;;;9366   #else
;;;9367   else if((b1Hz_ch)&&((!bIBAT_SMKLBR)||(bps[8]._cnt>40)))
;;;9368   	{
;;;9369   	cntrl_hndl_plazma=37;
;;;9370   	cntrl_stat_new=cntrl_stat_old;
;;;9371   	
;;;9372   	if((Ibmax/10)>(2*IZMAX_))
;;;9373   		{
;;;9374   		cntrl_hndl_plazma=38;
;;;9375             if(cntrl_stat_blok_cnt)cntrl_stat_new--;
;;;9376   		else	cntrl_stat_new-=10;
;;;9377   		}		
;;;9378   	else if(((Ibmax/10)<(IZMAX_*2))&&(Ibmax>(IZMAX_*15)))
;;;9379   		{
;;;9380   		cntrl_hndl_plazma=39;
;;;9381             if(cntrl_stat_blok_cnt)cntrl_stat_new--;
;;;9382             else	cntrl_stat_new-=3;
;;;9383   		}   
;;;9384   	else if((Ibmax<(IZMAX_*15))&&((Ibmax/10)>IZMAX_))
;;;9385   		{
;;;9386   		cntrl_hndl_plazma=40;
;;;9387   		cntrl_stat_new--;
;;;9388   		}
;;;9389   		
;;;9390   	else if(load_U<u_necc)
;;;9391   		{
;;;9392   		cntrl_hndl_plazma=41;
;;;9393   		if(load_U<(u_necc-(UB0-UB20)))
;;;9394   			{
;;;9395   			cntrl_hndl_plazma=42;
;;;9396   			if(Ibmax<0)
;;;9397   				{
;;;9398   				cntrl_hndl_plazma=43;
;;;9399                       if(cntrl_stat_blok_cnt)cntrl_stat_new++;
;;;9400   				else cntrl_stat_new+=10;
;;;9401   				}
;;;9402   			else if(Ibmax<(IZMAX_*5))
;;;9403   				{
;;;9404   				cntrl_hndl_plazma=44;
;;;9405                       if(cntrl_stat_blok_cnt)cntrl_stat_new++;
;;;9406   				else	cntrl_stat_new+=2;
;;;9407   				}
;;;9408   			else if(Ibmax<((IZMAX_*95)/10))
;;;9409   				{
;;;9410   				cntrl_hndl_plazma=45;
;;;9411   				cntrl_stat_new++;
;;;9412   				}					
;;;9413   			}
;;;9414   		else if(load_U<(u_necc-((UB0-UB20)/4)))
;;;9415   			{
;;;9416   			cntrl_hndl_plazma=46;
;;;9417   			if(Ibmax<(IZMAX_*5))
;;;9418   				{
;;;9419   				cntrl_hndl_plazma=47;
;;;9420                       if(cntrl_stat_blok_cnt)cntrl_stat_new++;
;;;9421   				else	cntrl_stat_new+=2;
;;;9422   				}
;;;9423   			else if(Ibmax<((IZMAX_*95)/10))
;;;9424   				{
;;;9425   				cntrl_hndl_plazma=48;
;;;9426   				cntrl_stat_new++;
;;;9427   				}					
;;;9428   			}	
;;;9429   		else if(load_U<(u_necc-1))
;;;9430   			{
;;;9431   			cntrl_hndl_plazma=49;
;;;9432   			if(Ibmax<((IZMAX_*95)/10))
;;;9433   				{
;;;9434   				cntrl_hndl_plazma=50;
;;;9435   				cntrl_stat_new++;
;;;9436   				}					
;;;9437   			}					
;;;9438   		}	
;;;9439   	else if((load_U>u_necc)/*&&(!cntrl_blok)*/)
;;;9440   		{
;;;9441   		cntrl_hndl_plazma=51;
;;;9442   		if(load_U>(u_necc+(UB0-UB20)))
;;;9443   			{
;;;9444   			cntrl_hndl_plazma=52;
;;;9445                  if(cntrl_stat_blok_cnt)cntrl_stat_new--;
;;;9446   			else	cntrl_stat_new-=10;
;;;9447   			}
;;;9448   		else if(load_U>(u_necc+((UB0-UB20)/4)))
;;;9449   			{
;;;9450   			cntrl_hndl_plazma=53;
;;;9451                  if(cntrl_stat_blok_cnt)cntrl_stat_new--;
;;;9452   			else cntrl_stat_new-=2;
;;;9453   			}	
;;;9454   		else if(load_U>(u_necc+1))
;;;9455   			{
;;;9456   			cntrl_hndl_plazma=54;
;;;9457   			cntrl_stat_new--;
;;;9458   			}					
;;;9459   		}
;;;9460   
;;;9461   	gran(&cntrl_stat_new,10,1022);
;;;9462   				
;;;9463   	cntrl_stat_old=cntrl_stat_new;
;;;9464   	cntrl_stat=cntrl_stat_new;	
;;;9465   	}
;;;9466   #endif
;;;9467   
;;;9468   iiii=0;
006446  7625              STRB     r5,[r4,#0x18]
;;;9469   for(i=0;i<NUMIST;i++)
006448  75e5              STRB     r5,[r4,#0x17]
00644a  4857              LDR      r0,|L1.26024|
00644c  f9b01000          LDRSH    r1,[r0,#0]
006450  e00c              B        |L1.25708|
                  |L1.25682|
;;;9470        {
;;;9471        if(bps[i]._cnt<30)iiii=1;
006452  eb0002c0          ADD      r2,r0,r0,LSL #3
006456  eb021200          ADD      r2,r2,r0,LSL #4
00645a  eb090282          ADD      r2,r9,r2,LSL #2
00645e  78d2              LDRB     r2,[r2,#3]
006460  2a1e              CMP      r2,#0x1e
006462  d200              BCS      |L1.25702|
006464  7626              STRB     r6,[r4,#0x18]
                  |L1.25702|
006466  f1000001          ADD      r0,r0,#1              ;9469
00646a  75e0              STRB     r0,[r4,#0x17]         ;9469
                  |L1.25708|
00646c  7de0              LDRB     r0,[r4,#0x17]         ;9469  ; i
00646e  4288              CMP      r0,r1                 ;9469
006470  dbef              BLT      |L1.25682|
;;;9472        }
;;;9473   
;;;9474   if(iiii==0)
006472  7e20              LDRB     r0,[r4,#0x18]  ; iiii
006474  b948              CBNZ     r0,|L1.25738|
;;;9475   	{
;;;9476   	cntrl_stat=600;	
;;;9477   	cntrl_stat_old=600;
;;;9478   	cntrl_stat_new=600;
;;;9479   	cntrl_stat=10*PWM_START;
006476  484d              LDR      r0,|L1.26028|
006478  8800              LDRH     r0,[r0,#0]  ; PWM_START
00647a  eb000080          ADD      r0,r0,r0,LSL #2
00647e  ea4f0040          LSL      r0,r0,#1
006482  8660              STRH     r0,[r4,#0x32]
;;;9480   	cntrl_stat_old=10*PWM_START;
006484  86a0              STRH     r0,[r4,#0x34]
;;;9481   	cntrl_stat_new=10*PWM_START;
006486  f8a40048          STRH     r0,[r4,#0x48]
                  |L1.25738|
;;;9482   	}
;;;9483   
;;;9484   #ifdef UKU_220_IPS_TERMOKOMPENSAT
;;;9485   if(ica_cntrl_hndl_cnt)	ica_cntrl_hndl_cnt--;
00648a  f9b70000          LDRSH    r0,[r7,#0]  ; ica_cntrl_hndl_cnt
00648e  b110              CBZ      r0,|L1.25750|
006490  f1a00001          SUB      r0,r0,#1
006494  8038              STRH     r0,[r7,#0]
                  |L1.25750|
;;;9486   
;;;9487   
;;;9488   
;;;9489   #endif
;;;9490   
;;;9491   
;;;9492   gran(&cntrl_stat,10,1022); 
006496  483f              LDR      r0,|L1.26004|
006498  f24032fe          MOV      r2,#0x3fe
00649c  210a              MOVS     r1,#0xa
00649e  3816              SUBS     r0,r0,#0x16
0064a0  f7fffffe          BL       gran
;;;9493   b1Hz_ch=0;
0064a4  75a5              STRB     r5,[r4,#0x16]
                  |L1.25766|
;;;9494   }
0064a6  e8bd9ff0          POP      {r4-r12,pc}
;;;9495   #endif
                          ENDP

                  ext_drv PROC
;;;9984   //-----------------------------------------------
;;;9985   void ext_drv(void)
0064aa  e92d5ff0          PUSH     {r4-r12,lr}
;;;9986   {
;;;9987   char i;
;;;9988   
;;;9989   
;;;9990   for(i=0;i<NUMSK;i++)
0064ae  f04f0000          MOV      r0,#0
0064b2  4a40              LDR      r2,|L1.26036|
;;;9991   	{
;;;9992   	#ifdef UKU_MGTS
;;;9993   	if(adc_buff_[sk_buff_RSTKM[i]]<2000)
;;;9994   	#endif
;;;9995   	#ifdef UKU_RSTKM
;;;9996   	if(adc_buff_[sk_buff_RSTKM[i]]<2000)
;;;9997   	#endif
;;;9998   	#ifdef UKU_3U
;;;9999   	if(adc_buff_[sk_buff_3U[i]]<2000)
;;;10000  	#endif
;;;10001  	#ifdef UKU_GLONASS
;;;10002  	if(adc_buff_[sk_buff_GLONASS[i]]<2000)
;;;10003  	#endif
;;;10004  	#ifdef UKU_KONTUR
;;;10005  	if(adc_buff_[sk_buff_KONTUR[i]]<2000)
;;;10006  	#endif
;;;10007  	#ifdef UKU_6U
;;;10008  	if(adc_buff_[sk_buff_6U[i]]<2000)
;;;10009  	#endif
;;;10010  	#ifdef UKU_220
;;;10011  	if(adc_buff_[sk_buff_220[i]]<2000)
;;;10012  	#endif
;;;10013  	#ifdef UKU_220_V2
;;;10014  	if(adc_buff_[sk_buff_220[i]]<2000)
;;;10015  	#endif
;;;10016  	#ifdef UKU_220_IPS_TERMOKOMPENSAT
;;;10017  	if(adc_buff_[sk_buff_220[i]]<2000)
;;;10018  	#endif
;;;10019  	#ifdef UKU_TELECORE2015	
;;;10020  	if(adc_buff_[sk_buff_TELECORE2015[i]]<2000)	 //TODO
;;;10021  	#endif
;;;10022  	#ifdef UKU_TELECORE2017
;;;10023  	if(adc_buff_[sk_buff_TELECORE2015[i]]<2000)	 //TODO
;;;10024  	#endif
;;;10025  	#ifdef IPS_SGEP_GAZPROM
;;;10026  	if(adc_buff_[sk_buff_6U[i]]<2000)
;;;10027  	#endif		
;;;10028  		{
;;;10029  		if(sk_cnt[i]<10)
0064b4  4b3e              LDR      r3,|L1.26032|
;;;10030  			{
;;;10031  			sk_cnt[i]++;
;;;10032  			if(sk_cnt[i]>=10)
;;;10033  				{
;;;10034  				sk_stat[i]=ssON;
0064b6  4d34              LDR      r5,|L1.25992|
0064b8  f04f0a01          MOV      r10,#1
;;;10035  				}
;;;10036  			}
;;;10037  		else 
;;;10038  			{
;;;10039  			sk_cnt[i]=10;
0064bc  f04f0b0a          MOV      r11,#0xa
0064c0  4606              MOV      r6,r0                 ;9990
0064c2  f9b24000          LDRSH    r4,[r2,#0]            ;9990
0064c6  e025              B        |L1.25876|
                  |L1.25800|
0064c8  493b              LDR      r1,|L1.26040|
0064ca  4f3c              LDR      r7,|L1.26044|
0064cc  5c09              LDRB     r1,[r1,r0]            ;10017
0064ce  f9371011          LDRSH    r1,[r7,r1,LSL #1]     ;10017
0064d2  f5b16ffa          CMP      r1,#0x7d0             ;10017
0064d6  da0e              BGE      |L1.25846|
0064d8  5619              LDRSB    r1,[r3,r0]            ;10029
0064da  290a              CMP      r1,#0xa               ;10029
0064dc  da08              BGE      |L1.25840|
0064de  f1010101          ADD      r1,r1,#1              ;10031
0064e2  b249              SXTB     r1,r1                 ;10031
0064e4  5419              STRB     r1,[r3,r0]            ;10031
0064e6  290a              CMP      r1,#0xa               ;10032
0064e8  db11              BLT      |L1.25870|
0064ea  f805a000          STRB     r10,[r5,r0]           ;10034
0064ee  e00e              B        |L1.25870|
                  |L1.25840|
0064f0  f803b000          STRB     r11,[r3,r0]
0064f4  e00b              B        |L1.25870|
                  |L1.25846|
;;;10040  			}
;;;10041                 
;;;10042  		}
;;;10043  	else
;;;10044  		{
;;;10045  		if(sk_cnt[i]>0)
0064f6  5619              LDRSB    r1,[r3,r0]
0064f8  2900              CMP      r1,#0
0064fa  dd07              BLE      |L1.25868|
;;;10046  			{
;;;10047  			sk_cnt[i]--;
0064fc  f1a10101          SUB      r1,r1,#1
006500  b249              SXTB     r1,r1
006502  5419              STRB     r1,[r3,r0]
;;;10048  			if(sk_cnt[i]<=0)
006504  2900              CMP      r1,#0
006506  dc02              BGT      |L1.25870|
;;;10049  				{
;;;10050  				sk_stat[i]=ssOFF;
006508  542e              STRB     r6,[r5,r0]
00650a  e000              B        |L1.25870|
                  |L1.25868|
;;;10051  				}
;;;10052  			}
;;;10053  		else 
;;;10054  			{
;;;10055  			sk_cnt[i]=0;
00650c  541e              STRB     r6,[r3,r0]
                  |L1.25870|
00650e  f1000001          ADD      r0,r0,#1              ;9990
006512  b2c0              UXTB     r0,r0                 ;9990
                  |L1.25876|
006514  42a0              CMP      r0,r4                 ;9990
006516  dbd7              BLT      |L1.25800|
;;;10056  			}
;;;10057  		}
;;;10058  	}
;;;10059  
;;;10060  for(i=0;i<NUMSK;i++)
006518  f04f0400          MOV      r4,#0
;;;10061  	{
;;;10062  	if(((SK_SIGN[i]==0)&&(sk_stat[i]==ssON))||((SK_SIGN[i])&&(sk_stat[i]==ssOFF)) )
;;;10063  		{
;;;10064  		if(sk_av_cnt[i]<10)
00651c  f8df90a0          LDR      r9,|L1.26048|
;;;10065  			{
;;;10066  			sk_av_cnt[i]++;
;;;10067  			if(sk_av_cnt[i]>=10)
;;;10068  				{
;;;10069  				sk_av_stat[i]=sasON;
006520  4f28              LDR      r7,|L1.26052|
;;;10070  				}
;;;10071  			}
;;;10072  		else 
;;;10073  			{
;;;10074  			sk_av_cnt[i]=10;
;;;10075  			}
;;;10076  		}
;;;10077  	else
;;;10078  		{
;;;10079  		if(sk_av_cnt[i]>=0)
;;;10080  			{
;;;10081  			sk_av_cnt[i]--;
;;;10082  			if(sk_av_cnt[i]<=0)
;;;10083  				{
;;;10084  				sk_av_stat[i]=sasOFF;
;;;10085  				}
;;;10086  			}
;;;10087  		else 
;;;10088  			{
;;;10089  			sk_av_cnt[i]=0;
;;;10090  			}
;;;10091  		}
;;;10092  
;;;10093  #ifndef UKU_KONTUR
;;;10094  	if(sk_av_stat_old[i]!=sk_av_stat[i])
006522  f8df80a4          LDR      r8,|L1.26056|
006526  e0b1              B        |L1.26252|
                  |L1.25896|
006528  4828              LDR      r0,|L1.26060|
00652a  f9300014          LDRSH    r0,[r0,r4,LSL #1]     ;10062
00652e  b910              CBNZ     r0,|L1.25910|
006530  5d29              LDRB     r1,[r5,r4]            ;10062
006532  2901              CMP      r1,#1                 ;10062
006534  d00f              BEQ      |L1.25942|
                  |L1.25910|
006536  b108              CBZ      r0,|L1.25916|
006538  5d28              LDRB     r0,[r5,r4]            ;10062
00653a  b160              CBZ      r0,|L1.25942|
                  |L1.25916|
00653c  f9190004          LDRSB    r0,[r9,r4]            ;10079
006540  2800              CMP      r0,#0                 ;10079
006542  db48              BLT      |L1.26070|
006544  f1a00001          SUB      r0,r0,#1              ;10081
006548  b240              SXTB     r0,r0                 ;10081
00654a  f8090004          STRB     r0,[r9,r4]            ;10081
00654e  2800              CMP      r0,#0                 ;10082
006550  dc43              BGT      |L1.26074|
006552  553e              STRB     r6,[r7,r4]            ;10084
006554  e041              B        |L1.26074|
                  |L1.25942|
006556  f9190004          LDRSB    r0,[r9,r4]            ;10064
00655a  280a              CMP      r0,#0xa               ;10064
00655c  da38              BGE      |L1.26064|
00655e  f1000001          ADD      r0,r0,#1              ;10066
006562  b240              SXTB     r0,r0                 ;10066
006564  f8090004          STRB     r0,[r9,r4]            ;10066
006568  280a              CMP      r0,#0xa               ;10067
00656a  db36              BLT      |L1.26074|
00656c  f807a004          STRB     r10,[r7,r4]           ;10069
006570  e033              B        |L1.26074|
006572  0000              DCW      0x0000
                  |L1.25972|
                          DCD      bIBAT_SMKLBR
                  |L1.25976|
                          DCD      UB0
                  |L1.25980|
                          DCD      UB20
                  |L1.25984|
                          DCD      TERMOKOMPENS
                  |L1.25988|
                          DCD      hv_vz_stat
                  |L1.25992|
                          DCD      sk_stat
                  |L1.25996|
                          DCD      sk_stat_old
                  |L1.26000|
                          DCD      VZ_KIND
                  |L1.26004|
                          DCD      ||area_number.25||+0x48
                  |L1.26008|
                          DCD      net_av_2min_timer
                  |L1.26012|
                          DCD      ICA_EN
                  |L1.26016|
                          DCD      ica_cntrl_hndl
                  |L1.26020|
                          DCD      ica_u_necc
                  |L1.26024|
                          DCD      NUMIST
                  |L1.26028|
                          DCD      PWM_START
                  |L1.26032|
                          DCD      sk_cnt
                  |L1.26036|
                          DCD      NUMSK
                  |L1.26040|
                          DCD      ||area_number.19||
                  |L1.26044|
                          DCD      ||.bss||+0x40c
                  |L1.26048|
                          DCD      sk_av_cnt
                  |L1.26052|
                          DCD      sk_av_stat
                  |L1.26056|
                          DCD      sk_av_stat_old
                  |L1.26060|
                          DCD      SK_SIGN
                  |L1.26064|
0065d0  f809b004          STRB     r11,[r9,r4]           ;10074
0065d4  e001              B        |L1.26074|
                  |L1.26070|
0065d6  f8096004          STRB     r6,[r9,r4]            ;10089
                  |L1.26074|
0065da  f8181004          LDRB     r1,[r8,r4]
0065de  5d38              LDRB     r0,[r7,r4]
0065e0  4281              CMP      r1,r0
0065e2  d04d              BEQ      |L1.26240|
;;;10095  		{
;;;10096  		plazma_sk++;
0065e4  4af8              LDR      r2,|L1.27080|
0065e6  8811              LDRH     r1,[r2,#0]  ; plazma_sk
0065e8  f1010101          ADD      r1,r1,#1
0065ec  8011              STRH     r1,[r2,#0]
;;;10097  		if(sk_av_stat[i]==sasON)
0065ee  2801              CMP      r0,#1
0065f0  d007              BEQ      |L1.26114|
;;;10098  			{
;;;10099  			if(i==0)snmp_trap_send("SK #1 Alarm",15,1,1);
;;;10100  			else if(i==1)
;;;10101  				{
;;;10102  				#ifndef UKU_TELEKORE2017
;;;10103  				snmp_trap_send("SK #2 Alarm",15,2,1);
;;;10104  				#endif
;;;10105  				#ifdef UKU_TELEKORE2017
;;;10106  				snmp_trap_send("Door open",15,2,1);
;;;10107  				#endif
;;;10108  				}
;;;10109  			else if(i==2)snmp_trap_send("SK #3 Alarm",15,3,1);
;;;10110  			else if(i==3)snmp_trap_send("SK #4 Alarm",15,4,1);
;;;10111  			}
;;;10112  		else 
;;;10113  			{
;;;10114  			if(i==0)snmp_trap_send("SK #1 Alarm is off",15,1,0);
0065f2  b354              CBZ      r4,|L1.26186|
;;;10115  			else if(i==1)
0065f4  2c01              CMP      r4,#1
0065f6  d02f              BEQ      |L1.26200|
;;;10116  				{
;;;10117  				#ifndef UKU_TELEKORE2017
;;;10118  				snmp_trap_send("SK #2 Alarm is off",15,2,0);
;;;10119  				#endif
;;;10120  				#ifdef UKU_TELEKORE2017
;;;10121  				snmp_trap_send("Door open clear",15,2,0);
;;;10122  				#endif
;;;10123  				}
;;;10124  			else if(i==2)snmp_trap_send("SK #3 Alarm is off",15,3,0);
0065f8  2c02              CMP      r4,#2
0065fa  d034              BEQ      |L1.26214|
;;;10125  			else if(i==3)snmp_trap_send("SK #4 Alarm is off",15,4,0);
0065fc  2c03              CMP      r4,#3
0065fe  d039              BEQ      |L1.26228|
006600  e03e              B        |L1.26240|
                  |L1.26114|
006602  b134              CBZ      r4,|L1.26130|
006604  2c01              CMP      r4,#1                 ;10100
006606  d00b              BEQ      |L1.26144|
006608  2c02              CMP      r4,#2                 ;10109
00660a  d010              BEQ      |L1.26158|
00660c  2c03              CMP      r4,#3                 ;10110
00660e  d015              BEQ      |L1.26172|
006610  e036              B        |L1.26240|
                  |L1.26130|
006612  2301              MOVS     r3,#1                 ;10099
006614  461a              MOV      r2,r3                 ;10099
006616  210f              MOVS     r1,#0xf               ;10099
006618  a0ec              ADR      r0,|L1.27084|
00661a  f7fffffe          BL       snmp_trap_send
00661e  e02f              B        |L1.26240|
                  |L1.26144|
006620  2301              MOVS     r3,#1                 ;10103
006622  2202              MOVS     r2,#2                 ;10103
006624  210f              MOVS     r1,#0xf               ;10103
006626  a0ec              ADR      r0,|L1.27096|
006628  f7fffffe          BL       snmp_trap_send
00662c  e028              B        |L1.26240|
                  |L1.26158|
00662e  2301              MOVS     r3,#1                 ;10109
006630  2203              MOVS     r2,#3                 ;10109
006632  210f              MOVS     r1,#0xf               ;10109
006634  a0eb              ADR      r0,|L1.27108|
006636  f7fffffe          BL       snmp_trap_send
00663a  e021              B        |L1.26240|
                  |L1.26172|
00663c  2301              MOVS     r3,#1                 ;10110
00663e  2204              MOVS     r2,#4                 ;10110
006640  210f              MOVS     r1,#0xf               ;10110
006642  a0eb              ADR      r0,|L1.27120|
006644  f7fffffe          BL       snmp_trap_send
006648  e01a              B        |L1.26240|
                  |L1.26186|
00664a  2300              MOVS     r3,#0                 ;10114
00664c  2201              MOVS     r2,#1                 ;10114
00664e  210f              MOVS     r1,#0xf               ;10114
006650  a0ea              ADR      r0,|L1.27132|
006652  f7fffffe          BL       snmp_trap_send
006656  e013              B        |L1.26240|
                  |L1.26200|
006658  2300              MOVS     r3,#0                 ;10118
00665a  2202              MOVS     r2,#2                 ;10118
00665c  210f              MOVS     r1,#0xf               ;10118
00665e  a0ec              ADR      r0,|L1.27152|
006660  f7fffffe          BL       snmp_trap_send
006664  e00c              B        |L1.26240|
                  |L1.26214|
006666  2300              MOVS     r3,#0                 ;10124
006668  2203              MOVS     r2,#3                 ;10124
00666a  210f              MOVS     r1,#0xf               ;10124
00666c  a0ed              ADR      r0,|L1.27172|
00666e  f7fffffe          BL       snmp_trap_send
006672  e005              B        |L1.26240|
                  |L1.26228|
006674  2300              MOVS     r3,#0
006676  2204              MOVS     r2,#4
006678  210f              MOVS     r1,#0xf
00667a  a0ef              ADR      r0,|L1.27192|
00667c  f7fffffe          BL       snmp_trap_send
                  |L1.26240|
;;;10126  			}
;;;10127  	 	}
;;;10128  #endif
;;;10129  
;;;10130  #ifdef UKU_KONTUR
;;;10131  	if(sk_av_stat_old[i]!=sk_av_stat[i])
;;;10132  		{
;;;10133  		plazma_sk++;
;;;10134  		if(sk_av_stat[i]==sasON)
;;;10135  			{
;;;10136  			if(i==0)snmp_trap_send("Door is opened",15,1,1);
;;;10137  			else if(i==1)snmp_trap_send("Smoke Alarm",15,2,1);
;;;10138  			else if(i==2)snmp_trap_send("Shock Sensor Alarm",15,3,1);
;;;10139  			else if(i==3)snmp_trap_send("SK #4 Alarm",15,4,1);
;;;10140  			}
;;;10141  		else 
;;;10142  			{
;;;10143  			if(i==0)snmp_trap_send("Door is closed",15,1,0);
;;;10144  			else if(i==1)snmp_trap_send("Smoke Alarm is off",15,2,0);
;;;10145  			else if(i==2)snmp_trap_send("Shock Sensor Alarm is off",15,3,0);
;;;10146  			else if(i==3)snmp_trap_send("SK #4 Alarm is off",15,4,0);
;;;10147  			}
;;;10148  	 	}
;;;10149  #endif
;;;10150  	sk_av_stat_old[i]=sk_av_stat[i];
006680  5d38              LDRB     r0,[r7,r4]
006682  f8080004          STRB     r0,[r8,r4]
006686  f1040401          ADD      r4,r4,#1              ;10060
00668a  b2e4              UXTB     r4,r4                 ;10060
                  |L1.26252|
00668c  48ef              LDR      r0,|L1.27212|
00668e  f9b00000          LDRSH    r0,[r0,#0]            ;10060  ; NUMSK
006692  4284              CMP      r4,r0                 ;10060
006694  f6ffaf48          BLT      |L1.25896|
;;;10151  	}
;;;10152  }
006698  e705              B        |L1.25766|
;;;10153  
                          ENDP

                  zar_superviser_start PROC
;;;10190  //-----------------------------------------------
;;;10191  void zar_superviser_start(void)
00669a  4aed              LDR      r2,|L1.27216|
;;;10192  {
;;;10193  sign_U[0]=1;
00669c  f04f0001          MOV      r0,#1
0066a0  7010              STRB     r0,[r2,#0]
;;;10194  sign_I[0]=1;
0066a2  49ec              LDR      r1,|L1.27220|
0066a4  7008              STRB     r0,[r1,#0]
;;;10195  sign_U[1]=1;
0066a6  7050              STRB     r0,[r2,#1]
;;;10196  sign_I[1]=1;
0066a8  7048              STRB     r0,[r1,#1]
;;;10197  
;;;10198  }
0066aa  4770              BX       lr
;;;10199  
                          ENDP

                  zar_superviser_drv PROC
;;;10155  //-----------------------------------------------
;;;10156  void zar_superviser_drv(void)
0066ac  e92d5ff0          PUSH     {r4-r12,lr}
;;;10157  {
;;;10158  
;;;10159  if(((bat[0]._Ub>u_necc_up) || (bat[0]._Ub<u_necc_dn))&&(main_kb_cnt<((TBAT*60)-30))&&(main_kb_cnt>((TBAT*60)-150))) sign_U[0]=0;
0066b0  48ea              LDR      r0,|L1.27228|
0066b2  f8df93ac          LDR      r9,|L1.27232|
0066b6  f8df83a0          LDR      r8,|L1.27224|
0066ba  f9b0c000          LDRSH    r12,[r0,#0]  ; u_necc_up
0066be  f9b90000          LDRSH    r0,[r9,#0]
0066c2  4cc1              LDR      r4,|L1.27080|
0066c4  ebc01100          RSB      r1,r0,r0,LSL #4
0066c8  3c46              SUBS     r4,r4,#0x46
0066ca  f9b87002          LDRSH    r7,[r8,#2]  ; bat
0066ce  f06f0a1d          MVN      r10,#0x1d
0066d2  f06f0b95          MVN      r11,#0x95
0066d6  2500              MOVS     r5,#0
0066d8  4edd              LDR      r6,|L1.27216|
0066da  f9b40052          LDRSH    r0,[r4,#0x52]
0066de  eb0a0281          ADD      r2,r10,r1,LSL #2
0066e2  eb0b0381          ADD      r3,r11,r1,LSL #2
0066e6  4567              CMP      r7,r12
0066e8  dc05              BGT      |L1.26358|
0066ea  f8dfc378          LDR      r12,|L1.27236|
0066ee  f9bcc000          LDRSH    r12,[r12,#0]  ; u_necc_dn
0066f2  4567              CMP      r7,r12
0066f4  da04              BGE      |L1.26368|
                  |L1.26358|
0066f6  4282              CMP      r2,r0
0066f8  dd02              BLE      |L1.26368|
0066fa  4283              CMP      r3,r0
0066fc  da00              BGE      |L1.26368|
0066fe  7035              STRB     r5,[r6,#0]
                  |L1.26368|
;;;10160  
;;;10161  if(((bat[0]._Ib>(2*IKB)) || (bat[0]._Ib<(-IKB*2))) &&(main_kb_cnt<((TBAT*60)-30))&&(main_kb_cnt>((TBAT*60)-150))) sign_I[0]=0;
006700  4fd9              LDR      r7,|L1.27240|
006702  f9b8c008          LDRSH    r12,[r8,#8]  ; bat
006706  f9b7e000          LDRSH    lr,[r7,#0]  ; IKB
00670a  4fd2              LDR      r7,|L1.27220|
00670c  ebbc0f4e          CMP      r12,lr,LSL #1
006710  dc04              BGT      |L1.26396|
006712  f1ce0e00          RSB      lr,lr,#0
006716  ebbc0f4e          CMP      r12,lr,LSL #1
00671a  da04              BGE      |L1.26406|
                  |L1.26396|
00671c  4282              CMP      r2,r0
00671e  dd02              BLE      |L1.26406|
006720  4283              CMP      r3,r0
006722  da00              BGE      |L1.26406|
006724  703d              STRB     r5,[r7,#0]
                  |L1.26406|
;;;10162  																 
;;;10163  if((main_kb_cnt==((TBAT*60)-10)) &&(spc_stat==spcOFF))
006726  f06f0209          MVN      r2,#9
00672a  eb020181          ADD      r1,r2,r1,LSL #2
00672e  4281              CMP      r1,r0
006730  d121              BNE      |L1.26486|
006732  f8940023          LDRB     r0,[r4,#0x23]  ; spc_stat
006736  b9f0              CBNZ     r0,|L1.26486|
;;;10164  	{
;;;10165  	if((sign_U[0]==1) && (sign_I[0]==1) && (lc640_read_int(EE_BAT1_ZAR_CNT)!=BAT_C_REAL[0]) && (NUMBAT) && (!(bat[0]._av&1)))
006738  7830              LDRB     r0,[r6,#0]  ; sign_U
00673a  2801              CMP      r0,#1
00673c  d11b              BNE      |L1.26486|
00673e  7838              LDRB     r0,[r7,#0]  ; sign_I
006740  2801              CMP      r0,#1
006742  d118              BNE      |L1.26486|
006744  f44f70ef          MOV      r0,#0x1de
006748  f7fffffe          BL       lc640_read_int
00674c  49c7              LDR      r1,|L1.27244|
00674e  f9b11000          LDRSH    r1,[r1,#0]  ; BAT_C_REAL
006752  4288              CMP      r0,r1
006754  d00f              BEQ      |L1.26486|
006756  48c6              LDR      r0,|L1.27248|
006758  8800              LDRH     r0,[r0,#0]  ; NUMBAT
00675a  b160              CBZ      r0,|L1.26486|
00675c  f898003d          LDRB     r0,[r8,#0x3d]  ; bat
006760  07c0              LSLS     r0,r0,#31
006762  d108              BNE      |L1.26486|
;;;10166  		{
;;;10167  		lc640_write_int(EE_BAT1_ZAR_CNT,BAT_C_REAL[0]);
006764  f44f70ef          MOV      r0,#0x1de
006768  f7fffffe          BL       lc640_write_int
;;;10168  		superviser_cnt++;
00676c  48c1              LDR      r0,|L1.27252|
00676e  7801              LDRB     r1,[r0,#0]  ; superviser_cnt
006770  f1010101          ADD      r1,r1,#1
006774  7001              STRB     r1,[r0,#0]
                  |L1.26486|
;;;10169  		}
;;;10170  	
;;;10171  	}
;;;10172  
;;;10173  if(((bat[0]._Ub>u_necc_up) || (bat[1]._Ub<u_necc_dn))&&(main_kb_cnt<((TBAT*60)-30))&&(main_kb_cnt>((TBAT*60)-150))) sign_U[1]=0;
006776  48b9              LDR      r0,|L1.27228|
006778  f9b81002          LDRSH    r1,[r8,#2]  ; bat
00677c  f9b00000          LDRSH    r0,[r0,#0]  ; u_necc_up
006780  4281              CMP      r1,r0
006782  dc06              BGT      |L1.26514|
006784  48b7              LDR      r0,|L1.27236|
006786  f9b8104e          LDRSH    r1,[r8,#0x4e]  ; bat
00678a  f9b00000          LDRSH    r0,[r0,#0]  ; u_necc_dn
00678e  4281              CMP      r1,r0
006790  da0e              BGE      |L1.26544|
                  |L1.26514|
006792  f9b90000          LDRSH    r0,[r9,#0]  ; TBAT
006796  f9b41052          LDRSH    r1,[r4,#0x52]  ; main_kb_cnt
00679a  ebc01000          RSB      r0,r0,r0,LSL #4
00679e  eb0a0280          ADD      r2,r10,r0,LSL #2
0067a2  428a              CMP      r2,r1
0067a4  dd04              BLE      |L1.26544|
0067a6  eb0b0080          ADD      r0,r11,r0,LSL #2
0067aa  4288              CMP      r0,r1
0067ac  da00              BGE      |L1.26544|
0067ae  7075              STRB     r5,[r6,#1]
                  |L1.26544|
;;;10174  
;;;10175  if(((bat[1]._Ib>(2*IKB)) || (bat[1]._Ib<(-IKB*2))) &&(main_kb_cnt<((TBAT*60)-30))&&(main_kb_cnt>((TBAT*60)-150))) sign_I[1]=0;
0067b0  49ad              LDR      r1,|L1.27240|
0067b2  f9b80054          LDRSH    r0,[r8,#0x54]  ; bat
0067b6  f9b11000          LDRSH    r1,[r1,#0]  ; IKB
0067ba  ebb00f41          CMP      r0,r1,LSL #1
0067be  dc03              BGT      |L1.26568|
0067c0  4249              RSBS     r1,r1,#0
0067c2  ebb00f41          CMP      r0,r1,LSL #1
0067c6  da0e              BGE      |L1.26598|
                  |L1.26568|
0067c8  f9b90000          LDRSH    r0,[r9,#0]  ; TBAT
0067cc  f9b41052          LDRSH    r1,[r4,#0x52]  ; main_kb_cnt
0067d0  ebc01000          RSB      r0,r0,r0,LSL #4
0067d4  eb0a0280          ADD      r2,r10,r0,LSL #2
0067d8  428a              CMP      r2,r1
0067da  dd04              BLE      |L1.26598|
0067dc  eb0b0080          ADD      r0,r11,r0,LSL #2
0067e0  4288              CMP      r0,r1
0067e2  da00              BGE      |L1.26598|
0067e4  707d              STRB     r5,[r7,#1]
                  |L1.26598|
;;;10176  																 
;;;10177  if((main_kb_cnt==((TBAT*60)-10)) &&(spc_stat==spcOFF))
0067e6  f9b90000          LDRSH    r0,[r9,#0]  ; TBAT
0067ea  ebc01100          RSB      r1,r0,r0,LSL #4
0067ee  f06f0009          MVN      r0,#9
0067f2  eb000081          ADD      r0,r0,r1,LSL #2
0067f6  f9b41052          LDRSH    r1,[r4,#0x52]  ; main_kb_cnt
0067fa  4288              CMP      r0,r1
0067fc  d122              BNE      |L1.26692|
0067fe  f8940023          LDRB     r0,[r4,#0x23]  ; spc_stat
006802  b9f8              CBNZ     r0,|L1.26692|
;;;10178  	{
;;;10179  	if((sign_U[1]==1) && (sign_I[1]==1) && (lc640_read_int(EE_BAT2_ZAR_CNT)!=BAT_C_REAL[1]) && (NUMBAT==2) && (!(bat[1]._av&1)))
006804  7870              LDRB     r0,[r6,#1]  ; sign_U
006806  2801              CMP      r0,#1
006808  d11c              BNE      |L1.26692|
00680a  7878              LDRB     r0,[r7,#1]  ; sign_I
00680c  2801              CMP      r0,#1
00680e  d119              BNE      |L1.26692|
006810  f44f75fe          MOV      r5,#0x1fc
006814  4628              MOV      r0,r5
006816  f7fffffe          BL       lc640_read_int
00681a  4994              LDR      r1,|L1.27244|
00681c  f9b11002          LDRSH    r1,[r1,#2]  ; BAT_C_REAL
006820  4288              CMP      r0,r1
006822  d00f              BEQ      |L1.26692|
006824  4892              LDR      r0,|L1.27248|
006826  8800              LDRH     r0,[r0,#0]  ; NUMBAT
006828  2802              CMP      r0,#2
00682a  d10b              BNE      |L1.26692|
00682c  f8980089          LDRB     r0,[r8,#0x89]  ; bat
006830  07c0              LSLS     r0,r0,#31
006832  d107              BNE      |L1.26692|
;;;10180  		{
;;;10181  		lc640_write_int(EE_BAT2_ZAR_CNT,BAT_C_REAL[1]);
006834  4628              MOV      r0,r5
006836  f7fffffe          BL       lc640_write_int
;;;10182  		superviser_cnt++;
00683a  488e              LDR      r0,|L1.27252|
00683c  7801              LDRB     r1,[r0,#0]  ; superviser_cnt
00683e  f1010101          ADD      r1,r1,#1
006842  7001              STRB     r1,[r0,#0]
                  |L1.26692|
;;;10183  		}
;;;10184  	
;;;10185  	}
;;;10186  
;;;10187  if(main_kb_cnt==((TBAT*60)-2)) zar_superviser_start();
006844  f9b90000          LDRSH    r0,[r9,#0]  ; TBAT
006848  f06f0101          MVN      r1,#1
00684c  ebc01000          RSB      r0,r0,r0,LSL #4
006850  eb010080          ADD      r0,r1,r0,LSL #2
006854  f9b41052          LDRSH    r1,[r4,#0x52]  ; main_kb_cnt
006858  4288              CMP      r0,r1
00685a  d102              BNE      |L1.26722|
00685c  e8bd5ff0          POP      {r4-r12,lr}
006860  e7fe              B        zar_superviser_start
                  |L1.26722|
;;;10188  }
006862  e620              B        |L1.25766|
;;;10189  
                          ENDP

                  npn_hndl PROC
;;;10200  //-----------------------------------------------
;;;10201  void npn_hndl(void)
006864  e92d03f0          PUSH     {r4-r9}
;;;10202  {
;;;10203  if(NPN_OUT!=npnoOFF)
006868  4883              LDR      r0,|L1.27256|
;;;10204  	{
;;;10205  /*	if(NPN_SIGN==npnsAVNET)
;;;10206  		{
;;;10207  		if(net_av==1)
;;;10208  			{
;;;10209  			if(npn_tz_cnt<TZNPN)
;;;10210  				{
;;;10211  				npn_tz_cnt++;
;;;10212  				if(npn_tz_cnt==TZNPN)
;;;10213  					{
;;;10214  					npn_stat=npnsOFF;
;;;10215  					}
;;;10216  				}
;;;10217  			}
;;;10218  		else
;;;10219  			{
;;;10220  			if(npn_tz_cnt)
;;;10221  				{
;;;10222  				npn_tz_cnt--;
;;;10223  				if(npn_tz_cnt==0)
;;;10224  					{
;;;10225  					npn_stat=npnsON;
;;;10226  					}
;;;10227  				}
;;;10228  			}
;;;10229  		}*/
;;;10230  /*	if(NPN_SIGN==npnsULOAD)
;;;10231  		{
;;;10232  		if(load_U<UONPN)
;;;10233  			{
;;;10234  			if(npn_tz_cnt<TZNPN)
;;;10235  				{
;;;10236  				npn_tz_cnt++;
;;;10237  				if(npn_tz_cnt==TZNPN)
;;;10238  					{
;;;10239  					npn_stat=npnsOFF;
;;;10240  					}
;;;10241  				}
;;;10242  			}
;;;10243  		else if(load_U>UVNPN)
;;;10244  			{
;;;10245  			if(npn_tz_cnt)
;;;10246  				{
;;;10247  				npn_tz_cnt--;
;;;10248  				if(npn_tz_cnt==0)
;;;10249  					{
;;;10250  					npn_stat=npnsON;
;;;10251  					}
;;;10252  				}
;;;10253  			}
;;;10254  		}*/
;;;10255  
;;;10256  	if((load_U<UONPN)&&((net_Ua<UMN)||(net_Ub<UMN)||(net_Uc<UMN)))
;;;10257  		{
;;;10258  		if(npn_tz_cnt<TZNPN)
00686a  4f84              LDR      r7,|L1.27260|
;;;10259  			{
;;;10260  			npn_tz_cnt++;
;;;10261  			if(npn_tz_cnt==TZNPN)
;;;10262  				{
;;;10263  				npn_stat=npnsOFF;
00686c  4e84              LDR      r6,|L1.27264|
00686e  7800              LDRB     r0,[r0,#0]            ;10203  ; NPN_OUT
006870  f04f0c00          MOV      r12,#0                ;10203
;;;10264  				}
;;;10265  			}
;;;10266  		}
;;;10267  	else if((load_U>UVNPN)&&(net_Ua>UMN)&&(net_Ub>UMN)&&(net_Uc>UMN))
;;;10268  		{
;;;10269  		if(npn_tz_cnt)
;;;10270  			{
;;;10271  			npn_tz_cnt--;
;;;10272  			if(npn_tz_cnt==0)
;;;10273  				{
;;;10274  				npn_stat=npnsON;
006874  f04f0801          MOV      r8,#1
006878  b3e8              CBZ      r0,|L1.26870|
00687a  4882              LDR      r0,|L1.27268|
00687c  4639              MOV      r1,r7                 ;10258
00687e  f9b05000          LDRSH    r5,[r0,#0]            ;10256  ; load_U
006882  4881              LDR      r0,|L1.27272|
006884  f9b11000          LDRSH    r1,[r1,#0]            ;10258
006888  f9b09000          LDRSH    r9,[r0,#0]            ;10256  ; UONPN
00688c  487f              LDR      r0,|L1.27276|
00688e  454d              CMP      r5,r9                 ;10256
006890  f9b02000          LDRSH    r2,[r0,#0]            ;10256
006894  487e              LDR      r0,|L1.27280|
006896  f9b03000          LDRSH    r3,[r0,#0]            ;10256
00689a  487e              LDR      r0,|L1.27284|
00689c  f9b04000          LDRSH    r4,[r0,#0]            ;10256
0068a0  487d              LDR      r0,|L1.27288|
0068a2  f9b00000          LDRSH    r0,[r0,#0]            ;10256
0068a6  da13              BGE      |L1.26832|
0068a8  4282              CMP      r2,r0                 ;10256
0068aa  db03              BLT      |L1.26804|
0068ac  4283              CMP      r3,r0                 ;10256
0068ae  db01              BLT      |L1.26804|
0068b0  4284              CMP      r4,r0                 ;10256
0068b2  da0d              BGE      |L1.26832|
                  |L1.26804|
0068b4  4879              LDR      r0,|L1.27292|
0068b6  f9b02000          LDRSH    r2,[r0,#0]            ;10258  ; TZNPN
0068ba  4291              CMP      r1,r2                 ;10258
0068bc  da23              BGE      |L1.26886|
0068be  f1010101          ADD      r1,r1,#1              ;10260
0068c2  b208              SXTH     r0,r1                 ;10260
0068c4  8038              STRH     r0,[r7,#0]            ;10260
0068c6  4290              CMP      r0,r2                 ;10261
0068c8  d11d              BNE      |L1.26886|
0068ca  f886c000          STRB     r12,[r6,#0]           ;10263
0068ce  e01a              B        |L1.26886|
                  |L1.26832|
0068d0  f8dfc1cc          LDR      r12,|L1.27296|
0068d4  f9bcc000          LDRSH    r12,[r12,#0]          ;10267  ; UVNPN
0068d8  4565              CMP      r5,r12                ;10267
0068da  dd14              BLE      |L1.26886|
0068dc  4282              CMP      r2,r0                 ;10267
0068de  dd12              BLE      |L1.26886|
0068e0  4283              CMP      r3,r0                 ;10267
0068e2  dd10              BLE      |L1.26886|
0068e4  4284              CMP      r4,r0                 ;10267
0068e6  dd0e              BLE      |L1.26886|
0068e8  b169              CBZ      r1,|L1.26886|
0068ea  f1a10101          SUB      r1,r1,#1              ;10271
0068ee  b208              SXTH     r0,r1                 ;10271
0068f0  8038              STRH     r0,[r7,#0]            ;10271
0068f2  b940              CBNZ     r0,|L1.26886|
0068f4  e000              B        |L1.26872|
                  |L1.26870|
0068f6  e002              B        |L1.26878|
                  |L1.26872|
0068f8  f8868000          STRB     r8,[r6,#0]
0068fc  e003              B        |L1.26886|
                  |L1.26878|
;;;10275  				}
;;;10276  			}
;;;10277  		}
;;;10278  	}
;;;10279  else
;;;10280  	{
;;;10281  	npn_tz_cnt=0;
0068fe  f8a7c000          STRH     r12,[r7,#0]
;;;10282  	npn_stat=npnsON;
006902  f8868000          STRB     r8,[r6,#0]
                  |L1.26886|
;;;10283  	}
;;;10284  
;;;10285  if(npn_stat==npnsOFF) mess_send(MESS2RELE_HNDL,PARAM_RELE_NPN,1,15);
006906  7830              LDRB     r0,[r6,#0]  ; npn_stat
006908  2800              CMP      r0,#0
00690a  d107              BNE      |L1.26908|
00690c  e8bd03f0          POP      {r4-r9}
006910  230f              MOVS     r3,#0xf
006912  2201              MOVS     r2,#1
006914  216e              MOVS     r1,#0x6e
006916  20d2              MOVS     r0,#0xd2
006918  f7ffbffe          B.W      mess_send
                  |L1.26908|
;;;10286  
;;;10287  
;;;10288  }
00691c  e8bd03f0          POP      {r4-r9}
006920  4770              BX       lr
;;;10289  
                          ENDP

                  loadoff_hndl PROC
;;;10291  //-----------------------------------------------
;;;10292  void loadoff_hndl(void)
006922  b5f0              PUSH     {r4-r7,lr}
;;;10293  {
;;;10294  if((load_U>UONPN)||(load_U<UVNPN))
006924  4857              LDR      r0,|L1.27268|
;;;10295  	{
;;;10296  	if(load_off_cnt<TZNPN)
006926  4d5f              LDR      r5,|L1.27300|
;;;10297  		{
;;;10298  		load_off_cnt++;
;;;10299  		if(load_off_cnt>=TZNPN)
;;;10300  			{
;;;10301  			load_off_stat=npnsOFF;
006928  2700              MOVS     r7,#0
00692a  f9b01000          LDRSH    r1,[r0,#0]            ;10294  ; load_U
00692e  4856              LDR      r0,|L1.27272|
006930  4e5d              LDR      r6,|L1.27304|
006932  f9b02000          LDRSH    r2,[r0,#0]            ;10294  ; UONPN
006936  f9b50000          LDRSH    r0,[r5,#0]            ;10296
00693a  4291              CMP      r1,r2                 ;10294
00693c  dc04              BGT      |L1.26952|
00693e  4b58              LDR      r3,|L1.27296|
006940  f9b33000          LDRSH    r3,[r3,#0]            ;10294  ; UVNPN
006944  4299              CMP      r1,r3                 ;10294
006946  da0d              BGE      |L1.26980|
                  |L1.26952|
006948  4954              LDR      r1,|L1.27292|
00694a  f9b11000          LDRSH    r1,[r1,#0]            ;10296  ; TZNPN
00694e  4288              CMP      r0,r1                 ;10296
006950  da1c              BGE      |L1.27020|
006952  f1000001          ADD      r0,r0,#1              ;10298
006956  b200              SXTH     r0,r0                 ;10298
006958  8028              STRH     r0,[r5,#0]            ;10298
00695a  4288              CMP      r0,r1                 ;10299
00695c  db16              BLT      |L1.27020|
00695e  7037              STRB     r7,[r6,#0]
;;;10302  			load_off_cnt=TZNPN;
006960  8029              STRH     r1,[r5,#0]
006962  e013              B        |L1.27020|
                  |L1.26980|
;;;10303  			}
;;;10304  		}
;;;10305  	}
;;;10306  else if((load_U>(UVNPN+dUNPN))&&(load_U<(UONPN-dUNPN)))
006964  4c51              LDR      r4,|L1.27308|
006966  f9b44000          LDRSH    r4,[r4,#0]  ; dUNPN
00696a  4423              ADD      r3,r3,r4
00696c  428b              CMP      r3,r1
00696e  da0d              BGE      |L1.27020|
006970  1b12              SUBS     r2,r2,r4
006972  428a              CMP      r2,r1
006974  dd0a              BLE      |L1.27020|
;;;10307  	{
;;;10308  	if(load_off_cnt)
006976  b148              CBZ      r0,|L1.27020|
;;;10309  		{
;;;10310  		load_off_cnt--;
006978  f1a00001          SUB      r0,r0,#1
00697c  b200              SXTH     r0,r0
00697e  8028              STRH     r0,[r5,#0]
;;;10311  		if(load_off_cnt<=0)
006980  2800              CMP      r0,#0
006982  dc03              BGT      |L1.27020|
;;;10312  			{
;;;10313  			load_off_stat=npnsON;
006984  f04f0001          MOV      r0,#1
006988  7030              STRB     r0,[r6,#0]
;;;10314  			load_off_cnt=0;
00698a  802f              STRH     r7,[r5,#0]
                  |L1.27020|
;;;10315  			}
;;;10316  		}
;;;10317  	}
;;;10318  
;;;10319  
;;;10320  if(load_off_stat==npnsOFF) tloaddisable_cmnd=10;
00698c  7830              LDRB     r0,[r6,#0]  ; load_off_stat
00698e  2800              CMP      r0,#0
006990  d103              BNE      |L1.27034|
006992  4947              LDR      r1,|L1.27312|
006994  f04f000a          MOV      r0,#0xa
006998  7008              STRB     r0,[r1,#0]
                  |L1.27034|
;;;10321  
;;;10322  
;;;10323  }
00699a  bdf0              POP      {r4-r7,pc}
;;;10324  
                          ENDP

                  speedChargeStartStop PROC
;;;10512  //-----------------------------------------------
;;;10513  void speedChargeStartStop(void)
00699c  b538              PUSH     {r3-r5,lr}
;;;10514  {
;;;10515  spch_plazma[1]++;
00699e  4c45              LDR      r4,|L1.27316|
0069a0  7860              LDRB     r0,[r4,#1]  ; spch_plazma
0069a2  f1000001          ADD      r0,r0,#1
0069a6  7060              STRB     r0,[r4,#1]
;;;10516  /*if(speedChIsOn)
;;;10517  	{
;;;10518  	speedChIsOn=0;
;;;10519  	}
;;;10520  
;;;10521  else
;;;10522  	{
;;;10523  	if(speedChrgBlckStat==0)
;;;10524  		{
;;;10525  		speedChIsOn=1;
;;;10526  		speedChTimeCnt=0;
;;;10527  		}
;;;10528  	else
;;;10529  		{
;;;10530  		show_mess(	"     Ускоренный     ",
;;;10531  	          		"       заряд        ",
;;;10532  	          		"    заблокирован!   ",
;;;10533  	          		"                    ",2000);	 
;;;10534  		}
;;;10535  	}*/
;;;10536  
;;;10537  if(sp_ch_stat!=scsOFF)
0069a8  4843              LDR      r0,|L1.27320|
0069aa  7801              LDRB     r1,[r0,#0]  ; sp_ch_stat
0069ac  b151              CBZ      r1,|L1.27076|
;;;10538  	{
;;;10539  	sp_ch_stat=scsOFF;
0069ae  f04f0100          MOV      r1,#0
0069b2  7001              STRB     r1,[r0,#0]
;;;10540  	speedz_mem_hndl(10);
0069b4  f04f000a          MOV      r0,#0xa
0069b8  f7fffffe          BL       speedz_mem_hndl
;;;10541  	spch_plazma[1]=10;
0069bc  f04f000a          MOV      r0,#0xa
0069c0  7060              STRB     r0,[r4,#1]
                  |L1.27074|
;;;10542  	}
;;;10543  
;;;10544  else
;;;10545  	{
;;;10546  	spch_plazma[1]=20;
;;;10547  	if((speedChrgBlckStat==0)&&(spc_stat==spcOFF)
;;;10548  		#ifdef UKU_220_IPS_TERMOKOMPENSAT
;;;10549  		&&(vz1_stat==vz1sOFF)&&(vz2_stat==vz2sOFF)
;;;10550  		#endif
;;;10551  		)
;;;10552  		{
;;;10553  		#ifdef UKU_220_IPS_TERMOKOMPENSAT
;;;10554  		sp_ch_stat=scsSTEP1;
;;;10555  		#else
;;;10556  		sp_ch_stat=scsWRK;
;;;10557  		#endif
;;;10558  		speedz_mem_hndl(1);
;;;10559  		}
;;;10560  	else 
;;;10561  		{
;;;10562  		show_mess(	"     Ускоренный     ",
;;;10563  	          		"       заряд        ",
;;;10564  	          		"    заблокирован!   ",
;;;10565  	          		"                    ",2000);
;;;10566  		}
;;;10567  	}
;;;10568  }
0069c2  bd38              POP      {r3-r5,pc}
                  |L1.27076|
0069c4  e07a              B        |L1.27324|
0069c6  0000              DCW      0x0000
                  |L1.27080|
                          DCD      ||area_number.25||+0x46
                  |L1.27084|
0069cc  534b2023          DCB      "SK #1 Alarm",0
0069d0  3120416c
0069d4  61726d00
                  |L1.27096|
0069d8  534b2023          DCB      "SK #2 Alarm",0
0069dc  3220416c
0069e0  61726d00
                  |L1.27108|
0069e4  534b2023          DCB      "SK #3 Alarm",0
0069e8  3320416c
0069ec  61726d00
                  |L1.27120|
0069f0  534b2023          DCB      "SK #4 Alarm",0
0069f4  3420416c
0069f8  61726d00
                  |L1.27132|
0069fc  534b2023          DCB      "SK #1 Alarm is off",0
006a00  3120416c
006a04  61726d20
006a08  6973206f
006a0c  666600  
006a0f  00                DCB      0
                  |L1.27152|
006a10  534b2023          DCB      "SK #2 Alarm is off",0
006a14  3220416c
006a18  61726d20
006a1c  6973206f
006a20  666600  
006a23  00                DCB      0
                  |L1.27172|
006a24  534b2023          DCB      "SK #3 Alarm is off",0
006a28  3320416c
006a2c  61726d20
006a30  6973206f
006a34  666600  
006a37  00                DCB      0
                  |L1.27192|
006a38  534b2023          DCB      "SK #4 Alarm is off",0
006a3c  3420416c
006a40  61726d20
006a44  6973206f
006a48  666600  
006a4b  00                DCB      0
                  |L1.27212|
                          DCD      NUMSK
                  |L1.27216|
                          DCD      sign_U
                  |L1.27220|
                          DCD      sign_I
                  |L1.27224|
                          DCD      bat
                  |L1.27228|
                          DCD      u_necc_up
                  |L1.27232|
                          DCD      TBAT
                  |L1.27236|
                          DCD      u_necc_dn
                  |L1.27240|
                          DCD      IKB
                  |L1.27244|
                          DCD      BAT_C_REAL
                  |L1.27248|
                          DCD      NUMBAT
                  |L1.27252|
                          DCD      superviser_cnt
                  |L1.27256|
                          DCD      NPN_OUT
                  |L1.27260|
                          DCD      npn_tz_cnt
                  |L1.27264|
                          DCD      npn_stat
                  |L1.27268|
                          DCD      load_U
                  |L1.27272|
                          DCD      UONPN
                  |L1.27276|
                          DCD      net_Ua
                  |L1.27280|
                          DCD      net_Ub
                  |L1.27284|
                          DCD      net_Uc
                  |L1.27288|
                          DCD      UMN
                  |L1.27292|
                          DCD      TZNPN
                  |L1.27296|
                          DCD      UVNPN
                  |L1.27300|
                          DCD      load_off_cnt
                  |L1.27304|
                          DCD      load_off_stat
                  |L1.27308|
                          DCD      dUNPN
                  |L1.27312|
                          DCD      tloaddisable_cmnd
                  |L1.27316|
                          DCD      spch_plazma
                  |L1.27320|
                          DCD      sp_ch_stat
                  |L1.27324|
006abc  f04f0114          MOV      r1,#0x14              ;10546
006ac0  7061              STRB     r1,[r4,#1]            ;10546
006ac2  49fa              LDR      r1,|L1.28332|
006ac4  f9b12000          LDRSH    r2,[r1,#0]            ;10547  ; speedChrgBlckStat
006ac8  49f9              LDR      r1,|L1.28336|
006aca  f8913023          LDRB     r3,[r1,#0x23]         ;10547  ; spc_stat
006ace  ea420203          ORR      r2,r2,r3              ;10547
006ad2  794b              LDRB     r3,[r1,#5]            ;10547  ; vz1_stat
006ad4  79c9              LDRB     r1,[r1,#7]            ;10547  ; vz2_stat
006ad6  ea420203          ORR      r2,r2,r3              ;10547
006ada  430a              ORRS     r2,r2,r1              ;10547
006adc  d009              BEQ      |L1.27378|
006ade  f44f60fa          MOV      r0,#0x7d0             ;10562
006ae2  9000              STR      r0,[sp,#0]            ;10562
006ae4  4bf3              LDR      r3,|L1.28340|
006ae6  a2f4              ADR      r2,|L1.28344|
006ae8  a1f9              ADR      r1,|L1.28368|
006aea  a0ff              ADR      r0,|L1.28392|
006aec  f7fffffe          BL       show_mess
006af0  e767              B        |L1.27074|
                  |L1.27378|
006af2  f04f0101          MOV      r1,#1                 ;10554
006af6  7001              STRB     r1,[r0,#0]            ;10554
006af8  e8bd4038          POP      {r3-r5,lr}            ;10558
006afc  4608              MOV      r0,r1                 ;10558
006afe  f7ffbffe          B.W      speedz_mem_hndl
;;;10569  
                          ENDP

                  speedChargeHndl PROC
;;;10325  //-----------------------------------------------
;;;10326  void speedChargeHndl(void)
006b02  e92d4ff8          PUSH     {r3-r11,lr}
;;;10327  {
;;;10328  /*
;;;10329  if(sp_ch_stat==scsOFF)
;;;10330  	{
;;;10331  	if((sk_stat[1]==1)&&(sk_stat_old[1]=0))
;;;10332  	}*/
;;;10333  	 
;;;10334  if(sp_ch_stat==scsSTEP1)
006b06  4ffe              LDR      r7,|L1.28416|
;;;10335  	{
;;;10336  	if(sp_ch_stat_old!=sp_ch_stat)
;;;10337  		{
;;;10338  		sp_ch_stat_cnt=5;
;;;10339  		if(SP_CH_VENT_BLOK==0)
006b08  f8dfa3f8          LDR      r10,|L1.28420|
;;;10340  			{
;;;10341  			sp_ch_stat_cnt=0;
;;;10342  			sp_ch_stat=scsWRK;
;;;10343  			}
;;;10344  		}
;;;10345  	if(sp_ch_stat_cnt)
;;;10346  		{
;;;10347  		sp_ch_stat_cnt--;
;;;10348  		if(sp_ch_stat_cnt==0)
;;;10349  			{
;;;10350  			sp_ch_stat=scsERR1; 	//Не включилась вентиляция;
;;;10351  
;;;10352  			}
;;;10353  		}
;;;10354  	if(sk_stat[0]==1)sp_ch_stat=scsWRK;
006b0c  f8df93f8          LDR      r9,|L1.28424|
006b10  7839              LDRB     r1,[r7,#0]            ;10334  ; sp_ch_stat
006b12  f04f0802          MOV      r8,#2                 ;10342
006b16  4efd              LDR      r6,|L1.28428|
006b18  4cfd              LDR      r4,|L1.28432|
006b1a  2500              MOVS     r5,#0                 ;10339
006b1c  7830              LDRB     r0,[r6,#0]            ;10336
006b1e  2901              CMP      r1,#1                 ;10334
006b20  d11b              BNE      |L1.27482|
006b22  2801              CMP      r0,#1                 ;10336
006b24  d008              BEQ      |L1.27448|
006b26  f04f0105          MOV      r1,#5                 ;10338
006b2a  8021              STRH     r1,[r4,#0]            ;10338
006b2c  f8ba1000          LDRH     r1,[r10,#0]           ;10339  ; SP_CH_VENT_BLOK
006b30  b911              CBNZ     r1,|L1.27448|
006b32  8025              STRH     r5,[r4,#0]            ;10341
006b34  f8878000          STRB     r8,[r7,#0]            ;10342
                  |L1.27448|
006b38  f9b41000          LDRSH    r1,[r4,#0]            ;10345  ; sp_ch_stat_cnt
006b3c  b139              CBZ      r1,|L1.27470|
006b3e  f1a10101          SUB      r1,r1,#1              ;10347
006b42  b209              SXTH     r1,r1                 ;10347
006b44  8021              STRH     r1,[r4,#0]            ;10347
006b46  b911              CBNZ     r1,|L1.27470|
006b48  f04f0103          MOV      r1,#3                 ;10350
006b4c  7039              STRB     r1,[r7,#0]            ;10350
                  |L1.27470|
006b4e  f8991000          LDRB     r1,[r9,#0]  ; sk_stat
006b52  2901              CMP      r1,#1
006b54  d101              BNE      |L1.27482|
006b56  f8878000          STRB     r8,[r7,#0]
                  |L1.27482|
;;;10355  	}
;;;10356  
;;;10357  if(sp_ch_stat==scsWRK)
006b5a  7839              LDRB     r1,[r7,#0]  ; sp_ch_stat
006b5c  2902              CMP      r1,#2
006b5e  d123              BNE      |L1.27560|
;;;10358  	{
;;;10359  	if(sp_ch_stat_old!=sp_ch_stat)
;;;10360  		{
;;;10361  		sp_ch_wrk_cnt=(signed long)speedChrgTimeInHour*3600L;
006b60  4aec              LDR      r2,|L1.28436|
;;;10362  		hv_vz_up_cnt=0;
006b62  49ed              LDR      r1,|L1.28440|
006b64  2802              CMP      r0,#2                 ;10359
006b66  d008              BEQ      |L1.27514|
006b68  48ec              LDR      r0,|L1.28444|
006b6a  f44f6361          MOV      r3,#0xe10             ;10361
006b6e  f9b00000          LDRSH    r0,[r0,#0]            ;10361  ; speedChrgTimeInHour
006b72  fb00f003          MUL      r0,r0,r3              ;10361
006b76  6010              STR      r0,[r2,#0]            ;10361  ; sp_ch_wrk_cnt
006b78  600d              STR      r5,[r1,#0]  ; hv_vz_up_cnt
                  |L1.27514|
;;;10363  		}
;;;10364  	sp_ch_wrk_cnt--;
006b7a  6810              LDR      r0,[r2,#0]  ; sp_ch_wrk_cnt
006b7c  f1a00001          SUB      r0,r0,#1
006b80  6010              STR      r0,[r2,#0]  ; sp_ch_wrk_cnt
;;;10365  	hv_vz_up_cnt++;
006b82  680a              LDR      r2,[r1,#0]  ; hv_vz_up_cnt
006b84  f1020201          ADD      r2,r2,#1
006b88  600a              STR      r2,[r1,#0]  ; hv_vz_up_cnt
;;;10366  	if(sp_ch_wrk_cnt==0)
006b8a  b918              CBNZ     r0,|L1.27540|
;;;10367  		{
;;;10368  		sp_ch_stat=scsOFF;
006b8c  703d              STRB     r5,[r7,#0]
;;;10369  		speedz_mem_hndl(0);
006b8e  2000              MOVS     r0,#0
006b90  f7fffffe          BL       speedz_mem_hndl
                  |L1.27540|
;;;10370  		}
;;;10371  	#ifdef UKU_220_IPS_TERMOKOMPENSAT
;;;10372  	if((sk_stat[0]==0)&&(SP_CH_VENT_BLOK==1))sp_ch_stat=scsERR2;
006b94  f8990000          LDRB     r0,[r9,#0]  ; sk_stat
006b98  b930              CBNZ     r0,|L1.27560|
006b9a  f8ba0000          LDRH     r0,[r10,#0]  ; SP_CH_VENT_BLOK
006b9e  2801              CMP      r0,#1
006ba0  d102              BNE      |L1.27560|
006ba2  f04f0004          MOV      r0,#4
006ba6  7038              STRB     r0,[r7,#0]
                  |L1.27560|
;;;10373  	#endif
;;;10374  	}
;;;10375  
;;;10376  if(sp_ch_stat==scsERR1)		//Отсутствует вентиляция при включении
006ba8  7838              LDRB     r0,[r7,#0]  ; sp_ch_stat
;;;10377  	{
;;;10378  	if((sp_ch_stat_old!=sp_ch_stat)||(sp_ch_stat_cnt==0))
;;;10379  		{
;;;10380  		sp_ch_stat_cnt=10;
;;;10381  		}
;;;10382  	sp_ch_stat_cnt--;
;;;10383  	if((sp_ch_stat_cnt==10)||(sp_ch_stat_cnt==9))
;;;10384  		{
;;;10385  		show_mess(	"  УСКОРЕННЫЙ ЗАРЯД  ",
006baa  f2413b88          MOV      r11,#0x1388
006bae  f04f0a0a          MOV      r10,#0xa              ;10380
006bb2  2803              CMP      r0,#3                 ;10376
006bb4  d119              BNE      |L1.27626|
006bb6  7830              LDRB     r0,[r6,#0]            ;10378  ; sp_ch_stat_old
006bb8  2803              CMP      r0,#3                 ;10378
006bba  d101              BNE      |L1.27584|
006bbc  8820              LDRH     r0,[r4,#0]            ;10378  ; sp_ch_stat_cnt
006bbe  b908              CBNZ     r0,|L1.27588|
                  |L1.27584|
006bc0  f8a4a000          STRH     r10,[r4,#0]           ;10380
                  |L1.27588|
006bc4  8820              LDRH     r0,[r4,#0]            ;10382  ; sp_ch_stat_cnt
006bc6  f1a00001          SUB      r0,r0,#1              ;10382
006bca  b200              SXTH     r0,r0                 ;10382
006bcc  8020              STRH     r0,[r4,#0]            ;10382
006bce  280a              CMP      r0,#0xa               ;10383
006bd0  d001              BEQ      |L1.27606|
006bd2  2809              CMP      r0,#9                 ;10383
006bd4  d109              BNE      |L1.27626|
                  |L1.27606|
006bd6  4bd2              LDR      r3,|L1.28448|
006bd8  a0d2              ADR      r0,|L1.28452|
006bda  f1030218          ADD      r2,r3,#0x18
006bde  f1020118          ADD      r1,r2,#0x18
006be2  f8cdb000          STR      r11,[sp,#0]
006be6  f7fffffe          BL       show_mess
                  |L1.27626|
;;;10386  					"   НЕ МОЖЕТ БЫТЬ    ",
;;;10387  					"      ВКЛЮЧЕН       ",
;;;10388  					"  БЕЗ ВЕНТИЛЯЦИИ!!  ",
;;;10389  					5000);
;;;10390  		}
;;;10391  	}
;;;10392  if(sp_ch_stat==scsERR2)		//Пропала вентиляция при работе
006bea  7838              LDRB     r0,[r7,#0]  ; sp_ch_stat
006bec  2804              CMP      r0,#4
006bee  d11f              BNE      |L1.27696|
;;;10393  	{
;;;10394  	if((sp_ch_stat_old!=sp_ch_stat)||(sp_ch_stat_cnt==0))
006bf0  7830              LDRB     r0,[r6,#0]  ; sp_ch_stat_old
006bf2  2804              CMP      r0,#4
006bf4  d101              BNE      |L1.27642|
006bf6  8820              LDRH     r0,[r4,#0]  ; sp_ch_stat_cnt
006bf8  b908              CBNZ     r0,|L1.27646|
                  |L1.27642|
;;;10395  		{
;;;10396  		sp_ch_stat_cnt=10;
006bfa  f8a4a000          STRH     r10,[r4,#0]
                  |L1.27646|
;;;10397  		}
;;;10398  	sp_ch_stat_cnt--;
006bfe  8820              LDRH     r0,[r4,#0]  ; sp_ch_stat_cnt
006c00  f1a00001          SUB      r0,r0,#1
006c04  b200              SXTH     r0,r0
006c06  8020              STRH     r0,[r4,#0]
;;;10399  	if((sp_ch_stat_cnt==10)||(sp_ch_stat_cnt==9))
006c08  280a              CMP      r0,#0xa
006c0a  d001              BEQ      |L1.27664|
006c0c  2809              CMP      r0,#9
006c0e  d109              BNE      |L1.27684|
                  |L1.27664|
;;;10400  		{
;;;10401  		show_mess(	"  УСКОРЕННЫЙ ЗАРЯД  ",
006c10  4bca              LDR      r3,|L1.28476|
006c12  a0c4              ADR      r0,|L1.28452|
006c14  f1030218          ADD      r2,r3,#0x18
006c18  f1020118          ADD      r1,r2,#0x18
006c1c  f8cdb000          STR      r11,[sp,#0]
006c20  f7fffffe          BL       show_mess
                  |L1.27684|
;;;10402  					"    ЗАБЛОКИРОВАН    ",
;;;10403  					"     НЕИСПРАВНА     ",
;;;10404  					"    ВЕНТИЛЯЦИЯ!!!   ",
;;;10405  					5000);
;;;10406  		}
;;;10407  	if(sk_stat[0]==1)sp_ch_stat=scsWRK;
006c24  f8990000          LDRB     r0,[r9,#0]  ; sk_stat
006c28  2801              CMP      r0,#1
006c2a  d101              BNE      |L1.27696|
006c2c  f8878000          STRB     r8,[r7,#0]
                  |L1.27696|
;;;10408  	}
;;;10409  
;;;10410  
;;;10411  sp_ch_stat_old=sp_ch_stat;
006c30  7838              LDRB     r0,[r7,#0]  ; sp_ch_stat
006c32  7030              STRB     r0,[r6,#0]
;;;10412  
;;;10413  
;;;10414  
;;;10415  if(speedChrgAvtEn==1)
006c34  49c2              LDR      r1,|L1.28480|
;;;10416  	{
;;;10417  	if((sp_ch_stat==scsOFF)&&(spc_stat==spcOFF)
;;;10418  		#ifdef UKU_220_IPS_TERMOKOMPENSAT
;;;10419  		&&(vz1_stat==vz1sOFF)&&(vz2_stat==vz2sOFF)
;;;10420  		#endif
;;;10421  		)
;;;10422  		{
;;;10423  		if((load_U<u_necc)&&((u_necc-load_U)>speedChrgDU)
;;;10424  		#ifdef UKU_220_IPS_TERMOKOMPENSAT
;;;10425  		&&(abs(Ib_ips_termokompensat/10-IZMAX)<5)
;;;10426  		#endif
;;;10427  		#ifdef UKU_220_V2
;;;10428  		&&(abs(bat[0]._Ib/10-IZMAX)<10)
;;;10429  		#endif
;;;10430  		&&(!speedChrgBlckStat))
006c36  4c9d              LDR      r4,|L1.28332|
006c38  8809              LDRH     r1,[r1,#0]            ;10415  ; speedChrgAvtEn
006c3a  2901              CMP      r1,#1                 ;10415
006c3c  d10a              BNE      |L1.27732|
006c3e  499c              LDR      r1,|L1.28336|
;;;10431  			{
;;;10432  			speedChargeStartCnt++;
006c40  4ec0              LDR      r6,|L1.28484|
006c42  f8912023          LDRB     r2,[r1,#0x23]         ;10417  ; spc_stat
006c46  4310              ORRS     r0,r0,r2              ;10417
006c48  794a              LDRB     r2,[r1,#5]            ;10417  ; vz1_stat
006c4a  79c9              LDRB     r1,[r1,#7]            ;10417  ; vz2_stat
006c4c  4310              ORRS     r0,r0,r2              ;10417
006c4e  4308              ORRS     r0,r0,r1              ;10417
006c50  d007              BEQ      |L1.27746|
;;;10433  			if(speedChargeStartCnt>=60)
;;;10434  				{
;;;10435  				speedChargeStartStop();
;;;10436  				speedz_mem_hndl(5);
;;;10437  				}
;;;10438  			}
;;;10439  		else speedChargeStartCnt=0;
;;;10440  		}
;;;10441  	else speedChargeStartCnt=0;
006c52  7035              STRB     r5,[r6,#0]
                  |L1.27732|
;;;10442  	}
;;;10443  
;;;10444  
;;;10445  
;;;10446  /*
;;;10447  if(speedChIsOn)
;;;10448  	{
;;;10449  	speedChTimeCnt++;
;;;10450  	if(speedChTimeCnt>=((signed long)speedChrgTimeInHour*3600L))
;;;10451  		{
;;;10452  		speedChIsOn=0;
;;;10453  		}
;;;10454  	if(speedChrgBlckStat)
;;;10455  		{
;;;10456  		speedChIsOn=0;
;;;10457  		speedChTimeCnt=0;
;;;10458  		}
;;;10459  	}
;;;10460  
;;;10461  
;;;10462  
;;;10463  if(speedChrgAvtEn)
;;;10464  	{
;;;10465  	if(!speedChIsOn)
;;;10466  		{
;;;10467  		if((load_U<u_necc)&&((u_necc-load_U)>speedChrgDU)&&(abs(Ib_ips_termokompensat/10-IZMAX)<5)&&(!speedChrgBlckStat))
;;;10468  			{
;;;10469  			speedChIsOn=1;
;;;10470  			}
;;;10471  		}
;;;10472  	}
;;;10473  
;;;10474  
;;;10475  */
;;;10476  if(/*(speedChrgBlckSrc!=1)&&*/(speedChrgBlckSrc!=2)) speedChrgBlckStat=0;
006c54  48bc              LDR      r0,|L1.28488|
006c56  8800              LDRH     r0,[r0,#0]  ; speedChrgBlckSrc
006c58  2802              CMP      r0,#2
006c5a  d02e              BEQ      |L1.27834|
006c5c  8025              STRH     r5,[r4,#0]
                  |L1.27742|
;;;10477  else
;;;10478  	{
;;;10479  	speedChrgBlckStat=0;
;;;10480  	if(speedChrgBlckSrc==1)
;;;10481  		{
;;;10482  		if(((speedChrgBlckLog==0)&&(adc_buff_[11]>2000)) || ((speedChrgBlckLog==1)&&(adc_buff_[11]<2000))) speedChrgBlckStat=1;
;;;10483  		}
;;;10484  	else if(speedChrgBlckSrc==2)
;;;10485  		{
;;;10486  		if(((speedChrgBlckLog==0)&&(adc_buff_[13]>2000)) || ((speedChrgBlckLog==1)&&(adc_buff_[13]<2000))) speedChrgBlckStat=1;
;;;10487  		}
;;;10488  	}
;;;10489  
;;;10490  /*
;;;10491  if(speedChrgBlckStat==1)
;;;10492  	{
;;;10493  
;;;10494  	//speedChargeStartStop();
;;;10495  
;;;10496  	speedChrgShowCnt++;
;;;10497  	if(speedChrgShowCnt>=30)	
;;;10498  		{
;;;10499  		speedChrgShowCnt=0;
;;;10500  		show_mess(	"     УСКОРЕННЫЙ     ",
;;;10501  					"       ЗАРЯД        ",
;;;10502  					"     ЗАПРЕЩЕН!!!    ",
;;;10503  					"                    ",
;;;10504  					5000);
;;;10505  		}
;;;10506  	} 
;;;10507  else speedChrgShowCnt=0;  */
;;;10508  
;;;10509  
;;;10510  }
006c5e  e8bd8ff8          POP      {r3-r11,pc}
                  |L1.27746|
006c62  48ba              LDR      r0,|L1.28492|
006c64  49ba              LDR      r1,|L1.28496|
006c66  f9b00000          LDRSH    r0,[r0,#0]            ;10423  ; load_U
006c6a  f9b11000          LDRSH    r1,[r1,#0]            ;10423  ; u_necc
006c6e  4288              CMP      r0,r1                 ;10423
006c70  da14              BGE      |L1.27804|
006c72  1a08              SUBS     r0,r1,r0              ;10423
006c74  49b7              LDR      r1,|L1.28500|
006c76  f9b11000          LDRSH    r1,[r1,#0]            ;10423  ; speedChrgDU
006c7a  4288              CMP      r0,r1                 ;10423
006c7c  dd0e              BLE      |L1.27804|
006c7e  48b6              LDR      r0,|L1.28504|
006c80  49b6              LDR      r1,|L1.28508|
006c82  f9b00000          LDRSH    r0,[r0,#0]            ;10425  ; Ib_ips_termokompensat
006c86  8809              LDRH     r1,[r1,#0]            ;10425  ; IZMAX
006c88  fb90f0fa          SDIV     r0,r0,r10             ;10425
006c8c  1a40              SUBS     r0,r0,r1              ;10425
006c8e  b200              SXTH     r0,r0                 ;10425
006c90  f7fffffe          BL       abs
006c94  2805              CMP      r0,#5                 ;10425
006c96  da01              BGE      |L1.27804|
006c98  8820              LDRH     r0,[r4,#0]            ;10430  ; speedChrgBlckStat
006c9a  b108              CBZ      r0,|L1.27808|
                  |L1.27804|
006c9c  7035              STRB     r5,[r6,#0]            ;10439
006c9e  e7d9              B        |L1.27732|
                  |L1.27808|
006ca0  7830              LDRB     r0,[r6,#0]            ;10432  ; speedChargeStartCnt
006ca2  f1000001          ADD      r0,r0,#1              ;10432
006ca6  b2c0              UXTB     r0,r0                 ;10432
006ca8  7030              STRB     r0,[r6,#0]            ;10432
006caa  283c              CMP      r0,#0x3c              ;10433
006cac  d3d2              BCC      |L1.27732|
006cae  f7fffffe          BL       speedChargeStartStop
006cb2  2005              MOVS     r0,#5                 ;10436
006cb4  f7fffffe          BL       speedz_mem_hndl
006cb8  e7cc              B        |L1.27732|
                  |L1.27834|
006cba  8025              STRH     r5,[r4,#0]            ;10479
006cbc  48a8              LDR      r0,|L1.28512|
006cbe  49a9              LDR      r1,|L1.28516|
006cc0  f44f63fa          MOV      r3,#0x7d0             ;10482
006cc4  f9b00000          LDRSH    r0,[r0,#0]            ;10486  ; speedChrgBlckLog
006cc8  b918              CBNZ     r0,|L1.27858|
006cca  f9b1201a          LDRSH    r2,[r1,#0x1a]         ;10486  ; adc_buff_
006cce  429a              CMP      r2,r3                 ;10486
006cd0  dc05              BGT      |L1.27870|
                  |L1.27858|
006cd2  2801              CMP      r0,#1                 ;10486
006cd4  d1c3              BNE      |L1.27742|
006cd6  f9b1001a          LDRSH    r0,[r1,#0x1a]         ;10486  ; adc_buff_
006cda  4298              CMP      r0,r3                 ;10486
006cdc  dabf              BGE      |L1.27742|
                  |L1.27870|
006cde  f04f0001          MOV      r0,#1                 ;10486
006ce2  8020              STRH     r0,[r4,#0]            ;10486
006ce4  e7bb              B        |L1.27742|
;;;10511  
                          ENDP

                  averageChargeHndl PROC
;;;10570  //-----------------------------------------------
;;;10571  void averageChargeHndl(void)
006ce6  e92d4ff8          PUSH     {r3-r11,lr}
;;;10572  {
;;;10573  /*
;;;10574  if(hv_vz_stat==hvsOFF)
;;;10575  	{
;;;10576  	if((sk_stat[1]==1)&&(sk_stat_old[1]=0))
;;;10577  	} */
;;;10578  if(hv_vz_stat!=hvsOFF)
006cea  f8dfa27c          LDR      r10,|L1.28520|
006cee  f04f0b00          MOV      r11,#0
006cf2  f89a0000          LDRB     r0,[r10,#0]  ; hv_vz_stat
006cf6  b130              CBZ      r0,|L1.27910|
;;;10579  	{
;;;10580  	hv_vz_stat=hvsOFF; 	
006cf8  f88ab000          STRB     r11,[r10,#0]
;;;10581  	lc640_write(EE_HV_VZ_STAT,hvsOFF);
006cfc  2100              MOVS     r1,#0
006cfe  f44f70b4          MOV      r0,#0x168
006d02  f7fffffe          BL       lc640_write
                  |L1.27910|
;;;10582  	}
;;;10583  
;;;10584  if(hv_vz_stat==hvsSTEP1)
006d06  f89a0000          LDRB     r0,[r10,#0]  ; hv_vz_stat
;;;10585  	{
;;;10586  	if(hv_vz_stat_old!=hv_vz_stat)
;;;10587  		{
;;;10588  		hv_vz_stat_cnt=5;
;;;10589  		}
;;;10590  	if(hv_vz_stat_cnt)
;;;10591  		{
;;;10592  		hv_vz_stat_cnt--;
;;;10593  		if(hv_vz_stat_cnt==0)
;;;10594  			{
;;;10595  			hv_vz_stat=hvsERR1; 	//Не включилась вентиляция;
;;;10596  			lc640_write(EE_HV_VZ_STAT,hvsERR1);
;;;10597  			}
;;;10598  		}
;;;10599  	if(sk_stat[0]==1)
006d0a  4e7f              LDR      r6,|L1.28424|
006d0c  4d97              LDR      r5,|L1.28524|
006d0e  4c98              LDR      r4,|L1.28528|
006d10  f04f0905          MOV      r9,#5                 ;10588
006d14  2801              CMP      r0,#1                 ;10584
006d16  d131              BNE      |L1.28028|
006d18  7828              LDRB     r0,[r5,#0]            ;10586  ; hv_vz_stat_old
006d1a  2801              CMP      r0,#1                 ;10586
006d1c  d001              BEQ      |L1.27938|
006d1e  f8a49000          STRH     r9,[r4,#0]            ;10588
                  |L1.27938|
006d22  f9b40000          LDRSH    r0,[r4,#0]            ;10590  ; hv_vz_stat_cnt
006d26  b168              CBZ      r0,|L1.27972|
006d28  f1a00001          SUB      r0,r0,#1              ;10592
006d2c  b200              SXTH     r0,r0                 ;10592
006d2e  8020              STRH     r0,[r4,#0]            ;10592
006d30  b940              CBNZ     r0,|L1.27972|
006d32  f04f0006          MOV      r0,#6                 ;10595
006d36  f88a0000          STRB     r0,[r10,#0]           ;10595
006d3a  4601              MOV      r1,r0                 ;10596
006d3c  f44f70b4          MOV      r0,#0x168             ;10596
006d40  f7fffffe          BL       lc640_write
                  |L1.27972|
006d44  7830              LDRB     r0,[r6,#0]  ; sk_stat
006d46  2801              CMP      r0,#1
006d48  d118              BNE      |L1.28028|
;;;10600  		{
;;;10601  		hv_vz_stat=hvsSTEP2;
006d4a  f04f0002          MOV      r0,#2
006d4e  f88a0000          STRB     r0,[r10,#0]
;;;10602  		lc640_write(EE_HV_VZ_STAT,hvsSTEP2);
006d52  4601              MOV      r1,r0
006d54  f44f70b4          MOV      r0,#0x168
006d58  f7fffffe          BL       lc640_write
;;;10603  		tree_up(iHV_STEP2_2,1,0,0);
006d5c  2300              MOVS     r3,#0
006d5e  461a              MOV      r2,r3
006d60  2101              MOVS     r1,#1
006d62  20dd              MOVS     r0,#0xdd
006d64  f7fffffe          BL       tree_up
;;;10604  		tree_up(iHV_STEP2_1,0,0,0);
006d68  2300              MOVS     r3,#0
006d6a  461a              MOV      r2,r3
006d6c  4619              MOV      r1,r3
006d6e  20dc              MOVS     r0,#0xdc
006d70  f7fffffe          BL       tree_up
;;;10605  		ret(1200);
006d74  f44f6096          MOV      r0,#0x4b0
006d78  f7fffffe          BL       ||ret||
                  |L1.28028|
;;;10606  		}
;;;10607  	}
;;;10608  
;;;10609  if(hv_vz_stat==hvsSTEP2)
006d7c  f89a0000          LDRB     r0,[r10,#0]  ; hv_vz_stat
006d80  2802              CMP      r0,#2
006d82  d10b              BNE      |L1.28060|
;;;10610  	{
;;;10611  	if((hv_vz_stat_old!=hv_vz_stat)||(hv_vz_stat_cnt==0))
006d84  7829              LDRB     r1,[r5,#0]  ; hv_vz_stat_old
006d86  2902              CMP      r1,#2
006d88  d101              BNE      |L1.28046|
006d8a  8821              LDRH     r1,[r4,#0]  ; hv_vz_stat_cnt
006d8c  b911              CBNZ     r1,|L1.28052|
                  |L1.28046|
;;;10612  		{
;;;10613  		hv_vz_stat_cnt=15;
006d8e  f04f010f          MOV      r1,#0xf
006d92  8021              STRH     r1,[r4,#0]
                  |L1.28052|
;;;10614  		}
;;;10615  	hv_vz_stat_cnt--;
006d94  8821              LDRH     r1,[r4,#0]  ; hv_vz_stat_cnt
006d96  f1a10101          SUB      r1,r1,#1
006d9a  8021              STRH     r1,[r4,#0]
                  |L1.28060|
;;;10616  	//if((hv_vz_stat_cnt==14)/*||(hv_vz_stat_cnt==13)||(hv_vz_stat_cnt==12)*/)
;;;10617  	//	{
;;;10618  //		show_mess_number(	"     ВНИМАНИЕ!!!    ",
;;;10619  	//				"  Напряжение будет  ",
;;;10620  	//				" увеличено до     @В",
;;;10621  	//				"ОТКЛЮЧИТЕ НАГРУЗКУ!!",
;;;10622  	//				4800,UVZ,1);
;;;10623  	//	}
;;;10624  	//if((hv_vz_stat_cnt==8)/*||(hv_vz_stat_cnt==7)||(hv_vz_stat_cnt==6)*/)
;;;10625  	//	{
;;;10626  	//	show_mess(	"    ПОДТВЕРДИТЕ     ",
;;;10627  	//				"     НАЖАТИЕМ       ",
;;;10628  	//				"    ЦЕНТРАЛЬНОЙ     ",
;;;10629  	//				"      КНОПКИ        ",
;;;10630  	//				4800);
;;;10631  	//	} 
;;;10632  /*	if(sk_stat[1]==1)
;;;10633  		{
;;;10634  		hv_vz_stat=hvsWRK;
;;;10635  		lc640_write(EE_HV_VZ_STAT,hvsWRK);
;;;10636  		}*/
;;;10637  	}
;;;10638  
;;;10639  if(hv_vz_stat==hvsSTEP3)
;;;10640  	{
;;;10641  	if((hv_vz_stat_old!=hv_vz_stat)||(hv_vz_stat_cnt==0))
;;;10642  		{
;;;10643  		hv_vz_stat_cnt=10;
006d9c  270a              MOVS     r7,#0xa
;;;10644  		}
;;;10645  	hv_vz_stat_cnt--;
;;;10646  	if((hv_vz_stat_cnt==10)||(hv_vz_stat_cnt==9))
;;;10647  		{
;;;10648  		show_mess(	"     ВКЛЮЧИТЕ       ",
006d9e  f2413888          MOV      r8,#0x1388
006da2  2803              CMP      r0,#3                 ;10639
006da4  d123              BNE      |L1.28142|
006da6  7828              LDRB     r0,[r5,#0]            ;10641  ; hv_vz_stat_old
006da8  2803              CMP      r0,#3                 ;10641
006daa  d101              BNE      |L1.28080|
006dac  8820              LDRH     r0,[r4,#0]            ;10641  ; hv_vz_stat_cnt
006dae  b900              CBNZ     r0,|L1.28082|
                  |L1.28080|
006db0  8027              STRH     r7,[r4,#0]            ;10643
                  |L1.28082|
006db2  8820              LDRH     r0,[r4,#0]            ;10645  ; hv_vz_stat_cnt
006db4  f1a00001          SUB      r0,r0,#1              ;10645
006db8  b200              SXTH     r0,r0                 ;10645
006dba  8020              STRH     r0,[r4,#0]            ;10645
006dbc  280a              CMP      r0,#0xa               ;10646
006dbe  d001              BEQ      |L1.28100|
006dc0  2809              CMP      r0,#9                 ;10646
006dc2  d10a              BNE      |L1.28122|
                  |L1.28100|
006dc4  4b3b              LDR      r3,|L1.28340|
006dc6  a26b              ADR      r2,|L1.28532|
006dc8  3b48              SUBS     r3,r3,#0x48
006dca  f5a37194          SUB      r1,r3,#0x128
006dce  f1010018          ADD      r0,r1,#0x18
006dd2  f8cd8000          STR      r8,[sp,#0]
006dd6  f7fffffe          BL       show_mess
                  |L1.28122|
;;;10649  					"      ТУМБЛЕР       ",
;;;10650  					"   ВЫРАВНИВАЮЩИЙ    ",
;;;10651  					"       ЗАРЯД        ",
;;;10652  					5000);
;;;10653  		}
;;;10654  	if(sk_stat[1]==1)
006dda  7870              LDRB     r0,[r6,#1]  ; sk_stat
006ddc  2801              CMP      r0,#1
006dde  d106              BNE      |L1.28142|
;;;10655  		{
;;;10656  		hv_vz_stat=hvsWRK;
006de0  f88a9000          STRB     r9,[r10,#0]
;;;10657  		lc640_write(EE_HV_VZ_STAT,hvsWRK);
006de4  2105              MOVS     r1,#5
006de6  f44f70b4          MOV      r0,#0x168
006dea  f7fffffe          BL       lc640_write
                  |L1.28142|
;;;10658  		}
;;;10659  	}
;;;10660  
;;;10661  if(hv_vz_stat==hvsWRK)
006dee  f89a0000          LDRB     r0,[r10,#0]  ; hv_vz_stat
006df2  2805              CMP      r0,#5
006df4  d13a              BNE      |L1.28268|
;;;10662  	{
;;;10663  	if(hv_vz_stat_old!=hv_vz_stat)
006df6  7828              LDRB     r0,[r5,#0]  ; hv_vz_stat_old
;;;10664  		{
;;;10665  		hv_vz_wrk_cnt=3600L/*100L*/*((long)VZ_HR);
006df8  4a64              LDR      r2,|L1.28556|
;;;10666  		if(VZ_HR==0)  	hv_vz_wrk_cnt=1800L;
;;;10667  		hv_vz_up_cnt=0L;
006dfa  4947              LDR      r1,|L1.28440|
006dfc  2805              CMP      r0,#5                 ;10663
006dfe  d00d              BEQ      |L1.28188|
006e00  4863              LDR      r0,|L1.28560|
006e02  f44f6361          MOV      r3,#0xe10             ;10665
006e06  f9b00000          LDRSH    r0,[r0,#0]            ;10665  ; VZ_HR
006e0a  fb00f303          MUL      r3,r0,r3              ;10665
006e0e  6013              STR      r3,[r2,#0]            ;10665  ; hv_vz_wrk_cnt
006e10  b910              CBNZ     r0,|L1.28184|
006e12  f44f60e1          MOV      r0,#0x708             ;10666
006e16  6010              STR      r0,[r2,#0]            ;10666  ; hv_vz_wrk_cnt
                  |L1.28184|
006e18  f8c1b000          STR      r11,[r1,#0]  ; hv_vz_up_cnt
                  |L1.28188|
;;;10668  		}
;;;10669  	hv_vz_wrk_cnt--;
006e1c  6810              LDR      r0,[r2,#0]  ; hv_vz_wrk_cnt
006e1e  f1a00001          SUB      r0,r0,#1
006e22  6010              STR      r0,[r2,#0]  ; hv_vz_wrk_cnt
;;;10670  	hv_vz_up_cnt++;
006e24  680a              LDR      r2,[r1,#0]  ; hv_vz_up_cnt
006e26  f1020201          ADD      r2,r2,#1
006e2a  600a              STR      r2,[r1,#0]  ; hv_vz_up_cnt
;;;10671  
;;;10672  	if(hv_vz_wrk_cnt==0)
006e2c  b940              CBNZ     r0,|L1.28224|
;;;10673  		{
;;;10674  		hv_vz_stat=hvsERR4;
006e2e  f04f0009          MOV      r0,#9
006e32  f88a0000          STRB     r0,[r10,#0]
;;;10675  		lc640_write(EE_HV_VZ_STAT,hvsERR4);
006e36  4601              MOV      r1,r0
006e38  f44f70b4          MOV      r0,#0x168
006e3c  f7fffffe          BL       lc640_write
                  |L1.28224|
;;;10676  		}
;;;10677  	if(sk_stat[0]==0)
006e40  7830              LDRB     r0,[r6,#0]  ; sk_stat
006e42  b940              CBNZ     r0,|L1.28246|
;;;10678  		{
;;;10679  		hv_vz_stat=hvsERR2;
006e44  f04f0007          MOV      r0,#7
006e48  f88a0000          STRB     r0,[r10,#0]
;;;10680  		lc640_write(EE_HV_VZ_STAT,hvsERR2);
006e4c  4601              MOV      r1,r0
006e4e  f44f70b4          MOV      r0,#0x168
006e52  f7fffffe          BL       lc640_write
                  |L1.28246|
;;;10681  		}
;;;10682  	if(sk_stat[1]==0)
006e56  7870              LDRB     r0,[r6,#1]  ; sk_stat
006e58  b940              CBNZ     r0,|L1.28268|
;;;10683  		{
;;;10684  		hv_vz_stat=hvsERR3;
006e5a  f04f0008          MOV      r0,#8
006e5e  f88a0000          STRB     r0,[r10,#0]
;;;10685  		lc640_write(EE_HV_VZ_STAT,hvsERR3);
006e62  4601              MOV      r1,r0
006e64  f44f70b4          MOV      r0,#0x168
006e68  f7fffffe          BL       lc640_write
                  |L1.28268|
;;;10686  		}
;;;10687  	}
;;;10688  
;;;10689  if(hv_vz_stat==hvsERR1)		//Отсутствует вентиляция при включении
006e6c  f89a0000          LDRB     r0,[r10,#0]  ; hv_vz_stat
006e70  2806              CMP      r0,#6
006e72  d119              BNE      |L1.28328|
;;;10690  	{
;;;10691  	if((hv_vz_stat_old!=hv_vz_stat)||(hv_vz_stat_cnt==0))
006e74  7828              LDRB     r0,[r5,#0]  ; hv_vz_stat_old
006e76  2806              CMP      r0,#6
006e78  d101              BNE      |L1.28286|
006e7a  8820              LDRH     r0,[r4,#0]  ; hv_vz_stat_cnt
006e7c  b900              CBNZ     r0,|L1.28288|
                  |L1.28286|
;;;10692  		{
;;;10693  		hv_vz_stat_cnt=10;
006e7e  8027              STRH     r7,[r4,#0]
                  |L1.28288|
;;;10694  		}
;;;10695  	hv_vz_stat_cnt--;
006e80  8820              LDRH     r0,[r4,#0]  ; hv_vz_stat_cnt
006e82  f1a00001          SUB      r0,r0,#1
006e86  b200              SXTH     r0,r0
006e88  8020              STRH     r0,[r4,#0]
;;;10696  	if((hv_vz_stat_cnt==10)||(hv_vz_stat_cnt==9))
006e8a  280a              CMP      r0,#0xa
006e8c  d001              BEQ      |L1.28306|
006e8e  2809              CMP      r0,#9
006e90  d10a              BNE      |L1.28328|
                  |L1.28306|
;;;10697  		{
;;;10698  		show_mess(	"ВЫРАВНИВАЮЩИЙ ЗАРЯД ",
006e92  4b23              LDR      r3,|L1.28448|
006e94  f8cd8000          STR      r8,[sp,#0]
006e98  f1030218          ADD      r2,r3,#0x18
006e9c  f1020118          ADD      r1,r2,#0x18
006ea0  f5a16095          SUB      r0,r1,#0x4a8
006ea4  f7fffffe          BL       show_mess
                  |L1.28328|
;;;10699  					"   НЕ МОЖЕТ БЫТЬ    ",
;;;10700  					"      ВКЛЮЧЕН       ",
;;;10701  					"  БЕЗ ВЕНТИЛЯЦИИ!!  ",
;;;10702  					5000);
;;;10703  		}
;;;10704  	}
;;;10705  if(hv_vz_stat==hvsERR2)		//Пропала вентиляция при работе
006ea8  e074              B        |L1.28564|
006eaa  0000              DCW      0x0000
                  |L1.28332|
                          DCD      speedChrgBlckStat
                  |L1.28336|
                          DCD      ||area_number.25||
                  |L1.28340|
                          DCD      ||.text||+0x1d8c
                  |L1.28344|
006eb8  20202020          DCB      "    ",231,224,225,235,238,234,232,240,238,226,224,237,"!"
006ebc  e7e0e1eb
006ec0  eeeae8f0
006ec4  eee2e0ed
006ec8  21      
006ec9  20202000          DCB      "   ",0
006ecd  00                DCB      0
006ece  00                DCB      0
006ecf  00                DCB      0
                  |L1.28368|
006ed0  20202020          DCB      "       ",231,224,240,255,228,"        ",0
006ed4  202020e7
006ed8  e0f0ffe4
006edc  20202020
006ee0  20202020
006ee4  00      
006ee5  00                DCB      0
006ee6  00                DCB      0
006ee7  00                DCB      0
                  |L1.28392|
006ee8  20202020          DCB      "     ",211,241,234,238,240,229,237,237,251,233,"     ",0
006eec  20d3f1ea
006ef0  eef0e5ed
006ef4  edfbe920
006ef8  20202020
006efc  00      
006efd  00                DCB      0
006efe  00                DCB      0
006eff  00                DCB      0
                  |L1.28416|
                          DCD      sp_ch_stat
                  |L1.28420|
                          DCD      SP_CH_VENT_BLOK
                  |L1.28424|
                          DCD      sk_stat
                  |L1.28428|
                          DCD      sp_ch_stat_old
                  |L1.28432|
                          DCD      sp_ch_stat_cnt
                  |L1.28436|
                          DCD      sp_ch_wrk_cnt
                  |L1.28440|
                          DCD      hv_vz_up_cnt
                  |L1.28444|
                          DCD      speedChrgTimeInHour
                  |L1.28448|
                          DCD      ||.text||+0x1c54
                  |L1.28452|
006f24  2020d3d1          DCB      "  ",211,209,202,206,208,197,205,205,219,201," ",199,192
006f28  caced0c5
006f2c  cdcddbc9
006f30  20c7c0  
006f33  d0dfc420          DCB      208,223,196,"  ",0
006f37  2000    
006f39  00                DCB      0
006f3a  00                DCB      0
006f3b  00                DCB      0
                  |L1.28476|
                          DCD      ||.text||+0x1794
                  |L1.28480|
                          DCD      speedChrgAvtEn
                  |L1.28484|
                          DCD      speedChargeStartCnt
                  |L1.28488|
                          DCD      speedChrgBlckSrc
                  |L1.28492|
                          DCD      load_U
                  |L1.28496|
                          DCD      u_necc
                  |L1.28500|
                          DCD      speedChrgDU
                  |L1.28504|
                          DCD      Ib_ips_termokompensat
                  |L1.28508|
                          DCD      IZMAX
                  |L1.28512|
                          DCD      speedChrgBlckLog
                  |L1.28516|
                          DCD      ||.bss||+0x40c
                  |L1.28520|
                          DCD      hv_vz_stat
                  |L1.28524|
                          DCD      hv_vz_stat_old
                  |L1.28528|
                          DCD      hv_vz_stat_cnt
                  |L1.28532|
006f74  202020c2          DCB      "   ",194,219,208,192,194,205,200,194,192,222,217,200,201
006f78  dbd0c0c2
006f7c  cdc8c2c0
006f80  ded9c8c9
006f84  20202020          DCB      "    ",0
006f88  00      
006f89  00                DCB      0
006f8a  00                DCB      0
006f8b  00                DCB      0
                  |L1.28556|
                          DCD      hv_vz_wrk_cnt
                  |L1.28560|
                          DCD      VZ_HR
                  |L1.28564|
006f94  f89a0000          LDRB     r0,[r10,#0]  ; hv_vz_stat
006f98  2807              CMP      r0,#7
006f9a  d123              BNE      |L1.28644|
;;;10706  	{
;;;10707  	if((hv_vz_stat_old!=hv_vz_stat)||(hv_vz_stat_cnt==0))
006f9c  7828              LDRB     r0,[r5,#0]  ; hv_vz_stat_old
006f9e  2807              CMP      r0,#7
006fa0  d101              BNE      |L1.28582|
006fa2  8820              LDRH     r0,[r4,#0]  ; hv_vz_stat_cnt
006fa4  b900              CBNZ     r0,|L1.28584|
                  |L1.28582|
;;;10708  		{
;;;10709  		hv_vz_stat_cnt=10;
006fa6  8027              STRH     r7,[r4,#0]
                  |L1.28584|
;;;10710  		}
;;;10711  	hv_vz_stat_cnt--;
006fa8  8820              LDRH     r0,[r4,#0]  ; hv_vz_stat_cnt
006faa  f1a00001          SUB      r0,r0,#1
006fae  b200              SXTH     r0,r0
006fb0  8020              STRH     r0,[r4,#0]
;;;10712  	if((hv_vz_stat_cnt==10)||(hv_vz_stat_cnt==9))
006fb2  280a              CMP      r0,#0xa
006fb4  d001              BEQ      |L1.28602|
006fb6  2809              CMP      r0,#9
006fb8  d10a              BNE      |L1.28624|
                  |L1.28602|
;;;10713  		{
;;;10714  		show_mess(	"ВЫРАВНИВАЮЩИЙ ЗАРЯД ",
006fba  4bff              LDR      r3,|L1.29624|
006fbc  f8cd8000          STR      r8,[sp,#0]
006fc0  f1030218          ADD      r2,r3,#0x18
006fc4  f1020118          ADD      r1,r2,#0x18
006fc8  f1010018          ADD      r0,r1,#0x18
006fcc  f7fffffe          BL       show_mess
                  |L1.28624|
;;;10715  					"    ЗАБЛОКИРОВАН    ",
;;;10716  					"     НЕИСПРАВНА     ",
;;;10717  					"    ВЕНТИЛЯЦИЯ!!!   ",
;;;10718  					5000);
;;;10719  		}
;;;10720  	if(sk_stat[0]==1)
006fd0  7830              LDRB     r0,[r6,#0]  ; sk_stat
006fd2  2801              CMP      r0,#1
006fd4  d106              BNE      |L1.28644|
;;;10721  		{
;;;10722  		hv_vz_stat=hvsWRK;
006fd6  f88a9000          STRB     r9,[r10,#0]
;;;10723  		lc640_write(EE_HV_VZ_STAT,hvsWRK);
006fda  2105              MOVS     r1,#5
006fdc  f44f70b4          MOV      r0,#0x168
006fe0  f7fffffe          BL       lc640_write
                  |L1.28644|
;;;10724  		}
;;;10725  	}
;;;10726  
;;;10727  if(hv_vz_stat==hvsERR3)		//Отключен тумблер "Выравнивающий заряд"
006fe4  f89a0000          LDRB     r0,[r10,#0]  ; hv_vz_stat
006fe8  2808              CMP      r0,#8
006fea  d123              BNE      |L1.28724|
;;;10728  	{
;;;10729  	if((hv_vz_stat_old!=hv_vz_stat)||(hv_vz_stat_cnt==0))
006fec  7828              LDRB     r0,[r5,#0]  ; hv_vz_stat_old
006fee  2808              CMP      r0,#8
006ff0  d101              BNE      |L1.28662|
006ff2  8820              LDRH     r0,[r4,#0]  ; hv_vz_stat_cnt
006ff4  b900              CBNZ     r0,|L1.28664|
                  |L1.28662|
;;;10730  		{
;;;10731  		hv_vz_stat_cnt=10;
006ff6  8027              STRH     r7,[r4,#0]
                  |L1.28664|
;;;10732  		}
;;;10733  	hv_vz_stat_cnt--;
006ff8  8820              LDRH     r0,[r4,#0]  ; hv_vz_stat_cnt
006ffa  f1a00001          SUB      r0,r0,#1
006ffe  b200              SXTH     r0,r0
007000  8020              STRH     r0,[r4,#0]
;;;10734  	if((hv_vz_stat_cnt==10)||(hv_vz_stat_cnt==9))
007002  280a              CMP      r0,#0xa
007004  d001              BEQ      |L1.28682|
007006  2809              CMP      r0,#9
007008  d10a              BNE      |L1.28704|
                  |L1.28682|
;;;10735  		{
;;;10736  		show_mess(	"ВЫРАВНИВАЮЩИЙ ЗАРЯД ",
00700a  4bec              LDR      r3,|L1.29628|
00700c  f8cd8000          STR      r8,[sp,#0]
007010  f5a3621a          SUB      r2,r3,#0x9a0
007014  f1020118          ADD      r1,r2,#0x18
007018  f5a160a1          SUB      r0,r1,#0x508
00701c  f7fffffe          BL       show_mess
                  |L1.28704|
;;;10737  					"  БУДЕТ ПРОДОЛЖЕН   ",
;;;10738  					"  ПОСЛЕ ВКЛЮЧЕНИЯ   ",
;;;10739  					"    ТУМБЛЕРА!!!     ",
;;;10740  					5000);
;;;10741  		}
;;;10742  	if(sk_stat[1]==1)
007020  7870              LDRB     r0,[r6,#1]  ; sk_stat
007022  2801              CMP      r0,#1
007024  d106              BNE      |L1.28724|
;;;10743  		{
;;;10744  		hv_vz_stat=hvsWRK;
007026  f88a9000          STRB     r9,[r10,#0]
;;;10745  		lc640_write(EE_HV_VZ_STAT,hvsWRK);
00702a  2105              MOVS     r1,#5
00702c  f44f70b4          MOV      r0,#0x168
007030  f7fffffe          BL       lc640_write
                  |L1.28724|
;;;10746  		}
;;;10747  	}
;;;10748  if(hv_vz_stat==hvsERR4)		//ВЗ закончился а тумблер включен
007034  f89a0000          LDRB     r0,[r10,#0]  ; hv_vz_stat
007038  2809              CMP      r0,#9
00703a  d124              BNE      |L1.28806|
;;;10749  	{
;;;10750  	if((hv_vz_stat_old!=hv_vz_stat)||(hv_vz_stat_cnt==0))
00703c  7828              LDRB     r0,[r5,#0]  ; hv_vz_stat_old
00703e  2809              CMP      r0,#9
007040  d101              BNE      |L1.28742|
007042  8820              LDRH     r0,[r4,#0]  ; hv_vz_stat_cnt
007044  b900              CBNZ     r0,|L1.28744|
                  |L1.28742|
;;;10751  		{
;;;10752  		hv_vz_stat_cnt=10;
007046  8027              STRH     r7,[r4,#0]
                  |L1.28744|
;;;10753  		}
;;;10754  	hv_vz_stat_cnt--;
007048  8820              LDRH     r0,[r4,#0]  ; hv_vz_stat_cnt
00704a  f1a00001          SUB      r0,r0,#1
00704e  b200              SXTH     r0,r0
007050  8020              STRH     r0,[r4,#0]
;;;10755  	if((hv_vz_stat_cnt==10)||(hv_vz_stat_cnt==9))
007052  280a              CMP      r0,#0xa
007054  d001              BEQ      |L1.28762|
007056  2809              CMP      r0,#9
007058  d10a              BNE      |L1.28784|
                  |L1.28762|
;;;10756  		{
;;;10757  		show_mess(	"     ВЫКЛЮЧИТЕ      ",
00705a  4bd9              LDR      r3,|L1.29632|
00705c  f2af02ec          ADR      r2,|L1.28532|
007060  f5a37194          SUB      r1,r3,#0x128
007064  f50170ac          ADD      r0,r1,#0x158
007068  f8cd8000          STR      r8,[sp,#0]
00706c  f7fffffe          BL       show_mess
                  |L1.28784|
;;;10758  					"      ТУМБЛЕР       ",
;;;10759  					"   ВЫРАВНИВАЮЩИЙ    ",
;;;10760  					"       ЗАРЯД        ",
;;;10761  					5000);
;;;10762  		}
;;;10763  	if(sk_stat[1]==0)
007070  7870              LDRB     r0,[r6,#1]  ; sk_stat
007072  b940              CBNZ     r0,|L1.28806|
;;;10764  		{
;;;10765  		hv_vz_stat=hvsOFF;
007074  f88ab000          STRB     r11,[r10,#0]
;;;10766  		lc640_write(EE_HV_VZ_STAT,hvsOFF);
007078  2100              MOVS     r1,#0
00707a  f44f70b4          MOV      r0,#0x168
00707e  f7fffffe          BL       lc640_write
;;;10767  		vz_stop();
007082  f7fffffe          BL       vz_stop
                  |L1.28806|
;;;10768  
;;;10769  		}
;;;10770  	}
;;;10771  hv_vz_stat_old=hv_vz_stat;
007086  f89a0000          LDRB     r0,[r10,#0]  ; hv_vz_stat
00708a  7028              STRB     r0,[r5,#0]
;;;10772  /*
;;;10773  if(speedChIsOn)
;;;10774  	{
;;;10775  	speedChTimeCnt++;
;;;10776  	if(speedChTimeCnt>=((signed long)speedChrgTimeInHour*3600L))
;;;10777  		{
;;;10778  		speedChIsOn=0;
;;;10779  		}
;;;10780  	if(speedChrgBlckStat)
;;;10781  		{
;;;10782  		speedChIsOn=0;
;;;10783  		speedChTimeCnt=0;
;;;10784  		}
;;;10785  	}
;;;10786  
;;;10787  
;;;10788  
;;;10789  if(speedChrgAvtEn)
;;;10790  	{
;;;10791  	if(!speedChIsOn)
;;;10792  		{
;;;10793  		if((load_U<u_necc)&&((u_necc-load_U)>speedChrgDU)&&(abs(Ib_ips_termokompensat/10-IZMAX)<5)&&(!speedChrgBlckStat))
;;;10794  			{
;;;10795  			speedChIsOn=1;
;;;10796  			}
;;;10797  		}
;;;10798  	}
;;;10799  
;;;10800  
;;;10801  
;;;10802  if((speedChrgBlckSrc!=1)&&(speedChrgBlckSrc!=2)) speedChrgBlckStat=0;
;;;10803  else
;;;10804  	{
;;;10805  	speedChrgBlckStat=0;
;;;10806  	if(speedChrgBlckSrc==1)
;;;10807  		{
;;;10808  		if(((speedChrgBlckLog==0)&&(adc_buff_[11]>2000)) || ((speedChrgBlckLog==1)&&(adc_buff_[11]<2000))) speedChrgBlckStat=1;
;;;10809  		}
;;;10810  	else if(speedChrgBlckSrc==2)
;;;10811  		{
;;;10812  		if(((speedChrgBlckLog==0)&&(adc_buff_[13]>2000)) || ((speedChrgBlckLog==1)&&(adc_buff_[13]<2000))) speedChrgBlckStat=1;
;;;10813  		}
;;;10814  	}
;;;10815  
;;;10816  
;;;10817  if(speedChrgBlckStat==1)
;;;10818  	{
;;;10819  
;;;10820  	//speedChargeStartStop();
;;;10821  
;;;10822  	speedChrgShowCnt++;
;;;10823  	if(speedChrgShowCnt>=30)	
;;;10824  		{
;;;10825  		speedChrgShowCnt=0;
;;;10826  		show_mess(	"     УСКОРЕННЫЙ     ",
;;;10827  					"       ЗАРЯД        ",
;;;10828  					"     ЗАПРЕЩЕН!!!    ",
;;;10829  					"                    ",
;;;10830  					5000);
;;;10831  		}
;;;10832  	}
;;;10833  else speedChrgShowCnt=0;
;;;10834  
;;;10835  */
;;;10836  }
00708c  e5e7              B        |L1.27742|
;;;10837  
                          ENDP

                  numOfForvardBps_hndl PROC
;;;10854  //-----------------------------------------------
;;;10855  void	numOfForvardBps_hndl(void)			//Программа смены первого источника для равномерного износа БПСов
00708e  e92d41f0          PUSH     {r4-r8,lr}
;;;10856  {
;;;10857  
;;;10858  numOfForvardBps_old=numOfForvardBps;
007092  4ccc              LDR      r4,|L1.29636|
007094  7820              LDRB     r0,[r4,#0]  ; numOfForvardBps
007096  7060              STRB     r0,[r4,#1]
;;;10859  
;;;10860  numOfForvardBps=0;
007098  f04f0500          MOV      r5,#0
00709c  f8045928          STRB     r5,[r4],#-0x28
;;;10861  
;;;10862  //FORVARDBPSCHHOUR=10;
;;;10863  
;;;10864  if((FORVARDBPSCHHOUR<=0)||(FORVARDBPSCHHOUR>500))
0070a0  4ec9              LDR      r6,|L1.29640|
0070a2  f9b60000          LDRSH    r0,[r6,#0]  ; FORVARDBPSCHHOUR
0070a6  2800              CMP      r0,#0
0070a8  dd02              BLE      |L1.28848|
0070aa  f5b07ffa          CMP      r0,#0x1f4
0070ae  dd02              BLE      |L1.28854|
                  |L1.28848|
;;;10865  	{
;;;10866  	FORVARDBPSCHHOUR=0;
0070b0  8035              STRH     r5,[r6,#0]
                  |L1.28850|
;;;10867  	return;
;;;10868  	}
;;;10869  
;;;10870  numOfForvardBps_minCnt++;
;;;10871  
;;;10872  
;;;10873  if(numOfForvardBps_minCnt>=60)
;;;10874  	{
;;;10875  	numOfForvardBps_minCnt=0;
;;;10876  	numOfForvardBps_hourCnt=lc640_read_int(EE_FORVBPSHOURCNT);
;;;10877  	numOfForvardBps_hourCnt++;
;;;10878  	if(numOfForvardBps_hourCnt>=(FORVARDBPSCHHOUR*NUMIST))
;;;10879  		{
;;;10880  		numOfForvardBps_hourCnt=0;
;;;10881  		}
;;;10882  	lc640_write_int(EE_FORVBPSHOURCNT,numOfForvardBps_hourCnt);
;;;10883  	}
;;;10884  
;;;10885  numOfForvardBps=numOfForvardBps_hourCnt/FORVARDBPSCHHOUR;
;;;10886  
;;;10887  //if(numOfForvardBps)
;;;10888  //numOfForvardBps_old=numOfForvardBps; 
;;;10889  }
0070b2  e8bd81f0          POP      {r4-r8,pc}
                  |L1.28854|
0070b6  f894002a          LDRB     r0,[r4,#0x2a]         ;10870  ; numOfForvardBps_minCnt
0070ba  f1000001          ADD      r0,r0,#1              ;10870
0070be  b2c0              UXTB     r0,r0                 ;10870
0070c0  f884002a          STRB     r0,[r4,#0x2a]         ;10870
0070c4  283c              CMP      r0,#0x3c              ;10873
0070c6  d31b              BCC      |L1.28928|
0070c8  f884502a          STRB     r5,[r4,#0x2a]         ;10875
0070cc  f44f7794          MOV      r7,#0x128             ;10876
0070d0  4638              MOV      r0,r7                 ;10876
0070d2  f7fffffe          BL       lc640_read_int
0070d6  f1000001          ADD      r0,r0,#1              ;10877
0070da  b200              SXTH     r0,r0                 ;10877
0070dc  f8a40078          STRH     r0,[r4,#0x78]         ;10877
0070e0  4aba              LDR      r2,|L1.29644|
0070e2  f9b61000          LDRSH    r1,[r6,#0]            ;10878  ; FORVARDBPSCHHOUR
0070e6  f9b22000          LDRSH    r2,[r2,#0]            ;10878  ; NUMIST
0070ea  fb01f102          MUL      r1,r1,r2              ;10878
0070ee  4281              CMP      r1,r0                 ;10878
0070f0  dc01              BGT      |L1.28918|
0070f2  f8a45078          STRH     r5,[r4,#0x78]         ;10880
                  |L1.28918|
0070f6  f9b41078          LDRSH    r1,[r4,#0x78]         ;10882  ; numOfForvardBps_hourCnt
0070fa  4638              MOV      r0,r7                 ;10882
0070fc  f7fffffe          BL       lc640_write_int
                  |L1.28928|
007100  f9b40078          LDRSH    r0,[r4,#0x78]         ;10885  ; numOfForvardBps_hourCnt
007104  f9b61000          LDRSH    r1,[r6,#0]            ;10885  ; FORVARDBPSCHHOUR
007108  fb90f0f1          SDIV     r0,r0,r1              ;10885
00710c  f8840028          STRB     r0,[r4,#0x28]         ;10885
007110  e7cf              B        |L1.28850|
;;;10890  
                          ENDP

                  numOfForvardBps_init PROC
;;;10891  //-----------------------------------------------
;;;10892  void	numOfForvardBps_init(void)			//Программа сброса системы смены первого источника для равномерного износа БПСов
007112  b510              PUSH     {r4,lr}
;;;10893  {									//Должна вызываться при изменении кол-ва источников в структуре
;;;10894  lc640_write_int(EE_FORVBPSHOURCNT,0);
007114  2100              MOVS     r1,#0
007116  f44f7094          MOV      r0,#0x128
00711a  f7fffffe          BL       lc640_write_int
;;;10895  numOfForvardBps_minCnt=58;
00711e  49a9              LDR      r1,|L1.29636|
007120  f04f003a          MOV      r0,#0x3a
007124  f1a10128          SUB      r1,r1,#0x28
007128  f881002a          STRB     r0,[r1,#0x2a]
;;;10896  }
00712c  bd10              POP      {r4,pc}
;;;10897  
                          ENDP

                  outVoltContrHndl PROC
;;;10898  //-----------------------------------------------
;;;10899  void outVoltContrHndl(void)
00712e  b570              PUSH     {r4-r6,lr}
;;;10900  { 
;;;10901  if((load_U>U_OUT_KONTR_MAX)||(load_U<U_OUT_KONTR_MIN))
007130  4ca7              LDR      r4,|L1.29648|
007132  48a8              LDR      r0,|L1.29652|
;;;10902  	{
;;;10903  	outVoltContrHndlCnt_=0;
;;;10904  	if(outVoltContrHndlCnt<U_OUT_KONTR_DELAY)
007134  4aa8              LDR      r2,|L1.29656|
007136  f9b41000          LDRSH    r1,[r4,#0]            ;10901  ; load_U
00713a  f9b06000          LDRSH    r6,[r0,#0]            ;10901  ; U_OUT_KONTR_MAX
00713e  2500              MOVS     r5,#0                 ;10903
007140  f9b20000          LDRSH    r0,[r2,#0]
007144  4ba5              LDR      r3,|L1.29660|
007146  42b1              CMP      r1,r6                 ;10901
007148  dc04              BGT      |L1.29012|
00714a  4ea5              LDR      r6,|L1.29664|
00714c  f9b66000          LDRSH    r6,[r6,#0]            ;10901  ; U_OUT_KONTR_MIN
007150  42b1              CMP      r1,r6                 ;10901
007152  da0f              BGE      |L1.29044|
                  |L1.29012|
007154  801d              STRH     r5,[r3,#0]            ;10903
007156  49a3              LDR      r1,|L1.29668|
007158  f9b11000          LDRSH    r1,[r1,#0]  ; U_OUT_KONTR_DELAY
00715c  4288              CMP      r0,r1
00715e  da1b              BGE      |L1.29080|
;;;10905  		{
;;;10906  		outVoltContrHndlCnt++;
007160  f1000001          ADD      r0,r0,#1
007164  b200              SXTH     r0,r0
007166  8010              STRH     r0,[r2,#0]
;;;10907  		if(outVoltContrHndlCnt==U_OUT_KONTR_DELAY)
007168  4288              CMP      r0,r1
00716a  d115              BNE      |L1.29080|
;;;10908  			{
;;;10909  			avar_uout_hndl(1);
00716c  2001              MOVS     r0,#1
00716e  f7fffffe          BL       avar_uout_hndl
007172  e011              B        |L1.29080|
                  |L1.29044|
;;;10910  			}
;;;10911  		}
;;;10912  	}
;;;10913  else
;;;10914  	{
;;;10915  	if(outVoltContrHndlCnt)
007174  b180              CBZ      r0,|L1.29080|
;;;10916  		{
;;;10917  		if(outVoltContrHndlCnt_<5)
007176  f9b30000          LDRSH    r0,[r3,#0]  ; outVoltContrHndlCnt_
00717a  2805              CMP      r0,#5
00717c  da0c              BGE      |L1.29080|
;;;10918  			{
;;;10919  			outVoltContrHndlCnt_++;
00717e  f1000001          ADD      r0,r0,#1
007182  b200              SXTH     r0,r0
007184  8018              STRH     r0,[r3,#0]
;;;10920  			if(outVoltContrHndlCnt_>=5)
007186  2805              CMP      r0,#5
007188  db06              BLT      |L1.29080|
;;;10921  				{
;;;10922  				outVoltContrHndlCnt=0;
00718a  8015              STRH     r5,[r2,#0]
;;;10923  				if(uout_av)avar_uout_hndl(0);
00718c  4896              LDR      r0,|L1.29672|
00718e  7800              LDRB     r0,[r0,#0]  ; uout_av
007190  b110              CBZ      r0,|L1.29080|
007192  2000              MOVS     r0,#0
007194  f7fffffe          BL       avar_uout_hndl
                  |L1.29080|
;;;10924  				}
;;;10925  			}
;;;10926  		}
;;;10927  	}
;;;10928  
;;;10929  if (load_U<(USIGN*10)) 
007198  4894              LDR      r0,|L1.29676|
00719a  f9b41000          LDRSH    r1,[r4,#0]  ; load_U
00719e  f9b00000          LDRSH    r0,[r0,#0]  ; USIGN
0071a2  eb000080          ADD      r0,r0,r0,LSL #2
0071a6  ebb10f40          CMP      r1,r0,LSL #1
0071aa  da0b              BGE      |L1.29124|
;;;10930  	{
;;;10931  	if(!bSILENT)
0071ac  4890              LDR      r0,|L1.29680|
0071ae  6800              LDR      r0,[r0,#0]  ; bSILENT
0071b0  2800              CMP      r0,#0
0071b2  d107              BNE      |L1.29124|
;;;10932  		{
;;;10933  		mess_send(MESS2RELE_HNDL,PARAM_RELE_BAT_IS_DISCHARGED,1,20);
0071b4  e8bd4070          POP      {r4-r6,lr}
0071b8  2314              MOVS     r3,#0x14
0071ba  2201              MOVS     r2,#1
0071bc  2172              MOVS     r1,#0x72
0071be  20d2              MOVS     r0,#0xd2
0071c0  f7ffbffe          B.W      mess_send
                  |L1.29124|
;;;10934  		}
;;;10935  
;;;10936  	//bU_BAT2REL_AV_BAT=1;
;;;10937  	}
;;;10938  
;;;10939  
;;;10940  }
0071c4  bd70              POP      {r4-r6,pc}
;;;10941  
                          ENDP

                  vent_resurs_hndl PROC
;;;10942  //-----------------------------------------------
;;;10943  void vent_resurs_hndl(void)
0071c6  e92d47f0          PUSH     {r4-r10,lr}
;;;10944  {
;;;10945  char i;
;;;10946  char crc_in,crc_eval;
;;;10947  
;;;10948  for(i=0;i<NUMIST;i++)
0071ca  f04f0200          MOV      r2,#0
;;;10949  	{
;;;10950  	if((bps[i]._buff[7]&0xc0)==0x00)
;;;10951  		{
;;;10952  		bps[i]._vent_resurs_temp[0]=bps[i]._buff[7];
;;;10953  		}
;;;10954  	else if((bps[i]._buff[7]&0xc0)==0x40)
;;;10955  		{
;;;10956  		bps[i]._vent_resurs_temp[1]=bps[i]._buff[7];
;;;10957  		}
;;;10958  	else if((bps[i]._buff[7]&0xc0)==0x80)
;;;10959  		{
;;;10960  		bps[i]._vent_resurs_temp[2]=bps[i]._buff[7];
;;;10961  		}
;;;10962  	else if((bps[i]._buff[7]&0xc0)==0xc0)
;;;10963  		{
;;;10964  		bps[i]._vent_resurs_temp[3]=bps[i]._buff[7];
;;;10965  		}
;;;10966  	crc_in=0;
;;;10967  	crc_in|=(bps[i]._vent_resurs_temp[0]&0x30)>>4;
;;;10968  	crc_in|=(bps[i]._vent_resurs_temp[1]&0x30)>>2;
;;;10969  	crc_in|=(bps[i]._vent_resurs_temp[2]&0x30);
;;;10970  	crc_in|=(bps[i]._vent_resurs_temp[3]&0x30)<<2;
;;;10971  
;;;10972  	crc_eval =bps[i]._vent_resurs_temp[0]&0x0f;
;;;10973  	crc_eval^=bps[i]._vent_resurs_temp[1]&0x0f;
;;;10974  	crc_eval^=bps[i]._vent_resurs_temp[2]&0x0f;
;;;10975  	crc_eval^=bps[i]._vent_resurs_temp[3]&0x0f;
;;;10976  
;;;10977  	if(crc_eval==crc_in)
;;;10978  		{
;;;10979  		unsigned short temp_US;
;;;10980  		temp_US=0;
;;;10981  
;;;10982  		temp_US|=(bps[i]._vent_resurs_temp[3]&0x0f);
;;;10983  		temp_US<<=4;
;;;10984  		temp_US|=(bps[i]._vent_resurs_temp[2]&0x0f);
;;;10985  		temp_US<<=4;
;;;10986  		temp_US|=(bps[i]._vent_resurs_temp[1]&0x0f);
;;;10987  		temp_US<<=4;
;;;10988  		temp_US|=(bps[i]._vent_resurs_temp[0]&0x0f);
;;;10989  
;;;10990  		if(bps[i]._vent_resurs!=temp_US)bps[i]._vent_resurs=temp_US;
;;;10991  		}
;;;10992  
;;;10993  	if((bps[i]._vent_resurs>TVENTMAX*10)&&(TVENTMAX>0))
0071ce  4889              LDR      r0,|L1.29684|
0071d0  f8dfc224          LDR      r12,|L1.29688|
0071d4  f9b06000          LDRSH    r6,[r0,#0]
0071d8  487c              LDR      r0,|L1.29644|
0071da  f9b07000          LDRSH    r7,[r0,#0]            ;10948
0071de  e06e              B        |L1.29374|
                  |L1.29152|
0071e0  eb0200c2          ADD      r0,r2,r2,LSL #3       ;10950
0071e4  eb001002          ADD      r0,r0,r2,LSL #4       ;10950
0071e8  eb0c0080          ADD      r0,r12,r0,LSL #2      ;10950
0071ec  7b41              LDRB     r1,[r0,#0xd]          ;10950
0071ee  098b              LSRS     r3,r1,#6              ;10950
0071f0  d006              BEQ      |L1.29184|
0071f2  2301              MOVS     r3,#1                 ;10954
0071f4  ebb31f91          CMP      r3,r1,LSR #6          ;10954
0071f8  d105              BNE      |L1.29190|
0071fa  f8801059          STRB     r1,[r0,#0x59]         ;10956
0071fe  e00f              B        |L1.29216|
                  |L1.29184|
007200  f8801058          STRB     r1,[r0,#0x58]         ;10952
007204  e00c              B        |L1.29216|
                  |L1.29190|
007206  2302              MOVS     r3,#2                 ;10958
007208  ebb31f91          CMP      r3,r1,LSR #6          ;10958
00720c  d102              BNE      |L1.29204|
00720e  f880105a          STRB     r1,[r0,#0x5a]         ;10960
007212  e005              B        |L1.29216|
                  |L1.29204|
007214  2303              MOVS     r3,#3                 ;10962
007216  ebb31f91          CMP      r3,r1,LSR #6          ;10962
00721a  d101              BNE      |L1.29216|
00721c  f880105b          STRB     r1,[r0,#0x5b]         ;10964
                  |L1.29216|
007220  f8101f58          LDRB     r1,[r0,#0x58]!        ;10967
007224  f3c11401          UBFX     r4,r1,#4,#2           ;10967
007228  7843              LDRB     r3,[r0,#1]            ;10968
00722a  f0030530          AND      r5,r3,#0x30           ;10968
00722e  ea440495          ORR      r4,r4,r5,LSR #2       ;10968
007232  f8909002          LDRB     r9,[r0,#2]            ;10969
007236  f0090830          AND      r8,r9,#0x30           ;10969
00723a  ea480804          ORR      r8,r8,r4              ;10969
00723e  78c5              LDRB     r5,[r0,#3]            ;10970
007240  f1a00058          SUB      r0,r0,#0x58           ;10970
007244  f0050430          AND      r4,r5,#0x30           ;10970
007248  ea480884          ORR      r8,r8,r4,LSL #2       ;10970
00724c  f001010f          AND      r1,r1,#0xf            ;10972
007250  f003040f          AND      r4,r3,#0xf            ;10973
007254  ea840a01          EOR      r10,r4,r1             ;10973
007258  f009030f          AND      r3,r9,#0xf            ;10974
00725c  ea83090a          EOR      r9,r3,r10             ;10974
007260  f005050f          AND      r5,r5,#0xf            ;10975
007264  ea850909          EOR      r9,r5,r9              ;10975
007268  45c1              CMP      r9,r8                 ;10977
00726a  d113              BNE      |L1.29332|
00726c  ea4f1505          LSL      r5,r5,#4              ;10983
007270  ea430305          ORR      r3,r3,r5              ;10984
007274  ea4f1303          LSL      r3,r3,#4              ;10985
007278  ea440403          ORR      r4,r4,r3              ;10986
00727c  ea4f5304          LSL      r3,r4,#20             ;10987
007280  ea4f4313          LSR      r3,r3,#16             ;10987
007284  ea410103          ORR      r1,r1,r3              ;10988
007288  f8b0305c          LDRH     r3,[r0,#0x5c]         ;10990
00728c  428b              CMP      r3,r1                 ;10990
00728e  d001              BEQ      |L1.29332|
007290  f8a0105c          STRH     r1,[r0,#0x5c]         ;10990
                  |L1.29332|
007294  f8b0105c          LDRH     r1,[r0,#0x5c]
007298  eb060386          ADD      r3,r6,r6,LSL #2
00729c  ebb10f43          CMP      r1,r3,LSL #1
0072a0  dd06              BLE      |L1.29360|
0072a2  2e00              CMP      r6,#0
0072a4  dd04              BLE      |L1.29360|
;;;10994  		{
;;;10995  		bps[i]._av|=(1<<4);
0072a6  7841              LDRB     r1,[r0,#1]
0072a8  f0410110          ORR      r1,r1,#0x10
0072ac  7041              STRB     r1,[r0,#1]
0072ae  e003              B        |L1.29368|
                  |L1.29360|
;;;10996  		}
;;;10997  	else bps[i]._av&=~(1<<4);
0072b0  7841              LDRB     r1,[r0,#1]
0072b2  f0210110          BIC      r1,r1,#0x10
0072b6  7041              STRB     r1,[r0,#1]
                  |L1.29368|
0072b8  f1020201          ADD      r2,r2,#1              ;10948
0072bc  b2d2              UXTB     r2,r2                 ;10948
                  |L1.29374|
0072be  42ba              CMP      r2,r7                 ;10948
0072c0  db8e              BLT      |L1.29152|
;;;10998  	}
;;;10999  }
0072c2  e8bd87f0          POP      {r4-r10,pc}
;;;11000  
                          ENDP

                  vent_hndl PROC
;;;11001  //-----------------------------------------------
;;;11002  void vent_hndl(void)
0072c6  e92d4ff0          PUSH     {r4-r11,lr}
;;;11003  {
0072ca  b087              SUB      sp,sp,#0x1c
;;;11004  if(RELEVENTSIGN==rvsAKB)
;;;11005  	{
;;;11006  	if(vent_stat==0)
0072cc  4c3d              LDR      r4,|L1.29636|
0072ce  484b              LDR      r0,|L1.29692|
;;;11007  		{
;;;11008  		if	(
;;;11009  			(BAT_IS_ON[0]==bisON)&&((bat[0]._Tb>TVENTON)||(bat[0]._nd))
0072d0  494b              LDR      r1,|L1.29696|
;;;11010  			||
;;;11011  			(BAT_IS_ON[1]==bisON)&&((bat[1]._Tb>TVENTON)||(bat[1]._nd))
;;;11012  			)
;;;11013  			{
;;;11014  			vent_stat=1;
;;;11015  			}
;;;11016  		}
;;;11017  	else if(vent_stat==1)
;;;11018  		{
;;;11019  		if	(
;;;11020  			((BAT_IS_ON[0]!=bisON)||((BAT_IS_ON[0]==bisON)&&(bat[0]._Tb<TVENTOFF)&&(!bat[0]._nd)))
0072d2  4a4c              LDR      r2,|L1.29700|
0072d4  3c28              SUBS     r4,r4,#0x28           ;11006
0072d6  7800              LDRB     r0,[r0,#0]            ;11004  ; RELEVENTSIGN
0072d8  f9943000          LDRSB    r3,[r4,#0]            ;11006
0072dc  f9b11000          LDRSH    r1,[r1,#0]            ;11009
0072e0  f9b22000          LDRSH    r2,[r2,#0]
0072e4  b148              CBZ      r0,|L1.29434|
;;;11021  			&&
;;;11022  			((BAT_IS_ON[1]!=bisON)||((BAT_IS_ON[1]==bisON)&&(bat[1]._Tb<TVENTOFF)&&(!bat[1]._nd)))
;;;11023  			)
;;;11024  			{
;;;11025  			vent_stat=0;
;;;11026  			}
;;;11027  		}
;;;11028  	}
;;;11029  else if(RELEVENTSIGN==rvsBPS)
0072e6  2802              CMP      r0,#2
0072e8  d03c              BEQ      |L1.29540|
;;;11030  	{
;;;11031  /*	if	(
;;;11032  		(((bps[0]._flags_tm&0x06)||(bps[0]._cnt>=30)))||
;;;11033  		(((bps[1]._flags_tm&0x06)||(bps[1]._cnt>=30))&&(NUMIST>1))||
;;;11034  		(((bps[2]._flags_tm&0x06)||(bps[2]._cnt>=30))&&(NUMIST>2))||
;;;11035  		(((bps[3]._flags_tm&0x06)||(bps[3]._cnt>=30))&&(NUMIST>3))||
;;;11036  		(((bps[4]._flags_tm&0x06)||(bps[4]._cnt>=30))&&(NUMIST>4))||
;;;11037  		(((bps[5]._flags_tm&0x06)||(bps[5]._cnt>=30))&&(NUMIST>5))||
;;;11038  		(((bps[6]._flags_tm&0x06)||(bps[6]._cnt>=30))&&(NUMIST>6))
;;;11039  		)
;;;11040  		{
;;;11041  		vent_stat=1;
;;;11042  		}
;;;11043  	else vent_stat=0;
;;;11044  	*/
;;;11045  
;;;11046  	if	(
;;;11047  		((NUMIST)&&((bps[0]._Ti>TVENTON)||(bps[0]._cnt>=30)))
;;;11048  		||
;;;11049  		((NUMIST>1)&&((bps[1]._Ti>TVENTON)||(bps[1]._cnt>=30)))
;;;11050  		||
;;;11051  		((NUMIST>2)&&((bps[2]._Ti>TVENTON)||(bps[2]._cnt>=30)))
;;;11052  		||
;;;11053  		((NUMIST>3)&&((bps[3]._Ti>TVENTON)||(bps[3]._cnt>=30)))
;;;11054  		||
;;;11055  		((NUMIST>4)&&((bps[4]._Ti>TVENTON)||(bps[4]._cnt>=30)))
;;;11056  		||
;;;11057  		((NUMIST>5)&&((bps[5]._Ti>TVENTON)||(bps[5]._cnt>=30)))
;;;11058  		||
;;;11059  		((NUMIST>6)&&((bps[6]._Ti>TVENTON)||(bps[6]._cnt>=30)))
;;;11060  		||
;;;11061  		((NUMIST>7)&&((bps[7]._Ti>TVENTON)||(bps[7]._cnt>=30)))
;;;11062  		)
;;;11063  		{
;;;11064  		vent_stat=1;
;;;11065  		}
;;;11066  	else if(vent_stat==1)
;;;11067  		{
;;;11068  		if	(
;;;11069  			((!NUMIST)||((NUMIST)&&(bps[0]._Ti<TVENTOFF)&&(bps[0]._cnt<10)))
;;;11070  			&&
;;;11071  			((NUMIST<2)||((NUMIST>=2)&&(bps[1]._Ti<TVENTOFF)&&(bps[1]._cnt<10)))
;;;11072  			&&
;;;11073  			((NUMIST<3)||((NUMIST>=3)&&(bps[2]._Ti<TVENTOFF)&&(bps[2]._cnt<10)))
;;;11074  			&&
;;;11075  			((NUMIST<4)||((NUMIST>=4)&&(bps[3]._Ti<TVENTOFF)&&(bps[3]._cnt<10)))
;;;11076  			&&
;;;11077  			((NUMIST<5)||((NUMIST>=5)&&(bps[4]._Ti<TVENTOFF)&&(bps[4]._cnt<10)))
;;;11078  			&&
;;;11079  			((NUMIST<6)||((NUMIST>=6)&&(bps[5]._Ti<TVENTOFF)&&(bps[5]._cnt<10)))
;;;11080  			&&
;;;11081  			((NUMIST<7)||((NUMIST>=7)&&(bps[6]._Ti<TVENTOFF)&&(bps[6]._cnt<10)))
;;;11082  			&&
;;;11083  			((NUMIST<8)||((NUMIST>=8)&&(bps[7]._Ti<TVENTOFF)&&(bps[7]._cnt<10)))
;;;11084  			)
;;;11085  			{
;;;11086  			vent_stat=0;
;;;11087  			}
;;;11088  		}
;;;11089  	}
;;;11090  else if(RELEVENTSIGN==rvsEXT)
0072ea  2801              CMP      r0,#1
0072ec  d063              BEQ      |L1.29622|
;;;11091  	{
;;;11092  	if	(
;;;11093  		((NUMDT)&&((t_ext[0]>TVENTON)||(ND_EXT[0])))
;;;11094  		||
;;;11095  		((NUMDT>1)&&((t_ext[1]>TVENTON)||(ND_EXT[1])))
;;;11096  		||
;;;11097  		((NUMDT>2)&&((t_ext[2]>TVENTON)||(ND_EXT[2])))
;;;11098  		)
;;;11099  		{
;;;11100  		vent_stat=1;
;;;11101  		}
;;;11102  	else if(vent_stat==1)
;;;11103  		{
;;;11104  		if	(
;;;11105  			((!NUMDT)||((NUMDT)&&(t_ext[0]<TVENTOFF)&&(!ND_EXT[0])))
;;;11106  			&&
;;;11107  			((NUMDT<2)||((NUMDT>=2)&&(t_ext[1]<TVENTOFF)&&(!ND_EXT[1])))
;;;11108  			&&
;;;11109  			((NUMDT<3)||((NUMDT>=3)&&(t_ext[2]<TVENTOFF)&&(!ND_EXT[2])))
;;;11110  			)
;;;11111  			{
;;;11112  			vent_stat=0;
;;;11113  			}
;;;11114  		}
;;;11115  	}
;;;11116  else vent_stat=1;
0072ee  f04f0001          MOV      r0,#1
0072f2  7020              STRB     r0,[r4,#0]
                  |L1.29428|
;;;11117  }
0072f4  b007              ADD      sp,sp,#0x1c
0072f6  e8bd8ff0          POP      {r4-r11,pc}
                  |L1.29434|
0072fa  4f43              LDR      r7,|L1.29704|
0072fc  f8df810c          LDR      r8,|L1.29708|
007300  f9b7000a          LDRSH    r0,[r7,#0xa]          ;11009
007304  7b3d              LDRB     r5,[r7,#0xc]          ;11009
007306  f9b76056          LDRSH    r6,[r7,#0x56]         ;11011
00730a  f898c000          LDRB     r12,[r8,#0]           ;11008
00730e  f8977058          LDRB     r7,[r7,#0x58]         ;11011
007312  f8988001          LDRB     r8,[r8,#1]            ;11011
007316  b12b              CBZ      r3,|L1.29476|
007318  2b01              CMP      r3,#1                 ;11017
00731a  d1eb              BNE      |L1.29428|
00731c  f1bc0f55          CMP      r12,#0x55             ;11019
007320  d115              BNE      |L1.29518|
007322  e010              B        |L1.29510|
                  |L1.29476|
007324  f1bc0f55          CMP      r12,#0x55             ;11008
007328  d102              BNE      |L1.29488|
00732a  4288              CMP      r0,r1                 ;11009
00732c  dc07              BGT      |L1.29502|
00732e  b935              CBNZ     r5,|L1.29502|
                  |L1.29488|
007330  f1b80f55          CMP      r8,#0x55              ;11011
007334  d1de              BNE      |L1.29428|
007336  428e              CMP      r6,r1                 ;11011
007338  dc01              BGT      |L1.29502|
00733a  2f00              CMP      r7,#0                 ;11011
00733c  d0da              BEQ      |L1.29428|
                  |L1.29502|
00733e  f04f0001          MOV      r0,#1                 ;11014
007342  7020              STRB     r0,[r4,#0]            ;11014
007344  e7d6              B        |L1.29428|
                  |L1.29510|
007346  4290              CMP      r0,r2                 ;11020
007348  dad4              BGE      |L1.29428|
00734a  2d00              CMP      r5,#0                 ;11020
00734c  d1d2              BNE      |L1.29428|
                  |L1.29518|
00734e  f1b80f55          CMP      r8,#0x55              ;11022
007352  d103              BNE      |L1.29532|
007354  4296              CMP      r6,r2                 ;11022
007356  dacd              BGE      |L1.29428|
007358  2f00              CMP      r7,#0                 ;11022
00735a  d1cb              BNE      |L1.29428|
                  |L1.29532|
00735c  f04f0000          MOV      r0,#0                 ;11025
007360  7020              STRB     r0,[r4,#0]            ;11025
007362  e7c7              B        |L1.29428|
                  |L1.29540|
007364  4e24              LDR      r6,|L1.29688|
007366  4819              LDR      r0,|L1.29644|
007368  6ab5              LDR      r5,[r6,#0x28]         ;11047
00736a  f9b00000          LDRSH    r0,[r0,#0]            ;11046  ; NUMIST
00736e  78f6              LDRB     r6,[r6,#3]            ;11047
007370  b118              CBZ      r0,|L1.29562|
007372  428d              CMP      r5,r1                 ;11047
007374  dc7e              BGT      |L1.29812|
007376  2e1e              CMP      r6,#0x1e              ;11047
007378  d27c              BCS      |L1.29812|
                  |L1.29562|
00737a  f8dfc07c          LDR      r12,|L1.29688|
00737e  2801              CMP      r0,#1                 ;11049
007380  f8dc708c          LDR      r7,[r12,#0x8c]        ;11049
007384  f89cc067          LDRB     r12,[r12,#0x67]       ;11049
007388  f8cdc018          STR      r12,[sp,#0x18]        ;11049
00738c  dd06              BLE      |L1.29596|
00738e  428f              CMP      r7,r1                 ;11049
007390  dc70              BGT      |L1.29812|
007392  f8ddc018          LDR      r12,[sp,#0x18]        ;11049
007396  f1bc0f1e          CMP      r12,#0x1e             ;11049
00739a  d26b              BCS      |L1.29812|
                  |L1.29596|
00739c  f8dfc058          LDR      r12,|L1.29688|
0073a0  2802              CMP      r0,#2                 ;11051
0073a2  f8dc80f0          LDR      r8,[r12,#0xf0]        ;11051
0073a6  f8cd8014          STR      r8,[sp,#0x14]         ;11051
0073aa  f89cc0cb          LDRB     r12,[r12,#0xcb]       ;11051
0073ae  f8cdc010          STR      r12,[sp,#0x10]        ;11051
0073b2  dd36              BLE      |L1.29730|
0073b4  e02c              B        |L1.29712|
                  |L1.29622|
0073b6  e0c9              B        |L1.30028|
                  |L1.29624|
                          DCD      ||.text||+0x1794
                  |L1.29628|
                          DCD      ||.text||+0x266c
                  |L1.29632|
                          DCD      ||.text||+0x1d44
                  |L1.29636|
                          DCD      ||area_number.25||+0x28
                  |L1.29640|
                          DCD      FORVARDBPSCHHOUR
                  |L1.29644|
                          DCD      NUMIST
                  |L1.29648|
                          DCD      load_U
                  |L1.29652|
                          DCD      U_OUT_KONTR_MAX
                  |L1.29656|
                          DCD      outVoltContrHndlCnt
                  |L1.29660|
                          DCD      outVoltContrHndlCnt_
                  |L1.29664|
                          DCD      U_OUT_KONTR_MIN
                  |L1.29668|
                          DCD      U_OUT_KONTR_DELAY
                  |L1.29672|
                          DCD      uout_av
                  |L1.29676|
                          DCD      USIGN
                  |L1.29680|
                          DCD      bSILENT
                  |L1.29684|
                          DCD      TVENTMAX
                  |L1.29688|
                          DCD      bps
                  |L1.29692|
                          DCD      RELEVENTSIGN
                  |L1.29696|
                          DCD      TVENTON
                  |L1.29700|
                          DCD      TVENTOFF
                  |L1.29704|
                          DCD      bat
                  |L1.29708|
                          DCD      BAT_IS_ON
                  |L1.29712|
007410  f8ddc014          LDR      r12,[sp,#0x14]        ;11051
007414  458c              CMP      r12,r1                ;11051
007416  dc57              BGT      |L1.29896|
007418  f8ddc010          LDR      r12,[sp,#0x10]        ;11051
00741c  f1bc0f1e          CMP      r12,#0x1e             ;11051
007420  d252              BCS      |L1.29896|
                  |L1.29730|
007422  f8dfc1b4          LDR      r12,|L1.30168|
007426  2803              CMP      r0,#3                 ;11053
007428  f8dc8154          LDR      r8,[r12,#0x154]       ;11053
00742c  f8cd800c          STR      r8,[sp,#0xc]          ;11053
007430  f89cc12f          LDRB     r12,[r12,#0x12f]      ;11053
007434  f8cdc008          STR      r12,[sp,#8]           ;11053
007438  dd08              BLE      |L1.29772|
00743a  f8ddc00c          LDR      r12,[sp,#0xc]         ;11053
00743e  458c              CMP      r12,r1                ;11053
007440  dc42              BGT      |L1.29896|
007442  f8ddc008          LDR      r12,[sp,#8]           ;11053
007446  f1bc0f1e          CMP      r12,#0x1e             ;11053
00744a  d23d              BCS      |L1.29896|
                  |L1.29772|
00744c  f8df8188          LDR      r8,|L1.30168|
007450  2804              CMP      r0,#4                 ;11055
007452  f8d8c1b8          LDR      r12,[r8,#0x1b8]       ;11055
007456  f8988193          LDRB     r8,[r8,#0x193]        ;11055
00745a  f8cd8004          STR      r8,[sp,#4]            ;11055
00745e  dd06              BLE      |L1.29806|
007460  458c              CMP      r12,r1                ;11055
007462  dc31              BGT      |L1.29896|
007464  f8dd8004          LDR      r8,[sp,#4]            ;11055
007468  f1b80f1e          CMP      r8,#0x1e              ;11055
00746c  d22c              BCS      |L1.29896|
                  |L1.29806|
00746e  f8df9168          LDR      r9,|L1.30168|
007472  e000              B        |L1.29814|
                  |L1.29812|
007474  e028              B        |L1.29896|
                  |L1.29814|
007476  f8d9821c          LDR      r8,[r9,#0x21c]        ;11057
00747a  f89991f7          LDRB     r9,[r9,#0x1f7]        ;11057
00747e  f8cd9000          STR      r9,[sp,#0]            ;11057
007482  2805              CMP      r0,#5                 ;11057
007484  dd06              BLE      |L1.29844|
007486  4588              CMP      r8,r1                 ;11057
007488  dc1e              BGT      |L1.29896|
00748a  f8dd9000          LDR      r9,[sp,#0]            ;11057
00748e  f1b90f1e          CMP      r9,#0x1e              ;11057
007492  d219              BCS      |L1.29896|
                  |L1.29844|
007494  f8dfa140          LDR      r10,|L1.30168|
007498  2806              CMP      r0,#6                 ;11059
00749a  f89ae25b          LDRB     lr,[r10,#0x25b]       ;11059
00749e  f8da9280          LDR      r9,[r10,#0x280]       ;11059
0074a2  dd04              BLE      |L1.29870|
0074a4  4589              CMP      r9,r1                 ;11059
0074a6  dc0f              BGT      |L1.29896|
0074a8  f1be0f1e          CMP      lr,#0x1e              ;11059
0074ac  d20c              BCS      |L1.29896|
                  |L1.29870|
0074ae  f8dfb128          LDR      r11,|L1.30168|
0074b2  2807              CMP      r0,#7                 ;11061
0074b4  f8dba2e4          LDR      r10,[r11,#0x2e4]      ;11061
0074b8  f89bb2bf          LDRB     r11,[r11,#0x2bf]      ;11061
0074bc  dd08              BLE      |L1.29904|
0074be  458a              CMP      r10,r1                ;11061
0074c0  dc02              BGT      |L1.29896|
0074c2  f1bb0f1e          CMP      r11,#0x1e             ;11061
0074c6  d303              BCC      |L1.29904|
                  |L1.29896|
0074c8  f04f0001          MOV      r0,#1                 ;11064
0074cc  7020              STRB     r0,[r4,#0]            ;11064
                  |L1.29902|
0074ce  e711              B        |L1.29428|
                  |L1.29904|
0074d0  2b01              CMP      r3,#1                 ;11066
0074d2  d1fc              BNE      |L1.29902|
0074d4  b118              CBZ      r0,|L1.29918|
0074d6  4295              CMP      r5,r2                 ;11069
0074d8  daf9              BGE      |L1.29902|
0074da  2e0a              CMP      r6,#0xa               ;11069
0074dc  d2f7              BCS      |L1.29902|
                  |L1.29918|
0074de  2802              CMP      r0,#2                 ;11071
0074e0  db04              BLT      |L1.29932|
0074e2  4297              CMP      r7,r2                 ;11071
0074e4  daf3              BGE      |L1.29902|
0074e6  9906              LDR      r1,[sp,#0x18]         ;11071
0074e8  290a              CMP      r1,#0xa               ;11071
0074ea  d2f0              BCS      |L1.29902|
                  |L1.29932|
0074ec  2803              CMP      r0,#3                 ;11073
0074ee  db05              BLT      |L1.29948|
0074f0  9905              LDR      r1,[sp,#0x14]         ;11073
0074f2  4291              CMP      r1,r2                 ;11073
0074f4  daeb              BGE      |L1.29902|
0074f6  9904              LDR      r1,[sp,#0x10]         ;11073
0074f8  290a              CMP      r1,#0xa               ;11073
0074fa  d2e8              BCS      |L1.29902|
                  |L1.29948|
0074fc  2804              CMP      r0,#4                 ;11075
0074fe  db05              BLT      |L1.29964|
007500  9903              LDR      r1,[sp,#0xc]          ;11075
007502  4291              CMP      r1,r2                 ;11075
007504  dae3              BGE      |L1.29902|
007506  9902              LDR      r1,[sp,#8]            ;11075
007508  290a              CMP      r1,#0xa               ;11075
00750a  d2e0              BCS      |L1.29902|
                  |L1.29964|
00750c  2805              CMP      r0,#5                 ;11077
00750e  db04              BLT      |L1.29978|
007510  4594              CMP      r12,r2                ;11077
007512  dadc              BGE      |L1.29902|
007514  9901              LDR      r1,[sp,#4]            ;11077
007516  290a              CMP      r1,#0xa               ;11077
007518  d2d9              BCS      |L1.29902|
                  |L1.29978|
00751a  2806              CMP      r0,#6                 ;11079
00751c  db04              BLT      |L1.29992|
00751e  4590              CMP      r8,r2                 ;11079
007520  dad5              BGE      |L1.29902|
007522  9900              LDR      r1,[sp,#0]            ;11079
007524  290a              CMP      r1,#0xa               ;11079
007526  d2d2              BCS      |L1.29902|
                  |L1.29992|
007528  2807              CMP      r0,#7                 ;11081
00752a  db04              BLT      |L1.30006|
00752c  4591              CMP      r9,r2                 ;11081
00752e  dace              BGE      |L1.29902|
007530  f1be0f0a          CMP      lr,#0xa               ;11081
007534  d2cb              BCS      |L1.29902|
                  |L1.30006|
007536  2808              CMP      r0,#8                 ;11083
007538  db04              BLT      |L1.30020|
00753a  4592              CMP      r10,r2                ;11083
00753c  dac7              BGE      |L1.29902|
00753e  f1bb0f0a          CMP      r11,#0xa              ;11083
007542  d2c4              BCS      |L1.29902|
                  |L1.30020|
007544  f04f0000          MOV      r0,#0                 ;11086
007548  7020              STRB     r0,[r4,#0]            ;11086
                  |L1.30026|
00754a  e6d3              B        |L1.29428|
                  |L1.30028|
00754c  4823              LDR      r0,|L1.30172|
00754e  4d24              LDR      r5,|L1.30176|
007550  4e24              LDR      r6,|L1.30180|
007552  f9b00000          LDRSH    r0,[r0,#0]            ;11092  ; NUMDT
007556  f9b55000          LDRSH    r5,[r5,#0]            ;11093
00755a  7836              LDRB     r6,[r6,#0]            ;11093
00755c  b110              CBZ      r0,|L1.30052|
00755e  428d              CMP      r5,r1                 ;11093
007560  dc1d              BGT      |L1.30110|
007562  b9e6              CBNZ     r6,|L1.30110|
                  |L1.30052|
007564  4f1e              LDR      r7,|L1.30176|
007566  f8dfc07c          LDR      r12,|L1.30180|
00756a  2801              CMP      r0,#1                 ;11095
00756c  f9b77002          LDRSH    r7,[r7,#2]            ;11095
007570  f89cc001          LDRB     r12,[r12,#1]          ;11095
007574  dd04              BLE      |L1.30080|
007576  428f              CMP      r7,r1                 ;11095
007578  dc11              BGT      |L1.30110|
00757a  f1bc0f00          CMP      r12,#0                ;11095
00757e  d10e              BNE      |L1.30110|
                  |L1.30080|
007580  f8df805c          LDR      r8,|L1.30176|
007584  f8df905c          LDR      r9,|L1.30180|
007588  2802              CMP      r0,#2                 ;11097
00758a  f9b88004          LDRSH    r8,[r8,#4]            ;11097
00758e  f8999002          LDRB     r9,[r9,#2]            ;11097
007592  dd08              BLE      |L1.30118|
007594  4588              CMP      r8,r1                 ;11097
007596  dc02              BGT      |L1.30110|
007598  f1b90f00          CMP      r9,#0                 ;11097
00759c  d003              BEQ      |L1.30118|
                  |L1.30110|
00759e  f04f0001          MOV      r0,#1                 ;11100
0075a2  7020              STRB     r0,[r4,#0]            ;11100
0075a4  e6a6              B        |L1.29428|
                  |L1.30118|
0075a6  2b01              CMP      r3,#1                 ;11102
0075a8  d191              BNE      |L1.29902|
0075aa  b118              CBZ      r0,|L1.30132|
0075ac  4295              CMP      r5,r2                 ;11105
0075ae  da8e              BGE      |L1.29902|
0075b0  2e00              CMP      r6,#0                 ;11105
0075b2  d18c              BNE      |L1.29902|
                  |L1.30132|
0075b4  2802              CMP      r0,#2                 ;11107
0075b6  db04              BLT      |L1.30146|
0075b8  4297              CMP      r7,r2                 ;11107
0075ba  da88              BGE      |L1.29902|
0075bc  f1bc0f00          CMP      r12,#0                ;11107
0075c0  d185              BNE      |L1.29902|
                  |L1.30146|
0075c2  2803              CMP      r0,#3                 ;11109
0075c4  db04              BLT      |L1.30160|
0075c6  4590              CMP      r8,r2                 ;11109
0075c8  dabf              BGE      |L1.30026|
0075ca  f1b90f00          CMP      r9,#0                 ;11109
0075ce  d1bc              BNE      |L1.30026|
                  |L1.30160|
0075d0  f04f0000          MOV      r0,#0                 ;11112
0075d4  7020              STRB     r0,[r4,#0]            ;11112
0075d6  e68d              B        |L1.29428|
;;;11118  
                          ENDP

                  |L1.30168|
                          DCD      bps
                  |L1.30172|
                          DCD      NUMDT
                  |L1.30176|
                          DCD      t_ext
                  |L1.30180|
                          DCD      ND_EXT

                          AREA ||area_number.2||, CODE, READONLY, ALIGN=2

                          EXPORTAS ||area_number.2||, ||.text||
                  samokalibr_init PROC
;;;306    // заполнение флагов для АКБ
;;;307    void bat_flag (void)
000000  4902              LDR      r1,|L2.12|
;;;308    {  
000002  f24060f9          MOV      r0,#0x6f9
;;;309    if(spc_stat!=spcVZ) 
;;;310    	{
;;;311    	vz_error=0;
000006  f8a10050          STRH     r0,[r1,#0x50]
00000a  4770              BX       lr                    ;309
;;;312    	sp_ch_error=0;
;;;313    	vz1_error=0;
;;;314    	vz2_error=0;
;;;315    	}
;;;316    
;;;317    if(!snmp_bat_status[0])	 			//Батарея №1
;;;318    	{
;;;319    	if((bat[0]._Ub<(USIGN*10)))		//Снижение напряжения батареи ниже Uбсигн 
;;;320    		{
;;;321    		snmp_bat_flag[0]|=0x0001; 
;;;322    		if((snmp_bat_flag_puts[0]&0x0001)==0) 
;;;323    			{
;;;324    			snmp_trap_send("BAT #1 Alarm, battery is low",5,8,0); 
;;;325    			snmp_bat_flag_puts[0]|=0x0001;
;;;326    			}
;;;327    		}
;;;328    	else 
;;;329    		{
;;;330    		snmp_bat_flag[0]&=~0x0001; 
;;;331    		if(snmp_bat_flag_puts[0]&0x0001) 
;;;332    			{
;;;333    			snmp_trap_send("BAT #1 Alarm clear, battery is not low",5,8,1);
;;;334    			snmp_bat_flag_puts[0]&=~0x0001;
;;;335    			}
;;;336    		}
;;;337    
;;;338    	if(bat[0]._temper_stat&0x01)	//Повышенная температура батареи, первый порог - предупреждение
;;;339    		{
;;;340    		snmp_bat_flag[0]|=0x0002;
;;;341    		if((snmp_bat_flag_puts[0]&0x0002)==0) 
;;;342    			{
;;;343    			snmp_trap_send("BAT #1 Warning, high battery temperature",5,8,2); 
;;;344    			snmp_bat_flag_puts[0]|=0x0002;
;;;345    			}
;;;346    		}
;;;347    	else 
;;;348    		{
;;;349    		snmp_bat_flag[0]&=~0x0002;
;;;350    		if(snmp_bat_flag_puts[0]&0x0002) 
;;;351    			{
;;;352    			snmp_trap_send("BAT #1 Warning clear, battery temperature is normal",5,8,3);
;;;353    			snmp_bat_flag_puts[0]&=~0x02;
;;;354    			}
;;;355    		}
;;;356    
;;;357    	if(bat[0]._temper_stat&0x02)  	//Повышенная температура батареи, второй порог - авария
;;;358    		{
;;;359    		snmp_bat_flag[0]|=0x0004;
;;;360    		if((snmp_bat_flag_puts[0]&0x0004)==0) 
;;;361    			{
;;;362    			snmp_trap_send("BAT #1 Alarm, high battery temperature",5,8,4); 
;;;363    			snmp_bat_flag_puts[0]|=0x0004;
;;;364    			}
;;;365    		}
;;;366    	else 
;;;367    		{
;;;368    		snmp_bat_flag[0]&=~0x0004;
;;;369    		if(snmp_bat_flag_puts[0]&0x0004) 
;;;370    			{
;;;371    			snmp_trap_send("BAT #1 Alarm clear, battery temperature is normal",5,8,5);
;;;372    			snmp_bat_flag_puts[0]&=~0x0004;
;;;373    			}
;;;374    		}
;;;375    
;;;376    	if(bat[0]._Ib<(-IKB)) snmp_bat_flag[0]|=0x0008;		//Разряд батареи
;;;377    	else if(bat[0]._Ib>IKB) snmp_bat_flag[0]&=~0x0008;	//Заряд батареи
;;;378    
;;;379    	if((spc_stat==spcKE)&&(spc_bat==0))					//Контроль емкости батареи №1 
;;;380    		{
;;;381    		snmp_bat_flag[0]|=0x0010;
;;;382    		if((snmp_bat_flag_puts[0]&0x0010)==0) 
;;;383    			{
;;;384    			snmp_trap_send("BAT #1, capacity test started",5,8,6); 
;;;385    			snmp_bat_flag_puts[0]|=0x0010;
;;;386    			}
;;;387    		}
;;;388    	else 
;;;389    		{
;;;390    		snmp_bat_flag[0]&=~0x0010;
;;;391    		if(snmp_bat_flag_puts[0]&0x0010) 
;;;392    			{
;;;393    			snmp_trap_send("BAT #1, capacity test stopped",5,8,7);
;;;394    			snmp_bat_flag_puts[0]&=~0x0010;
;;;395    			}
;;;396    		}
;;;397    		
;;;398    	if(spc_stat==spcVZ)									//Выравнивающий заряд 
;;;399    		{
;;;400    		snmp_bat_flag[0]|=0x0020;
;;;401    		if((snmp_bat_flag_puts[0]&0x0020)==0) 
;;;402    			{
;;;403    			snmp_trap_send("BAT #1,leveling charge is started",5,8,8); 
;;;404    			snmp_bat_flag_puts[0]|=0x0020;
;;;405    			}
;;;406    		}
;;;407    	else 
;;;408    		{
;;;409    		snmp_bat_flag[0]&=~0x0020;
;;;410    		if(snmp_bat_flag_puts[0]&0x0020) 
;;;411    			{
;;;412    			snmp_trap_send("BAT #1,leveling charge is stopped",5,8,9);
;;;413    			snmp_bat_flag_puts[0]&=~0x0020;
;;;414    			}
;;;415    		}
;;;416    
;;;417    	if(vz_error)										 //Выравнивающий заряд заблокирован по вентиляции
;;;418    		{
;;;419    		snmp_bat_flag[0]|=0x0040;
;;;420    		if((snmp_bat_flag_puts[0]&0x0040)==0) 
;;;421    			{
;;;422    			snmp_trap_send("BAT #1,leveling charge is blocked",5,8,10); 
;;;423    			snmp_bat_flag_puts[0]|=0x0040;
;;;424    			}
;;;425    		}
;;;426    	else 
;;;427    		{
;;;428    		snmp_bat_flag[0]&=~0x0040;
;;;429    		if(snmp_bat_flag_puts[0]&0x0040) 
;;;430    			{
;;;431    			snmp_trap_send("BAT #1,leveling charge is unblocked",5,8,11);
;;;432    			snmp_bat_flag_puts[0]&=~0x0040;
;;;433    			} 
;;;434    		}
;;;435    
;;;436    	if(sp_ch_stat==scsWRK) 								//Ускореннный заряд
;;;437    		{
;;;438    		snmp_bat_flag[0]|=0x0080;
;;;439    		if((snmp_bat_flag_puts[0]&0x0080)==0) 
;;;440    			{
;;;441    			snmp_trap_send("BAT #1,speed charge is started",5,8,10); 
;;;442    			snmp_bat_flag_puts[0]|=0x0080;
;;;443    			}
;;;444    		}
;;;445    	else 
;;;446    		{
;;;447    		snmp_bat_flag[0]&=~0x0080;
;;;448    		if(snmp_bat_flag_puts[0]&0x0080) 
;;;449    			{
;;;450    			snmp_trap_send("BAT #1,speed charge is stopped",5,8,11);
;;;451    			snmp_bat_flag_puts[0]&=~0x0080;
;;;452    			}
;;;453    		}
;;;454    
;;;455    	if(sp_ch_error) 									//Ускореннный заряд заблокирован по вентиляции
;;;456    		{
;;;457    		snmp_bat_flag[0]|=0x0100;
;;;458    		if((snmp_bat_flag_puts[0]&0x0100)==0) 
;;;459    			{
;;;460    			snmp_trap_send("BAT #1,speed charge is blocked",5,8,12); 
;;;461    			snmp_bat_flag_puts[0]|=0x0100;
;;;462    			}
;;;463    		}
;;;464    	else 
;;;465    		{
;;;466    		snmp_bat_flag[0]&=~0x0100;
;;;467    		if(snmp_bat_flag_puts[0]&0x0100) 
;;;468    			{
;;;469    			snmp_trap_send("BAT #1,speed charge is unblocked",5,8,13);
;;;470    			snmp_bat_flag_puts[0]&=~0x0100;
;;;471    			} 
;;;472    		}
;;;473    
;;;474    	if(vz1_stat!=vz1sOFF)								//Уравнительный заряд 
;;;475    		{
;;;476    		snmp_bat_flag[0]|=0x0200;
;;;477    		if((snmp_bat_flag_puts[0]&0x0200)==0) 
;;;478    			{
;;;479    			snmp_trap_send("BAT #1,equalising charge is on",5,8,14); 
;;;480    			snmp_bat_flag_puts[0]|=0x0200;
;;;481    			}
;;;482    		}
;;;483    	else 
;;;484    		{
;;;485    		snmp_bat_flag[0]&=~0x0200;
;;;486    		if(snmp_bat_flag_puts[0]&0x0200) 
;;;487    			{
;;;488    			snmp_trap_send("BAT #1,equalising charge is off",5,8,15);
;;;489    			snmp_bat_flag_puts[0]&=~0x0200;
;;;490    			}
;;;491    		}
;;;492    
;;;493    	if(vz1_error)										//Уравнительный заряд заблокирован по вентиляции 
;;;494    		{
;;;495    		snmp_bat_flag[0]|=0x0400;
;;;496    		if((snmp_bat_flag_puts[0]&0x0400)==0) 
;;;497    			{
;;;498    			snmp_trap_send("BAT #1,equalising charge is blocked",5,8,16); 
;;;499    			snmp_bat_flag_puts[0]|=0x0400;
;;;500    			}
;;;501    		}
;;;502    	else 
;;;503    		{
;;;504    		snmp_bat_flag[0]&=~0x0400;
;;;505    		if(snmp_bat_flag_puts[0]&0x0400) 
;;;506    			{
;;;507    			snmp_trap_send("BAT #1,equalising charge is unblocked",5,8,17);
;;;508    			snmp_bat_flag_puts[0]&=~0x0400;
;;;509    			} 
;;;510    		}
;;;511    
;;;512    	if(vz2_stat!=vz2sOFF)								//Формовочный заряд 
;;;513    		{
;;;514    		snmp_bat_flag[0]|=0x0800;
;;;515    		if((snmp_bat_flag_puts[0]&0x0800)==0) 
;;;516    			{
;;;517    			snmp_trap_send("BAT #1,molding charge is on",5,8,18); 
;;;518    			snmp_bat_flag_puts[0]|=0x0800;
;;;519    			}
;;;520    		}
;;;521    	else 
;;;522    		{
;;;523    		snmp_bat_flag[0]&=~0x0800;
;;;524    		if(snmp_bat_flag_puts[0]&0x0800) 
;;;525    			{
;;;526    			snmp_trap_send("BAT #1,molding charge is off",5,8,19);
;;;527    			snmp_bat_flag_puts[0]&=~0x0800;
;;;528    			}
;;;529    		}
;;;530    
;;;531    	if(vz2_error) 										//Формовочный заряд заблокирован по вентиляции
;;;532    		{
;;;533    		snmp_bat_flag[0]|=0x1000;
;;;534    		if((snmp_bat_flag_puts[0]&0x1000)==0) 
;;;535    			{
;;;536    			snmp_trap_send("BAT #1,molding charge is blocked",5,8,20); 
;;;537    			snmp_bat_flag_puts[0]|=0x1000;
;;;538    			}
;;;539    		}
;;;540    	else 
;;;541    		{
;;;542    		snmp_bat_flag[0]&=~0x1000;
;;;543    		if(snmp_bat_flag_puts[0]&0x1000) 
;;;544    			{
;;;545    			snmp_trap_send("BAT #1,molding charge is unblocked",5,8,21);
;;;546    			snmp_bat_flag_puts[0]&=~0x1000;
;;;547    			} 
;;;548    		}
;;;549    	}
;;;550    else 
;;;551    	{
;;;552    	snmp_bat_flag[0]=0; 
;;;553    	snmp_bat_flag_puts[0]=0;
;;;554    	}
;;;555    
;;;556    if(!snmp_bat_status[1])	 			//Батарея №2
;;;557    	{
;;;558    	if((bat[1]._Ub<(USIGN*10)))		//Снижение напряжения батареи ниже Uбсигн 
;;;559    		{
;;;560    		snmp_bat_flag[1]|=0x0001; 
;;;561    		if((snmp_bat_flag_puts[1]&0x0001)==0) 
;;;562    			{
;;;563    			snmp_trap_send("BAT #2 Alarm, battery is low",5,8,22); 
;;;564    			snmp_bat_flag_puts[1]|=0x0001;
;;;565    			}
;;;566    		}
;;;567    	else 
;;;568    		{
;;;569    		snmp_bat_flag[1]&=~0x0001; 
;;;570    		if(snmp_bat_flag_puts[1]&0x0001) 
;;;571    			{
;;;572    			snmp_trap_send("BAT #2 Alarm clear, battery is not low",5,8,23);
;;;573    			snmp_bat_flag_puts[1]&=~0x0001;
;;;574    			}
;;;575    		}
;;;576    
;;;577    	if(bat[1]._temper_stat&0x01)	//Повышенная температура батареи, первый порог - предупреждение
;;;578    		{
;;;579    		snmp_bat_flag[1]|=0x0002;
;;;580    		if((snmp_bat_flag_puts[0]&0x0002)==0) 
;;;581    			{
;;;582    			snmp_trap_send("BAT #2 Warning, high battery temperature",5,8,24); 
;;;583    			snmp_bat_flag_puts[1]|=0x0002;
;;;584    			}
;;;585    		}
;;;586    	else 
;;;587    		{
;;;588    		snmp_bat_flag[1]&=~0x0002;
;;;589    		if(snmp_bat_flag_puts[1]&0x0002) 
;;;590    			{
;;;591    			snmp_trap_send("BAT #2 Warning clear, battery temperature is normal",5,8,25);
;;;592    			snmp_bat_flag_puts[1]&=~0x02;
;;;593    			}
;;;594    		}
;;;595    
;;;596    	if(bat[1]._temper_stat&0x02)  	//Повышенная температура батареи, второй порог - авария
;;;597    		{
;;;598    		snmp_bat_flag[1]|=0x0004;
;;;599    		if((snmp_bat_flag_puts[1]&0x0004)==0) 
;;;600    			{
;;;601    			snmp_trap_send("BAT #2 Alarm, high battery temperature",5,8,26); 
;;;602    			snmp_bat_flag_puts[1]|=0x0004;
;;;603    			}
;;;604    		}
;;;605    	else 
;;;606    		{
;;;607    		snmp_bat_flag[1]&=~0x0004;
;;;608    		if(snmp_bat_flag_puts[1]&0x0004) 
;;;609    			{
;;;610    			snmp_trap_send("BAT #2 Alarm clear, battery temperature is normal",5,8,27);
;;;611    			snmp_bat_flag_puts[1]&=~0x0004;
;;;612    			}
;;;613    		}
;;;614    
;;;615    	if(bat[1]._Ib<(-IKB)) snmp_bat_flag[1]|=0x0008;		//Разряд батареи
;;;616    	else if(bat[1]._Ib>IKB) snmp_bat_flag[1]&=~0x0008;	//Заряд батареи
;;;617    
;;;618    	if((spc_stat==spcKE)&&(spc_bat==0))					//Контроль емкости батареи №1 
;;;619    		{
;;;620    		snmp_bat_flag[1]|=0x0010;
;;;621    		if((snmp_bat_flag_puts[1]&0x0010)==0) 
;;;622    			{
;;;623    			snmp_trap_send("BAT #2, capacity test started",5,8,28); 
;;;624    			snmp_bat_flag_puts[1]|=0x0010;
;;;625    			}
;;;626    		}
;;;627    	else 
;;;628    		{
;;;629    		snmp_bat_flag[1]&=~0x0010;
;;;630    		if(snmp_bat_flag_puts[1]&0x0010) 
;;;631    			{
;;;632    			snmp_trap_send("BAT #2, capacity test stopped",5,8,29);
;;;633    			snmp_bat_flag_puts[1]&=~0x0010;
;;;634    			}
;;;635    		}
;;;636    		
;;;637    	if(spc_stat==spcVZ)									//Выравнивающий заряд 
;;;638    		{
;;;639    		snmp_bat_flag[1]|=0x0020;
;;;640    		if((snmp_bat_flag_puts[1]&0x0020)==0) 
;;;641    			{
;;;642    			snmp_trap_send("BAT #2,leveling charge is started",5,8,30); 
;;;643    			snmp_bat_flag_puts[1]|=0x0020;
;;;644    			}
;;;645    		}
;;;646    	else 
;;;647    		{
;;;648    		snmp_bat_flag[1]&=~0x0020;
;;;649    		if(snmp_bat_flag_puts[1]&0x0020) 
;;;650    			{
;;;651    			snmp_trap_send("BAT #2,leveling charge is stopped",5,8,31);
;;;652    			snmp_bat_flag_puts[1]&=~0x0020;
;;;653    			}
;;;654    		}
;;;655    
;;;656    	if(vz_error)										 //Выравнивающий заряд заблокирован по вентиляции
;;;657    		{
;;;658    		snmp_bat_flag[1]|=0x0040;
;;;659    		if((snmp_bat_flag_puts[1]&0x0040)==0) 
;;;660    			{
;;;661    			snmp_trap_send("BAT #2,leveling charge is blocked",5,8,32); 
;;;662    			snmp_bat_flag_puts[1]|=0x0040;
;;;663    			}
;;;664    		}
;;;665    	else 
;;;666    		{
;;;667    		snmp_bat_flag[1]&=~0x0040;
;;;668    		if(snmp_bat_flag_puts[1]&0x0040) 
;;;669    			{
;;;670    			snmp_trap_send("BAT #2,leveling charge is unblocked",5,8,33);
;;;671    			snmp_bat_flag_puts[1]&=~0x0040;
;;;672    			} 
;;;673    		}
;;;674    
;;;675    	if(sp_ch_stat==scsWRK) 								//Ускореннный заряд
;;;676    		{
;;;677    		snmp_bat_flag[1]|=0x0080;
;;;678    		if((snmp_bat_flag_puts[1]&0x0080)==0) 
;;;679    			{
;;;680    			snmp_trap_send("BAT #2,speed charge is started",5,8,34); 
;;;681    			snmp_bat_flag_puts[1]|=0x0080;
;;;682    			}
;;;683    		}
;;;684    	else 
;;;685    		{
;;;686    		snmp_bat_flag[1]&=~0x0080;
;;;687    		if(snmp_bat_flag_puts[1]&0x0080) 
;;;688    			{
;;;689    			snmp_trap_send("BAT #2,speed charge is stopped",5,8,35);
;;;690    			snmp_bat_flag_puts[1]&=~0x0080;
;;;691    			}
;;;692    		}
;;;693    
;;;694    	if(sp_ch_error) 									//Ускореннный заряд заблокирован по вентиляции
;;;695    		{
;;;696    		snmp_bat_flag[1]|=0x0100;
;;;697    		if((snmp_bat_flag_puts[1]&0x0100)==0) 
;;;698    			{
;;;699    			snmp_trap_send("BAT #2,speed charge is blocked",5,8,36); 
;;;700    			snmp_bat_flag_puts[1]|=0x0100;
;;;701    			}
;;;702    		}
;;;703    	else 
;;;704    		{
;;;705    		snmp_bat_flag[1]&=~0x0100;
;;;706    		if(snmp_bat_flag_puts[1]&0x0100) 
;;;707    			{
;;;708    			snmp_trap_send("BAT #2,speed charge is unblocked",5,8,37);
;;;709    			snmp_bat_flag_puts[1]&=~0x0100;
;;;710    			} 
;;;711    		}
;;;712    
;;;713    	if(vz1_stat!=vz1sOFF)								//Уравнительный заряд 
;;;714    		{
;;;715    		snmp_bat_flag[1]|=0x0200;
;;;716    		if((snmp_bat_flag_puts[1]&0x0200)==0) 
;;;717    			{
;;;718    			snmp_trap_send("BAT #2,equalising charge is on",5,8,38); 
;;;719    			snmp_bat_flag_puts[1]|=0x0200;
;;;720    			}
;;;721    		}
;;;722    	else 
;;;723    		{
;;;724    		snmp_bat_flag[1]&=~0x0200;
;;;725    		if(snmp_bat_flag_puts[1]&0x0200) 
;;;726    			{
;;;727    			snmp_trap_send("BAT #2,equalising charge is off",5,8,39);
;;;728    			snmp_bat_flag_puts[1]&=~0x0200;
;;;729    			}
;;;730    		}
;;;731    
;;;732    	if(vz1_error)										//Уравнительный заряд заблокирован по вентиляции 
;;;733    		{
;;;734    		snmp_bat_flag[1]|=0x0400;
;;;735    		if((snmp_bat_flag_puts[1]&0x0400)==0) 
;;;736    			{
;;;737    			snmp_trap_send("BAT #2,equalising charge is blocked",5,8,40); 
;;;738    			snmp_bat_flag_puts[1]|=0x0400;
;;;739    			}
;;;740    		}
;;;741    	else 
;;;742    		{
;;;743    		snmp_bat_flag[1]&=~0x0400;
;;;744    		if(snmp_bat_flag_puts[1]&0x0400) 
;;;745    			{
;;;746    			snmp_trap_send("BAT #2,equalising charge is unblocked",5,8,41);
;;;747    			snmp_bat_flag_puts[1]&=~0x0400;
;;;748    			} 
;;;749    		}
;;;750    
;;;751    	if(vz2_stat!=vz2sOFF)								//Формовочный заряд 
;;;752    		{
;;;753    		snmp_bat_flag[1]|=0x0800;
;;;754    		if((snmp_bat_flag_puts[1]&0x0800)==0) 
;;;755    			{
;;;756    			snmp_trap_send("BAT #2,molding charge is on",5,8,42); 
;;;757    			snmp_bat_flag_puts[1]|=0x0800;
;;;758    			}
;;;759    		}
;;;760    	else 
;;;761    		{
;;;762    		snmp_bat_flag[1]&=~0x0800;
;;;763    		if(snmp_bat_flag_puts[1]&0x0800) 
;;;764    			{
;;;765    			snmp_trap_send("BAT #2,molding charge is off",5,8,43);
;;;766    			snmp_bat_flag_puts[1]&=~0x0800;
;;;767    			}
;;;768    		}
;;;769    
;;;770    	if(vz2_error) 										//Формовочный заряд заблокирован по вентиляции
;;;771    		{
;;;772    		snmp_bat_flag[1]|=0x1000;
;;;773    		if((snmp_bat_flag_puts[1]&0x1000)==0) 
;;;774    			{
;;;775    			snmp_trap_send("BAT #2,molding charge is blocked",5,8,44); 
;;;776    			snmp_bat_flag_puts[1]|=0x1000;
;;;777    			}
;;;778    		}
;;;779    	else 
;;;780    		{
;;;781    		snmp_bat_flag[1]&=~0x1000;
;;;782    		if(snmp_bat_flag_puts[1]&0x1000) 
;;;783    			{
;;;784    			snmp_trap_send("BAT #2,molding charge is unblocked",5,8,45);
;;;785    			snmp_bat_flag_puts[1]&=~0x1000;
;;;786    			} 
;;;787    		}
;;;788    	}
;;;789    else 
;;;790    	{
;;;791    	snmp_bat_flag[1]=0; 
;;;792    	snmp_bat_flag_puts[1]=0;
;;;793    	}
;;;794    /*
;;;795    if(!snmp_bat_status[1])
;;;796    	{
;;;797    	if((bat[1]._Ub<(USIGN*10))) 
;;;798    		{
;;;799    		snmp_bat_flag[1]|=0x01; 
;;;800    		if((snmp_bat_flag_puts[1]&0x01)==0) 
;;;801    			{
;;;802    			snmp_trap_send("BAT #2 Alarm, battery is low",5,8,0); 
;;;803    			snmp_bat_flag_puts[1]|=0x01;
;;;804    			}
;;;805    		}
;;;806    	else 
;;;807    		{
;;;808    		snmp_bat_flag[1]&=~0x01; 
;;;809    		if(snmp_bat_flag_puts[1]&0x01) 
;;;810    			{
;;;811    			snmp_trap_send("BAT #2 Alarm clear, battery is not low",5,8,1);
;;;812    			snmp_bat_flag_puts[1]&=~0x01;
;;;813    			}
;;;814    		}
;;;815    	if(bat[1]._temper_stat&0x01) 
;;;816    		{
;;;817    		snmp_bat_flag[1]|=0x02;
;;;818    		if((snmp_bat_flag_puts[1]&0x02)==0) 
;;;819    			{
;;;820    			snmp_trap_send("BAT #2 Alarm, high battery temperature",5,8,2); 
;;;821    			snmp_bat_flag_puts[1]|=0x02;
;;;822    			}
;;;823    		}
;;;824    	else 
;;;825    		{
;;;826    		snmp_bat_flag[1]&=~0x02;
;;;827    		if(snmp_bat_flag_puts[1]&0x02) 
;;;828    			{
;;;829    			snmp_trap_send("BAT #2 Alarm clear, battery temperature is normal",5,8,3);
;;;830    			snmp_bat_flag_puts[1]&=~0x02;
;;;831    			}
;;;832    		}
;;;833    	if(bat[1]._temper_stat&0x02) 
;;;834    		{
;;;835    		snmp_bat_flag[1]|=0x04;
;;;836    		if((snmp_bat_flag_puts[1]&0x04)==0) 
;;;837    			{
;;;838    			snmp_trap_send("BAT #2 Alarm, maximum battery temperature",5,8,4); 
;;;839    			snmp_bat_flag_puts[1]|=0x04;
;;;840    			}
;;;841    		}
;;;842    	else 
;;;843    		{
;;;844    		snmp_bat_flag[1]&=~0x04;
;;;845    		if(snmp_bat_flag_puts[1]&0x04) 
;;;846    			{
;;;847    			snmp_trap_send("BAT #2 Alarm clear, battery temperature is normal",5,8,5);
;;;848    			snmp_bat_flag_puts[1]&=~0x04;
;;;849    			}
;;;850    		}
;;;851    		
;;;852    	if(bat[1]._Ib<(-IKB))	snmp_bat_flag[1]|=0x80;
;;;853    	else if(bat[1]._Ib>IKB)snmp_bat_flag[1]&=~0x80;
;;;854    
;;;855    	if((spc_stat==spcKE)&&(spc_bat==1)) 
;;;856    		{
;;;857    		snmp_bat_flag[1]|=0x10;
;;;858    		if((snmp_bat_flag_puts[1]&0x10)==0) 
;;;859    			{
;;;860    			snmp_trap_send("BAT #2, capacity check enabled",5,8,6); 
;;;861    			snmp_bat_flag_puts[1]|=0x10;
;;;862    			}
;;;863    		}
;;;864    	else 
;;;865    		{
;;;866    		snmp_bat_flag[1]&=~0x10;
;;;867    		if(snmp_bat_flag_puts[1]&0x10) 
;;;868    			{
;;;869    			snmp_trap_send("BAT #2, capacity check disabled",5,8,7);
;;;870    			snmp_bat_flag_puts[1]&=~0x10;
;;;871    			}
;;;872    		}
;;;873    		
;;;874    	if(spc_stat==spcVZ) 
;;;875    		{
;;;876    		snmp_bat_flag[1]|=0x20;
;;;877    		if((snmp_bat_flag_puts[1]&0x20)==0) 
;;;878    			{
;;;879    			snmp_trap_send("BAT #2,equalizing charge is on",5,8,8); 
;;;880    			snmp_bat_flag_puts[1]|=0x20;
;;;881    			}
;;;882    		}
;;;883    	else 
;;;884    		{
;;;885    		snmp_bat_flag[1]&=~0x20;
;;;886    		if(snmp_bat_flag_puts[1]&0x20) 
;;;887    			{
;;;888    			snmp_trap_send("BAT #2,equalizing charge is off",5,8,9);
;;;889    			snmp_bat_flag_puts[1]&=~0x20;
;;;890    			}
;;;891    		}
;;;892    
;;;893    	if(vz_error) 
;;;894    		{
;;;895    		snmp_bat_flag[1]|=0x40;
;;;896    		if((snmp_bat_flag_puts[1]&0x40)==0) 
;;;897    			{
;;;898    			snmp_trap_send("BAT #2,equalizing charge blocked",5,8,10); 
;;;899    			snmp_bat_flag_puts[1]|=0x40;
;;;900    			}
;;;901    		}
;;;902    	else 
;;;903    		{
;;;904    		snmp_bat_flag[1]&=~0x40;
;;;905    		if(snmp_bat_flag_puts[1]&0x40) 
;;;906    			{
;;;907    			snmp_trap_send("BAT #2,equalizing charge is not blocked",5,8,11);
;;;908    			snmp_bat_flag_puts[1]&=~0x40;
;;;909    			} 
;;;910    		}
;;;911       }
;;;912    else 
;;;913    	{
;;;914    	snmp_bat_flag[1]=0; 
;;;915    	snmp_bat_flag_puts[1]=0;
;;;916    	} */
;;;917    }
;;;918    
                          ENDP

                  |L2.12|
                          DCD      ||area_number.25||

                          AREA ||area_number.3||, CODE, READONLY, ALIGN=2

                          EXPORTAS ||area_number.3||, ||.text||
                  adc_drv6 PROC
;;;306    // заполнение флагов для АКБ
;;;307    void bat_flag (void)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;308    {  
;;;309    if(spc_stat!=spcVZ) 
000004  4c82              LDR      r4,|L3.528|
;;;310    	{
;;;311    	vz_error=0;
000006  8860              LDRH     r0,[r4,#2]  ; adc_self_ch_buff
000008  8821              LDRH     r1,[r4,#0]            ;309  ; adc_self_ch_buff
00000a  1a40              SUBS     r0,r0,r1              ;309
00000c  b200              SXTH     r0,r0                 ;309
00000e  f7fffffe          BL       abs_pal
;;;312    	sp_ch_error=0;
000012  1da5              ADDS     r5,r4,#6
;;;313    	vz1_error=0;
000014  8028              STRH     r0,[r5,#0]
;;;314    	vz2_error=0;
000016  88a0              LDRH     r0,[r4,#4]  ; adc_self_ch_buff
;;;315    	}
;;;316    
;;;317    if(!snmp_bat_status[0])	 			//Батарея №1
000018  8861              LDRH     r1,[r4,#2]  ; adc_self_ch_buff
00001a  1a40              SUBS     r0,r0,r1
;;;318    	{
;;;319    	if((bat[0]._Ub<(USIGN*10)))		//Снижение напряжения батареи ниже Uбсигн 
00001c  b200              SXTH     r0,r0
00001e  f7fffffe          BL       abs_pal
000022  8068              STRH     r0,[r5,#2]
000024  88a0              LDRH     r0,[r4,#4]            ;317  ; adc_self_ch_buff
000026  8821              LDRH     r1,[r4,#0]            ;317  ; adc_self_ch_buff
;;;320    		{
;;;321    		snmp_bat_flag[0]|=0x0001; 
;;;322    		if((snmp_bat_flag_puts[0]&0x0001)==0) 
;;;323    			{
;;;324    			snmp_trap_send("BAT #1 Alarm, battery is low",5,8,0); 
;;;325    			snmp_bat_flag_puts[0]|=0x0001;
;;;326    			}
;;;327    		}
;;;328    	else 
;;;329    		{
;;;330    		snmp_bat_flag[0]&=~0x0001; 
;;;331    		if(snmp_bat_flag_puts[0]&0x0001) 
;;;332    			{
;;;333    			snmp_trap_send("BAT #1 Alarm clear, battery is not low",5,8,1);
;;;334    			snmp_bat_flag_puts[0]&=~0x0001;
;;;335    			}
;;;336    		}
;;;337    
;;;338    	if(bat[0]._temper_stat&0x01)	//Повышенная температура батареи, первый порог - предупреждение
;;;339    		{
;;;340    		snmp_bat_flag[0]|=0x0002;
;;;341    		if((snmp_bat_flag_puts[0]&0x0002)==0) 
;;;342    			{
;;;343    			snmp_trap_send("BAT #1 Warning, high battery temperature",5,8,2); 
;;;344    			snmp_bat_flag_puts[0]|=0x0002;
;;;345    			}
;;;346    		}
;;;347    	else 
;;;348    		{
;;;349    		snmp_bat_flag[0]&=~0x0002;
;;;350    		if(snmp_bat_flag_puts[0]&0x0002) 
;;;351    			{
;;;352    			snmp_trap_send("BAT #1 Warning clear, battery temperature is normal",5,8,3);
;;;353    			snmp_bat_flag_puts[0]&=~0x02;
;;;354    			}
;;;355    		}
;;;356    
;;;357    	if(bat[0]._temper_stat&0x02)  	//Повышенная температура батареи, второй порог - авария
;;;358    		{
;;;359    		snmp_bat_flag[0]|=0x0004;
;;;360    		if((snmp_bat_flag_puts[0]&0x0004)==0) 
;;;361    			{
;;;362    			snmp_trap_send("BAT #1 Alarm, high battery temperature",5,8,4); 
;;;363    			snmp_bat_flag_puts[0]|=0x0004;
;;;364    			}
;;;365    		}
;;;366    	else 
;;;367    		{
;;;368    		snmp_bat_flag[0]&=~0x0004;
;;;369    		if(snmp_bat_flag_puts[0]&0x0004) 
;;;370    			{
;;;371    			snmp_trap_send("BAT #1 Alarm clear, battery temperature is normal",5,8,5);
;;;372    			snmp_bat_flag_puts[0]&=~0x0004;
;;;373    			}
;;;374    		}
;;;375    
;;;376    	if(bat[0]._Ib<(-IKB)) snmp_bat_flag[0]|=0x0008;		//Разряд батареи
000028  1a40              SUBS     r0,r0,r1
00002a  b200              SXTH     r0,r0
00002c  f7fffffe          BL       abs_pal
000030  80a8              STRH     r0,[r5,#4]            ;317
;;;377    	else if(bat[0]._Ib>IKB) snmp_bat_flag[0]&=~0x0008;	//Заряд батареи
;;;378    
;;;379    	if((spc_stat==spcKE)&&(spc_bat==0))					//Контроль емкости батареи №1 
;;;380    		{
;;;381    		snmp_bat_flag[0]|=0x0010;
;;;382    		if((snmp_bat_flag_puts[0]&0x0010)==0) 
;;;383    			{
;;;384    			snmp_trap_send("BAT #1, capacity test started",5,8,6); 
;;;385    			snmp_bat_flag_puts[0]|=0x0010;
;;;386    			}
;;;387    		}
;;;388    	else 
;;;389    		{
;;;390    		snmp_bat_flag[0]&=~0x0010;
;;;391    		if(snmp_bat_flag_puts[0]&0x0010) 
;;;392    			{
;;;393    			snmp_trap_send("BAT #1, capacity test stopped",5,8,7);
;;;394    			snmp_bat_flag_puts[0]&=~0x0010;
;;;395    			}
;;;396    		}
;;;397    		
;;;398    	if(spc_stat==spcVZ)									//Выравнивающий заряд 
;;;399    		{
;;;400    		snmp_bat_flag[0]|=0x0020;
;;;401    		if((snmp_bat_flag_puts[0]&0x0020)==0) 
;;;402    			{
;;;403    			snmp_trap_send("BAT #1,leveling charge is started",5,8,8); 
;;;404    			snmp_bat_flag_puts[0]|=0x0020;
;;;405    			}
;;;406    		}
;;;407    	else 
;;;408    		{
;;;409    		snmp_bat_flag[0]&=~0x0020;
;;;410    		if(snmp_bat_flag_puts[0]&0x0020) 
;;;411    			{
;;;412    			snmp_trap_send("BAT #1,leveling charge is stopped",5,8,9);
;;;413    			snmp_bat_flag_puts[0]&=~0x0020;
;;;414    			}
;;;415    		}
;;;416    
;;;417    	if(vz_error)										 //Выравнивающий заряд заблокирован по вентиляции
;;;418    		{
;;;419    		snmp_bat_flag[0]|=0x0040;
;;;420    		if((snmp_bat_flag_puts[0]&0x0040)==0) 
;;;421    			{
;;;422    			snmp_trap_send("BAT #1,leveling charge is blocked",5,8,10); 
;;;423    			snmp_bat_flag_puts[0]|=0x0040;
;;;424    			}
;;;425    		}
;;;426    	else 
;;;427    		{
;;;428    		snmp_bat_flag[0]&=~0x0040;
;;;429    		if(snmp_bat_flag_puts[0]&0x0040) 
;;;430    			{
;;;431    			snmp_trap_send("BAT #1,leveling charge is unblocked",5,8,11);
;;;432    			snmp_bat_flag_puts[0]&=~0x0040;
;;;433    			} 
;;;434    		}
;;;435    
;;;436    	if(sp_ch_stat==scsWRK) 								//Ускореннный заряд
;;;437    		{
;;;438    		snmp_bat_flag[0]|=0x0080;
;;;439    		if((snmp_bat_flag_puts[0]&0x0080)==0) 
;;;440    			{
;;;441    			snmp_trap_send("BAT #1,speed charge is started",5,8,10); 
;;;442    			snmp_bat_flag_puts[0]|=0x0080;
;;;443    			}
;;;444    		}
;;;445    	else 
;;;446    		{
;;;447    		snmp_bat_flag[0]&=~0x0080;
;;;448    		if(snmp_bat_flag_puts[0]&0x0080) 
;;;449    			{
;;;450    			snmp_trap_send("BAT #1,speed charge is stopped",5,8,11);
;;;451    			snmp_bat_flag_puts[0]&=~0x0080;
;;;452    			}
;;;453    		}
;;;454    
;;;455    	if(sp_ch_error) 									//Ускореннный заряд заблокирован по вентиляции
;;;456    		{
;;;457    		snmp_bat_flag[0]|=0x0100;
;;;458    		if((snmp_bat_flag_puts[0]&0x0100)==0) 
;;;459    			{
;;;460    			snmp_trap_send("BAT #1,speed charge is blocked",5,8,12); 
;;;461    			snmp_bat_flag_puts[0]|=0x0100;
;;;462    			}
;;;463    		}
;;;464    	else 
;;;465    		{
;;;466    		snmp_bat_flag[0]&=~0x0100;
;;;467    		if(snmp_bat_flag_puts[0]&0x0100) 
;;;468    			{
;;;469    			snmp_trap_send("BAT #1,speed charge is unblocked",5,8,13);
;;;470    			snmp_bat_flag_puts[0]&=~0x0100;
;;;471    			} 
;;;472    		}
;;;473    
;;;474    	if(vz1_stat!=vz1sOFF)								//Уравнительный заряд 
;;;475    		{
;;;476    		snmp_bat_flag[0]|=0x0200;
;;;477    		if((snmp_bat_flag_puts[0]&0x0200)==0) 
;;;478    			{
;;;479    			snmp_trap_send("BAT #1,equalising charge is on",5,8,14); 
;;;480    			snmp_bat_flag_puts[0]|=0x0200;
;;;481    			}
;;;482    		}
;;;483    	else 
;;;484    		{
;;;485    		snmp_bat_flag[0]&=~0x0200;
;;;486    		if(snmp_bat_flag_puts[0]&0x0200) 
;;;487    			{
;;;488    			snmp_trap_send("BAT #1,equalising charge is off",5,8,15);
;;;489    			snmp_bat_flag_puts[0]&=~0x0200;
;;;490    			}
;;;491    		}
;;;492    
;;;493    	if(vz1_error)										//Уравнительный заряд заблокирован по вентиляции 
;;;494    		{
;;;495    		snmp_bat_flag[0]|=0x0400;
;;;496    		if((snmp_bat_flag_puts[0]&0x0400)==0) 
;;;497    			{
;;;498    			snmp_trap_send("BAT #1,equalising charge is blocked",5,8,16); 
;;;499    			snmp_bat_flag_puts[0]|=0x0400;
;;;500    			}
;;;501    		}
;;;502    	else 
;;;503    		{
;;;504    		snmp_bat_flag[0]&=~0x0400;
;;;505    		if(snmp_bat_flag_puts[0]&0x0400) 
;;;506    			{
;;;507    			snmp_trap_send("BAT #1,equalising charge is unblocked",5,8,17);
;;;508    			snmp_bat_flag_puts[0]&=~0x0400;
;;;509    			} 
;;;510    		}
;;;511    
;;;512    	if(vz2_stat!=vz2sOFF)								//Формовочный заряд 
;;;513    		{
;;;514    		snmp_bat_flag[0]|=0x0800;
;;;515    		if((snmp_bat_flag_puts[0]&0x0800)==0) 
;;;516    			{
;;;517    			snmp_trap_send("BAT #1,molding charge is on",5,8,18); 
;;;518    			snmp_bat_flag_puts[0]|=0x0800;
;;;519    			}
;;;520    		}
;;;521    	else 
;;;522    		{
;;;523    		snmp_bat_flag[0]&=~0x0800;
;;;524    		if(snmp_bat_flag_puts[0]&0x0800) 
;;;525    			{
;;;526    			snmp_trap_send("BAT #1,molding charge is off",5,8,19);
;;;527    			snmp_bat_flag_puts[0]&=~0x0800;
;;;528    			}
;;;529    		}
;;;530    
;;;531    	if(vz2_error) 										//Формовочный заряд заблокирован по вентиляции
;;;532    		{
;;;533    		snmp_bat_flag[0]|=0x1000;
;;;534    		if((snmp_bat_flag_puts[0]&0x1000)==0) 
;;;535    			{
;;;536    			snmp_trap_send("BAT #1,molding charge is blocked",5,8,20); 
;;;537    			snmp_bat_flag_puts[0]|=0x1000;
;;;538    			}
;;;539    		}
;;;540    	else 
;;;541    		{
;;;542    		snmp_bat_flag[0]&=~0x1000;
;;;543    		if(snmp_bat_flag_puts[0]&0x1000) 
;;;544    			{
;;;545    			snmp_trap_send("BAT #1,molding charge is unblocked",5,8,21);
;;;546    			snmp_bat_flag_puts[0]&=~0x1000;
;;;547    			} 
;;;548    		}
;;;549    	}
;;;550    else 
;;;551    	{
;;;552    	snmp_bat_flag[0]=0; 
000032  f44f7196          MOV      r1,#0x12c
;;;553    	snmp_bat_flag_puts[0]=0;
;;;554    	}
;;;555    
;;;556    if(!snmp_bat_status[1])	 			//Батарея №2
000036  f1a406ee          SUB      r6,r4,#0xee
00003a  4288              CMP      r0,r1
00003c  da02              BGE      |L3.68|
;;;557    	{
;;;558    	if((bat[1]._Ub<(USIGN*10)))		//Снижение напряжения батареи ниже Uбсигн 
;;;559    		{
;;;560    		snmp_bat_flag[1]|=0x0001; 
;;;561    		if((snmp_bat_flag_puts[1]&0x0001)==0) 
;;;562    			{
;;;563    			snmp_trap_send("BAT #2 Alarm, battery is low",5,8,22); 
;;;564    			snmp_bat_flag_puts[1]|=0x0001;
;;;565    			}
;;;566    		}
;;;567    	else 
;;;568    		{
;;;569    		snmp_bat_flag[1]&=~0x0001; 
;;;570    		if(snmp_bat_flag_puts[1]&0x0001) 
;;;571    			{
;;;572    			snmp_trap_send("BAT #2 Alarm clear, battery is not low",5,8,23);
;;;573    			snmp_bat_flag_puts[1]&=~0x0001;
;;;574    			}
;;;575    		}
;;;576    
;;;577    	if(bat[1]._temper_stat&0x01)	//Повышенная температура батареи, первый порог - предупреждение
;;;578    		{
;;;579    		snmp_bat_flag[1]|=0x0002;
;;;580    		if((snmp_bat_flag_puts[0]&0x0002)==0) 
;;;581    			{
;;;582    			snmp_trap_send("BAT #2 Warning, high battery temperature",5,8,24); 
;;;583    			snmp_bat_flag_puts[1]|=0x0002;
;;;584    			}
;;;585    		}
;;;586    	else 
;;;587    		{
;;;588    		snmp_bat_flag[1]&=~0x0002;
;;;589    		if(snmp_bat_flag_puts[1]&0x0002) 
;;;590    			{
;;;591    			snmp_trap_send("BAT #2 Warning clear, battery temperature is normal",5,8,25);
;;;592    			snmp_bat_flag_puts[1]&=~0x02;
;;;593    			}
;;;594    		}
;;;595    
;;;596    	if(bat[1]._temper_stat&0x02)  	//Повышенная температура батареи, второй порог - авария
;;;597    		{
;;;598    		snmp_bat_flag[1]|=0x0004;
;;;599    		if((snmp_bat_flag_puts[1]&0x0004)==0) 
;;;600    			{
;;;601    			snmp_trap_send("BAT #2 Alarm, high battery temperature",5,8,26); 
;;;602    			snmp_bat_flag_puts[1]|=0x0004;
;;;603    			}
;;;604    		}
;;;605    	else 
;;;606    		{
;;;607    		snmp_bat_flag[1]&=~0x0004;
;;;608    		if(snmp_bat_flag_puts[1]&0x0004) 
;;;609    			{
;;;610    			snmp_trap_send("BAT #2 Alarm clear, battery temperature is normal",5,8,27);
;;;611    			snmp_bat_flag_puts[1]&=~0x0004;
;;;612    			}
;;;613    		}
;;;614    
;;;615    	if(bat[1]._Ib<(-IKB)) snmp_bat_flag[1]|=0x0008;		//Разряд батареи
;;;616    	else if(bat[1]._Ib>IKB) snmp_bat_flag[1]&=~0x0008;	//Заряд батареи
;;;617    
;;;618    	if((spc_stat==spcKE)&&(spc_bat==0))					//Контроль емкости батареи №1 
;;;619    		{
;;;620    		snmp_bat_flag[1]|=0x0010;
;;;621    		if((snmp_bat_flag_puts[1]&0x0010)==0) 
;;;622    			{
;;;623    			snmp_trap_send("BAT #2, capacity test started",5,8,28); 
;;;624    			snmp_bat_flag_puts[1]|=0x0010;
;;;625    			}
;;;626    		}
;;;627    	else 
;;;628    		{
;;;629    		snmp_bat_flag[1]&=~0x0010;
;;;630    		if(snmp_bat_flag_puts[1]&0x0010) 
;;;631    			{
;;;632    			snmp_trap_send("BAT #2, capacity test stopped",5,8,29);
;;;633    			snmp_bat_flag_puts[1]&=~0x0010;
;;;634    			}
;;;635    		}
;;;636    		
;;;637    	if(spc_stat==spcVZ)									//Выравнивающий заряд 
;;;638    		{
;;;639    		snmp_bat_flag[1]|=0x0020;
;;;640    		if((snmp_bat_flag_puts[1]&0x0020)==0) 
;;;641    			{
;;;642    			snmp_trap_send("BAT #2,leveling charge is started",5,8,30); 
;;;643    			snmp_bat_flag_puts[1]|=0x0020;
;;;644    			}
;;;645    		}
;;;646    	else 
;;;647    		{
;;;648    		snmp_bat_flag[1]&=~0x0020;
;;;649    		if(snmp_bat_flag_puts[1]&0x0020) 
;;;650    			{
;;;651    			snmp_trap_send("BAT #2,leveling charge is stopped",5,8,31);
;;;652    			snmp_bat_flag_puts[1]&=~0x0020;
;;;653    			}
;;;654    		}
;;;655    
;;;656    	if(vz_error)										 //Выравнивающий заряд заблокирован по вентиляции
;;;657    		{
;;;658    		snmp_bat_flag[1]|=0x0040;
;;;659    		if((snmp_bat_flag_puts[1]&0x0040)==0) 
;;;660    			{
;;;661    			snmp_trap_send("BAT #2,leveling charge is blocked",5,8,32); 
;;;662    			snmp_bat_flag_puts[1]|=0x0040;
;;;663    			}
;;;664    		}
;;;665    	else 
;;;666    		{
;;;667    		snmp_bat_flag[1]&=~0x0040;
;;;668    		if(snmp_bat_flag_puts[1]&0x0040) 
;;;669    			{
;;;670    			snmp_trap_send("BAT #2,leveling charge is unblocked",5,8,33);
;;;671    			snmp_bat_flag_puts[1]&=~0x0040;
;;;672    			} 
;;;673    		}
;;;674    
;;;675    	if(sp_ch_stat==scsWRK) 								//Ускореннный заряд
;;;676    		{
;;;677    		snmp_bat_flag[1]|=0x0080;
;;;678    		if((snmp_bat_flag_puts[1]&0x0080)==0) 
;;;679    			{
;;;680    			snmp_trap_send("BAT #2,speed charge is started",5,8,34); 
;;;681    			snmp_bat_flag_puts[1]|=0x0080;
;;;682    			}
;;;683    		}
;;;684    	else 
;;;685    		{
;;;686    		snmp_bat_flag[1]&=~0x0080;
;;;687    		if(snmp_bat_flag_puts[1]&0x0080) 
;;;688    			{
;;;689    			snmp_trap_send("BAT #2,speed charge is stopped",5,8,35);
;;;690    			snmp_bat_flag_puts[1]&=~0x0080;
;;;691    			}
;;;692    		}
;;;693    
;;;694    	if(sp_ch_error) 									//Ускореннный заряд заблокирован по вентиляции
;;;695    		{
;;;696    		snmp_bat_flag[1]|=0x0100;
;;;697    		if((snmp_bat_flag_puts[1]&0x0100)==0) 
;;;698    			{
;;;699    			snmp_trap_send("BAT #2,speed charge is blocked",5,8,36); 
;;;700    			snmp_bat_flag_puts[1]|=0x0100;
;;;701    			}
;;;702    		}
;;;703    	else 
;;;704    		{
;;;705    		snmp_bat_flag[1]&=~0x0100;
;;;706    		if(snmp_bat_flag_puts[1]&0x0100) 
;;;707    			{
;;;708    			snmp_trap_send("BAT #2,speed charge is unblocked",5,8,37);
;;;709    			snmp_bat_flag_puts[1]&=~0x0100;
;;;710    			} 
;;;711    		}
;;;712    
;;;713    	if(vz1_stat!=vz1sOFF)								//Уравнительный заряд 
;;;714    		{
;;;715    		snmp_bat_flag[1]|=0x0200;
;;;716    		if((snmp_bat_flag_puts[1]&0x0200)==0) 
;;;717    			{
;;;718    			snmp_trap_send("BAT #2,equalising charge is on",5,8,38); 
;;;719    			snmp_bat_flag_puts[1]|=0x0200;
;;;720    			}
;;;721    		}
;;;722    	else 
;;;723    		{
;;;724    		snmp_bat_flag[1]&=~0x0200;
;;;725    		if(snmp_bat_flag_puts[1]&0x0200) 
;;;726    			{
;;;727    			snmp_trap_send("BAT #2,equalising charge is off",5,8,39);
;;;728    			snmp_bat_flag_puts[1]&=~0x0200;
;;;729    			}
;;;730    		}
;;;731    
;;;732    	if(vz1_error)										//Уравнительный заряд заблокирован по вентиляции 
;;;733    		{
;;;734    		snmp_bat_flag[1]|=0x0400;
;;;735    		if((snmp_bat_flag_puts[1]&0x0400)==0) 
;;;736    			{
;;;737    			snmp_trap_send("BAT #2,equalising charge is blocked",5,8,40); 
;;;738    			snmp_bat_flag_puts[1]|=0x0400;
;;;739    			}
;;;740    		}
;;;741    	else 
;;;742    		{
;;;743    		snmp_bat_flag[1]&=~0x0400;
;;;744    		if(snmp_bat_flag_puts[1]&0x0400) 
;;;745    			{
;;;746    			snmp_trap_send("BAT #2,equalising charge is unblocked",5,8,41);
;;;747    			snmp_bat_flag_puts[1]&=~0x0400;
;;;748    			} 
;;;749    		}
;;;750    
;;;751    	if(vz2_stat!=vz2sOFF)								//Формовочный заряд 
;;;752    		{
;;;753    		snmp_bat_flag[1]|=0x0800;
;;;754    		if((snmp_bat_flag_puts[1]&0x0800)==0) 
;;;755    			{
;;;756    			snmp_trap_send("BAT #2,molding charge is on",5,8,42); 
;;;757    			snmp_bat_flag_puts[1]|=0x0800;
;;;758    			}
;;;759    		}
;;;760    	else 
;;;761    		{
;;;762    		snmp_bat_flag[1]&=~0x0800;
;;;763    		if(snmp_bat_flag_puts[1]&0x0800) 
;;;764    			{
;;;765    			snmp_trap_send("BAT #2,molding charge is off",5,8,43);
;;;766    			snmp_bat_flag_puts[1]&=~0x0800;
;;;767    			}
;;;768    		}
;;;769    
;;;770    	if(vz2_error) 										//Формовочный заряд заблокирован по вентиляции
;;;771    		{
;;;772    		snmp_bat_flag[1]|=0x1000;
;;;773    		if((snmp_bat_flag_puts[1]&0x1000)==0) 
;;;774    			{
;;;775    			snmp_trap_send("BAT #2,molding charge is blocked",5,8,44); 
;;;776    			snmp_bat_flag_puts[1]|=0x1000;
;;;777    			}
;;;778    		}
;;;779    	else 
;;;780    		{
;;;781    		snmp_bat_flag[1]&=~0x1000;
;;;782    		if(snmp_bat_flag_puts[1]&0x1000) 
;;;783    			{
;;;784    			snmp_trap_send("BAT #2,molding charge is unblocked",5,8,45);
;;;785    			snmp_bat_flag_puts[1]&=~0x1000;
;;;786    			} 
;;;787    		}
;;;788    	}
;;;789    else 
;;;790    	{
;;;791    	snmp_bat_flag[1]=0; 
00003e  88a0              LDRH     r0,[r4,#4]  ; adc_self_ch_buff
;;;792    	snmp_bat_flag_puts[1]=0;
000040  87b0              STRH     r0,[r6,#0x3c]
;;;793    	}
;;;794    /*
;;;795    if(!snmp_bat_status[1])
;;;796    	{
;;;797    	if((bat[1]._Ub<(USIGN*10))) 
;;;798    		{
;;;799    		snmp_bat_flag[1]|=0x01; 
;;;800    		if((snmp_bat_flag_puts[1]&0x01)==0) 
;;;801    			{
;;;802    			snmp_trap_send("BAT #2 Alarm, battery is low",5,8,0); 
;;;803    			snmp_bat_flag_puts[1]|=0x01;
;;;804    			}
;;;805    		}
;;;806    	else 
;;;807    		{
;;;808    		snmp_bat_flag[1]&=~0x01; 
;;;809    		if(snmp_bat_flag_puts[1]&0x01) 
;;;810    			{
;;;811    			snmp_trap_send("BAT #2 Alarm clear, battery is not low",5,8,1);
;;;812    			snmp_bat_flag_puts[1]&=~0x01;
;;;813    			}
;;;814    		}
;;;815    	if(bat[1]._temper_stat&0x01) 
;;;816    		{
;;;817    		snmp_bat_flag[1]|=0x02;
;;;818    		if((snmp_bat_flag_puts[1]&0x02)==0) 
;;;819    			{
;;;820    			snmp_trap_send("BAT #2 Alarm, high battery temperature",5,8,2); 
;;;821    			snmp_bat_flag_puts[1]|=0x02;
;;;822    			}
;;;823    		}
;;;824    	else 
;;;825    		{
;;;826    		snmp_bat_flag[1]&=~0x02;
;;;827    		if(snmp_bat_flag_puts[1]&0x02) 
;;;828    			{
;;;829    			snmp_trap_send("BAT #2 Alarm clear, battery temperature is normal",5,8,3);
;;;830    			snmp_bat_flag_puts[1]&=~0x02;
;;;831    			}
;;;832    		}
;;;833    	if(bat[1]._temper_stat&0x02) 
;;;834    		{
;;;835    		snmp_bat_flag[1]|=0x04;
;;;836    		if((snmp_bat_flag_puts[1]&0x04)==0) 
;;;837    			{
;;;838    			snmp_trap_send("BAT #2 Alarm, maximum battery temperature",5,8,4); 
;;;839    			snmp_bat_flag_puts[1]|=0x04;
;;;840    			}
;;;841    		}
;;;842    	else 
;;;843    		{
;;;844    		snmp_bat_flag[1]&=~0x04;
;;;845    		if(snmp_bat_flag_puts[1]&0x04) 
;;;846    			{
;;;847    			snmp_trap_send("BAT #2 Alarm clear, battery temperature is normal",5,8,5);
;;;848    			snmp_bat_flag_puts[1]&=~0x04;
;;;849    			}
;;;850    		}
;;;851    		
;;;852    	if(bat[1]._Ib<(-IKB))	snmp_bat_flag[1]|=0x80;
;;;853    	else if(bat[1]._Ib>IKB)snmp_bat_flag[1]&=~0x80;
;;;854    
;;;855    	if((spc_stat==spcKE)&&(spc_bat==1)) 
;;;856    		{
;;;857    		snmp_bat_flag[1]|=0x10;
;;;858    		if((snmp_bat_flag_puts[1]&0x10)==0) 
;;;859    			{
;;;860    			snmp_trap_send("BAT #2, capacity check enabled",5,8,6); 
;;;861    			snmp_bat_flag_puts[1]|=0x10;
;;;862    			}
;;;863    		}
;;;864    	else 
;;;865    		{
;;;866    		snmp_bat_flag[1]&=~0x10;
;;;867    		if(snmp_bat_flag_puts[1]&0x10) 
;;;868    			{
;;;869    			snmp_trap_send("BAT #2, capacity check disabled",5,8,7);
;;;870    			snmp_bat_flag_puts[1]&=~0x10;
;;;871    			}
;;;872    		}
;;;873    		
;;;874    	if(spc_stat==spcVZ) 
;;;875    		{
;;;876    		snmp_bat_flag[1]|=0x20;
;;;877    		if((snmp_bat_flag_puts[1]&0x20)==0) 
;;;878    			{
;;;879    			snmp_trap_send("BAT #2,equalizing charge is on",5,8,8); 
;;;880    			snmp_bat_flag_puts[1]|=0x20;
;;;881    			}
;;;882    		}
;;;883    	else 
;;;884    		{
;;;885    		snmp_bat_flag[1]&=~0x20;
;;;886    		if(snmp_bat_flag_puts[1]&0x20) 
;;;887    			{
;;;888    			snmp_trap_send("BAT #2,equalizing charge is off",5,8,9);
;;;889    			snmp_bat_flag_puts[1]&=~0x20;
;;;890    			}
;;;891    		}
;;;892    
;;;893    	if(vz_error) 
;;;894    		{
;;;895    		snmp_bat_flag[1]|=0x40;
;;;896    		if((snmp_bat_flag_puts[1]&0x40)==0) 
;;;897    			{
;;;898    			snmp_trap_send("BAT #2,equalizing charge blocked",5,8,10); 
;;;899    			snmp_bat_flag_puts[1]|=0x40;
;;;900    			}
;;;901    		}
;;;902    	else 
;;;903    		{
;;;904    		snmp_bat_flag[1]&=~0x40;
;;;905    		if(snmp_bat_flag_puts[1]&0x40) 
;;;906    			{
;;;907    			snmp_trap_send("BAT #2,equalizing charge is not blocked",5,8,11);
;;;908    			snmp_bat_flag_puts[1]&=~0x40;
;;;909    			} 
;;;910    		}
;;;911       }
;;;912    else 
;;;913    	{
;;;914    	snmp_bat_flag[1]=0; 
;;;915    	snmp_bat_flag_puts[1]=0;
;;;916    	} */
;;;917    }
000042  e00c              B        |L3.94|
                  |L3.68|
000044  f9b50002          LDRSH    r0,[r5,#2]  ; adc_self_ch_disp
000048  4288              CMP      r0,r1                 ;319
00004a  da02              BGE      |L3.82|
00004c  8860              LDRH     r0,[r4,#2]            ;319  ; adc_self_ch_buff
00004e  87b0              STRH     r0,[r6,#0x3c]         ;319
000050  e005              B        |L3.94|
                  |L3.82|
000052  f9b50000          LDRSH    r0,[r5,#0]            ;321  ; adc_self_ch_disp
000056  4288              CMP      r0,r1                 ;319
000058  da01              BGE      |L3.94|
00005a  8820              LDRH     r0,[r4,#0]            ;321  ; adc_self_ch_buff
00005c  87b0              STRH     r0,[r6,#0x3c]         ;322
                  |L3.94|
00005e  7c77              LDRB     r7,[r6,#0x11]         ;322  ; adc_ch_net
000060  2200              MOVS     r2,#0                 ;322
000062  b3ef              CBZ      r7,|L3.224|
000064  7d33              LDRB     r3,[r6,#0x14]         ;321  ; adc_window_flag
000066  486b              LDR      r0,|L3.532|
000068  b18b              CBZ      r3,|L3.142|
00006a  f9b6103c          LDRSH    r1,[r6,#0x3c]         ;322  ; adc_result
00006e  6804              LDR      r4,[r0,#0]            ;324  ; main_power_buffer
000070  eb0404a1          ADD      r4,r4,r1,ASR #2       ;324
000074  6004              STR      r4,[r0,#0]            ;324  ; main_power_buffer
000076  6844              LDR      r4,[r0,#4]            ;324  ; main_power_buffer
000078  eb0404a1          ADD      r4,r4,r1,ASR #2       ;324
00007c  6044              STR      r4,[r0,#4]            ;325  ; main_power_buffer
00007e  6884              LDR      r4,[r0,#8]            ;325  ; main_power_buffer
000080  eb0404a1          ADD      r4,r4,r1,ASR #2       ;325
000084  6084              STR      r4,[r0,#8]            ;330  ; main_power_buffer
000086  68c4              LDR      r4,[r0,#0xc]          ;330  ; main_power_buffer
000088  eb0401a1          ADD      r1,r4,r1,ASR #2       ;330
00008c  60c1              STR      r1,[r0,#0xc]          ;331  ; main_power_buffer
                  |L3.142|
00008e  f9b6103c          LDRSH    r1,[r6,#0x3c]         ;333  ; adc_result
000092  2964              CMP      r1,#0x64              ;333
000094  da06              BGE      |L3.164|
000096  f8b61040          LDRH     r1,[r6,#0x40]         ;333  ; adc_zero_cnt
00009a  f1010101          ADD      r1,r1,#1              ;334
00009e  f8a61040          STRH     r1,[r6,#0x40]         ;334
0000a2  e001              B        |L3.168|
                  |L3.164|
0000a4  f8a62040          STRH     r2,[r6,#0x40]         ;338
                  |L3.168|
0000a8  f9b64040          LDRSH    r4,[r6,#0x40]         ;338  ; adc_zero_cnt
0000ac  f44f61fa          MOV      r1,#0x7d0             ;340
0000b0  428c              CMP      r4,r1                 ;340
0000b2  db06              BLT      |L3.194|
0000b4  f8a61040          STRH     r1,[r6,#0x40]         ;341
0000b8  6002              STR      r2,[r0,#0]            ;343  ; main_power_buffer
0000ba  6042              STR      r2,[r0,#4]            ;343  ; main_power_buffer
0000bc  6082              STR      r2,[r0,#8]            ;343  ; main_power_buffer
0000be  60c2              STR      r2,[r0,#0xc]          ;343  ; main_power_buffer
0000c0  8772              STRH     r2,[r6,#0x3a]         ;343
                  |L3.194|
0000c2  f8b61040          LDRH     r1,[r6,#0x40]         ;343  ; adc_zero_cnt
0000c6  2905              CMP      r1,#5                 ;344
0000c8  d14f              BNE      |L3.362|
0000ca  b1bb              CBZ      r3,|L3.252|
0000cc  8ff1              LDRH     r1,[r6,#0x3e]         ;344  ; adc_gorb_cnt
0000ce  f1010101          ADD      r1,r1,#1              ;349
0000d2  b209              SXTH     r1,r1                 ;349
0000d4  87f1              STRH     r1,[r6,#0x3e]         ;349
0000d6  f5b17f00          CMP      r1,#0x200             ;350
0000da  db00              BLT      |L3.222|
0000dc  87f2              STRH     r2,[r6,#0x3e]         ;352
                  |L3.222|
0000de  e000              B        |L3.226|
                  |L3.224|
0000e0  e01b              B        |L3.282|
                  |L3.226|
0000e2  f9b6103e          LDRSH    r1,[r6,#0x3e]         ;352  ; adc_gorb_cnt
0000e6  064c              LSLS     r4,r1,#25             ;352
0000e8  d108              BNE      |L3.252|
0000ea  ea4f11e1          ASR      r1,r1,#7              ;353
0000ee  f8504021          LDR      r4,[r0,r1,LSL #2]     ;353
0000f2  ea4f2424          ASR      r4,r4,#8              ;357
0000f6  8774              STRH     r4,[r6,#0x3a]         ;357
0000f8  f8402021          STR      r2,[r0,r1,LSL #2]     ;359
                  |L3.252|
0000fc  f9b60042          LDRSH    r0,[r6,#0x42]         ;359  ; adc_window_cnt
000100  2896              CMP      r0,#0x96              ;360
000102  dd01              BLE      |L3.264|
000104  b103              CBZ      r3,|L3.264|
000106  7532              STRB     r2,[r6,#0x14]         ;362
                  |L3.264|
000108  381f              SUBS     r0,r0,#0x1f           ;362
00010a  2827              CMP      r0,#0x27              ;362
00010c  d22d              BCS      |L3.362|
00010e  7d30              LDRB     r0,[r6,#0x14]         ;362  ; adc_window_flag
000110  bb58              CBNZ     r0,|L3.362|
000112  f04f0001          MOV      r0,#1                 ;363
000116  7530              STRB     r0,[r6,#0x14]         ;363
000118  e027              B        |L3.362|
                  |L3.282|
00011a  483f              LDR      r0,|L3.536|
00011c  7cb5              LDRB     r5,[r6,#0x12]         ;368  ; adc_ch
00011e  7cf3              LDRB     r3,[r6,#0x13]         ;368  ; adc_ch_cnt
000120  eb001485          ADD      r4,r0,r5,LSL #6       ;368
000124  f9b6103c          LDRSH    r1,[r6,#0x3c]         ;369  ; adc_result
000128  f8441023          STR      r1,[r4,r3,LSL #2]     ;369
00012c  0798              LSLS     r0,r3,#30             ;371
00012e  d10f              BNE      |L3.336|
000130  4601              MOV      r1,r0                 ;371
                  |L3.306|
000132  f854c020          LDR      r12,[r4,r0,LSL #2]    ;371
000136  4461              ADD      r1,r1,r12             ;372
000138  f1000001          ADD      r0,r0,#1              ;372
00013c  b2c0              UXTB     r0,r0                 ;372
00013e  2810              CMP      r0,#0x10              ;372
000140  d3f7              BCC      |L3.306|
000142  ea4f1021          ASR      r0,r1,#4              ;376
000146  4933              LDR      r1,|L3.532|
000148  f1a10120          SUB      r1,r1,#0x20           ;376
00014c  f8210015          STRH     r0,[r1,r5,LSL #1]     ;376
                  |L3.336|
000150  1c6d              ADDS     r5,r5,#1              ;376
000152  b2e8              UXTB     r0,r5                 ;376
000154  74b0              STRB     r0,[r6,#0x12]         ;376
000156  2810              CMP      r0,#0x10              ;376
000158  d307              BCC      |L3.362|
00015a  74b2              STRB     r2,[r6,#0x12]         ;377
00015c  f1030301          ADD      r3,r3,#1              ;377
000160  b2d8              UXTB     r0,r3                 ;377
000162  74f0              STRB     r0,[r6,#0x13]         ;377
000164  2810              CMP      r0,#0x10              ;377
000166  d300              BCC      |L3.362|
000168  74f2              STRB     r2,[r6,#0x13]         ;379
                  |L3.362|
00016a  7432              STRB     r2,[r6,#0x10]         ;379
00016c  f1070701          ADD      r7,r7,#1              ;379
000170  f0070001          AND      r0,r7,#1              ;379
000174  7470              STRB     r0,[r6,#0x11]         ;379
000176  4a29              LDR      r2,|L3.540|
000178  b130              CBZ      r0,|L3.392|
00017a  6810              LDR      r0,[r2,#0]            ;390
00017c  f02000ff          BIC      r0,r0,#0xff           ;390
000180  f1000004          ADD      r0,r0,#4              ;391
000184  6010              STR      r0,[r2,#0]            ;393
000186  e03d              B        |L3.516|
                  |L3.392|
000188  7cb1              LDRB     r1,[r6,#0x12]         ;393  ; adc_ch
00018a  0708              LSLS     r0,r1,#28             ;393
00018c  d406              BMI      |L3.412|
00018e  6810              LDR      r0,[r2,#0]            ;393
000190  f02000ff          BIC      r0,r0,#0xff           ;394
000194  f1000001          ADD      r0,r0,#1              ;394
000198  6010              STR      r0,[r2,#0]            ;398
00019a  e005              B        |L3.424|
                  |L3.412|
00019c  6810              LDR      r0,[r2,#0]            ;398
00019e  f02000ff          BIC      r0,r0,#0xff           ;398
0001a2  f1000002          ADD      r0,r0,#2              ;409
0001a6  6010              STR      r0,[r2,#0]            ;409
                  |L3.424|
0001a8  481d              LDR      r0,|L3.544|
0001aa  6803              LDR      r3,[r0,#0]            ;410
0001ac  f0435380          ORR      r3,r3,#0x10000000     ;410
0001b0  6003              STR      r3,[r0,#0]            ;412
0001b2  6a03              LDR      r3,[r0,#0x20]         ;412
0001b4  f0434380          ORR      r3,r3,#0x40000000     ;412
0001b8  6203              STR      r3,[r0,#0x20]         ;412
0001ba  6e03              LDR      r3,[r0,#0x60]         ;413
0001bc  f0436380          ORR      r3,r3,#0x4000000      ;413
0001c0  6603              STR      r3,[r0,#0x60]         ;413
0001c2  07cb              LSLS     r3,r1,#31             ;417
0001c4  d00a              BEQ      |L3.476|
0001c6  6943              LDR      r3,[r0,#0x14]         ;417
0001c8  f0435380          ORR      r3,r3,#0x10000000     ;419
0001cc  6143              STR      r3,[r0,#0x14]         ;419
                  |L3.462|
0001ce  078b              LSLS     r3,r1,#30             ;419
0001d0  d409              BMI      |L3.486|
0001d2  6b43              LDR      r3,[r0,#0x34]         ;420
0001d4  f0234380          BIC      r3,r3,#0x40000000     ;420
0001d8  6343              STR      r3,[r0,#0x34]         ;422
0001da  e008              B        |L3.494|
                  |L3.476|
0001dc  6943              LDR      r3,[r0,#0x14]         ;422
0001de  f0235380          BIC      r3,r3,#0x10000000     ;422
0001e2  6143              STR      r3,[r0,#0x14]         ;423
0001e4  e7f3              B        |L3.462|
                  |L3.486|
0001e6  6b43              LDR      r3,[r0,#0x34]         ;423
0001e8  f0434380          ORR      r3,r3,#0x40000000     ;423
0001ec  6343              STR      r3,[r0,#0x34]         ;381
                  |L3.494|
0001ee  0749              LSLS     r1,r1,#29             ;381
0001f0  d404              BMI      |L3.508|
0001f2  6f41              LDR      r1,[r0,#0x74]         ;381
0001f4  f0216180          BIC      r1,r1,#0x4000000      ;382
0001f8  6741              STR      r1,[r0,#0x74]         ;382
0001fa  e003              B        |L3.516|
                  |L3.508|
0001fc  6f41              LDR      r1,[r0,#0x74]         ;384
0001fe  f0416180          ORR      r1,r1,#0x4000000      ;384
000202  6741              STR      r1,[r0,#0x74]         ;384
                  |L3.516|
000204  6810              LDR      r0,[r2,#0]            ;384
000206  f0407080          ORR      r0,r0,#0x1000000      ;385
00020a  6010              STR      r0,[r2,#0]            ;385
00020c  e8bd81f0          POP      {r4-r8,pc}            ;385
;;;918    
                          ENDP

                  |L3.528|
                          DCD      ||area_number.25||+0xee
                  |L3.532|
                          DCD      ||.bss||+0x42c
                  |L3.536|
                          DCD      ||.bss||+0xc
                  |L3.540|
                          DCD      0x40034000
                  |L3.544|
                          DCD      0x2009c000

                          AREA ||area_number.4||, CODE, READONLY, ALIGN=2

                          EXPORTAS ||area_number.4||, ||.text||
                  ips_current_average_hndl_ PROC
;;;306    // заполнение флагов для АКБ
;;;307    void bat_flag (void)
000000  e92d43f0          PUSH     {r4-r9,lr}
;;;308    {  
;;;309    if(spc_stat!=spcVZ) 
000004  b085              SUB      sp,sp,#0x14
;;;310    	{
;;;311    	vz_error=0;
000006  4c64              LDR      r4,|L4.408|
000008  4e64              LDR      r6,|L4.412|
00000a  2500              MOVS     r5,#0                 ;309
00000c  7820              LDRB     r0,[r4,#0]            ;309  ; ica_timer_cnt
00000e  1c40              ADDS     r0,r0,#1              ;309
000010  b2c0              UXTB     r0,r0
;;;312    	sp_ch_error=0;
000012  7020              STRB     r0,[r4,#0]
;;;313    	vz1_error=0;
000014  280a              CMP      r0,#0xa
;;;314    	vz2_error=0;
000016  d340              BCC      |L4.154|
;;;315    	}
;;;316    
;;;317    if(!snmp_bat_status[0])	 			//Батарея №1
000018  7025              STRB     r5,[r4,#0]
00001a  f8dfc184          LDR      r12,|L4.416|
;;;318    	{
;;;319    	if((bat[0]._Ub<(USIGN*10)))		//Снижение напряжения батареи ниже Uбсигн 
00001e  f89c0000          LDRB     r0,[r12,#0]  ; ica_plazma
000022  f1000001          ADD      r0,r0,#1
000026  f88c0000          STRB     r0,[r12,#0]           ;317
;;;320    		{
;;;321    		snmp_bat_flag[0]|=0x0001; 
;;;322    		if((snmp_bat_flag_puts[0]&0x0001)==0) 
;;;323    			{
;;;324    			snmp_trap_send("BAT #1 Alarm, battery is low",5,8,0); 
;;;325    			snmp_bat_flag_puts[0]|=0x0001;
;;;326    			}
;;;327    		}
;;;328    	else 
;;;329    		{
;;;330    		snmp_bat_flag[0]&=~0x0001; 
;;;331    		if(snmp_bat_flag_puts[0]&0x0001) 
;;;332    			{
;;;333    			snmp_trap_send("BAT #1 Alarm clear, battery is not low",5,8,1);
;;;334    			snmp_bat_flag_puts[0]&=~0x0001;
;;;335    			}
;;;336    		}
;;;337    
;;;338    	if(bat[0]._temper_stat&0x01)	//Повышенная температура батареи, первый порог - предупреждение
;;;339    		{
;;;340    		snmp_bat_flag[0]|=0x0002;
;;;341    		if((snmp_bat_flag_puts[0]&0x0002)==0) 
;;;342    			{
;;;343    			snmp_trap_send("BAT #1 Warning, high battery temperature",5,8,2); 
;;;344    			snmp_bat_flag_puts[0]|=0x0002;
;;;345    			}
;;;346    		}
;;;347    	else 
;;;348    		{
;;;349    		snmp_bat_flag[0]&=~0x0002;
;;;350    		if(snmp_bat_flag_puts[0]&0x0002) 
;;;351    			{
;;;352    			snmp_trap_send("BAT #1 Warning clear, battery temperature is normal",5,8,3);
;;;353    			snmp_bat_flag_puts[0]&=~0x02;
;;;354    			}
;;;355    		}
;;;356    
;;;357    	if(bat[0]._temper_stat&0x02)  	//Повышенная температура батареи, второй порог - авария
;;;358    		{
;;;359    		snmp_bat_flag[0]|=0x0004;
;;;360    		if((snmp_bat_flag_puts[0]&0x0004)==0) 
;;;361    			{
;;;362    			snmp_trap_send("BAT #1 Alarm, high battery temperature",5,8,4); 
;;;363    			snmp_bat_flag_puts[0]|=0x0004;
;;;364    			}
;;;365    		}
;;;366    	else 
;;;367    		{
;;;368    		snmp_bat_flag[0]&=~0x0004;
;;;369    		if(snmp_bat_flag_puts[0]&0x0004) 
;;;370    			{
;;;371    			snmp_trap_send("BAT #1 Alarm clear, battery temperature is normal",5,8,5);
;;;372    			snmp_bat_flag_puts[0]&=~0x0004;
;;;373    			}
;;;374    		}
;;;375    
;;;376    	if(bat[0]._Ib<(-IKB)) snmp_bat_flag[0]|=0x0008;		//Разряд батареи
00002a  485e              LDR      r0,|L4.420|
00002c  495e              LDR      r1,|L4.424|
00002e  f9b00000          LDRSH    r0,[r0,#0]            ;322  ; bps_I
;;;377    	else if(bat[0]._Ib>IKB) snmp_bat_flag[0]&=~0x0008;	//Заряд батареи
;;;378    
;;;379    	if((spc_stat==spcKE)&&(spc_bat==0))					//Контроль емкости батареи №1 
;;;380    		{
;;;381    		snmp_bat_flag[0]|=0x0010;
;;;382    		if((snmp_bat_flag_puts[0]&0x0010)==0) 
;;;383    			{
;;;384    			snmp_trap_send("BAT #1, capacity test started",5,8,6); 
;;;385    			snmp_bat_flag_puts[0]|=0x0010;
;;;386    			}
;;;387    		}
;;;388    	else 
;;;389    		{
;;;390    		snmp_bat_flag[0]&=~0x0010;
;;;391    		if(snmp_bat_flag_puts[0]&0x0010) 
;;;392    			{
;;;393    			snmp_trap_send("BAT #1, capacity test stopped",5,8,7);
;;;394    			snmp_bat_flag_puts[0]&=~0x0010;
;;;395    			}
;;;396    		}
;;;397    		
;;;398    	if(spc_stat==spcVZ)									//Выравнивающий заряд 
;;;399    		{
;;;400    		snmp_bat_flag[0]|=0x0020;
;;;401    		if((snmp_bat_flag_puts[0]&0x0020)==0) 
;;;402    			{
;;;403    			snmp_trap_send("BAT #1,leveling charge is started",5,8,8); 
;;;404    			snmp_bat_flag_puts[0]|=0x0020;
;;;405    			}
;;;406    		}
;;;407    	else 
;;;408    		{
;;;409    		snmp_bat_flag[0]&=~0x0020;
;;;410    		if(snmp_bat_flag_puts[0]&0x0020) 
;;;411    			{
;;;412    			snmp_trap_send("BAT #1,leveling charge is stopped",5,8,9);
;;;413    			snmp_bat_flag_puts[0]&=~0x0020;
;;;414    			}
;;;415    		}
;;;416    
;;;417    	if(vz_error)										 //Выравнивающий заряд заблокирован по вентиляции
;;;418    		{
;;;419    		snmp_bat_flag[0]|=0x0040;
;;;420    		if((snmp_bat_flag_puts[0]&0x0040)==0) 
;;;421    			{
;;;422    			snmp_trap_send("BAT #1,leveling charge is blocked",5,8,10); 
;;;423    			snmp_bat_flag_puts[0]|=0x0040;
;;;424    			}
;;;425    		}
;;;426    	else 
;;;427    		{
;;;428    		snmp_bat_flag[0]&=~0x0040;
;;;429    		if(snmp_bat_flag_puts[0]&0x0040) 
;;;430    			{
;;;431    			snmp_trap_send("BAT #1,leveling charge is unblocked",5,8,11);
;;;432    			snmp_bat_flag_puts[0]&=~0x0040;
;;;433    			} 
;;;434    		}
;;;435    
;;;436    	if(sp_ch_stat==scsWRK) 								//Ускореннный заряд
;;;437    		{
;;;438    		snmp_bat_flag[0]|=0x0080;
;;;439    		if((snmp_bat_flag_puts[0]&0x0080)==0) 
;;;440    			{
;;;441    			snmp_trap_send("BAT #1,speed charge is started",5,8,10); 
;;;442    			snmp_bat_flag_puts[0]|=0x0080;
;;;443    			}
;;;444    		}
;;;445    	else 
;;;446    		{
;;;447    		snmp_bat_flag[0]&=~0x0080;
;;;448    		if(snmp_bat_flag_puts[0]&0x0080) 
;;;449    			{
;;;450    			snmp_trap_send("BAT #1,speed charge is stopped",5,8,11);
;;;451    			snmp_bat_flag_puts[0]&=~0x0080;
;;;452    			}
;;;453    		}
;;;454    
;;;455    	if(sp_ch_error) 									//Ускореннный заряд заблокирован по вентиляции
;;;456    		{
;;;457    		snmp_bat_flag[0]|=0x0100;
;;;458    		if((snmp_bat_flag_puts[0]&0x0100)==0) 
;;;459    			{
;;;460    			snmp_trap_send("BAT #1,speed charge is blocked",5,8,12); 
;;;461    			snmp_bat_flag_puts[0]|=0x0100;
;;;462    			}
;;;463    		}
;;;464    	else 
;;;465    		{
;;;466    		snmp_bat_flag[0]&=~0x0100;
;;;467    		if(snmp_bat_flag_puts[0]&0x0100) 
;;;468    			{
;;;469    			snmp_trap_send("BAT #1,speed charge is unblocked",5,8,13);
;;;470    			snmp_bat_flag_puts[0]&=~0x0100;
;;;471    			} 
;;;472    		}
;;;473    
;;;474    	if(vz1_stat!=vz1sOFF)								//Уравнительный заряд 
;;;475    		{
;;;476    		snmp_bat_flag[0]|=0x0200;
;;;477    		if((snmp_bat_flag_puts[0]&0x0200)==0) 
;;;478    			{
;;;479    			snmp_trap_send("BAT #1,equalising charge is on",5,8,14); 
;;;480    			snmp_bat_flag_puts[0]|=0x0200;
;;;481    			}
;;;482    		}
;;;483    	else 
;;;484    		{
;;;485    		snmp_bat_flag[0]&=~0x0200;
;;;486    		if(snmp_bat_flag_puts[0]&0x0200) 
;;;487    			{
;;;488    			snmp_trap_send("BAT #1,equalising charge is off",5,8,15);
;;;489    			snmp_bat_flag_puts[0]&=~0x0200;
;;;490    			}
;;;491    		}
;;;492    
;;;493    	if(vz1_error)										//Уравнительный заряд заблокирован по вентиляции 
;;;494    		{
;;;495    		snmp_bat_flag[0]|=0x0400;
;;;496    		if((snmp_bat_flag_puts[0]&0x0400)==0) 
;;;497    			{
;;;498    			snmp_trap_send("BAT #1,equalising charge is blocked",5,8,16); 
;;;499    			snmp_bat_flag_puts[0]|=0x0400;
;;;500    			}
;;;501    		}
;;;502    	else 
;;;503    		{
;;;504    		snmp_bat_flag[0]&=~0x0400;
;;;505    		if(snmp_bat_flag_puts[0]&0x0400) 
;;;506    			{
;;;507    			snmp_trap_send("BAT #1,equalising charge is unblocked",5,8,17);
;;;508    			snmp_bat_flag_puts[0]&=~0x0400;
;;;509    			} 
;;;510    		}
;;;511    
;;;512    	if(vz2_stat!=vz2sOFF)								//Формовочный заряд 
;;;513    		{
;;;514    		snmp_bat_flag[0]|=0x0800;
;;;515    		if((snmp_bat_flag_puts[0]&0x0800)==0) 
;;;516    			{
;;;517    			snmp_trap_send("BAT #1,molding charge is on",5,8,18); 
;;;518    			snmp_bat_flag_puts[0]|=0x0800;
;;;519    			}
;;;520    		}
;;;521    	else 
;;;522    		{
;;;523    		snmp_bat_flag[0]&=~0x0800;
;;;524    		if(snmp_bat_flag_puts[0]&0x0800) 
;;;525    			{
;;;526    			snmp_trap_send("BAT #1,molding charge is off",5,8,19);
;;;527    			snmp_bat_flag_puts[0]&=~0x0800;
;;;528    			}
;;;529    		}
;;;530    
;;;531    	if(vz2_error) 										//Формовочный заряд заблокирован по вентиляции
;;;532    		{
;;;533    		snmp_bat_flag[0]|=0x1000;
;;;534    		if((snmp_bat_flag_puts[0]&0x1000)==0) 
;;;535    			{
;;;536    			snmp_trap_send("BAT #1,molding charge is blocked",5,8,20); 
;;;537    			snmp_bat_flag_puts[0]|=0x1000;
;;;538    			}
;;;539    		}
;;;540    	else 
;;;541    		{
;;;542    		snmp_bat_flag[0]&=~0x1000;
;;;543    		if(snmp_bat_flag_puts[0]&0x1000) 
;;;544    			{
;;;545    			snmp_trap_send("BAT #1,molding charge is unblocked",5,8,21);
;;;546    			snmp_bat_flag_puts[0]&=~0x1000;
;;;547    			} 
;;;548    		}
;;;549    	}
;;;550    else 
;;;551    	{
;;;552    	snmp_bat_flag[0]=0; 
000032  8008              STRH     r0,[r1,#0]
;;;553    	snmp_bat_flag_puts[0]=0;
000034  495d              LDR      r1,|L4.428|
;;;554    	}
;;;555    
;;;556    if(!snmp_bat_status[1])	 			//Батарея №2
000036  f8df8178          LDR      r8,|L4.432|
00003a  4662              MOV      r2,r12
00003c  4637              MOV      r7,r6
;;;557    	{
;;;558    	if((bat[1]._Ub<(USIGN*10)))		//Снижение напряжения батареи ниже Uбсигн 
;;;559    		{
;;;560    		snmp_bat_flag[1]|=0x0001; 
;;;561    		if((snmp_bat_flag_puts[1]&0x0001)==0) 
;;;562    			{
;;;563    			snmp_trap_send("BAT #2 Alarm, battery is low",5,8,22); 
;;;564    			snmp_bat_flag_puts[1]|=0x0001;
;;;565    			}
;;;566    		}
;;;567    	else 
;;;568    		{
;;;569    		snmp_bat_flag[1]&=~0x0001; 
;;;570    		if(snmp_bat_flag_puts[1]&0x0001) 
;;;571    			{
;;;572    			snmp_trap_send("BAT #2 Alarm clear, battery is not low",5,8,23);
;;;573    			snmp_bat_flag_puts[1]&=~0x0001;
;;;574    			}
;;;575    		}
;;;576    
;;;577    	if(bat[1]._temper_stat&0x01)	//Повышенная температура батареи, первый порог - предупреждение
;;;578    		{
;;;579    		snmp_bat_flag[1]|=0x0002;
;;;580    		if((snmp_bat_flag_puts[0]&0x0002)==0) 
;;;581    			{
;;;582    			snmp_trap_send("BAT #2 Warning, high battery temperature",5,8,24); 
;;;583    			snmp_bat_flag_puts[1]|=0x0002;
;;;584    			}
;;;585    		}
;;;586    	else 
;;;587    		{
;;;588    		snmp_bat_flag[1]&=~0x0002;
;;;589    		if(snmp_bat_flag_puts[1]&0x0002) 
;;;590    			{
;;;591    			snmp_trap_send("BAT #2 Warning clear, battery temperature is normal",5,8,25);
;;;592    			snmp_bat_flag_puts[1]&=~0x02;
;;;593    			}
;;;594    		}
;;;595    
;;;596    	if(bat[1]._temper_stat&0x02)  	//Повышенная температура батареи, второй порог - авария
;;;597    		{
;;;598    		snmp_bat_flag[1]|=0x0004;
;;;599    		if((snmp_bat_flag_puts[1]&0x0004)==0) 
;;;600    			{
;;;601    			snmp_trap_send("BAT #2 Alarm, high battery temperature",5,8,26); 
;;;602    			snmp_bat_flag_puts[1]|=0x0004;
;;;603    			}
;;;604    		}
;;;605    	else 
;;;606    		{
;;;607    		snmp_bat_flag[1]&=~0x0004;
;;;608    		if(snmp_bat_flag_puts[1]&0x0004) 
;;;609    			{
;;;610    			snmp_trap_send("BAT #2 Alarm clear, battery temperature is normal",5,8,27);
;;;611    			snmp_bat_flag_puts[1]&=~0x0004;
;;;612    			}
;;;613    		}
;;;614    
;;;615    	if(bat[1]._Ib<(-IKB)) snmp_bat_flag[1]|=0x0008;		//Разряд батареи
;;;616    	else if(bat[1]._Ib>IKB) snmp_bat_flag[1]&=~0x0008;	//Заряд батареи
;;;617    
;;;618    	if((spc_stat==spcKE)&&(spc_bat==0))					//Контроль емкости батареи №1 
;;;619    		{
;;;620    		snmp_bat_flag[1]|=0x0010;
;;;621    		if((snmp_bat_flag_puts[1]&0x0010)==0) 
;;;622    			{
;;;623    			snmp_trap_send("BAT #2, capacity test started",5,8,28); 
;;;624    			snmp_bat_flag_puts[1]|=0x0010;
;;;625    			}
;;;626    		}
;;;627    	else 
;;;628    		{
;;;629    		snmp_bat_flag[1]&=~0x0010;
;;;630    		if(snmp_bat_flag_puts[1]&0x0010) 
;;;631    			{
;;;632    			snmp_trap_send("BAT #2, capacity test stopped",5,8,29);
;;;633    			snmp_bat_flag_puts[1]&=~0x0010;
;;;634    			}
;;;635    		}
;;;636    		
;;;637    	if(spc_stat==spcVZ)									//Выравнивающий заряд 
;;;638    		{
;;;639    		snmp_bat_flag[1]|=0x0020;
;;;640    		if((snmp_bat_flag_puts[1]&0x0020)==0) 
;;;641    			{
;;;642    			snmp_trap_send("BAT #2,leveling charge is started",5,8,30); 
;;;643    			snmp_bat_flag_puts[1]|=0x0020;
;;;644    			}
;;;645    		}
;;;646    	else 
;;;647    		{
;;;648    		snmp_bat_flag[1]&=~0x0020;
;;;649    		if(snmp_bat_flag_puts[1]&0x0020) 
;;;650    			{
;;;651    			snmp_trap_send("BAT #2,leveling charge is stopped",5,8,31);
;;;652    			snmp_bat_flag_puts[1]&=~0x0020;
;;;653    			}
;;;654    		}
;;;655    
;;;656    	if(vz_error)										 //Выравнивающий заряд заблокирован по вентиляции
;;;657    		{
;;;658    		snmp_bat_flag[1]|=0x0040;
;;;659    		if((snmp_bat_flag_puts[1]&0x0040)==0) 
;;;660    			{
;;;661    			snmp_trap_send("BAT #2,leveling charge is blocked",5,8,32); 
;;;662    			snmp_bat_flag_puts[1]|=0x0040;
;;;663    			}
;;;664    		}
;;;665    	else 
;;;666    		{
;;;667    		snmp_bat_flag[1]&=~0x0040;
;;;668    		if(snmp_bat_flag_puts[1]&0x0040) 
;;;669    			{
;;;670    			snmp_trap_send("BAT #2,leveling charge is unblocked",5,8,33);
;;;671    			snmp_bat_flag_puts[1]&=~0x0040;
;;;672    			} 
;;;673    		}
;;;674    
;;;675    	if(sp_ch_stat==scsWRK) 								//Ускореннный заряд
;;;676    		{
;;;677    		snmp_bat_flag[1]|=0x0080;
;;;678    		if((snmp_bat_flag_puts[1]&0x0080)==0) 
;;;679    			{
;;;680    			snmp_trap_send("BAT #2,speed charge is started",5,8,34); 
;;;681    			snmp_bat_flag_puts[1]|=0x0080;
;;;682    			}
;;;683    		}
;;;684    	else 
;;;685    		{
;;;686    		snmp_bat_flag[1]&=~0x0080;
;;;687    		if(snmp_bat_flag_puts[1]&0x0080) 
;;;688    			{
;;;689    			snmp_trap_send("BAT #2,speed charge is stopped",5,8,35);
;;;690    			snmp_bat_flag_puts[1]&=~0x0080;
;;;691    			}
;;;692    		}
;;;693    
;;;694    	if(sp_ch_error) 									//Ускореннный заряд заблокирован по вентиляции
;;;695    		{
;;;696    		snmp_bat_flag[1]|=0x0100;
;;;697    		if((snmp_bat_flag_puts[1]&0x0100)==0) 
;;;698    			{
;;;699    			snmp_trap_send("BAT #2,speed charge is blocked",5,8,36); 
;;;700    			snmp_bat_flag_puts[1]|=0x0100;
;;;701    			}
;;;702    		}
;;;703    	else 
;;;704    		{
;;;705    		snmp_bat_flag[1]&=~0x0100;
;;;706    		if(snmp_bat_flag_puts[1]&0x0100) 
;;;707    			{
;;;708    			snmp_trap_send("BAT #2,speed charge is unblocked",5,8,37);
;;;709    			snmp_bat_flag_puts[1]&=~0x0100;
;;;710    			} 
;;;711    		}
;;;712    
;;;713    	if(vz1_stat!=vz1sOFF)								//Уравнительный заряд 
;;;714    		{
;;;715    		snmp_bat_flag[1]|=0x0200;
;;;716    		if((snmp_bat_flag_puts[1]&0x0200)==0) 
;;;717    			{
;;;718    			snmp_trap_send("BAT #2,equalising charge is on",5,8,38); 
;;;719    			snmp_bat_flag_puts[1]|=0x0200;
;;;720    			}
;;;721    		}
;;;722    	else 
;;;723    		{
;;;724    		snmp_bat_flag[1]&=~0x0200;
;;;725    		if(snmp_bat_flag_puts[1]&0x0200) 
;;;726    			{
;;;727    			snmp_trap_send("BAT #2,equalising charge is off",5,8,39);
;;;728    			snmp_bat_flag_puts[1]&=~0x0200;
;;;729    			}
;;;730    		}
;;;731    
;;;732    	if(vz1_error)										//Уравнительный заряд заблокирован по вентиляции 
;;;733    		{
;;;734    		snmp_bat_flag[1]|=0x0400;
;;;735    		if((snmp_bat_flag_puts[1]&0x0400)==0) 
;;;736    			{
;;;737    			snmp_trap_send("BAT #2,equalising charge is blocked",5,8,40); 
;;;738    			snmp_bat_flag_puts[1]|=0x0400;
;;;739    			}
;;;740    		}
;;;741    	else 
;;;742    		{
;;;743    		snmp_bat_flag[1]&=~0x0400;
;;;744    		if(snmp_bat_flag_puts[1]&0x0400) 
;;;745    			{
;;;746    			snmp_trap_send("BAT #2,equalising charge is unblocked",5,8,41);
;;;747    			snmp_bat_flag_puts[1]&=~0x0400;
;;;748    			} 
;;;749    		}
;;;750    
;;;751    	if(vz2_stat!=vz2sOFF)								//Формовочный заряд 
;;;752    		{
;;;753    		snmp_bat_flag[1]|=0x0800;
;;;754    		if((snmp_bat_flag_puts[1]&0x0800)==0) 
;;;755    			{
;;;756    			snmp_trap_send("BAT #2,molding charge is on",5,8,42); 
;;;757    			snmp_bat_flag_puts[1]|=0x0800;
;;;758    			}
;;;759    		}
;;;760    	else 
;;;761    		{
;;;762    		snmp_bat_flag[1]&=~0x0800;
;;;763    		if(snmp_bat_flag_puts[1]&0x0800) 
;;;764    			{
;;;765    			snmp_trap_send("BAT #2,molding charge is off",5,8,43);
;;;766    			snmp_bat_flag_puts[1]&=~0x0800;
;;;767    			}
;;;768    		}
;;;769    
;;;770    	if(vz2_error) 										//Формовочный заряд заблокирован по вентиляции
;;;771    		{
;;;772    		snmp_bat_flag[1]|=0x1000;
;;;773    		if((snmp_bat_flag_puts[1]&0x1000)==0) 
;;;774    			{
;;;775    			snmp_trap_send("BAT #2,molding charge is blocked",5,8,44); 
;;;776    			snmp_bat_flag_puts[1]|=0x1000;
;;;777    			}
;;;778    		}
;;;779    	else 
;;;780    		{
;;;781    		snmp_bat_flag[1]&=~0x1000;
;;;782    		if(snmp_bat_flag_puts[1]&0x1000) 
;;;783    			{
;;;784    			snmp_trap_send("BAT #2,molding charge is unblocked",5,8,45);
;;;785    			snmp_bat_flag_puts[1]&=~0x1000;
;;;786    			} 
;;;787    		}
;;;788    	}
;;;789    else 
;;;790    	{
;;;791    	snmp_bat_flag[1]=0; 
00003e  f9b11000          LDRSH    r1,[r1,#0]  ; ica_your_current
;;;792    	snmp_bat_flag_puts[1]=0;
;;;793    	}
;;;794    /*
;;;795    if(!snmp_bat_status[1])
;;;796    	{
;;;797    	if((bat[1]._Ub<(USIGN*10))) 
;;;798    		{
;;;799    		snmp_bat_flag[1]|=0x01; 
;;;800    		if((snmp_bat_flag_puts[1]&0x01)==0) 
;;;801    			{
;;;802    			snmp_trap_send("BAT #2 Alarm, battery is low",5,8,0); 
;;;803    			snmp_bat_flag_puts[1]|=0x01;
;;;804    			}
;;;805    		}
;;;806    	else 
;;;807    		{
;;;808    		snmp_bat_flag[1]&=~0x01; 
;;;809    		if(snmp_bat_flag_puts[1]&0x01) 
;;;810    			{
;;;811    			snmp_trap_send("BAT #2 Alarm clear, battery is not low",5,8,1);
;;;812    			snmp_bat_flag_puts[1]&=~0x01;
;;;813    			}
;;;814    		}
;;;815    	if(bat[1]._temper_stat&0x01) 
;;;816    		{
;;;817    		snmp_bat_flag[1]|=0x02;
;;;818    		if((snmp_bat_flag_puts[1]&0x02)==0) 
;;;819    			{
;;;820    			snmp_trap_send("BAT #2 Alarm, high battery temperature",5,8,2); 
;;;821    			snmp_bat_flag_puts[1]|=0x02;
;;;822    			}
;;;823    		}
;;;824    	else 
;;;825    		{
;;;826    		snmp_bat_flag[1]&=~0x02;
;;;827    		if(snmp_bat_flag_puts[1]&0x02) 
;;;828    			{
;;;829    			snmp_trap_send("BAT #2 Alarm clear, battery temperature is normal",5,8,3);
;;;830    			snmp_bat_flag_puts[1]&=~0x02;
;;;831    			}
;;;832    		}
;;;833    	if(bat[1]._temper_stat&0x02) 
;;;834    		{
;;;835    		snmp_bat_flag[1]|=0x04;
;;;836    		if((snmp_bat_flag_puts[1]&0x04)==0) 
;;;837    			{
;;;838    			snmp_trap_send("BAT #2 Alarm, maximum battery temperature",5,8,4); 
;;;839    			snmp_bat_flag_puts[1]|=0x04;
;;;840    			}
;;;841    		}
;;;842    	else 
;;;843    		{
;;;844    		snmp_bat_flag[1]&=~0x04;
;;;845    		if(snmp_bat_flag_puts[1]&0x04) 
;;;846    			{
;;;847    			snmp_trap_send("BAT #2 Alarm clear, battery temperature is normal",5,8,5);
;;;848    			snmp_bat_flag_puts[1]&=~0x04;
;;;849    			}
;;;850    		}
;;;851    		
;;;852    	if(bat[1]._Ib<(-IKB))	snmp_bat_flag[1]|=0x80;
;;;853    	else if(bat[1]._Ib>IKB)snmp_bat_flag[1]&=~0x80;
;;;854    
;;;855    	if((spc_stat==spcKE)&&(spc_bat==1)) 
;;;856    		{
;;;857    		snmp_bat_flag[1]|=0x10;
;;;858    		if((snmp_bat_flag_puts[1]&0x10)==0) 
;;;859    			{
;;;860    			snmp_trap_send("BAT #2, capacity check enabled",5,8,6); 
;;;861    			snmp_bat_flag_puts[1]|=0x10;
;;;862    			}
;;;863    		}
;;;864    	else 
;;;865    		{
;;;866    		snmp_bat_flag[1]&=~0x10;
;;;867    		if(snmp_bat_flag_puts[1]&0x10) 
;;;868    			{
;;;869    			snmp_trap_send("BAT #2, capacity check disabled",5,8,7);
;;;870    			snmp_bat_flag_puts[1]&=~0x10;
;;;871    			}
;;;872    		}
;;;873    		
;;;874    	if(spc_stat==spcVZ) 
;;;875    		{
;;;876    		snmp_bat_flag[1]|=0x20;
;;;877    		if((snmp_bat_flag_puts[1]&0x20)==0) 
;;;878    			{
;;;879    			snmp_trap_send("BAT #2,equalizing charge is on",5,8,8); 
;;;880    			snmp_bat_flag_puts[1]|=0x20;
;;;881    			}
;;;882    		}
;;;883    	else 
;;;884    		{
;;;885    		snmp_bat_flag[1]&=~0x20;
;;;886    		if(snmp_bat_flag_puts[1]&0x20) 
;;;887    			{
;;;888    			snmp_trap_send("BAT #2,equalizing charge is off",5,8,9);
;;;889    			snmp_bat_flag_puts[1]&=~0x20;
;;;890    			}
;;;891    		}
;;;892    
;;;893    	if(vz_error) 
;;;894    		{
;;;895    		snmp_bat_flag[1]|=0x40;
;;;896    		if((snmp_bat_flag_puts[1]&0x40)==0) 
;;;897    			{
;;;898    			snmp_trap_send("BAT #2,equalizing charge blocked",5,8,10); 
;;;899    			snmp_bat_flag_puts[1]|=0x40;
;;;900    			}
;;;901    		}
;;;902    	else 
;;;903    		{
;;;904    		snmp_bat_flag[1]&=~0x40;
;;;905    		if(snmp_bat_flag_puts[1]&0x40) 
;;;906    			{
;;;907    			snmp_trap_send("BAT #2,equalizing charge is not blocked",5,8,11);
;;;908    			snmp_bat_flag_puts[1]&=~0x40;
;;;909    			} 
;;;910    		}
;;;911       }
;;;912    else 
;;;913    	{
;;;914    	snmp_bat_flag[1]=0; 
;;;915    	snmp_bat_flag_puts[1]=0;
;;;916    	} */
;;;917    }
000042  7852              LDRB     r2,[r2,#1]
000044  f9b83000          LDRSH    r3,[r8,#0]
000048  f9b77000          LDRSH    r7,[r7,#0]            ;319
00004c  4288              CMP      r0,r1                 ;319
00004e  dd06              BLE      |L4.94|
000050  eba00901          SUB      r9,r0,r1              ;319
000054  f1b90f0a          CMP      r9,#0xa               ;319
000058  db01              BLT      |L4.94|
00005a  2f01              CMP      r7,#1                 ;321
00005c  d007              BEQ      |L4.110|
                  |L4.94|
00005e  4288              CMP      r0,r1                 ;322
000060  da16              BGE      |L4.144|
000062  1a08              SUBS     r0,r1,r0              ;319
000064  280a              CMP      r0,#0xa               ;321
000066  db13              BLT      |L4.144|
000068  2f01              CMP      r7,#1                 ;321
00006a  d009              BEQ      |L4.128|
00006c  e010              B        |L4.144|
                  |L4.110|
00006e  f1020201          ADD      r2,r2,#1              ;324
000072  f88c2001          STRB     r2,[r12,#1]           ;324
000076  f1a30301          SUB      r3,r3,#1              ;324
00007a  f8a83000          STRH     r3,[r8,#0]            ;325
00007e  e007              B        |L4.144|
                  |L4.128|
000080  f1a20201          SUB      r2,r2,#1              ;325
000084  f88c2001          STRB     r2,[r12,#1]           ;330
000088  f1030301          ADD      r3,r3,#1              ;330
00008c  f8a83000          STRH     r3,[r8,#0]            ;331
                  |L4.144|
000090  2214              MOVS     r2,#0x14              ;333
000092  4251              RSBS     r1,r2,#0              ;333
000094  4846              LDR      r0,|L4.432|
000096  f7fffffe          BL       gran
                  |L4.154|
00009a  7820              LDRB     r0,[r4,#0]            ;334  ; ica_timer_cnt
00009c  f8df8114          LDR      r8,|L4.436|
0000a0  4f45              LDR      r7,|L4.440|
0000a2  2808              CMP      r0,#8                 ;338
0000a4  d125              BNE      |L4.242|
0000a6  8830              LDRH     r0,[r6,#0]            ;338  ; ICA_EN
0000a8  2801              CMP      r0,#1                 ;338
0000aa  d122              BNE      |L4.242|
0000ac  f8b80000          LDRH     r0,[r8,#0]            ;340  ; ICA_MODBUS_ADDRESS
0000b0  f88d0000          STRB     r0,[sp,#0]            ;340
0000b4  f04f0004          MOV      r0,#4                 ;341
0000b8  f88d0001          STRB     r0,[sp,#1]            ;343
0000bc  f88d5002          STRB     r5,[sp,#2]            ;343
0000c0  f04f0002          MOV      r0,#2                 ;343
0000c4  f88d0003          STRB     r0,[sp,#3]            ;344
0000c8  f88d5004          STRB     r5,[sp,#4]            ;344
0000cc  f04f0001          MOV      r0,#1                 ;344
0000d0  f88d0005          STRB     r0,[sp,#5]            ;349
0000d4  f04f0106          MOV      r1,#6                 ;349
0000d8  4668              MOV      r0,sp                 ;350
0000da  f7fffffe          BL       CRC16_2
0000de  f88d0006          STRB     r0,[sp,#6]            ;352
0000e2  ea4f2020          ASR      r0,r0,#8              ;352
0000e6  f88d0007          STRB     r0,[sp,#7]            ;352
0000ea  f9b70000          LDRSH    r0,[r7,#0]            ;353  ; ICA_CH
0000ee  b3e8              CBZ      r0,|L4.364|
0000f0  2801              CMP      r0,#1                 ;357
                  |L4.242|
0000f2  4832              LDR      r0,|L4.444|
0000f4  f06f0214          MVN      r2,#0x14              ;357
0000f8  f9b00000          LDRSH    r0,[r0,#0]            ;359  ; TBAT
0000fc  ebc01100          RSB      r1,r0,r0,LSL #4       ;359
000100  eb020181          ADD      r1,r2,r1,LSL #2       ;360
000104  4a2e              LDR      r2,|L4.448|
000106  f9b22052          LDRSH    r2,[r2,#0x52]         ;362  ; main_kb_cnt
00010a  4291              CMP      r1,r2                 ;362
00010c  d134              BNE      |L4.376|
00010e  8831              LDRH     r1,[r6,#0]            ;362  ; ICA_EN
000110  2901              CMP      r1,#1                 ;362
000112  d131              BNE      |L4.376|
000114  f8b81000          LDRH     r1,[r8,#0]            ;363  ; ICA_MODBUS_ADDRESS
000118  f88d1000          STRB     r1,[sp,#0]            ;363
00011c  f04f0106          MOV      r1,#6                 ;368
000120  f88d1001          STRB     r1,[sp,#1]            ;368
000124  f88d5002          STRB     r5,[sp,#2]            ;369
000128  f04f011e          MOV      r1,#0x1e              ;369
00012c  f88d1003          STRB     r1,[sp,#3]            ;371
000130  ea4f71e0          ASR      r1,r0,#31             ;371
000134  eb006111          ADD      r1,r0,r1,LSR #24      ;371
000138  ea4f2221          ASR      r2,r1,#8              ;372
00013c  f88d2004          STRB     r2,[sp,#4]            ;372
000140  f88d0005          STRB     r0,[sp,#5]            ;372
000144  f04f0106          MOV      r1,#6                 ;376
000148  4668              MOV      r0,sp                 ;376
00014a  f7fffffe          BL       CRC16_2
00014e  f88d0006          STRB     r0,[sp,#6]            ;376
000152  ea4f2020          ASR      r0,r0,#8              ;376
000156  f88d0007          STRB     r0,[sp,#7]            ;376
00015a  8838              LDRH     r0,[r7,#0]            ;377  ; ICA_CH
00015c  2800              CMP      r0,#0                 ;377
00015e  d10b              BNE      |L4.376|
000160  4604              MOV      r4,r0                 ;377
000162  466d              MOV      r5,sp                 ;377
                  |L4.356|
000164  5d28              LDRB     r0,[r5,r4]            ;377
000166  f7fffffe          BL       putchar_sc16is700
00016a  e000              B        |L4.366|
                  |L4.364|
00016c  e007              B        |L4.382|
                  |L4.366|
00016e  f1040401          ADD      r4,r4,#1              ;379
000172  b2e4              UXTB     r4,r4                 ;379
000174  2c08              CMP      r4,#8                 ;379
000176  d3f5              BCC      |L4.356|
                  |L4.376|
000178  b005              ADD      sp,sp,#0x14           ;390
00017a  e8bd83f0          POP      {r4-r9,pc}            ;390
                  |L4.382|
00017e  f04f0400          MOV      r4,#0                 ;391
000182  46e9              MOV      r9,sp                 ;391
                  |L4.388|
000184  f8190004          LDRB     r0,[r9,r4]            ;393
000188  f7fffffe          BL       putchar_sc16is700
00018c  f1040401          ADD      r4,r4,#1              ;393
000190  b2e4              UXTB     r4,r4                 ;394
000192  2c08              CMP      r4,#8                 ;394
000194  d3f6              BCC      |L4.388|
000196  e7ac              B        |L4.242|
;;;918    
                          ENDP

                  |L4.408|
                          DCD      ica_timer_cnt
                  |L4.412|
                          DCD      ICA_EN
                  |L4.416|
                          DCD      ica_plazma
                  |L4.420|
                          DCD      bps_I
                  |L4.424|
                          DCD      ica_my_current
                  |L4.428|
                          DCD      ica_your_current
                  |L4.432|
                          DCD      ica_u_necc
                  |L4.436|
                          DCD      ICA_MODBUS_ADDRESS
                  |L4.440|
                          DCD      ICA_CH
                  |L4.444|
                          DCD      TBAT
                  |L4.448|
                          DCD      ||area_number.25||

                          AREA ||area_number.5||, CODE, READONLY, ALIGN=2

                          EXPORTAS ||area_number.5||, ||.text||
                  inv_drv PROC
;;;306    // заполнение флагов для АКБ
;;;307    void bat_flag (void)
000000  b570              PUSH     {r4-r6,lr}
;;;308    {  
000002  4604              MOV      r4,r0
;;;309    if(spc_stat!=spcVZ) 
000004  f04f0207          MOV      r2,#7
000008  f04f0101          MOV      r1,#1
00000c  48a4              LDR      r0,|L5.672|
00000e  f7fffffe          BL       gran_char
;;;310    	{
;;;311    	vz_error=0;
;;;312    	sp_ch_error=0;
000012  48a4              LDR      r0,|L5.676|
;;;313    	vz1_error=0;
000014  eb040144          ADD      r1,r4,r4,LSL #1
;;;314    	vz2_error=0;
;;;315    	}
;;;316    
;;;317    if(!snmp_bat_status[0])	 			//Батарея №1
000018  eb001541          ADD      r5,r0,r1,LSL #5
;;;318    	{
;;;319    	if((bat[0]._Ub<(USIGN*10)))		//Снижение напряжения батареи ниже Uбсигн 
00001c  f8950047          LDRB     r0,[r5,#0x47]
000020  f8951046          LDRB     r1,[r5,#0x46]
000024  ea800001          EOR      r0,r0,r1              ;317
;;;320    		{
;;;321    		snmp_bat_flag[0]|=0x0001; 
;;;322    		if((snmp_bat_flag_puts[0]&0x0001)==0) 
;;;323    			{
;;;324    			snmp_trap_send("BAT #1 Alarm, battery is low",5,8,0); 
;;;325    			snmp_bat_flag_puts[0]|=0x0001;
;;;326    			}
;;;327    		}
;;;328    	else 
;;;329    		{
;;;330    		snmp_bat_flag[0]&=~0x0001; 
;;;331    		if(snmp_bat_flag_puts[0]&0x0001) 
;;;332    			{
;;;333    			snmp_trap_send("BAT #1 Alarm clear, battery is not low",5,8,1);
;;;334    			snmp_bat_flag_puts[0]&=~0x0001;
;;;335    			}
;;;336    		}
;;;337    
;;;338    	if(bat[0]._temper_stat&0x01)	//Повышенная температура батареи, первый порог - предупреждение
;;;339    		{
;;;340    		snmp_bat_flag[0]|=0x0002;
;;;341    		if((snmp_bat_flag_puts[0]&0x0002)==0) 
;;;342    			{
;;;343    			snmp_trap_send("BAT #1 Warning, high battery temperature",5,8,2); 
;;;344    			snmp_bat_flag_puts[0]|=0x0002;
;;;345    			}
;;;346    		}
;;;347    	else 
;;;348    		{
;;;349    		snmp_bat_flag[0]&=~0x0002;
;;;350    		if(snmp_bat_flag_puts[0]&0x0002) 
;;;351    			{
;;;352    			snmp_trap_send("BAT #1 Warning clear, battery temperature is normal",5,8,3);
;;;353    			snmp_bat_flag_puts[0]&=~0x02;
;;;354    			}
;;;355    		}
;;;356    
;;;357    	if(bat[0]._temper_stat&0x02)  	//Повышенная температура батареи, второй порог - авария
;;;358    		{
;;;359    		snmp_bat_flag[0]|=0x0004;
;;;360    		if((snmp_bat_flag_puts[0]&0x0004)==0) 
;;;361    			{
;;;362    			snmp_trap_send("BAT #1 Alarm, high battery temperature",5,8,4); 
;;;363    			snmp_bat_flag_puts[0]|=0x0004;
;;;364    			}
;;;365    		}
;;;366    	else 
;;;367    		{
;;;368    		snmp_bat_flag[0]&=~0x0004;
;;;369    		if(snmp_bat_flag_puts[0]&0x0004) 
;;;370    			{
;;;371    			snmp_trap_send("BAT #1 Alarm clear, battery temperature is normal",5,8,5);
;;;372    			snmp_bat_flag_puts[0]&=~0x0004;
;;;373    			}
;;;374    		}
;;;375    
;;;376    	if(bat[0]._Ib<(-IKB)) snmp_bat_flag[0]|=0x0008;		//Разряд батареи
000028  4a9f              LDR      r2,|L5.680|
00002a  b100              CBZ      r0,|L5.46|
00002c  7050              STRB     r0,[r2,#1]            ;321
                  |L5.46|
00002e  ea010100          AND      r1,r1,r0              ;322
;;;377    	else if(bat[0]._Ib>IKB) snmp_bat_flag[0]&=~0x0008;	//Заряд батареи
;;;378    
;;;379    	if((spc_stat==spcKE)&&(spc_bat==0))					//Контроль емкости батареи №1 
;;;380    		{
;;;381    		snmp_bat_flag[0]|=0x0010;
;;;382    		if((snmp_bat_flag_puts[0]&0x0010)==0) 
;;;383    			{
;;;384    			snmp_trap_send("BAT #1, capacity test started",5,8,6); 
;;;385    			snmp_bat_flag_puts[0]|=0x0010;
;;;386    			}
;;;387    		}
;;;388    	else 
;;;389    		{
;;;390    		snmp_bat_flag[0]&=~0x0010;
;;;391    		if(snmp_bat_flag_puts[0]&0x0010) 
;;;392    			{
;;;393    			snmp_trap_send("BAT #1, capacity test stopped",5,8,7);
;;;394    			snmp_bat_flag_puts[0]&=~0x0010;
;;;395    			}
;;;396    		}
;;;397    		
;;;398    	if(spc_stat==spcVZ)									//Выравнивающий заряд 
;;;399    		{
;;;400    		snmp_bat_flag[0]|=0x0020;
;;;401    		if((snmp_bat_flag_puts[0]&0x0020)==0) 
;;;402    			{
;;;403    			snmp_trap_send("BAT #1,leveling charge is started",5,8,8); 
;;;404    			snmp_bat_flag_puts[0]|=0x0020;
;;;405    			}
;;;406    		}
;;;407    	else 
;;;408    		{
;;;409    		snmp_bat_flag[0]&=~0x0020;
;;;410    		if(snmp_bat_flag_puts[0]&0x0020) 
;;;411    			{
;;;412    			snmp_trap_send("BAT #1,leveling charge is stopped",5,8,9);
;;;413    			snmp_bat_flag_puts[0]&=~0x0020;
;;;414    			}
;;;415    		}
;;;416    
;;;417    	if(vz_error)										 //Выравнивающий заряд заблокирован по вентиляции
;;;418    		{
;;;419    		snmp_bat_flag[0]|=0x0040;
;;;420    		if((snmp_bat_flag_puts[0]&0x0040)==0) 
;;;421    			{
;;;422    			snmp_trap_send("BAT #1,leveling charge is blocked",5,8,10); 
;;;423    			snmp_bat_flag_puts[0]|=0x0040;
;;;424    			}
;;;425    		}
;;;426    	else 
;;;427    		{
;;;428    		snmp_bat_flag[0]&=~0x0040;
;;;429    		if(snmp_bat_flag_puts[0]&0x0040) 
;;;430    			{
;;;431    			snmp_trap_send("BAT #1,leveling charge is unblocked",5,8,11);
;;;432    			snmp_bat_flag_puts[0]&=~0x0040;
;;;433    			} 
;;;434    		}
;;;435    
;;;436    	if(sp_ch_stat==scsWRK) 								//Ускореннный заряд
;;;437    		{
;;;438    		snmp_bat_flag[0]|=0x0080;
;;;439    		if((snmp_bat_flag_puts[0]&0x0080)==0) 
;;;440    			{
;;;441    			snmp_trap_send("BAT #1,speed charge is started",5,8,10); 
;;;442    			snmp_bat_flag_puts[0]|=0x0080;
;;;443    			}
;;;444    		}
;;;445    	else 
;;;446    		{
;;;447    		snmp_bat_flag[0]&=~0x0080;
;;;448    		if(snmp_bat_flag_puts[0]&0x0080) 
;;;449    			{
;;;450    			snmp_trap_send("BAT #1,speed charge is stopped",5,8,11);
;;;451    			snmp_bat_flag_puts[0]&=~0x0080;
;;;452    			}
;;;453    		}
;;;454    
;;;455    	if(sp_ch_error) 									//Ускореннный заряд заблокирован по вентиляции
;;;456    		{
;;;457    		snmp_bat_flag[0]|=0x0100;
;;;458    		if((snmp_bat_flag_puts[0]&0x0100)==0) 
;;;459    			{
;;;460    			snmp_trap_send("BAT #1,speed charge is blocked",5,8,12); 
;;;461    			snmp_bat_flag_puts[0]|=0x0100;
;;;462    			}
;;;463    		}
;;;464    	else 
;;;465    		{
;;;466    		snmp_bat_flag[0]&=~0x0100;
;;;467    		if(snmp_bat_flag_puts[0]&0x0100) 
;;;468    			{
;;;469    			snmp_trap_send("BAT #1,speed charge is unblocked",5,8,13);
;;;470    			snmp_bat_flag_puts[0]&=~0x0100;
;;;471    			} 
;;;472    		}
;;;473    
;;;474    	if(vz1_stat!=vz1sOFF)								//Уравнительный заряд 
;;;475    		{
;;;476    		snmp_bat_flag[0]|=0x0200;
;;;477    		if((snmp_bat_flag_puts[0]&0x0200)==0) 
;;;478    			{
;;;479    			snmp_trap_send("BAT #1,equalising charge is on",5,8,14); 
;;;480    			snmp_bat_flag_puts[0]|=0x0200;
;;;481    			}
;;;482    		}
;;;483    	else 
;;;484    		{
;;;485    		snmp_bat_flag[0]&=~0x0200;
;;;486    		if(snmp_bat_flag_puts[0]&0x0200) 
;;;487    			{
;;;488    			snmp_trap_send("BAT #1,equalising charge is off",5,8,15);
;;;489    			snmp_bat_flag_puts[0]&=~0x0200;
;;;490    			}
;;;491    		}
;;;492    
;;;493    	if(vz1_error)										//Уравнительный заряд заблокирован по вентиляции 
;;;494    		{
;;;495    		snmp_bat_flag[0]|=0x0400;
;;;496    		if((snmp_bat_flag_puts[0]&0x0400)==0) 
;;;497    			{
;;;498    			snmp_trap_send("BAT #1,equalising charge is blocked",5,8,16); 
;;;499    			snmp_bat_flag_puts[0]|=0x0400;
;;;500    			}
;;;501    		}
;;;502    	else 
;;;503    		{
;;;504    		snmp_bat_flag[0]&=~0x0400;
;;;505    		if(snmp_bat_flag_puts[0]&0x0400) 
;;;506    			{
;;;507    			snmp_trap_send("BAT #1,equalising charge is unblocked",5,8,17);
;;;508    			snmp_bat_flag_puts[0]&=~0x0400;
;;;509    			} 
;;;510    		}
;;;511    
;;;512    	if(vz2_stat!=vz2sOFF)								//Формовочный заряд 
;;;513    		{
;;;514    		snmp_bat_flag[0]|=0x0800;
;;;515    		if((snmp_bat_flag_puts[0]&0x0800)==0) 
;;;516    			{
;;;517    			snmp_trap_send("BAT #1,molding charge is on",5,8,18); 
;;;518    			snmp_bat_flag_puts[0]|=0x0800;
;;;519    			}
;;;520    		}
;;;521    	else 
;;;522    		{
;;;523    		snmp_bat_flag[0]&=~0x0800;
;;;524    		if(snmp_bat_flag_puts[0]&0x0800) 
;;;525    			{
;;;526    			snmp_trap_send("BAT #1,molding charge is off",5,8,19);
;;;527    			snmp_bat_flag_puts[0]&=~0x0800;
;;;528    			}
;;;529    		}
;;;530    
;;;531    	if(vz2_error) 										//Формовочный заряд заблокирован по вентиляции
;;;532    		{
;;;533    		snmp_bat_flag[0]|=0x1000;
;;;534    		if((snmp_bat_flag_puts[0]&0x1000)==0) 
;;;535    			{
;;;536    			snmp_trap_send("BAT #1,molding charge is blocked",5,8,20); 
;;;537    			snmp_bat_flag_puts[0]|=0x1000;
;;;538    			}
;;;539    		}
;;;540    	else 
;;;541    		{
;;;542    		snmp_bat_flag[0]&=~0x1000;
;;;543    		if(snmp_bat_flag_puts[0]&0x1000) 
;;;544    			{
;;;545    			snmp_trap_send("BAT #1,molding charge is unblocked",5,8,21);
;;;546    			snmp_bat_flag_puts[0]&=~0x1000;
;;;547    			} 
;;;548    		}
;;;549    	}
;;;550    else 
;;;551    	{
;;;552    	snmp_bat_flag[0]=0; 
000032  b101              CBZ      r1,|L5.54|
;;;553    	snmp_bat_flag_puts[0]=0;
000034  7091              STRB     r1,[r2,#2]
                  |L5.54|
;;;554    	}
;;;555    
;;;556    if(!snmp_bat_status[1])	 			//Батарея №2
000036  ea000301          AND      r3,r0,r1
00003a  07db              LSLS     r3,r3,#31
00003c  d027              BEQ      |L5.142|
;;;557    	{
;;;558    	if((bat[1]._Ub<(USIGN*10)))		//Снижение напряжения батареи ниже Uбсигн 
;;;559    		{
;;;560    		snmp_bat_flag[1]|=0x0001; 
;;;561    		if((snmp_bat_flag_puts[1]&0x0001)==0) 
;;;562    			{
;;;563    			snmp_trap_send("BAT #2 Alarm, battery is low",5,8,22); 
;;;564    			snmp_bat_flag_puts[1]|=0x0001;
;;;565    			}
;;;566    		}
;;;567    	else 
;;;568    		{
;;;569    		snmp_bat_flag[1]&=~0x0001; 
;;;570    		if(snmp_bat_flag_puts[1]&0x0001) 
;;;571    			{
;;;572    			snmp_trap_send("BAT #2 Alarm clear, battery is not low",5,8,23);
;;;573    			snmp_bat_flag_puts[1]&=~0x0001;
;;;574    			}
;;;575    		}
;;;576    
;;;577    	if(bat[1]._temper_stat&0x01)	//Повышенная температура батареи, первый порог - предупреждение
;;;578    		{
;;;579    		snmp_bat_flag[1]|=0x0002;
;;;580    		if((snmp_bat_flag_puts[0]&0x0002)==0) 
;;;581    			{
;;;582    			snmp_trap_send("BAT #2 Warning, high battery temperature",5,8,24); 
;;;583    			snmp_bat_flag_puts[1]|=0x0002;
;;;584    			}
;;;585    		}
;;;586    	else 
;;;587    		{
;;;588    		snmp_bat_flag[1]&=~0x0002;
;;;589    		if(snmp_bat_flag_puts[1]&0x0002) 
;;;590    			{
;;;591    			snmp_trap_send("BAT #2 Warning clear, battery temperature is normal",5,8,25);
;;;592    			snmp_bat_flag_puts[1]&=~0x02;
;;;593    			}
;;;594    		}
;;;595    
;;;596    	if(bat[1]._temper_stat&0x02)  	//Повышенная температура батареи, второй порог - авария
;;;597    		{
;;;598    		snmp_bat_flag[1]|=0x0004;
;;;599    		if((snmp_bat_flag_puts[1]&0x0004)==0) 
;;;600    			{
;;;601    			snmp_trap_send("BAT #2 Alarm, high battery temperature",5,8,26); 
;;;602    			snmp_bat_flag_puts[1]|=0x0004;
;;;603    			}
;;;604    		}
;;;605    	else 
;;;606    		{
;;;607    		snmp_bat_flag[1]&=~0x0004;
;;;608    		if(snmp_bat_flag_puts[1]&0x0004) 
;;;609    			{
;;;610    			snmp_trap_send("BAT #2 Alarm clear, battery temperature is normal",5,8,27);
;;;611    			snmp_bat_flag_puts[1]&=~0x0004;
;;;612    			}
;;;613    		}
;;;614    
;;;615    	if(bat[1]._Ib<(-IKB)) snmp_bat_flag[1]|=0x0008;		//Разряд батареи
;;;616    	else if(bat[1]._Ib>IKB) snmp_bat_flag[1]&=~0x0008;	//Заряд батареи
;;;617    
;;;618    	if((spc_stat==spcKE)&&(spc_bat==0))					//Контроль емкости батареи №1 
;;;619    		{
;;;620    		snmp_bat_flag[1]|=0x0010;
;;;621    		if((snmp_bat_flag_puts[1]&0x0010)==0) 
;;;622    			{
;;;623    			snmp_trap_send("BAT #2, capacity test started",5,8,28); 
;;;624    			snmp_bat_flag_puts[1]|=0x0010;
;;;625    			}
;;;626    		}
;;;627    	else 
;;;628    		{
;;;629    		snmp_bat_flag[1]&=~0x0010;
;;;630    		if(snmp_bat_flag_puts[1]&0x0010) 
;;;631    			{
;;;632    			snmp_trap_send("BAT #2, capacity test stopped",5,8,29);
;;;633    			snmp_bat_flag_puts[1]&=~0x0010;
;;;634    			}
;;;635    		}
;;;636    		
;;;637    	if(spc_stat==spcVZ)									//Выравнивающий заряд 
;;;638    		{
;;;639    		snmp_bat_flag[1]|=0x0020;
;;;640    		if((snmp_bat_flag_puts[1]&0x0020)==0) 
;;;641    			{
;;;642    			snmp_trap_send("BAT #2,leveling charge is started",5,8,30); 
;;;643    			snmp_bat_flag_puts[1]|=0x0020;
;;;644    			}
;;;645    		}
;;;646    	else 
;;;647    		{
;;;648    		snmp_bat_flag[1]&=~0x0020;
;;;649    		if(snmp_bat_flag_puts[1]&0x0020) 
;;;650    			{
;;;651    			snmp_trap_send("BAT #2,leveling charge is stopped",5,8,31);
;;;652    			snmp_bat_flag_puts[1]&=~0x0020;
;;;653    			}
;;;654    		}
;;;655    
;;;656    	if(vz_error)										 //Выравнивающий заряд заблокирован по вентиляции
;;;657    		{
;;;658    		snmp_bat_flag[1]|=0x0040;
;;;659    		if((snmp_bat_flag_puts[1]&0x0040)==0) 
;;;660    			{
;;;661    			snmp_trap_send("BAT #2,leveling charge is blocked",5,8,32); 
;;;662    			snmp_bat_flag_puts[1]|=0x0040;
;;;663    			}
;;;664    		}
;;;665    	else 
;;;666    		{
;;;667    		snmp_bat_flag[1]&=~0x0040;
;;;668    		if(snmp_bat_flag_puts[1]&0x0040) 
;;;669    			{
;;;670    			snmp_trap_send("BAT #2,leveling charge is unblocked",5,8,33);
;;;671    			snmp_bat_flag_puts[1]&=~0x0040;
;;;672    			} 
;;;673    		}
;;;674    
;;;675    	if(sp_ch_stat==scsWRK) 								//Ускореннный заряд
;;;676    		{
;;;677    		snmp_bat_flag[1]|=0x0080;
;;;678    		if((snmp_bat_flag_puts[1]&0x0080)==0) 
;;;679    			{
;;;680    			snmp_trap_send("BAT #2,speed charge is started",5,8,34); 
;;;681    			snmp_bat_flag_puts[1]|=0x0080;
;;;682    			}
;;;683    		}
;;;684    	else 
;;;685    		{
;;;686    		snmp_bat_flag[1]&=~0x0080;
;;;687    		if(snmp_bat_flag_puts[1]&0x0080) 
;;;688    			{
;;;689    			snmp_trap_send("BAT #2,speed charge is stopped",5,8,35);
;;;690    			snmp_bat_flag_puts[1]&=~0x0080;
;;;691    			}
;;;692    		}
;;;693    
;;;694    	if(sp_ch_error) 									//Ускореннный заряд заблокирован по вентиляции
;;;695    		{
;;;696    		snmp_bat_flag[1]|=0x0100;
;;;697    		if((snmp_bat_flag_puts[1]&0x0100)==0) 
;;;698    			{
;;;699    			snmp_trap_send("BAT #2,speed charge is blocked",5,8,36); 
;;;700    			snmp_bat_flag_puts[1]|=0x0100;
;;;701    			}
;;;702    		}
;;;703    	else 
;;;704    		{
;;;705    		snmp_bat_flag[1]&=~0x0100;
;;;706    		if(snmp_bat_flag_puts[1]&0x0100) 
;;;707    			{
;;;708    			snmp_trap_send("BAT #2,speed charge is unblocked",5,8,37);
;;;709    			snmp_bat_flag_puts[1]&=~0x0100;
;;;710    			} 
;;;711    		}
;;;712    
;;;713    	if(vz1_stat!=vz1sOFF)								//Уравнительный заряд 
;;;714    		{
;;;715    		snmp_bat_flag[1]|=0x0200;
;;;716    		if((snmp_bat_flag_puts[1]&0x0200)==0) 
;;;717    			{
;;;718    			snmp_trap_send("BAT #2,equalising charge is on",5,8,38); 
;;;719    			snmp_bat_flag_puts[1]|=0x0200;
;;;720    			}
;;;721    		}
;;;722    	else 
;;;723    		{
;;;724    		snmp_bat_flag[1]&=~0x0200;
;;;725    		if(snmp_bat_flag_puts[1]&0x0200) 
;;;726    			{
;;;727    			snmp_trap_send("BAT #2,equalising charge is off",5,8,39);
;;;728    			snmp_bat_flag_puts[1]&=~0x0200;
;;;729    			}
;;;730    		}
;;;731    
;;;732    	if(vz1_error)										//Уравнительный заряд заблокирован по вентиляции 
;;;733    		{
;;;734    		snmp_bat_flag[1]|=0x0400;
;;;735    		if((snmp_bat_flag_puts[1]&0x0400)==0) 
;;;736    			{
;;;737    			snmp_trap_send("BAT #2,equalising charge is blocked",5,8,40); 
;;;738    			snmp_bat_flag_puts[1]|=0x0400;
;;;739    			}
;;;740    		}
;;;741    	else 
;;;742    		{
;;;743    		snmp_bat_flag[1]&=~0x0400;
;;;744    		if(snmp_bat_flag_puts[1]&0x0400) 
;;;745    			{
;;;746    			snmp_trap_send("BAT #2,equalising charge is unblocked",5,8,41);
;;;747    			snmp_bat_flag_puts[1]&=~0x0400;
;;;748    			} 
;;;749    		}
;;;750    
;;;751    	if(vz2_stat!=vz2sOFF)								//Формовочный заряд 
;;;752    		{
;;;753    		snmp_bat_flag[1]|=0x0800;
;;;754    		if((snmp_bat_flag_puts[1]&0x0800)==0) 
;;;755    			{
;;;756    			snmp_trap_send("BAT #2,molding charge is on",5,8,42); 
;;;757    			snmp_bat_flag_puts[1]|=0x0800;
;;;758    			}
;;;759    		}
;;;760    	else 
;;;761    		{
;;;762    		snmp_bat_flag[1]&=~0x0800;
;;;763    		if(snmp_bat_flag_puts[1]&0x0800) 
;;;764    			{
;;;765    			snmp_trap_send("BAT #2,molding charge is off",5,8,43);
;;;766    			snmp_bat_flag_puts[1]&=~0x0800;
;;;767    			}
;;;768    		}
;;;769    
;;;770    	if(vz2_error) 										//Формовочный заряд заблокирован по вентиляции
;;;771    		{
;;;772    		snmp_bat_flag[1]|=0x1000;
;;;773    		if((snmp_bat_flag_puts[1]&0x1000)==0) 
;;;774    			{
;;;775    			snmp_trap_send("BAT #2,molding charge is blocked",5,8,44); 
;;;776    			snmp_bat_flag_puts[1]|=0x1000;
;;;777    			}
;;;778    		}
;;;779    	else 
;;;780    		{
;;;781    		snmp_bat_flag[1]&=~0x1000;
;;;782    		if(snmp_bat_flag_puts[1]&0x1000) 
;;;783    			{
;;;784    			snmp_trap_send("BAT #2,molding charge is unblocked",5,8,45);
;;;785    			snmp_bat_flag_puts[1]&=~0x1000;
;;;786    			} 
;;;787    		}
;;;788    	}
;;;789    else 
;;;790    	{
;;;791    	snmp_bat_flag[1]=0; 
00003e  78d0              LDRB     r0,[r2,#3]  ; plazma_inv
;;;792    	snmp_bat_flag_puts[1]=0;
000040  f1000001          ADD      r0,r0,#1
;;;793    	}
;;;794    /*
;;;795    if(!snmp_bat_status[1])
;;;796    	{
;;;797    	if((bat[1]._Ub<(USIGN*10))) 
;;;798    		{
;;;799    		snmp_bat_flag[1]|=0x01; 
;;;800    		if((snmp_bat_flag_puts[1]&0x01)==0) 
;;;801    			{
;;;802    			snmp_trap_send("BAT #2 Alarm, battery is low",5,8,0); 
;;;803    			snmp_bat_flag_puts[1]|=0x01;
;;;804    			}
;;;805    		}
;;;806    	else 
;;;807    		{
;;;808    		snmp_bat_flag[1]&=~0x01; 
;;;809    		if(snmp_bat_flag_puts[1]&0x01) 
;;;810    			{
;;;811    			snmp_trap_send("BAT #2 Alarm clear, battery is not low",5,8,1);
;;;812    			snmp_bat_flag_puts[1]&=~0x01;
;;;813    			}
;;;814    		}
;;;815    	if(bat[1]._temper_stat&0x01) 
;;;816    		{
;;;817    		snmp_bat_flag[1]|=0x02;
;;;818    		if((snmp_bat_flag_puts[1]&0x02)==0) 
;;;819    			{
;;;820    			snmp_trap_send("BAT #2 Alarm, high battery temperature",5,8,2); 
;;;821    			snmp_bat_flag_puts[1]|=0x02;
;;;822    			}
;;;823    		}
;;;824    	else 
;;;825    		{
;;;826    		snmp_bat_flag[1]&=~0x02;
;;;827    		if(snmp_bat_flag_puts[1]&0x02) 
;;;828    			{
;;;829    			snmp_trap_send("BAT #2 Alarm clear, battery temperature is normal",5,8,3);
;;;830    			snmp_bat_flag_puts[1]&=~0x02;
;;;831    			}
;;;832    		}
;;;833    	if(bat[1]._temper_stat&0x02) 
;;;834    		{
;;;835    		snmp_bat_flag[1]|=0x04;
;;;836    		if((snmp_bat_flag_puts[1]&0x04)==0) 
;;;837    			{
;;;838    			snmp_trap_send("BAT #2 Alarm, maximum battery temperature",5,8,4); 
;;;839    			snmp_bat_flag_puts[1]|=0x04;
;;;840    			}
;;;841    		}
;;;842    	else 
;;;843    		{
;;;844    		snmp_bat_flag[1]&=~0x04;
;;;845    		if(snmp_bat_flag_puts[1]&0x04) 
;;;846    			{
;;;847    			snmp_trap_send("BAT #2 Alarm clear, battery temperature is normal",5,8,5);
;;;848    			snmp_bat_flag_puts[1]&=~0x04;
;;;849    			}
;;;850    		}
;;;851    		
;;;852    	if(bat[1]._Ib<(-IKB))	snmp_bat_flag[1]|=0x80;
;;;853    	else if(bat[1]._Ib>IKB)snmp_bat_flag[1]&=~0x80;
;;;854    
;;;855    	if((spc_stat==spcKE)&&(spc_bat==1)) 
;;;856    		{
;;;857    		snmp_bat_flag[1]|=0x10;
;;;858    		if((snmp_bat_flag_puts[1]&0x10)==0) 
;;;859    			{
;;;860    			snmp_trap_send("BAT #2, capacity check enabled",5,8,6); 
;;;861    			snmp_bat_flag_puts[1]|=0x10;
;;;862    			}
;;;863    		}
;;;864    	else 
;;;865    		{
;;;866    		snmp_bat_flag[1]&=~0x10;
;;;867    		if(snmp_bat_flag_puts[1]&0x10) 
;;;868    			{
;;;869    			snmp_trap_send("BAT #2, capacity check disabled",5,8,7);
;;;870    			snmp_bat_flag_puts[1]&=~0x10;
;;;871    			}
;;;872    		}
;;;873    		
;;;874    	if(spc_stat==spcVZ) 
;;;875    		{
;;;876    		snmp_bat_flag[1]|=0x20;
;;;877    		if((snmp_bat_flag_puts[1]&0x20)==0) 
;;;878    			{
;;;879    			snmp_trap_send("BAT #2,equalizing charge is on",5,8,8); 
;;;880    			snmp_bat_flag_puts[1]|=0x20;
;;;881    			}
;;;882    		}
;;;883    	else 
;;;884    		{
;;;885    		snmp_bat_flag[1]&=~0x20;
;;;886    		if(snmp_bat_flag_puts[1]&0x20) 
;;;887    			{
;;;888    			snmp_trap_send("BAT #2,equalizing charge is off",5,8,9);
;;;889    			snmp_bat_flag_puts[1]&=~0x20;
;;;890    			}
;;;891    		}
;;;892    
;;;893    	if(vz_error) 
;;;894    		{
;;;895    		snmp_bat_flag[1]|=0x40;
;;;896    		if((snmp_bat_flag_puts[1]&0x40)==0) 
;;;897    			{
;;;898    			snmp_trap_send("BAT #2,equalizing charge blocked",5,8,10); 
;;;899    			snmp_bat_flag_puts[1]|=0x40;
;;;900    			}
;;;901    		}
;;;902    	else 
;;;903    		{
;;;904    		snmp_bat_flag[1]&=~0x40;
;;;905    		if(snmp_bat_flag_puts[1]&0x40) 
;;;906    			{
;;;907    			snmp_trap_send("BAT #2,equalizing charge is not blocked",5,8,11);
;;;908    			snmp_bat_flag_puts[1]&=~0x40;
;;;909    			} 
;;;910    		}
;;;911       }
;;;912    else 
;;;913    	{
;;;914    	snmp_bat_flag[1]=0; 
;;;915    	snmp_bat_flag_puts[1]=0;
;;;916    	} */
;;;917    }
000044  70d0              STRB     r0,[r2,#3]
000046  b134              CBZ      r4,|L5.86|
000048  2c01              CMP      r4,#1                 ;319
00004a  d00b              BEQ      |L5.100|
00004c  2c02              CMP      r4,#2                 ;319
00004e  d010              BEQ      |L5.114|
000050  2c03              CMP      r4,#3                 ;319
000052  d015              BEQ      |L5.128|
000054  e120              B        |L5.664|
                  |L5.86|
000056  2301              MOVS     r3,#1                 ;319
000058  461a              MOV      r2,r3                 ;321
00005a  210e              MOVS     r1,#0xe               ;321
00005c  a093              ADR      r0,|L5.684|
00005e  f7fffffe          BL       snmp_trap_send
000062  e119              B        |L5.664|
                  |L5.100|
000064  2301              MOVS     r3,#1                 ;321
000066  2202              MOVS     r2,#2                 ;321
000068  210e              MOVS     r1,#0xe               ;321
00006a  a097              ADR      r0,|L5.712|
00006c  f7fffffe          BL       snmp_trap_send
000070  e112              B        |L5.664|
                  |L5.114|
000072  2301              MOVS     r3,#1                 ;324
000074  2203              MOVS     r2,#3                 ;324
000076  210e              MOVS     r1,#0xe               ;324
000078  a09a              ADR      r0,|L5.740|
00007a  f7fffffe          BL       snmp_trap_send
00007e  e10b              B        |L5.664|
                  |L5.128|
000080  2301              MOVS     r3,#1                 ;325
000082  2204              MOVS     r2,#4                 ;325
000084  210e              MOVS     r1,#0xe               ;330
000086  a09e              ADR      r0,|L5.768|
000088  f7fffffe          BL       snmp_trap_send
00008c  e104              B        |L5.664|
                  |L5.142|
00008e  0783              LSLS     r3,r0,#30             ;333
000090  d529              BPL      |L5.230|
000092  078b              LSLS     r3,r1,#30             ;333
000094  d527              BPL      |L5.230|
000096  78d0              LDRB     r0,[r2,#3]            ;333  ; plazma_inv
000098  f1000001          ADD      r0,r0,#1              ;333
00009c  70d0              STRB     r0,[r2,#3]            ;334
00009e  b134              CBZ      r4,|L5.174|
0000a0  2c01              CMP      r4,#1                 ;334
0000a2  d00b              BEQ      |L5.188|
0000a4  2c02              CMP      r4,#2                 ;338
0000a6  d010              BEQ      |L5.202|
0000a8  2c03              CMP      r4,#3                 ;338
0000aa  d015              BEQ      |L5.216|
0000ac  e0f4              B        |L5.664|
                  |L5.174|
0000ae  2302              MOVS     r3,#2                 ;340
0000b0  2201              MOVS     r2,#1                 ;340
0000b2  210e              MOVS     r1,#0xe               ;341
0000b4  a099              ADR      r0,|L5.796|
0000b6  f7fffffe          BL       snmp_trap_send
0000ba  e0ed              B        |L5.664|
                  |L5.188|
0000bc  2302              MOVS     r3,#2                 ;343
0000be  461a              MOV      r2,r3                 ;343
0000c0  210e              MOVS     r1,#0xe               ;343
0000c2  a09d              ADR      r0,|L5.824|
0000c4  f7fffffe          BL       snmp_trap_send
0000c8  e0e6              B        |L5.664|
                  |L5.202|
0000ca  2302              MOVS     r3,#2                 ;344
0000cc  2203              MOVS     r2,#3                 ;344
0000ce  210e              MOVS     r1,#0xe               ;349
0000d0  a0a0              ADR      r0,|L5.852|
0000d2  f7fffffe          BL       snmp_trap_send
0000d6  e0df              B        |L5.664|
                  |L5.216|
0000d8  2302              MOVS     r3,#2                 ;350
0000da  2204              MOVS     r2,#4                 ;350
0000dc  210e              MOVS     r1,#0xe               ;352
0000de  a0a4              ADR      r0,|L5.880|
0000e0  f7fffffe          BL       snmp_trap_send
0000e4  e0d8              B        |L5.664|
                  |L5.230|
0000e6  0743              LSLS     r3,r0,#29             ;352
0000e8  d529              BPL      |L5.318|
0000ea  074b              LSLS     r3,r1,#29             ;353
0000ec  d527              BPL      |L5.318|
0000ee  78d0              LDRB     r0,[r2,#3]            ;353  ; plazma_inv
0000f0  f1000001          ADD      r0,r0,#1              ;357
0000f4  70d0              STRB     r0,[r2,#3]            ;357
0000f6  b134              CBZ      r4,|L5.262|
0000f8  2c01              CMP      r4,#1                 ;359
0000fa  d00b              BEQ      |L5.276|
0000fc  2c02              CMP      r4,#2                 ;359
0000fe  d010              BEQ      |L5.290|
000100  2c03              CMP      r4,#3                 ;360
000102  d015              BEQ      |L5.304|
000104  e0c8              B        |L5.664|
                  |L5.262|
000106  2303              MOVS     r3,#3                 ;362
000108  2201              MOVS     r2,#1                 ;362
00010a  210e              MOVS     r1,#0xe               ;362
00010c  a09f              ADR      r0,|L5.908|
00010e  f7fffffe          BL       snmp_trap_send
000112  e0c1              B        |L5.664|
                  |L5.276|
000114  2303              MOVS     r3,#3                 ;363
000116  2202              MOVS     r2,#2                 ;363
000118  210e              MOVS     r1,#0xe               ;363
00011a  a0a3              ADR      r0,|L5.936|
00011c  f7fffffe          BL       snmp_trap_send
000120  e0ba              B        |L5.664|
                  |L5.290|
000122  2303              MOVS     r3,#3                 ;368
000124  461a              MOV      r2,r3                 ;369
000126  210e              MOVS     r1,#0xe               ;369
000128  a0a6              ADR      r0,|L5.964|
00012a  f7fffffe          BL       snmp_trap_send
00012e  e0b3              B        |L5.664|
                  |L5.304|
000130  2303              MOVS     r3,#3                 ;371
000132  2204              MOVS     r2,#4                 ;371
000134  210e              MOVS     r1,#0xe               ;371
000136  a0aa              ADR      r0,|L5.992|
000138  f7fffffe          BL       snmp_trap_send
00013c  e0ac              B        |L5.664|
                  |L5.318|
00013e  0703              LSLS     r3,r0,#28             ;372
000140  d529              BPL      |L5.406|
000142  070b              LSLS     r3,r1,#28             ;376
000144  d527              BPL      |L5.406|
000146  78d0              LDRB     r0,[r2,#3]            ;376  ; plazma_inv
000148  f1000001          ADD      r0,r0,#1              ;376
00014c  70d0              STRB     r0,[r2,#3]            ;376
00014e  b134              CBZ      r4,|L5.350|
000150  2c01              CMP      r4,#1                 ;376
000152  d00b              BEQ      |L5.364|
000154  2c02              CMP      r4,#2                 ;376
000156  d010              BEQ      |L5.378|
000158  2c03              CMP      r4,#3                 ;376
00015a  d015              BEQ      |L5.392|
00015c  e09c              B        |L5.664|
                  |L5.350|
00015e  2304              MOVS     r3,#4                 ;377
000160  2201              MOVS     r2,#1                 ;377
000162  210e              MOVS     r1,#0xe               ;377
000164  a0a5              ADR      r0,|L5.1020|
000166  f7fffffe          BL       snmp_trap_send
00016a  e095              B        |L5.664|
                  |L5.364|
00016c  2304              MOVS     r3,#4                 ;379
00016e  2202              MOVS     r2,#2                 ;379
000170  210e              MOVS     r1,#0xe               ;379
000172  a0ab              ADR      r0,|L5.1056|
000174  f7fffffe          BL       snmp_trap_send
000178  e08e              B        |L5.664|
                  |L5.378|
00017a  2304              MOVS     r3,#4                 ;390
00017c  2203              MOVS     r2,#3                 ;390
00017e  210e              MOVS     r1,#0xe               ;391
000180  a0b0              ADR      r0,|L5.1092|
000182  f7fffffe          BL       snmp_trap_send
000186  e087              B        |L5.664|
                  |L5.392|
000188  2304              MOVS     r3,#4                 ;393
00018a  461a              MOV      r2,r3                 ;393
00018c  210e              MOVS     r1,#0xe               ;393
00018e  a0b6              ADR      r0,|L5.1128|
000190  f7fffffe          BL       snmp_trap_send
000194  e080              B        |L5.664|
                  |L5.406|
000196  06c3              LSLS     r3,r0,#27             ;394
000198  d529              BPL      |L5.494|
00019a  06cb              LSLS     r3,r1,#27             ;398
00019c  d527              BPL      |L5.494|
00019e  78d0              LDRB     r0,[r2,#3]            ;398  ; plazma_inv
0001a0  f1000001          ADD      r0,r0,#1              ;409
0001a4  70d0              STRB     r0,[r2,#3]            ;409
0001a6  b134              CBZ      r4,|L5.438|
0001a8  2c01              CMP      r4,#1                 ;410
0001aa  d00b              BEQ      |L5.452|
0001ac  2c02              CMP      r4,#2                 ;410
0001ae  d010              BEQ      |L5.466|
0001b0  2c03              CMP      r4,#3                 ;412
0001b2  d015              BEQ      |L5.480|
0001b4  e070              B        |L5.664|
                  |L5.438|
0001b6  2305              MOVS     r3,#5                 ;412
0001b8  2201              MOVS     r2,#1                 ;412
0001ba  210e              MOVS     r1,#0xe               ;413
0001bc  a0b3              ADR      r0,|L5.1164|
0001be  f7fffffe          BL       snmp_trap_send
0001c2  e069              B        |L5.664|
                  |L5.452|
0001c4  2305              MOVS     r3,#5                 ;417
0001c6  2202              MOVS     r2,#2                 ;417
0001c8  210e              MOVS     r1,#0xe               ;419
0001ca  a0b9              ADR      r0,|L5.1200|
0001cc  f7fffffe          BL       snmp_trap_send
0001d0  e062              B        |L5.664|
                  |L5.466|
0001d2  2305              MOVS     r3,#5                 ;420
0001d4  2203              MOVS     r2,#3                 ;420
0001d6  210e              MOVS     r1,#0xe               ;422
0001d8  a0be              ADR      r0,|L5.1236|
0001da  f7fffffe          BL       snmp_trap_send
0001de  e05b              B        |L5.664|
                  |L5.480|
0001e0  2305              MOVS     r3,#5                 ;422
0001e2  2204              MOVS     r2,#4                 ;423
0001e4  210e              MOVS     r1,#0xe               ;423
0001e6  a0c4              ADR      r0,|L5.1272|
0001e8  f7fffffe          BL       snmp_trap_send
0001ec  e054              B        |L5.664|
                  |L5.494|
0001ee  0683              LSLS     r3,r0,#26             ;381
0001f0  d529              BPL      |L5.582|
0001f2  068b              LSLS     r3,r1,#26             ;381
0001f4  d527              BPL      |L5.582|
0001f6  78d0              LDRB     r0,[r2,#3]            ;382  ; plazma_inv
0001f8  f1000001          ADD      r0,r0,#1              ;382
0001fc  70d0              STRB     r0,[r2,#3]            ;384
0001fe  b134              CBZ      r4,|L5.526|
000200  2c01              CMP      r4,#1                 ;384
000202  d00b              BEQ      |L5.540|
000204  2c02              CMP      r4,#2                 ;384
000206  d010              BEQ      |L5.554|
000208  2c03              CMP      r4,#3                 ;385
00020a  d015              BEQ      |L5.568|
00020c  e044              B        |L5.664|
                  |L5.526|
00020e  2306              MOVS     r3,#6                 ;385
000210  2201              MOVS     r2,#1                 ;400
000212  210e              MOVS     r1,#0xe               ;400
000214  a0c1              ADR      r0,|L5.1308|
000216  f7fffffe          BL       snmp_trap_send
00021a  e03d              B        |L5.664|
                  |L5.540|
00021c  2306              MOVS     r3,#6                 ;401
00021e  2202              MOVS     r2,#2                 ;403
000220  210e              MOVS     r1,#0xe               ;403
000222  a0c7              ADR      r0,|L5.1344|
000224  f7fffffe          BL       snmp_trap_send
000228  e036              B        |L5.664|
                  |L5.554|
00022a  2306              MOVS     r3,#6                 ;404
00022c  2203              MOVS     r2,#3                 ;404
00022e  210e              MOVS     r1,#0xe               ;404
000230  a0cc              ADR      r0,|L5.1380|
000232  f7fffffe          BL       snmp_trap_send
000236  e02f              B        |L5.664|
                  |L5.568|
000238  2306              MOVS     r3,#6                 ;428
00023a  2204              MOVS     r2,#4                 ;428
00023c  210e              MOVS     r1,#0xe               ;429
00023e  a0d2              ADR      r0,|L5.1416|
000240  f7fffffe          BL       snmp_trap_send
000244  e028              B        |L5.664|
                  |L5.582|
000246  b300              CBZ      r0,|L5.650|
000248  b9f9              CBNZ     r1,|L5.650|
00024a  78d0              LDRB     r0,[r2,#3]            ;431  ; plazma_inv
00024c  f1000001          ADD      r0,r0,#1              ;431
000250  70d0              STRB     r0,[r2,#3]            ;432
000252  b134              CBZ      r4,|L5.610|
000254  2c01              CMP      r4,#1                 ;432
000256  d00b              BEQ      |L5.624|
000258  2c02              CMP      r4,#2                 ;436
00025a  d010              BEQ      |L5.638|
00025c  2c03              CMP      r4,#3                 ;436
00025e  d015              BEQ      |L5.652|
000260  e01a              B        |L5.664|
                  |L5.610|
000262  2300              MOVS     r3,#0                 ;447
000264  2201              MOVS     r2,#1                 ;447
000266  210e              MOVS     r1,#0xe               ;448
000268  a0d0              ADR      r0,|L5.1452|
00026a  f7fffffe          BL       snmp_trap_send
00026e  e013              B        |L5.664|
                  |L5.624|
000270  2300              MOVS     r3,#0                 ;450
000272  2202              MOVS     r2,#2                 ;450
000274  210e              MOVS     r1,#0xe               ;450
000276  a0d2              ADR      r0,|L5.1472|
000278  f7fffffe          BL       snmp_trap_send
00027c  e00c              B        |L5.664|
                  |L5.638|
00027e  2300              MOVS     r3,#0                 ;451
000280  2203              MOVS     r2,#3                 ;455
000282  210e              MOVS     r1,#0xe               ;455
000284  a0d3              ADR      r0,|L5.1492|
000286  f7fffffe          BL       snmp_trap_send
                  |L5.650|
00028a  e005              B        |L5.664|
                  |L5.652|
00028c  2300              MOVS     r3,#0                 ;458
00028e  2204              MOVS     r2,#4                 ;458
000290  210e              MOVS     r1,#0xe               ;458
000292  a0d5              ADR      r0,|L5.1512|
000294  f7fffffe          BL       snmp_trap_send
                  |L5.664|
000298  f8150f46          LDRB     r0,[r5,#0x46]!        ;460
00029c  7068              STRB     r0,[r5,#1]            ;460
00029e  bd70              POP      {r4-r6,pc}            ;461
;;;918    
                          ENDP

                  |L5.672|
                          DCD      first_inv_slot
                  |L5.676|
                          DCD      inv
                  |L5.680|
                          DCD      ||area_number.25||+0xb8
                  |L5.684|
0002ac  496e7665          DCB      "Invertor #1 Alarm, overload",0
0002b0  72746f72
0002b4  20233120
0002b8  416c6172
0002bc  6d2c206f
0002c0  7665726c
0002c4  6f616400
                  |L5.712|
0002c8  496e7665          DCB      "Invertor #2 Alarm, overload",0
0002cc  72746f72
0002d0  20233220
0002d4  416c6172
0002d8  6d2c206f
0002dc  7665726c
0002e0  6f616400
                  |L5.740|
0002e4  496e7665          DCB      "Invertor #3 Alarm, overload",0
0002e8  72746f72
0002ec  20233320
0002f0  416c6172
0002f4  6d2c206f
0002f8  7665726c
0002fc  6f616400
                  |L5.768|
000300  496e7665          DCB      "Invertor #4 Alarm, overload",0
000304  72746f72
000308  20233420
00030c  416c6172
000310  6d2c206f
000314  7665726c
000318  6f616400
                  |L5.796|
00031c  496e7665          DCB      "Invertor #1 Alarm, overheat",0
000320  72746f72
000324  20233120
000328  416c6172
00032c  6d2c206f
000330  76657268
000334  65617400
                  |L5.824|
000338  496e7665          DCB      "Invertor #2 Alarm, overheat",0
00033c  72746f72
000340  20233220
000344  416c6172
000348  6d2c206f
00034c  76657268
000350  65617400
                  |L5.852|
000354  496e7665          DCB      "Invertor #3 Alarm, overheat",0
000358  72746f72
00035c  20233320
000360  416c6172
000364  6d2c206f
000368  76657268
00036c  65617400
                  |L5.880|
000370  496e7665          DCB      "Invertor #4 Alarm, overheat",0
000374  72746f72
000378  20233420
00037c  416c6172
000380  6d2c206f
000384  76657268
000388  65617400
                  |L5.908|
00038c  496e7665          DCB      "Invertor #1 Alarm, is warm",0
000390  72746f72
000394  20233120
000398  416c6172
00039c  6d2c2069
0003a0  73207761
0003a4  726d00  
0003a7  00                DCB      0
                  |L5.936|
0003a8  496e7665          DCB      "Invertor #2 Alarm, is warm",0
0003ac  72746f72
0003b0  20233220
0003b4  416c6172
0003b8  6d2c2069
0003bc  73207761
0003c0  726d00  
0003c3  00                DCB      0
                  |L5.964|
0003c4  496e7665          DCB      "Invertor #3 Alarm, is warm",0
0003c8  72746f72
0003cc  20233320
0003d0  416c6172
0003d4  6d2c2069
0003d8  73207761
0003dc  726d00  
0003df  00                DCB      0
                  |L5.992|
0003e0  496e7665          DCB      "Invertor #4 Alarm, is warm",0
0003e4  72746f72
0003e8  20233420
0003ec  416c6172
0003f0  6d2c2069
0003f4  73207761
0003f8  726d00  
0003fb  00                DCB      0
                  |L5.1020|
0003fc  496e7665          DCB      "Invertor #1 Alarm, voltage is up",0
000400  72746f72
000404  20233120
000408  416c6172
00040c  6d2c2076
000410  6f6c7461
000414  67652069
000418  73207570
00041c  00      
00041d  00                DCB      0
00041e  00                DCB      0
00041f  00                DCB      0
                  |L5.1056|
000420  496e7665          DCB      "Invertor #2 Alarm, voltage is up",0
000424  72746f72
000428  20233220
00042c  416c6172
000430  6d2c2076
000434  6f6c7461
000438  67652069
00043c  73207570
000440  00      
000441  00                DCB      0
000442  00                DCB      0
000443  00                DCB      0
                  |L5.1092|
000444  496e7665          DCB      "Invertor #3 Alarm, voltage is up",0
000448  72746f72
00044c  20233320
000450  416c6172
000454  6d2c2076
000458  6f6c7461
00045c  67652069
000460  73207570
000464  00      
000465  00                DCB      0
000466  00                DCB      0
000467  00                DCB      0
                  |L5.1128|
000468  496e7665          DCB      "Invertor #4 Alarm, voltage is up",0
00046c  72746f72
000470  20233420
000474  416c6172
000478  6d2c2076
00047c  6f6c7461
000480  67652069
000484  73207570
000488  00      
000489  00                DCB      0
00048a  00                DCB      0
00048b  00                DCB      0
                  |L5.1164|
00048c  496e7665          DCB      "Invertor #1 Alarm, voltage is down",0
000490  72746f72
000494  20233120
000498  416c6172
00049c  6d2c2076
0004a0  6f6c7461
0004a4  67652069
0004a8  7320646f
0004ac  776e00  
0004af  00                DCB      0
                  |L5.1200|
0004b0  496e7665          DCB      "Invertor #2 Alarm, voltage is down",0
0004b4  72746f72
0004b8  20233220
0004bc  416c6172
0004c0  6d2c2076
0004c4  6f6c7461
0004c8  67652069
0004cc  7320646f
0004d0  776e00  
0004d3  00                DCB      0
                  |L5.1236|
0004d4  496e7665          DCB      "Invertor #3 Alarm, voltage is down",0
0004d8  72746f72
0004dc  20233320
0004e0  416c6172
0004e4  6d2c2076
0004e8  6f6c7461
0004ec  67652069
0004f0  7320646f
0004f4  776e00  
0004f7  00                DCB      0
                  |L5.1272|
0004f8  496e7665          DCB      "Invertor #4 Alarm, voltage is down",0
0004fc  72746f72
000500  20233420
000504  416c6172
000508  6d2c2076
00050c  6f6c7461
000510  67652069
000514  7320646f
000518  776e00  
00051b  00                DCB      0
                  |L5.1308|
00051c  496e7665          DCB      "Invertor #1 Alarm, output is offed",0
000520  72746f72
000524  20233120
000528  416c6172
00052c  6d2c206f
000530  75747075
000534  74206973
000538  206f6666
00053c  656400  
00053f  00                DCB      0
                  |L5.1344|
000540  496e7665          DCB      "Invertor #2 Alarm, output is offed",0
000544  72746f72
000548  20233220
00054c  416c6172
000550  6d2c206f
000554  75747075
000558  74206973
00055c  206f6666
000560  656400  
000563  00                DCB      0
                  |L5.1380|
000564  496e7665          DCB      "Invertor #3 Alarm, output is offed",0
000568  72746f72
00056c  20233320
000570  416c6172
000574  6d2c206f
000578  75747075
00057c  74206973
000580  206f6666
000584  656400  
000587  00                DCB      0
                  |L5.1416|
000588  496e7665          DCB      "Invertor #4 Alarm, output is offed",0
00058c  72746f72
000590  20233420
000594  416c6172
000598  6d2c206f
00059c  75747075
0005a0  74206973
0005a4  206f6666
0005a8  656400  
0005ab  00                DCB      0
                  |L5.1452|
0005ac  496e7665          DCB      "Invertor #1 is norm",0
0005b0  72746f72
0005b4  20233120
0005b8  6973206e
0005bc  6f726d00
                  |L5.1472|
0005c0  496e7665          DCB      "Invertor #2 is norm",0
0005c4  72746f72
0005c8  20233220
0005cc  6973206e
0005d0  6f726d00
                  |L5.1492|
0005d4  496e7665          DCB      "Invertor #3 is norm",0
0005d8  72746f72
0005dc  20233320
0005e0  6973206e
0005e4  6f726d00
                  |L5.1512|
0005e8  496e7665          DCB      "Invertor #4 is norm",0
0005ec  72746f72
0005f0  20233420
0005f4  6973206e
0005f8  6f726d00

                          AREA ||area_number.6||, CODE, READONLY, ALIGN=2

                          EXPORTAS ||area_number.6||, ||.text||
                  klimat_hndl PROC
;;;306    // заполнение флагов для АКБ
;;;307    void bat_flag (void)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;308    {  
;;;309    if(spc_stat!=spcVZ) 
000004  4d66              LDR      r5,|L6.416|
;;;310    	{
;;;311    	vz_error=0;
000006  4867              LDR      r0,|L6.420|
000008  4c67              LDR      r4,|L6.424|
00000a  f9b51000          LDRSH    r1,[r5,#0]            ;309  ; t_box
00000e  f9b02000          LDRSH    r2,[r0,#0]            ;309  ; TBOXMAX
;;;312    	sp_ch_error=0;
000012  f9b40000          LDRSH    r0,[r4,#0]
;;;313    	vz1_error=0;
;;;314    	vz2_error=0;
000016  4291              CMP      r1,r2
;;;315    	}
;;;316    
;;;317    if(!snmp_bat_status[0])	 			//Батарея №1
000018  dd03              BLE      |L6.34|
00001a  f1000001          ADD      r0,r0,#1
;;;318    	{
;;;319    	if((bat[0]._Ub<(USIGN*10)))		//Снижение напряжения батареи ниже Uбсигн 
00001e  8020              STRH     r0,[r4,#0]
000020  e003              B        |L6.42|
                  |L6.34|
000022  da02              BGE      |L6.42|
000024  f1a00001          SUB      r0,r0,#1              ;317
;;;320    		{
;;;321    		snmp_bat_flag[0]|=0x0001; 
;;;322    		if((snmp_bat_flag_puts[0]&0x0001)==0) 
;;;323    			{
;;;324    			snmp_trap_send("BAT #1 Alarm, battery is low",5,8,0); 
;;;325    			snmp_bat_flag_puts[0]|=0x0001;
;;;326    			}
;;;327    		}
;;;328    	else 
;;;329    		{
;;;330    		snmp_bat_flag[0]&=~0x0001; 
;;;331    		if(snmp_bat_flag_puts[0]&0x0001) 
;;;332    			{
;;;333    			snmp_trap_send("BAT #1 Alarm clear, battery is not low",5,8,1);
;;;334    			snmp_bat_flag_puts[0]&=~0x0001;
;;;335    			}
;;;336    		}
;;;337    
;;;338    	if(bat[0]._temper_stat&0x01)	//Повышенная температура батареи, первый порог - предупреждение
;;;339    		{
;;;340    		snmp_bat_flag[0]|=0x0002;
;;;341    		if((snmp_bat_flag_puts[0]&0x0002)==0) 
;;;342    			{
;;;343    			snmp_trap_send("BAT #1 Warning, high battery temperature",5,8,2); 
;;;344    			snmp_bat_flag_puts[0]|=0x0002;
;;;345    			}
;;;346    		}
;;;347    	else 
;;;348    		{
;;;349    		snmp_bat_flag[0]&=~0x0002;
;;;350    		if(snmp_bat_flag_puts[0]&0x0002) 
;;;351    			{
;;;352    			snmp_trap_send("BAT #1 Warning clear, battery temperature is normal",5,8,3);
;;;353    			snmp_bat_flag_puts[0]&=~0x02;
;;;354    			}
;;;355    		}
;;;356    
;;;357    	if(bat[0]._temper_stat&0x02)  	//Повышенная температура батареи, второй порог - авария
;;;358    		{
;;;359    		snmp_bat_flag[0]|=0x0004;
;;;360    		if((snmp_bat_flag_puts[0]&0x0004)==0) 
;;;361    			{
;;;362    			snmp_trap_send("BAT #1 Alarm, high battery temperature",5,8,4); 
;;;363    			snmp_bat_flag_puts[0]|=0x0004;
;;;364    			}
;;;365    		}
;;;366    	else 
;;;367    		{
;;;368    		snmp_bat_flag[0]&=~0x0004;
;;;369    		if(snmp_bat_flag_puts[0]&0x0004) 
;;;370    			{
;;;371    			snmp_trap_send("BAT #1 Alarm clear, battery temperature is normal",5,8,5);
;;;372    			snmp_bat_flag_puts[0]&=~0x0004;
;;;373    			}
;;;374    		}
;;;375    
;;;376    	if(bat[0]._Ib<(-IKB)) snmp_bat_flag[0]|=0x0008;		//Разряд батареи
000028  8020              STRH     r0,[r4,#0]
                  |L6.42|
00002a  2206              MOVS     r2,#6
00002c  2100              MOVS     r1,#0                 ;321
00002e  485e              LDR      r0,|L6.424|
000030  f7fffffe          BL       gran
;;;377    	else if(bat[0]._Ib>IKB) snmp_bat_flag[0]&=~0x0008;	//Заряд батареи
;;;378    
;;;379    	if((spc_stat==spcKE)&&(spc_bat==0))					//Контроль емкости батареи №1 
;;;380    		{
;;;381    		snmp_bat_flag[0]|=0x0010;
;;;382    		if((snmp_bat_flag_puts[0]&0x0010)==0) 
;;;383    			{
;;;384    			snmp_trap_send("BAT #1, capacity test started",5,8,6); 
;;;385    			snmp_bat_flag_puts[0]|=0x0010;
;;;386    			}
;;;387    		}
;;;388    	else 
;;;389    		{
;;;390    		snmp_bat_flag[0]&=~0x0010;
;;;391    		if(snmp_bat_flag_puts[0]&0x0010) 
;;;392    			{
;;;393    			snmp_trap_send("BAT #1, capacity test stopped",5,8,7);
;;;394    			snmp_bat_flag_puts[0]&=~0x0010;
;;;395    			}
;;;396    		}
;;;397    		
;;;398    	if(spc_stat==spcVZ)									//Выравнивающий заряд 
;;;399    		{
;;;400    		snmp_bat_flag[0]|=0x0020;
;;;401    		if((snmp_bat_flag_puts[0]&0x0020)==0) 
;;;402    			{
;;;403    			snmp_trap_send("BAT #1,leveling charge is started",5,8,8); 
;;;404    			snmp_bat_flag_puts[0]|=0x0020;
;;;405    			}
;;;406    		}
;;;407    	else 
;;;408    		{
;;;409    		snmp_bat_flag[0]&=~0x0020;
;;;410    		if(snmp_bat_flag_puts[0]&0x0020) 
;;;411    			{
;;;412    			snmp_trap_send("BAT #1,leveling charge is stopped",5,8,9);
;;;413    			snmp_bat_flag_puts[0]&=~0x0020;
;;;414    			}
;;;415    		}
;;;416    
;;;417    	if(vz_error)										 //Выравнивающий заряд заблокирован по вентиляции
;;;418    		{
;;;419    		snmp_bat_flag[0]|=0x0040;
;;;420    		if((snmp_bat_flag_puts[0]&0x0040)==0) 
;;;421    			{
;;;422    			snmp_trap_send("BAT #1,leveling charge is blocked",5,8,10); 
;;;423    			snmp_bat_flag_puts[0]|=0x0040;
;;;424    			}
;;;425    		}
;;;426    	else 
;;;427    		{
;;;428    		snmp_bat_flag[0]&=~0x0040;
;;;429    		if(snmp_bat_flag_puts[0]&0x0040) 
;;;430    			{
;;;431    			snmp_trap_send("BAT #1,leveling charge is unblocked",5,8,11);
;;;432    			snmp_bat_flag_puts[0]&=~0x0040;
;;;433    			} 
;;;434    		}
;;;435    
;;;436    	if(sp_ch_stat==scsWRK) 								//Ускореннный заряд
;;;437    		{
;;;438    		snmp_bat_flag[0]|=0x0080;
;;;439    		if((snmp_bat_flag_puts[0]&0x0080)==0) 
;;;440    			{
;;;441    			snmp_trap_send("BAT #1,speed charge is started",5,8,10); 
;;;442    			snmp_bat_flag_puts[0]|=0x0080;
;;;443    			}
;;;444    		}
;;;445    	else 
;;;446    		{
;;;447    		snmp_bat_flag[0]&=~0x0080;
;;;448    		if(snmp_bat_flag_puts[0]&0x0080) 
;;;449    			{
;;;450    			snmp_trap_send("BAT #1,speed charge is stopped",5,8,11);
;;;451    			snmp_bat_flag_puts[0]&=~0x0080;
;;;452    			}
;;;453    		}
;;;454    
;;;455    	if(sp_ch_error) 									//Ускореннный заряд заблокирован по вентиляции
;;;456    		{
;;;457    		snmp_bat_flag[0]|=0x0100;
;;;458    		if((snmp_bat_flag_puts[0]&0x0100)==0) 
;;;459    			{
;;;460    			snmp_trap_send("BAT #1,speed charge is blocked",5,8,12); 
;;;461    			snmp_bat_flag_puts[0]|=0x0100;
;;;462    			}
;;;463    		}
;;;464    	else 
;;;465    		{
;;;466    		snmp_bat_flag[0]&=~0x0100;
;;;467    		if(snmp_bat_flag_puts[0]&0x0100) 
;;;468    			{
;;;469    			snmp_trap_send("BAT #1,speed charge is unblocked",5,8,13);
;;;470    			snmp_bat_flag_puts[0]&=~0x0100;
;;;471    			} 
;;;472    		}
;;;473    
;;;474    	if(vz1_stat!=vz1sOFF)								//Уравнительный заряд 
;;;475    		{
;;;476    		snmp_bat_flag[0]|=0x0200;
;;;477    		if((snmp_bat_flag_puts[0]&0x0200)==0) 
;;;478    			{
;;;479    			snmp_trap_send("BAT #1,equalising charge is on",5,8,14); 
;;;480    			snmp_bat_flag_puts[0]|=0x0200;
;;;481    			}
;;;482    		}
;;;483    	else 
;;;484    		{
;;;485    		snmp_bat_flag[0]&=~0x0200;
;;;486    		if(snmp_bat_flag_puts[0]&0x0200) 
;;;487    			{
;;;488    			snmp_trap_send("BAT #1,equalising charge is off",5,8,15);
;;;489    			snmp_bat_flag_puts[0]&=~0x0200;
;;;490    			}
;;;491    		}
;;;492    
;;;493    	if(vz1_error)										//Уравнительный заряд заблокирован по вентиляции 
;;;494    		{
;;;495    		snmp_bat_flag[0]|=0x0400;
;;;496    		if((snmp_bat_flag_puts[0]&0x0400)==0) 
;;;497    			{
;;;498    			snmp_trap_send("BAT #1,equalising charge is blocked",5,8,16); 
;;;499    			snmp_bat_flag_puts[0]|=0x0400;
;;;500    			}
;;;501    		}
;;;502    	else 
;;;503    		{
;;;504    		snmp_bat_flag[0]&=~0x0400;
;;;505    		if(snmp_bat_flag_puts[0]&0x0400) 
;;;506    			{
;;;507    			snmp_trap_send("BAT #1,equalising charge is unblocked",5,8,17);
;;;508    			snmp_bat_flag_puts[0]&=~0x0400;
;;;509    			} 
;;;510    		}
;;;511    
;;;512    	if(vz2_stat!=vz2sOFF)								//Формовочный заряд 
;;;513    		{
;;;514    		snmp_bat_flag[0]|=0x0800;
;;;515    		if((snmp_bat_flag_puts[0]&0x0800)==0) 
;;;516    			{
;;;517    			snmp_trap_send("BAT #1,molding charge is on",5,8,18); 
;;;518    			snmp_bat_flag_puts[0]|=0x0800;
;;;519    			}
;;;520    		}
;;;521    	else 
;;;522    		{
;;;523    		snmp_bat_flag[0]&=~0x0800;
;;;524    		if(snmp_bat_flag_puts[0]&0x0800) 
;;;525    			{
;;;526    			snmp_trap_send("BAT #1,molding charge is off",5,8,19);
;;;527    			snmp_bat_flag_puts[0]&=~0x0800;
;;;528    			}
;;;529    		}
;;;530    
;;;531    	if(vz2_error) 										//Формовочный заряд заблокирован по вентиляции
;;;532    		{
;;;533    		snmp_bat_flag[0]|=0x1000;
;;;534    		if((snmp_bat_flag_puts[0]&0x1000)==0) 
;;;535    			{
;;;536    			snmp_trap_send("BAT #1,molding charge is blocked",5,8,20); 
;;;537    			snmp_bat_flag_puts[0]|=0x1000;
;;;538    			}
;;;539    		}
;;;540    	else 
;;;541    		{
;;;542    		snmp_bat_flag[0]&=~0x1000;
;;;543    		if(snmp_bat_flag_puts[0]&0x1000) 
;;;544    			{
;;;545    			snmp_trap_send("BAT #1,molding charge is unblocked",5,8,21);
;;;546    			snmp_bat_flag_puts[0]&=~0x1000;
;;;547    			} 
;;;548    		}
;;;549    	}
;;;550    else 
;;;551    	{
;;;552    	snmp_bat_flag[0]=0; 
;;;553    	snmp_bat_flag_puts[0]=0;
000034  f9b40000          LDRSH    r0,[r4,#0]  ; av_tbox_cnt
;;;554    	}
;;;555    
;;;556    if(!snmp_bat_status[1])	 			//Батарея №2
000038  495c              LDR      r1,|L6.428|
00003a  2601              MOVS     r6,#1
00003c  2805              CMP      r0,#5
;;;557    	{
;;;558    	if((bat[1]._Ub<(USIGN*10)))		//Снижение напряжения батареи ниже Uбсигн 
;;;559    		{
;;;560    		snmp_bat_flag[1]|=0x0001; 
;;;561    		if((snmp_bat_flag_puts[1]&0x0001)==0) 
;;;562    			{
;;;563    			snmp_trap_send("BAT #2 Alarm, battery is low",5,8,22); 
;;;564    			snmp_bat_flag_puts[1]|=0x0001;
;;;565    			}
;;;566    		}
;;;567    	else 
;;;568    		{
;;;569    		snmp_bat_flag[1]&=~0x0001; 
;;;570    		if(snmp_bat_flag_puts[1]&0x0001) 
;;;571    			{
;;;572    			snmp_trap_send("BAT #2 Alarm clear, battery is not low",5,8,23);
;;;573    			snmp_bat_flag_puts[1]&=~0x0001;
;;;574    			}
;;;575    		}
;;;576    
;;;577    	if(bat[1]._temper_stat&0x01)	//Повышенная температура батареи, первый порог - предупреждение
;;;578    		{
;;;579    		snmp_bat_flag[1]|=0x0002;
;;;580    		if((snmp_bat_flag_puts[0]&0x0002)==0) 
;;;581    			{
;;;582    			snmp_trap_send("BAT #2 Warning, high battery temperature",5,8,24); 
;;;583    			snmp_bat_flag_puts[1]|=0x0002;
;;;584    			}
;;;585    		}
;;;586    	else 
;;;587    		{
;;;588    		snmp_bat_flag[1]&=~0x0002;
;;;589    		if(snmp_bat_flag_puts[1]&0x0002) 
;;;590    			{
;;;591    			snmp_trap_send("BAT #2 Warning clear, battery temperature is normal",5,8,25);
;;;592    			snmp_bat_flag_puts[1]&=~0x02;
;;;593    			}
;;;594    		}
;;;595    
;;;596    	if(bat[1]._temper_stat&0x02)  	//Повышенная температура батареи, второй порог - авария
;;;597    		{
;;;598    		snmp_bat_flag[1]|=0x0004;
;;;599    		if((snmp_bat_flag_puts[1]&0x0004)==0) 
;;;600    			{
;;;601    			snmp_trap_send("BAT #2 Alarm, high battery temperature",5,8,26); 
;;;602    			snmp_bat_flag_puts[1]|=0x0004;
;;;603    			}
;;;604    		}
;;;605    	else 
;;;606    		{
;;;607    		snmp_bat_flag[1]&=~0x0004;
;;;608    		if(snmp_bat_flag_puts[1]&0x0004) 
;;;609    			{
;;;610    			snmp_trap_send("BAT #2 Alarm clear, battery temperature is normal",5,8,27);
;;;611    			snmp_bat_flag_puts[1]&=~0x0004;
;;;612    			}
;;;613    		}
;;;614    
;;;615    	if(bat[1]._Ib<(-IKB)) snmp_bat_flag[1]|=0x0008;		//Разряд батареи
;;;616    	else if(bat[1]._Ib>IKB) snmp_bat_flag[1]&=~0x0008;	//Заряд батареи
;;;617    
;;;618    	if((spc_stat==spcKE)&&(spc_bat==0))					//Контроль емкости батареи №1 
;;;619    		{
;;;620    		snmp_bat_flag[1]|=0x0010;
;;;621    		if((snmp_bat_flag_puts[1]&0x0010)==0) 
;;;622    			{
;;;623    			snmp_trap_send("BAT #2, capacity test started",5,8,28); 
;;;624    			snmp_bat_flag_puts[1]|=0x0010;
;;;625    			}
;;;626    		}
;;;627    	else 
;;;628    		{
;;;629    		snmp_bat_flag[1]&=~0x0010;
;;;630    		if(snmp_bat_flag_puts[1]&0x0010) 
;;;631    			{
;;;632    			snmp_trap_send("BAT #2, capacity test stopped",5,8,29);
;;;633    			snmp_bat_flag_puts[1]&=~0x0010;
;;;634    			}
;;;635    		}
;;;636    		
;;;637    	if(spc_stat==spcVZ)									//Выравнивающий заряд 
;;;638    		{
;;;639    		snmp_bat_flag[1]|=0x0020;
;;;640    		if((snmp_bat_flag_puts[1]&0x0020)==0) 
;;;641    			{
;;;642    			snmp_trap_send("BAT #2,leveling charge is started",5,8,30); 
;;;643    			snmp_bat_flag_puts[1]|=0x0020;
;;;644    			}
;;;645    		}
;;;646    	else 
;;;647    		{
;;;648    		snmp_bat_flag[1]&=~0x0020;
;;;649    		if(snmp_bat_flag_puts[1]&0x0020) 
;;;650    			{
;;;651    			snmp_trap_send("BAT #2,leveling charge is stopped",5,8,31);
;;;652    			snmp_bat_flag_puts[1]&=~0x0020;
;;;653    			}
;;;654    		}
;;;655    
;;;656    	if(vz_error)										 //Выравнивающий заряд заблокирован по вентиляции
;;;657    		{
;;;658    		snmp_bat_flag[1]|=0x0040;
;;;659    		if((snmp_bat_flag_puts[1]&0x0040)==0) 
;;;660    			{
;;;661    			snmp_trap_send("BAT #2,leveling charge is blocked",5,8,32); 
;;;662    			snmp_bat_flag_puts[1]|=0x0040;
;;;663    			}
;;;664    		}
;;;665    	else 
;;;666    		{
;;;667    		snmp_bat_flag[1]&=~0x0040;
;;;668    		if(snmp_bat_flag_puts[1]&0x0040) 
;;;669    			{
;;;670    			snmp_trap_send("BAT #2,leveling charge is unblocked",5,8,33);
;;;671    			snmp_bat_flag_puts[1]&=~0x0040;
;;;672    			} 
;;;673    		}
;;;674    
;;;675    	if(sp_ch_stat==scsWRK) 								//Ускореннный заряд
;;;676    		{
;;;677    		snmp_bat_flag[1]|=0x0080;
;;;678    		if((snmp_bat_flag_puts[1]&0x0080)==0) 
;;;679    			{
;;;680    			snmp_trap_send("BAT #2,speed charge is started",5,8,34); 
;;;681    			snmp_bat_flag_puts[1]|=0x0080;
;;;682    			}
;;;683    		}
;;;684    	else 
;;;685    		{
;;;686    		snmp_bat_flag[1]&=~0x0080;
;;;687    		if(snmp_bat_flag_puts[1]&0x0080) 
;;;688    			{
;;;689    			snmp_trap_send("BAT #2,speed charge is stopped",5,8,35);
;;;690    			snmp_bat_flag_puts[1]&=~0x0080;
;;;691    			}
;;;692    		}
;;;693    
;;;694    	if(sp_ch_error) 									//Ускореннный заряд заблокирован по вентиляции
;;;695    		{
;;;696    		snmp_bat_flag[1]|=0x0100;
;;;697    		if((snmp_bat_flag_puts[1]&0x0100)==0) 
;;;698    			{
;;;699    			snmp_trap_send("BAT #2,speed charge is blocked",5,8,36); 
;;;700    			snmp_bat_flag_puts[1]|=0x0100;
;;;701    			}
;;;702    		}
;;;703    	else 
;;;704    		{
;;;705    		snmp_bat_flag[1]&=~0x0100;
;;;706    		if(snmp_bat_flag_puts[1]&0x0100) 
;;;707    			{
;;;708    			snmp_trap_send("BAT #2,speed charge is unblocked",5,8,37);
;;;709    			snmp_bat_flag_puts[1]&=~0x0100;
;;;710    			} 
;;;711    		}
;;;712    
;;;713    	if(vz1_stat!=vz1sOFF)								//Уравнительный заряд 
;;;714    		{
;;;715    		snmp_bat_flag[1]|=0x0200;
;;;716    		if((snmp_bat_flag_puts[1]&0x0200)==0) 
;;;717    			{
;;;718    			snmp_trap_send("BAT #2,equalising charge is on",5,8,38); 
;;;719    			snmp_bat_flag_puts[1]|=0x0200;
;;;720    			}
;;;721    		}
;;;722    	else 
;;;723    		{
;;;724    		snmp_bat_flag[1]&=~0x0200;
;;;725    		if(snmp_bat_flag_puts[1]&0x0200) 
;;;726    			{
;;;727    			snmp_trap_send("BAT #2,equalising charge is off",5,8,39);
;;;728    			snmp_bat_flag_puts[1]&=~0x0200;
;;;729    			}
;;;730    		}
;;;731    
;;;732    	if(vz1_error)										//Уравнительный заряд заблокирован по вентиляции 
;;;733    		{
;;;734    		snmp_bat_flag[1]|=0x0400;
;;;735    		if((snmp_bat_flag_puts[1]&0x0400)==0) 
;;;736    			{
;;;737    			snmp_trap_send("BAT #2,equalising charge is blocked",5,8,40); 
;;;738    			snmp_bat_flag_puts[1]|=0x0400;
;;;739    			}
;;;740    		}
;;;741    	else 
;;;742    		{
;;;743    		snmp_bat_flag[1]&=~0x0400;
;;;744    		if(snmp_bat_flag_puts[1]&0x0400) 
;;;745    			{
;;;746    			snmp_trap_send("BAT #2,equalising charge is unblocked",5,8,41);
;;;747    			snmp_bat_flag_puts[1]&=~0x0400;
;;;748    			} 
;;;749    		}
;;;750    
;;;751    	if(vz2_stat!=vz2sOFF)								//Формовочный заряд 
;;;752    		{
;;;753    		snmp_bat_flag[1]|=0x0800;
;;;754    		if((snmp_bat_flag_puts[1]&0x0800)==0) 
;;;755    			{
;;;756    			snmp_trap_send("BAT #2,molding charge is on",5,8,42); 
;;;757    			snmp_bat_flag_puts[1]|=0x0800;
;;;758    			}
;;;759    		}
;;;760    	else 
;;;761    		{
;;;762    		snmp_bat_flag[1]&=~0x0800;
;;;763    		if(snmp_bat_flag_puts[1]&0x0800) 
;;;764    			{
;;;765    			snmp_trap_send("BAT #2,molding charge is off",5,8,43);
;;;766    			snmp_bat_flag_puts[1]&=~0x0800;
;;;767    			}
;;;768    		}
;;;769    
;;;770    	if(vz2_error) 										//Формовочный заряд заблокирован по вентиляции
;;;771    		{
;;;772    		snmp_bat_flag[1]|=0x1000;
;;;773    		if((snmp_bat_flag_puts[1]&0x1000)==0) 
;;;774    			{
;;;775    			snmp_trap_send("BAT #2,molding charge is blocked",5,8,44); 
;;;776    			snmp_bat_flag_puts[1]|=0x1000;
;;;777    			}
;;;778    		}
;;;779    	else 
;;;780    		{
;;;781    		snmp_bat_flag[1]&=~0x1000;
;;;782    		if(snmp_bat_flag_puts[1]&0x1000) 
;;;783    			{
;;;784    			snmp_trap_send("BAT #2,molding charge is unblocked",5,8,45);
;;;785    			snmp_bat_flag_puts[1]&=~0x1000;
;;;786    			} 
;;;787    		}
;;;788    	}
;;;789    else 
;;;790    	{
;;;791    	snmp_bat_flag[1]=0; 
00003e  dd00              BLE      |L6.66|
;;;792    	snmp_bat_flag_puts[1]=0;
000040  700e              STRB     r6,[r1,#0]
                  |L6.66|
;;;793    	}
;;;794    /*
;;;795    if(!snmp_bat_status[1])
;;;796    	{
;;;797    	if((bat[1]._Ub<(USIGN*10))) 
;;;798    		{
;;;799    		snmp_bat_flag[1]|=0x01; 
;;;800    		if((snmp_bat_flag_puts[1]&0x01)==0) 
;;;801    			{
;;;802    			snmp_trap_send("BAT #2 Alarm, battery is low",5,8,0); 
;;;803    			snmp_bat_flag_puts[1]|=0x01;
;;;804    			}
;;;805    		}
;;;806    	else 
;;;807    		{
;;;808    		snmp_bat_flag[1]&=~0x01; 
;;;809    		if(snmp_bat_flag_puts[1]&0x01) 
;;;810    			{
;;;811    			snmp_trap_send("BAT #2 Alarm clear, battery is not low",5,8,1);
;;;812    			snmp_bat_flag_puts[1]&=~0x01;
;;;813    			}
;;;814    		}
;;;815    	if(bat[1]._temper_stat&0x01) 
;;;816    		{
;;;817    		snmp_bat_flag[1]|=0x02;
;;;818    		if((snmp_bat_flag_puts[1]&0x02)==0) 
;;;819    			{
;;;820    			snmp_trap_send("BAT #2 Alarm, high battery temperature",5,8,2); 
;;;821    			snmp_bat_flag_puts[1]|=0x02;
;;;822    			}
;;;823    		}
;;;824    	else 
;;;825    		{
;;;826    		snmp_bat_flag[1]&=~0x02;
;;;827    		if(snmp_bat_flag_puts[1]&0x02) 
;;;828    			{
;;;829    			snmp_trap_send("BAT #2 Alarm clear, battery temperature is normal",5,8,3);
;;;830    			snmp_bat_flag_puts[1]&=~0x02;
;;;831    			}
;;;832    		}
;;;833    	if(bat[1]._temper_stat&0x02) 
;;;834    		{
;;;835    		snmp_bat_flag[1]|=0x04;
;;;836    		if((snmp_bat_flag_puts[1]&0x04)==0) 
;;;837    			{
;;;838    			snmp_trap_send("BAT #2 Alarm, maximum battery temperature",5,8,4); 
;;;839    			snmp_bat_flag_puts[1]|=0x04;
;;;840    			}
;;;841    		}
;;;842    	else 
;;;843    		{
;;;844    		snmp_bat_flag[1]&=~0x04;
;;;845    		if(snmp_bat_flag_puts[1]&0x04) 
;;;846    			{
;;;847    			snmp_trap_send("BAT #2 Alarm clear, battery temperature is normal",5,8,5);
;;;848    			snmp_bat_flag_puts[1]&=~0x04;
;;;849    			}
;;;850    		}
;;;851    		
;;;852    	if(bat[1]._Ib<(-IKB))	snmp_bat_flag[1]|=0x80;
;;;853    	else if(bat[1]._Ib>IKB)snmp_bat_flag[1]&=~0x80;
;;;854    
;;;855    	if((spc_stat==spcKE)&&(spc_bat==1)) 
;;;856    		{
;;;857    		snmp_bat_flag[1]|=0x10;
;;;858    		if((snmp_bat_flag_puts[1]&0x10)==0) 
;;;859    			{
;;;860    			snmp_trap_send("BAT #2, capacity check enabled",5,8,6); 
;;;861    			snmp_bat_flag_puts[1]|=0x10;
;;;862    			}
;;;863    		}
;;;864    	else 
;;;865    		{
;;;866    		snmp_bat_flag[1]&=~0x10;
;;;867    		if(snmp_bat_flag_puts[1]&0x10) 
;;;868    			{
;;;869    			snmp_trap_send("BAT #2, capacity check disabled",5,8,7);
;;;870    			snmp_bat_flag_puts[1]&=~0x10;
;;;871    			}
;;;872    		}
;;;873    		
;;;874    	if(spc_stat==spcVZ) 
;;;875    		{
;;;876    		snmp_bat_flag[1]|=0x20;
;;;877    		if((snmp_bat_flag_puts[1]&0x20)==0) 
;;;878    			{
;;;879    			snmp_trap_send("BAT #2,equalizing charge is on",5,8,8); 
;;;880    			snmp_bat_flag_puts[1]|=0x20;
;;;881    			}
;;;882    		}
;;;883    	else 
;;;884    		{
;;;885    		snmp_bat_flag[1]&=~0x20;
;;;886    		if(snmp_bat_flag_puts[1]&0x20) 
;;;887    			{
;;;888    			snmp_trap_send("BAT #2,equalizing charge is off",5,8,9);
;;;889    			snmp_bat_flag_puts[1]&=~0x20;
;;;890    			}
;;;891    		}
;;;892    
;;;893    	if(vz_error) 
;;;894    		{
;;;895    		snmp_bat_flag[1]|=0x40;
;;;896    		if((snmp_bat_flag_puts[1]&0x40)==0) 
;;;897    			{
;;;898    			snmp_trap_send("BAT #2,equalizing charge blocked",5,8,10); 
;;;899    			snmp_bat_flag_puts[1]|=0x40;
;;;900    			}
;;;901    		}
;;;902    	else 
;;;903    		{
;;;904    		snmp_bat_flag[1]&=~0x40;
;;;905    		if(snmp_bat_flag_puts[1]&0x40) 
;;;906    			{
;;;907    			snmp_trap_send("BAT #2,equalizing charge is not blocked",5,8,11);
;;;908    			snmp_bat_flag_puts[1]&=~0x40;
;;;909    			} 
;;;910    		}
;;;911       }
;;;912    else 
;;;913    	{
;;;914    	snmp_bat_flag[1]=0; 
;;;915    	snmp_bat_flag_puts[1]=0;
;;;916    	} */
;;;917    }
000042  2400              MOVS     r4,#0
000044  2801              CMP      r0,#1
000046  da00              BGE      |L6.74|
000048  700c              STRB     r4,[r1,#0]            ;319
                  |L6.74|
00004a  4959              LDR      r1,|L6.432|
00004c  f9b50000          LDRSH    r0,[r5,#0]            ;319  ; t_box
000050  4a58              LDR      r2,|L6.436|
000052  f9b11000          LDRSH    r1,[r1,#0]            ;321  ; TBOXREG
000056  4f58              LDR      r7,|L6.440|
000058  1e8b              SUBS     r3,r1,#2              ;321
00005a  4298              CMP      r0,r3                 ;321
00005c  da0f              BGE      |L6.126|
00005e  f9921000          LDRSB    r1,[r2,#0]            ;322  ; t_box_cnt
000062  291e              CMP      r1,#0x1e              ;319
000064  da1e              BGE      |L6.164|
000066  f1010101          ADD      r1,r1,#1              ;321
00006a  b249              SXTB     r1,r1                 ;322
00006c  7011              STRB     r1,[r2,#0]            ;322
00006e  291e              CMP      r1,#0x1e              ;324
000070  db18              BLT      |L6.164|
000072  8839              LDRH     r1,[r7,#0]            ;324  ; main_vent_pos
000074  f1a10101          SUB      r1,r1,#1              ;324
000078  8039              STRH     r1,[r7,#0]            ;324
00007a  7014              STRB     r4,[r2,#0]            ;325
00007c  e012              B        |L6.164|
                  |L6.126|
00007e  4288              CMP      r0,r1                 ;325
000080  dd0f              BLE      |L6.162|
000082  f9921000          LDRSB    r1,[r2,#0]            ;325  ; t_box_cnt
000086  291e              CMP      r1,#0x1e              ;330
000088  da0c              BGE      |L6.164|
00008a  f1010101          ADD      r1,r1,#1              ;331
00008e  b249              SXTB     r1,r1                 ;333
000090  7011              STRB     r1,[r2,#0]            ;333
000092  291e              CMP      r1,#0x1e              ;333
000094  db06              BLT      |L6.164|
000096  8839              LDRH     r1,[r7,#0]            ;333  ; main_vent_pos
000098  f1010101          ADD      r1,r1,#1              ;333
00009c  8039              STRH     r1,[r7,#0]            ;334
00009e  7014              STRB     r4,[r2,#0]            ;334
0000a0  e000              B        |L6.164|
                  |L6.162|
0000a2  7014              STRB     r4,[r2,#0]            ;338
                  |L6.164|
0000a4  4945              LDR      r1,|L6.444|
0000a6  f9b11000          LDRSH    r1,[r1,#0]            ;338  ; TBOXVENTMAX
0000aa  4288              CMP      r0,r1                 ;340
0000ac  dd05              BLE      |L6.186|
0000ae  2214              MOVS     r2,#0x14              ;340
0000b0  2100              MOVS     r1,#0                 ;340
0000b2  4841              LDR      r0,|L6.440|
0000b4  f7fffffe          BL       gran
0000b8  e007              B        |L6.202|
                  |L6.186|
0000ba  4841              LDR      r0,|L6.448|
0000bc  2100              MOVS     r1,#0                 ;343
0000be  8800              LDRH     r0,[r0,#0]            ;343  ; pos_vent
0000c0  3009              ADDS     r0,r0,#9              ;343
0000c2  b202              SXTH     r2,r0                 ;343
0000c4  483c              LDR      r0,|L6.440|
0000c6  f7fffffe          BL       gran
                  |L6.202|
0000ca  20f0              MOVS     r0,#0xf0              ;344
0000cc  f7fffffe          BL       mess_find_unvol
0000d0  b128              CBZ      r0,|L6.222|
0000d2  483c              LDR      r0,|L6.452|
0000d4  6801              LDR      r1,[r0,#0]            ;349  ; mess_data
0000d6  29f1              CMP      r1,#0xf1              ;350
0000d8  d101              BNE      |L6.222|
0000da  6840              LDR      r0,[r0,#4]            ;350  ; mess_data
0000dc  8038              STRH     r0,[r7,#0]            ;352
                  |L6.222|
0000de  f9b71000          LDRSH    r1,[r7,#0]            ;352  ; main_vent_pos
0000e2  4839              LDR      r0,|L6.456|
0000e4  2901              CMP      r1,#1                 ;352
0000e6  dc01              BGT      |L6.236|
0000e8  7006              STRB     r6,[r0,#0]            ;353
0000ea  e000              B        |L6.238|
                  |L6.236|
0000ec  7004              STRB     r4,[r0,#0]            ;353
                  |L6.238|
0000ee  4837              LDR      r0,|L6.460|
0000f0  f8df80dc          LDR      r8,|L6.464|
0000f4  f9b00000          LDRSH    r0,[r0,#0]            ;357  ; TBATDISABLE
0000f8  f1a00132          SUB      r1,r0,#0x32           ;359
0000fc  2928              CMP      r1,#0x28              ;359
0000fe  d821              BHI      |L6.324|
000100  f9b51000          LDRSH    r1,[r5,#0]            ;360  ; t_box
000104  4f33              LDR      r7,|L6.468|
000106  4281              CMP      r1,r0                 ;362
000108  dd03              BLE      |L6.274|
00010a  8838              LDRH     r0,[r7,#0]            ;362  ; tbatdisable_cnt
00010c  f1000001          ADD      r0,r0,#1              ;362
000110  8038              STRH     r0,[r7,#0]            ;362
                  |L6.274|
000112  4831              LDR      r0,|L6.472|
000114  f9b00000          LDRSH    r0,[r0,#0]            ;363  ; TBATENABLE
000118  4281              CMP      r1,r0                 ;363
00011a  da03              BGE      |L6.292|
00011c  8838              LDRH     r0,[r7,#0]            ;368  ; tbatdisable_cnt
00011e  f1a00001          SUB      r0,r0,#1              ;368
000122  8038              STRH     r0,[r7,#0]            ;368
                  |L6.292|
000124  2206              MOVS     r2,#6                 ;369
000126  2100              MOVS     r1,#0                 ;369
000128  482a              LDR      r0,|L6.468|
00012a  f7fffffe          BL       gran
00012e  f9b70000          LDRSH    r0,[r7,#0]            ;371  ; tbatdisable_cnt
000132  2805              CMP      r0,#5                 ;371
000134  dd01              BLE      |L6.314|
000136  f8886000          STRB     r6,[r8,#0]            ;372
                  |L6.314|
00013a  2801              CMP      r0,#1                 ;372
00013c  da04              BGE      |L6.328|
00013e  f8884000          STRB     r4,[r8,#0]            ;372
000142  e001              B        |L6.328|
                  |L6.324|
000144  f8884000          STRB     r4,[r8,#0]            ;376
                  |L6.328|
000148  4824              LDR      r0,|L6.476|
00014a  4f25              LDR      r7,|L6.480|
00014c  f9b00000          LDRSH    r0,[r0,#0]            ;376  ; TLOADDISABLE
000150  f1a00132          SUB      r1,r0,#0x32           ;376
000154  291e              CMP      r1,#0x1e              ;376
000156  d820              BHI      |L6.410|
000158  f9b51000          LDRSH    r1,[r5,#0]            ;376  ; t_box
00015c  4d21              LDR      r5,|L6.484|
00015e  4281              CMP      r1,r0                 ;377
000160  dd03              BLE      |L6.362|
000162  8828              LDRH     r0,[r5,#0]            ;377  ; tloaddisable_cnt
000164  f1000001          ADD      r0,r0,#1              ;377
000168  8028              STRH     r0,[r5,#0]            ;379
                  |L6.362|
00016a  481f              LDR      r0,|L6.488|
00016c  f9b00000          LDRSH    r0,[r0,#0]            ;379  ; TLOADENABLE
000170  4281              CMP      r1,r0                 ;379
000172  da03              BGE      |L6.380|
000174  8828              LDRH     r0,[r5,#0]            ;379  ; tloaddisable_cnt
000176  f1a00001          SUB      r0,r0,#1              ;390
00017a  8028              STRH     r0,[r5,#0]            ;390
                  |L6.380|
00017c  2206              MOVS     r2,#6                 ;390
00017e  2100              MOVS     r1,#0                 ;391
000180  4818              LDR      r0,|L6.484|
000182  f7fffffe          BL       gran
000186  f9b50000          LDRSH    r0,[r5,#0]            ;393  ; tloaddisable_cnt
00018a  2805              CMP      r0,#5                 ;393
00018c  dd00              BLE      |L6.400|
00018e  703e              STRB     r6,[r7,#0]            ;393
                  |L6.400|
000190  2801              CMP      r0,#1                 ;394
000192  da00              BGE      |L6.406|
000194  703c              STRB     r4,[r7,#0]            ;394
                  |L6.406|
000196  e8bd81f0          POP      {r4-r8,pc}            ;394
                  |L6.410|
00019a  703c              STRB     r4,[r7,#0]            ;398
00019c  e7fb              B        |L6.406|
;;;918    
                          ENDP

00019e  0000              DCW      0x0000
                  |L6.416|
                          DCD      t_box
                  |L6.420|
                          DCD      TBOXMAX
                  |L6.424|
                          DCD      av_tbox_cnt
                  |L6.428|
                          DCD      av_tbox_stat
                  |L6.432|
                          DCD      TBOXREG
                  |L6.436|
                          DCD      t_box_cnt
                  |L6.440|
                          DCD      main_vent_pos
                  |L6.444|
                          DCD      TBOXVENTMAX
                  |L6.448|
                          DCD      pos_vent
                  |L6.452|
                          DCD      mess_data
                  |L6.456|
                          DCD      mixer_vent_stat
                  |L6.460|
                          DCD      TBATDISABLE
                  |L6.464|
                          DCD      tbatdisable_stat
                  |L6.468|
                          DCD      tbatdisable_cnt
                  |L6.472|
                          DCD      TBATENABLE
                  |L6.476|
                          DCD      TLOADDISABLE
                  |L6.480|
                          DCD      tloaddisable_stat
                  |L6.484|
                          DCD      tloaddisable_cnt
                  |L6.488|
                          DCD      TLOADENABLE

                          AREA ||area_number.7||, CODE, READONLY, ALIGN=2

                          EXPORTAS ||area_number.7||, ||.text||
                  u_avt_set_hndl1 PROC
;;;306    // заполнение флагов для АКБ
;;;307    void bat_flag (void)
000000  e92d5fff          PUSH     {r0-r12,lr}
;;;308    {  
;;;309    if(spc_stat!=spcVZ) 
000004  484e              LDR      r0,|L7.320|
;;;310    	{
;;;311    	vz_error=0;
000006  2165              MOVS     r1,#0x65
000008  2564              MOVS     r5,#0x64              ;309
00000a  f9b00000          LDRSH    r0,[r0,#0]            ;309
00000e  4c4b              LDR      r4,|L7.316|
000010  4341              MULS     r1,r0,r1
;;;312    	sp_ch_error=0;
000012  eb001040          ADD      r0,r0,r0,LSL #5
;;;313    	vz1_error=0;
;;;314    	vz2_error=0;
000016  fbb1f1f5          UDIV     r1,r1,r5
;;;315    	}
;;;316    
;;;317    if(!snmp_bat_status[0])	 			//Батарея №1
00001a  eb000040          ADD      r0,r0,r0,LSL #1
;;;318    	{
;;;319    	if((bat[0]._Ub<(USIGN*10)))		//Снижение напряжения батареи ниже Uбсигн 
00001e  fbb0f0f5          UDIV     r0,r0,r5
000022  f8dfb120          LDR      r11,|L7.324|
000026  b20a              SXTH     r2,r1                 ;317
;;;320    		{
;;;321    		snmp_bat_flag[0]|=0x0001; 
;;;322    		if((snmp_bat_flag_puts[0]&0x0001)==0) 
;;;323    			{
;;;324    			snmp_trap_send("BAT #1 Alarm, battery is low",5,8,0); 
;;;325    			snmp_bat_flag_puts[0]|=0x0001;
;;;326    			}
;;;327    		}
;;;328    	else 
;;;329    		{
;;;330    		snmp_bat_flag[0]&=~0x0001; 
;;;331    		if(snmp_bat_flag_puts[0]&0x0001) 
;;;332    			{
;;;333    			snmp_trap_send("BAT #1 Alarm clear, battery is not low",5,8,1);
;;;334    			snmp_bat_flag_puts[0]&=~0x0001;
;;;335    			}
;;;336    		}
;;;337    
;;;338    	if(bat[0]._temper_stat&0x01)	//Повышенная температура батареи, первый порог - предупреждение
;;;339    		{
;;;340    		snmp_bat_flag[0]|=0x0002;
;;;341    		if((snmp_bat_flag_puts[0]&0x0002)==0) 
;;;342    			{
;;;343    			snmp_trap_send("BAT #1 Warning, high battery temperature",5,8,2); 
;;;344    			snmp_bat_flag_puts[0]|=0x0002;
;;;345    			}
;;;346    		}
;;;347    	else 
;;;348    		{
;;;349    		snmp_bat_flag[0]&=~0x0002;
;;;350    		if(snmp_bat_flag_puts[0]&0x0002) 
;;;351    			{
;;;352    			snmp_trap_send("BAT #1 Warning clear, battery temperature is normal",5,8,3);
;;;353    			snmp_bat_flag_puts[0]&=~0x02;
;;;354    			}
;;;355    		}
;;;356    
;;;357    	if(bat[0]._temper_stat&0x02)  	//Повышенная температура батареи, второй порог - авария
;;;358    		{
;;;359    		snmp_bat_flag[0]|=0x0004;
;;;360    		if((snmp_bat_flag_puts[0]&0x0004)==0) 
;;;361    			{
;;;362    			snmp_trap_send("BAT #1 Alarm, high battery temperature",5,8,4); 
;;;363    			snmp_bat_flag_puts[0]|=0x0004;
;;;364    			}
;;;365    		}
;;;366    	else 
;;;367    		{
;;;368    		snmp_bat_flag[0]&=~0x0004;
;;;369    		if(snmp_bat_flag_puts[0]&0x0004) 
;;;370    			{
;;;371    			snmp_trap_send("BAT #1 Alarm clear, battery temperature is normal",5,8,5);
;;;372    			snmp_bat_flag_puts[0]&=~0x0004;
;;;373    			}
;;;374    		}
;;;375    
;;;376    	if(bat[0]._Ib<(-IKB)) snmp_bat_flag[0]|=0x0008;		//Разряд батареи
000028  7823              LDRB     r3,[r4,#0]  ; uavt_set_stat
00002a  b201              SXTH     r1,r0
00002c  f89b0000          LDRB     r0,[r11,#0]           ;321
000030  4e45              LDR      r6,|L7.328|
;;;377    	else if(bat[0]._Ib>IKB) snmp_bat_flag[0]&=~0x0008;	//Заряд батареи
;;;378    
;;;379    	if((spc_stat==spcKE)&&(spc_bat==0))					//Контроль емкости батареи №1 
;;;380    		{
;;;381    		snmp_bat_flag[0]|=0x0010;
;;;382    		if((snmp_bat_flag_puts[0]&0x0010)==0) 
;;;383    			{
;;;384    			snmp_trap_send("BAT #1, capacity test started",5,8,6); 
;;;385    			snmp_bat_flag_puts[0]|=0x0010;
;;;386    			}
;;;387    		}
;;;388    	else 
;;;389    		{
;;;390    		snmp_bat_flag[0]&=~0x0010;
;;;391    		if(snmp_bat_flag_puts[0]&0x0010) 
;;;392    			{
;;;393    			snmp_trap_send("BAT #1, capacity test stopped",5,8,7);
;;;394    			snmp_bat_flag_puts[0]&=~0x0010;
;;;395    			}
;;;396    		}
;;;397    		
;;;398    	if(spc_stat==spcVZ)									//Выравнивающий заряд 
;;;399    		{
;;;400    		snmp_bat_flag[0]|=0x0020;
;;;401    		if((snmp_bat_flag_puts[0]&0x0020)==0) 
;;;402    			{
;;;403    			snmp_trap_send("BAT #1,leveling charge is started",5,8,8); 
;;;404    			snmp_bat_flag_puts[0]|=0x0020;
;;;405    			}
;;;406    		}
;;;407    	else 
;;;408    		{
;;;409    		snmp_bat_flag[0]&=~0x0020;
;;;410    		if(snmp_bat_flag_puts[0]&0x0020) 
;;;411    			{
;;;412    			snmp_trap_send("BAT #1,leveling charge is stopped",5,8,9);
;;;413    			snmp_bat_flag_puts[0]&=~0x0020;
;;;414    			}
;;;415    		}
;;;416    
;;;417    	if(vz_error)										 //Выравнивающий заряд заблокирован по вентиляции
;;;418    		{
;;;419    		snmp_bat_flag[0]|=0x0040;
;;;420    		if((snmp_bat_flag_puts[0]&0x0040)==0) 
;;;421    			{
;;;422    			snmp_trap_send("BAT #1,leveling charge is blocked",5,8,10); 
;;;423    			snmp_bat_flag_puts[0]|=0x0040;
;;;424    			}
;;;425    		}
;;;426    	else 
;;;427    		{
;;;428    		snmp_bat_flag[0]&=~0x0040;
;;;429    		if(snmp_bat_flag_puts[0]&0x0040) 
;;;430    			{
;;;431    			snmp_trap_send("BAT #1,leveling charge is unblocked",5,8,11);
;;;432    			snmp_bat_flag_puts[0]&=~0x0040;
;;;433    			} 
;;;434    		}
;;;435    
;;;436    	if(sp_ch_stat==scsWRK) 								//Ускореннный заряд
;;;437    		{
;;;438    		snmp_bat_flag[0]|=0x0080;
;;;439    		if((snmp_bat_flag_puts[0]&0x0080)==0) 
;;;440    			{
;;;441    			snmp_trap_send("BAT #1,speed charge is started",5,8,10); 
;;;442    			snmp_bat_flag_puts[0]|=0x0080;
;;;443    			}
;;;444    		}
;;;445    	else 
;;;446    		{
;;;447    		snmp_bat_flag[0]&=~0x0080;
;;;448    		if(snmp_bat_flag_puts[0]&0x0080) 
;;;449    			{
;;;450    			snmp_trap_send("BAT #1,speed charge is stopped",5,8,11);
;;;451    			snmp_bat_flag_puts[0]&=~0x0080;
;;;452    			}
;;;453    		}
;;;454    
;;;455    	if(sp_ch_error) 									//Ускореннный заряд заблокирован по вентиляции
;;;456    		{
;;;457    		snmp_bat_flag[0]|=0x0100;
;;;458    		if((snmp_bat_flag_puts[0]&0x0100)==0) 
;;;459    			{
;;;460    			snmp_trap_send("BAT #1,speed charge is blocked",5,8,12); 
;;;461    			snmp_bat_flag_puts[0]|=0x0100;
;;;462    			}
;;;463    		}
;;;464    	else 
;;;465    		{
;;;466    		snmp_bat_flag[0]&=~0x0100;
;;;467    		if(snmp_bat_flag_puts[0]&0x0100) 
;;;468    			{
;;;469    			snmp_trap_send("BAT #1,speed charge is unblocked",5,8,13);
;;;470    			snmp_bat_flag_puts[0]&=~0x0100;
;;;471    			} 
;;;472    		}
;;;473    
;;;474    	if(vz1_stat!=vz1sOFF)								//Уравнительный заряд 
;;;475    		{
;;;476    		snmp_bat_flag[0]|=0x0200;
;;;477    		if((snmp_bat_flag_puts[0]&0x0200)==0) 
;;;478    			{
;;;479    			snmp_trap_send("BAT #1,equalising charge is on",5,8,14); 
;;;480    			snmp_bat_flag_puts[0]|=0x0200;
;;;481    			}
;;;482    		}
;;;483    	else 
;;;484    		{
;;;485    		snmp_bat_flag[0]&=~0x0200;
;;;486    		if(snmp_bat_flag_puts[0]&0x0200) 
;;;487    			{
;;;488    			snmp_trap_send("BAT #1,equalising charge is off",5,8,15);
;;;489    			snmp_bat_flag_puts[0]&=~0x0200;
;;;490    			}
;;;491    		}
;;;492    
;;;493    	if(vz1_error)										//Уравнительный заряд заблокирован по вентиляции 
;;;494    		{
;;;495    		snmp_bat_flag[0]|=0x0400;
;;;496    		if((snmp_bat_flag_puts[0]&0x0400)==0) 
;;;497    			{
;;;498    			snmp_trap_send("BAT #1,equalising charge is blocked",5,8,16); 
;;;499    			snmp_bat_flag_puts[0]|=0x0400;
;;;500    			}
;;;501    		}
;;;502    	else 
;;;503    		{
;;;504    		snmp_bat_flag[0]&=~0x0400;
;;;505    		if(snmp_bat_flag_puts[0]&0x0400) 
;;;506    			{
;;;507    			snmp_trap_send("BAT #1,equalising charge is unblocked",5,8,17);
;;;508    			snmp_bat_flag_puts[0]&=~0x0400;
;;;509    			} 
;;;510    		}
;;;511    
;;;512    	if(vz2_stat!=vz2sOFF)								//Формовочный заряд 
;;;513    		{
;;;514    		snmp_bat_flag[0]|=0x0800;
;;;515    		if((snmp_bat_flag_puts[0]&0x0800)==0) 
;;;516    			{
;;;517    			snmp_trap_send("BAT #1,molding charge is on",5,8,18); 
;;;518    			snmp_bat_flag_puts[0]|=0x0800;
;;;519    			}
;;;520    		}
;;;521    	else 
;;;522    		{
;;;523    		snmp_bat_flag[0]&=~0x0800;
;;;524    		if(snmp_bat_flag_puts[0]&0x0800) 
;;;525    			{
;;;526    			snmp_trap_send("BAT #1,molding charge is off",5,8,19);
;;;527    			snmp_bat_flag_puts[0]&=~0x0800;
;;;528    			}
;;;529    		}
;;;530    
;;;531    	if(vz2_error) 										//Формовочный заряд заблокирован по вентиляции
;;;532    		{
;;;533    		snmp_bat_flag[0]|=0x1000;
;;;534    		if((snmp_bat_flag_puts[0]&0x1000)==0) 
;;;535    			{
;;;536    			snmp_trap_send("BAT #1,molding charge is blocked",5,8,20); 
;;;537    			snmp_bat_flag_puts[0]|=0x1000;
;;;538    			}
;;;539    		}
;;;540    	else 
;;;541    		{
;;;542    		snmp_bat_flag[0]&=~0x1000;
;;;543    		if(snmp_bat_flag_puts[0]&0x1000) 
;;;544    			{
;;;545    			snmp_trap_send("BAT #1,molding charge is unblocked",5,8,21);
;;;546    			snmp_bat_flag_puts[0]&=~0x1000;
;;;547    			} 
;;;548    		}
;;;549    	}
;;;550    else 
;;;551    	{
;;;552    	snmp_bat_flag[0]=0; 
000032  4f46              LDR      r7,|L7.332|
;;;553    	snmp_bat_flag_puts[0]=0;
000034  f8df8118          LDR      r8,|L7.336|
;;;554    	}
;;;555    
;;;556    if(!snmp_bat_status[1])	 			//Батарея №2
000038  f8df9118          LDR      r9,|L7.340|
00003c  f8dfa118          LDR      r10,|L7.344|
;;;557    	{
;;;558    	if((bat[1]._Ub<(USIGN*10)))		//Снижение напряжения батареи ниже Uбсигн 
;;;559    		{
;;;560    		snmp_bat_flag[1]|=0x0001; 
;;;561    		if((snmp_bat_flag_puts[1]&0x0001)==0) 
;;;562    			{
;;;563    			snmp_trap_send("BAT #2 Alarm, battery is low",5,8,22); 
;;;564    			snmp_bat_flag_puts[1]|=0x0001;
;;;565    			}
;;;566    		}
;;;567    	else 
;;;568    		{
;;;569    		snmp_bat_flag[1]&=~0x0001; 
;;;570    		if(snmp_bat_flag_puts[1]&0x0001) 
;;;571    			{
;;;572    			snmp_trap_send("BAT #2 Alarm clear, battery is not low",5,8,23);
;;;573    			snmp_bat_flag_puts[1]&=~0x0001;
;;;574    			}
;;;575    		}
;;;576    
;;;577    	if(bat[1]._temper_stat&0x01)	//Повышенная температура батареи, первый порог - предупреждение
;;;578    		{
;;;579    		snmp_bat_flag[1]|=0x0002;
;;;580    		if((snmp_bat_flag_puts[0]&0x0002)==0) 
;;;581    			{
;;;582    			snmp_trap_send("BAT #2 Warning, high battery temperature",5,8,24); 
;;;583    			snmp_bat_flag_puts[1]|=0x0002;
;;;584    			}
;;;585    		}
;;;586    	else 
;;;587    		{
;;;588    		snmp_bat_flag[1]&=~0x0002;
;;;589    		if(snmp_bat_flag_puts[1]&0x0002) 
;;;590    			{
;;;591    			snmp_trap_send("BAT #2 Warning clear, battery temperature is normal",5,8,25);
;;;592    			snmp_bat_flag_puts[1]&=~0x02;
;;;593    			}
;;;594    		}
;;;595    
;;;596    	if(bat[1]._temper_stat&0x02)  	//Повышенная температура батареи, второй порог - авария
;;;597    		{
;;;598    		snmp_bat_flag[1]|=0x0004;
;;;599    		if((snmp_bat_flag_puts[1]&0x0004)==0) 
;;;600    			{
;;;601    			snmp_trap_send("BAT #2 Alarm, high battery temperature",5,8,26); 
;;;602    			snmp_bat_flag_puts[1]|=0x0004;
;;;603    			}
;;;604    		}
;;;605    	else 
;;;606    		{
;;;607    		snmp_bat_flag[1]&=~0x0004;
;;;608    		if(snmp_bat_flag_puts[1]&0x0004) 
;;;609    			{
;;;610    			snmp_trap_send("BAT #2 Alarm clear, battery temperature is normal",5,8,27);
;;;611    			snmp_bat_flag_puts[1]&=~0x0004;
;;;612    			}
;;;613    		}
;;;614    
;;;615    	if(bat[1]._Ib<(-IKB)) snmp_bat_flag[1]|=0x0008;		//Разряд батареи
;;;616    	else if(bat[1]._Ib>IKB) snmp_bat_flag[1]&=~0x0008;	//Заряд батареи
;;;617    
;;;618    	if((spc_stat==spcKE)&&(spc_bat==0))					//Контроль емкости батареи №1 
;;;619    		{
;;;620    		snmp_bat_flag[1]|=0x0010;
;;;621    		if((snmp_bat_flag_puts[1]&0x0010)==0) 
;;;622    			{
;;;623    			snmp_trap_send("BAT #2, capacity test started",5,8,28); 
;;;624    			snmp_bat_flag_puts[1]|=0x0010;
;;;625    			}
;;;626    		}
;;;627    	else 
;;;628    		{
;;;629    		snmp_bat_flag[1]&=~0x0010;
;;;630    		if(snmp_bat_flag_puts[1]&0x0010) 
;;;631    			{
;;;632    			snmp_trap_send("BAT #2, capacity test stopped",5,8,29);
;;;633    			snmp_bat_flag_puts[1]&=~0x0010;
;;;634    			}
;;;635    		}
;;;636    		
;;;637    	if(spc_stat==spcVZ)									//Выравнивающий заряд 
;;;638    		{
;;;639    		snmp_bat_flag[1]|=0x0020;
;;;640    		if((snmp_bat_flag_puts[1]&0x0020)==0) 
;;;641    			{
;;;642    			snmp_trap_send("BAT #2,leveling charge is started",5,8,30); 
;;;643    			snmp_bat_flag_puts[1]|=0x0020;
;;;644    			}
;;;645    		}
;;;646    	else 
;;;647    		{
;;;648    		snmp_bat_flag[1]&=~0x0020;
;;;649    		if(snmp_bat_flag_puts[1]&0x0020) 
;;;650    			{
;;;651    			snmp_trap_send("BAT #2,leveling charge is stopped",5,8,31);
;;;652    			snmp_bat_flag_puts[1]&=~0x0020;
;;;653    			}
;;;654    		}
;;;655    
;;;656    	if(vz_error)										 //Выравнивающий заряд заблокирован по вентиляции
;;;657    		{
;;;658    		snmp_bat_flag[1]|=0x0040;
;;;659    		if((snmp_bat_flag_puts[1]&0x0040)==0) 
;;;660    			{
;;;661    			snmp_trap_send("BAT #2,leveling charge is blocked",5,8,32); 
;;;662    			snmp_bat_flag_puts[1]|=0x0040;
;;;663    			}
;;;664    		}
;;;665    	else 
;;;666    		{
;;;667    		snmp_bat_flag[1]&=~0x0040;
;;;668    		if(snmp_bat_flag_puts[1]&0x0040) 
;;;669    			{
;;;670    			snmp_trap_send("BAT #2,leveling charge is unblocked",5,8,33);
;;;671    			snmp_bat_flag_puts[1]&=~0x0040;
;;;672    			} 
;;;673    		}
;;;674    
;;;675    	if(sp_ch_stat==scsWRK) 								//Ускореннный заряд
;;;676    		{
;;;677    		snmp_bat_flag[1]|=0x0080;
;;;678    		if((snmp_bat_flag_puts[1]&0x0080)==0) 
;;;679    			{
;;;680    			snmp_trap_send("BAT #2,speed charge is started",5,8,34); 
;;;681    			snmp_bat_flag_puts[1]|=0x0080;
;;;682    			}
;;;683    		}
;;;684    	else 
;;;685    		{
;;;686    		snmp_bat_flag[1]&=~0x0080;
;;;687    		if(snmp_bat_flag_puts[1]&0x0080) 
;;;688    			{
;;;689    			snmp_trap_send("BAT #2,speed charge is stopped",5,8,35);
;;;690    			snmp_bat_flag_puts[1]&=~0x0080;
;;;691    			}
;;;692    		}
;;;693    
;;;694    	if(sp_ch_error) 									//Ускореннный заряд заблокирован по вентиляции
;;;695    		{
;;;696    		snmp_bat_flag[1]|=0x0100;
;;;697    		if((snmp_bat_flag_puts[1]&0x0100)==0) 
;;;698    			{
;;;699    			snmp_trap_send("BAT #2,speed charge is blocked",5,8,36); 
;;;700    			snmp_bat_flag_puts[1]|=0x0100;
;;;701    			}
;;;702    		}
;;;703    	else 
;;;704    		{
;;;705    		snmp_bat_flag[1]&=~0x0100;
;;;706    		if(snmp_bat_flag_puts[1]&0x0100) 
;;;707    			{
;;;708    			snmp_trap_send("BAT #2,speed charge is unblocked",5,8,37);
;;;709    			snmp_bat_flag_puts[1]&=~0x0100;
;;;710    			} 
;;;711    		}
;;;712    
;;;713    	if(vz1_stat!=vz1sOFF)								//Уравнительный заряд 
;;;714    		{
;;;715    		snmp_bat_flag[1]|=0x0200;
;;;716    		if((snmp_bat_flag_puts[1]&0x0200)==0) 
;;;717    			{
;;;718    			snmp_trap_send("BAT #2,equalising charge is on",5,8,38); 
;;;719    			snmp_bat_flag_puts[1]|=0x0200;
;;;720    			}
;;;721    		}
;;;722    	else 
;;;723    		{
;;;724    		snmp_bat_flag[1]&=~0x0200;
;;;725    		if(snmp_bat_flag_puts[1]&0x0200) 
;;;726    			{
;;;727    			snmp_trap_send("BAT #2,equalising charge is off",5,8,39);
;;;728    			snmp_bat_flag_puts[1]&=~0x0200;
;;;729    			}
;;;730    		}
;;;731    
;;;732    	if(vz1_error)										//Уравнительный заряд заблокирован по вентиляции 
;;;733    		{
;;;734    		snmp_bat_flag[1]|=0x0400;
;;;735    		if((snmp_bat_flag_puts[1]&0x0400)==0) 
;;;736    			{
;;;737    			snmp_trap_send("BAT #2,equalising charge is blocked",5,8,40); 
;;;738    			snmp_bat_flag_puts[1]|=0x0400;
;;;739    			}
;;;740    		}
;;;741    	else 
;;;742    		{
;;;743    		snmp_bat_flag[1]&=~0x0400;
;;;744    		if(snmp_bat_flag_puts[1]&0x0400) 
;;;745    			{
;;;746    			snmp_trap_send("BAT #2,equalising charge is unblocked",5,8,41);
;;;747    			snmp_bat_flag_puts[1]&=~0x0400;
;;;748    			} 
;;;749    		}
;;;750    
;;;751    	if(vz2_stat!=vz2sOFF)								//Формовочный заряд 
;;;752    		{
;;;753    		snmp_bat_flag[1]|=0x0800;
;;;754    		if((snmp_bat_flag_puts[1]&0x0800)==0) 
;;;755    			{
;;;756    			snmp_trap_send("BAT #2,molding charge is on",5,8,42); 
;;;757    			snmp_bat_flag_puts[1]|=0x0800;
;;;758    			}
;;;759    		}
;;;760    	else 
;;;761    		{
;;;762    		snmp_bat_flag[1]&=~0x0800;
;;;763    		if(snmp_bat_flag_puts[1]&0x0800) 
;;;764    			{
;;;765    			snmp_trap_send("BAT #2,molding charge is off",5,8,43);
;;;766    			snmp_bat_flag_puts[1]&=~0x0800;
;;;767    			}
;;;768    		}
;;;769    
;;;770    	if(vz2_error) 										//Формовочный заряд заблокирован по вентиляции
;;;771    		{
;;;772    		snmp_bat_flag[1]|=0x1000;
;;;773    		if((snmp_bat_flag_puts[1]&0x1000)==0) 
;;;774    			{
;;;775    			snmp_trap_send("BAT #2,molding charge is blocked",5,8,44); 
;;;776    			snmp_bat_flag_puts[1]|=0x1000;
;;;777    			}
;;;778    		}
;;;779    	else 
;;;780    		{
;;;781    		snmp_bat_flag[1]&=~0x1000;
;;;782    		if(snmp_bat_flag_puts[1]&0x1000) 
;;;783    			{
;;;784    			snmp_trap_send("BAT #2,molding charge is unblocked",5,8,45);
;;;785    			snmp_bat_flag_puts[1]&=~0x1000;
;;;786    			} 
;;;787    		}
;;;788    	}
;;;789    else 
;;;790    	{
;;;791    	snmp_bat_flag[1]=0; 
;;;792    	snmp_bat_flag_puts[1]=0;
000040  2500              MOVS     r5,#0
;;;793    	}
;;;794    /*
;;;795    if(!snmp_bat_status[1])
;;;796    	{
;;;797    	if((bat[1]._Ub<(USIGN*10))) 
;;;798    		{
;;;799    		snmp_bat_flag[1]|=0x01; 
;;;800    		if((snmp_bat_flag_puts[1]&0x01)==0) 
;;;801    			{
;;;802    			snmp_trap_send("BAT #2 Alarm, battery is low",5,8,0); 
;;;803    			snmp_bat_flag_puts[1]|=0x01;
;;;804    			}
;;;805    		}
;;;806    	else 
;;;807    		{
;;;808    		snmp_bat_flag[1]&=~0x01; 
;;;809    		if(snmp_bat_flag_puts[1]&0x01) 
;;;810    			{
;;;811    			snmp_trap_send("BAT #2 Alarm clear, battery is not low",5,8,1);
;;;812    			snmp_bat_flag_puts[1]&=~0x01;
;;;813    			}
;;;814    		}
;;;815    	if(bat[1]._temper_stat&0x01) 
;;;816    		{
;;;817    		snmp_bat_flag[1]|=0x02;
;;;818    		if((snmp_bat_flag_puts[1]&0x02)==0) 
;;;819    			{
;;;820    			snmp_trap_send("BAT #2 Alarm, high battery temperature",5,8,2); 
;;;821    			snmp_bat_flag_puts[1]|=0x02;
;;;822    			}
;;;823    		}
;;;824    	else 
;;;825    		{
;;;826    		snmp_bat_flag[1]&=~0x02;
;;;827    		if(snmp_bat_flag_puts[1]&0x02) 
;;;828    			{
;;;829    			snmp_trap_send("BAT #2 Alarm clear, battery temperature is normal",5,8,3);
;;;830    			snmp_bat_flag_puts[1]&=~0x02;
;;;831    			}
;;;832    		}
;;;833    	if(bat[1]._temper_stat&0x02) 
;;;834    		{
;;;835    		snmp_bat_flag[1]|=0x04;
;;;836    		if((snmp_bat_flag_puts[1]&0x04)==0) 
;;;837    			{
;;;838    			snmp_trap_send("BAT #2 Alarm, maximum battery temperature",5,8,4); 
;;;839    			snmp_bat_flag_puts[1]|=0x04;
;;;840    			}
;;;841    		}
;;;842    	else 
;;;843    		{
;;;844    		snmp_bat_flag[1]&=~0x04;
;;;845    		if(snmp_bat_flag_puts[1]&0x04) 
;;;846    			{
;;;847    			snmp_trap_send("BAT #2 Alarm clear, battery temperature is normal",5,8,5);
;;;848    			snmp_bat_flag_puts[1]&=~0x04;
;;;849    			}
;;;850    		}
;;;851    		
;;;852    	if(bat[1]._Ib<(-IKB))	snmp_bat_flag[1]|=0x80;
;;;853    	else if(bat[1]._Ib>IKB)snmp_bat_flag[1]&=~0x80;
;;;854    
;;;855    	if((spc_stat==spcKE)&&(spc_bat==1)) 
;;;856    		{
;;;857    		snmp_bat_flag[1]|=0x10;
;;;858    		if((snmp_bat_flag_puts[1]&0x10)==0) 
;;;859    			{
;;;860    			snmp_trap_send("BAT #2, capacity check enabled",5,8,6); 
;;;861    			snmp_bat_flag_puts[1]|=0x10;
;;;862    			}
;;;863    		}
;;;864    	else 
;;;865    		{
;;;866    		snmp_bat_flag[1]&=~0x10;
;;;867    		if(snmp_bat_flag_puts[1]&0x10) 
;;;868    			{
;;;869    			snmp_trap_send("BAT #2, capacity check disabled",5,8,7);
;;;870    			snmp_bat_flag_puts[1]&=~0x10;
;;;871    			}
;;;872    		}
;;;873    		
;;;874    	if(spc_stat==spcVZ) 
;;;875    		{
;;;876    		snmp_bat_flag[1]|=0x20;
;;;877    		if((snmp_bat_flag_puts[1]&0x20)==0) 
;;;878    			{
;;;879    			snmp_trap_send("BAT #2,equalizing charge is on",5,8,8); 
;;;880    			snmp_bat_flag_puts[1]|=0x20;
;;;881    			}
;;;882    		}
;;;883    	else 
;;;884    		{
;;;885    		snmp_bat_flag[1]&=~0x20;
;;;886    		if(snmp_bat_flag_puts[1]&0x20) 
;;;887    			{
;;;888    			snmp_trap_send("BAT #2,equalizing charge is off",5,8,9);
;;;889    			snmp_bat_flag_puts[1]&=~0x20;
;;;890    			}
;;;891    		}
;;;892    
;;;893    	if(vz_error) 
;;;894    		{
;;;895    		snmp_bat_flag[1]|=0x40;
;;;896    		if((snmp_bat_flag_puts[1]&0x40)==0) 
;;;897    			{
;;;898    			snmp_trap_send("BAT #2,equalizing charge blocked",5,8,10); 
;;;899    			snmp_bat_flag_puts[1]|=0x40;
;;;900    			}
;;;901    		}
;;;902    	else 
;;;903    		{
;;;904    		snmp_bat_flag[1]&=~0x40;
;;;905    		if(snmp_bat_flag_puts[1]&0x40) 
;;;906    			{
;;;907    			snmp_trap_send("BAT #2,equalizing charge is not blocked",5,8,11);
;;;908    			snmp_bat_flag_puts[1]&=~0x40;
;;;909    			} 
;;;910    		}
;;;911       }
;;;912    else 
;;;913    	{
;;;914    	snmp_bat_flag[1]=0; 
;;;915    	snmp_bat_flag_puts[1]=0;
;;;916    	} */
;;;917    }
000042  2b01              CMP      r3,#1
000044  d002              BEQ      |L7.76|
000046  2b02              CMP      r3,#2                 ;319
000048  d031              BEQ      |L7.174|
00004a  e071              B        |L7.304|
                  |L7.76|
00004c  803a              STRH     r2,[r7,#0]            ;319
00004e  f8a81000          STRH     r1,[r8,#0]            ;319
000052  2801              CMP      r0,#1                 ;321
000054  d000              BEQ      |L7.88|
000056  7035              STRB     r5,[r6,#0]            ;319
                  |L7.88|
000058  230a              MOVS     r3,#0xa               ;321
00005a  2200              MOVS     r2,#0                 ;321
00005c  21e6              MOVS     r1,#0xe6              ;322
00005e  20e1              MOVS     r0,#0xe1              ;322
000060  f7fffffe          BL       mess_send
000064  f04f0201          MOV      r2,#1                 ;321
000068  f04f0000          MOV      r0,#0                 ;321
00006c  f9b73000          LDRSH    r3,[r7,#0]            ;322
000070  f9b85000          LDRSH    r5,[r8,#0]            ;324
000074  f9ba6000          LDRSH    r6,[r10,#0]           ;324
000078  e00d              B        |L7.150|
                  |L7.122|
00007a  eb0001c0          ADD      r1,r0,r0,LSL #3       ;325
00007e  eb011100          ADD      r1,r1,r0,LSL #4       ;325
000082  eb090181          ADD      r1,r9,r1,LSL #2       ;325
000086  69c9              LDR      r1,[r1,#0x1c]         ;330
000088  4299              CMP      r1,r3                 ;330
00008a  da09              BGE      |L7.160|
00008c  42a9              CMP      r1,r5                 ;331
00008e  dd07              BLE      |L7.160|
000090  f1000001          ADD      r0,r0,#1              ;333
000094  b2c0              UXTB     r0,r0                 ;333
                  |L7.150|
000096  42b0              CMP      r0,r6                 ;333
000098  dbef              BLT      |L7.122|
                  |L7.154|
00009a  2a01              CMP      r2,#1                 ;334
00009c  d003              BEQ      |L7.166|
00009e  e047              B        |L7.304|
                  |L7.160|
0000a0  f04f0200          MOV      r2,#0                 ;334
0000a4  e7f9              B        |L7.154|
                  |L7.166|
0000a6  f04f0002          MOV      r0,#2                 ;338
0000aa  7020              STRB     r0,[r4,#0]            ;340
0000ac  e040              B        |L7.304|
                  |L7.174|
0000ae  803a              STRH     r2,[r7,#0]            ;340
0000b0  f8a81000          STRH     r1,[r8,#0]            ;340
0000b4  2802              CMP      r0,#2                 ;341
0000b6  d000              BEQ      |L7.186|
0000b8  7035              STRB     r5,[r6,#0]            ;343
                  |L7.186|
0000ba  230a              MOVS     r3,#0xa               ;343
0000bc  2200              MOVS     r2,#0                 ;343
0000be  21e6              MOVS     r1,#0xe6              ;343
0000c0  20e1              MOVS     r0,#0xe1              ;343
0000c2  f7fffffe          BL       mess_send
0000c6  f04f0201          MOV      r2,#1                 ;344
0000ca  f04f0000          MOV      r0,#0                 ;344
0000ce  f9b73000          LDRSH    r3,[r7,#0]            ;349
0000d2  f9b87000          LDRSH    r7,[r8,#0]            ;349
0000d6  f9bac000          LDRSH    r12,[r10,#0]          ;350
0000da  e00d              B        |L7.248|
                  |L7.220|
0000dc  eb0001c0          ADD      r1,r0,r0,LSL #3       ;352
0000e0  eb011100          ADD      r1,r1,r0,LSL #4       ;352
0000e4  eb090181          ADD      r1,r9,r1,LSL #2       ;352
0000e8  69c9              LDR      r1,[r1,#0x1c]         ;353
0000ea  4299              CMP      r1,r3                 ;353
0000ec  da09              BGE      |L7.258|
0000ee  42b9              CMP      r1,r7                 ;353
0000f0  dd07              BLE      |L7.258|
0000f2  f1000001          ADD      r0,r0,#1              ;357
0000f6  b2c0              UXTB     r0,r0                 ;357
                  |L7.248|
0000f8  4560              CMP      r0,r12                ;359
0000fa  dbef              BLT      |L7.220|
                  |L7.252|
0000fc  2a01              CMP      r2,#1                 ;359
0000fe  d003              BEQ      |L7.264|
000100  e016              B        |L7.304|
                  |L7.258|
000102  f04f0200          MOV      r2,#0                 ;360
000106  e7f9              B        |L7.252|
                  |L7.264|
000108  20ee              MOVS     r0,#0xee              ;362
00010a  e9cd0500          STRD     r0,r5,[sp,#0]         ;362
00010e  9502              STR      r5,[sp,#8]            ;362
000110  9503              STR      r5,[sp,#0xc]          ;362
000112  7831              LDRB     r1,[r6,#0]            ;363  ; uavt_bps_pntr
000114  4603              MOV      r3,r0                 ;363
000116  2216              MOVS     r2,#0x16              ;363
000118  4608              MOV      r0,r1                 ;363
00011a  f7fffffe          BL       mcp2515_transmit
00011e  7830              LDRB     r0,[r6,#0]            ;368  ; uavt_bps_pntr
000120  1c40              ADDS     r0,r0,#1              ;368
000122  b2c0              UXTB     r0,r0                 ;368
000124  7030              STRB     r0,[r6,#0]            ;369
000126  f9ba1000          LDRSH    r1,[r10,#0]           ;369  ; NUMIST
00012a  4288              CMP      r0,r1                 ;371
00012c  db00              BLT      |L7.304|
00012e  7025              STRB     r5,[r4,#0]            ;371
                  |L7.304|
000130  7820              LDRB     r0,[r4,#0]            ;371  ; uavt_set_stat
000132  f88b0000          STRB     r0,[r11,#0]           ;371
000136  e8bd9fff          POP      {r0-r12,pc}           ;372
;;;918    
                          ENDP

00013a  0000              DCW      0x0000
                  |L7.316|
                          DCD      uavt_set_stat
                  |L7.320|
                          DCD      U_AVT
                  |L7.324|
                          DCD      uavt_set_stat_old
                  |L7.328|
                          DCD      uavt_bps_pntr
                  |L7.332|
                          DCD      u_max_temp
                  |L7.336|
                          DCD      u_min_temp
                  |L7.340|
                          DCD      bps
                  |L7.344|
                          DCD      NUMIST

                          AREA ||area_number.8||, CODE, READONLY, ALIGN=2

                          EXPORTAS ||area_number.8||, ||.text||
                  averageChargeStartStop PROC
;;;306    // заполнение флагов для АКБ
;;;307    void bat_flag (void)
000000  4908              LDR      r1,|L8.36|
;;;308    {  
000002  f44f70b4          MOV      r0,#0x168
;;;309    if(spc_stat!=spcVZ) 
;;;310    	{
;;;311    	vz_error=0;
000006  780a              LDRB     r2,[r1,#0]  ; hv_vz_stat
000008  b132              CBZ      r2,|L8.24|
00000a  f04f0200          MOV      r2,#0                 ;309
00000e  700a              STRB     r2,[r1,#0]            ;309
000010  f04f0100          MOV      r1,#0
;;;312    	sp_ch_error=0;
;;;313    	vz1_error=0;
000014  f7ffbffe          B.W      lc640_write
                  |L8.24|
;;;314    	vz2_error=0;
;;;315    	}
;;;316    
;;;317    if(!snmp_bat_status[0])	 			//Батарея №1
000018  f04f0201          MOV      r2,#1
;;;318    	{
;;;319    	if((bat[0]._Ub<(USIGN*10)))		//Снижение напряжения батареи ниже Uбсигн 
00001c  700a              STRB     r2,[r1,#0]
00001e  4611              MOV      r1,r2
000020  f7ffbffe          B.W      lc640_write
;;;320    		{
;;;321    		snmp_bat_flag[0]|=0x0001; 
;;;322    		if((snmp_bat_flag_puts[0]&0x0001)==0) 
;;;323    			{
;;;324    			snmp_trap_send("BAT #1 Alarm, battery is low",5,8,0); 
;;;325    			snmp_bat_flag_puts[0]|=0x0001;
;;;326    			}
;;;327    		}
;;;328    	else 
;;;329    		{
;;;330    		snmp_bat_flag[0]&=~0x0001; 
;;;331    		if(snmp_bat_flag_puts[0]&0x0001) 
;;;332    			{
;;;333    			snmp_trap_send("BAT #1 Alarm clear, battery is not low",5,8,1);
;;;334    			snmp_bat_flag_puts[0]&=~0x0001;
;;;335    			}
;;;336    		}
;;;337    
;;;338    	if(bat[0]._temper_stat&0x01)	//Повышенная температура батареи, первый порог - предупреждение
;;;339    		{
;;;340    		snmp_bat_flag[0]|=0x0002;
;;;341    		if((snmp_bat_flag_puts[0]&0x0002)==0) 
;;;342    			{
;;;343    			snmp_trap_send("BAT #1 Warning, high battery temperature",5,8,2); 
;;;344    			snmp_bat_flag_puts[0]|=0x0002;
;;;345    			}
;;;346    		}
;;;347    	else 
;;;348    		{
;;;349    		snmp_bat_flag[0]&=~0x0002;
;;;350    		if(snmp_bat_flag_puts[0]&0x0002) 
;;;351    			{
;;;352    			snmp_trap_send("BAT #1 Warning clear, battery temperature is normal",5,8,3);
;;;353    			snmp_bat_flag_puts[0]&=~0x02;
;;;354    			}
;;;355    		}
;;;356    
;;;357    	if(bat[0]._temper_stat&0x02)  	//Повышенная температура батареи, второй порог - авария
;;;358    		{
;;;359    		snmp_bat_flag[0]|=0x0004;
;;;360    		if((snmp_bat_flag_puts[0]&0x0004)==0) 
;;;361    			{
;;;362    			snmp_trap_send("BAT #1 Alarm, high battery temperature",5,8,4); 
;;;363    			snmp_bat_flag_puts[0]|=0x0004;
;;;364    			}
;;;365    		}
;;;366    	else 
;;;367    		{
;;;368    		snmp_bat_flag[0]&=~0x0004;
;;;369    		if(snmp_bat_flag_puts[0]&0x0004) 
;;;370    			{
;;;371    			snmp_trap_send("BAT #1 Alarm clear, battery temperature is normal",5,8,5);
;;;372    			snmp_bat_flag_puts[0]&=~0x0004;
;;;373    			}
;;;374    		}
;;;375    
;;;376    	if(bat[0]._Ib<(-IKB)) snmp_bat_flag[0]|=0x0008;		//Разряд батареи
;;;377    	else if(bat[0]._Ib>IKB) snmp_bat_flag[0]&=~0x0008;	//Заряд батареи
;;;378    
;;;379    	if((spc_stat==spcKE)&&(spc_bat==0))					//Контроль емкости батареи №1 
;;;380    		{
;;;381    		snmp_bat_flag[0]|=0x0010;
;;;382    		if((snmp_bat_flag_puts[0]&0x0010)==0) 
;;;383    			{
;;;384    			snmp_trap_send("BAT #1, capacity test started",5,8,6); 
;;;385    			snmp_bat_flag_puts[0]|=0x0010;
;;;386    			}
;;;387    		}
;;;388    	else 
;;;389    		{
;;;390    		snmp_bat_flag[0]&=~0x0010;
;;;391    		if(snmp_bat_flag_puts[0]&0x0010) 
;;;392    			{
;;;393    			snmp_trap_send("BAT #1, capacity test stopped",5,8,7);
;;;394    			snmp_bat_flag_puts[0]&=~0x0010;
;;;395    			}
;;;396    		}
;;;397    		
;;;398    	if(spc_stat==spcVZ)									//Выравнивающий заряд 
;;;399    		{
;;;400    		snmp_bat_flag[0]|=0x0020;
;;;401    		if((snmp_bat_flag_puts[0]&0x0020)==0) 
;;;402    			{
;;;403    			snmp_trap_send("BAT #1,leveling charge is started",5,8,8); 
;;;404    			snmp_bat_flag_puts[0]|=0x0020;
;;;405    			}
;;;406    		}
;;;407    	else 
;;;408    		{
;;;409    		snmp_bat_flag[0]&=~0x0020;
;;;410    		if(snmp_bat_flag_puts[0]&0x0020) 
;;;411    			{
;;;412    			snmp_trap_send("BAT #1,leveling charge is stopped",5,8,9);
;;;413    			snmp_bat_flag_puts[0]&=~0x0020;
;;;414    			}
;;;415    		}
;;;416    
;;;417    	if(vz_error)										 //Выравнивающий заряд заблокирован по вентиляции
;;;418    		{
;;;419    		snmp_bat_flag[0]|=0x0040;
;;;420    		if((snmp_bat_flag_puts[0]&0x0040)==0) 
;;;421    			{
;;;422    			snmp_trap_send("BAT #1,leveling charge is blocked",5,8,10); 
;;;423    			snmp_bat_flag_puts[0]|=0x0040;
;;;424    			}
;;;425    		}
;;;426    	else 
;;;427    		{
;;;428    		snmp_bat_flag[0]&=~0x0040;
;;;429    		if(snmp_bat_flag_puts[0]&0x0040) 
;;;430    			{
;;;431    			snmp_trap_send("BAT #1,leveling charge is unblocked",5,8,11);
;;;432    			snmp_bat_flag_puts[0]&=~0x0040;
;;;433    			} 
;;;434    		}
;;;435    
;;;436    	if(sp_ch_stat==scsWRK) 								//Ускореннный заряд
;;;437    		{
;;;438    		snmp_bat_flag[0]|=0x0080;
;;;439    		if((snmp_bat_flag_puts[0]&0x0080)==0) 
;;;440    			{
;;;441    			snmp_trap_send("BAT #1,speed charge is started",5,8,10); 
;;;442    			snmp_bat_flag_puts[0]|=0x0080;
;;;443    			}
;;;444    		}
;;;445    	else 
;;;446    		{
;;;447    		snmp_bat_flag[0]&=~0x0080;
;;;448    		if(snmp_bat_flag_puts[0]&0x0080) 
;;;449    			{
;;;450    			snmp_trap_send("BAT #1,speed charge is stopped",5,8,11);
;;;451    			snmp_bat_flag_puts[0]&=~0x0080;
;;;452    			}
;;;453    		}
;;;454    
;;;455    	if(sp_ch_error) 									//Ускореннный заряд заблокирован по вентиляции
;;;456    		{
;;;457    		snmp_bat_flag[0]|=0x0100;
;;;458    		if((snmp_bat_flag_puts[0]&0x0100)==0) 
;;;459    			{
;;;460    			snmp_trap_send("BAT #1,speed charge is blocked",5,8,12); 
;;;461    			snmp_bat_flag_puts[0]|=0x0100;
;;;462    			}
;;;463    		}
;;;464    	else 
;;;465    		{
;;;466    		snmp_bat_flag[0]&=~0x0100;
;;;467    		if(snmp_bat_flag_puts[0]&0x0100) 
;;;468    			{
;;;469    			snmp_trap_send("BAT #1,speed charge is unblocked",5,8,13);
;;;470    			snmp_bat_flag_puts[0]&=~0x0100;
;;;471    			} 
;;;472    		}
;;;473    
;;;474    	if(vz1_stat!=vz1sOFF)								//Уравнительный заряд 
;;;475    		{
;;;476    		snmp_bat_flag[0]|=0x0200;
;;;477    		if((snmp_bat_flag_puts[0]&0x0200)==0) 
;;;478    			{
;;;479    			snmp_trap_send("BAT #1,equalising charge is on",5,8,14); 
;;;480    			snmp_bat_flag_puts[0]|=0x0200;
;;;481    			}
;;;482    		}
;;;483    	else 
;;;484    		{
;;;485    		snmp_bat_flag[0]&=~0x0200;
;;;486    		if(snmp_bat_flag_puts[0]&0x0200) 
;;;487    			{
;;;488    			snmp_trap_send("BAT #1,equalising charge is off",5,8,15);
;;;489    			snmp_bat_flag_puts[0]&=~0x0200;
;;;490    			}
;;;491    		}
;;;492    
;;;493    	if(vz1_error)										//Уравнительный заряд заблокирован по вентиляции 
;;;494    		{
;;;495    		snmp_bat_flag[0]|=0x0400;
;;;496    		if((snmp_bat_flag_puts[0]&0x0400)==0) 
;;;497    			{
;;;498    			snmp_trap_send("BAT #1,equalising charge is blocked",5,8,16); 
;;;499    			snmp_bat_flag_puts[0]|=0x0400;
;;;500    			}
;;;501    		}
;;;502    	else 
;;;503    		{
;;;504    		snmp_bat_flag[0]&=~0x0400;
;;;505    		if(snmp_bat_flag_puts[0]&0x0400) 
;;;506    			{
;;;507    			snmp_trap_send("BAT #1,equalising charge is unblocked",5,8,17);
;;;508    			snmp_bat_flag_puts[0]&=~0x0400;
;;;509    			} 
;;;510    		}
;;;511    
;;;512    	if(vz2_stat!=vz2sOFF)								//Формовочный заряд 
;;;513    		{
;;;514    		snmp_bat_flag[0]|=0x0800;
;;;515    		if((snmp_bat_flag_puts[0]&0x0800)==0) 
;;;516    			{
;;;517    			snmp_trap_send("BAT #1,molding charge is on",5,8,18); 
;;;518    			snmp_bat_flag_puts[0]|=0x0800;
;;;519    			}
;;;520    		}
;;;521    	else 
;;;522    		{
;;;523    		snmp_bat_flag[0]&=~0x0800;
;;;524    		if(snmp_bat_flag_puts[0]&0x0800) 
;;;525    			{
;;;526    			snmp_trap_send("BAT #1,molding charge is off",5,8,19);
;;;527    			snmp_bat_flag_puts[0]&=~0x0800;
;;;528    			}
;;;529    		}
;;;530    
;;;531    	if(vz2_error) 										//Формовочный заряд заблокирован по вентиляции
;;;532    		{
;;;533    		snmp_bat_flag[0]|=0x1000;
;;;534    		if((snmp_bat_flag_puts[0]&0x1000)==0) 
;;;535    			{
;;;536    			snmp_trap_send("BAT #1,molding charge is blocked",5,8,20); 
;;;537    			snmp_bat_flag_puts[0]|=0x1000;
;;;538    			}
;;;539    		}
;;;540    	else 
;;;541    		{
;;;542    		snmp_bat_flag[0]&=~0x1000;
;;;543    		if(snmp_bat_flag_puts[0]&0x1000) 
;;;544    			{
;;;545    			snmp_trap_send("BAT #1,molding charge is unblocked",5,8,21);
;;;546    			snmp_bat_flag_puts[0]&=~0x1000;
;;;547    			} 
;;;548    		}
;;;549    	}
;;;550    else 
;;;551    	{
;;;552    	snmp_bat_flag[0]=0; 
;;;553    	snmp_bat_flag_puts[0]=0;
;;;554    	}
;;;555    
;;;556    if(!snmp_bat_status[1])	 			//Батарея №2
;;;557    	{
;;;558    	if((bat[1]._Ub<(USIGN*10)))		//Снижение напряжения батареи ниже Uбсигн 
;;;559    		{
;;;560    		snmp_bat_flag[1]|=0x0001; 
;;;561    		if((snmp_bat_flag_puts[1]&0x0001)==0) 
;;;562    			{
;;;563    			snmp_trap_send("BAT #2 Alarm, battery is low",5,8,22); 
;;;564    			snmp_bat_flag_puts[1]|=0x0001;
;;;565    			}
;;;566    		}
;;;567    	else 
;;;568    		{
;;;569    		snmp_bat_flag[1]&=~0x0001; 
;;;570    		if(snmp_bat_flag_puts[1]&0x0001) 
;;;571    			{
;;;572    			snmp_trap_send("BAT #2 Alarm clear, battery is not low",5,8,23);
;;;573    			snmp_bat_flag_puts[1]&=~0x0001;
;;;574    			}
;;;575    		}
;;;576    
;;;577    	if(bat[1]._temper_stat&0x01)	//Повышенная температура батареи, первый порог - предупреждение
;;;578    		{
;;;579    		snmp_bat_flag[1]|=0x0002;
;;;580    		if((snmp_bat_flag_puts[0]&0x0002)==0) 
;;;581    			{
;;;582    			snmp_trap_send("BAT #2 Warning, high battery temperature",5,8,24); 
;;;583    			snmp_bat_flag_puts[1]|=0x0002;
;;;584    			}
;;;585    		}
;;;586    	else 
;;;587    		{
;;;588    		snmp_bat_flag[1]&=~0x0002;
;;;589    		if(snmp_bat_flag_puts[1]&0x0002) 
;;;590    			{
;;;591    			snmp_trap_send("BAT #2 Warning clear, battery temperature is normal",5,8,25);
;;;592    			snmp_bat_flag_puts[1]&=~0x02;
;;;593    			}
;;;594    		}
;;;595    
;;;596    	if(bat[1]._temper_stat&0x02)  	//Повышенная температура батареи, второй порог - авария
;;;597    		{
;;;598    		snmp_bat_flag[1]|=0x0004;
;;;599    		if((snmp_bat_flag_puts[1]&0x0004)==0) 
;;;600    			{
;;;601    			snmp_trap_send("BAT #2 Alarm, high battery temperature",5,8,26); 
;;;602    			snmp_bat_flag_puts[1]|=0x0004;
;;;603    			}
;;;604    		}
;;;605    	else 
;;;606    		{
;;;607    		snmp_bat_flag[1]&=~0x0004;
;;;608    		if(snmp_bat_flag_puts[1]&0x0004) 
;;;609    			{
;;;610    			snmp_trap_send("BAT #2 Alarm clear, battery temperature is normal",5,8,27);
;;;611    			snmp_bat_flag_puts[1]&=~0x0004;
;;;612    			}
;;;613    		}
;;;614    
;;;615    	if(bat[1]._Ib<(-IKB)) snmp_bat_flag[1]|=0x0008;		//Разряд батареи
;;;616    	else if(bat[1]._Ib>IKB) snmp_bat_flag[1]&=~0x0008;	//Заряд батареи
;;;617    
;;;618    	if((spc_stat==spcKE)&&(spc_bat==0))					//Контроль емкости батареи №1 
;;;619    		{
;;;620    		snmp_bat_flag[1]|=0x0010;
;;;621    		if((snmp_bat_flag_puts[1]&0x0010)==0) 
;;;622    			{
;;;623    			snmp_trap_send("BAT #2, capacity test started",5,8,28); 
;;;624    			snmp_bat_flag_puts[1]|=0x0010;
;;;625    			}
;;;626    		}
;;;627    	else 
;;;628    		{
;;;629    		snmp_bat_flag[1]&=~0x0010;
;;;630    		if(snmp_bat_flag_puts[1]&0x0010) 
;;;631    			{
;;;632    			snmp_trap_send("BAT #2, capacity test stopped",5,8,29);
;;;633    			snmp_bat_flag_puts[1]&=~0x0010;
;;;634    			}
;;;635    		}
;;;636    		
;;;637    	if(spc_stat==spcVZ)									//Выравнивающий заряд 
;;;638    		{
;;;639    		snmp_bat_flag[1]|=0x0020;
;;;640    		if((snmp_bat_flag_puts[1]&0x0020)==0) 
;;;641    			{
;;;642    			snmp_trap_send("BAT #2,leveling charge is started",5,8,30); 
;;;643    			snmp_bat_flag_puts[1]|=0x0020;
;;;644    			}
;;;645    		}
;;;646    	else 
;;;647    		{
;;;648    		snmp_bat_flag[1]&=~0x0020;
;;;649    		if(snmp_bat_flag_puts[1]&0x0020) 
;;;650    			{
;;;651    			snmp_trap_send("BAT #2,leveling charge is stopped",5,8,31);
;;;652    			snmp_bat_flag_puts[1]&=~0x0020;
;;;653    			}
;;;654    		}
;;;655    
;;;656    	if(vz_error)										 //Выравнивающий заряд заблокирован по вентиляции
;;;657    		{
;;;658    		snmp_bat_flag[1]|=0x0040;
;;;659    		if((snmp_bat_flag_puts[1]&0x0040)==0) 
;;;660    			{
;;;661    			snmp_trap_send("BAT #2,leveling charge is blocked",5,8,32); 
;;;662    			snmp_bat_flag_puts[1]|=0x0040;
;;;663    			}
;;;664    		}
;;;665    	else 
;;;666    		{
;;;667    		snmp_bat_flag[1]&=~0x0040;
;;;668    		if(snmp_bat_flag_puts[1]&0x0040) 
;;;669    			{
;;;670    			snmp_trap_send("BAT #2,leveling charge is unblocked",5,8,33);
;;;671    			snmp_bat_flag_puts[1]&=~0x0040;
;;;672    			} 
;;;673    		}
;;;674    
;;;675    	if(sp_ch_stat==scsWRK) 								//Ускореннный заряд
;;;676    		{
;;;677    		snmp_bat_flag[1]|=0x0080;
;;;678    		if((snmp_bat_flag_puts[1]&0x0080)==0) 
;;;679    			{
;;;680    			snmp_trap_send("BAT #2,speed charge is started",5,8,34); 
;;;681    			snmp_bat_flag_puts[1]|=0x0080;
;;;682    			}
;;;683    		}
;;;684    	else 
;;;685    		{
;;;686    		snmp_bat_flag[1]&=~0x0080;
;;;687    		if(snmp_bat_flag_puts[1]&0x0080) 
;;;688    			{
;;;689    			snmp_trap_send("BAT #2,speed charge is stopped",5,8,35);
;;;690    			snmp_bat_flag_puts[1]&=~0x0080;
;;;691    			}
;;;692    		}
;;;693    
;;;694    	if(sp_ch_error) 									//Ускореннный заряд заблокирован по вентиляции
;;;695    		{
;;;696    		snmp_bat_flag[1]|=0x0100;
;;;697    		if((snmp_bat_flag_puts[1]&0x0100)==0) 
;;;698    			{
;;;699    			snmp_trap_send("BAT #2,speed charge is blocked",5,8,36); 
;;;700    			snmp_bat_flag_puts[1]|=0x0100;
;;;701    			}
;;;702    		}
;;;703    	else 
;;;704    		{
;;;705    		snmp_bat_flag[1]&=~0x0100;
;;;706    		if(snmp_bat_flag_puts[1]&0x0100) 
;;;707    			{
;;;708    			snmp_trap_send("BAT #2,speed charge is unblocked",5,8,37);
;;;709    			snmp_bat_flag_puts[1]&=~0x0100;
;;;710    			} 
;;;711    		}
;;;712    
;;;713    	if(vz1_stat!=vz1sOFF)								//Уравнительный заряд 
;;;714    		{
;;;715    		snmp_bat_flag[1]|=0x0200;
;;;716    		if((snmp_bat_flag_puts[1]&0x0200)==0) 
;;;717    			{
;;;718    			snmp_trap_send("BAT #2,equalising charge is on",5,8,38); 
;;;719    			snmp_bat_flag_puts[1]|=0x0200;
;;;720    			}
;;;721    		}
;;;722    	else 
;;;723    		{
;;;724    		snmp_bat_flag[1]&=~0x0200;
;;;725    		if(snmp_bat_flag_puts[1]&0x0200) 
;;;726    			{
;;;727    			snmp_trap_send("BAT #2,equalising charge is off",5,8,39);
;;;728    			snmp_bat_flag_puts[1]&=~0x0200;
;;;729    			}
;;;730    		}
;;;731    
;;;732    	if(vz1_error)										//Уравнительный заряд заблокирован по вентиляции 
;;;733    		{
;;;734    		snmp_bat_flag[1]|=0x0400;
;;;735    		if((snmp_bat_flag_puts[1]&0x0400)==0) 
;;;736    			{
;;;737    			snmp_trap_send("BAT #2,equalising charge is blocked",5,8,40); 
;;;738    			snmp_bat_flag_puts[1]|=0x0400;
;;;739    			}
;;;740    		}
;;;741    	else 
;;;742    		{
;;;743    		snmp_bat_flag[1]&=~0x0400;
;;;744    		if(snmp_bat_flag_puts[1]&0x0400) 
;;;745    			{
;;;746    			snmp_trap_send("BAT #2,equalising charge is unblocked",5,8,41);
;;;747    			snmp_bat_flag_puts[1]&=~0x0400;
;;;748    			} 
;;;749    		}
;;;750    
;;;751    	if(vz2_stat!=vz2sOFF)								//Формовочный заряд 
;;;752    		{
;;;753    		snmp_bat_flag[1]|=0x0800;
;;;754    		if((snmp_bat_flag_puts[1]&0x0800)==0) 
;;;755    			{
;;;756    			snmp_trap_send("BAT #2,molding charge is on",5,8,42); 
;;;757    			snmp_bat_flag_puts[1]|=0x0800;
;;;758    			}
;;;759    		}
;;;760    	else 
;;;761    		{
;;;762    		snmp_bat_flag[1]&=~0x0800;
;;;763    		if(snmp_bat_flag_puts[1]&0x0800) 
;;;764    			{
;;;765    			snmp_trap_send("BAT #2,molding charge is off",5,8,43);
;;;766    			snmp_bat_flag_puts[1]&=~0x0800;
;;;767    			}
;;;768    		}
;;;769    
;;;770    	if(vz2_error) 										//Формовочный заряд заблокирован по вентиляции
;;;771    		{
;;;772    		snmp_bat_flag[1]|=0x1000;
;;;773    		if((snmp_bat_flag_puts[1]&0x1000)==0) 
;;;774    			{
;;;775    			snmp_trap_send("BAT #2,molding charge is blocked",5,8,44); 
;;;776    			snmp_bat_flag_puts[1]|=0x1000;
;;;777    			}
;;;778    		}
;;;779    	else 
;;;780    		{
;;;781    		snmp_bat_flag[1]&=~0x1000;
;;;782    		if(snmp_bat_flag_puts[1]&0x1000) 
;;;783    			{
;;;784    			snmp_trap_send("BAT #2,molding charge is unblocked",5,8,45);
;;;785    			snmp_bat_flag_puts[1]&=~0x1000;
;;;786    			} 
;;;787    		}
;;;788    	}
;;;789    else 
;;;790    	{
;;;791    	snmp_bat_flag[1]=0; 
;;;792    	snmp_bat_flag_puts[1]=0;
;;;793    	}
;;;794    /*
;;;795    if(!snmp_bat_status[1])
;;;796    	{
;;;797    	if((bat[1]._Ub<(USIGN*10))) 
;;;798    		{
;;;799    		snmp_bat_flag[1]|=0x01; 
;;;800    		if((snmp_bat_flag_puts[1]&0x01)==0) 
;;;801    			{
;;;802    			snmp_trap_send("BAT #2 Alarm, battery is low",5,8,0); 
;;;803    			snmp_bat_flag_puts[1]|=0x01;
;;;804    			}
;;;805    		}
;;;806    	else 
;;;807    		{
;;;808    		snmp_bat_flag[1]&=~0x01; 
;;;809    		if(snmp_bat_flag_puts[1]&0x01) 
;;;810    			{
;;;811    			snmp_trap_send("BAT #2 Alarm clear, battery is not low",5,8,1);
;;;812    			snmp_bat_flag_puts[1]&=~0x01;
;;;813    			}
;;;814    		}
;;;815    	if(bat[1]._temper_stat&0x01) 
;;;816    		{
;;;817    		snmp_bat_flag[1]|=0x02;
;;;818    		if((snmp_bat_flag_puts[1]&0x02)==0) 
;;;819    			{
;;;820    			snmp_trap_send("BAT #2 Alarm, high battery temperature",5,8,2); 
;;;821    			snmp_bat_flag_puts[1]|=0x02;
;;;822    			}
;;;823    		}
;;;824    	else 
;;;825    		{
;;;826    		snmp_bat_flag[1]&=~0x02;
;;;827    		if(snmp_bat_flag_puts[1]&0x02) 
;;;828    			{
;;;829    			snmp_trap_send("BAT #2 Alarm clear, battery temperature is normal",5,8,3);
;;;830    			snmp_bat_flag_puts[1]&=~0x02;
;;;831    			}
;;;832    		}
;;;833    	if(bat[1]._temper_stat&0x02) 
;;;834    		{
;;;835    		snmp_bat_flag[1]|=0x04;
;;;836    		if((snmp_bat_flag_puts[1]&0x04)==0) 
;;;837    			{
;;;838    			snmp_trap_send("BAT #2 Alarm, maximum battery temperature",5,8,4); 
;;;839    			snmp_bat_flag_puts[1]|=0x04;
;;;840    			}
;;;841    		}
;;;842    	else 
;;;843    		{
;;;844    		snmp_bat_flag[1]&=~0x04;
;;;845    		if(snmp_bat_flag_puts[1]&0x04) 
;;;846    			{
;;;847    			snmp_trap_send("BAT #2 Alarm clear, battery temperature is normal",5,8,5);
;;;848    			snmp_bat_flag_puts[1]&=~0x04;
;;;849    			}
;;;850    		}
;;;851    		
;;;852    	if(bat[1]._Ib<(-IKB))	snmp_bat_flag[1]|=0x80;
;;;853    	else if(bat[1]._Ib>IKB)snmp_bat_flag[1]&=~0x80;
;;;854    
;;;855    	if((spc_stat==spcKE)&&(spc_bat==1)) 
;;;856    		{
;;;857    		snmp_bat_flag[1]|=0x10;
;;;858    		if((snmp_bat_flag_puts[1]&0x10)==0) 
;;;859    			{
;;;860    			snmp_trap_send("BAT #2, capacity check enabled",5,8,6); 
;;;861    			snmp_bat_flag_puts[1]|=0x10;
;;;862    			}
;;;863    		}
;;;864    	else 
;;;865    		{
;;;866    		snmp_bat_flag[1]&=~0x10;
;;;867    		if(snmp_bat_flag_puts[1]&0x10) 
;;;868    			{
;;;869    			snmp_trap_send("BAT #2, capacity check disabled",5,8,7);
;;;870    			snmp_bat_flag_puts[1]&=~0x10;
;;;871    			}
;;;872    		}
;;;873    		
;;;874    	if(spc_stat==spcVZ) 
;;;875    		{
;;;876    		snmp_bat_flag[1]|=0x20;
;;;877    		if((snmp_bat_flag_puts[1]&0x20)==0) 
;;;878    			{
;;;879    			snmp_trap_send("BAT #2,equalizing charge is on",5,8,8); 
;;;880    			snmp_bat_flag_puts[1]|=0x20;
;;;881    			}
;;;882    		}
;;;883    	else 
;;;884    		{
;;;885    		snmp_bat_flag[1]&=~0x20;
;;;886    		if(snmp_bat_flag_puts[1]&0x20) 
;;;887    			{
;;;888    			snmp_trap_send("BAT #2,equalizing charge is off",5,8,9);
;;;889    			snmp_bat_flag_puts[1]&=~0x20;
;;;890    			}
;;;891    		}
;;;892    
;;;893    	if(vz_error) 
;;;894    		{
;;;895    		snmp_bat_flag[1]|=0x40;
;;;896    		if((snmp_bat_flag_puts[1]&0x40)==0) 
;;;897    			{
;;;898    			snmp_trap_send("BAT #2,equalizing charge blocked",5,8,10); 
;;;899    			snmp_bat_flag_puts[1]|=0x40;
;;;900    			}
;;;901    		}
;;;902    	else 
;;;903    		{
;;;904    		snmp_bat_flag[1]&=~0x40;
;;;905    		if(snmp_bat_flag_puts[1]&0x40) 
;;;906    			{
;;;907    			snmp_trap_send("BAT #2,equalizing charge is not blocked",5,8,11);
;;;908    			snmp_bat_flag_puts[1]&=~0x40;
;;;909    			} 
;;;910    		}
;;;911       }
;;;912    else 
;;;913    	{
;;;914    	snmp_bat_flag[1]=0; 
;;;915    	snmp_bat_flag_puts[1]=0;
;;;916    	} */
;;;917    }
;;;918    
                          ENDP

                  |L8.36|
                          DCD      hv_vz_stat

                          AREA ||.bss||, DATA, NOINIT, ALIGN=2

                  i_bat_buff
                          %        12
                  adc_buff
                          %        1024
                  adc_buff_
                          %        32
                  main_power_buffer
                          %        32
                  I_from_t_table
                          %        14
                  U_end_from_i_table
                          %        14
                  bat_hndl_plazma
                          %        20

                          AREA ||area_number.11||, DATA, NOINIT, ALIGN=1

                          EXPORTAS ||area_number.11||, ||.bss||
                  adc_buff_max
                          %        24

                          AREA ||area_number.12||, DATA, NOINIT, ALIGN=1

                          EXPORTAS ||area_number.12||, ||.bss||
                  net_buff
                          %        64

                          AREA ||.constdata||, DATA, READONLY, ALIGN=0

                  sk_buff_KONTUR
000000  0d0b0f0e          DCB      0x0d,0x0b,0x0f,0x0e

                          AREA ||area_number.15||, DATA, READONLY, ALIGN=0

                          EXPORTAS ||area_number.15||, ||.constdata||
                  sk_buff_RSTKM
000000  0d0b0f0e          DCB      0x0d,0x0b,0x0f,0x0e

                          AREA ||area_number.16||, DATA, READONLY, ALIGN=0

                          EXPORTAS ||area_number.16||, ||.constdata||
                  sk_buff_GLONASS
000000  0b0d0f0e          DCB      0x0b,0x0d,0x0f,0x0e

                          AREA ||area_number.17||, DATA, READONLY, ALIGN=0

                          EXPORTAS ||area_number.17||, ||.constdata||
                  sk_buff_3U
000000  0b0d0f0e          DCB      0x0b,0x0d,0x0f,0x0e

                          AREA ||area_number.18||, DATA, READONLY, ALIGN=0

                          EXPORTAS ||area_number.18||, ||.constdata||
                  sk_buff_6U
000000  0b0d0f0e          DCB      0x0b,0x0d,0x0f,0x0e

                          AREA ||area_number.19||, DATA, READONLY, ALIGN=2

                          EXPORTAS ||area_number.19||, ||.constdata||
                  sk_buff_220
000000  0b0d0f0e          DCB      0x0b,0x0d,0x0f,0x0e
                          DCD      0x00000258
                          DCD      0x00000708
                          DCD      0x00000e10
                          DCD      0x00002a30
                          DCD      0x00004650
                          DCD      0x00008ca0
                          DCD      0x00011940
                          DCD      0x00000258
                          DCD      0x00000708
                          DCD      0x00000e10
                          DCD      0x00002a30
                          DCD      0x00004650
                          DCD      0x00008ca0
                          DCD      0x00011940

                          AREA ||area_number.20||, DATA, READONLY, ALIGN=0

                          EXPORTAS ||area_number.20||, ||.constdata||
                  sk_buff_TELECORE2015
000000  0b0d0f0e          DCB      0x0b,0x0d,0x0f,0x0e

                          AREA ||.data||, DATA, ALIGN=1

                  adc_buff_min
000000  13881388          DCW      0x1388,0x1388
000004  13881388          DCW      0x1388,0x1388
000008  13881388          DCW      0x1388,0x1388
00000c  13881388          DCW      0x1388,0x1388
000010  13881388          DCW      0x1388,0x1388
                          DCDU     0x00000000

                          AREA ||area_number.22||, DATA, ALIGN=1

                          EXPORTAS ||area_number.22||, ||.data||
                  unet_buff_min
000000  1388              DCW      0x1388

                          AREA ||area_number.23||, DATA, ALIGN=0

                          EXPORTAS ||area_number.23||, ||.data||
                  adc_stat
000000  01                DCB      0x01

                          AREA ||area_number.24||, DATA, ALIGN=1

                          EXPORTAS ||area_number.24||, ||.data||
                  bat_ver_cnt
000000  0096              DCW      0x0096

                          AREA ||area_number.25||, DATA, ALIGN=2

                          EXPORTAS ||area_number.25||, ||.data||
                  vent_stat
000000  00                DCB      0x00
                  vz_error
000001  00                DCB      0x00
                  sp_ch_error
000002  00                DCB      0x00
                  vz1_error
000003  00                DCB      0x00
                  vz2_error
000004  00                DCB      0x00
                  vz1_stat
000005  00                DCB      0x00
                  vz1_stat_old
000006  00                DCB      0x00
                  vz2_stat
000007  00                DCB      0x00
                  vz2_stat_old
000008  00                DCB      0x00
                  bat_hndl_zvu_init
000009  00                DCB      0x00
                  bat_hndl_zvu_ke_init
00000a  00                DCB      0x00
                  bat_hndl_i_vector
00000b  00                DCB      0x00
                  bat_hndl_i_vector_old
00000c  00                DCB      0x00
                  ke_drv_cnt_10s
00000d  00                DCB      0x00
                  i_bat_buff_cnt
00000e  00                DCB      0x00
                  cntrlStatIsDownCnt
00000f  00                DCB      0x00
                  adc_self_ch_cnt
000010  00                DCB      0x00
                  adc_ch_net
000011  00                DCB      0x00
                  adc_ch
000012  00                DCB      0x00
                  adc_ch_cnt
000013  00                DCB      0x00
                  adc_window_flag
000014  00                DCB      0x00
                  ch_cnt0
000015  00                DCB      0x00
                  b1Hz_ch
000016  00                DCB      0x00
                  i
000017  00                DCB      0x00
                  iiii
000018  00                DCB      0x00
                  bAVG
000019  00                DCB      0x00
                  avg_num
00001a  00                DCB      0x00
                  avg_vektor
00001b  00                DCB      0x00
                  kb_full_ver
00001c  00                DCB      0x00
                  kb_start_ips
00001d  00                DCB      0x00
                  num_of_wrks_bps
00001e  00                DCB      0x00
                  num_necc_up
00001f  00                DCB      0x00
                  num_necc_down
000020  00                DCB      0x00
                  sh_cnt0
000021  00                DCB      0x00
                  b1Hz_sh
000022  00                DCB      0x00
                  spc_stat
000023  00                DCB      0x00
                  spc_bat
000024  00                DCB      0x00
                  spc_phase
000025  00                DCB      0x00
                  bAVZ
000026  00                DCB      0x00
                  ke_start_stat
000027  00                DCB      0x00
                  numOfForvardBps
000028  00                DCB      0x00
                  numOfForvardBps_old
000029  00                DCB      0x00
                  numOfForvardBps_minCnt
00002a  00                DCB      0x00
                  bPARALLEL_NOT_ENOUG
00002b  00                DCB      0x00
                  bPARALLEL_ENOUG
00002c  00                DCB      0x00
                  bPARALLEL
00002d  00                DCB      0x00
                  cntrl_hndl_plazma
00002e  00                DCB      0x00
                  volt_region
00002f  00                DCB      0x00
                  bat_hndl_zvu_Q_cnt
000030  00                DCB      0x00
                  avar_bps_reset_cnt
000031  00                DCB      0x00
                  cntrl_stat
000032  0258              DCW      0x0258
                  cntrl_stat_old
000034  0258              DCW      0x0258
                  avg_main_cnt
000036  0014              DCW      0x0014
                  num_necc_block_cnt
000038  0000              DCB      0x00,0x00
                  net_buff_
00003a  0000              DCB      0x00,0x00
                  adc_result
00003c  0000              DCB      0x00,0x00
                  adc_gorb_cnt
00003e  0000              DCB      0x00,0x00
                  adc_zero_cnt
000040  0000              DCB      0x00,0x00
                  adc_window_cnt
000042  0000              DCB      0x00,0x00
                  adc_net_buff_cnt
000044  0000              DCB      0x00,0x00
                  plazma_sk
000046  0000              DCB      0x00,0x00
                  cntrl_stat_new
000048  0000              DCB      0x00,0x00
                  Ibmax
00004a  0000              DCB      0x00,0x00
                  IZMAX_
00004c  0000              DCB      0x00,0x00
                  Ubpsmax
00004e  0000              DCB      0x00,0x00
                  samokalibr_cnt
000050  0000              DCB      0x00,0x00
                  main_kb_cnt
000052  0000              DCB      0x00,0x00
                  kb_cnt_1lev
000054  0000              DCB      0x00,0x00
                  kb_cnt_2lev
000056  0000              DCB      0x00,0x00
                  kb_start
000058  0000              DCB      0x00,0x00
                  ibat_ips
00005a  0000              DCB      0x00,0x00
                  ibat_ips_
00005c  0000              DCB      0x00,0x00
                  bps_on_mask
00005e  0000              DCB      0x00,0x00
                  bps_off_mask
000060  0000              DCB      0x00,0x00
                  vz_cnt_s
000062  0000              DCB      0x00,0x00
                  vz_cnt_s_
000064  0000              DCB      0x00,0x00
                  vz_cnt_h
000066  0000              DCB      0x00,0x00
                  vz_cnt_h_
000068  0000              DCB      0x00,0x00
                  cnt_end_ke
00006a  0000              DCB      0x00,0x00
                  __ee_vz_cnt
00006c  0000              DCB      0x00,0x00
                  __ee_spc_stat
00006e  0000              DCB      0x00,0x00
                  __ee_spc_bat
000070  0000              DCB      0x00,0x00
                  __ee_spc_phase
000072  0000              DCB      0x00,0x00
                  cntrl_stat_blok_cnt
000074  0000              DCB      0x00,0x00
                  cntrl_stat_blok_cnt_
000076  0000              DCB      0x00,0x00
                  numOfForvardBps_hourCnt
000078  0000              DCB      0x00,0x00
                  vz1_stat_cnt
00007a  0000              DCB      0x00,0x00
                  volt_region_cnt
00007c  0000              DCB      0x00,0x00
                  vz2_stat_cnt
00007e  0000              DCB      0x00,0x00
                  vz2_stat_ph2_cnt
000080  0000              DCB      0x00,0x00
                  plazma_ica1
000082  0000              DCB      0x00,0x00
                  bat_hndl_i
000084  0000              DCB      0x00,0x00
                  bat_hndl_t_razr_hour
000086  0000              DCB      0x00,0x00
                  bat_hndl_t_razr_min
000088  0000              DCB      0x00,0x00
                  bat_hndl_t_razr_mininhour
00008a  0000              DCB      0x00,0x00
                  bat_hndl_i_temp
00008c  0000              DCB      0x00,0x00
                  bat_hndl_u_end
00008e  0000              DCB      0x00,0x00
                  bat_hndl_i_zar_price
                          DCD      0x00000000
                  ibat
                          DCD      0x00000000
                  ibat_
                          DCD      0x00000000
                  i_avg_max
                          DCD      0x00000000
                  i_avg_min
                          DCD      0x00000000
                  i_avg_summ
                          DCD      0x00000000
                  i_avg
                          DCD      0x00000000
                  avg
                          DCD      0x00000000
                  cntrl_stat_blok_cnt_plus
                          DCD      0x00000000
                  cntrl_stat_blok_cnt_minus
                          DCD      0x00000000
                  plazma_inv
                          DCD      0x00000000
                  vz1_wrk_cnt
                          DCD      0x00000000
                  vz1_up_cnt
                          DCD      0x00000000
                  vz2_wrk_cnt
                          DCD      0x00000000
                  vz2_up_cnt
                          DCD      0x00000000
                  bat_hndl_t_razr
                          DCD      0x00000000
                  bat_hndl_t_razr_ke
                          DCD      0x00000000
                  bat_hndl_zvu_Q
                          DCD      0x00000000
                  bat_hndl_proc_razr
                          DCD      0x00000000
                  bat_hndl_remain_time
                          DCD      0x00000000
                  amper_chas_cnt_drv_summ
                          DCD      0x00000000
                  bat_hndl_i_summ
                          DCD      0x00000000
                  net_metr_buff_
                          DCD      0x00000000
0000ec  0000              DCB      0x00,0x00
                  adc_self_ch_buff
0000ee  0000              DCB      0x00,0x00
                          DCD      0x00000000
                  adc_self_ch_disp
                          DCD      0x00000000
0000f8  00000000          DCB      0x00,0x00,0x00,0x00
                  ke_date
                          %        8

                          AREA ||area_number.26||, DATA, ALIGN=0

                          EXPORTAS ||area_number.26||, ||.data||
                  rx_read_power_cnt_phase
000000  0f                DCB      0x0f

                          AREA ||area_number.27||, DATA, ALIGN=1

                          EXPORTAS ||area_number.27||, ||.data||
                  read_power_cnt_main_cnt
000000  0064              DCW      0x0064

                          AREA ||area_number.28||, DATA, ALIGN=0

                          EXPORTAS ||area_number.28||, ||.data||
                  rx_read_power_cnt_plazma
000000  00                DCB      0x00

                          AREA ||area_number.29||, DATA, ALIGN=0

                          EXPORTAS ||area_number.29||, ||.data||
                  rx_read_power_cnt_flag
000000  00                DCB      0x00

                          AREA ||area_number.30||, DATA, ALIGN=0

                          EXPORTAS ||area_number.30||, ||.data||
                  bENERGOMETR_UIP
000000  00                DCB      0x00

                          AREA ||area_number.31||, DATA, ALIGN=1

                          EXPORTAS ||area_number.31||, ||.data||
                  unet_buff_max
000000  0000              DCB      0x00,0x00

                          AREA ||area_number.32||, DATA, ALIGN=0

                          EXPORTAS ||area_number.32||, ||.data||
                  adc_cnt
000000  00                DCB      0x00

                          AREA ||area_number.33||, DATA, ALIGN=0

                          EXPORTAS ||area_number.33||, ||.data||
                  adc_cnt1
000000  00                DCB      0x00

                          AREA ||area_number.34||, DATA, ALIGN=1

                          EXPORTAS ||area_number.34||, ||.data||
                  zero_cnt
000000  0000              DCB      0x00,0x00

                          AREA ||area_number.35||, DATA, ALIGN=0

                          EXPORTAS ||area_number.35||, ||.data||
                  net_buff_cnt
000000  00                DCB      0x00

                          AREA ||area_number.36||, DATA, ALIGN=1

                          EXPORTAS ||area_number.36||, ||.data||
                  ADWR
000000  0000              DCB      0x00,0x00

                          AREA ||area_number.37||, DATA, ALIGN=1

                          EXPORTAS ||area_number.37||, ||.data||
                  period_cnt
000000  0000              DCB      0x00,0x00

                          AREA ||area_number.38||, DATA, ALIGN=1

                          EXPORTAS ||area_number.38||, ||.data||
                  non_zero_cnt
000000  0000              DCB      0x00,0x00

                          AREA ||area_number.39||, DATA, ALIGN=0

                          EXPORTAS ||area_number.39||, ||.data||
                  rele_stat
000000  00                DCB      0x00

                          AREA ||area_number.40||, DATA, ALIGN=0

                          EXPORTAS ||area_number.40||, ||.data||
                  bRELE_OUT
000000  00                DCB      0x00

                          AREA ||area_number.41||, DATA, ALIGN=2

                          EXPORTAS ||area_number.41||, ||.data||
                  main_power_buffer_
                          DCD      0x00000000

                          AREA ||area_number.42||, DATA, ALIGN=1

                          EXPORTAS ||area_number.42||, ||.data||
                  main_power_buffer_cnt
000000  0000              DCB      0x00,0x00

                          AREA ||area_number.43||, DATA, ALIGN=1

                          EXPORTAS ||area_number.43||, ||.data||
                  adc_buff_out_
                          DCDU     0x00000000
000004  0000              DCB      0x00,0x00

                          AREA ||area_number.44||, DATA, ALIGN=1

                          EXPORTAS ||area_number.44||, ||.data||
                  plazma_adc_cnt
000000  0000              DCB      0x00,0x00

                          AREA ||area_number.45||, DATA, ALIGN=0

                          EXPORTAS ||area_number.45||, ||.data||
                  unh_cnt0
000000  00                DCB      0x00

                          AREA ||area_number.46||, DATA, ALIGN=0

                          EXPORTAS ||area_number.46||, ||.data||
                  unh_cnt1
000000  00                DCB      0x00

                          AREA ||area_number.47||, DATA, ALIGN=0

                          EXPORTAS ||area_number.47||, ||.data||
                  b1Hz_unh
000000  00                DCB      0x00

                          AREA ||area_number.48||, DATA, ALIGN=0

                          EXPORTAS ||area_number.48||, ||.data||
                  ch_cnt1
000000  00                DCB      0x00

                          AREA ||area_number.49||, DATA, ALIGN=0

                          EXPORTAS ||area_number.49||, ||.data||
                  b1_30Hz_ch
000000  00                DCB      0x00

                          AREA ||area_number.50||, DATA, ALIGN=0

                          EXPORTAS ||area_number.50||, ||.data||
                  ch_cnt2
000000  00                DCB      0x00

                          AREA ||area_number.51||, DATA, ALIGN=0

                          EXPORTAS ||area_number.51||, ||.data||
                  b1_10Hz_ch
000000  00                DCB      0x00

                          AREA ||area_number.52||, DATA, ALIGN=1

                          EXPORTAS ||area_number.52||, ||.data||
                  IZMAX_70
000000  0000              DCB      0x00,0x00

                          AREA ||area_number.53||, DATA, ALIGN=1

                          EXPORTAS ||area_number.53||, ||.data||
                  IZMAX_130
000000  0000              DCB      0x00,0x00

                          AREA ||area_number.54||, DATA, ALIGN=1

                          EXPORTAS ||area_number.54||, ||.data||
                  cntrl_stat_blck_cnt
000000  0000              DCB      0x00,0x00

                          AREA ||area_number.55||, DATA, ALIGN=0

                          EXPORTAS ||area_number.55||, ||.data||
                  avg_cnt
000000  00                DCB      0x00

                          AREA ||area_number.56||, DATA, ALIGN=0

                          EXPORTAS ||area_number.56||, ||.data||
                  bps_all_off_cnt
000000  00                DCB      0x00

                          AREA ||area_number.57||, DATA, ALIGN=0

                          EXPORTAS ||area_number.57||, ||.data||
                  bps_mask_off_cnt
000000  00                DCB      0x00

                          AREA ||area_number.58||, DATA, ALIGN=0

                          EXPORTAS ||area_number.58||, ||.data||
                  bps_mask_on_off_cnt
000000  00                DCB      0x00

                          AREA ||area_number.59||, DATA, ALIGN=0

                          EXPORTAS ||area_number.59||, ||.data||
                  bps_hndl_2sec_cnt
000000  00                DCB      0x00

                          AREA ||area_number.60||, DATA, ALIGN=0

                          EXPORTAS ||area_number.60||, ||.data||
                  plazma_bat
000000  00                DCB      0x00

                          AREA ||area_number.61||, DATA, ALIGN=0

                          EXPORTAS ||area_number.61||, ||.data||
                  plazma_cntrl_stat
000000  00                DCB      0x00

                          AREA ||area_number.62||, DATA, ALIGN=1

                          EXPORTAS ||area_number.62||, ||.data||
                  ce102m_delayCnt
000000  0000              DCB      0x00,0x00

                          AREA ||area_number.63||, DATA, ALIGN=1

                          EXPORTAS ||area_number.63||, ||.data||
                  volta_short
000000  0000              DCB      0x00,0x00

                          AREA ||area_number.64||, DATA, ALIGN=1

                          EXPORTAS ||area_number.64||, ||.data||
                  curr_short
000000  0000              DCB      0x00,0x00

                          AREA ||area_number.65||, DATA, ALIGN=2

                          EXPORTAS ||area_number.65||, ||.data||
                  power_int
                          DCD      0x00000000

                          AREA ||area_number.66||, DATA, ALIGN=1

                          EXPORTAS ||area_number.66||, ||.data||
                  plazma_ica2
000000  0000              DCB      0x00,0x00

                          AREA ||area_number.67||, DATA, ALIGN=0

                          EXPORTAS ||area_number.67||, ||.data||
                  rele_hndl_plazma
000000  000000            DCB      0x00,0x00,0x00

                          AREA ||area_number.68||, DATA, ALIGN=1

                          EXPORTAS ||area_number.68||, ||.data||
                  spirit_wrk_cnt
000000  0000              DCB      0x00,0x00
