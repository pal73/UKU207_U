; generated by ARM C/C++ Compiler, 4.1 [Build 644]
; commandline ArmCC [--list --debug -c --asm --interleave -o.\EXE\control.o --asm_dir=.\ --list_dir=.\ --depend=.\EXE\control.d --feedback=.\EXE\UKU_220_IPS_TERMOKOMPENSAT.fed --cpu=Cortex-M3 --apcs=interwork -O1 -IC:\Keil\ARM\CMSIS\Include -IC:\Keil\ARM\INC\NXP\LPC17xx -D__MICROLIB -DUKU_220_IPS_TERMOKOMPENSAT -DUKU2071x -DUKU_ZVU --omf_browse=.\EXE\control.crf control.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  ke_start PROC
;;;295    //-----------------------------------------------
;;;296    void ke_start(char in)
000000  e92d41fc          PUSH     {r2-r8,lr}
;;;297    {          
000004  4606              MOV      r6,r0
;;;298    ke_start_stat=(enum_ke_start_stat)0;		 
000006  f04f0400          MOV      r4,#0
00000a  4dff              LDR      r5,|L1.1032|
;;;299    /*
;;;300    if(spc_stat==spcVZ)ke_start_stat=kssNOT_VZ;
;;;301    #ifndef UKU_220_IPS_TERMOKOMPENSAT
;;;302    else if(BAT_IS_ON[in]!=bisON)ke_start_stat=kssNOT_BAT;
;;;303    #endif
;;;304    else if(bat[in]._av&(1<<0))ke_start_stat=kssNOT_BAT_AV;
;;;305    else if(bat[in]._temper_stat&(1<<1))ke_start_stat=kssNOT_BAT_AV_T;
;;;306    else if(bat[in]._av&(1<<1))ke_start_stat=kssNOT_BAT_AV_ASS;
;;;307    else if(bat[in]._Ib>IKB)ke_start_stat=kssNOT_BAT_ZAR;
;;;308    else if(bat[in]._Ib<-IKB)ke_start_stat=kssNOT_BAT_RAZR;
;;;309    else if((spc_stat==spcKE)&&(spc_bat==0))ke_start_stat=kssNOT_KE1;
;;;310    else if((spc_stat==spcKE)&&(spc_bat==1))ke_start_stat=kssNOT_KE2;
;;;311    else */
;;;312    	{
;;;313    
;;;314    	ke_start_stat=kssYES;
00000c  f04f0064          MOV      r0,#0x64
000010  77a8              STRB     r0,[r5,#0x1e]
;;;315    
;;;316    	spc_stat=spcKE;
000012  f04f0701          MOV      r7,#1
000016  76af              STRB     r7,[r5,#0x1a]
;;;317    	__ee_spc_stat=spcKE;
000018  f8a57068          STRH     r7,[r5,#0x68]
;;;318    	lc640_write_int(EE_SPC_STAT,__ee_spc_stat);
00001c  4639              MOV      r1,r7
00001e  f240209a          MOV      r0,#0x29a
000022  f7fffffe          BL       lc640_write_int
;;;319    	
;;;320    	spc_bat=0;
000026  76ec              STRB     r4,[r5,#0x1b]
;;;321    	__ee_spc_bat=0;
000028  f8a5406a          STRH     r4,[r5,#0x6a]
;;;322    	lc640_write_int(EE_SPC_BAT,__ee_spc_bat);
00002c  4621              MOV      r1,r4
00002e  f240209e          MOV      r0,#0x29e
000032  f7fffffe          BL       lc640_write_int
;;;323    
;;;324    	bat[0]._zar_cnt_ke=0;
000036  f8df83d4          LDR      r8,|L1.1036|
00003a  f8c84018          STR      r4,[r8,#0x18]  ; bat
;;;325    	lc640_write_int(ADR_EE_BAT_ZAR_CNT_KE[0],0);
00003e  48f4              LDR      r0,|L1.1040|
000040  2100              MOVS     r1,#0
000042  f9b00000          LDRSH    r0,[r0,#0]  ; ADR_EE_BAT_ZAR_CNT_KE
000046  f7fffffe          BL       lc640_write_int
;;;326    
;;;327    	bat[0]._time_min_cnt_ke=0;
00004a  f8a8404a          STRH     r4,[r8,#0x4a]
;;;328    	lc640_write_int(EE_ZVU_BAT_MIN_CNT_KE,0);
00004e  2100              MOVS     r1,#0
000050  f44f70e3          MOV      r0,#0x1c6
000054  f7fffffe          BL       lc640_write_int
;;;329    
;;;330    	
;;;331    	spc_phase=0;
000058  772c              STRB     r4,[r5,#0x1c]
;;;332    	__ee_spc_phase=0;
00005a  f8a5406c          STRH     r4,[r5,#0x6c]
;;;333    	lc640_write_int(EE_SPC_PHASE,__ee_spc_phase);
00005e  4621              MOV      r1,r4
000060  f44f7028          MOV      r0,#0x2a0
000064  f7fffffe          BL       lc640_write_int
;;;334    
;;;335    	//ke_mem_hndl(in,lc640_read_int(ADR_EE_BAT_ZAR_CNT_KE[spc_bat]));
;;;336    
;;;337    		{					
;;;338    		signed short temp_temp;
;;;339    		signed char temp;
;;;340    		temp_temp=bat[in]._u_old[((bat_u_old_cnt+1)&0x07)]; 
000068  eb060046          ADD      r0,r6,r6,LSL #1
00006c  eb001006          ADD      r0,r0,r6,LSL #4
000070  eb080180          ADD      r1,r8,r0,LSL #2
000074  48e7              LDR      r0,|L1.1044|
000076  8800              LDRH     r0,[r0,#0]  ; bat_u_old_cnt
000078  f1000001          ADD      r0,r0,#1
00007c  f0000007          AND      r0,r0,#7
000080  eb010040          ADD      r0,r1,r0,LSL #1
000084  8c00              LDRH     r0,[r0,#0x20]
000086  9001              STR      r0,[sp,#4]
;;;341    		    
;;;342    		temp=LPC_RTC->YEAR;
000088  4ee3              LDR      r6,|L1.1048|
00008a  8bb0              LDRH     r0,[r6,#0x1c]
00008c  9000              STR      r0,[sp,#0]
;;;343    		gran_char(&temp,1,99);
00008e  f04f0263          MOV      r2,#0x63
000092  f04f0101          MOV      r1,#1
000096  4668              MOV      r0,sp
000098  f7fffffe          BL       gran_char
;;;344    		*((char*)(&(ke_date[0])))=temp;
00009c  f10504f8          ADD      r4,r5,#0xf8
0000a0  f89d0000          LDRB     r0,[sp,#0]
0000a4  7020              STRB     r0,[r4,#0]
;;;345    			
;;;346    		temp=LPC_RTC->MONTH;
0000a6  7e30              LDRB     r0,[r6,#0x18]
0000a8  9000              STR      r0,[sp,#0]
;;;347    		gran_char(&temp,1,12);
0000aa  220c              MOVS     r2,#0xc
0000ac  2101              MOVS     r1,#1
0000ae  4668              MOV      r0,sp
0000b0  f7fffffe          BL       gran_char
;;;348    		*(((char*)(&(ke_date[0])))+1)=temp;
0000b4  f89d0000          LDRB     r0,[sp,#0]
0000b8  7060              STRB     r0,[r4,#1]
;;;349    		
;;;350    		temp=LPC_RTC->DOM;
0000ba  7b30              LDRB     r0,[r6,#0xc]
0000bc  9000              STR      r0,[sp,#0]
;;;351    		gran_char(&temp,1,31);
0000be  221f              MOVS     r2,#0x1f
0000c0  2101              MOVS     r1,#1
0000c2  4668              MOV      r0,sp
0000c4  f7fffffe          BL       gran_char
;;;352    		*(((char*)(&(ke_date[0])))+2)=temp;			
0000c8  f89d0000          LDRB     r0,[sp,#0]
0000cc  70a0              STRB     r0,[r4,#2]
;;;353    				
;;;354    		*(((char*)(&(ke_date[0])))+3)=*((char*)&temp_temp);
0000ce  f89d0004          LDRB     r0,[sp,#4]
0000d2  70e0              STRB     r0,[r4,#3]
;;;355    		lc640_write_long(EE_SPC_KE_DATE0,ke_date[0]);
0000d4  f24020a2          MOV      r0,#0x2a2
0000d8  6821              LDR      r1,[r4,#0]  ; ke_date
0000da  f7fffffe          BL       lc640_write_long
;;;356    
;;;357    		temp=LPC_RTC->HOUR;
0000de  7a30              LDRB     r0,[r6,#8]
0000e0  9000              STR      r0,[sp,#0]
;;;358    		gran_char(&temp,0,23);
0000e2  2217              MOVS     r2,#0x17
0000e4  2100              MOVS     r1,#0
0000e6  4668              MOV      r0,sp
0000e8  f7fffffe          BL       gran_char
;;;359    		*((char*)(&(ke_date[1])))=temp;
0000ec  f89d0000          LDRB     r0,[sp,#0]
0000f0  7120              STRB     r0,[r4,#4]
;;;360                   
;;;361    		temp=LPC_RTC->MIN;
0000f2  7930              LDRB     r0,[r6,#4]
0000f4  9000              STR      r0,[sp,#0]
;;;362    		gran_char(&temp,0,59);
0000f6  223b              MOVS     r2,#0x3b
0000f8  2100              MOVS     r1,#0
0000fa  4668              MOV      r0,sp
0000fc  f7fffffe          BL       gran_char
;;;363    		*(((char*)(&(ke_date[1])))+1)=temp;
000100  f89d0000          LDRB     r0,[sp,#0]
000104  7160              STRB     r0,[r4,#5]
;;;364    	          
;;;365    		temp=LPC_RTC->SEC;
000106  7830              LDRB     r0,[r6,#0]
000108  9000              STR      r0,[sp,#0]
;;;366    		gran_char(&temp,0,59);
00010a  223b              MOVS     r2,#0x3b
00010c  2100              MOVS     r1,#0
00010e  4668              MOV      r0,sp
000110  f7fffffe          BL       gran_char
;;;367    		*(((char*)(&(ke_date[1])))+2)=temp;
000114  f89d0000          LDRB     r0,[sp,#0]
000118  71a0              STRB     r0,[r4,#6]
;;;368    			
;;;369    		*(((char*)(&(ke_date[1])))+3)=*(((char*)&temp_temp)+1);
00011a  f89d0005          LDRB     r0,[sp,#5]
00011e  71e0              STRB     r0,[r4,#7]
;;;370    		lc640_write_long(EE_SPC_KE_DATE1,ke_date[1]);
000120  f24020a6          MOV      r0,#0x2a6
000124  6861              LDR      r1,[r4,#4]  ; ke_date
000126  f7fffffe          BL       lc640_write_long
;;;371    		}
;;;372    	bat_hndl_zvu_ke_init=1;
00012a  70af              STRB     r7,[r5,#2]
;;;373    	}
;;;374    }
00012c  e8bd81fc          POP      {r2-r8,pc}
;;;375    #endif
                          ENDP

                  ke_drv PROC
;;;457    //-----------------------------------------------
;;;458    void ke_drv(void)
000130  e92d47f0          PUSH     {r4-r10,lr}
;;;459    {
000134  b088              SUB      sp,sp,#0x20
;;;460    static char ke_drv_cnt_10s;
;;;461    static short i_bat_buff[6];
;;;462    static char i_bat_buff_cnt;
;;;463    short ke_drv_i_temp;
;;;464    short ke_drv_i_avg;
;;;465    char i;
;;;466    short ke_drv_i_temp_temp;
;;;467    const long bat_hndl_t_razr_const[7]={600L,1800L,3600L,10800L,18000L,36000L,72000L};
000136  f04f021c          MOV      r2,#0x1c
00013a  49b8              LDR      r1,|L1.1052|
00013c  a801              ADD      r0,sp,#4
00013e  f7fffffe          BL       __aeabi_memcpy4
;;;468    
;;;469    if(bat_hndl_zvu_ke_init==1)	  //Инициализация при включении контроля емкости 
000142  4eb1              LDR      r6,|L1.1032|
;;;470    	{
;;;471    	
;;;472    	i_bat_buff[0]=0;
000144  4bb6              LDR      r3,|L1.1056|
000146  2500              MOVS     r5,#0
000148  78b0              LDRB     r0,[r6,#2]            ;469  ; bat_hndl_zvu_ke_init
00014a  2801              CMP      r0,#1                 ;469
00014c  d102              BNE      |L1.340|
00014e  801d              STRH     r5,[r3,#0]
;;;473    	i_bat_buff[0]=0;
;;;474    	i_bat_buff[0]=0;
;;;475    	i_bat_buff[0]=0;
;;;476    	i_bat_buff[0]=0;
;;;477    	i_bat_buff[0]=0;
;;;478    	i_bat_buff_cnt=0;
000150  71b5              STRB     r5,[r6,#6]
;;;479    
;;;480    	bat_hndl_zvu_ke_init=0;
000152  70b5              STRB     r5,[r6,#2]
                  |L1.340|
;;;481    	}
;;;482    
;;;483    
;;;484    
;;;485    
;;;486    if(spc_stat==spcKE)
000154  7eb0              LDRB     r0,[r6,#0x1a]  ; spc_stat
000156  2801              CMP      r0,#1
000158  d17e              BNE      |L1.600|
;;;487    	{
;;;488    	ke_drv_i_temp=-Ib_ips_termokompensat/10;
00015a  48b2              LDR      r0,|L1.1060|
00015c  f04f070a          MOV      r7,#0xa
000160  f9b00000          LDRSH    r0,[r0,#0]  ; Ib_ips_termokompensat
000164  f1c00000          RSB      r0,r0,#0
000168  fb90f0f7          SDIV     r0,r0,r7
00016c  b200              SXTH     r0,r0
;;;489    	if(ke_drv_i_temp<0)ke_drv_i_temp=0;
00016e  2800              CMP      r0,#0
000170  da01              BGE      |L1.374|
000172  f04f0000          MOV      r0,#0
                  |L1.374|
;;;490    
;;;491    	bat_hndl_plazma[3]=ke_drv_cnt_10s;
000176  4aac              LDR      r2,|L1.1064|
000178  7971              LDRB     r1,[r6,#5]  ; ke_drv_cnt_10s
00017a  60d1              STR      r1,[r2,#0xc]  ; bat_hndl_plazma
;;;492    	if(++ke_drv_cnt_10s>10)
00017c  1c49              ADDS     r1,r1,#1
;;;493    		{
;;;494    		ke_drv_cnt_10s=0;
;;;495    
;;;496    		i_bat_buff_cnt++;
;;;497    		if(i_bat_buff_cnt>=6)i_bat_buff_cnt=0;
;;;498    		bat_hndl_plazma[2]=i_bat_buff_cnt;
;;;499    		i_bat_buff[i_bat_buff_cnt]=ke_drv_i_temp;
;;;500    		ke_drv_i_temp_temp=0;
;;;501    		for(i=0;i<6;i++)
;;;502    			{
;;;503    			ke_drv_i_temp_temp+=i_bat_buff[i];
;;;504    			}
;;;505    		ke_drv_i_avg=ke_drv_i_temp_temp/6;
;;;506    
;;;507    		I_from_t_table[0]=BAT_C_POINT_1_6*6; 	//Ток при котором батарея разрядится за 1/6 часа (0.1А)
;;;508    		I_from_t_table[1]=BAT_C_POINT_1_2*2; 	//Ток при котором батарея разрядится за 1/2 часа (0.1А)
;;;509    		I_from_t_table[2]=BAT_C_POINT_1; 		//Ток при котором батарея разрядится за 1 час (0.1А)
;;;510    		I_from_t_table[3]=BAT_C_POINT_3/3; 		//Ток при котором батарея разрядится за 3 часа (0.1А)
;;;511    		I_from_t_table[4]=BAT_C_POINT_5/5; 		//Ток при котором батарея разрядится за 5 часов (0.1А)
;;;512    		I_from_t_table[5]=BAT_C_POINT_10/10; 	//Ток при котором батарея разрядится за 10 часов (0.1А)
;;;513    		I_from_t_table[6]=BAT_C_POINT_20/20; 	//Ток при котором батарея разрядится за 20 часов (0.1А)
;;;514    		
;;;515    		U_end_from_i_table[0]=BAT_U_END_1_6;	//Конечное напряжение контроля емкости при разряде за 1/6 часа
;;;516    		U_end_from_i_table[1]=BAT_U_END_1_2;	//Конечное напряжение контроля емкости при разряде за 1/2 часа
;;;517    		U_end_from_i_table[2]=BAT_U_END_1;		//Конечное напряжение контроля емкости при разряде за 1 час
;;;518    		U_end_from_i_table[3]=BAT_U_END_3;		//Конечное напряжение контроля емкости при разряде за 3 часа
;;;519    		U_end_from_i_table[4]=BAT_U_END_5;		//Конечное напряжение контроля емкости при разряде за 5 часов
;;;520    		U_end_from_i_table[5]=BAT_U_END_10;		//Конечное напряжение контроля емкости при разряде за 10 часов
;;;521    		U_end_from_i_table[6]=BAT_U_END_20;		//Конечное напряжение контроля емкости при разряде за 20 часов		
;;;522    
;;;523    		bat_hndl_plazma[1]=ke_drv_i_avg;
;;;524    		bat_hndl_i_temp=ke_drv_i_avg;
00017e  4ca2              LDR      r4,|L1.1032|
000180  b2c9              UXTB     r1,r1                 ;492
000182  3480              ADDS     r4,r4,#0x80
000184  7171              STRB     r1,[r6,#5]            ;492
000186  290a              CMP      r1,#0xa               ;492
000188  d967              BLS      |L1.602|
00018a  7175              STRB     r5,[r6,#5]            ;494
00018c  79b1              LDRB     r1,[r6,#6]            ;496  ; i_bat_buff_cnt
00018e  f1010101          ADD      r1,r1,#1              ;496
000192  b2c9              UXTB     r1,r1                 ;496
000194  71b1              STRB     r1,[r6,#6]            ;496
000196  2906              CMP      r1,#6                 ;497
000198  d300              BCC      |L1.412|
00019a  71b5              STRB     r5,[r6,#6]            ;497
                  |L1.412|
00019c  79b1              LDRB     r1,[r6,#6]            ;498  ; i_bat_buff_cnt
00019e  6091              STR      r1,[r2,#8]            ;498  ; bat_hndl_plazma
0001a0  f8230011          STRH     r0,[r3,r1,LSL #1]     ;499
0001a4  f04f0100          MOV      r1,#0                 ;500
0001a8  4608              MOV      r0,r1                 ;501
                  |L1.426|
0001aa  f833c010          LDRH     r12,[r3,r0,LSL #1]    ;503
0001ae  4461              ADD      r1,r1,r12             ;503
0001b0  b209              SXTH     r1,r1                 ;503
0001b2  f1000001          ADD      r0,r0,#1              ;501
0001b6  b2c0              UXTB     r0,r0                 ;501
0001b8  2806              CMP      r0,#6                 ;501
0001ba  d3f6              BCC      |L1.426|
0001bc  f04f0006          MOV      r0,#6                 ;505
0001c0  fb91f0f0          SDIV     r0,r1,r0              ;505
0001c4  b201              SXTH     r1,r0                 ;505
0001c6  4899              LDR      r0,|L1.1068|
0001c8  f8df825c          LDR      r8,|L1.1064|
0001cc  8800              LDRH     r0,[r0,#0]            ;507  ; BAT_C_POINT_1_6
0001ce  f1a8081c          SUB      r8,r8,#0x1c           ;507
0001d2  eb000040          ADD      r0,r0,r0,LSL #1       ;507
0001d6  ea4f0040          LSL      r0,r0,#1              ;507
0001da  f8a80000          STRH     r0,[r8,#0]            ;507
0001de  4894              LDR      r0,|L1.1072|
0001e0  8800              LDRH     r0,[r0,#0]            ;508  ; BAT_C_POINT_1_2
0001e2  ea4f0040          LSL      r0,r0,#1              ;508
0001e6  f8a80002          STRH     r0,[r8,#2]            ;508
0001ea  4892              LDR      r0,|L1.1076|
0001ec  8800              LDRH     r0,[r0,#0]            ;509  ; BAT_C_POINT_1
0001ee  f8a80004          STRH     r0,[r8,#4]            ;509
0001f2  4891              LDR      r0,|L1.1080|
0001f4  f04f0303          MOV      r3,#3                 ;510
0001f8  f9b00000          LDRSH    r0,[r0,#0]            ;510  ; BAT_C_POINT_3
0001fc  fb90f0f3          SDIV     r0,r0,r3              ;510
000200  f8a80006          STRH     r0,[r8,#6]            ;510
000204  488d              LDR      r0,|L1.1084|
000206  f04f0305          MOV      r3,#5                 ;511
00020a  f9b00000          LDRSH    r0,[r0,#0]            ;511  ; BAT_C_POINT_5
00020e  fb90f0f3          SDIV     r0,r0,r3              ;511
000212  f8a80008          STRH     r0,[r8,#8]            ;511
000216  488a              LDR      r0,|L1.1088|
000218  f9b00000          LDRSH    r0,[r0,#0]            ;512  ; BAT_C_POINT_10
00021c  fb90f0f7          SDIV     r0,r0,r7              ;512
000220  f8a8000a          STRH     r0,[r8,#0xa]          ;512
000224  4887              LDR      r0,|L1.1092|
000226  f04f0314          MOV      r3,#0x14              ;513
00022a  f9b00000          LDRSH    r0,[r0,#0]            ;513  ; BAT_C_POINT_20
00022e  fb90f0f3          SDIV     r0,r0,r3              ;513
000232  f8a8000c          STRH     r0,[r8,#0xc]          ;513
000236  4884              LDR      r0,|L1.1096|
000238  f108090e          ADD      r9,r8,#0xe            ;515
00023c  f9b07000          LDRSH    r7,[r0,#0]            ;515  ; BAT_U_END_1_6
000240  f8a97000          STRH     r7,[r9,#0]            ;515
000244  4881              LDR      r0,|L1.1100|
000246  8800              LDRH     r0,[r0,#0]            ;516  ; BAT_U_END_1_2
000248  f8a90002          STRH     r0,[r9,#2]            ;516
00024c  4880              LDR      r0,|L1.1104|
00024e  8800              LDRH     r0,[r0,#0]            ;517  ; BAT_U_END_1
000250  f8a90004          STRH     r0,[r9,#4]            ;517
000254  487f              LDR      r0,|L1.1108|
000256  e001              B        |L1.604|
                  |L1.600|
000258  e11b              B        |L1.1170|
                  |L1.602|
00025a  e061              B        |L1.800|
                  |L1.604|
00025c  8800              LDRH     r0,[r0,#0]            ;518  ; BAT_U_END_3
00025e  f8a90006          STRH     r0,[r9,#6]            ;518
000262  487d              LDR      r0,|L1.1112|
000264  8800              LDRH     r0,[r0,#0]            ;519  ; BAT_U_END_5
000266  f8a90008          STRH     r0,[r9,#8]            ;519
00026a  487c              LDR      r0,|L1.1116|
00026c  8800              LDRH     r0,[r0,#0]            ;520  ; BAT_U_END_10
00026e  f8a9000a          STRH     r0,[r9,#0xa]          ;520
000272  487b              LDR      r0,|L1.1120|
000274  f9b0c000          LDRSH    r12,[r0,#0]           ;521  ; BAT_U_END_20
000278  f8a9c00c          STRH     r12,[r9,#0xc]         ;521
00027c  6051              STR      r1,[r2,#4]            ;523  ; bat_hndl_plazma
00027e  80e1              STRH     r1,[r4,#6]
;;;525    		
;;;526    		for(i=0;i<7;i++)
000280  f04f0000          MOV      r0,#0
                  |L1.644|
;;;527    			{
;;;528    			if(bat_hndl_i_temp>=I_from_t_table[i])
000284  f9383010          LDRSH    r3,[r8,r0,LSL #1]
000288  428b              CMP      r3,r1
00028a  dd04              BLE      |L1.662|
00028c  f1000001          ADD      r0,r0,#1              ;526
000290  b2c0              UXTB     r0,r0                 ;526
000292  2807              CMP      r0,#7                 ;526
000294  d3f6              BCC      |L1.644|
                  |L1.662|
;;;529    				{
;;;530    				break;
;;;531    				}
;;;532    			}
;;;533    
;;;534    		bat_hndl_plazma[0]=i;
000296  6010              STR      r0,[r2,#0]  ; bat_hndl_plazma
000298  f10d0a04          ADD      r10,sp,#4             ;467
;;;535    
;;;536    		 if(i==0) bat_hndl_t_razr_ke=bat_hndl_t_razr_const[0];
00029c  b1c8              CBZ      r0,|L1.722|
;;;537    		 else if((i>=1)&&(i<7))
00029e  1e42              SUBS     r2,r0,#1
0002a0  2a06              CMP      r2,#6
0002a2  d219              BCS      |L1.728|
;;;538    		 	{
;;;539    			short i1,i2;
;;;540    			i1=I_from_t_table[i-1]-bat_hndl_i_temp;
0002a4  f8383012          LDRH     r3,[r8,r2,LSL #1]
0002a8  eba30101          SUB      r1,r3,r1
0002ac  b209              SXTH     r1,r1
;;;541    			i2=I_from_t_table[i-1]-I_from_t_table[i];
0002ae  f8388010          LDRH     r8,[r8,r0,LSL #1]
0002b2  eba30308          SUB      r3,r3,r8
0002b6  b21b              SXTH     r3,r3
;;;542    			bat_hndl_t_razr_ke=bat_hndl_t_razr_const[i]-bat_hndl_t_razr_const[i-1];
0002b8  f85a8020          LDR      r8,[r10,r0,LSL #2]
0002bc  f85a2022          LDR      r2,[r10,r2,LSL #2]
0002c0  eba80802          SUB      r8,r8,r2
;;;543    			bat_hndl_t_razr_ke*=(long)i1;
0002c4  fb08f801          MUL      r8,r8,r1
;;;544    			bat_hndl_t_razr_ke/=(long)i2;
0002c8  fb98f1f3          SDIV     r1,r8,r3
;;;545    			bat_hndl_t_razr_ke+=bat_hndl_t_razr_const[i-1];
0002cc  4411              ADD      r1,r1,r2
0002ce  64e1              STR      r1,[r4,#0x4c]  ; bat_hndl_t_razr_ke
;;;546    			}
0002d0  e006              B        |L1.736|
                  |L1.722|
0002d2  9901              LDR      r1,[sp,#4]            ;536
0002d4  64e1              STR      r1,[r4,#0x4c]         ;536  ; bat_hndl_t_razr_ke
0002d6  e003              B        |L1.736|
                  |L1.728|
;;;547    		else if(i>=7)
0002d8  2807              CMP      r0,#7
0002da  d301              BCC      |L1.736|
;;;548    			{
;;;549    			bat_hndl_t_razr_ke=bat_hndl_t_razr_const[6];
0002dc  9907              LDR      r1,[sp,#0x1c]
0002de  64e1              STR      r1,[r4,#0x4c]  ; bat_hndl_t_razr_ke
                  |L1.736|
;;;550    			}
;;;551    
;;;552    		 if(i==0) bat_hndl_u_end=U_end_from_i_table[0];
0002e0  b1c0              CBZ      r0,|L1.788|
;;;553    		 else if((i>=1)&&(i<7))
0002e2  1e41              SUBS     r1,r0,#1
0002e4  2906              CMP      r1,#6
0002e6  d217              BCS      |L1.792|
;;;554    		 	{
;;;555    			long u1,tempL;
;;;556    
;;;557    			tempL=(long)U_end_from_i_table[i]-(long)U_end_from_i_table[i-1];
0002e8  f9393010          LDRSH    r3,[r9,r0,LSL #1]
0002ec  f9392011          LDRSH    r2,[r9,r1,LSL #1]
0002f0  eba30302          SUB      r3,r3,r2
;;;558    			u1=bat_hndl_t_razr_ke-bat_hndl_t_razr_const[i-1];
0002f4  f85a1021          LDR      r1,[r10,r1,LSL #2]
0002f8  6ce7              LDR      r7,[r4,#0x4c]  ; bat_hndl_t_razr_ke
0002fa  eba70701          SUB      r7,r7,r1
;;;559    			tempL*=u1;
0002fe  fb03f307          MUL      r3,r3,r7
;;;560    			u1=bat_hndl_t_razr_const[i]-bat_hndl_t_razr_const[i-1];
000302  f85a0020          LDR      r0,[r10,r0,LSL #2]
000306  eba00001          SUB      r0,r0,r1
;;;561    			tempL/=u1;
00030a  fb93f0f0          SDIV     r0,r3,r0
;;;562    			tempL+=(long)U_end_from_i_table[i-1];
00030e  4410              ADD      r0,r0,r2
;;;563    			bat_hndl_u_end=(short)tempL;
000310  8120              STRH     r0,[r4,#8]
;;;564    			}
000312  e005              B        |L1.800|
                  |L1.788|
000314  8127              STRH     r7,[r4,#8]            ;552
000316  e003              B        |L1.800|
                  |L1.792|
;;;565    		else if(i>=7)
000318  2807              CMP      r0,#7
00031a  d301              BCC      |L1.800|
;;;566    			{
;;;567    			bat_hndl_u_end=U_end_from_i_table[6];
00031c  f8a4c008          STRH     r12,[r4,#8]
                  |L1.800|
;;;568    			}
;;;569    
;;;570    		}
;;;571    
;;;572    
;;;573    
;;;574    	if(spc_phase==0)
000320  7f30              LDRB     r0,[r6,#0x1c]  ; spc_phase
;;;575    		{
;;;576    		//mess_send(MESS2BAT_HNDL,PARAM_BAT_MASK_OFF_AFTER_2SEC,(1<<(1-spc_bat)),20);
;;;577    		mess_send(MESS2BPS_HNDL,PARAM_BPS_ALL_OFF_AFTER_2SEC,0xffff,20);
;;;578    
;;;579    		bat[0]._zar_cnt_ke+=abs(bat[spc_bat]._Ib);
;;;580    	    	
;;;581    		if(bat[0]._zar_cnt_ke>=AH_CONSTANT)
;;;582    			{
;;;583    			bat[0]._zar_cnt_ke-=AH_CONSTANT;
;;;584    			lc640_write_int(ADR_EE_BAT_ZAR_CNT_KE[0],lc640_read_int(ADR_EE_BAT_ZAR_CNT_KE[0])+1);
000322  4f3b              LDR      r7,|L1.1040|
;;;585    			}
;;;586    
;;;587    		bat[0]._time_min_cnt_ke++;
;;;588    		if(bat[0]._time_min_cnt_ke>=60)
;;;589    			{
;;;590    			lc640_write_int(EE_ZVU_BAT_MIN_CNT_KE,lc640_read_int(EE_ZVU_BAT_MIN_CNT_KE)+1);
000324  f44f78e3          MOV      r8,#0x1c6
000328  bbe0              CBNZ     r0,|L1.932|
00032a  2314              MOVS     r3,#0x14              ;577
00032c  f04f32ff          MOV      r2,#0xffffffff        ;577
000330  21ce              MOVS     r1,#0xce              ;577
000332  20cd              MOVS     r0,#0xcd              ;577
000334  f7fffffe          BL       mess_send
000338  7ef1              LDRB     r1,[r6,#0x1b]         ;579  ; spc_bat
00033a  f8df90d0          LDR      r9,|L1.1036|
00033e  eb010041          ADD      r0,r1,r1,LSL #1       ;579
000342  eb001001          ADD      r0,r0,r1,LSL #4       ;579
000346  eb090080          ADD      r0,r9,r0,LSL #2       ;579
00034a  f9b00008          LDRSH    r0,[r0,#8]            ;579
00034e  f7fffffe          BL       abs
000352  f8d91018          LDR      r1,[r9,#0x18]         ;579  ; bat
000356  4401              ADD      r1,r1,r0              ;579
000358  f8c91018          STR      r1,[r9,#0x18]         ;579  ; bat
00035c  f64840a0          MOV      r0,#0x8ca0            ;581
000360  4281              CMP      r1,r0                 ;581
000362  db0c              BLT      |L1.894|
000364  eba10100          SUB      r1,r1,r0              ;583
000368  f8c91018          STR      r1,[r9,#0x18]         ;583  ; bat
00036c  8838              LDRH     r0,[r7,#0]            ;584  ; ADR_EE_BAT_ZAR_CNT_KE
00036e  f7fffffe          BL       lc640_read_int
000372  1c40              ADDS     r0,r0,#1              ;584
000374  b201              SXTH     r1,r0                 ;584
000376  f9b70000          LDRSH    r0,[r7,#0]            ;584  ; ADR_EE_BAT_ZAR_CNT_KE
00037a  f7fffffe          BL       lc640_write_int
                  |L1.894|
00037e  f8b9004a          LDRH     r0,[r9,#0x4a]         ;587  ; bat
000382  f1000001          ADD      r0,r0,#1              ;587
000386  b281              UXTH     r1,r0                 ;587
000388  f8a9104a          STRH     r1,[r9,#0x4a]         ;587
00038c  293c              CMP      r1,#0x3c              ;588
00038e  d309              BCC      |L1.932|
000390  4640              MOV      r0,r8
000392  f7fffffe          BL       lc640_read_int
000396  1c40              ADDS     r0,r0,#1
000398  b201              SXTH     r1,r0
00039a  4640              MOV      r0,r8
00039c  f7fffffe          BL       lc640_write_int
;;;591    			bat[0]._time_min_cnt_ke=0;
0003a0  f8a9504a          STRH     r5,[r9,#0x4a]
                  |L1.932|
;;;592    			}
;;;593    		}
;;;594    
;;;595    	else if(spc_phase==1)
;;;596    		{
;;;597    		//mess_send(MESS2BAT_HNDL,PARAM_BAT_MASK_OFF_AFTER_2SEC,(1<<(1-spc_bat)),20);
;;;598    		}
;;;599    
;;;600    	if(out_U<bat_hndl_u_end)
0003a4  482f              LDR      r0,|L1.1124|
0003a6  f9b41008          LDRSH    r1,[r4,#8]  ; bat_hndl_u_end
0003aa  f9b00000          LDRSH    r0,[r0,#0]  ; out_U
0003ae  4288              CMP      r0,r1
0003b0  da6d              BGE      |L1.1166|
;;;601    		{
;;;602    		cnt_end_ke++;
0003b2  f8b60064          LDRH     r0,[r6,#0x64]  ; cnt_end_ke
0003b6  f1000001          ADD      r0,r0,#1
0003ba  b200              SXTH     r0,r0
0003bc  f8a60064          STRH     r0,[r6,#0x64]
;;;603    		if(cnt_end_ke>=30)
0003c0  281e              CMP      r0,#0x1e
0003c2  db66              BLT      |L1.1170|
;;;604    			{
;;;605    			
;;;606    			if((spc_stat==spcKE)&&(spc_phase==0))
0003c4  7eb0              LDRB     r0,[r6,#0x1a]  ; spc_stat
0003c6  2801              CMP      r0,#1
0003c8  d156              BNE      |L1.1144|
0003ca  7f30              LDRB     r0,[r6,#0x1c]  ; spc_phase
0003cc  b9d8              CBNZ     r0,|L1.1030|
;;;607    				{
;;;608    				lc640_write_int(ADR_EE_BAT_C_REAL[0],lc640_read_int(ADR_EE_BAT_ZAR_CNT_KE[0]));
0003ce  8838              LDRH     r0,[r7,#0]  ; ADR_EE_BAT_ZAR_CNT_KE
0003d0  f7fffffe          BL       lc640_read_int
0003d4  b201              SXTH     r1,r0
0003d6  4824              LDR      r0,|L1.1128|
0003d8  f9b00000          LDRSH    r0,[r0,#0]  ; ADR_EE_BAT_C_REAL
0003dc  f7fffffe          BL       lc640_write_int
;;;609    				ke_zvu_mem_hndl(0,lc640_read_int(ADR_EE_BAT_ZAR_CNT_KE[0]),lc640_read_int(EE_ZVU_BAT_MIN_CNT_KE));
0003e0  4640              MOV      r0,r8
0003e2  f7fffffe          BL       lc640_read_int
0003e6  b284              UXTH     r4,r0
0003e8  8838              LDRH     r0,[r7,#0]  ; ADR_EE_BAT_ZAR_CNT_KE
0003ea  f7fffffe          BL       lc640_read_int
0003ee  b281              UXTH     r1,r0
0003f0  4622              MOV      r2,r4
0003f2  2000              MOVS     r0,#0
0003f4  f7fffffe          BL       ke_zvu_mem_hndl
;;;610    				lc640_write_int(ADR_EE_BAT_ZAR_CNT[0],0);
0003f8  481c              LDR      r0,|L1.1132|
0003fa  2100              MOVS     r1,#0
0003fc  f9b00000          LDRSH    r0,[r0,#0]  ; ADR_EE_BAT_ZAR_CNT
000400  f7fffffe          BL       lc640_write_int
;;;611    				cntrl_stat=50;
000404  e034              B        |L1.1136|
                  |L1.1030|
000406  e037              B        |L1.1144|
                  |L1.1032|
                          DCD      ||area_number.25||
                  |L1.1036|
                          DCD      bat
                  |L1.1040|
                          DCD      ADR_EE_BAT_ZAR_CNT_KE
                  |L1.1044|
                          DCD      bat_u_old_cnt
                  |L1.1048|
                          DCD      0x40024020
                  |L1.1052|
                          DCD      ||area_number.19||+0x4
                  |L1.1056|
                          DCD      ||.bss||
                  |L1.1060|
                          DCD      Ib_ips_termokompensat
                  |L1.1064|
                          DCD      ||.bss||+0x468
                  |L1.1068|
                          DCD      BAT_C_POINT_1_6
                  |L1.1072|
                          DCD      BAT_C_POINT_1_2
                  |L1.1076|
                          DCD      BAT_C_POINT_1
                  |L1.1080|
                          DCD      BAT_C_POINT_3
                  |L1.1084|
                          DCD      BAT_C_POINT_5
                  |L1.1088|
                          DCD      BAT_C_POINT_10
                  |L1.1092|
                          DCD      BAT_C_POINT_20
                  |L1.1096|
                          DCD      BAT_U_END_1_6
                  |L1.1100|
                          DCD      BAT_U_END_1_2
                  |L1.1104|
                          DCD      BAT_U_END_1
                  |L1.1108|
                          DCD      BAT_U_END_3
                  |L1.1112|
                          DCD      BAT_U_END_5
                  |L1.1116|
                          DCD      BAT_U_END_10
                  |L1.1120|
                          DCD      BAT_U_END_20
                  |L1.1124|
                          DCD      out_U
                  |L1.1128|
                          DCD      ADR_EE_BAT_C_REAL
                  |L1.1132|
                          DCD      ADR_EE_BAT_ZAR_CNT
                  |L1.1136|
000470  f04f0032          MOV      r0,#0x32
000474  85b0              STRH     r0,[r6,#0x2c]
;;;612    				cntrl_stat_old=50;
000476  85f0              STRH     r0,[r6,#0x2e]
                  |L1.1144|
;;;613    				}
;;;614    
;;;615    			spc_stat=spcOFF;
000478  76b5              STRB     r5,[r6,#0x1a]
;;;616    			__ee_spc_stat=spcOFF;
00047a  f8a65068          STRH     r5,[r6,#0x68]
;;;617    			lc640_write_int(EE_SPC_STAT,spcOFF);
00047e  b008              ADD      sp,sp,#0x20
000480  2100              MOVS     r1,#0
000482  e8bd47f0          POP      {r4-r10,lr}
000486  f240209a          MOV      r0,#0x29a
00048a  f7ffbffe          B.W      lc640_write_int
                  |L1.1166|
;;;618    
;;;619    			}
;;;620    		}
;;;621    	else cnt_end_ke=0;
00048e  f8a65064          STRH     r5,[r6,#0x64]
                  |L1.1170|
;;;622    
;;;623    	}
;;;624    			
;;;625    }
000492  b008              ADD      sp,sp,#0x20
000494  e8bd87f0          POP      {r4-r10,pc}
;;;626    #endif
                          ENDP

                  vz_start PROC
;;;696    //-----------------------------------------------
;;;697    char vz_start(char hour)
000498  b570              PUSH     {r4-r6,lr}
;;;698    {          
00049a  4605              MOV      r5,r0
;;;699    char out;
;;;700    out=0;
00049c  f04f0600          MOV      r6,#0
;;;701    if((spc_stat==spcOFF)&&(speedChrgBlckStat!=1))
0004a0  4cff              LDR      r4,|L1.2208|
0004a2  7ea0              LDRB     r0,[r4,#0x1a]  ; spc_stat
0004a4  bb90              CBNZ     r0,|L1.1292|
0004a6  48ff              LDR      r0,|L1.2212|
0004a8  8800              LDRH     r0,[r0,#0]  ; speedChrgBlckStat
0004aa  2801              CMP      r0,#1
0004ac  d02e              BEQ      |L1.1292|
;;;702    	{
;;;703    	spc_stat=spcVZ;
0004ae  f04f0102          MOV      r1,#2
0004b2  76a1              STRB     r1,[r4,#0x1a]
;;;704    	__ee_spc_stat=spcVZ; 
0004b4  f8a41068          STRH     r1,[r4,#0x68]
;;;705    	lc640_write_int(EE_SPC_STAT,__ee_spc_stat);   
0004b8  f240209a          MOV      r0,#0x29a
0004bc  f7fffffe          BL       lc640_write_int
;;;706    	vz_cnt_h=hour;
0004c0  f8a45060          STRH     r5,[r4,#0x60]
;;;707    	__ee_vz_cnt=hour*60;
0004c4  ebc51005          RSB      r0,r5,r5,LSL #4
0004c8  ea4f0080          LSL      r0,r0,#2
0004cc  f8a40066          STRH     r0,[r4,#0x66]
;;;708    	if(hour==0)__ee_vz_cnt=30;
0004d0  b91d              CBNZ     r5,|L1.1242|
0004d2  f04f001e          MOV      r0,#0x1e
0004d6  f8a40066          STRH     r0,[r4,#0x66]
                  |L1.1242|
;;;709    	lc640_write_int(EE_VZ_CNT,__ee_vz_cnt);
0004da  f104045c          ADD      r4,r4,#0x5c
0004de  f44f7027          MOV      r0,#0x29c
0004e2  f9b4100a          LDRSH    r1,[r4,#0xa]  ; __ee_vz_cnt
0004e6  f7fffffe          BL       lc640_write_int
;;;710    	lc640_write_int(EE_SPC_VZ_LENGT,__ee_vz_cnt);	
0004ea  f9b4100a          LDRSH    r1,[r4,#0xa]  ; __ee_vz_cnt
0004ee  f44f702a          MOV      r0,#0x2a8
0004f2  f7fffffe          BL       lc640_write_int
;;;711    	vz_cnt_h_=0;
0004f6  f04f0000          MOV      r0,#0
0004fa  80e0              STRH     r0,[r4,#6]
;;;712    	vz_cnt_s=0;
0004fc  8020              STRH     r0,[r4,#0]
;;;713    	vz_cnt_s_=0;
0004fe  8060              STRH     r0,[r4,#2]
;;;714    	out=1;
000500  f04f0601          MOV      r6,#1
;;;715    	vz_mem_hndl(1);
000504  f04f0001          MOV      r0,#1
000508  f7fffffe          BL       vz_mem_hndl
                  |L1.1292|
;;;716    	}
;;;717    //else if((spc_stat==spc_KE1p1)||(spc_stat==spc_KE1p2)) out=22; 
;;;718    //else if((spc_stat==spc_KE2p1)||(spc_stat==spc_KE2p2)) out=33;
;;;719    //plazma=out;	
;;;720    return out;
00050c  4630              MOV      r0,r6
;;;721    }
00050e  bd70              POP      {r4-r6,pc}
;;;722    
                          ENDP

                  vz_stop PROC
;;;723    //-----------------------------------------------
;;;724    void vz_stop(void)
000510  b510              PUSH     {r4,lr}
;;;725    {
;;;726    if(spc_stat==spcVZ)
000512  4ce3              LDR      r4,|L1.2208|
000514  7ea0              LDRB     r0,[r4,#0x1a]  ; spc_stat
000516  2802              CMP      r0,#2
000518  d113              BNE      |L1.1346|
;;;727         {
;;;728    vz_mem_hndl(vz_cnt_h);          
00051a  f104042a          ADD      r4,r4,#0x2a
00051e  8ee0              LDRH     r0,[r4,#0x36]  ; vz_cnt_h
000520  f7fffffe          BL       vz_mem_hndl
;;;729    vz_cnt_s=0;
000524  f04f0000          MOV      r0,#0
000528  8660              STRH     r0,[r4,#0x32]
;;;730    vz_cnt_h=0;
00052a  86e0              STRH     r0,[r4,#0x36]
;;;731    vz_cnt_h_=0;
00052c  8720              STRH     r0,[r4,#0x38]
;;;732    spc_stat=spcOFF;
00052e  f8040c10          STRB     r0,[r4,#-0x10]
;;;733    
;;;734    		__ee_spc_stat=spcOFF;
000532  87e0              STRH     r0,[r4,#0x3e]
;;;735    		lc640_write_int(EE_SPC_STAT,spcOFF);
000534  4601              MOV      r1,r0
000536  e8bd4010          POP      {r4,lr}
00053a  f240209a          MOV      r0,#0x29a
00053e  f7ffbffe          B.W      lc640_write_int
                  |L1.1346|
;;;736         }
;;;737    
;;;738    }
000542  bd10              POP      {r4,pc}
;;;739    
                          ENDP

                  amper_chas_cnt_drv PROC
;;;741    //-----------------------------------------------
;;;742    void amper_chas_cnt_drv(void)
000544  b510              PUSH     {r4,lr}
;;;743    {
;;;744    
;;;745    amper_chas_cnt_drv_summ+=(long)Ib_ips_termokompensat;
000546  4ad6              LDR      r2,|L1.2208|
000548  49d7              LDR      r1,|L1.2216|
00054a  3280              ADDS     r2,r2,#0x80
00054c  f9b11000          LDRSH    r1,[r1,#0]  ; Ib_ips_termokompensat
000550  6dd0              LDR      r0,[r2,#0x5c]  ; amper_chas_cnt_drv_summ
000552  4401              ADD      r1,r1,r0
000554  65d1              STR      r1,[r2,#0x5c]  ; amper_chas_cnt_drv_summ
;;;746    
;;;747    if(amper_chas_cnt_drv_summ>=36000L)
000556  f64843a0          MOV      r3,#0x8ca0
;;;748    	{
;;;749    	amper_chas_cnt_drv_summ-=36000L;
;;;750    	lc640_write_int(EE_AMPER_CHAS_CNT,lc640_read_int(EE_AMPER_CHAS_CNT)+1);
00055a  f44f74e4          MOV      r4,#0x1c8
00055e  4299              CMP      r1,r3                 ;747
000560  db0c              BLT      |L1.1404|
000562  eba10103          SUB      r1,r1,r3              ;749
000566  65d1              STR      r1,[r2,#0x5c]         ;749  ; amper_chas_cnt_drv_summ
000568  4620              MOV      r0,r4
00056a  f7fffffe          BL       lc640_read_int
00056e  1c40              ADDS     r0,r0,#1
000570  b201              SXTH     r1,r0
000572  4620              MOV      r0,r4
000574  e8bd4010          POP      {r4,lr}
000578  f7ffbffe          B.W      lc640_write_int
                  |L1.1404|
;;;751    	}
;;;752    else if(amper_chas_cnt_drv_summ<=-36000L)
00057c  48cb              LDR      r0,|L1.2220|
00057e  4281              CMP      r1,r0
000580  dc0c              BGT      |L1.1436|
;;;753    	{
;;;754    	amper_chas_cnt_drv_summ+=36000L;
000582  eb010003          ADD      r0,r1,r3
000586  65d0              STR      r0,[r2,#0x5c]  ; amper_chas_cnt_drv_summ
;;;755    	lc640_write_int(EE_AMPER_CHAS_CNT,lc640_read_int(EE_AMPER_CHAS_CNT)-1);
000588  4620              MOV      r0,r4
00058a  f7fffffe          BL       lc640_read_int
00058e  1e40              SUBS     r0,r0,#1
000590  b201              SXTH     r1,r0
000592  4620              MOV      r0,r4
000594  e8bd4010          POP      {r4,lr}
000598  f7ffbffe          B.W      lc640_write_int
                  |L1.1436|
;;;756    	}
;;;757    }
00059c  bd10              POP      {r4,pc}
;;;758    #endif
                          ENDP

                  avz_next_date_hndl PROC
;;;760    //-----------------------------------------------
;;;761    void avz_next_date_hndl(void)
00059e  b570              PUSH     {r4-r6,lr}
;;;762    {
;;;763    if((LPC_RTC->MONTH+AVZ)>12)lc640_write_int(EE_YEAR_AVZ,LPC_RTC->YEAR+1);
0005a0  4cc3              LDR      r4,|L1.2224|
0005a2  f8940038          LDRB     r0,[r4,#0x38]
0005a6  4dc3              LDR      r5,|L1.2228|
0005a8  7829              LDRB     r1,[r5,#0]  ; AVZ
0005aa  4408              ADD      r0,r0,r1
0005ac  280c              CMP      r0,#0xc
0005ae  d906              BLS      |L1.1470|
0005b0  8fa0              LDRH     r0,[r4,#0x3c]
0005b2  1c40              ADDS     r0,r0,#1
0005b4  b201              SXTH     r1,r0
0005b6  20b8              MOVS     r0,#0xb8
0005b8  f7fffffe          BL       lc640_write_int
0005bc  e004              B        |L1.1480|
                  |L1.1470|
;;;764    else lc640_write_int(EE_YEAR_AVZ,LPC_RTC->YEAR);
0005be  f9b4103c          LDRSH    r1,[r4,#0x3c]
0005c2  20b8              MOVS     r0,#0xb8
0005c4  f7fffffe          BL       lc640_write_int
                  |L1.1480|
;;;765    
;;;766    //lc640_write_int(EE_YEAR_AVZ,6);
;;;767    
;;;768    if((LPC_RTC->MONTH+AVZ)>12)lc640_write_int(EE_MONTH_AVZ,(LPC_RTC->MONTH+AVZ)-12);
0005c8  f8941038          LDRB     r1,[r4,#0x38]
0005cc  7828              LDRB     r0,[r5,#0]  ; AVZ
0005ce  4401              ADD      r1,r1,r0
0005d0  290c              CMP      r1,#0xc
0005d2  d907              BLS      |L1.1508|
0005d4  f8941038          LDRB     r1,[r4,#0x38]
0005d8  380c              SUBS     r0,r0,#0xc
0005da  4401              ADD      r1,r1,r0
0005dc  20b6              MOVS     r0,#0xb6
0005de  f7fffffe          BL       lc640_write_int
0005e2  e005              B        |L1.1520|
                  |L1.1508|
;;;769    else lc640_write_int(EE_MONTH_AVZ,LPC_RTC->MONTH+AVZ);                                                 
0005e4  f8941038          LDRB     r1,[r4,#0x38]
0005e8  4401              ADD      r1,r1,r0
0005ea  20b6              MOVS     r0,#0xb6
0005ec  f7fffffe          BL       lc640_write_int
                  |L1.1520|
;;;770    
;;;771    //lc640_write_int(EE_MONTH_AVZ,5);
;;;772    
;;;773    if(LPC_RTC->DOM>28) lc640_write_int(EE_DATE_AVZ,28);
0005f0  f894002c          LDRB     r0,[r4,#0x2c]
0005f4  281c              CMP      r0,#0x1c
0005f6  d904              BLS      |L1.1538|
0005f8  211c              MOVS     r1,#0x1c
0005fa  20b4              MOVS     r0,#0xb4
0005fc  f7fffffe          BL       lc640_write_int
000600  e004              B        |L1.1548|
                  |L1.1538|
;;;774    else lc640_write_int(EE_DATE_AVZ,LPC_RTC->DOM);
000602  f894102c          LDRB     r1,[r4,#0x2c]
000606  20b4              MOVS     r0,#0xb4
000608  f7fffffe          BL       lc640_write_int
                  |L1.1548|
;;;775    
;;;776    //lc640_write_int(EE_DATE_AVZ,4);
;;;777    
;;;778    lc640_write_int(EE_HOUR_AVZ,LPC_RTC->HOUR);
00060c  f1040420          ADD      r4,r4,#0x20
000610  7a21              LDRB     r1,[r4,#8]
000612  f04f00ae          MOV      r0,#0xae
000616  f7fffffe          BL       lc640_write_int
;;;779    lc640_write_int(EE_MIN_AVZ,LPC_RTC->MIN);
00061a  7921              LDRB     r1,[r4,#4]
00061c  20b0              MOVS     r0,#0xb0
00061e  f7fffffe          BL       lc640_write_int
;;;780    lc640_write_int(EE_SEC_AVZ,LPC_RTC->SEC);
000622  7821              LDRB     r1,[r4,#0]
000624  e8bd4070          POP      {r4-r6,lr}
000628  20b2              MOVS     r0,#0xb2
00062a  f7ffbffe          B.W      lc640_write_int
;;;781    
;;;782    }
;;;783    
                          ENDP

                  avz_drv PROC
;;;784    //-----------------------------------------------
;;;785    void avz_drv(void)                               
00062e  b510              PUSH     {r4,lr}
;;;786    {                
;;;787    if(AVZ!=AVZ_OFF)
000630  48a0              LDR      r0,|L1.2228|
;;;788    	{
;;;789    	if((LPC_RTC->YEAR==YEAR_AVZ)&&(LPC_RTC->MONTH==MONTH_AVZ)&&(LPC_RTC->DOM==DATE_AVZ)&&(LPC_RTC->HOUR==HOUR_AVZ)&&(LPC_RTC->MIN==MIN_AVZ)&&(LPC_RTC->SEC==SEC_AVZ))
;;;790    		{
;;;791    		bAVZ=1;
000632  4c9b              LDR      r4,|L1.2208|
000634  7800              LDRB     r0,[r0,#0]            ;787  ; AVZ
000636  b330              CBZ      r0,|L1.1670|
000638  489d              LDR      r0,|L1.2224|
00063a  8f82              LDRH     r2,[r0,#0x3c]         ;789
00063c  499e              LDR      r1,|L1.2232|
00063e  8809              LDRH     r1,[r1,#0]            ;789  ; YEAR_AVZ
000640  428a              CMP      r2,r1                 ;789
000642  d120              BNE      |L1.1670|
000644  f8902038          LDRB     r2,[r0,#0x38]         ;789
000648  499c              LDR      r1,|L1.2236|
00064a  8809              LDRH     r1,[r1,#0]            ;789  ; MONTH_AVZ
00064c  428a              CMP      r2,r1                 ;789
00064e  d11a              BNE      |L1.1670|
000650  f890102c          LDRB     r1,[r0,#0x2c]         ;789
000654  4a9a              LDR      r2,|L1.2240|
000656  8812              LDRH     r2,[r2,#0]            ;789  ; DATE_AVZ
000658  4291              CMP      r1,r2                 ;789
00065a  d114              BNE      |L1.1670|
00065c  f8901028          LDRB     r1,[r0,#0x28]         ;789
000660  4a98              LDR      r2,|L1.2244|
000662  8812              LDRH     r2,[r2,#0]            ;789  ; HOUR_AVZ
000664  4291              CMP      r1,r2                 ;789
000666  d10e              BNE      |L1.1670|
000668  f8901024          LDRB     r1,[r0,#0x24]         ;789
00066c  4a96              LDR      r2,|L1.2248|
00066e  8812              LDRH     r2,[r2,#0]            ;789  ; MIN_AVZ
000670  4291              CMP      r1,r2                 ;789
000672  d108              BNE      |L1.1670|
000674  f8900020          LDRB     r0,[r0,#0x20]         ;789
000678  4994              LDR      r1,|L1.2252|
00067a  8809              LDRH     r1,[r1,#0]            ;789  ; SEC_AVZ
00067c  4288              CMP      r0,r1                 ;789
00067e  d102              BNE      |L1.1670|
000680  f04f0001          MOV      r0,#1
000684  7760              STRB     r0,[r4,#0x1d]
                  |L1.1670|
;;;792    		}
;;;793    	}
;;;794    if(bAVZ)
000686  7f60              LDRB     r0,[r4,#0x1d]  ; bAVZ
000688  2800              CMP      r0,#0
00068a  d00c              BEQ      |L1.1702|
;;;795    	{
;;;796    	if(vz_start(AVZ_TIME))
00068c  4890              LDR      r0,|L1.2256|
00068e  8800              LDRH     r0,[r0,#0]  ; AVZ_TIME
000690  b2c0              UXTB     r0,r0
000692  f7fffffe          BL       vz_start
000696  2800              CMP      r0,#0
000698  d005              BEQ      |L1.1702|
;;;797    		{
;;;798    		bAVZ=0;
00069a  f04f0000          MOV      r0,#0
00069e  7760              STRB     r0,[r4,#0x1d]
;;;799    		avz_next_date_hndl();
0006a0  e8bd4010          POP      {r4,lr}
0006a4  e7fe              B        avz_next_date_hndl
                  |L1.1702|
;;;800    		}
;;;801    	}	
;;;802    
;;;803    }
0006a6  bd10              POP      {r4,pc}
;;;804    
                          ENDP

                  vz_drv PROC
;;;805    //-----------------------------------------------
;;;806    void vz_drv(void)
0006a8  b538              PUSH     {r3-r5,lr}
;;;807    { 
;;;808    if(spc_stat==spcVZ)
0006aa  4c7d              LDR      r4,|L1.2208|
0006ac  7ea0              LDRB     r0,[r4,#0x1a]  ; spc_stat
0006ae  2802              CMP      r0,#2
0006b0  d119              BNE      |L1.1766|
;;;809    	{
;;;810    	if((sk_stat[0]==1)||(VZ_CH_VENT_BLOK==0))
0006b2  4888              LDR      r0,|L1.2260|
0006b4  7800              LDRB     r0,[r0,#0]  ; sk_stat
0006b6  2801              CMP      r0,#1
0006b8  d016              BEQ      |L1.1768|
0006ba  4887              LDR      r0,|L1.2264|
0006bc  8800              LDRH     r0,[r0,#0]  ; VZ_CH_VENT_BLOK
0006be  b198              CBZ      r0,|L1.1768|
;;;811    		{
;;;812    
;;;813    	if(vz_cnt_s_<3600)
;;;814    		{
;;;815    		vz_cnt_s_++;
;;;816    		if(vz_cnt_s_>=3600)
;;;817    			{
;;;818    			vz_cnt_s_=0;
;;;819    			if(vz_cnt_h)
;;;820    				{
;;;821    				vz_cnt_h--;
;;;822    				vz_cnt_h_++;
;;;823    				}
;;;824    			}
;;;825    		}
;;;826    
;;;827    
;;;828    	if(vz_cnt_s<60)
;;;829    		{
;;;830    		vz_cnt_s++;
;;;831    		if(vz_cnt_s>=60)
;;;832    			{
;;;833    			vz_cnt_s=0;
;;;834    			
;;;835    			__ee_vz_cnt--;
;;;836    			lc640_write_int(EE_VZ_CNT,__ee_vz_cnt);
;;;837    			if((!__ee_vz_cnt)||(speedChrgBlckStat==1))
;;;838    				{
;;;839    				spc_stat=spcOFF;
;;;840    						__ee_spc_stat=spcOFF;
;;;841    		lc640_write_int(EE_SPC_STAT,spcOFF);
;;;842    
;;;843    //				hv_vz_stat=hvsOFF;
;;;844    //		lc640_write(EE_HV_VZ_STAT,hvsOFF);
;;;845    				vz_mem_hndl(0);
;;;846    				}
;;;847    			}
;;;848    		}
;;;849    
;;;850    		}
;;;851    	else 
;;;852    		{
;;;853    		if(((LPC_RTC->SEC)%10)==0)
0006c0  4886              LDR      r0,|L1.2268|
0006c2  7800              LDRB     r0,[r0,#0]
0006c4  f04f010a          MOV      r1,#0xa
0006c8  fbb0f2f1          UDIV     r2,r0,r1
0006cc  fb010012          MLS      r0,r1,r2,r0
0006d0  2800              CMP      r0,#0
0006d2  d108              BNE      |L1.1766|
;;;854    			{
;;;855    			show_mess(	"ВЫРАВНИВАЮЩИЙ ЗАРЯД ",
0006d4  f2413088          MOV      r0,#0x1388
0006d8  9000              STR      r0,[sp,#0]
0006da  a381              ADR      r3,|L1.2272|
0006dc  a286              ADR      r2,|L1.2296|
0006de  a18c              ADR      r1,|L1.2320|
0006e0  a091              ADR      r0,|L1.2344|
0006e2  f7fffffe          BL       show_mess
                  |L1.1766|
;;;856    						"    ЗАБЛОКИРОВАН    ",
;;;857    						"     НЕИСПРАВНА     ",
;;;858    						"    ВЕНТИЛЯЦИЯ!!!   ",
;;;859    						5000);			
;;;860    			}
;;;861    		}
;;;862    /*	if(vz_cnt_s_>=3)
;;;863    		{
;;;864    		if(sk_stat[0]==0)
;;;865    		} */
;;;866    
;;;867    	}
;;;868    
;;;869    
;;;870    } 
0006e6  bd38              POP      {r3-r5,pc}
                  |L1.1768|
0006e8  f8b4005e          LDRH     r0,[r4,#0x5e]         ;813  ; vz_cnt_s_
0006ec  f44f6161          MOV      r1,#0xe10             ;813
0006f0  2500              MOVS     r5,#0                 ;810
0006f2  4288              CMP      r0,r1                 ;813
0006f4  d215              BCS      |L1.1826|
0006f6  f1000001          ADD      r0,r0,#1              ;815
0006fa  b280              UXTH     r0,r0                 ;815
0006fc  f8a4005e          STRH     r0,[r4,#0x5e]         ;815
000700  4288              CMP      r0,r1                 ;816
000702  d30e              BCC      |L1.1826|
000704  f8a4505e          STRH     r5,[r4,#0x5e]         ;818
000708  f8b40060          LDRH     r0,[r4,#0x60]         ;819  ; vz_cnt_h
00070c  b148              CBZ      r0,|L1.1826|
00070e  f1a00001          SUB      r0,r0,#1              ;821
000712  f8240f60          STRH     r0,[r4,#0x60]!        ;821
000716  8860              LDRH     r0,[r4,#2]            ;822  ; vz_cnt_h_
000718  f1000001          ADD      r0,r0,#1              ;822
00071c  8060              STRH     r0,[r4,#2]            ;822
00071e  f1a40460          SUB      r4,r4,#0x60           ;822
                  |L1.1826|
000722  f8b4005c          LDRH     r0,[r4,#0x5c]         ;828  ; vz_cnt_s
000726  283c              CMP      r0,#0x3c              ;828
000728  d2dd              BCS      |L1.1766|
00072a  f1000001          ADD      r0,r0,#1              ;830
00072e  b280              UXTH     r0,r0                 ;830
000730  f8a4005c          STRH     r0,[r4,#0x5c]         ;830
000734  283c              CMP      r0,#0x3c              ;831
000736  d3d6              BCC      |L1.1766|
000738  f8245f5c          STRH     r5,[r4,#0x5c]!        ;833
00073c  8960              LDRH     r0,[r4,#0xa]          ;835  ; __ee_vz_cnt
00073e  f1a00001          SUB      r0,r0,#1              ;835
000742  b201              SXTH     r1,r0                 ;835
000744  8161              STRH     r1,[r4,#0xa]          ;835
000746  f44f7027          MOV      r0,#0x29c             ;836
00074a  f7fffffe          BL       lc640_write_int
00074e  8960              LDRH     r0,[r4,#0xa]          ;837  ; __ee_vz_cnt
000750  f1a4045c          SUB      r4,r4,#0x5c           ;837
000754  b118              CBZ      r0,|L1.1886|
000756  4853              LDR      r0,|L1.2212|
000758  8800              LDRH     r0,[r0,#0]            ;837  ; speedChrgBlckStat
00075a  2801              CMP      r0,#1                 ;837
00075c  d1c3              BNE      |L1.1766|
                  |L1.1886|
00075e  76a5              STRB     r5,[r4,#0x1a]         ;839
000760  f8a45068          STRH     r5,[r4,#0x68]         ;840
000764  2100              MOVS     r1,#0                 ;841
000766  f240209a          MOV      r0,#0x29a             ;841
00076a  f7fffffe          BL       lc640_write_int
00076e  e8bd4038          POP      {r3-r5,lr}            ;845
000772  2000              MOVS     r0,#0                 ;845
000774  f7ffbffe          B.W      vz_mem_hndl
;;;871    
                          ENDP

                  vz1_drv PROC
;;;873    //драйвер уравнительного заряда
;;;874    void vz1_drv(void)
000778  e92d4ff8          PUSH     {r3-r11,lr}
;;;875    {
;;;876    if(volt_region_cnt)volt_region_cnt--;
00077c  f8df8120          LDR      r8,|L1.2208|
000780  f9b80076          LDRSH    r0,[r8,#0x76]  ; volt_region_cnt
000784  b118              CBZ      r0,|L1.1934|
000786  f1a00001          SUB      r0,r0,#1
00078a  f8a80076          STRH     r0,[r8,#0x76]
                  |L1.1934|
;;;877    if(vz1_stat==vz1sOFF)
00078e  f8980026          LDRB     r0,[r8,#0x26]  ; vz1_stat
000792  b928              CBNZ     r0,|L1.1952|
;;;878    	{
;;;879    	mess_send(MESS2RELE_HNDL,PARAM_RELE_SAMOKALIBR,0,20);
000794  2314              MOVS     r3,#0x14
000796  2200              MOVS     r2,#0
000798  2164              MOVS     r1,#0x64
00079a  20d2              MOVS     r0,#0xd2
00079c  f7fffffe          BL       mess_send
                  |L1.1952|
;;;880    	}
;;;881    if(vz1_stat==vz1sSTEP1)
0007a0  f8980026          LDRB     r0,[r8,#0x26]  ; vz1_stat
;;;882    	{
;;;883    	if(vz1_stat_old!=vz1_stat)
;;;884    		{
;;;885    		vz1_stat_cnt=5;
;;;886    		}
;;;887    	if(vz1_stat_cnt)
;;;888    		{
;;;889    		vz1_stat_cnt--;
;;;890    		if(vz1_stat_cnt==0)
;;;891    			{
;;;892    			vz1_stat=vz1sERR1; 	//Не включилась вентиляция;
;;;893    			lc640_write(EE_VZ1_STAT,vz1sERR1);
;;;894    			}
;;;895    		}
;;;896    	if(sk_stat[0]==1)
0007a4  4d4b              LDR      r5,|L1.2260|
0007a6  f44f7bc9          MOV      r11,#0x192            ;893
0007aa  2801              CMP      r0,#1                 ;881
0007ac  d139              BNE      |L1.2082|
0007ae  f8980027          LDRB     r0,[r8,#0x27]         ;883  ; vz1_stat_old
0007b2  2801              CMP      r0,#1                 ;883
0007b4  d003              BEQ      |L1.1982|
0007b6  f04f0005          MOV      r0,#5                 ;885
0007ba  f8a80074          STRH     r0,[r8,#0x74]         ;885
                  |L1.1982|
0007be  f9b80074          LDRSH    r0,[r8,#0x74]         ;887  ; vz1_stat_cnt
0007c2  b168              CBZ      r0,|L1.2016|
0007c4  f1a00001          SUB      r0,r0,#1              ;889
0007c8  b200              SXTH     r0,r0                 ;889
0007ca  f8a80074          STRH     r0,[r8,#0x74]         ;889
0007ce  b938              CBNZ     r0,|L1.2016|
0007d0  f04f000b          MOV      r0,#0xb               ;892
0007d4  f8880026          STRB     r0,[r8,#0x26]         ;892
0007d8  4601              MOV      r1,r0                 ;893
0007da  4658              MOV      r0,r11                ;893
0007dc  f7fffffe          BL       lc640_write
                  |L1.2016|
0007e0  7828              LDRB     r0,[r5,#0]  ; sk_stat
0007e2  2801              CMP      r0,#1
0007e4  d117              BNE      |L1.2070|
;;;897    		{
;;;898    		vz1_stat=vz1sSTEP2;
0007e6  f04f0002          MOV      r0,#2
0007ea  f8880026          STRB     r0,[r8,#0x26]
;;;899    		lc640_write(EE_VZ1_STAT,vz1sSTEP2);
0007ee  4601              MOV      r1,r0
0007f0  4658              MOV      r0,r11
0007f2  f7fffffe          BL       lc640_write
;;;900    		tree_up(iVZ1_STEP2_2,1,0,0);
0007f6  2300              MOVS     r3,#0
0007f8  461a              MOV      r2,r3
0007fa  2101              MOVS     r1,#1
0007fc  20de              MOVS     r0,#0xde
0007fe  f7fffffe          BL       tree_up
;;;901    		tree_up(iVZ1_STEP2_1,0,0,0);
000802  2300              MOVS     r3,#0
000804  461a              MOV      r2,r3
000806  4619              MOV      r1,r3
000808  20dd              MOVS     r0,#0xdd
00080a  f7fffffe          BL       tree_up
;;;902    		ret(1200);
00080e  f44f6096          MOV      r0,#0x4b0
000812  f7fffffe          BL       ||ret||
                  |L1.2070|
;;;903    		}
;;;904    	mess_send(MESS2RELE_HNDL,PARAM_RELE_SAMOKALIBR,0,20);
000816  2314              MOVS     r3,#0x14
000818  2200              MOVS     r2,#0
00081a  2164              MOVS     r1,#0x64
00081c  20d2              MOVS     r0,#0xd2
00081e  f7fffffe          BL       mess_send
                  |L1.2082|
;;;905    	}
;;;906    
;;;907    if(vz1_stat==vz1sSTEP2)
000822  f8980026          LDRB     r0,[r8,#0x26]  ; vz1_stat
;;;908    	{
;;;909    	if((vz1_stat_old!=vz1_stat)||(vz1_stat_cnt==0))
;;;910    		{
;;;911    		vz1_stat_cnt=15;
000826  f04f090f          MOV      r9,#0xf
00082a  2802              CMP      r0,#2                 ;907
00082c  d118              BNE      |L1.2144|
00082e  f8980027          LDRB     r0,[r8,#0x27]         ;909  ; vz1_stat_old
000832  2802              CMP      r0,#2                 ;909
000834  d102              BNE      |L1.2108|
000836  f8b80074          LDRH     r0,[r8,#0x74]         ;909  ; vz1_stat_cnt
00083a  b908              CBNZ     r0,|L1.2112|
                  |L1.2108|
00083c  f8a89074          STRH     r9,[r8,#0x74]
                  |L1.2112|
;;;912    		}
;;;913    	vz1_stat_cnt--;
000840  f8b80074          LDRH     r0,[r8,#0x74]  ; vz1_stat_cnt
000844  f1a00001          SUB      r0,r0,#1
000848  f8a80074          STRH     r0,[r8,#0x74]
;;;914    	mess_send(MESS2RELE_HNDL,PARAM_RELE_SAMOKALIBR,0,20);
00084c  f04f0314          MOV      r3,#0x14
000850  f04f0200          MOV      r2,#0
000854  f04f0164          MOV      r1,#0x64
000858  f04f00d2          MOV      r0,#0xd2
00085c  f7fffffe          BL       mess_send
                  |L1.2144|
;;;915    	}
;;;916    
;;;917    if(vz1_stat==vz1sSTEP3)
000860  f8980026          LDRB     r0,[r8,#0x26]  ; vz1_stat
;;;918    	{
;;;919    	if((vz1_stat_old!=vz1_stat)||(vz1_stat_cnt==0))
;;;920    		{
;;;921    		vz1_stat_cnt=10;
000864  240a              MOVS     r4,#0xa
000866  2600              MOVS     r6,#0                 ;876
000868  f04f0a01          MOV      r10,#1                ;877
;;;922    
;;;923    		}
;;;924    	vz1_stat_cnt--;
;;;925    	if((vz1_stat_cnt==10)||(vz1_stat_cnt==9))
;;;926    		{
;;;927    		show_mess(	"     ВКЛЮЧИТЕ       ",
00086c  f2413788          MOV      r7,#0x1388
000870  2803              CMP      r0,#3                 ;917
000872  d171              BNE      |L1.2392|
000874  f8980027          LDRB     r0,[r8,#0x27]         ;919  ; vz1_stat_old
000878  2803              CMP      r0,#3                 ;919
00087a  d102              BNE      |L1.2178|
00087c  f8b80074          LDRH     r0,[r8,#0x74]         ;919  ; vz1_stat_cnt
000880  b908              CBNZ     r0,|L1.2182|
                  |L1.2178|
000882  f8a84074          STRH     r4,[r8,#0x74]         ;921
                  |L1.2182|
000886  f8b80074          LDRH     r0,[r8,#0x74]         ;924  ; vz1_stat_cnt
00088a  f1a00001          SUB      r0,r0,#1              ;924
00088e  b200              SXTH     r0,r0                 ;924
000890  f8a80074          STRH     r0,[r8,#0x74]         ;924
000894  280a              CMP      r0,#0xa               ;925
000896  d001              BEQ      |L1.2204|
000898  2809              CMP      r0,#9                 ;925
00089a  d164              BNE      |L1.2406|
                  |L1.2204|
00089c  a328              ADR      r3,|L1.2368|
00089e  e05c              B        |L1.2394|
                  |L1.2208|
                          DCD      ||area_number.25||
                  |L1.2212|
                          DCD      speedChrgBlckStat
                  |L1.2216|
                          DCD      Ib_ips_termokompensat
                  |L1.2220|
                          DCD      0xffff7360
                  |L1.2224|
                          DCD      0x40024000
                  |L1.2228|
                          DCD      AVZ
                  |L1.2232|
                          DCD      YEAR_AVZ
                  |L1.2236|
                          DCD      MONTH_AVZ
                  |L1.2240|
                          DCD      DATE_AVZ
                  |L1.2244|
                          DCD      HOUR_AVZ
                  |L1.2248|
                          DCD      MIN_AVZ
                  |L1.2252|
                          DCD      SEC_AVZ
                  |L1.2256|
                          DCD      AVZ_TIME
                  |L1.2260|
                          DCD      sk_stat
                  |L1.2264|
                          DCD      VZ_CH_VENT_BLOK
                  |L1.2268|
                          DCD      0x40024020
                  |L1.2272|
0008e0  20202020          DCB      "    ",194,197,205,210,200,203,223,214,200,223,"!!!   ",0
0008e4  c2c5cdd2
0008e8  c8cbdfd6
0008ec  c8df2121
0008f0  21202020
0008f4  00      
0008f5  00                DCB      0
0008f6  00                DCB      0
0008f7  00                DCB      0
                  |L1.2296|
0008f8  20202020          DCB      "     ",205,197,200,209,207,208,192,194,205,192,"     ",0
0008fc  20cdc5c8
000900  d1cfd0c0
000904  c2cdc020
000908  20202020
00090c  00      
00090d  00                DCB      0
00090e  00                DCB      0
00090f  00                DCB      0
                  |L1.2320|
000910  20202020          DCB      "    ",199,192,193,203,206,202,200,208,206,194,192,205," "
000914  c7c0c1cb
000918  cecac8d0
00091c  cec2c0cd
000920  20      
000921  20202000          DCB      "   ",0
000925  00                DCB      0
000926  00                DCB      0
000927  00                DCB      0
                  |L1.2344|
000928  c2dbd0c0          DCB      194,219,208,192,194,205,200,194,192,222,217,200,201," ",199
00092c  c2cdc8c2
000930  c0ded9c8
000934  c920c7  
000937  c0d0dfc4          DCB      192,208,223,196," ",0
00093b  2000    
00093d  00                DCB      0
00093e  00                DCB      0
00093f  00                DCB      0
                  |L1.2368|
000940  20202020          DCB      "    ",205,192,207,208,223,198,197,205,200,223,"      ",0
000944  cdc0cfd0
000948  dfc6c5cd
00094c  c8df2020
000950  20202020
000954  00      
000955  00                DCB      0
000956  00                DCB      0
000957  00                DCB      0
                  |L1.2392|
000958  e01c              B        |L1.2452|
                  |L1.2394|
00095a  a2f4              ADR      r2,|L1.3372|
00095c  a1f9              ADR      r1,|L1.3396|
00095e  a0ff              ADR      r0,|L1.3420|
000960  9700              STR      r7,[sp,#0]
000962  f7fffffe          BL       show_mess
                  |L1.2406|
;;;928    					"      ТУМБЛЕР       ",
;;;929    					"     ВЫСОКОГО       ",
;;;930    					"    НАПРЯЖЕНИЯ      ",
;;;931    					5000);
;;;932    		}
;;;933    	if(sk_stat[1]==1)
000966  7868              LDRB     r0,[r5,#1]  ; sk_stat
000968  2801              CMP      r0,#1
00096a  d10d              BNE      |L1.2440|
;;;934    		{
;;;935    		vz1_stat=vz1sWRK;
00096c  f8884026          STRB     r4,[r8,#0x26]
;;;936    		lc640_write(EE_VZ1_STAT,vz1sWRK);
000970  210a              MOVS     r1,#0xa
000972  4658              MOV      r0,r11
000974  f7fffffe          BL       lc640_write
;;;937    		volt_region=1;
000978  f888a028          STRB     r10,[r8,#0x28]
;;;938    		cntrl_stat=0;
00097c  f8a8602c          STRH     r6,[r8,#0x2c]
;;;939    		cntrl_stat_new=0;
000980  f8a86042          STRH     r6,[r8,#0x42]
;;;940    		cntrl_stat_old=0;
000984  f8a8602e          STRH     r6,[r8,#0x2e]
                  |L1.2440|
;;;941    		}
;;;942    	mess_send(MESS2RELE_HNDL,PARAM_RELE_SAMOKALIBR,0,20);
000988  2314              MOVS     r3,#0x14
00098a  2200              MOVS     r2,#0
00098c  2164              MOVS     r1,#0x64
00098e  20d2              MOVS     r0,#0xd2
000990  f7fffffe          BL       mess_send
                  |L1.2452|
;;;943    	}
;;;944    
;;;945    if(vz1_stat==vz1sWRK)
000994  f8980026          LDRB     r0,[r8,#0x26]  ; vz1_stat
000998  280a              CMP      r0,#0xa
00099a  d17d              BNE      |L1.2712|
;;;946    	{
;;;947    	if(vz1_stat_old!=vz1_stat)
00099c  f8980027          LDRB     r0,[r8,#0x27]  ; vz1_stat_old
;;;948    		{
;;;949    		vz1_wrk_cnt=3600L/*100L*/*((long)UZ_T);
0009a0  49f4              LDR      r1,|L1.3444|
0009a2  280a              CMP      r0,#0xa               ;947
0009a4  d008              BEQ      |L1.2488|
0009a6  48f4              LDR      r0,|L1.3448|
0009a8  f44f6261          MOV      r2,#0xe10
0009ac  f9b00000          LDRSH    r0,[r0,#0]  ; UZ_T
0009b0  fb00f002          MUL      r0,r0,r2
0009b4  6388              STR      r0,[r1,#0x38]  ; vz1_wrk_cnt
;;;950    		//if(VZ_HR==0)  	hv_vz_wrk_cnt=1800L;
;;;951    		vz1_up_cnt=0L;
0009b6  63ce              STR      r6,[r1,#0x3c]  ; vz1_up_cnt
                  |L1.2488|
;;;952    
;;;953    		}
;;;954    	vz1_wrk_cnt--;
0009b8  6b88              LDR      r0,[r1,#0x38]  ; vz1_wrk_cnt
0009ba  f1a00001          SUB      r0,r0,#1
0009be  6388              STR      r0,[r1,#0x38]  ; vz1_wrk_cnt
;;;955    	vz1_up_cnt++;
0009c0  6bca              LDR      r2,[r1,#0x3c]  ; vz1_up_cnt
0009c2  f1020201          ADD      r2,r2,#1
0009c6  63ca              STR      r2,[r1,#0x3c]  ; vz1_up_cnt
;;;956    
;;;957    	if(vz1_wrk_cnt==0)
0009c8  b940              CBNZ     r0,|L1.2524|
;;;958    		{
;;;959    		vz1_stat=vz1sFINE;
0009ca  f8889026          STRB     r9,[r8,#0x26]
;;;960    		lc640_write(EE_VZ1_STAT,vz1sFINE);
0009ce  210f              MOVS     r1,#0xf
0009d0  4658              MOV      r0,r11
0009d2  f7fffffe          BL       lc640_write
;;;961    		uz_mem_hndl(0);
0009d6  2000              MOVS     r0,#0
0009d8  f7fffffe          BL       uz_mem_hndl
                  |L1.2524|
;;;962    		}
;;;963    	if(sk_stat[0]==0)
0009dc  7828              LDRB     r0,[r5,#0]  ; sk_stat
0009de  b938              CBNZ     r0,|L1.2544|
;;;964    		{
;;;965    		vz1_stat=vz1sERR2;
0009e0  f04f000c          MOV      r0,#0xc
0009e4  f8880026          STRB     r0,[r8,#0x26]
;;;966    		lc640_write(EE_VZ1_STAT,vz1sERR2);
0009e8  4601              MOV      r1,r0
0009ea  4658              MOV      r0,r11
0009ec  f7fffffe          BL       lc640_write
                  |L1.2544|
;;;967    		}
;;;968    	if(sk_stat[1]==0)
0009f0  7868              LDRB     r0,[r5,#1]  ; sk_stat
0009f2  b938              CBNZ     r0,|L1.2564|
;;;969    		{
;;;970    		vz1_stat=vz1sERR3;
0009f4  f04f000d          MOV      r0,#0xd
0009f8  f8880026          STRB     r0,[r8,#0x26]
;;;971    		lc640_write(EE_VZ1_STAT,vz1sERR3);
0009fc  4601              MOV      r1,r0
0009fe  4658              MOV      r0,r11
000a00  f7fffffe          BL       lc640_write
                  |L1.2564|
;;;972    		}
;;;973    	if(((Ibmax/10)>IZMAX_)&&(cntrl_stat<=20)&&(volt_region==1)&&(volt_region_cnt==0))
000a04  f9b80044          LDRSH    r0,[r8,#0x44]  ; Ibmax
000a08  f8b81046          LDRH     r1,[r8,#0x46]  ; IZMAX_
000a0c  fb90f0f4          SDIV     r0,r0,r4
;;;974    		{
;;;975    		volt_region=0;
;;;976    		cntrl_stat=1000;
000a10  f44f727a          MOV      r2,#0x3e8
000a14  4288              CMP      r0,r1                 ;973
000a16  dd16              BLE      |L1.2630|
000a18  f9b8302c          LDRSH    r3,[r8,#0x2c]         ;973  ; cntrl_stat
000a1c  2b14              CMP      r3,#0x14              ;973
000a1e  dc12              BGT      |L1.2630|
000a20  f8983028          LDRB     r3,[r8,#0x28]         ;973  ; volt_region
000a24  2b01              CMP      r3,#1                 ;973
000a26  d10e              BNE      |L1.2630|
000a28  f8b83076          LDRH     r3,[r8,#0x76]         ;973  ; volt_region_cnt
000a2c  b95b              CBNZ     r3,|L1.2630|
000a2e  f8886028          STRB     r6,[r8,#0x28]         ;975
000a32  f8a8202c          STRH     r2,[r8,#0x2c]
;;;977    		cntrl_stat_new=1000;
000a36  f8a82042          STRH     r2,[r8,#0x42]
;;;978    		cntrl_stat_old=1000;
000a3a  f8a8202e          STRH     r2,[r8,#0x2e]
;;;979    		volt_region_cnt=110;
000a3e  f04f036e          MOV      r3,#0x6e
000a42  f8a83076          STRH     r3,[r8,#0x76]
                  |L1.2630|
;;;980    		}
;;;981    	if(((Ibmax/10)<IZMAX_)&&(cntrl_stat>=1000)&&(volt_region==0)&&(volt_region_cnt==0))
000a46  4288              CMP      r0,r1
000a48  da13              BGE      |L1.2674|
000a4a  f9b8002c          LDRSH    r0,[r8,#0x2c]  ; cntrl_stat
000a4e  4290              CMP      r0,r2
000a50  db0f              BLT      |L1.2674|
000a52  f8980028          LDRB     r0,[r8,#0x28]  ; volt_region
000a56  b960              CBNZ     r0,|L1.2674|
000a58  f8b80076          LDRH     r0,[r8,#0x76]  ; volt_region_cnt
000a5c  b948              CBNZ     r0,|L1.2674|
;;;982    		{
;;;983    		volt_region=1;
000a5e  f888a028          STRB     r10,[r8,#0x28]
;;;984    		cntrl_stat=10;
000a62  f8a8402c          STRH     r4,[r8,#0x2c]
;;;985    		cntrl_stat_new=10;
000a66  f8a84042          STRH     r4,[r8,#0x42]
;;;986    		cntrl_stat_old=10;
000a6a  f8a8402e          STRH     r4,[r8,#0x2e]
;;;987    		volt_region_cnt=10;
000a6e  f8a84076          STRH     r4,[r8,#0x76]
                  |L1.2674|
;;;988    		}
;;;989    	if(volt_region==0) 		mess_send(MESS2RELE_HNDL,PARAM_RELE_SAMOKALIBR,0,20);
000a72  f8980028          LDRB     r0,[r8,#0x28]  ; volt_region
000a76  b110              CBZ      r0,|L1.2686|
;;;990    	else if(volt_region==1) mess_send(MESS2RELE_HNDL,PARAM_RELE_SAMOKALIBR,1,20);
000a78  2801              CMP      r0,#1
000a7a  d007              BEQ      |L1.2700|
000a7c  e00c              B        |L1.2712|
                  |L1.2686|
000a7e  2314              MOVS     r3,#0x14              ;989
000a80  2200              MOVS     r2,#0                 ;989
000a82  2164              MOVS     r1,#0x64              ;989
000a84  20d2              MOVS     r0,#0xd2              ;989
000a86  f7fffffe          BL       mess_send
000a8a  e005              B        |L1.2712|
                  |L1.2700|
000a8c  2314              MOVS     r3,#0x14
000a8e  2201              MOVS     r2,#1
000a90  2164              MOVS     r1,#0x64
000a92  20d2              MOVS     r0,#0xd2
000a94  f7fffffe          BL       mess_send
                  |L1.2712|
;;;991    	}
;;;992    
;;;993    if(vz1_stat==vz1sERR1)		//Отсутствует вентиляция при включении
000a98  f8980026          LDRB     r0,[r8,#0x26]  ; vz1_stat
000a9c  280b              CMP      r0,#0xb
000a9e  d120              BNE      |L1.2786|
;;;994    	{
;;;995    	if((vz1_stat_old!=vz1_stat)||(vz1_stat_cnt==0))
000aa0  f8980027          LDRB     r0,[r8,#0x27]  ; vz1_stat_old
000aa4  280b              CMP      r0,#0xb
000aa6  d102              BNE      |L1.2734|
000aa8  f8b80074          LDRH     r0,[r8,#0x74]  ; vz1_stat_cnt
000aac  b908              CBNZ     r0,|L1.2738|
                  |L1.2734|
;;;996    		{
;;;997    		vz1_stat_cnt=10;
000aae  f8a84074          STRH     r4,[r8,#0x74]
                  |L1.2738|
;;;998    		}
;;;999    	vz1_stat_cnt--;
000ab2  f8b80074          LDRH     r0,[r8,#0x74]  ; vz1_stat_cnt
000ab6  f1a00001          SUB      r0,r0,#1
000aba  b200              SXTH     r0,r0
000abc  f8a80074          STRH     r0,[r8,#0x74]
;;;1000   	if((vz1_stat_cnt==10)||(vz1_stat_cnt==9))
000ac0  280a              CMP      r0,#0xa
000ac2  d001              BEQ      |L1.2760|
000ac4  2809              CMP      r0,#9
000ac6  d106              BNE      |L1.2774|
                  |L1.2760|
;;;1001   		{
;;;1002   		show_mess(	"УРАВНИТЕЛЬНЫЙ ЗАРЯД ",
000ac8  a3ac              ADR      r3,|L1.3452|
000aca  a2b2              ADR      r2,|L1.3476|
000acc  a1b7              ADR      r1,|L1.3500|
000ace  a0bd              ADR      r0,|L1.3524|
000ad0  9700              STR      r7,[sp,#0]
000ad2  f7fffffe          BL       show_mess
                  |L1.2774|
;;;1003   					"   НЕ МОЖЕТ БЫТЬ    ",
;;;1004   					"      ВКЛЮЧЕН       ",
;;;1005   					"  БЕЗ ВЕНТИЛЯЦИИ!!  ",
;;;1006   					5000);
;;;1007   		}
;;;1008   	mess_send(MESS2RELE_HNDL,PARAM_RELE_SAMOKALIBR,0,20);
000ad6  2314              MOVS     r3,#0x14
000ad8  2200              MOVS     r2,#0
000ada  2164              MOVS     r1,#0x64
000adc  20d2              MOVS     r0,#0xd2
000ade  f7fffffe          BL       mess_send
                  |L1.2786|
;;;1009   	}
;;;1010   if(vz1_stat==vz1sERR2)		//Пропала вентиляция при работе
000ae2  f8980026          LDRB     r0,[r8,#0x26]  ; vz1_stat
000ae6  280c              CMP      r0,#0xc
000ae8  d12c              BNE      |L1.2884|
;;;1011   	{
;;;1012   	if((vz1_stat_old!=vz1_stat)||(vz1_stat_cnt==0))
000aea  f8980027          LDRB     r0,[r8,#0x27]  ; vz1_stat_old
000aee  280c              CMP      r0,#0xc
000af0  d102              BNE      |L1.2808|
000af2  f8b80074          LDRH     r0,[r8,#0x74]  ; vz1_stat_cnt
000af6  b908              CBNZ     r0,|L1.2812|
                  |L1.2808|
;;;1013   		{
;;;1014   		vz1_stat_cnt=10;
000af8  f8a84074          STRH     r4,[r8,#0x74]
                  |L1.2812|
;;;1015   		}
;;;1016   	vz1_stat_cnt--;
000afc  f8b80074          LDRH     r0,[r8,#0x74]  ; vz1_stat_cnt
000b00  f1a00001          SUB      r0,r0,#1
000b04  b200              SXTH     r0,r0
000b06  f8a80074          STRH     r0,[r8,#0x74]
;;;1017   	if((vz1_stat_cnt==10)||(vz1_stat_cnt==9))
000b0a  280a              CMP      r0,#0xa
000b0c  d001              BEQ      |L1.2834|
000b0e  2809              CMP      r0,#9
000b10  d109              BNE      |L1.2854|
                  |L1.2834|
;;;1018   		{
;;;1019   		show_mess(	"УРАВНИТЕЛЬНЫЙ ЗАРЯД ",
000b12  f2af2334          ADR      r3,|L1.2272|
000b16  f2af2220          ADR      r2,|L1.2296|
000b1a  f2af210c          ADR      r1,|L1.2320|
000b1e  a0a9              ADR      r0,|L1.3524|
000b20  9700              STR      r7,[sp,#0]
000b22  f7fffffe          BL       show_mess
                  |L1.2854|
;;;1020   					"    ЗАБЛОКИРОВАН    ",
;;;1021   					"     НЕИСПРАВНА     ",
;;;1022   					"    ВЕНТИЛЯЦИЯ!!!   ",
;;;1023   					5000);
;;;1024   		}
;;;1025   	if(sk_stat[0]==1)
000b26  7828              LDRB     r0,[r5,#0]  ; sk_stat
000b28  2801              CMP      r0,#1
000b2a  d105              BNE      |L1.2872|
;;;1026   		{
;;;1027   		vz1_stat=vz1sWRK;
000b2c  f8884026          STRB     r4,[r8,#0x26]
;;;1028   		lc640_write(EE_VZ1_STAT,vz1sWRK);
000b30  210a              MOVS     r1,#0xa
000b32  4658              MOV      r0,r11
000b34  f7fffffe          BL       lc640_write
                  |L1.2872|
;;;1029   		}
;;;1030   	mess_send(MESS2RELE_HNDL,PARAM_RELE_SAMOKALIBR,0,20);
000b38  2314              MOVS     r3,#0x14
000b3a  2200              MOVS     r2,#0
000b3c  2164              MOVS     r1,#0x64
000b3e  20d2              MOVS     r0,#0xd2
000b40  f7fffffe          BL       mess_send
                  |L1.2884|
;;;1031   	}
;;;1032   
;;;1033   if(vz1_stat==vz1sERR3)		//Отключен тумблер "Высокое напряжение"
000b44  f8980026          LDRB     r0,[r8,#0x26]  ; vz1_stat
000b48  280d              CMP      r0,#0xd
000b4a  d129              BNE      |L1.2976|
;;;1034   	{
;;;1035   	if((vz1_stat_old!=vz1_stat)||(vz1_stat_cnt==0))
000b4c  f8980027          LDRB     r0,[r8,#0x27]  ; vz1_stat_old
000b50  280d              CMP      r0,#0xd
000b52  d102              BNE      |L1.2906|
000b54  f8b80074          LDRH     r0,[r8,#0x74]  ; vz1_stat_cnt
000b58  b908              CBNZ     r0,|L1.2910|
                  |L1.2906|
;;;1036   		{
;;;1037   		vz1_stat_cnt=10;
000b5a  f8a84074          STRH     r4,[r8,#0x74]
                  |L1.2910|
;;;1038   		}
;;;1039   	vz1_stat_cnt--;
000b5e  f8b80074          LDRH     r0,[r8,#0x74]  ; vz1_stat_cnt
000b62  f1a00001          SUB      r0,r0,#1
000b66  b200              SXTH     r0,r0
000b68  f8a80074          STRH     r0,[r8,#0x74]
;;;1040   	if((vz1_stat_cnt==10)||(vz1_stat_cnt==9))
000b6c  280a              CMP      r0,#0xa
000b6e  d001              BEQ      |L1.2932|
000b70  2809              CMP      r0,#9
000b72  d106              BNE      |L1.2946|
                  |L1.2932|
;;;1041   		{
;;;1042   		show_mess(	"УРАВНИТЕЛЬНЫЙ ЗАРЯД ",
000b74  a399              ADR      r3,|L1.3548|
000b76  a29f              ADR      r2,|L1.3572|
000b78  a1a4              ADR      r1,|L1.3596|
000b7a  a092              ADR      r0,|L1.3524|
000b7c  9700              STR      r7,[sp,#0]
000b7e  f7fffffe          BL       show_mess
                  |L1.2946|
;;;1043   					"  БУДЕТ ПРОДОЛЖЕН   ",
;;;1044   					"  ПОСЛЕ ВКЛЮЧЕНИЯ   ",
;;;1045   					"*   ТУМБЛЕРА!!!     ",
;;;1046   					5000);
;;;1047   		}
;;;1048   	if(sk_stat[1]==1)
000b82  7868              LDRB     r0,[r5,#1]  ; sk_stat
000b84  2801              CMP      r0,#1
000b86  d105              BNE      |L1.2964|
;;;1049   		{
;;;1050   		vz1_stat=vz1sWRK;
000b88  f8884026          STRB     r4,[r8,#0x26]
;;;1051   		lc640_write(EE_VZ1_STAT,vz1sWRK);
000b8c  210a              MOVS     r1,#0xa
000b8e  4658              MOV      r0,r11
000b90  f7fffffe          BL       lc640_write
                  |L1.2964|
;;;1052   		}
;;;1053   	mess_send(MESS2RELE_HNDL,PARAM_RELE_SAMOKALIBR,0,20);
000b94  2314              MOVS     r3,#0x14
000b96  2200              MOVS     r2,#0
000b98  2164              MOVS     r1,#0x64
000b9a  20d2              MOVS     r0,#0xd2
000b9c  f7fffffe          BL       mess_send
                  |L1.2976|
;;;1054   	}
;;;1055   if(vz1_stat==vz1sERR4)		//ВЗ закончился а тумблер включен
000ba0  f8980026          LDRB     r0,[r8,#0x26]  ; vz1_stat
000ba4  280e              CMP      r0,#0xe
000ba6  d12b              BNE      |L1.3072|
;;;1056   	{
;;;1057   	if((vz1_stat_old!=vz1_stat)||(vz1_stat_cnt==0))
000ba8  f8980027          LDRB     r0,[r8,#0x27]  ; vz1_stat_old
000bac  280e              CMP      r0,#0xe
000bae  d102              BNE      |L1.2998|
000bb0  f8b80074          LDRH     r0,[r8,#0x74]  ; vz1_stat_cnt
000bb4  b908              CBNZ     r0,|L1.3002|
                  |L1.2998|
;;;1058   		{
;;;1059   		vz1_stat_cnt=10;
000bb6  f8a84074          STRH     r4,[r8,#0x74]
                  |L1.3002|
;;;1060   		}
;;;1061   	vz1_stat_cnt--;
000bba  f8b80074          LDRH     r0,[r8,#0x74]  ; vz1_stat_cnt
000bbe  f1a00001          SUB      r0,r0,#1
000bc2  b200              SXTH     r0,r0
000bc4  f8a80074          STRH     r0,[r8,#0x74]
;;;1062   	if((vz1_stat_cnt==10)||(vz1_stat_cnt==9))
000bc8  280a              CMP      r0,#0xa
000bca  d001              BEQ      |L1.3024|
000bcc  2809              CMP      r0,#9
000bce  d107              BNE      |L1.3040|
                  |L1.3024|
;;;1063   		{
;;;1064   		show_mess(	"*    ВЫКЛЮЧИТЕ      ",
000bd0  f2af2394          ADR      r3,|L1.2368|
000bd4  a255              ADR      r2,|L1.3372|
000bd6  a15b              ADR      r1,|L1.3396|
000bd8  a092              ADR      r0,|L1.3620|
000bda  9700              STR      r7,[sp,#0]
000bdc  f7fffffe          BL       show_mess
                  |L1.3040|
;;;1065   					"      ТУМБЛЕР       ",
;;;1066   					"     ВЫСОКОГО       ",
;;;1067   					"    НАПРЯЖЕНИЯ      ",
;;;1068   					5000);
;;;1069   		}
;;;1070   	if(sk_stat[1]==0)
000be0  7868              LDRB     r0,[r5,#1]  ; sk_stat
000be2  b938              CBNZ     r0,|L1.3060|
;;;1071   		{
;;;1072   		vz1_stat=vz1sOFF;
000be4  f8886026          STRB     r6,[r8,#0x26]
;;;1073   		lc640_write(EE_VZ1_STAT,vz1sOFF);
000be8  2100              MOVS     r1,#0
000bea  4658              MOV      r0,r11
000bec  f7fffffe          BL       lc640_write
;;;1074   		vz_stop();
000bf0  f7fffffe          BL       vz_stop
                  |L1.3060|
;;;1075   
;;;1076   		}
;;;1077   	mess_send(MESS2RELE_HNDL,PARAM_RELE_SAMOKALIBR,1,20);
000bf4  2314              MOVS     r3,#0x14
000bf6  2201              MOVS     r2,#1
000bf8  2164              MOVS     r1,#0x64
000bfa  20d2              MOVS     r0,#0xd2
000bfc  f7fffffe          BL       mess_send
                  |L1.3072|
;;;1078   	}
;;;1079   if(vz1_stat==vz1sFINE)		//УЗ закончился, напоминание
000c00  f8980026          LDRB     r0,[r8,#0x26]  ; vz1_stat
;;;1080   	{
;;;1081   	if((vz1_stat_old!=vz1_stat)||(vz1_stat_cnt==0))
;;;1082   		{
;;;1083   		vz1_stat_cnt=10;
;;;1084   		}
;;;1085   	vz1_stat_cnt--;
;;;1086   	if((vz1_stat_cnt==10)||(vz1_stat_cnt==9))
;;;1087   		{
;;;1088   		show_mess(	"   УРАВНИТЕЛЬНЫЙ    ",
000c04  f64037b8          MOV      r7,#0xbb8
000c08  280f              CMP      r0,#0xf               ;1079
000c0a  d136              BNE      |L1.3194|
000c0c  f8980027          LDRB     r0,[r8,#0x27]         ;1081  ; vz1_stat_old
000c10  280f              CMP      r0,#0xf               ;1081
000c12  d102              BNE      |L1.3098|
000c14  f8b80074          LDRH     r0,[r8,#0x74]         ;1081  ; vz1_stat_cnt
000c18  b908              CBNZ     r0,|L1.3102|
                  |L1.3098|
000c1a  f8a84074          STRH     r4,[r8,#0x74]         ;1083
                  |L1.3102|
000c1e  f8b80074          LDRH     r0,[r8,#0x74]         ;1085  ; vz1_stat_cnt
000c22  f1a00001          SUB      r0,r0,#1              ;1085
000c26  b200              SXTH     r0,r0                 ;1085
000c28  f8a80074          STRH     r0,[r8,#0x74]         ;1085
000c2c  280a              CMP      r0,#0xa               ;1086
000c2e  d001              BEQ      |L1.3124|
000c30  2809              CMP      r0,#9                 ;1086
000c32  d106              BNE      |L1.3138|
                  |L1.3124|
000c34  a381              ADR      r3,|L1.3644|
000c36  a287              ADR      r2,|L1.3668|
000c38  a18c              ADR      r1,|L1.3692|
000c3a  a092              ADR      r0,|L1.3716|
000c3c  9700              STR      r7,[sp,#0]
000c3e  f7fffffe          BL       show_mess
                  |L1.3138|
;;;1089   					"       ЗАРЯД        ",
;;;1090   					"      УСПЕШНО       ",
;;;1091   					"     ЗАВЕРШЕН       ",
;;;1092   					3000);
;;;1093   		}
;;;1094   	if((vz1_stat_cnt==6)||(vz1_stat_cnt==5))
000c42  f9b80074          LDRSH    r0,[r8,#0x74]  ; vz1_stat_cnt
000c46  2806              CMP      r0,#6
000c48  d001              BEQ      |L1.3150|
000c4a  2805              CMP      r0,#5
000c4c  d107              BNE      |L1.3166|
                  |L1.3150|
;;;1095   		{
;;;1096   		show_mess(	"     ВЫКЛЮЧИТЕ      ",
000c4e  f2af3310          ADR      r3,|L1.2368|
000c52  a236              ADR      r2,|L1.3372|
000c54  a13b              ADR      r1,|L1.3396|
000c56  a091              ADR      r0,|L1.3740|
000c58  9700              STR      r7,[sp,#0]
000c5a  f7fffffe          BL       show_mess
                  |L1.3166|
;;;1097   					"      ТУМБЛЕР       ",
;;;1098   					"     ВЫСОКОГО       ",
;;;1099   					"    НАПРЯЖЕНИЯ      ",
;;;1100   					3000);
;;;1101   		}
;;;1102   	if(sk_stat[1]==0)
000c5e  7868              LDRB     r0,[r5,#1]  ; sk_stat
000c60  b928              CBNZ     r0,|L1.3182|
;;;1103   		{
;;;1104   		vz1_stat=vz1sOFF;
000c62  f8886026          STRB     r6,[r8,#0x26]
;;;1105   		lc640_write(EE_VZ1_STAT,vz1sOFF);
000c66  2100              MOVS     r1,#0
000c68  4658              MOV      r0,r11
000c6a  f7fffffe          BL       lc640_write
                  |L1.3182|
;;;1106   		}
;;;1107   	mess_send(MESS2RELE_HNDL,PARAM_RELE_SAMOKALIBR,0,20);
000c6e  2314              MOVS     r3,#0x14
000c70  2200              MOVS     r2,#0
000c72  2164              MOVS     r1,#0x64
000c74  20d2              MOVS     r0,#0xd2
000c76  f7fffffe          BL       mess_send
                  |L1.3194|
;;;1108   	}
;;;1109   
;;;1110   if(vz1_stat==vz1sSTOP)		//УЗ прекращен, напоминание
000c7a  f8980026          LDRB     r0,[r8,#0x26]  ; vz1_stat
000c7e  2810              CMP      r0,#0x10
000c80  d136              BNE      |L1.3312|
;;;1111   	{
;;;1112   	if((vz1_stat_old!=vz1_stat)||(vz1_stat_cnt==0))
000c82  f8980027          LDRB     r0,[r8,#0x27]  ; vz1_stat_old
000c86  2810              CMP      r0,#0x10
000c88  d102              BNE      |L1.3216|
000c8a  f8b80074          LDRH     r0,[r8,#0x74]  ; vz1_stat_cnt
000c8e  b908              CBNZ     r0,|L1.3220|
                  |L1.3216|
;;;1113   		{
;;;1114   		vz1_stat_cnt=10;
000c90  f8a84074          STRH     r4,[r8,#0x74]
                  |L1.3220|
;;;1115   		}
;;;1116   	vz1_stat_cnt--;
000c94  f8b80074          LDRH     r0,[r8,#0x74]  ; vz1_stat_cnt
000c98  f1a00001          SUB      r0,r0,#1
000c9c  b200              SXTH     r0,r0
000c9e  f8a80074          STRH     r0,[r8,#0x74]
;;;1117   	if((vz1_stat_cnt==10)||(vz1_stat_cnt==9))
000ca2  280a              CMP      r0,#0xa
000ca4  d001              BEQ      |L1.3242|
000ca6  2809              CMP      r0,#9
000ca8  d106              BNE      |L1.3256|
                  |L1.3242|
;;;1118   		{
;;;1119   		show_mess(	"   УРАВНИТЕЛЬНЫЙ    ",
000caa  a382              ADR      r3,|L1.3764|
000cac  a287              ADR      r2,|L1.3788|
000cae  a16f              ADR      r1,|L1.3692|
000cb0  a074              ADR      r0,|L1.3716|
000cb2  9700              STR      r7,[sp,#0]
000cb4  f7fffffe          BL       show_mess
                  |L1.3256|
;;;1120   					"       ЗАРЯД        ",
;;;1121   					"     ПРЕКРАЩЕН      ",
;;;1122   					"                    ",
;;;1123   					3000);
;;;1124   		}
;;;1125   	if((vz1_stat_cnt==6)||(vz1_stat_cnt==5))
000cb8  f9b80074          LDRSH    r0,[r8,#0x74]  ; vz1_stat_cnt
000cbc  2806              CMP      r0,#6
000cbe  d001              BEQ      |L1.3268|
000cc0  2805              CMP      r0,#5
000cc2  d107              BNE      |L1.3284|
                  |L1.3268|
;;;1126   		{
;;;1127   		show_mess(	"     ВЫКЛЮЧИТЕ      ",
000cc4  f2af3388          ADR      r3,|L1.2368|
000cc8  a218              ADR      r2,|L1.3372|
000cca  a11e              ADR      r1,|L1.3396|
000ccc  a073              ADR      r0,|L1.3740|
000cce  9700              STR      r7,[sp,#0]
000cd0  f7fffffe          BL       show_mess
                  |L1.3284|
;;;1128   					"      ТУМБЛЕР       ",
;;;1129   					"     ВЫСОКОГО       ",
;;;1130   					"    НАПРЯЖЕНИЯ      ",
;;;1131   					3000);
;;;1132   		}
;;;1133   	if(sk_stat[1]==0)
000cd4  7868              LDRB     r0,[r5,#1]  ; sk_stat
000cd6  b928              CBNZ     r0,|L1.3300|
;;;1134   		{
;;;1135   		vz1_stat=vz1sOFF;
000cd8  f8886026          STRB     r6,[r8,#0x26]
;;;1136   		lc640_write(EE_VZ1_STAT,vz1sOFF);
000cdc  2100              MOVS     r1,#0
000cde  4658              MOV      r0,r11
000ce0  f7fffffe          BL       lc640_write
                  |L1.3300|
;;;1137   		}
;;;1138   	mess_send(MESS2RELE_HNDL,PARAM_RELE_SAMOKALIBR,0,20);
000ce4  2314              MOVS     r3,#0x14
000ce6  2200              MOVS     r2,#0
000ce8  2164              MOVS     r1,#0x64
000cea  20d2              MOVS     r0,#0xd2
000cec  f7fffffe          BL       mess_send
                  |L1.3312|
;;;1139   	}
;;;1140   
;;;1141   vz1_stat_old=vz1_stat;
000cf0  f8980026          LDRB     r0,[r8,#0x26]  ; vz1_stat
000cf4  f8880027          STRB     r0,[r8,#0x27]
;;;1142   
;;;1143   
;;;1144   
;;;1145   }
000cf8  e8bd8ff8          POP      {r3-r11,pc}
;;;1146   
                          ENDP

                  vz1_start PROC
;;;1148   //старт уравнительног заряда
;;;1149   char vz1_start(char hour)
000cfc  b510              PUSH     {r4,lr}
;;;1150   {          
;;;1151   char out;
;;;1152   out=0;
000cfe  f04f0000          MOV      r0,#0
;;;1153   if((spc_stat==spcOFF)&&(speedChrgBlckStat!=1)&&(vz1_stat==vz1sOFF))
000d02  491c              LDR      r1,|L1.3444|
000d04  f1a10180          SUB      r1,r1,#0x80
000d08  7e8a              LDRB     r2,[r1,#0x1a]  ; spc_stat
000d0a  2a00              CMP      r2,#0
000d0c  d10d              BNE      |L1.3370|
000d0e  4a75              LDR      r2,|L1.3812|
000d10  8812              LDRH     r2,[r2,#0]  ; speedChrgBlckStat
000d12  2a01              CMP      r2,#1
000d14  d009              BEQ      |L1.3370|
000d16  f8912026          LDRB     r2,[r1,#0x26]  ; vz1_stat
000d1a  2a00              CMP      r2,#0
000d1c  d105              BNE      |L1.3370|
;;;1154   	{
;;;1155   	if(vz1_stat==vz1sOFF)
;;;1156   		{
;;;1157   		vz1_stat=vz1sSTEP1;
000d1e  f04f0001          MOV      r0,#1
000d22  f8810026          STRB     r0,[r1,#0x26]
;;;1158   		lc640_write(EE_VZ1_STAT,vz1sSTEP1);
000d26  4601              MOV      r1,r0
000d28  e0de              B        |L1.3816|
                  |L1.3370|
000d2a  e0e3              B        |L1.3828|
                  |L1.3372|
000d2c  20202020          DCB      "     ",194,219,209,206,202,206,195,206,"       ",0
000d30  20c2dbd1
000d34  cecacec3
000d38  ce202020
000d3c  20202020
000d40  00      
000d41  00                DCB      0
000d42  00                DCB      0
000d43  00                DCB      0
                  |L1.3396|
000d44  20202020          DCB      "      ",210,211,204,193,203,197,208,"       ",0
000d48  2020d2d3
000d4c  ccc1cbc5
000d50  d0202020
000d54  20202020
000d58  00      
000d59  00                DCB      0
000d5a  00                DCB      0
000d5b  00                DCB      0
                  |L1.3420|
000d5c  20202020          DCB      "     ",194,202,203,222,215,200,210,197,"       ",0
000d60  20c2cacb
000d64  ded7c8d2
000d68  c5202020
000d6c  20202020
000d70  00      
000d71  00                DCB      0
000d72  00                DCB      0
000d73  00                DCB      0
                  |L1.3444|
                          DCD      ||area_number.25||+0x80
                  |L1.3448|
                          DCD      UZ_T
                  |L1.3452|
000d7c  2020c1c5          DCB      "  ",193,197,199," ",194,197,205,210,200,203,223,214,200
000d80  c720c2c5
000d84  cdd2c8cb
000d88  dfd6c8  
000d8b  c8212120          DCB      200,"!!  ",0
000d8f  2000    
000d91  00                DCB      0
000d92  00                DCB      0
000d93  00                DCB      0
                  |L1.3476|
000d94  20202020          DCB      "      ",194,202,203,222,215,197,205,"       ",0
000d98  2020c2ca
000d9c  cbded7c5
000da0  cd202020
000da4  20202020
000da8  00      
000da9  00                DCB      0
000daa  00                DCB      0
000dab  00                DCB      0
                  |L1.3500|
000dac  202020cd          DCB      "   ",205,197," ",204,206,198,197,210," ",193,219,210,220
000db0  c520ccce
000db4  c6c5d220
000db8  c1dbd2dc
000dbc  20202020          DCB      "    ",0
000dc0  00      
000dc1  00                DCB      0
000dc2  00                DCB      0
000dc3  00                DCB      0
                  |L1.3524|
000dc4  d3d0c0c2          DCB      211,208,192,194,205,200,210,197,203,220,205,219,201," ",199
000dc8  cdc8d2c5
000dcc  cbdccddb
000dd0  c920c7  
000dd3  c0d0dfc4          DCB      192,208,223,196," ",0
000dd7  2000    
000dd9  00                DCB      0
000dda  00                DCB      0
000ddb  00                DCB      0
                  |L1.3548|
000ddc  2a202020          DCB      "*   ",210,211,204,193,203,197,208,192,"!!!     ",0
000de0  d2d3ccc1
000de4  cbc5d0c0
000de8  21212120
000dec  20202020
000df0  00      
000df1  00                DCB      0
000df2  00                DCB      0
000df3  00                DCB      0
                  |L1.3572|
000df4  2020cfce          DCB      "  ",207,206,209,203,197," ",194,202,203,222,215,197,205
000df8  d1cbc520
000dfc  c2cacbde
000e00  d7c5cd  
000e03  c8df2020          DCB      200,223,"   ",0
000e07  2000    
000e09  00                DCB      0
000e0a  00                DCB      0
000e0b  00                DCB      0
                  |L1.3596|
000e0c  2020c1d3          DCB      "  ",193,211,196,197,210," ",207,208,206,196,206,203,198
000e10  c4c5d220
000e14  cfd0cec4
000e18  cecbc6  
000e1b  c5cd2020          DCB      197,205,"   ",0
000e1f  2000    
000e21  00                DCB      0
000e22  00                DCB      0
000e23  00                DCB      0
                  |L1.3620|
000e24  2a202020          DCB      "*    ",194,219,202,203,222,215,200,210,197,"      ",0
000e28  20c2dbca
000e2c  cbded7c8
000e30  d2c52020
000e34  20202020
000e38  00      
000e39  00                DCB      0
000e3a  00                DCB      0
000e3b  00                DCB      0
                  |L1.3644|
000e3c  20202020          DCB      "     ",199,192,194,197,208,216,197,205,"       ",0
000e40  20c7c0c2
000e44  c5d0d8c5
000e48  cd202020
000e4c  20202020
000e50  00      
000e51  00                DCB      0
000e52  00                DCB      0
000e53  00                DCB      0
                  |L1.3668|
000e54  20202020          DCB      "      ",211,209,207,197,216,205,206,"       ",0
000e58  2020d3d1
000e5c  cfc5d8cd
000e60  ce202020
000e64  20202020
000e68  00      
000e69  00                DCB      0
000e6a  00                DCB      0
000e6b  00                DCB      0
                  |L1.3692|
000e6c  20202020          DCB      "       ",199,192,208,223,196,"        ",0
000e70  202020c7
000e74  c0d0dfc4
000e78  20202020
000e7c  20202020
000e80  00      
000e81  00                DCB      0
000e82  00                DCB      0
000e83  00                DCB      0
                  |L1.3716|
000e84  202020d3          DCB      "   ",211,208,192,194,205,200,210,197,203,220,205,219,201
000e88  d0c0c2cd
000e8c  c8d2c5cb
000e90  dccddbc9
000e94  20202020          DCB      "    ",0
000e98  00      
000e99  00                DCB      0
000e9a  00                DCB      0
000e9b  00                DCB      0
                  |L1.3740|
000e9c  20202020          DCB      "     ",194,219,202,203,222,215,200,210,197,"      ",0
000ea0  20c2dbca
000ea4  cbded7c8
000ea8  d2c52020
000eac  20202020
000eb0  00      
000eb1  00                DCB      0
000eb2  00                DCB      0
000eb3  00                DCB      0
                  |L1.3764|
000eb4  20202020          DCB      "                    ",0
000eb8  20202020
000ebc  20202020
000ec0  20202020
000ec4  20202020
000ec8  00      
000ec9  00                DCB      0
000eca  00                DCB      0
000ecb  00                DCB      0
                  |L1.3788|
000ecc  20202020          DCB      "     ",207,208,197,202,208,192,217,197,205,"      ",0
000ed0  20cfd0c5
000ed4  cad0c0d9
000ed8  c5cd2020
000edc  20202020
000ee0  00      
000ee1  00                DCB      0
000ee2  00                DCB      0
000ee3  00                DCB      0
                  |L1.3812|
                          DCD      speedChrgBlckStat
                  |L1.3816|
000ee8  f44f70c9          MOV      r0,#0x192
000eec  f7fffffe          BL       lc640_write
;;;1159   		out=1;
000ef0  f04f0001          MOV      r0,#1
                  |L1.3828|
;;;1160   		
;;;1161   		}
;;;1162   /*	spc_stat=spcVZ;
;;;1163   	__ee_spc_stat=spcVZ; 
;;;1164   	lc640_write_int(EE_SPC_STAT,__ee_spc_stat);   
;;;1165   	vz_cnt_h=hour;
;;;1166   	__ee_vz_cnt=hour*60;
;;;1167   	if(hour==0)__ee_vz_cnt=30;
;;;1168   	lc640_write_int(EE_VZ_CNT,__ee_vz_cnt);
;;;1169   	lc640_write_int(EE_SPC_VZ_LENGT,__ee_vz_cnt);	
;;;1170   	vz_cnt_h_=0;
;;;1171   	vz_cnt_s=0;
;;;1172   	vz_cnt_s_=0;
;;;1173   	
;;;1174   		*/
;;;1175   	}
;;;1176   //else if((spc_stat==spc_KE1p1)||(spc_stat==spc_KE1p2)) out=22; 
;;;1177   //else if((spc_stat==spc_KE2p1)||(spc_stat==spc_KE2p2)) out=33;
;;;1178   //plazma=out;	
;;;1179   return out;
;;;1180   }
000ef4  bd10              POP      {r4,pc}
;;;1181   
                          ENDP

                  vz1_stop PROC
;;;1183   //стоп уравнительног заряда
;;;1184   void vz1_stop(void)
000ef6  48fb              LDR      r0,|L1.4836|
;;;1185   {
;;;1186   if(vz1_stat!=vz1sOFF)
000ef8  f8901026          LDRB     r1,[r0,#0x26]  ; vz1_stat
000efc  2900              CMP      r1,#0
000efe  d007              BEQ      |L1.3856|
;;;1187   	{
;;;1188   	vz1_stat=vz1sSTOP;
000f00  f04f0110          MOV      r1,#0x10
000f04  f8801026          STRB     r1,[r0,#0x26]
;;;1189   	lc640_write(EE_VZ1_STAT,vz1sSTOP);
000f08  f44f70c9          MOV      r0,#0x192
000f0c  f7ffbffe          B.W      lc640_write
                  |L1.3856|
;;;1190   	}
;;;1191   }
000f10  4770              BX       lr
;;;1192   
                          ENDP

                  vz2_drv PROC
;;;1194   //драйвер формовочного заряда
;;;1195   void vz2_drv(void)
000f12  e92d4ff8          PUSH     {r3-r11,lr}
;;;1196   {
;;;1197   
;;;1198   if(vz2_stat==vz2sSTEP1)
000f16  4ef3              LDR      r6,|L1.4836|
;;;1199   	{
;;;1200   	if(vz2_stat_old!=vz2_stat)
;;;1201   		{
;;;1202   		vz2_stat_cnt=5;
;;;1203   		}
;;;1204   	if(vz2_stat_cnt)
;;;1205   		{
;;;1206   		vz2_stat_cnt--;
;;;1207   		if(vz2_stat_cnt==0)
;;;1208   			{
;;;1209   			vz2_stat=vz2sERR1; 	//Не включилась вентиляция;
;;;1210   			lc640_write(EE_VZ2_STAT,vz2sERR1);
;;;1211   			}
;;;1212   		}
;;;1213   	if(sk_stat[0]==1)
000f18  4df3              LDR      r5,|L1.4840|
000f1a  f8960029          LDRB     r0,[r6,#0x29]         ;1198  ; vz2_stat
000f1e  2801              CMP      r0,#1                 ;1198
000f20  d13b              BNE      |L1.3994|
000f22  f896002a          LDRB     r0,[r6,#0x2a]         ;1200  ; vz2_stat_old
000f26  2801              CMP      r0,#1                 ;1200
000f28  d003              BEQ      |L1.3890|
000f2a  f04f0005          MOV      r0,#5                 ;1202
000f2e  f8a60078          STRH     r0,[r6,#0x78]         ;1202
                  |L1.3890|
000f32  f9b60078          LDRSH    r0,[r6,#0x78]         ;1204  ; vz2_stat_cnt
000f36  b170              CBZ      r0,|L1.3926|
000f38  f1a00001          SUB      r0,r0,#1              ;1206
000f3c  b200              SXTH     r0,r0                 ;1206
000f3e  f8a60078          STRH     r0,[r6,#0x78]         ;1206
000f42  b940              CBNZ     r0,|L1.3926|
000f44  f04f000c          MOV      r0,#0xc               ;1209
000f48  f8860029          STRB     r0,[r6,#0x29]         ;1209
000f4c  4601              MOV      r1,r0                 ;1210
000f4e  f44f70ca          MOV      r0,#0x194             ;1210
000f52  f7fffffe          BL       lc640_write
                  |L1.3926|
000f56  7828              LDRB     r0,[r5,#0]  ; sk_stat
000f58  2801              CMP      r0,#1
000f5a  d118              BNE      |L1.3982|
;;;1214   		{
;;;1215   		vz2_stat=vz2sSTEP2;
000f5c  f04f0002          MOV      r0,#2
000f60  f8860029          STRB     r0,[r6,#0x29]
;;;1216   		lc640_write(EE_VZ2_STAT,vz2sSTEP2);
000f64  4601              MOV      r1,r0
000f66  f44f70ca          MOV      r0,#0x194
000f6a  f7fffffe          BL       lc640_write
;;;1217   		tree_up(iVZ2_STEP2_2,1,0,0);
000f6e  2300              MOVS     r3,#0
000f70  461a              MOV      r2,r3
000f72  2101              MOVS     r1,#1
000f74  20e0              MOVS     r0,#0xe0
000f76  f7fffffe          BL       tree_up
;;;1218   		tree_up(iVZ2_STEP2_1,0,0,0);
000f7a  2300              MOVS     r3,#0
000f7c  461a              MOV      r2,r3
000f7e  4619              MOV      r1,r3
000f80  20df              MOVS     r0,#0xdf
000f82  f7fffffe          BL       tree_up
;;;1219   		ret(1200);
000f86  f44f6096          MOV      r0,#0x4b0
000f8a  f7fffffe          BL       ||ret||
                  |L1.3982|
;;;1220   		}
;;;1221   	mess_send(MESS2RELE_HNDL,PARAM_RELE_SAMOKALIBR,0,20);
000f8e  2314              MOVS     r3,#0x14
000f90  2200              MOVS     r2,#0
000f92  2164              MOVS     r1,#0x64
000f94  20d2              MOVS     r0,#0xd2
000f96  f7fffffe          BL       mess_send
                  |L1.3994|
;;;1222   	}
;;;1223   
;;;1224   if(vz2_stat==vz2sSTEP2)
000f9a  f8960029          LDRB     r0,[r6,#0x29]  ; vz2_stat
000f9e  2802              CMP      r0,#2
000fa0  d11a              BNE      |L1.4056|
;;;1225   	{
;;;1226   	if((vz2_stat_old!=vz2_stat)||(vz2_stat_cnt==0))
000fa2  f896002a          LDRB     r0,[r6,#0x2a]  ; vz2_stat_old
000fa6  2802              CMP      r0,#2
000fa8  d102              BNE      |L1.4016|
000faa  f8b60078          LDRH     r0,[r6,#0x78]  ; vz2_stat_cnt
000fae  b918              CBNZ     r0,|L1.4024|
                  |L1.4016|
;;;1227   		{
;;;1228   		vz2_stat_cnt=15;
000fb0  f04f000f          MOV      r0,#0xf
000fb4  f8a60078          STRH     r0,[r6,#0x78]
                  |L1.4024|
;;;1229   		}
;;;1230   	vz2_stat_cnt--;
000fb8  f8b60078          LDRH     r0,[r6,#0x78]  ; vz2_stat_cnt
000fbc  f1a00001          SUB      r0,r0,#1
000fc0  f8a60078          STRH     r0,[r6,#0x78]
;;;1231   	mess_send(MESS2RELE_HNDL,PARAM_RELE_SAMOKALIBR,0,20);
000fc4  f04f0314          MOV      r3,#0x14
000fc8  f04f0200          MOV      r2,#0
000fcc  f04f0164          MOV      r1,#0x64
000fd0  f04f00d2          MOV      r0,#0xd2
000fd4  f7fffffe          BL       mess_send
                  |L1.4056|
;;;1232   	}
;;;1233   
;;;1234   if(vz2_stat==vz2sSTEP3)
000fd8  f8960029          LDRB     r0,[r6,#0x29]  ; vz2_stat
;;;1235   	{
;;;1236   	if((vz2_stat_old!=vz2_stat)||(vz2_stat_cnt==0))
;;;1237   		{
;;;1238   		vz2_stat_cnt=10;
000fdc  240a              MOVS     r4,#0xa
000fde  2700              MOVS     r7,#0
;;;1239   		cntrl_stat=0;
;;;1240   		cntrl_stat_new=0;
;;;1241   		cntrl_stat_old=0;
;;;1242   		}
;;;1243   	vz2_stat_cnt--;
;;;1244   	if((vz2_stat_cnt==10)||(vz2_stat_cnt==9))
;;;1245   		{
;;;1246   		show_mess(	"     ВКЛЮЧИТЕ       ",
000fe0  f2413888          MOV      r8,#0x1388
000fe4  2803              CMP      r0,#3                 ;1234
000fe6  d13d              BNE      |L1.4196|
000fe8  f896002a          LDRB     r0,[r6,#0x2a]         ;1236  ; vz2_stat_old
000fec  2803              CMP      r0,#3                 ;1236
000fee  d102              BNE      |L1.4086|
000ff0  f8b60078          LDRH     r0,[r6,#0x78]         ;1236  ; vz2_stat_cnt
000ff4  b928              CBNZ     r0,|L1.4098|
                  |L1.4086|
000ff6  f8a64078          STRH     r4,[r6,#0x78]         ;1238
000ffa  85b7              STRH     r7,[r6,#0x2c]         ;1239
000ffc  f8a67042          STRH     r7,[r6,#0x42]         ;1240
001000  85f7              STRH     r7,[r6,#0x2e]         ;1241
                  |L1.4098|
001002  f8b60078          LDRH     r0,[r6,#0x78]         ;1243  ; vz2_stat_cnt
001006  f1a00001          SUB      r0,r0,#1              ;1243
00100a  b200              SXTH     r0,r0                 ;1243
00100c  f8a60078          STRH     r0,[r6,#0x78]         ;1243
001010  280a              CMP      r0,#0xa               ;1244
001012  d001              BEQ      |L1.4120|
001014  2809              CMP      r0,#9                 ;1244
001016  d10b              BNE      |L1.4144|
                  |L1.4120|
001018  f2af63dc          ADR      r3,|L1.2368|
00101c  f2af22f4          ADR      r2,|L1.3372|
001020  f2af21e0          ADR      r1,|L1.3396|
001024  f2af20cc          ADR      r0,|L1.3420|
001028  f8cd8000          STR      r8,[sp,#0]
00102c  f7fffffe          BL       show_mess
                  |L1.4144|
;;;1247   					"      ТУМБЛЕР       ",
;;;1248   					"     ВЫСОКОГО       ",
;;;1249   					"    НАПРЯЖЕНИЯ      ",
;;;1250   					5000);
;;;1251   		}
;;;1252   	if(sk_stat[1]==1)
001030  7868              LDRB     r0,[r5,#1]  ; sk_stat
001032  2801              CMP      r0,#1
001034  d110              BNE      |L1.4184|
;;;1253   		{
;;;1254   		vz2_stat=vz2sWRK1;
001036  f1060628          ADD      r6,r6,#0x28
00103a  7074              STRB     r4,[r6,#1]
;;;1255   		lc640_write(EE_VZ2_STAT,vz2sWRK1);
00103c  f04f010a          MOV      r1,#0xa
001040  f44f70ca          MOV      r0,#0x194
001044  f7fffffe          BL       lc640_write
;;;1256   		volt_region=1;
001048  f04f0001          MOV      r0,#1
00104c  7030              STRB     r0,[r6,#0]
;;;1257   		cntrl_stat=0;
00104e  80b7              STRH     r7,[r6,#4]
;;;1258   		cntrl_stat_new=0;
001050  8377              STRH     r7,[r6,#0x1a]
;;;1259   		cntrl_stat_old=0;
001052  80f7              STRH     r7,[r6,#6]
001054  f1a60628          SUB      r6,r6,#0x28
                  |L1.4184|
;;;1260   		}
;;;1261   	mess_send(MESS2RELE_HNDL,PARAM_RELE_SAMOKALIBR,0,20);
001058  2314              MOVS     r3,#0x14
00105a  2200              MOVS     r2,#0
00105c  2164              MOVS     r1,#0x64
00105e  20d2              MOVS     r0,#0xd2
001060  f7fffffe          BL       mess_send
                  |L1.4196|
;;;1262   	}
;;;1263   
;;;1264   if(vz2_stat==vz2sWRK1)
001064  f8960029          LDRB     r0,[r6,#0x29]  ; vz2_stat
;;;1265   	{
;;;1266   
;;;1267   	if(vz2_stat_old!=vz2_stat)
;;;1268   		{
;;;1269   		vz2_wrk_cnt=3600L/*100L*/*((long)FZ_T1);
001068  f8df9278          LDR      r9,|L1.4836|
;;;1270   		//if(VZ_HR==0)  	hv_vz_wrk_cnt=1800L;
;;;1271   		vz2_up_cnt=0L;
;;;1272   
;;;1273   		}
;;;1274   	vz2_wrk_cnt--;
;;;1275   	vz2_up_cnt++;
;;;1276   
;;;1277   	if(vz2_wrk_cnt==0)
;;;1278   		{
;;;1279   		vz2_stat=vz2sWRK2;
;;;1280   		lc640_write(EE_VZ2_STAT,vz2sWRK2);
;;;1281   		}
;;;1282   	if(sk_stat[0]==0)
;;;1283   		{
;;;1284   		vz2_stat=vz2sERR2;
;;;1285   		lc640_write(EE_VZ2_STAT,vz2sERR2);
;;;1286   		}
;;;1287   	if(sk_stat[1]==0)
;;;1288   		{
;;;1289   		vz2_stat=vz2sERR3;
;;;1290   		lc640_write(EE_VZ2_STAT,vz2sERR3);
;;;1291   		}
;;;1292   	//if(abs(out_U-FZ_U1)<10)
;;;1293   	if((out_U<(FZ_U1+30))&&(out_U>(FZ_U1-10)))
;;;1294   		{
;;;1295   		if((Ib_ips_termokompensat/10)<FZ_ISW12)
;;;1296   			{
;;;1297   			if(vz2_stat_ph2_cnt)
;;;1298   				{
;;;1299   				vz2_stat_ph2_cnt--;
;;;1300   				if(vz2_stat_ph2_cnt==0)
;;;1301   					{
;;;1302   					vz2_stat=vz2sWRK2;
;;;1303   					lc640_write(EE_VZ2_STAT,vz2sWRK2);
;;;1304   					}
;;;1305   				}
;;;1306   			}
;;;1307   		else
;;;1308   			{
;;;1309   			vz2_stat_ph2_cnt=60;
;;;1310   			}
;;;1311   		}
;;;1312   	else
;;;1313   		{
;;;1314   		vz2_stat_ph2_cnt=60;
;;;1315   		}
;;;1316   	if(((Ibmax/10)>IZMAX_)&&(cntrl_stat<=20)&&(volt_region==1)&&(volt_region_cnt==0))
;;;1317   		{
;;;1318   		volt_region=0;
;;;1319   		cntrl_stat=1000;
00106c  f44f7b7a          MOV      r11,#0x3e8
001070  f1090980          ADD      r9,r9,#0x80           ;1269
001074  f04f0a0b          MOV      r10,#0xb              ;1279
001078  280a              CMP      r0,#0xa               ;1264
00107a  d17e              BNE      |L1.4474|
00107c  f896002a          LDRB     r0,[r6,#0x2a]         ;1267  ; vz2_stat_old
001080  280a              CMP      r0,#0xa               ;1267
001082  d00a              BEQ      |L1.4250|
001084  4899              LDR      r0,|L1.4844|
001086  f44f6161          MOV      r1,#0xe10             ;1269
00108a  f9b00000          LDRSH    r0,[r0,#0]            ;1269  ; FZ_T1
00108e  fb00f001          MUL      r0,r0,r1              ;1269
001092  f8c90040          STR      r0,[r9,#0x40]         ;1269  ; vz2_wrk_cnt
001096  f8c97044          STR      r7,[r9,#0x44]         ;1271  ; vz2_up_cnt
                  |L1.4250|
00109a  f8d90040          LDR      r0,[r9,#0x40]         ;1274  ; vz2_wrk_cnt
00109e  f1a00001          SUB      r0,r0,#1              ;1274
0010a2  f8c90040          STR      r0,[r9,#0x40]         ;1274  ; vz2_wrk_cnt
0010a6  f8d91044          LDR      r1,[r9,#0x44]         ;1275  ; vz2_up_cnt
0010aa  f1010101          ADD      r1,r1,#1              ;1275
0010ae  f8c91044          STR      r1,[r9,#0x44]         ;1275  ; vz2_up_cnt
0010b2  b930              CBNZ     r0,|L1.4290|
0010b4  f886a029          STRB     r10,[r6,#0x29]        ;1279
0010b8  210b              MOVS     r1,#0xb               ;1280
0010ba  f44f70ca          MOV      r0,#0x194             ;1280
0010be  f7fffffe          BL       lc640_write
                  |L1.4290|
0010c2  7828              LDRB     r0,[r5,#0]            ;1282  ; sk_stat
0010c4  b940              CBNZ     r0,|L1.4312|
0010c6  f04f000d          MOV      r0,#0xd               ;1284
0010ca  f8860029          STRB     r0,[r6,#0x29]         ;1284
0010ce  4601              MOV      r1,r0                 ;1285
0010d0  f44f70ca          MOV      r0,#0x194             ;1285
0010d4  f7fffffe          BL       lc640_write
                  |L1.4312|
0010d8  7868              LDRB     r0,[r5,#1]            ;1287  ; sk_stat
0010da  b940              CBNZ     r0,|L1.4334|
0010dc  f04f000e          MOV      r0,#0xe               ;1289
0010e0  f8860029          STRB     r0,[r6,#0x29]         ;1289
0010e4  4601              MOV      r1,r0                 ;1290
0010e6  f44f70ca          MOV      r0,#0x194             ;1290
0010ea  f7fffffe          BL       lc640_write
                  |L1.4334|
0010ee  4880              LDR      r0,|L1.4848|
0010f0  223c              MOVS     r2,#0x3c              ;1309
0010f2  f9b01000          LDRSH    r1,[r0,#0]            ;1293  ; out_U
0010f6  487f              LDR      r0,|L1.4852|
0010f8  f9b00000          LDRSH    r0,[r0,#0]            ;1293  ; FZ_U1
0010fc  f100031e          ADD      r3,r0,#0x1e           ;1293
001100  4299              CMP      r1,r3                 ;1293
001102  da20              BGE      |L1.4422|
001104  380a              SUBS     r0,r0,#0xa            ;1293
001106  4281              CMP      r1,r0                 ;1293
001108  dd1d              BLE      |L1.4422|
00110a  487b              LDR      r0,|L1.4856|
00110c  497b              LDR      r1,|L1.4860|
00110e  f9b00000          LDRSH    r0,[r0,#0]            ;1295  ; Ib_ips_termokompensat
001112  f9b11000          LDRSH    r1,[r1,#0]            ;1295  ; FZ_ISW12
001116  fb90f0f4          SDIV     r0,r0,r4              ;1295
00111a  4288              CMP      r0,r1                 ;1295
00111c  da10              BGE      |L1.4416|
00111e  f9b6007a          LDRSH    r0,[r6,#0x7a]         ;1297  ; vz2_stat_ph2_cnt
001122  b190              CBZ      r0,|L1.4426|
001124  f1a00001          SUB      r0,r0,#1              ;1299
001128  b200              SXTH     r0,r0                 ;1299
00112a  f8a6007a          STRH     r0,[r6,#0x7a]         ;1299
00112e  b960              CBNZ     r0,|L1.4426|
001130  f886a029          STRB     r10,[r6,#0x29]        ;1302
001134  210b              MOVS     r1,#0xb               ;1303
001136  f44f70ca          MOV      r0,#0x194             ;1303
00113a  f7fffffe          BL       lc640_write
00113e  e004              B        |L1.4426|
                  |L1.4416|
001140  f8a6207a          STRH     r2,[r6,#0x7a]         ;1309
001144  e001              B        |L1.4426|
                  |L1.4422|
001146  f8a6207a          STRH     r2,[r6,#0x7a]         ;1314
                  |L1.4426|
00114a  f9b60044          LDRSH    r0,[r6,#0x44]         ;1316  ; Ibmax
00114e  f8b61046          LDRH     r1,[r6,#0x46]         ;1316  ; IZMAX_
001152  fb90f0f4          SDIV     r0,r0,r4              ;1316
001156  4288              CMP      r0,r1                 ;1316
001158  dd18              BLE      |L1.4492|
00115a  f9b6202c          LDRSH    r2,[r6,#0x2c]         ;1316  ; cntrl_stat
00115e  2a14              CMP      r2,#0x14              ;1316
001160  dc14              BGT      |L1.4492|
001162  f8962028          LDRB     r2,[r6,#0x28]         ;1316  ; volt_region
001166  2a01              CMP      r2,#1                 ;1316
001168  d110              BNE      |L1.4492|
00116a  f8b62076          LDRH     r2,[r6,#0x76]         ;1316  ; volt_region_cnt
00116e  b96a              CBNZ     r2,|L1.4492|
001170  f8867028          STRB     r7,[r6,#0x28]         ;1318
001174  f8a6b02c          STRH     r11,[r6,#0x2c]
;;;1320   		cntrl_stat_new=1000;
001178  e000              B        |L1.4476|
                  |L1.4474|
00117a  e030              B        |L1.4574|
                  |L1.4476|
00117c  f8a6b042          STRH     r11,[r6,#0x42]
;;;1321   		cntrl_stat_old=1000;
001180  f8a6b02e          STRH     r11,[r6,#0x2e]
;;;1322   		volt_region_cnt=110;
001184  f04f026e          MOV      r2,#0x6e
001188  f8a62076          STRH     r2,[r6,#0x76]
                  |L1.4492|
;;;1323   		}
;;;1324   	if(((Ibmax/10)<IZMAX_)&&(cntrl_stat>=1000)&&(volt_region==0)&&(volt_region_cnt==0))
00118c  4288              CMP      r0,r1
00118e  da13              BGE      |L1.4536|
001190  f9b6002c          LDRSH    r0,[r6,#0x2c]  ; cntrl_stat
001194  4558              CMP      r0,r11
001196  db0f              BLT      |L1.4536|
001198  f8960028          LDRB     r0,[r6,#0x28]  ; volt_region
00119c  b960              CBNZ     r0,|L1.4536|
00119e  f8b60076          LDRH     r0,[r6,#0x76]  ; volt_region_cnt
0011a2  b948              CBNZ     r0,|L1.4536|
;;;1325   		{
;;;1326   		volt_region=1;
0011a4  f04f0001          MOV      r0,#1
0011a8  f8860028          STRB     r0,[r6,#0x28]
;;;1327   		cntrl_stat=10;
0011ac  85b4              STRH     r4,[r6,#0x2c]
;;;1328   		cntrl_stat_new=10;
0011ae  f8a64042          STRH     r4,[r6,#0x42]
;;;1329   		cntrl_stat_old=10;
0011b2  85f4              STRH     r4,[r6,#0x2e]
;;;1330   		volt_region_cnt=10;
0011b4  f8a64076          STRH     r4,[r6,#0x76]
                  |L1.4536|
;;;1331   		}
;;;1332   	if(volt_region==0) 		mess_send(MESS2RELE_HNDL,PARAM_RELE_SAMOKALIBR,0,20);
0011b8  f8960028          LDRB     r0,[r6,#0x28]  ; volt_region
0011bc  b110              CBZ      r0,|L1.4548|
;;;1333   	else if(volt_region==1) mess_send(MESS2RELE_HNDL,PARAM_RELE_SAMOKALIBR,1,20);
0011be  2801              CMP      r0,#1
0011c0  d007              BEQ      |L1.4562|
0011c2  e00c              B        |L1.4574|
                  |L1.4548|
0011c4  2314              MOVS     r3,#0x14              ;1332
0011c6  2200              MOVS     r2,#0                 ;1332
0011c8  2164              MOVS     r1,#0x64              ;1332
0011ca  20d2              MOVS     r0,#0xd2              ;1332
0011cc  f7fffffe          BL       mess_send
0011d0  e005              B        |L1.4574|
                  |L1.4562|
0011d2  2314              MOVS     r3,#0x14
0011d4  2201              MOVS     r2,#1
0011d6  2164              MOVS     r1,#0x64
0011d8  20d2              MOVS     r0,#0xd2
0011da  f7fffffe          BL       mess_send
                  |L1.4574|
;;;1334   	}
;;;1335   
;;;1336   if(vz2_stat==vz2sWRK2)
0011de  f8960029          LDRB     r0,[r6,#0x29]  ; vz2_stat
0011e2  280b              CMP      r0,#0xb
0011e4  d175              BNE      |L1.4818|
;;;1337   	{
;;;1338   	if(vz2_stat_old!=vz2_stat)
0011e6  f896002a          LDRB     r0,[r6,#0x2a]  ; vz2_stat_old
0011ea  280b              CMP      r0,#0xb
0011ec  d008              BEQ      |L1.4608|
;;;1339   		{
;;;1340   		vz2_wrk_cnt=3600L/*100L*/*((long)FZ_T2);
0011ee  4844              LDR      r0,|L1.4864|
0011f0  f44f6161          MOV      r1,#0xe10
0011f4  f9b00000          LDRSH    r0,[r0,#0]  ; FZ_T2
0011f8  fb00f001          MUL      r0,r0,r1
0011fc  f8c90040          STR      r0,[r9,#0x40]  ; vz2_wrk_cnt
                  |L1.4608|
;;;1341   		//if(VZ_HR==0)  	hv_vz_wrk_cnt=1800L;
;;;1342   		//vz2_up_cnt=0L;
;;;1343   		}
;;;1344   	vz2_wrk_cnt--;
001200  f8d90040          LDR      r0,[r9,#0x40]  ; vz2_wrk_cnt
001204  f1a00001          SUB      r0,r0,#1
001208  f8c90040          STR      r0,[r9,#0x40]  ; vz2_wrk_cnt
;;;1345   	vz2_up_cnt++;
00120c  f8d91044          LDR      r1,[r9,#0x44]  ; vz2_up_cnt
001210  f1010101          ADD      r1,r1,#1
001214  f8c91044          STR      r1,[r9,#0x44]  ; vz2_up_cnt
;;;1346   
;;;1347   	if(vz2_wrk_cnt==0)
001218  b958              CBNZ     r0,|L1.4658|
;;;1348   		{
;;;1349   		vz2_stat=vz2sFINE;
00121a  f04f0012          MOV      r0,#0x12
00121e  f8860029          STRB     r0,[r6,#0x29]
;;;1350   		lc640_write(EE_VZ2_STAT,vz2sFINE);
001222  4601              MOV      r1,r0
001224  f44f70ca          MOV      r0,#0x194
001228  f7fffffe          BL       lc640_write
;;;1351   		fz_mem_hndl(0);
00122c  2000              MOVS     r0,#0
00122e  f7fffffe          BL       fz_mem_hndl
                  |L1.4658|
;;;1352   		}
;;;1353   	if(sk_stat[0]==0)
001232  7828              LDRB     r0,[r5,#0]  ; sk_stat
001234  b940              CBNZ     r0,|L1.4680|
;;;1354   		{
;;;1355   		vz2_stat=vz2sERR5;
001236  f04f0010          MOV      r0,#0x10
00123a  f8860029          STRB     r0,[r6,#0x29]
;;;1356   		lc640_write(EE_VZ2_STAT,vz2sERR5);
00123e  4601              MOV      r1,r0
001240  f44f70ca          MOV      r0,#0x194
001244  f7fffffe          BL       lc640_write
                  |L1.4680|
;;;1357   		}
;;;1358   	if(sk_stat[1]==0)
001248  7868              LDRB     r0,[r5,#1]  ; sk_stat
00124a  b940              CBNZ     r0,|L1.4702|
;;;1359   		{
;;;1360   		vz2_stat=vz2sERR6;
00124c  f04f0011          MOV      r0,#0x11
001250  f8860029          STRB     r0,[r6,#0x29]
;;;1361   		lc640_write(EE_VZ2_STAT,vz2sERR6);
001254  4601              MOV      r1,r0
001256  f44f70ca          MOV      r0,#0x194
00125a  f7fffffe          BL       lc640_write
                  |L1.4702|
;;;1362   		}
;;;1363   	if(((Ibmax/10)>IZMAX_)&&(cntrl_stat<=20)&&(volt_region==1)&&(volt_region_cnt==0))
00125e  f9b60044          LDRSH    r0,[r6,#0x44]  ; Ibmax
001262  f8b61046          LDRH     r1,[r6,#0x46]  ; IZMAX_
001266  fb90f0f4          SDIV     r0,r0,r4
00126a  4288              CMP      r0,r1
00126c  dd16              BLE      |L1.4764|
00126e  f9b6202c          LDRSH    r2,[r6,#0x2c]  ; cntrl_stat
001272  2a14              CMP      r2,#0x14
001274  dc12              BGT      |L1.4764|
001276  f8962028          LDRB     r2,[r6,#0x28]  ; volt_region
00127a  2a01              CMP      r2,#1
00127c  d10e              BNE      |L1.4764|
00127e  f8b62076          LDRH     r2,[r6,#0x76]  ; volt_region_cnt
001282  b95a              CBNZ     r2,|L1.4764|
;;;1364   		{
;;;1365   		volt_region=0;
001284  f8867028          STRB     r7,[r6,#0x28]
;;;1366   		cntrl_stat=1000;
001288  f8a6b02c          STRH     r11,[r6,#0x2c]
;;;1367   		cntrl_stat_new=1000;
00128c  f8a6b042          STRH     r11,[r6,#0x42]
;;;1368   		cntrl_stat_old=1000;
001290  f8a6b02e          STRH     r11,[r6,#0x2e]
;;;1369   		volt_region_cnt=110;
001294  f04f026e          MOV      r2,#0x6e
001298  f8a62076          STRH     r2,[r6,#0x76]
                  |L1.4764|
;;;1370   		}
;;;1371   	if(((Ibmax/10)<IZMAX_)&&(cntrl_stat>=1000)&&(volt_region==0)&&(volt_region_cnt==0))
00129c  4288              CMP      r0,r1
00129e  da13              BGE      |L1.4808|
0012a0  f9b6002c          LDRSH    r0,[r6,#0x2c]  ; cntrl_stat
0012a4  4558              CMP      r0,r11
0012a6  db0f              BLT      |L1.4808|
0012a8  f8960028          LDRB     r0,[r6,#0x28]  ; volt_region
0012ac  b960              CBNZ     r0,|L1.4808|
0012ae  f8b60076          LDRH     r0,[r6,#0x76]  ; volt_region_cnt
0012b2  b948              CBNZ     r0,|L1.4808|
;;;1372   		{
;;;1373   		volt_region=1;
0012b4  f04f0001          MOV      r0,#1
0012b8  f8860028          STRB     r0,[r6,#0x28]
;;;1374   		cntrl_stat=10;
0012bc  85b4              STRH     r4,[r6,#0x2c]
;;;1375   		cntrl_stat_new=10;
0012be  f8a64042          STRH     r4,[r6,#0x42]
;;;1376   		cntrl_stat_old=10;
0012c2  85f4              STRH     r4,[r6,#0x2e]
;;;1377   		volt_region_cnt=10;
0012c4  f8a64076          STRH     r4,[r6,#0x76]
                  |L1.4808|
;;;1378   		}
;;;1379   	if(volt_region==0) 		mess_send(MESS2RELE_HNDL,PARAM_RELE_SAMOKALIBR,0,20);
0012c8  f8960028          LDRB     r0,[r6,#0x28]  ; volt_region
0012cc  b110              CBZ      r0,|L1.4820|
;;;1380   	else if(volt_region==1) mess_send(MESS2RELE_HNDL,PARAM_RELE_SAMOKALIBR,1,20);
0012ce  2801              CMP      r0,#1
0012d0  d018              BEQ      |L1.4868|
                  |L1.4818|
0012d2  e01d              B        |L1.4880|
                  |L1.4820|
0012d4  2314              MOVS     r3,#0x14              ;1379
0012d6  2200              MOVS     r2,#0                 ;1379
0012d8  2164              MOVS     r1,#0x64              ;1379
0012da  20d2              MOVS     r0,#0xd2              ;1379
0012dc  f7fffffe          BL       mess_send
0012e0  e016              B        |L1.4880|
0012e2  0000              DCW      0x0000
                  |L1.4836|
                          DCD      ||area_number.25||
                  |L1.4840|
                          DCD      sk_stat
                  |L1.4844|
                          DCD      FZ_T1
                  |L1.4848|
                          DCD      out_U
                  |L1.4852|
                          DCD      FZ_U1
                  |L1.4856|
                          DCD      Ib_ips_termokompensat
                  |L1.4860|
                          DCD      FZ_ISW12
                  |L1.4864|
                          DCD      FZ_T2
                  |L1.4868|
001304  2314              MOVS     r3,#0x14
001306  2201              MOVS     r2,#1
001308  2164              MOVS     r1,#0x64
00130a  20d2              MOVS     r0,#0xd2
00130c  f7fffffe          BL       mess_send
                  |L1.4880|
;;;1381   	}
;;;1382   
;;;1383   if(vz2_stat==vz2sERR1)		//Отсутствует вентиляция при включении
001310  f8960029          LDRB     r0,[r6,#0x29]  ; vz2_stat
001314  280c              CMP      r0,#0xc
001316  d124              BNE      |L1.4962|
;;;1384   	{
;;;1385   	if((vz2_stat_old!=vz2_stat)||(vz2_stat_cnt==0))
001318  f896002a          LDRB     r0,[r6,#0x2a]  ; vz2_stat_old
00131c  280c              CMP      r0,#0xc
00131e  d102              BNE      |L1.4902|
001320  f8b60078          LDRH     r0,[r6,#0x78]  ; vz2_stat_cnt
001324  b908              CBNZ     r0,|L1.4906|
                  |L1.4902|
;;;1386   		{
;;;1387   		vz2_stat_cnt=10;
001326  f8a64078          STRH     r4,[r6,#0x78]
                  |L1.4906|
;;;1388   		}
;;;1389   	vz2_stat_cnt--;
00132a  f8b60078          LDRH     r0,[r6,#0x78]  ; vz2_stat_cnt
00132e  f1a00001          SUB      r0,r0,#1
001332  b200              SXTH     r0,r0
001334  f8a60078          STRH     r0,[r6,#0x78]
;;;1390   	if((vz2_stat_cnt==10)||(vz2_stat_cnt==9))
001338  280a              CMP      r0,#0xa
00133a  d001              BEQ      |L1.4928|
00133c  2809              CMP      r0,#9
00133e  d10a              BNE      |L1.4950|
                  |L1.4928|
;;;1391   		{
;;;1392   		show_mess(	" ФОРМОВОЧНЫЙ ЗАРЯД  ",
001340  f2af53c8          ADR      r3,|L1.3452|
001344  f2af52b4          ADR      r2,|L1.3476|
001348  f2af51a0          ADR      r1,|L1.3500|
00134c  a0ff              ADR      r0,|L1.5964|
00134e  f8cd8000          STR      r8,[sp,#0]
001352  f7fffffe          BL       show_mess
                  |L1.4950|
;;;1393   					"   НЕ МОЖЕТ БЫТЬ    ",
;;;1394   					"      ВКЛЮЧЕН       ",
;;;1395   					"  БЕЗ ВЕНТИЛЯЦИИ!!  ",
;;;1396   					5000);
;;;1397   		}
;;;1398   	mess_send(MESS2RELE_HNDL,PARAM_RELE_SAMOKALIBR,0,20);
001356  2314              MOVS     r3,#0x14
001358  2200              MOVS     r2,#0
00135a  2164              MOVS     r1,#0x64
00135c  20d2              MOVS     r0,#0xd2
00135e  f7fffffe          BL       mess_send
                  |L1.4962|
;;;1399   	}
;;;1400   if(vz2_stat==vz2sERR2)		//Пропала вентиляция при работе в первой фазе ФЗ
001362  f8960029          LDRB     r0,[r6,#0x29]  ; vz2_stat
001366  280d              CMP      r0,#0xd
001368  d12e              BNE      |L1.5064|
;;;1401   	{
;;;1402   	if((vz2_stat_old!=vz2_stat)||(vz2_stat_cnt==0))
00136a  f896002a          LDRB     r0,[r6,#0x2a]  ; vz2_stat_old
00136e  280d              CMP      r0,#0xd
001370  d102              BNE      |L1.4984|
001372  f8b60078          LDRH     r0,[r6,#0x78]  ; vz2_stat_cnt
001376  b908              CBNZ     r0,|L1.4988|
                  |L1.4984|
;;;1403   		{
;;;1404   		vz2_stat_cnt=10;
001378  f8a64078          STRH     r4,[r6,#0x78]
                  |L1.4988|
;;;1405   		}
;;;1406   	vz2_stat_cnt--;
00137c  f8b60078          LDRH     r0,[r6,#0x78]  ; vz2_stat_cnt
001380  f1a00001          SUB      r0,r0,#1
001384  b200              SXTH     r0,r0
001386  f8a60078          STRH     r0,[r6,#0x78]
;;;1407   	if((vz2_stat_cnt==10)||(vz2_stat_cnt==9))
00138a  280a              CMP      r0,#0xa
00138c  d001              BEQ      |L1.5010|
00138e  2809              CMP      r0,#9
001390  d10a              BNE      |L1.5032|
                  |L1.5010|
;;;1408   		{
;;;1409   		show_mess(	" ФОРМОВОЧНЫЙ ЗАРЯД  ",
001392  f6af23b4          ADR      r3,|L1.2272|
001396  f6af22a0          ADR      r2,|L1.2296|
00139a  f6af218c          ADR      r1,|L1.2320|
00139e  a0eb              ADR      r0,|L1.5964|
0013a0  f8cd8000          STR      r8,[sp,#0]
0013a4  f7fffffe          BL       show_mess
                  |L1.5032|
;;;1410   					"    ЗАБЛОКИРОВАН    ",
;;;1411   					"     НЕИСПРАВНА     ",
;;;1412   					"    ВЕНТИЛЯЦИЯ!!!   ",
;;;1413   					5000);
;;;1414   		}
;;;1415   	if(sk_stat[0]==1)
0013a8  7828              LDRB     r0,[r5,#0]  ; sk_stat
0013aa  2801              CMP      r0,#1
0013ac  d106              BNE      |L1.5052|
;;;1416   		{
;;;1417   		vz2_stat=vz2sWRK1;
0013ae  f8864029          STRB     r4,[r6,#0x29]
;;;1418   		lc640_write(EE_VZ2_STAT,vz2sWRK1);
0013b2  210a              MOVS     r1,#0xa
0013b4  f44f70ca          MOV      r0,#0x194
0013b8  f7fffffe          BL       lc640_write
                  |L1.5052|
;;;1419   		}
;;;1420   	mess_send(MESS2RELE_HNDL,PARAM_RELE_SAMOKALIBR,0,20);
0013bc  2314              MOVS     r3,#0x14
0013be  2200              MOVS     r2,#0
0013c0  2164              MOVS     r1,#0x64
0013c2  20d2              MOVS     r0,#0xd2
0013c4  f7fffffe          BL       mess_send
                  |L1.5064|
;;;1421   	}
;;;1422   
;;;1423   if(vz2_stat==vz2sERR3)		//Отключен тумблер "Выравнивающий заряд" при работе в первой фазе ФЗ
0013c8  f8960029          LDRB     r0,[r6,#0x29]  ; vz2_stat
0013cc  280e              CMP      r0,#0xe
0013ce  d12d              BNE      |L1.5164|
;;;1424   	{
;;;1425   	if((vz2_stat_old!=vz2_stat)||(vz2_stat_cnt==0))
0013d0  f896002a          LDRB     r0,[r6,#0x2a]  ; vz2_stat_old
0013d4  280e              CMP      r0,#0xe
0013d6  d102              BNE      |L1.5086|
0013d8  f8b60078          LDRH     r0,[r6,#0x78]  ; vz2_stat_cnt
0013dc  b908              CBNZ     r0,|L1.5090|
                  |L1.5086|
;;;1426   		{
;;;1427   		vz2_stat_cnt=10;
0013de  f8a64078          STRH     r4,[r6,#0x78]
                  |L1.5090|
;;;1428   		}
;;;1429   	vz2_stat_cnt--;
0013e2  f8b60078          LDRH     r0,[r6,#0x78]  ; vz2_stat_cnt
0013e6  f1a00001          SUB      r0,r0,#1
0013ea  b200              SXTH     r0,r0
0013ec  f8a60078          STRH     r0,[r6,#0x78]
;;;1430   	if((vz2_stat_cnt==10)||(vz2_stat_cnt==9))
0013f0  280a              CMP      r0,#0xa
0013f2  d001              BEQ      |L1.5112|
0013f4  2809              CMP      r0,#9
0013f6  d109              BNE      |L1.5132|
                  |L1.5112|
;;;1431   		{
;;;1432   		show_mess(	" ФОРМОВОЧНЫЙ ЗАРЯД  ",
0013f8  a3da              ADR      r3,|L1.5988|
0013fa  f2af6208          ADR      r2,|L1.3572|
0013fe  f2af51f4          ADR      r1,|L1.3596|
001402  a0d2              ADR      r0,|L1.5964|
001404  f8cd8000          STR      r8,[sp,#0]
001408  f7fffffe          BL       show_mess
                  |L1.5132|
;;;1433   					"  БУДЕТ ПРОДОЛЖЕН   ",
;;;1434   					"  ПОСЛЕ ВКЛЮЧЕНИЯ   ",
;;;1435   					"    ТУМБЛЕРА!!!     ",
;;;1436   					5000);
;;;1437   		}
;;;1438   	if(sk_stat[1]==1)
00140c  7868              LDRB     r0,[r5,#1]  ; sk_stat
00140e  2801              CMP      r0,#1
001410  d106              BNE      |L1.5152|
;;;1439   		{
;;;1440   		vz2_stat=vz2sWRK1;
001412  f8864029          STRB     r4,[r6,#0x29]
;;;1441   		lc640_write(EE_VZ2_STAT,vz2sWRK1);
001416  210a              MOVS     r1,#0xa
001418  f44f70ca          MOV      r0,#0x194
00141c  f7fffffe          BL       lc640_write
                  |L1.5152|
;;;1442   		}
;;;1443   	mess_send(MESS2RELE_HNDL,PARAM_RELE_SAMOKALIBR,0,20);
001420  2314              MOVS     r3,#0x14
001422  2200              MOVS     r2,#0
001424  2164              MOVS     r1,#0x64
001426  20d2              MOVS     r0,#0xd2
001428  f7fffffe          BL       mess_send
                  |L1.5164|
;;;1444   	}
;;;1445   if(vz2_stat==vz2sERR5)		//Пропала вентиляция при работе
00142c  f8960029          LDRB     r0,[r6,#0x29]  ; vz2_stat
001430  2810              CMP      r0,#0x10
001432  d12e              BNE      |L1.5266|
;;;1446   	{
;;;1447   	if((vz2_stat_old!=vz2_stat)||(vz2_stat_cnt==0))
001434  f896002a          LDRB     r0,[r6,#0x2a]  ; vz2_stat_old
001438  2810              CMP      r0,#0x10
00143a  d102              BNE      |L1.5186|
00143c  f8b60078          LDRH     r0,[r6,#0x78]  ; vz2_stat_cnt
001440  b908              CBNZ     r0,|L1.5190|
                  |L1.5186|
;;;1448   		{
;;;1449   		vz2_stat_cnt=10;
001442  f8a64078          STRH     r4,[r6,#0x78]
                  |L1.5190|
;;;1450   		}
;;;1451   	vz2_stat_cnt--;
001446  f8b60078          LDRH     r0,[r6,#0x78]  ; vz2_stat_cnt
00144a  f1a00001          SUB      r0,r0,#1
00144e  b200              SXTH     r0,r0
001450  f8a60078          STRH     r0,[r6,#0x78]
;;;1452   	if((vz2_stat_cnt==10)||(vz2_stat_cnt==9))
001454  280a              CMP      r0,#0xa
001456  d001              BEQ      |L1.5212|
001458  2809              CMP      r0,#9
00145a  d10a              BNE      |L1.5234|
                  |L1.5212|
;;;1453   		{
;;;1454   		show_mess(	" ФОРМОВОЧНЫЙ ЗАРЯД  ",
00145c  f6af3380          ADR      r3,|L1.2272|
001460  f6af326c          ADR      r2,|L1.2296|
001464  f6af3158          ADR      r1,|L1.2320|
001468  a0b8              ADR      r0,|L1.5964|
00146a  f8cd8000          STR      r8,[sp,#0]
00146e  f7fffffe          BL       show_mess
                  |L1.5234|
;;;1455   					"    ЗАБЛОКИРОВАН    ",
;;;1456   					"     НЕИСПРАВНА     ",
;;;1457   					"    ВЕНТИЛЯЦИЯ!!!   ",
;;;1458   					5000);
;;;1459   		}
;;;1460   	if(sk_stat[0]==1)
001472  7828              LDRB     r0,[r5,#0]  ; sk_stat
001474  2801              CMP      r0,#1
001476  d106              BNE      |L1.5254|
;;;1461   		{
;;;1462   		vz2_stat=vz2sWRK2;
001478  f886a029          STRB     r10,[r6,#0x29]
;;;1463   		lc640_write(EE_VZ2_STAT,vz2sWRK2);
00147c  210b              MOVS     r1,#0xb
00147e  f44f70ca          MOV      r0,#0x194
001482  f7fffffe          BL       lc640_write
                  |L1.5254|
;;;1464   		}
;;;1465   	mess_send(MESS2RELE_HNDL,PARAM_RELE_SAMOKALIBR,0,20);
001486  2314              MOVS     r3,#0x14
001488  2200              MOVS     r2,#0
00148a  2164              MOVS     r1,#0x64
00148c  20d2              MOVS     r0,#0xd2
00148e  f7fffffe          BL       mess_send
                  |L1.5266|
;;;1466   	}
;;;1467   
;;;1468   if(vz2_stat==vz2sERR6)		//Отключен тумблер "Выравнивающий заряд"
001492  f8960029          LDRB     r0,[r6,#0x29]  ; vz2_stat
001496  2811              CMP      r0,#0x11
001498  d12d              BNE      |L1.5366|
;;;1469   	{
;;;1470   	if((vz2_stat_old!=vz2_stat)||(vz2_stat_cnt==0))
00149a  f896002a          LDRB     r0,[r6,#0x2a]  ; vz2_stat_old
00149e  2811              CMP      r0,#0x11
0014a0  d102              BNE      |L1.5288|
0014a2  f8b60078          LDRH     r0,[r6,#0x78]  ; vz2_stat_cnt
0014a6  b908              CBNZ     r0,|L1.5292|
                  |L1.5288|
;;;1471   		{
;;;1472   		vz2_stat_cnt=10;
0014a8  f8a64078          STRH     r4,[r6,#0x78]
                  |L1.5292|
;;;1473   		}
;;;1474   	vz2_stat_cnt--;
0014ac  f8b60078          LDRH     r0,[r6,#0x78]  ; vz2_stat_cnt
0014b0  f1a00001          SUB      r0,r0,#1
0014b4  b200              SXTH     r0,r0
0014b6  f8a60078          STRH     r0,[r6,#0x78]
;;;1475   	if((vz2_stat_cnt==10)||(vz2_stat_cnt==9))
0014ba  280a              CMP      r0,#0xa
0014bc  d001              BEQ      |L1.5314|
0014be  2809              CMP      r0,#9
0014c0  d109              BNE      |L1.5334|
                  |L1.5314|
;;;1476   		{
;;;1477   		show_mess(	" ФОРМОВОЧНЫЙ ЗАРЯД  ",
0014c2  a3a8              ADR      r3,|L1.5988|
0014c4  f2af62d4          ADR      r2,|L1.3572|
0014c8  f2af61c0          ADR      r1,|L1.3596|
0014cc  a09f              ADR      r0,|L1.5964|
0014ce  f8cd8000          STR      r8,[sp,#0]
0014d2  f7fffffe          BL       show_mess
                  |L1.5334|
;;;1478   					"  БУДЕТ ПРОДОЛЖЕН   ",
;;;1479   					"  ПОСЛЕ ВКЛЮЧЕНИЯ   ",
;;;1480   					"    ТУМБЛЕРА!!!     ",
;;;1481   					5000);
;;;1482   		}
;;;1483   	if(sk_stat[1]==1)
0014d6  7868              LDRB     r0,[r5,#1]  ; sk_stat
0014d8  2801              CMP      r0,#1
0014da  d106              BNE      |L1.5354|
;;;1484   		{
;;;1485   		vz2_stat=vz2sWRK2;
0014dc  f886a029          STRB     r10,[r6,#0x29]
;;;1486   		lc640_write(EE_VZ2_STAT,vz2sWRK2);
0014e0  210b              MOVS     r1,#0xb
0014e2  f44f70ca          MOV      r0,#0x194
0014e6  f7fffffe          BL       lc640_write
                  |L1.5354|
;;;1487   		}
;;;1488   	mess_send(MESS2RELE_HNDL,PARAM_RELE_SAMOKALIBR,0,20);
0014ea  2314              MOVS     r3,#0x14
0014ec  2200              MOVS     r2,#0
0014ee  2164              MOVS     r1,#0x64
0014f0  20d2              MOVS     r0,#0xd2
0014f2  f7fffffe          BL       mess_send
                  |L1.5366|
;;;1489   	}
;;;1490   if(vz2_stat==vz2sERR4)		//ВЗ закончился а тумблер включен
0014f6  f8960029          LDRB     r0,[r6,#0x29]  ; vz2_stat
0014fa  280f              CMP      r0,#0xf
0014fc  d130              BNE      |L1.5472|
;;;1491   	{
;;;1492   	if((vz2_stat_old!=vz2_stat)||(vz2_stat_cnt==0))
0014fe  f896002a          LDRB     r0,[r6,#0x2a]  ; vz2_stat_old
001502  280f              CMP      r0,#0xf
001504  d102              BNE      |L1.5388|
001506  f8b60078          LDRH     r0,[r6,#0x78]  ; vz2_stat_cnt
00150a  b908              CBNZ     r0,|L1.5392|
                  |L1.5388|
;;;1493   		{
;;;1494   		vz2_stat_cnt=10;
00150c  f8a64078          STRH     r4,[r6,#0x78]
                  |L1.5392|
;;;1495   		}
;;;1496   	vz2_stat_cnt--;
001510  f8b60078          LDRH     r0,[r6,#0x78]  ; vz2_stat_cnt
001514  f1a00001          SUB      r0,r0,#1
001518  b200              SXTH     r0,r0
00151a  f8a60078          STRH     r0,[r6,#0x78]
;;;1497   	if((vz2_stat_cnt==10)||(vz2_stat_cnt==9))
00151e  280a              CMP      r0,#0xa
001520  d001              BEQ      |L1.5414|
001522  2809              CMP      r0,#9
001524  d10b              BNE      |L1.5438|
                  |L1.5414|
;;;1498   		{
;;;1499   		show_mess(	"     ВЫКЛЮЧИТЕ      ",
001526  f6af33e8          ADR      r3,|L1.2368|
00152a  f6af0200          ADR      r2,|L1.3372|
00152e  f2af71ec          ADR      r1,|L1.3396|
001532  f2af6098          ADR      r0,|L1.3740|
001536  f8cd8000          STR      r8,[sp,#0]
00153a  f7fffffe          BL       show_mess
                  |L1.5438|
;;;1500   					"      ТУМБЛЕР       ",
;;;1501   					"     ВЫСОКОГО       ",
;;;1502   					"    НАПРЯЖЕНИЯ      ",
;;;1503   					5000);
;;;1504   		}
;;;1505   	if(sk_stat[1]==0)
00153e  7868              LDRB     r0,[r5,#1]  ; sk_stat
001540  b940              CBNZ     r0,|L1.5460|
;;;1506   		{
;;;1507   		vz2_stat=vz2sOFF;
001542  f8867029          STRB     r7,[r6,#0x29]
;;;1508   		lc640_write(EE_VZ2_STAT,vz2sOFF);
001546  2100              MOVS     r1,#0
001548  f44f70ca          MOV      r0,#0x194
00154c  f7fffffe          BL       lc640_write
;;;1509   		vz_stop();
001550  f7fffffe          BL       vz_stop
                  |L1.5460|
;;;1510   
;;;1511   		}
;;;1512   	mess_send(MESS2RELE_HNDL,PARAM_RELE_SAMOKALIBR,0,20);
001554  2314              MOVS     r3,#0x14
001556  2200              MOVS     r2,#0
001558  2164              MOVS     r1,#0x64
00155a  20d2              MOVS     r0,#0xd2
00155c  f7fffffe          BL       mess_send
                  |L1.5472|
;;;1513   	}
;;;1514   if(vz2_stat==vz2sFINE)		//ФЗ закончился, напоминание
001560  f8960029          LDRB     r0,[r6,#0x29]  ; vz2_stat
;;;1515   	{
;;;1516   	if((vz2_stat_old!=vz2_stat)||(vz2_stat_cnt==0))
;;;1517   		{
;;;1518   		vz2_stat_cnt=10;
;;;1519   		}
;;;1520   	vz2_stat_cnt--;
;;;1521   	if((vz2_stat_cnt==10)||(vz2_stat_cnt==9))
;;;1522   		{
;;;1523   		show_mess(	"    ФОРМОВОЧНЫЙ     ",
001564  f64038b8          MOV      r8,#0xbb8
001568  2812              CMP      r0,#0x12              ;1514
00156a  d13f              BNE      |L1.5612|
00156c  f896002a          LDRB     r0,[r6,#0x2a]         ;1516  ; vz2_stat_old
001570  2812              CMP      r0,#0x12              ;1516
001572  d102              BNE      |L1.5498|
001574  f8b60078          LDRH     r0,[r6,#0x78]         ;1516  ; vz2_stat_cnt
001578  b908              CBNZ     r0,|L1.5502|
                  |L1.5498|
00157a  f8a64078          STRH     r4,[r6,#0x78]         ;1518
                  |L1.5502|
00157e  f8b60078          LDRH     r0,[r6,#0x78]         ;1520  ; vz2_stat_cnt
001582  f1a00001          SUB      r0,r0,#1              ;1520
001586  b200              SXTH     r0,r0                 ;1520
001588  f8a60078          STRH     r0,[r6,#0x78]         ;1520
00158c  280a              CMP      r0,#0xa               ;1521
00158e  d001              BEQ      |L1.5524|
001590  2809              CMP      r0,#9                 ;1521
001592  d10a              BNE      |L1.5546|
                  |L1.5524|
001594  f2af735c          ADR      r3,|L1.3644|
001598  f2af7248          ADR      r2,|L1.3668|
00159c  f2af7134          ADR      r1,|L1.3692|
0015a0  a076              ADR      r0,|L1.6012|
0015a2  f8cd8000          STR      r8,[sp,#0]
0015a6  f7fffffe          BL       show_mess
                  |L1.5546|
;;;1524   					"       ЗАРЯД        ",
;;;1525   					"      УСПЕШНО       ",
;;;1526   					"     ЗАВЕРШЕН       ",
;;;1527   					3000);
;;;1528   		}
;;;1529   	if((vz2_stat_cnt==6)||(vz2_stat_cnt==5))
0015aa  f9b60078          LDRSH    r0,[r6,#0x78]  ; vz2_stat_cnt
0015ae  2806              CMP      r0,#6
0015b0  d001              BEQ      |L1.5558|
0015b2  2805              CMP      r0,#5
0015b4  d10b              BNE      |L1.5582|
                  |L1.5558|
;;;1530   		{
;;;1531   		show_mess(	"     ВЫКЛЮЧИТЕ      ",
0015b6  f6af4378          ADR      r3,|L1.2368|
0015ba  f6af0290          ADR      r2,|L1.3372|
0015be  f6af017c          ADR      r1,|L1.3396|
0015c2  f2af7028          ADR      r0,|L1.3740|
0015c6  f8cd8000          STR      r8,[sp,#0]
0015ca  f7fffffe          BL       show_mess
                  |L1.5582|
;;;1532   					"      ТУМБЛЕР       ",
;;;1533   					"     ВЫСОКОГО       ",
;;;1534   					"    НАПРЯЖЕНИЯ      ",
;;;1535   					3000);
;;;1536   		}
;;;1537   	if(sk_stat[1]==0)
0015ce  7868              LDRB     r0,[r5,#1]  ; sk_stat
0015d0  b930              CBNZ     r0,|L1.5600|
;;;1538   		{
;;;1539   		vz2_stat=vz2sOFF;
0015d2  f8867029          STRB     r7,[r6,#0x29]
;;;1540   		lc640_write(EE_VZ2_STAT,vz2sOFF);
0015d6  2100              MOVS     r1,#0
0015d8  f44f70ca          MOV      r0,#0x194
0015dc  f7fffffe          BL       lc640_write
                  |L1.5600|
;;;1541   		}
;;;1542   	mess_send(MESS2RELE_HNDL,PARAM_RELE_SAMOKALIBR,0,20);
0015e0  2314              MOVS     r3,#0x14
0015e2  2200              MOVS     r2,#0
0015e4  2164              MOVS     r1,#0x64
0015e6  20d2              MOVS     r0,#0xd2
0015e8  f7fffffe          BL       mess_send
                  |L1.5612|
;;;1543   	}
;;;1544   if(vz2_stat==vz2sSTOP)		//ФЗ прекращен, напоминание
0015ec  f8960029          LDRB     r0,[r6,#0x29]  ; vz2_stat
0015f0  2813              CMP      r0,#0x13
0015f2  d13f              BNE      |L1.5748|
;;;1545   	{
;;;1546   	if((vz2_stat_old!=vz2_stat)||(vz2_stat_cnt==0))
0015f4  f896002a          LDRB     r0,[r6,#0x2a]  ; vz2_stat_old
0015f8  2813              CMP      r0,#0x13
0015fa  d102              BNE      |L1.5634|
0015fc  f8b60078          LDRH     r0,[r6,#0x78]  ; vz2_stat_cnt
001600  b908              CBNZ     r0,|L1.5638|
                  |L1.5634|
;;;1547   		{
;;;1548   		vz2_stat_cnt=10;
001602  f8a64078          STRH     r4,[r6,#0x78]
                  |L1.5638|
;;;1549   		}
;;;1550   	vz2_stat_cnt--;
001606  f8b60078          LDRH     r0,[r6,#0x78]  ; vz2_stat_cnt
00160a  f1a00001          SUB      r0,r0,#1
00160e  b200              SXTH     r0,r0
001610  f8a60078          STRH     r0,[r6,#0x78]
;;;1551   	if((vz2_stat_cnt==10)||(vz2_stat_cnt==9))
001614  280a              CMP      r0,#0xa
001616  d001              BEQ      |L1.5660|
001618  2809              CMP      r0,#9
00161a  d10a              BNE      |L1.5682|
                  |L1.5660|
;;;1552   		{
;;;1553   		show_mess(	"    ФОРМОВОЧНЫЙ     ",
00161c  f2af736c          ADR      r3,|L1.3764|
001620  f2af7258          ADR      r2,|L1.3788|
001624  f2af71bc          ADR      r1,|L1.3692|
001628  a054              ADR      r0,|L1.6012|
00162a  f8cd8000          STR      r8,[sp,#0]
00162e  f7fffffe          BL       show_mess
                  |L1.5682|
;;;1554   					"       ЗАРЯД        ",
;;;1555   					"     ПРЕКРАЩЕН      ",
;;;1556   					"                    ",
;;;1557   					3000);
;;;1558   		}
;;;1559   	if((vz2_stat_cnt==6)||(vz2_stat_cnt==5))
001632  f9b60078          LDRSH    r0,[r6,#0x78]  ; vz2_stat_cnt
001636  2806              CMP      r0,#6
001638  d001              BEQ      |L1.5694|
00163a  2805              CMP      r0,#5
00163c  d10b              BNE      |L1.5718|
                  |L1.5694|
;;;1560   		{
;;;1561   		show_mess(	"     ВЫКЛЮЧИТЕ      ",
00163e  f6af5300          ADR      r3,|L1.2368|
001642  f6af1218          ADR      r2,|L1.3372|
001646  f6af1104          ADR      r1,|L1.3396|
00164a  f2af70b0          ADR      r0,|L1.3740|
00164e  f8cd8000          STR      r8,[sp,#0]
001652  f7fffffe          BL       show_mess
                  |L1.5718|
;;;1562   					"      ТУМБЛЕР       ",
;;;1563   					"     ВЫСОКОГО       ",
;;;1564   					"    НАПРЯЖЕНИЯ      ",
;;;1565   					3000);
;;;1566   		}
;;;1567   	if(sk_stat[1]==0)
001656  7868              LDRB     r0,[r5,#1]  ; sk_stat
001658  b930              CBNZ     r0,|L1.5736|
;;;1568   		{
;;;1569   		vz2_stat=vz2sOFF;
00165a  f8867029          STRB     r7,[r6,#0x29]
;;;1570   		lc640_write(EE_VZ2_STAT,vz2sOFF);
00165e  2100              MOVS     r1,#0
001660  f44f70ca          MOV      r0,#0x194
001664  f7fffffe          BL       lc640_write
                  |L1.5736|
;;;1571   		}
;;;1572   	mess_send(MESS2RELE_HNDL,PARAM_RELE_SAMOKALIBR,0,20);
001668  2314              MOVS     r3,#0x14
00166a  2200              MOVS     r2,#0
00166c  2164              MOVS     r1,#0x64
00166e  20d2              MOVS     r0,#0xd2
001670  f7fffffe          BL       mess_send
                  |L1.5748|
;;;1573   	}
;;;1574   vz2_stat_old=vz2_stat;
001674  f8160f29          LDRB     r0,[r6,#0x29]!  ; vz2_stat
001678  7070              STRB     r0,[r6,#1]
;;;1575   
;;;1576   }
00167a  e8bd8ff8          POP      {r3-r11,pc}
;;;1577   
                          ENDP

                  vz2_start PROC
;;;1579   //старт уравнительног заряда
;;;1580   char vz2_start(char hour)
00167e  b510              PUSH     {r4,lr}
;;;1581   {          
;;;1582   char out;
;;;1583   out=0;
001680  f04f0000          MOV      r0,#0
;;;1584   if((spc_stat==spcOFF)&&(speedChrgBlckStat!=1)&&(vz1_stat==vz1sOFF))
001684  4943              LDR      r1,|L1.6036|
001686  7e8a              LDRB     r2,[r1,#0x1a]  ; spc_stat
001688  2a00              CMP      r2,#0
00168a  d112              BNE      |L1.5810|
00168c  4a42              LDR      r2,|L1.6040|
00168e  8812              LDRH     r2,[r2,#0]  ; speedChrgBlckStat
001690  2a01              CMP      r2,#1
001692  d00e              BEQ      |L1.5810|
001694  f8912026          LDRB     r2,[r1,#0x26]  ; vz1_stat
001698  2a00              CMP      r2,#0
00169a  d10a              BNE      |L1.5810|
;;;1585   	{
;;;1586   	if(vz1_stat==vz1sOFF)
;;;1587   		{
;;;1588   		vz2_stat=vz2sSTEP1;
00169c  f04f0001          MOV      r0,#1
0016a0  f8810029          STRB     r0,[r1,#0x29]
;;;1589   		lc640_write(EE_VZ2_STAT,vz2sSTEP1);
0016a4  4601              MOV      r1,r0
0016a6  f44f70ca          MOV      r0,#0x194
0016aa  f7fffffe          BL       lc640_write
;;;1590   		out=1;
0016ae  f04f0001          MOV      r0,#1
                  |L1.5810|
;;;1591   		
;;;1592   		}
;;;1593   /*	spc_stat=spcVZ;
;;;1594   	__ee_spc_stat=spcVZ; 
;;;1595   	lc640_write_int(EE_SPC_STAT,__ee_spc_stat);   
;;;1596   	vz_cnt_h=hour;
;;;1597   	__ee_vz_cnt=hour*60;
;;;1598   	if(hour==0)__ee_vz_cnt=30;
;;;1599   	lc640_write_int(EE_VZ_CNT,__ee_vz_cnt);
;;;1600   	lc640_write_int(EE_SPC_VZ_LENGT,__ee_vz_cnt);	
;;;1601   	vz_cnt_h_=0;
;;;1602   	vz_cnt_s=0;
;;;1603   	vz_cnt_s_=0;
;;;1604   	
;;;1605   		*/
;;;1606   	}
;;;1607   //else if((spc_stat==spc_KE1p1)||(spc_stat==spc_KE1p2)) out=22; 
;;;1608   //else if((spc_stat==spc_KE2p1)||(spc_stat==spc_KE2p2)) out=33;
;;;1609   //plazma=out;	
;;;1610   return out;
;;;1611   }
0016b2  bd10              POP      {r4,pc}
;;;1612   //-----------------------------------------------
                          ENDP

                  vz2_stop PROC
;;;1613   //стоп формовочного заряда
;;;1614   void vz2_stop(void)
0016b4  4837              LDR      r0,|L1.6036|
;;;1615   {
;;;1616   if(vz2_stat!=vz2sOFF)
0016b6  f8901029          LDRB     r1,[r0,#0x29]  ; vz2_stat
0016ba  2900              CMP      r1,#0
0016bc  d007              BEQ      |L1.5838|
;;;1617   	{
;;;1618   	vz2_stat=vz2sSTOP;
0016be  f04f0113          MOV      r1,#0x13
0016c2  f8801029          STRB     r1,[r0,#0x29]
;;;1619   	lc640_write(EE_VZ2_STAT,vz2sSTOP);
0016c6  f44f70ca          MOV      r0,#0x194
0016ca  f7ffbffe          B.W      lc640_write
                  |L1.5838|
;;;1620   	}
;;;1621   }
0016ce  4770              BX       lr
;;;1622   
                          ENDP

                  kb_init PROC
;;;1623   //-----------------------------------------------
;;;1624   void kb_init(void)
0016d0  4832              LDR      r0,|L1.6044|
;;;1625   {
;;;1626   main_kb_cnt=(TBAT*60)-60/*120*/;
0016d2  f06f013b          MVN      r1,#0x3b
0016d6  8800              LDRH     r0,[r0,#0]  ; TBAT
0016d8  ebc01000          RSB      r0,r0,r0,LSL #4
0016dc  eb010080          ADD      r0,r1,r0,LSL #2
0016e0  492c              LDR      r1,|L1.6036|
0016e2  f8a1004c          STRH     r0,[r1,#0x4c]
;;;1627   }
0016e6  4770              BX       lr
;;;1628   
                          ENDP

                  kb_hndl PROC
;;;1629   //-----------------------------------------------
;;;1630   void kb_hndl(void)
0016e8  e92d5ff0          PUSH     {r4-r12,lr}
;;;1631   {
;;;1632   
;;;1633   static signed short ibat[2],ibat_[2];
;;;1634   #ifdef UKU_TELECORE2015
;;;1635   if(((++main_kb_cnt>=TBAT*60)&&(TBAT))&&(BAT_TYPE==0))
;;;1636   #else 
;;;1637   if(((++main_kb_cnt>=TBAT*60)&&(TBAT)))
0016ec  f8df80a4          LDR      r8,|L1.6036|
;;;1638   #endif
;;;1639   	{
;;;1640   	main_kb_cnt=0;
;;;1641   	
;;;1642   	kb_start[0]=0;
;;;1643   	kb_start[1]=0;
;;;1644   	kb_start_ips=0;
;;;1645   
;;;1646   	if( (BAT_IS_ON[0]==bisON) && (bat[0]._Ub>80) && ( (abs(bat[0]._Ib)<IKB) || (bat[0]._av&1) ) ) kb_start[0]=1;
;;;1647   	if( (BAT_IS_ON[1]==bisON) && (bat[1]._Ub>80) && ( (abs(bat[1]._Ib)<IKB) || (bat[1]._av&1) ) ) kb_start[1]=1;
;;;1648   #ifdef UKU_220_IPS_TERMOKOMPENSAT
;;;1649   	if( (!ips_bat_av_vzvod)                      && ((abs(Ib_ips_termokompensat)<IKB) || (bat_ips._av&1) ) ) kb_start_ips=1;
0016f0  f8dfa0ac          LDR      r10,|L1.6048|
0016f4  2500              MOVS     r5,#0                 ;1637
0016f6  f8b8004c          LDRH     r0,[r8,#0x4c]         ;1637  ; main_kb_cnt
0016fa  4e2a              LDR      r6,|L1.6052|
0016fc  1c40              ADDS     r0,r0,#1              ;1637
0016fe  b201              SXTH     r1,r0                 ;1637
001700  4826              LDR      r0,|L1.6044|
001702  f8a8104c          STRH     r1,[r8,#0x4c]         ;1637
001706  f8df90a0          LDR      r9,|L1.6056|
00170a  f9b00000          LDRSH    r0,[r0,#0]            ;1637  ; TBAT
;;;1650   #endif	
;;;1651   	if( (net_av) || (num_of_wrks_bps==0) || ( (spc_stat!=spcOFF) && (spc_stat!=spcVZ) ) 
;;;1652   	  ||(vz1_stat!=vz1sOFF)||(vz2_stat!=vz2sOFF)||(sp_ch_stat!=scsOFF) 	)
;;;1653    
;;;1654   		{
;;;1655   		kb_start[0]=0;
;;;1656   		kb_start[1]=0;
;;;1657   		kb_start_ips=0;
;;;1658   		}
;;;1659   
;;;1660   	if((kb_start[0]==1)||(kb_start[1]==1)||(kb_start_ips==1))
;;;1661   		{
;;;1662   		kb_cnt_1lev=10;
00170e  270a              MOVS     r7,#0xa
001710  ebc01200          RSB      r2,r0,r0,LSL #4       ;1637
001714  f04f0b01          MOV      r11,#1                ;1646
001718  f1080452          ADD      r4,r8,#0x52           ;1642
00171c  ebb10f82          CMP      r1,r2,LSL #2          ;1637
001720  db7e              BLT      |L1.6176|
001722  2800              CMP      r0,#0                 ;1637
001724  d07c              BEQ      |L1.6176|
001726  f8a8504c          STRH     r5,[r8,#0x4c]         ;1640
00172a  7025              STRB     r5,[r4,#0]            ;1642
00172c  7065              STRB     r5,[r4,#1]            ;1643
00172e  f8885014          STRB     r5,[r8,#0x14]         ;1644
001732  481e              LDR      r0,|L1.6060|
001734  7800              LDRB     r0,[r0,#0]            ;1646  ; BAT_IS_ON
001736  2855              CMP      r0,#0x55              ;1646
001738  d144              BNE      |L1.6084|
00173a  f9b60002          LDRSH    r0,[r6,#2]            ;1646  ; bat
00173e  2850              CMP      r0,#0x50              ;1646
001740  dd40              BLE      |L1.6084|
001742  f9b60008          LDRSH    r0,[r6,#8]            ;1646  ; bat
001746  f7fffffe          BL       abs
00174a  e031              B        |L1.6064|
                  |L1.5964|
00174c  20d4ced0          DCB      " ",212,206,208,204,206,194,206,215,205,219,201," ",199,192
001750  cccec2ce
001754  d7cddbc9
001758  20c7c0  
00175b  d0dfc420          DCB      208,223,196,"  ",0
00175f  2000    
001761  00                DCB      0
001762  00                DCB      0
001763  00                DCB      0
                  |L1.5988|
001764  20202020          DCB      "    ",210,211,204,193,203,197,208,192,"!!!     ",0
001768  d2d3ccc1
00176c  cbc5d0c0
001770  21212120
001774  20202020
001778  00      
001779  00                DCB      0
00177a  00                DCB      0
00177b  00                DCB      0
                  |L1.6012|
00177c  20202020          DCB      "    ",212,206,208,204,206,194,206,215,205,219,201,"    "
001780  d4ced0cc
001784  cec2ced7
001788  cddbc920
00178c  202020  
00178f  2000              DCB      " ",0
001791  00                DCB      0
001792  00                DCB      0
001793  00                DCB      0
                  |L1.6036|
                          DCD      ||area_number.25||
                  |L1.6040|
                          DCD      speedChrgBlckStat
                  |L1.6044|
                          DCD      TBAT
                  |L1.6048|
                          DCD      Ib_ips_termokompensat
                  |L1.6052|
                          DCD      bat
                  |L1.6056|
                          DCD      IKB
                  |L1.6060|
                          DCD      BAT_IS_ON
                  |L1.6064|
0017b0  f9b91000          LDRSH    r1,[r9,#0]            ;1646  ; IKB
0017b4  4288              CMP      r0,r1                 ;1646
0017b6  db03              BLT      |L1.6080|
0017b8  f896003d          LDRB     r0,[r6,#0x3d]         ;1646  ; bat
0017bc  07c0              LSLS     r0,r0,#31             ;1646
0017be  d001              BEQ      |L1.6084|
                  |L1.6080|
0017c0  f884b000          STRB     r11,[r4,#0]           ;1646
                  |L1.6084|
0017c4  48ff              LDR      r0,|L1.7108|
0017c6  7840              LDRB     r0,[r0,#1]            ;1647  ; BAT_IS_ON
0017c8  2855              CMP      r0,#0x55              ;1647
0017ca  d111              BNE      |L1.6128|
0017cc  f9b6004e          LDRSH    r0,[r6,#0x4e]         ;1647  ; bat
0017d0  2850              CMP      r0,#0x50              ;1647
0017d2  dd0d              BLE      |L1.6128|
0017d4  f9b60054          LDRSH    r0,[r6,#0x54]         ;1647  ; bat
0017d8  f7fffffe          BL       abs
0017dc  f9b91000          LDRSH    r1,[r9,#0]            ;1647  ; IKB
0017e0  4288              CMP      r0,r1                 ;1647
0017e2  db03              BLT      |L1.6124|
0017e4  f8960089          LDRB     r0,[r6,#0x89]         ;1647  ; bat
0017e8  07c0              LSLS     r0,r0,#31             ;1647
0017ea  d001              BEQ      |L1.6128|
                  |L1.6124|
0017ec  f884b001          STRB     r11,[r4,#1]           ;1647
                  |L1.6128|
0017f0  48f5              LDR      r0,|L1.7112|
0017f2  7800              LDRB     r0,[r0,#0]            ;1649  ; ips_bat_av_vzvod
0017f4  b970              CBNZ     r0,|L1.6164|
0017f6  f9ba0000          LDRSH    r0,[r10,#0]           ;1649  ; Ib_ips_termokompensat
0017fa  f7fffffe          BL       abs
0017fe  f9b91000          LDRSH    r1,[r9,#0]            ;1649  ; IKB
001802  4288              CMP      r0,r1                 ;1649
001804  db04              BLT      |L1.6160|
001806  48f1              LDR      r0,|L1.7116|
001808  f890003d          LDRB     r0,[r0,#0x3d]         ;1649  ; bat_ips
00180c  07c0              LSLS     r0,r0,#31             ;1649
00180e  d001              BEQ      |L1.6164|
                  |L1.6160|
001810  f888b014          STRB     r11,[r8,#0x14]        ;1649
                  |L1.6164|
001814  48ee              LDR      r0,|L1.7120|
001816  7800              LDRB     r0,[r0,#0]            ;1651  ; net_av
001818  b990              CBNZ     r0,|L1.6208|
00181a  f8980015          LDRB     r0,[r8,#0x15]         ;1651  ; num_of_wrks_bps
00181e  e000              B        |L1.6178|
                  |L1.6176|
001820  e01e              B        |L1.6240|
                  |L1.6178|
001822  b168              CBZ      r0,|L1.6208|
001824  f898001a          LDRB     r0,[r8,#0x1a]         ;1651  ; spc_stat
001828  b108              CBZ      r0,|L1.6190|
00182a  2802              CMP      r0,#2                 ;1651
00182c  d108              BNE      |L1.6208|
                  |L1.6190|
00182e  f8980026          LDRB     r0,[r8,#0x26]         ;1652  ; vz1_stat
001832  b928              CBNZ     r0,|L1.6208|
001834  f8980029          LDRB     r0,[r8,#0x29]         ;1652  ; vz2_stat
001838  b910              CBNZ     r0,|L1.6208|
00183a  48e6              LDR      r0,|L1.7124|
00183c  7800              LDRB     r0,[r0,#0]            ;1652  ; sp_ch_stat
00183e  b118              CBZ      r0,|L1.6216|
                  |L1.6208|
001840  7025              STRB     r5,[r4,#0]            ;1655
001842  7065              STRB     r5,[r4,#1]            ;1656
001844  f8885014          STRB     r5,[r8,#0x14]         ;1657
                  |L1.6216|
001848  7820              LDRB     r0,[r4,#0]            ;1660  ; kb_start
00184a  2801              CMP      r0,#1                 ;1660
00184c  d01e              BEQ      |L1.6284|
00184e  7860              LDRB     r0,[r4,#1]            ;1660  ; kb_start
001850  2801              CMP      r0,#1                 ;1660
001852  d01b              BEQ      |L1.6284|
001854  f8980014          LDRB     r0,[r8,#0x14]         ;1660  ; kb_start_ips
001858  2801              CMP      r0,#1                 ;1660
00185a  d017              BEQ      |L1.6284|
;;;1663   		}
;;;1664   	else kb_cnt_1lev=0;
00185c  f8a8504e          STRH     r5,[r8,#0x4e]
                  |L1.6240|
;;;1665   	}
;;;1666   
;;;1667   if(kb_cnt_1lev)
001860  4641              MOV      r1,r8
001862  f9b8004e          LDRSH    r0,[r8,#0x4e]  ; kb_cnt_1lev
;;;1668   	{
;;;1669   	kb_cnt_1lev--;
;;;1670   
;;;1671   	if(kb_cnt_1lev>5)mess_send(MESS2CNTRL_HNDL,PARAM_CNTRL_STAT_PLUS,30,15);
;;;1672   	else if(kb_cnt_1lev>0) mess_send(MESS2CNTRL_HNDL,PARAM_CNTRL_STAT_MINUS,30,15);
;;;1673   
;;;1674   
;;;1675   	if(kb_cnt_1lev==5)
;;;1676   		{
;;;1677   		ibat[0]=abs(bat[0]._Ib);
001866  f8df8370          LDR      r8,|L1.7128|
00186a  2800              CMP      r0,#0                 ;1667
00186c  d07e              BEQ      |L1.6508|
00186e  f1a00001          SUB      r0,r0,#1              ;1669
001872  b200              SXTH     r0,r0                 ;1669
001874  468b              MOV      r11,r1                ;1669
001876  f8a1004e          STRH     r0,[r1,#0x4e]         ;1669
00187a  2805              CMP      r0,#5                 ;1671
00187c  dd09              BLE      |L1.6290|
00187e  230f              MOVS     r3,#0xf               ;1671
001880  221e              MOVS     r2,#0x1e              ;1671
001882  2164              MOVS     r1,#0x64              ;1671
001884  20e1              MOVS     r0,#0xe1              ;1671
001886  f7fffffe          BL       mess_send
00188a  e00a              B        |L1.6306|
                  |L1.6284|
00188c  f8a8704e          STRH     r7,[r8,#0x4e]         ;1662
001890  e7e6              B        |L1.6240|
                  |L1.6290|
001892  2800              CMP      r0,#0                 ;1672
001894  dd05              BLE      |L1.6306|
001896  230f              MOVS     r3,#0xf               ;1672
001898  221e              MOVS     r2,#0x1e              ;1672
00189a  2169              MOVS     r1,#0x69              ;1672
00189c  20e1              MOVS     r0,#0xe1              ;1672
00189e  f7fffffe          BL       mess_send
                  |L1.6306|
0018a2  f8bb004e          LDRH     r0,[r11,#0x4e]        ;1675  ; kb_cnt_1lev
0018a6  2805              CMP      r0,#5                 ;1675
0018a8  d111              BNE      |L1.6350|
0018aa  f9b60008          LDRSH    r0,[r6,#8]  ; bat
0018ae  f7fffffe          BL       abs
0018b2  f8a80000          STRH     r0,[r8,#0]
;;;1678   		ibat[1]=abs(bat[1]._Ib);
0018b6  f9b60054          LDRSH    r0,[r6,#0x54]  ; bat
0018ba  f7fffffe          BL       abs
0018be  f8a80002          STRH     r0,[r8,#2]
;;;1679   		ibat_ips=abs(Ib_ips_termokompensat);
0018c2  f9ba0000          LDRSH    r0,[r10,#0]  ; Ib_ips_termokompensat
0018c6  f7fffffe          BL       abs
0018ca  f8ab0054          STRH     r0,[r11,#0x54]
                  |L1.6350|
;;;1680   		}
;;;1681   	
;;;1682   	if(kb_cnt_1lev==0)
0018ce  48c2              LDR      r0,|L1.7128|
0018d0  3890              SUBS     r0,r0,#0x90
0018d2  f8b0004e          LDRH     r0,[r0,#0x4e]  ; kb_cnt_1lev
0018d6  2800              CMP      r0,#0
0018d8  d158              BNE      |L1.6540|
;;;1683   		{
;;;1684   		ibat_[0]=abs(bat[0]._Ib);
0018da  f9b60008          LDRSH    r0,[r6,#8]  ; bat
0018de  f7fffffe          BL       abs
0018e2  f8dfb2f4          LDR      r11,|L1.7128|
0018e6  f10b0b04          ADD      r11,r11,#4
0018ea  f8ab0000          STRH     r0,[r11,#0]
;;;1685   		ibat_[1]=abs(bat[1]._Ib);
0018ee  f9b60054          LDRSH    r0,[r6,#0x54]  ; bat
0018f2  f7fffffe          BL       abs
0018f6  f8ab0002          STRH     r0,[r11,#2]
;;;1686   		ibat_ips_=abs(Ib_ips_termokompensat);
0018fa  f9ba0000          LDRSH    r0,[r10,#0]  ; Ib_ips_termokompensat
0018fe  f7fffffe          BL       abs
001902  f1ab0a94          SUB      r10,r11,#0x94
001906  f8aa0056          STRH     r0,[r10,#0x56]
;;;1687   
;;;1688   		kb_cnt_2lev=0;
00190a  f8aa5050          STRH     r5,[r10,#0x50]
;;;1689   
;;;1690   
;;;1691   		if(( (ibat[0]+ibat_[0]) < IKB )&& (kb_start[0]==1))
00190e  f9b80000          LDRSH    r0,[r8,#0]  ; ibat
001912  f9bb1000          LDRSH    r1,[r11,#0]  ; ibat_
001916  4408              ADD      r0,r0,r1
001918  f9b91000          LDRSH    r1,[r9,#0]  ; IKB
00191c  4288              CMP      r0,r1
00191e  da02              BGE      |L1.6438|
001920  7820              LDRB     r0,[r4,#0]  ; kb_start
001922  2801              CMP      r0,#1
001924  d034              BEQ      |L1.6544|
                  |L1.6438|
;;;1692   			{
;;;1693   			kb_cnt_2lev=10;  
;;;1694   			}
;;;1695   		else if(bat[0]._Ub>200)
001926  f9b60002          LDRSH    r0,[r6,#2]  ; bat
00192a  28c8              CMP      r0,#0xc8
00192c  dd04              BLE      |L1.6456|
;;;1696   			{
;;;1697   			kb_start[0]=0;
00192e  7025              STRB     r5,[r4,#0]
;;;1698   			avar_bat_hndl(0,0);
001930  2100              MOVS     r1,#0
001932  4608              MOV      r0,r1
001934  f7fffffe          BL       avar_bat_hndl
                  |L1.6456|
;;;1699   			}
;;;1700   		
;;;1701   		if(( (ibat[1]+ibat_[1]) < IKB ) && (kb_start[1]==1))
001938  f9b80002          LDRSH    r0,[r8,#2]  ; ibat
00193c  f9bb1002          LDRSH    r1,[r11,#2]  ; ibat_
001940  4408              ADD      r0,r0,r1
001942  f9b91000          LDRSH    r1,[r9,#0]  ; IKB
001946  4288              CMP      r0,r1
001948  da02              BGE      |L1.6480|
00194a  7860              LDRB     r0,[r4,#1]  ; kb_start
00194c  2801              CMP      r0,#1
00194e  d022              BEQ      |L1.6550|
                  |L1.6480|
;;;1702   			{
;;;1703   			kb_cnt_2lev=10;     
;;;1704   			}
;;;1705   		else  if(bat[1]._Ub>200)
001950  f9b6004e          LDRSH    r0,[r6,#0x4e]  ; bat
001954  28c8              CMP      r0,#0xc8
001956  dd04              BLE      |L1.6498|
;;;1706   			{
;;;1707   			kb_start[1]=0;
001958  7065              STRB     r5,[r4,#1]
;;;1708   			avar_bat_hndl(1,0);
00195a  2100              MOVS     r1,#0
00195c  2001              MOVS     r0,#1
00195e  f7fffffe          BL       avar_bat_hndl
                  |L1.6498|
;;;1709   			}
;;;1710   #ifdef UKU_220_IPS_TERMOKOMPENSAT
;;;1711   		if(( (ibat_ips+ibat_ips_) < IKB ) && (kb_start_ips==1))
001962  f9ba0054          LDRSH    r0,[r10,#0x54]  ; ibat_ips
001966  f9ba1056          LDRSH    r1,[r10,#0x56]  ; ibat_ips_
00196a  e000              B        |L1.6510|
                  |L1.6508|
00196c  e01c              B        |L1.6568|
                  |L1.6510|
00196e  4408              ADD      r0,r0,r1
001970  f9b91000          LDRSH    r1,[r9,#0]  ; IKB
001974  4288              CMP      r0,r1
001976  da09              BGE      |L1.6540|
001978  f89a0014          LDRB     r0,[r10,#0x14]  ; kb_start_ips
00197c  2801              CMP      r0,#1
00197e  d105              BNE      |L1.6540|
;;;1712   			{
;;;1713   			if(KB_ALGORITM==1)
001980  4896              LDR      r0,|L1.7132|
001982  8800              LDRH     r0,[r0,#0]  ; KB_ALGORITM
001984  2801              CMP      r0,#1
001986  d009              BEQ      |L1.6556|
;;;1714   				{
;;;1715   				avar_bat_ips_hndl(1);
;;;1716   				kb_start_ips=0;
;;;1717   				}
;;;1718   			else
;;;1719   				{
;;;1720   				kb_cnt_2lev=10;     
001988  f8aa7050          STRH     r7,[r10,#0x50]
                  |L1.6540|
;;;1721   				}
;;;1722   			}
;;;1723   #endif
;;;1724   		}	
;;;1725   
;;;1726   
;;;1727   	}
;;;1728   else if(kb_cnt_2lev)
;;;1729   	{
;;;1730   	kb_cnt_2lev--;
;;;1731   
;;;1732   	if(kb_cnt_2lev>5)mess_send(MESS2CNTRL_HNDL,PARAM_CNTRL_STAT_PLUS,200,15);
;;;1733   	else if(kb_cnt_2lev>0) mess_send(MESS2CNTRL_HNDL,PARAM_CNTRL_STAT_MINUS,200,15);
;;;1734   
;;;1735   
;;;1736   	if(kb_cnt_2lev==5)
;;;1737   		{
;;;1738   		ibat[0]=abs(bat[0]._Ib);
;;;1739   		ibat[1]=abs(bat[1]._Ib);
;;;1740   		ibat_ips=abs(Ib_ips_termokompensat);
;;;1741   		}
;;;1742   	
;;;1743   	if(kb_cnt_2lev==0)
;;;1744   		{
;;;1745   		ibat_[0]=abs(bat[0]._Ib);
;;;1746   		ibat_[1]=abs(bat[1]._Ib);
;;;1747   		ibat_ips_=abs(Ib_ips_termokompensat);
;;;1748   
;;;1749   		kb_full_ver=0;
;;;1750   
;;;1751   		if(( (ibat[0]+ibat_[0]) < IKB ) && (kb_start[0]==1))
;;;1752   			{
;;;1753   			kb_full_ver=1;  
;;;1754   			}
;;;1755   		else if(bat[0]._Ub>200)			
;;;1756   			{
;;;1757   			kb_start[0]=0;
;;;1758   			avar_bat_hndl(0,0);
;;;1759   			}
;;;1760   
;;;1761   		if(( (ibat[1]+ibat_[1]) < IKB ) && (kb_start[1]==1))
;;;1762   			{
;;;1763   			kb_full_ver=1;     
;;;1764   			}
;;;1765   		else	if(bat[1]._Ub>200)		
;;;1766   			{
;;;1767   			kb_start[1]=0;
;;;1768   			avar_bat_hndl(1,0);
;;;1769   			}
;;;1770   #ifdef UKU_220_IPS_TERMOKOMPENSAT
;;;1771   		if(( (ibat_ips+ibat_ips_) < IKB )  && (kb_start_ips==1))
;;;1772   			{
;;;1773   			if(KB_ALGORITM==2)
;;;1774   				{
;;;1775   				avar_bat_ips_hndl(1);
;;;1776   				kb_start_ips=0;
;;;1777   				}
;;;1778   			else
;;;1779   				{
;;;1780   				kb_full_ver=1;     
;;;1781   				}
;;;1782   			}
;;;1783   #endif
;;;1784   		}	
;;;1785   	}
;;;1786   
;;;1787   else if(kb_full_ver)
;;;1788   	{
;;;1789   	
;;;1790   	mess_send(MESS2CNTRL_HNDL,PARAM_CNTRL_STAT_STEP_DOWN,0,15);
;;;1791   
;;;1792   	if( abs(bat[0]._Ib) > IKB ) 
;;;1793   		{
;;;1794   		if(kb_start[0]==1)
;;;1795   			{
;;;1796   			kb_start[0]=0;
;;;1797   			avar_bat_hndl(0,0);
;;;1798   			}
;;;1799   		}
;;;1800   
;;;1801   	if( abs(bat[1]._Ib) > IKB ) 
;;;1802   		{
;;;1803   		if(kb_start[1]==1)
;;;1804   			{
;;;1805   			kb_start[1]=0;
;;;1806   			avar_bat_hndl(1,0);
;;;1807   			}
;;;1808   		}
;;;1809   #ifdef UKU_220_IPS_TERMOKOMPENSAT
;;;1810   	if( abs(Ib_ips_termokompensat) > IKB ) 
;;;1811   		{
;;;1812   		if(kb_start_ips==1)
;;;1813   			{
;;;1814   			kb_start_ips=0;
;;;1815   			avar_bat_ips_hndl(0);
;;;1816   			}
;;;1817   		}
;;;1818   #endif
;;;1819   
;;;1820   	if ((kb_start[0]==0) && (kb_start[1]==0) && (kb_start_ips==0)) 
;;;1821   		{
;;;1822   		kb_full_ver=0;
;;;1823   		}
;;;1824   
;;;1825   	if(( (mess_find(MESS2KB_HNDL))	&& (mess_data[0]==PARAM_CNTRL_IS_DOWN) ) || (load_U<(USIGN*10)) )
;;;1826   		{
;;;1827   		kb_full_ver=0;
;;;1828   		if((kb_start[0]==1)&&((load_I>(2*IKB)/10))&&(!(bat[0]._av&0x01))) avar_bat_hndl(0,1);
;;;1829   		if((kb_start[1]==1)&&((load_I>(2*IKB)/10))&&(!(bat[1]._av&0x01))) avar_bat_hndl(1,1);
;;;1830   #ifdef UKU_220_IPS_TERMOKOMPENSAT
;;;1831   		if((kb_start_ips==1)&&((load_I>(2*IKB)/10))&&(!(bat_ips._av&0x01))) avar_bat_ips_hndl(1);
;;;1832   #endif
;;;1833   		}
;;;1834   	}
;;;1835   
;;;1836   }
00198c  e8bd9ff0          POP      {r4-r12,pc}
                  |L1.6544|
001990  f8aa7050          STRH     r7,[r10,#0x50]        ;1693
001994  e7d0              B        |L1.6456|
                  |L1.6550|
001996  f8aa7050          STRH     r7,[r10,#0x50]        ;1703
00199a  e7e2              B        |L1.6498|
                  |L1.6556|
00199c  2001              MOVS     r0,#1                 ;1715
00199e  f7fffffe          BL       avar_bat_ips_hndl
0019a2  f88a5014          STRB     r5,[r10,#0x14]        ;1716
                  |L1.6566|
0019a6  e7f1              B        |L1.6540|
                  |L1.6568|
0019a8  f9b10050          LDRSH    r0,[r1,#0x50]         ;1728  ; kb_cnt_2lev
0019ac  b3f0              CBZ      r0,|L1.6700|
0019ae  f1a00001          SUB      r0,r0,#1              ;1730
0019b2  b200              SXTH     r0,r0                 ;1730
0019b4  460f              MOV      r7,r1                 ;1730
0019b6  f8a10050          STRH     r0,[r1,#0x50]         ;1730
0019ba  2805              CMP      r0,#5                 ;1732
0019bc  dd06              BLE      |L1.6604|
0019be  230f              MOVS     r3,#0xf               ;1732
0019c0  22c8              MOVS     r2,#0xc8              ;1732
0019c2  2164              MOVS     r1,#0x64              ;1732
0019c4  20e1              MOVS     r0,#0xe1              ;1732
0019c6  f7fffffe          BL       mess_send
0019ca  e007              B        |L1.6620|
                  |L1.6604|
0019cc  2800              CMP      r0,#0                 ;1733
0019ce  dd05              BLE      |L1.6620|
0019d0  230f              MOVS     r3,#0xf               ;1733
0019d2  22c8              MOVS     r2,#0xc8              ;1733
0019d4  2169              MOVS     r1,#0x69              ;1733
0019d6  20e1              MOVS     r0,#0xe1              ;1733
0019d8  f7fffffe          BL       mess_send
                  |L1.6620|
0019dc  f8b70050          LDRH     r0,[r7,#0x50]         ;1736  ; kb_cnt_2lev
0019e0  2805              CMP      r0,#5                 ;1736
0019e2  d111              BNE      |L1.6664|
0019e4  f9b60008          LDRSH    r0,[r6,#8]            ;1738  ; bat
0019e8  f7fffffe          BL       abs
0019ec  f8a80000          STRH     r0,[r8,#0]            ;1738
0019f0  f9b60054          LDRSH    r0,[r6,#0x54]         ;1739  ; bat
0019f4  f7fffffe          BL       abs
0019f8  f8a80002          STRH     r0,[r8,#2]            ;1739
0019fc  f9ba0000          LDRSH    r0,[r10,#0]           ;1740  ; Ib_ips_termokompensat
001a00  f7fffffe          BL       abs
001a04  f8a70054          STRH     r0,[r7,#0x54]         ;1740
                  |L1.6664|
001a08  4873              LDR      r0,|L1.7128|
001a0a  3890              SUBS     r0,r0,#0x90           ;1743
001a0c  f8b00050          LDRH     r0,[r0,#0x50]         ;1743  ; kb_cnt_2lev
001a10  2800              CMP      r0,#0                 ;1743
                  |L1.6674|
001a12  d1bb              BNE      |L1.6540|
001a14  f9b60008          LDRSH    r0,[r6,#8]            ;1745  ; bat
001a18  f7fffffe          BL       abs
001a1c  4f6e              LDR      r7,|L1.7128|
001a1e  1d3f              ADDS     r7,r7,#4              ;1745
001a20  8038              STRH     r0,[r7,#0]            ;1745
001a22  f9b60054          LDRSH    r0,[r6,#0x54]         ;1746  ; bat
001a26  f7fffffe          BL       abs
001a2a  e000              B        |L1.6702|
                  |L1.6700|
001a2c  e055              B        |L1.6874|
                  |L1.6702|
001a2e  8078              STRH     r0,[r7,#2]            ;1746
001a30  f9ba0000          LDRSH    r0,[r10,#0]           ;1747  ; Ib_ips_termokompensat
001a34  f7fffffe          BL       abs
001a38  f1a70a94          SUB      r10,r7,#0x94          ;1747
001a3c  f8aa0056          STRH     r0,[r10,#0x56]        ;1747
001a40  f88a5013          STRB     r5,[r10,#0x13]        ;1749
001a44  f9b80000          LDRSH    r0,[r8,#0]            ;1751  ; ibat
001a48  f9b71000          LDRSH    r1,[r7,#0]            ;1751  ; ibat_
001a4c  4408              ADD      r0,r0,r1              ;1751
001a4e  f9b91000          LDRSH    r1,[r9,#0]            ;1751  ; IKB
001a52  4288              CMP      r0,r1                 ;1751
001a54  da02              BGE      |L1.6748|
001a56  7820              LDRB     r0,[r4,#0]            ;1751  ; kb_start
001a58  2801              CMP      r0,#1                 ;1751
001a5a  d032              BEQ      |L1.6850|
                  |L1.6748|
001a5c  f9b60002          LDRSH    r0,[r6,#2]            ;1755  ; bat
001a60  28c8              CMP      r0,#0xc8              ;1755
001a62  dd04              BLE      |L1.6766|
001a64  7025              STRB     r5,[r4,#0]            ;1757
001a66  2100              MOVS     r1,#0                 ;1758
001a68  4608              MOV      r0,r1                 ;1758
001a6a  f7fffffe          BL       avar_bat_hndl
                  |L1.6766|
001a6e  f9b80002          LDRSH    r0,[r8,#2]            ;1761  ; ibat
001a72  f9b71002          LDRSH    r1,[r7,#2]            ;1761  ; ibat_
001a76  4408              ADD      r0,r0,r1              ;1761
001a78  f9b91000          LDRSH    r1,[r9,#0]            ;1761  ; IKB
001a7c  4288              CMP      r0,r1                 ;1761
001a7e  da02              BGE      |L1.6790|
001a80  7860              LDRB     r0,[r4,#1]            ;1761  ; kb_start
001a82  2801              CMP      r0,#1                 ;1761
001a84  d020              BEQ      |L1.6856|
                  |L1.6790|
001a86  f9b6004e          LDRSH    r0,[r6,#0x4e]         ;1765  ; bat
001a8a  28c8              CMP      r0,#0xc8              ;1765
001a8c  dd04              BLE      |L1.6808|
001a8e  7065              STRB     r5,[r4,#1]            ;1767
001a90  2100              MOVS     r1,#0                 ;1768
001a92  2001              MOVS     r0,#1                 ;1768
001a94  f7fffffe          BL       avar_bat_hndl
                  |L1.6808|
001a98  f9ba0054          LDRSH    r0,[r10,#0x54]        ;1771  ; ibat_ips
001a9c  f9ba1056          LDRSH    r1,[r10,#0x56]        ;1771  ; ibat_ips_
001aa0  4408              ADD      r0,r0,r1              ;1771
001aa2  f9b91000          LDRSH    r1,[r9,#0]            ;1771  ; IKB
001aa6  4288              CMP      r0,r1                 ;1771
001aa8  f6bfaf7d          BGE      |L1.6566|
001aac  f89a0014          LDRB     r0,[r10,#0x14]        ;1771  ; kb_start_ips
001ab0  2801              CMP      r0,#1                 ;1771
001ab2  d1ae              BNE      |L1.6674|
001ab4  4849              LDR      r0,|L1.7132|
001ab6  8800              LDRH     r0,[r0,#0]            ;1773  ; KB_ALGORITM
001ab8  2802              CMP      r0,#2                 ;1773
001aba  d008              BEQ      |L1.6862|
001abc  f88ab013          STRB     r11,[r10,#0x13]       ;1780
                  |L1.6848|
001ac0  e764              B        |L1.6540|
                  |L1.6850|
001ac2  f88ab013          STRB     r11,[r10,#0x13]       ;1753
001ac6  e7d2              B        |L1.6766|
                  |L1.6856|
001ac8  f88ab013          STRB     r11,[r10,#0x13]       ;1763
001acc  e7e4              B        |L1.6808|
                  |L1.6862|
001ace  2001              MOVS     r0,#1                 ;1775
001ad0  f7fffffe          BL       avar_bat_ips_hndl
001ad4  f88a5014          STRB     r5,[r10,#0x14]        ;1776
001ad8  e758              B        |L1.6540|
                  |L1.6874|
001ada  7cc8              LDRB     r0,[r1,#0x13]         ;1787  ; kb_full_ver
001adc  4688              MOV      r8,r1                 ;1787
001ade  2800              CMP      r0,#0                 ;1787
001ae0  d0ee              BEQ      |L1.6848|
001ae2  230f              MOVS     r3,#0xf               ;1790
001ae4  2200              MOVS     r2,#0                 ;1790
001ae6  216e              MOVS     r1,#0x6e              ;1790
001ae8  20e1              MOVS     r0,#0xe1              ;1790
001aea  f7fffffe          BL       mess_send
001aee  f9b60008          LDRSH    r0,[r6,#8]            ;1792  ; bat
001af2  f7fffffe          BL       abs
001af6  f9b91000          LDRSH    r1,[r9,#0]            ;1792  ; IKB
001afa  4288              CMP      r0,r1                 ;1792
001afc  dd07              BLE      |L1.6926|
001afe  7820              LDRB     r0,[r4,#0]            ;1794  ; kb_start
001b00  2801              CMP      r0,#1                 ;1794
001b02  d104              BNE      |L1.6926|
001b04  7025              STRB     r5,[r4,#0]            ;1796
001b06  2100              MOVS     r1,#0                 ;1797
001b08  4608              MOV      r0,r1                 ;1797
001b0a  f7fffffe          BL       avar_bat_hndl
                  |L1.6926|
001b0e  f9b60054          LDRSH    r0,[r6,#0x54]         ;1801  ; bat
001b12  f7fffffe          BL       abs
001b16  f9b91000          LDRSH    r1,[r9,#0]            ;1801  ; IKB
001b1a  4288              CMP      r0,r1                 ;1801
001b1c  dd06              BLE      |L1.6956|
001b1e  7860              LDRB     r0,[r4,#1]            ;1803  ; kb_start
001b20  2801              CMP      r0,#1                 ;1803
001b22  d103              BNE      |L1.6956|
001b24  7065              STRB     r5,[r4,#1]            ;1805
001b26  2100              MOVS     r1,#0                 ;1806
001b28  f7fffffe          BL       avar_bat_hndl
                  |L1.6956|
001b2c  f9ba0000          LDRSH    r0,[r10,#0]           ;1810  ; Ib_ips_termokompensat
001b30  f7fffffe          BL       abs
001b34  f9b91000          LDRSH    r1,[r9,#0]            ;1810  ; IKB
001b38  4288              CMP      r0,r1                 ;1810
001b3a  dd08              BLE      |L1.6990|
001b3c  f8980014          LDRB     r0,[r8,#0x14]         ;1812  ; kb_start_ips
001b40  2801              CMP      r0,#1                 ;1812
001b42  d104              BNE      |L1.6990|
001b44  f8885014          STRB     r5,[r8,#0x14]         ;1814
001b48  2000              MOVS     r0,#0                 ;1815
001b4a  f7fffffe          BL       avar_bat_ips_hndl
                  |L1.6990|
001b4e  7820              LDRB     r0,[r4,#0]            ;1820  ; kb_start
001b50  b930              CBNZ     r0,|L1.7008|
001b52  7860              LDRB     r0,[r4,#1]            ;1820  ; kb_start
001b54  b920              CBNZ     r0,|L1.7008|
001b56  f8980014          LDRB     r0,[r8,#0x14]         ;1820  ; kb_start_ips
001b5a  b908              CBNZ     r0,|L1.7008|
001b5c  f8885013          STRB     r5,[r8,#0x13]         ;1822
                  |L1.7008|
001b60  20e6              MOVS     r0,#0xe6              ;1825
001b62  f7fffffe          BL       mess_find
001b66  b118              CBZ      r0,|L1.7024|
001b68  481d              LDR      r0,|L1.7136|
001b6a  6800              LDR      r0,[r0,#0]            ;1825  ; mess_data
001b6c  28e7              CMP      r0,#0xe7              ;1825
001b6e  d00a              BEQ      |L1.7046|
                  |L1.7024|
001b70  481c              LDR      r0,|L1.7140|
001b72  491d              LDR      r1,|L1.7144|
001b74  f9b00000          LDRSH    r0,[r0,#0]            ;1825  ; USIGN
001b78  f9b11000          LDRSH    r1,[r1,#0]            ;1825  ; load_U
001b7c  eb000080          ADD      r0,r0,r0,LSL #2       ;1825
001b80  ebb10f40          CMP      r1,r0,LSL #1          ;1825
                  |L1.7044|
001b84  da9c              BGE      |L1.6848|
                  |L1.7046|
001b86  f8885013          STRB     r5,[r8,#0x13]         ;1827
001b8a  7820              LDRB     r0,[r4,#0]            ;1828  ; kb_start
001b8c  4d17              LDR      r5,|L1.7148|
001b8e  2801              CMP      r0,#1                 ;1828
001b90  d10f              BNE      |L1.7090|
001b92  f9b90000          LDRSH    r0,[r9,#0]            ;1828  ; IKB
001b96  0040              LSLS     r0,r0,#1              ;1828
001b98  fb90f1f7          SDIV     r1,r0,r7              ;1828
001b9c  f9b50000          LDRSH    r0,[r5,#0]            ;1828  ; load_I
001ba0  4281              CMP      r1,r0                 ;1828
001ba2  da06              BGE      |L1.7090|
001ba4  f896003d          LDRB     r0,[r6,#0x3d]         ;1828  ; bat
001ba8  07c0              LSLS     r0,r0,#31             ;1828
001baa  d102              BNE      |L1.7090|
001bac  2101              MOVS     r1,#1                 ;1828
001bae  f7fffffe          BL       avar_bat_hndl
                  |L1.7090|
001bb2  7860              LDRB     r0,[r4,#1]            ;1829  ; kb_start
001bb4  2801              CMP      r0,#1                 ;1829
001bb6  d127              BNE      |L1.7176|
001bb8  f9b90000          LDRSH    r0,[r9,#0]            ;1829  ; IKB
001bbc  0040              LSLS     r0,r0,#1              ;1829
001bbe  fb90f0f7          SDIV     r0,r0,r7              ;1829
001bc2  e015              B        |L1.7152|
                  |L1.7108|
                          DCD      BAT_IS_ON
                  |L1.7112|
                          DCD      ips_bat_av_vzvod
                  |L1.7116|
                          DCD      bat_ips
                  |L1.7120|
                          DCD      net_av
                  |L1.7124|
                          DCD      sp_ch_stat
                  |L1.7128|
                          DCD      ||area_number.25||+0x90
                  |L1.7132|
                          DCD      KB_ALGORITM
                  |L1.7136|
                          DCD      mess_data
                  |L1.7140|
                          DCD      USIGN
                  |L1.7144|
                          DCD      load_U
                  |L1.7148|
                          DCD      load_I
                  |L1.7152|
001bf0  f9b51000          LDRSH    r1,[r5,#0]            ;1829  ; load_I
001bf4  4288              CMP      r0,r1                 ;1829
001bf6  da07              BGE      |L1.7176|
001bf8  f8960089          LDRB     r0,[r6,#0x89]         ;1829  ; bat
001bfc  07c0              LSLS     r0,r0,#31             ;1829
001bfe  d103              BNE      |L1.7176|
001c00  2101              MOVS     r1,#1                 ;1829
001c02  4608              MOV      r0,r1                 ;1829
001c04  f7fffffe          BL       avar_bat_hndl
                  |L1.7176|
001c08  f8980014          LDRB     r0,[r8,#0x14]         ;1831  ; kb_start_ips
001c0c  2801              CMP      r0,#1                 ;1831
                  |L1.7182|
001c0e  f47faeca          BNE      |L1.6566|
001c12  f9b90000          LDRSH    r0,[r9,#0]            ;1831  ; IKB
001c16  f9b51000          LDRSH    r1,[r5,#0]            ;1831  ; load_I
001c1a  0040              LSLS     r0,r0,#1              ;1831
001c1c  fb90f0f7          SDIV     r0,r0,r7              ;1831
001c20  4288              CMP      r0,r1                 ;1831
001c22  daaf              BGE      |L1.7044|
001c24  48ff              LDR      r0,|L1.8228|
001c26  f890003d          LDRB     r0,[r0,#0x3d]         ;1831  ; bat_ips
001c2a  07c0              LSLS     r0,r0,#31             ;1831
001c2c  d1ef              BNE      |L1.7182|
001c2e  e8bd5ff0          POP      {r4-r12,lr}           ;1831
001c32  2001              MOVS     r0,#1                 ;1831
001c34  f7ffbffe          B.W      avar_bat_ips_hndl
;;;1837   
                          ENDP

                  samokalibr_hndl PROC
;;;1846   //-----------------------------------------------
;;;1847   void samokalibr_hndl(void)
001c38  4770              BX       lr
;;;1848   {
;;;1849   #ifndef UKU_220_IPS_TERMOKOMPENSAT
;;;1850   if(++samokalibr_cnt>=1800)samokalibr_cnt=0;
;;;1851   
;;;1852   if((samokalibr_cnt>=1785U)&&(vz2_stat==vz2sOFF))
;;;1853   	{
;;;1854   	mess_send(MESS2RELE_HNDL,PARAM_RELE_SAMOKALIBR,1,15);
;;;1855   	mess_send(MESS2IND_HNDL,PARAM_SAMOKALIBR,0,15);
;;;1856   	mess_send(MESS2MATEMAT,PARAM_SAMOKALIBR,0,15);
;;;1857   	} 
;;;1858   
;;;1859   if((samokalibr_cnt==1799U)&&(vz2_stat==vz2sOFF))
;;;1860   	{
;;;1861   	if((Kibat0[0]!=ad7705_buff_[0])&&(abs(bat[0]._Ib/10)<IZMAX)) lc640_write_int(ADR_KI0BAT[0],ad7705_buff_[0]);
;;;1862   	if((Kibat0[1]!=ad7705_buff_[1])&&(abs(bat[0]._Ib/10)<IZMAX)) lc640_write_int(ADR_KI0BAT[1],ad7705_buff_[1]);
;;;1863   	
;;;1864   	}
;;;1865   #endif	 	
;;;1866   }
;;;1867   
                          ENDP

                  ubat_old_drv PROC
;;;1870   //-----------------------------------------------
;;;1871   void ubat_old_drv(void)
001c3a  b510              PUSH     {r4,lr}
;;;1872   {        
;;;1873   bat_u_old_cnt++;
001c3c  4cfa              LDR      r4,|L1.8232|
001c3e  8820              LDRH     r0,[r4,#0]  ; bat_u_old_cnt
001c40  f1000001          ADD      r0,r0,#1
001c44  8020              STRH     r0,[r4,#0]
;;;1874   gran_ring(&bat_u_old_cnt,0,8);
001c46  f04f0208          MOV      r2,#8
001c4a  f04f0100          MOV      r1,#0
001c4e  4620              MOV      r0,r4
001c50  f7fffffe          BL       gran_ring
;;;1875   
;;;1876   bat[0]._u_old[bat_u_old_cnt]=bat[0]._Ub;
001c54  49f5              LDR      r1,|L1.8236|
001c56  f9b40000          LDRSH    r0,[r4,#0]  ; bat_u_old_cnt
001c5a  eb010040          ADD      r0,r1,r0,LSL #1
001c5e  884a              LDRH     r2,[r1,#2]  ; bat
001c60  8402              STRH     r2,[r0,#0x20]
;;;1877   bat[1]._u_old[bat_u_old_cnt]=bat[1]._Ub;
001c62  f8b1104e          LDRH     r1,[r1,#0x4e]  ; bat
001c66  f8a0106c          STRH     r1,[r0,#0x6c]
;;;1878   }
001c6a  bd10              POP      {r4,pc}
;;;1879   
                          ENDP

                  unet_drv PROC
;;;1880   //-----------------------------------------------
;;;1881   void unet_drv(void)
001c6c  b570              PUSH     {r4-r6,lr}
;;;1882   {
;;;1883   if(net_U<UMN)
001c6e  4df0              LDR      r5,|L1.8240|
001c70  48f0              LDR      r0,|L1.8244|
;;;1884   	{
;;;1885   	if((unet_drv_cnt<10)&&(main_1Hz_cnt>15))
001c72  4af1              LDR      r2,|L1.8248|
001c74  f9b51000          LDRSH    r1,[r5,#0]            ;1883  ; net_U
001c78  f9b03000          LDRSH    r3,[r0,#0]            ;1883  ; UMN
001c7c  f9920000          LDRSB    r0,[r2,#0]
001c80  4299              CMP      r1,r3                 ;1883
001c82  da1f              BGE      |L1.7364|
;;;1886   		{
;;;1887   		unet_drv_cnt++;
;;;1888   		if(unet_drv_cnt>=10)
;;;1889   			{
;;;1890   			net_Ustore=net_U;
001c84  4ced              LDR      r4,|L1.8252|
001c86  280a              CMP      r0,#0xa               ;1885
001c88  da0f              BGE      |L1.7338|
001c8a  4bed              LDR      r3,|L1.8256|
001c8c  f9b33000          LDRSH    r3,[r3,#0]            ;1885  ; main_1Hz_cnt
001c90  2b0f              CMP      r3,#0xf               ;1885
001c92  dd0a              BLE      |L1.7338|
001c94  f1000001          ADD      r0,r0,#1              ;1887
001c98  b240              SXTB     r0,r0                 ;1887
001c9a  7010              STRB     r0,[r2,#0]            ;1887
001c9c  280a              CMP      r0,#0xa               ;1888
001c9e  db09              BLT      |L1.7348|
001ca0  8021              STRH     r1,[r4,#0]
;;;1891   		 	avar_unet_hndl(1);
001ca2  2001              MOVS     r0,#1
001ca4  f7fffffe          BL       avar_unet_hndl
001ca8  e004              B        |L1.7348|
                  |L1.7338|
;;;1892   			
;;;1893   			}
;;;1894   		}
;;;1895   	else if(unet_drv_cnt>=10)unet_drv_cnt=10;
001caa  280a              CMP      r0,#0xa
001cac  db02              BLT      |L1.7348|
001cae  f04f000a          MOV      r0,#0xa
001cb2  7010              STRB     r0,[r2,#0]
                  |L1.7348|
;;;1896   
;;;1897   	if(net_U<net_Ustore) net_Ustore=net_U;	
001cb4  f9b50000          LDRSH    r0,[r5,#0]  ; net_U
001cb8  f9b41000          LDRSH    r1,[r4,#0]  ; net_Ustore
001cbc  4288              CMP      r0,r1
001cbe  da00              BGE      |L1.7362|
001cc0  8020              STRH     r0,[r4,#0]
                  |L1.7362|
;;;1898   	}
;;;1899   
;;;1900   else if(net_U>UMN)
;;;1901   	{                 
;;;1902   	if(unet_drv_cnt)
;;;1903   		{
;;;1904   		unet_drv_cnt--;
;;;1905   		if(unet_drv_cnt<=0)
;;;1906   			{
;;;1907   			avar_unet_hndl(0);
;;;1908   			}
;;;1909   		}
;;;1910   	else if(unet_drv_cnt<0)unet_drv_cnt=0;
;;;1911   	
;;;1912   	}
;;;1913   
;;;1914   }
001cc2  bd70              POP      {r4-r6,pc}
                  |L1.7364|
001cc4  ddfd              BLE      |L1.7362|
001cc6  2800              CMP      r0,#0                 ;1902
001cc8  d0fb              BEQ      |L1.7362|
001cca  f1a00001          SUB      r0,r0,#1              ;1904
001cce  b240              SXTB     r0,r0                 ;1904
001cd0  7010              STRB     r0,[r2,#0]            ;1904
001cd2  2800              CMP      r0,#0                 ;1905
001cd4  dcf5              BGT      |L1.7362|
001cd6  e8bd4070          POP      {r4-r6,lr}            ;1907
001cda  2000              MOVS     r0,#0                 ;1907
001cdc  f7ffbffe          B.W      avar_unet_hndl
;;;1915   
                          ENDP

                  matemat PROC
;;;1916   //-----------------------------------------------
;;;1917   void matemat(void)
001ce0  e92d4ff0          PUSH     {r4-r11,lr}
;;;1918   {
001ce4  b087              SUB      sp,sp,#0x1c
;;;1919   //signed short temp_SS;
;;;1920   signed long temp_SL/*,temp_SL_*/;
;;;1921   char /*temp,*/i;
;;;1922   //signed short temp_SS;
;;;1923   
;;;1924   #ifdef UKU_MGTS
;;;1925   //напряжение сети
;;;1926   temp_SL=(signed long)net_buff_;
;;;1927   temp_SL*=Kunet;
;;;1928   temp_SL/=110000L;
;;;1929   net_U=(signed short)temp_SL;
;;;1930   #endif
;;;1931   
;;;1932   #ifdef UKU_RSTKM
;;;1933   //напряжение сети
;;;1934   temp_SL=(signed long)net_buff_;
;;;1935   temp_SL*=Kunet;
;;;1936   temp_SL/=110000L;
;;;1937   net_U=(signed short)temp_SL;
;;;1938   #endif
;;;1939   
;;;1940   #ifdef UKU_3U
;;;1941   //напряжение сети
;;;1942   temp_SL=(signed long)net_buff_;
;;;1943   temp_SL*=Kunet;
;;;1944   temp_SL/=36000L;
;;;1945   net_U=(signed short)temp_SL;
;;;1946   #endif
;;;1947   
;;;1948   #ifdef UKU_6U
;;;1949   //напряжение сети
;;;1950   
;;;1951   if((AUSW_MAIN%10)||(AUSW_MAIN==2400)||(AUSW_MAIN==4800)||(AUSW_MAIN==6000))
;;;1952   	{
;;;1953   
;;;1954   	if(bps[11]._device==dNET_METR)
;;;1955   		{
;;;1956   		net_metr_buff_[0]=((signed short)bps[11]._buff[0])+(((signed short)bps[11]._buff[1])<<8);
;;;1957   		net_metr_buff_[1]=((signed short)bps[11]._buff[2])+(((signed short)bps[11]._buff[3])<<8);
;;;1958   		net_metr_buff_[2]=((signed short)bps[11]._buff[4])+(((signed short)bps[11]._buff[5])<<8);
;;;1959   
;;;1960   		temp_SL=(signed long)net_metr_buff_[0];
;;;1961   		temp_SL*=KunetA;
;;;1962   		temp_SL/=6000L;
;;;1963   		net_Ua=(signed short)temp_SL;
;;;1964   	
;;;1965   		temp_SL=(signed long)net_metr_buff_[1];
;;;1966   		temp_SL*=KunetB;
;;;1967   		temp_SL/=6000L;
;;;1968   		net_Ub=(signed short)temp_SL;
;;;1969   	
;;;1970   		temp_SL=(signed long)net_metr_buff_[2];
;;;1971   		temp_SL*=KunetC;
;;;1972   		temp_SL/=6000L;
;;;1973   		net_Uc=(signed short)temp_SL;
;;;1974   		}
;;;1975   	else
;;;1976   		{
;;;1977   		temp_SL=(signed long)net_buff_;
;;;1978   		temp_SL*=KunetA;
;;;1979   		temp_SL/=110000L;
;;;1980   		net_Ua=(signed short)temp_SL;
;;;1981   	
;;;1982   		temp_SL=(signed long)adc_buff_[3];
;;;1983   		temp_SL*=KunetB;
;;;1984   		temp_SL/=6000L;
;;;1985   		net_Ub=(signed short)temp_SL;
;;;1986   	
;;;1987   		temp_SL=(signed long)adc_buff_[10];
;;;1988   		temp_SL*=KunetC;
;;;1989   		temp_SL/=6000L;
;;;1990   		net_Uc=(signed short)temp_SL;
;;;1991   		}
;;;1992   
;;;1993   	net_U=net_Ua;
;;;1994   	if(net_Ub<net_U)net_U=net_Ub;
;;;1995   	if(net_Uc<net_U)net_U=net_Uc;
;;;1996   	}
;;;1997   else 
;;;1998   	{
;;;1999   	temp_SL=(signed long)net_buff_;
;;;2000   	temp_SL*=Kunet;
;;;2001   	temp_SL/=110000L;
;;;2002   	net_U=(signed short)temp_SL;
;;;2003   	}
;;;2004   
;;;2005   
;;;2006   
;;;2007   
;;;2008   #endif
;;;2009   
;;;2010   #ifdef UKU_GLONASS
;;;2011   //напряжение сети
;;;2012   temp_SL=(signed long)net_buff_;
;;;2013   temp_SL*=Kunet;
;;;2014   temp_SL/=110000L;
;;;2015   net_U=(signed short)temp_SL;
;;;2016   #endif
;;;2017   
;;;2018   #ifdef UKU_KONTUR
;;;2019   //напряжение сети
;;;2020   temp_SL=(signed long)net_buff_;
;;;2021   temp_SL*=Kunet;
;;;2022   temp_SL/=110000L;
;;;2023   net_U=(signed short)temp_SL;
;;;2024   #endif
;;;2025   
;;;2026   #ifdef IPS_SGEP_GAZPROM
;;;2027   //напряжение сети
;;;2028   temp_SL=(signed long)net_buff_;
;;;2029   temp_SL*=Kunet;
;;;2030   temp_SL/=110000L;
;;;2031   net_U=(signed short)temp_SL;
;;;2032   #endif
;;;2033   
;;;2034   #ifdef UKU_220_V2
;;;2035   //напряжение сети
;;;2036   
;;;2037   if(AUSW_MAIN==22033)
;;;2038   	{
;;;2039   	temp_SL=(signed long)net_buff_;
;;;2040   	temp_SL*=KunetA;
;;;2041   	temp_SL/=6000L;
;;;2042   	net_Ua=(signed short)temp_SL;
;;;2043   
;;;2044   	temp_SL=(signed long)adc_buff_[3];
;;;2045   	temp_SL*=KunetB;
;;;2046   	temp_SL/=6000L;
;;;2047   	net_Ub=(signed short)temp_SL;
;;;2048   
;;;2049   	temp_SL=(signed long)adc_buff_[10];
;;;2050   	temp_SL*=KunetC;
;;;2051   	temp_SL/=6000L;
;;;2052   	net_Uc=(signed short)temp_SL;
;;;2053   
;;;2054   	net_U=net_Ua;
;;;2055   	if(net_Ub<net_U)net_U=net_Ub;
;;;2056   	if(net_Uc<net_U)net_U=net_Uc;
;;;2057   	}
;;;2058   else
;;;2059   	{
;;;2060   	temp_SL=(signed long)net_buff_;
;;;2061   	temp_SL*=Kunet;
;;;2062   	temp_SL/=5000L;
;;;2063   	net_U=(signed short)temp_SL;
;;;2064   	}
;;;2065   #endif
;;;2066   
;;;2067   
;;;2068   #ifdef UKU_220
;;;2069   //напряжение сети
;;;2070   
;;;2071   if(AUSW_MAIN==22035)
;;;2072   	{
;;;2073   	temp_SL=(signed long)net_buff_;
;;;2074   	temp_SL*=KunetA;
;;;2075   	temp_SL/=6000L;
;;;2076   	net_Ua=(signed short)temp_SL;
;;;2077   
;;;2078   	temp_SL=(signed long)adc_buff_[3];
;;;2079   	temp_SL*=KunetB;
;;;2080   	temp_SL/=6000L;
;;;2081   	net_Ub=(signed short)temp_SL;
;;;2082   
;;;2083   	temp_SL=(signed long)adc_buff_[10];
;;;2084   	temp_SL*=KunetC;
;;;2085   	temp_SL/=6000L;
;;;2086   	net_Uc=(signed short)temp_SL;
;;;2087   
;;;2088   	net_U=net_Ua;
;;;2089   	if(net_Ub<net_U)net_U=net_Ub;
;;;2090   	if(net_Uc<net_U)net_U=net_Uc;
;;;2091   	}
;;;2092   else
;;;2093   	{
;;;2094   	temp_SL=(signed long)net_buff_;
;;;2095   	temp_SL*=Kunet;
;;;2096   	#ifdef _ACDC_
;;;2097   	temp_SL/=500L;
;;;2098   	#else
;;;2099   	temp_SL/=5000L;
;;;2100   	#endif
;;;2101   	net_U=(signed short)temp_SL;
;;;2102   	
;;;2103   	}
;;;2104   #endif
;;;2105   
;;;2106   #ifdef UKU_220_IPS_TERMOKOMPENSAT
;;;2107   //напряжение сети
;;;2108   
;;;2109   
;;;2110   	if(bps[11]._device==dNET_METR)
001ce6  48d7              LDR      r0,|L1.8260|
;;;2111   		{
;;;2112   		net_metr_buff_[0]=((signed short)bps[11]._buff[0])+(((signed short)bps[11]._buff[1])<<8);
;;;2113   		net_metr_buff_[1]=((signed short)bps[11]._buff[2])+(((signed short)bps[11]._buff[3])<<8);
;;;2114   		net_metr_buff_[2]=((signed short)bps[11]._buff[4])+(((signed short)bps[11]._buff[5])<<8);
;;;2115   
;;;2116   		temp_SL=(signed long)net_metr_buff_[2];
;;;2117   		temp_SL*=KunetA;
001ce8  4bd7              LDR      r3,|L1.8264|
;;;2118   		temp_SL/=6000L;
;;;2119   		net_Ua=(signed short)temp_SL;
;;;2120   	
;;;2121   		temp_SL=(signed long)net_metr_buff_[1];
;;;2122   		temp_SL*=KunetB;
001cea  49d9              LDR      r1,|L1.8272|
001cec  f89003f4          LDRB     r0,[r0,#0x3f4]        ;2110  ; bps
;;;2123   		temp_SL/=6000L;
;;;2124   		net_Ub=(signed short)temp_SL;
;;;2125   	
;;;2126   		temp_SL=(signed long)net_metr_buff_[0];
;;;2127   		temp_SL*=KunetC;
001cf0  4ad8              LDR      r2,|L1.8276|
001cf2  9006              STR      r0,[sp,#0x18]         ;2117
001cf4  f8dfc354          LDR      r12,|L1.8268|
001cf8  f9b39000          LDRSH    r9,[r3,#0]            ;2117
001cfc  f9b1b000          LDRSH    r11,[r1,#0]           ;2122
001d00  f9b2a000          LDRSH    r10,[r2,#0]
001d04  4fd4              LDR      r7,|L1.8280|
;;;2128   		temp_SL/=6000L;
;;;2129   		net_Uc=(signed short)temp_SL;
001d06  4cd5              LDR      r4,|L1.8284|
;;;2130   
;;;2131   		net_F3=((signed short)bps[11]._buff[6])+(((signed short)bps[11]._buff[7])<<8);
;;;2132   
;;;2133   		net_U=net_Ua;
;;;2134   		if(net_Ub<net_U)net_U=net_Ub;
;;;2135   		if(net_Uc<net_U)net_U=net_Uc;
;;;2136   		}
;;;2137   	  else if(AUSW_MAIN==22033)
;;;2138   	{
;;;2139   	temp_SL=(signed long)net_buff_;
001d08  4ed5              LDR      r6,|L1.8288|
001d0a  f2456511          MOV      r5,#0x5611            ;2137
001d0e  2807              CMP      r0,#7                 ;2110
001d10  d036              BEQ      |L1.7552|
001d12  4631              MOV      r1,r6
001d14  f8df8338          LDR      r8,|L1.8272|
001d18  8e8a              LDRH     r2,[r1,#0x34]
001d1a  4619              MOV      r1,r3                 ;2117
;;;2140   	temp_SL*=KunetA;
;;;2141   	temp_SL/=4000L;
;;;2142   	net_Ua=(signed short)temp_SL;
;;;2143   
;;;2144   	temp_SL=(signed long)adc_buff_[3];
001d1c  4bd2              LDR      r3,|L1.8296|
001d1e  f9b11000          LDRSH    r1,[r1,#0]            ;2117
001d22  f9b88000          LDRSH    r8,[r8,#0]            ;2122
001d26  434a              MULS     r2,r1,r2              ;2140
001d28  f9b31006          LDRSH    r1,[r3,#6]
001d2c  f8df9324          LDR      r9,|L1.8276|
;;;2145   	temp_SL*=KunetB;
001d30  fb01f108          MUL      r1,r1,r8
001d34  f2417870          MOV      r8,#0x1770            ;2118
;;;2146   	temp_SL/=6000L;
;;;2147   	net_Ub=(signed short)temp_SL;
;;;2148   
;;;2149   	temp_SL=(signed long)adc_buff_[10];
001d38  f9b33014          LDRSH    r3,[r3,#0x14]
001d3c  f9b99000          LDRSH    r9,[r9,#0]            ;2127
001d40  fb91f1f8          SDIV     r1,r1,r8              ;2146
;;;2150   	temp_SL*=KunetC;
001d44  fb03f309          MUL      r3,r3,r9
;;;2151   	temp_SL/=6000L;
001d48  fb93f3f8          SDIV     r3,r3,r8
001d4c  48c5              LDR      r0,|L1.8292|
001d4e  b209              SXTH     r1,r1                 ;2147
;;;2152   	net_Uc=(signed short)temp_SL;
001d50  b21b              SXTH     r3,r3
001d52  8800              LDRH     r0,[r0,#0]            ;2137  ; AUSW_MAIN
001d54  42a8              CMP      r0,r5                 ;2137
001d56  d154              BNE      |L1.7682|
001d58  f44f607a          MOV      r0,#0xfa0             ;2141
001d5c  fb92f0f0          SDIV     r0,r2,r0              ;2141
001d60  b200              SXTH     r0,r0                 ;2142
001d62  f8ac0000          STRH     r0,[r12,#0]           ;2142
001d66  8039              STRH     r1,[r7,#0]            ;2147
001d68  8023              STRH     r3,[r4,#0]
;;;2153   
;;;2154   	net_U=net_Ua;
001d6a  4ab1              LDR      r2,|L1.8240|
001d6c  8010              STRH     r0,[r2,#0]
;;;2155   	if(net_Ub<net_U)net_U=net_Ub;
001d6e  4281              CMP      r1,r0
001d70  da00              BGE      |L1.7540|
001d72  8011              STRH     r1,[r2,#0]
                  |L1.7540|
;;;2156   	if(net_Uc<net_U)net_U=net_Uc;
001d74  f9b20000          LDRSH    r0,[r2,#0]  ; net_U
001d78  4283              CMP      r3,r0
001d7a  da00              BGE      |L1.7550|
001d7c  8013              STRH     r3,[r2,#0]
                  |L1.7550|
001d7e  e07e              B        |L1.7806|
                  |L1.7552|
001d80  48ba              LDR      r0,|L1.8300|
001d82  4bb7              LDR      r3,|L1.8288|
001d84  7801              LDRB     r1,[r0,#0]            ;2112  ; bps
001d86  7842              LDRB     r2,[r0,#1]            ;2112  ; bps
001d88  f10303e4          ADD      r3,r3,#0xe4           ;2112
001d8c  eb012102          ADD      r1,r1,r2,LSL #8       ;2112
001d90  fa1ff881          UXTH     r8,r1                 ;2112
001d94  f8a38000          STRH     r8,[r3,#0]            ;2112
001d98  7881              LDRB     r1,[r0,#2]            ;2113  ; bps
001d9a  78c2              LDRB     r2,[r0,#3]            ;2113  ; bps
001d9c  eb012102          ADD      r1,r1,r2,LSL #8       ;2113
001da0  b289              UXTH     r1,r1                 ;2113
001da2  8059              STRH     r1,[r3,#2]            ;2113
001da4  7902              LDRB     r2,[r0,#4]            ;2114  ; bps
001da6  f890e005          LDRB     lr,[r0,#5]            ;2114  ; bps
001daa  eb02220e          ADD      r2,r2,lr,LSL #8       ;2114
001dae  b292              UXTH     r2,r2                 ;2114
001db0  809a              STRH     r2,[r3,#4]            ;2114
001db2  fb02f209          MUL      r2,r2,r9              ;2117
001db6  f2417370          MOV      r3,#0x1770            ;2118
001dba  fb92f2f3          SDIV     r2,r2,r3              ;2118
001dbe  fa0ff982          SXTH     r9,r2                 ;2119
001dc2  f8ac9000          STRH     r9,[r12,#0]           ;2119
001dc6  fb01f10b          MUL      r1,r1,r11             ;2122
001dca  fb91f1f3          SDIV     r1,r1,r3              ;2123
001dce  b209              SXTH     r1,r1                 ;2124
001dd0  8039              STRH     r1,[r7,#0]            ;2124
001dd2  fb08f80a          MUL      r8,r8,r10             ;2127
001dd6  fb98f2f3          SDIV     r2,r8,r3              ;2128
001dda  b212              SXTH     r2,r2                 ;2129
001ddc  8022              STRH     r2,[r4,#0]            ;2129
001dde  7983              LDRB     r3,[r0,#6]            ;2131  ; bps
001de0  79c0              LDRB     r0,[r0,#7]            ;2131  ; bps
001de2  eb032000          ADD      r0,r3,r0,LSL #8       ;2131
001de6  4ba2              LDR      r3,|L1.8304|
001de8  8018              STRH     r0,[r3,#0]            ;2131
001dea  4891              LDR      r0,|L1.8240|
001dec  f8a09000          STRH     r9,[r0,#0]            ;2133
001df0  4549              CMP      r1,r9                 ;2134
001df2  da00              BGE      |L1.7670|
001df4  8001              STRH     r1,[r0,#0]            ;2134
                  |L1.7670|
001df6  f9b01000          LDRSH    r1,[r0,#0]            ;2135  ; net_U
001dfa  428a              CMP      r2,r1                 ;2135
001dfc  da3f              BGE      |L1.7806|
001dfe  8002              STRH     r2,[r0,#0]            ;2135
001e00  e03d              B        |L1.7806|
                  |L1.7682|
;;;2157   	}
;;;2158   else if((AUSW_MAIN==22063)||(AUSW_MAIN==22023)||(AUSW_MAIN==22043)||(AUSW_MAIN==22044)||(AUSW_MAIN==22018))
001e02  f5a048ac          SUB      r8,r0,#0x5600
001e06  f1b8082f          SUBS     r8,r8,#0x2f
001e0a  d00b              BEQ      |L1.7716|
001e0c  f1180828          ADDS     r8,r8,#0x28
001e10  d008              BEQ      |L1.7716|
001e12  f1b80814          SUBS     r8,r8,#0x14
001e16  d005              BEQ      |L1.7716|
001e18  f1b80801          SUBS     r8,r8,#1
001e1c  d002              BEQ      |L1.7716|
001e1e  f118081a          ADDS     r8,r8,#0x1a
001e22  d113              BNE      |L1.7756|
                  |L1.7716|
;;;2159   	{
;;;2160   	temp_SL=(signed long)net_buff_;
;;;2161   	temp_SL*=KunetA;
;;;2162   	temp_SL/=40000L;
001e24  f6494040          MOV      r0,#0x9c40
001e28  fb92f0f0          SDIV     r0,r2,r0
;;;2163   	net_Ua=(signed short)temp_SL;
001e2c  b200              SXTH     r0,r0
001e2e  f8ac0000          STRH     r0,[r12,#0]
;;;2164   
;;;2165   	temp_SL=(signed long)adc_buff_[3];
;;;2166   	temp_SL*=KunetB;
;;;2167   	temp_SL/=6000L;
;;;2168   	net_Ub=(signed short)temp_SL;
001e32  8039              STRH     r1,[r7,#0]
;;;2169   
;;;2170   	temp_SL=(signed long)adc_buff_[10];
;;;2171   	temp_SL*=KunetC;
;;;2172   	temp_SL/=6000L;
;;;2173   	net_Uc=(signed short)temp_SL;
001e34  8023              STRH     r3,[r4,#0]
;;;2174   
;;;2175   	net_U=net_Ua;
001e36  4a7e              LDR      r2,|L1.8240|
001e38  8010              STRH     r0,[r2,#0]
;;;2176   	if(net_Ub<net_U)net_U=net_Ub;
001e3a  4281              CMP      r1,r0
001e3c  da00              BGE      |L1.7744|
001e3e  8011              STRH     r1,[r2,#0]
                  |L1.7744|
;;;2177   	if(net_Uc<net_U)net_U=net_Uc;
001e40  f9b20000          LDRSH    r0,[r2,#0]  ; net_U
001e44  4283              CMP      r3,r0
001e46  da1a              BGE      |L1.7806|
001e48  8013              STRH     r3,[r2,#0]
001e4a  e018              B        |L1.7806|
                  |L1.7756|
;;;2178   	}
;;;2179   else	if((AUSW_MAIN==22010)||(AUSW_MAIN==22011) )
;;;2180   	{
;;;2181   	temp_SL=(signed long)net_buff_;
;;;2182   	temp_SL*=Kunet;
001e4c  4989              LDR      r1,|L1.8308|
001e4e  f5a043aa          SUB      r3,r0,#0x5500         ;2179
001e52  f9b12000          LDRSH    r2,[r1,#0]
001e56  4982              LDR      r1,|L1.8288|
001e58  8e89              LDRH     r1,[r1,#0x34]         ;2139
001e5a  4351              MULS     r1,r2,r1
001e5c  3bfa              SUBS     r3,r3,#0xfa           ;2179
001e5e  d001              BEQ      |L1.7780|
001e60  1e5a              SUBS     r2,r3,#1              ;2179
001e62  d106              BNE      |L1.7794|
                  |L1.7780|
;;;2183   	temp_SL/=35000L;
001e64  f64800b8          MOV      r0,#0x88b8
001e68  fb91f0f0          SDIV     r0,r1,r0
;;;2184   	net_U=(signed short)temp_SL;
001e6c  4970              LDR      r1,|L1.8240|
001e6e  8008              STRH     r0,[r1,#0]
001e70  e005              B        |L1.7806|
                  |L1.7794|
;;;2185   	
;;;2186   	}
;;;2187   else
;;;2188   	{
;;;2189   	temp_SL=(signed long)net_buff_;
;;;2190   	temp_SL*=Kunet;
;;;2191   	#ifdef _ACDC_
;;;2192   	temp_SL/=500L;
001e72  f44f70fa          MOV      r0,#0x1f4
001e76  fb91f0f0          SDIV     r0,r1,r0
;;;2193   	#else
;;;2194   	temp_SL/=5000L;
;;;2195   	#endif
;;;2196   	net_U=(signed short)temp_SL;
001e7a  496d              LDR      r1,|L1.8240|
001e7c  8008              STRH     r0,[r1,#0]
                  |L1.7806|
;;;2197   	
;;;2198   	}
;;;2199   if(bps[11]._device!=dNET_METR) net_F3=net_F;
001e7e  9806              LDR      r0,[sp,#0x18]
001e80  2807              CMP      r0,#7
001e82  d003              BEQ      |L1.7820|
001e84  487c              LDR      r0,|L1.8312|
001e86  8801              LDRH     r1,[r0,#0]  ; net_F
001e88  4879              LDR      r0,|L1.8304|
001e8a  8001              STRH     r1,[r0,#0]
                  |L1.7820|
;;;2200   #endif
;;;2201   
;;;2202   #ifdef UKU_TELECORE2015
;;;2203   //напряжение сети
;;;2204   temp_SL=(signed long)net_buff_;
;;;2205   temp_SL*=Kunet;
;;;2206   temp_SL/=110000L;
;;;2207   net_U=(signed short)temp_SL;
;;;2208   #endif
;;;2209   
;;;2210   #ifdef UKU_TELECORE2017
;;;2211   //напряжение сети
;;;2212   temp_SL=(signed long)net_buff_;
;;;2213   temp_SL*=Kunet;
;;;2214   temp_SL/=110000L;
;;;2215   net_U=(signed short)temp_SL;
;;;2216   #endif
;;;2217   
;;;2218   //Напряжения батарей
;;;2219   temp_SL=(signed long)adc_buff_[0];
001e8c  4f76              LDR      r7,|L1.8296|
001e8e  f9b72000          LDRSH    r2,[r7,#0]  ; adc_buff_
;;;2220   temp_SL*=Kubat[0];
001e92  497a              LDR      r1,|L1.8316|
001e94  f9b10000          LDRSH    r0,[r1,#0]  ; Kubat
001e98  4350              MULS     r0,r2,r0
;;;2221   temp_SL/=2000L;
001e9a  f44f68fa          MOV      r8,#0x7d0
001e9e  fb90f0f8          SDIV     r0,r0,r8
;;;2222   bat[0]._Ub=(signed short)temp_SL;
001ea2  4c62              LDR      r4,|L1.8236|
001ea4  8060              STRH     r0,[r4,#2]
;;;2223   
;;;2224   #ifdef UKU_220
;;;2225   //Напряжения батарей
;;;2226   temp_SL=(signed long)adc_buff_[0];
;;;2227   temp_SL*=Kubat[0];
;;;2228   temp_SL/=400L;
;;;2229   bat[0]._Ub=(signed short)temp_SL;
;;;2230   #endif
;;;2231   
;;;2232   #ifdef UKU_220_V2
;;;2233   //Напряжения батарей
;;;2234   temp_SL=(signed long)adc_buff_[0];
;;;2235   temp_SL*=Kubat[0];
;;;2236   temp_SL/=400L;
;;;2237   bat[0]._Ub=(signed short)temp_SL;
;;;2238   #endif
;;;2239   
;;;2240   temp_SL=(signed long)adc_buff_[4];
001ea6  f9b73008          LDRSH    r3,[r7,#8]  ; adc_buff_
;;;2241   temp_SL*=Kubatm[0];
001eaa  4a75              LDR      r2,|L1.8320|
001eac  f9b20000          LDRSH    r0,[r2,#0]  ; Kubatm
001eb0  fb00f003          MUL      r0,r0,r3
;;;2242   temp_SL/=700L;
001eb4  f44f732f          MOV      r3,#0x2bc
001eb8  fb90f0f3          SDIV     r0,r0,r3
;;;2243   bat[0]._Ubm=(signed short)temp_SL;
001ebc  80a0              STRH     r0,[r4,#4]
;;;2244   
;;;2245   #ifdef UKU_KONTUR
;;;2246   temp_SL=(signed long)adc_buff_[4];
;;;2247   temp_SL*=Kubatm[0];
;;;2248   temp_SL/=2000L;
;;;2249   bat[0]._Ubm=(signed short)temp_SL;
;;;2250   #endif
;;;2251   
;;;2252   temp_SL=(signed long)adc_buff_[12];
001ebe  f9b70018          LDRSH    r0,[r7,#0x18]  ; adc_buff_
;;;2253   temp_SL*=Kubat[1];
001ec2  f9b11002          LDRSH    r1,[r1,#2]  ; Kubat
001ec6  fb01f100          MUL      r1,r1,r0
;;;2254   temp_SL/=2000L;
001eca  fb91f0f8          SDIV     r0,r1,r8
;;;2255   bat[1]._Ub=(signed short)temp_SL;
001ece  f8a4004e          STRH     r0,[r4,#0x4e]
;;;2256   
;;;2257   #ifdef UKU_220
;;;2258   temp_SL=(signed long)adc_buff_[12];
;;;2259   temp_SL*=Kubat[1];
;;;2260   temp_SL/=400L;
;;;2261   bat[1]._Ub=(signed short)temp_SL;
;;;2262   #endif
;;;2263   
;;;2264   #ifdef UKU_220_V2
;;;2265   temp_SL=(signed long)adc_buff_[12];
;;;2266   temp_SL*=Kubat[1];
;;;2267   temp_SL/=400L;
;;;2268   bat[1]._Ub=(signed short)temp_SL;
;;;2269   #endif
;;;2270   
;;;2271   temp_SL=(signed long)adc_buff_[1];
001ed2  f9b71002          LDRSH    r1,[r7,#2]  ; adc_buff_
;;;2272   temp_SL*=Kubatm[1];
001ed6  f9b20002          LDRSH    r0,[r2,#2]  ; Kubatm
001eda  fb00f001          MUL      r0,r0,r1
;;;2273   temp_SL/=700L;
001ede  fb90f0f3          SDIV     r0,r0,r3
;;;2274   bat[1]._Ubm=(signed short)temp_SL;
001ee2  f8a40050          STRH     r0,[r4,#0x50]
;;;2275   #ifdef UKU_KONTUR
;;;2276   temp_SL=(signed long)adc_buff_[1];
;;;2277   temp_SL*=Kubatm[1];
;;;2278   temp_SL/=2000L;
;;;2279   bat[1]._Ubm=(signed short)temp_SL;
;;;2280   #endif
;;;2281   
;;;2282   #ifdef UKU_TELECORE2015
;;;2283   temp_SL=(signed long)adc_buff_[2];
;;;2284   temp_SL*=Kubat[0];
;;;2285   temp_SL/=2000L;
;;;2286   bat[0]._Ub=(signed short)temp_SL;
;;;2287   #endif
;;;2288   
;;;2289   /*
;;;2290   //Токи батарей
;;;2291   if(!mess_find_unvol(MESS2MATEMAT))
;;;2292   	{
;;;2293   	temp_SL=(signed long)ad7705_buff_[0];
;;;2294   	temp_SL-=(signed long)Kibat0[0];
;;;2295   	temp_SL*=(signed long)Kibat1[0];
;;;2296   	if((AUSW_MAIN==24120)||(AUSW_MAIN==24210))temp_SL/=300L;
;;;2297   	else temp_SL/=1000L;
;;;2298   	bat[0]._Ib=(signed short)temp_SL;
;;;2299   
;;;2300   	temp_SL=(signed long)ad7705_buff_[1];
;;;2301   	temp_SL-=(signed long)Kibat0[1];
;;;2302   	temp_SL*=(signed long)Kibat1[1];
;;;2303   	if((AUSW_MAIN==24120)||(AUSW_MAIN==24210))temp_SL/=300L;
;;;2304   	else temp_SL/=1000L;
;;;2305   	bat[1]._Ib=(signed short)temp_SL;
;;;2306   	}
;;;2307   */
;;;2308   
;;;2309   
;;;2310   //Токи батарей
;;;2311   if(!mess_find_unvol(MESS2MATEMAT))
001ee6  f04f00dc          MOV      r0,#0xdc
001eea  f7fffffe          BL       mess_find_unvol
;;;2312   	{
;;;2313   	temp_SL=(signed long)ad7705_buff_[0];
;;;2314   	temp_SL-=(signed long)Kibat0[0];
;;;2315   	temp_SL*=(signed long)Kibat1[0];
;;;2316   	if((AUSW_MAIN==24120)||(AUSW_MAIN==24210))temp_SL/=300L;
;;;2317   	else if((AUSW_MAIN==22010)||(AUSW_MAIN==22035)||(AUSW_MAIN==22033))temp_SL/=2000L;
001eee  f2456c13          MOV      r12,#0x5613
001ef2  bbe8              CBNZ     r0,|L1.8048|
001ef4  f8dfa18c          LDR      r10,|L1.8324|
001ef8  f8ba0000          LDRH     r0,[r10,#0]           ;2313  ; ad7705_buff_
001efc  f8dfb188          LDR      r11,|L1.8328|
001f00  f8bb1000          LDRH     r1,[r11,#0]           ;2314  ; Kibat0
001f04  eba00001          SUB      r0,r0,r1              ;2314
001f08  4a60              LDR      r2,|L1.8332|
001f0a  f9b21000          LDRSH    r1,[r2,#0]            ;2315  ; Kibat1
001f0e  fb01f100          MUL      r1,r1,r0              ;2315
001f12  4854              LDR      r0,|L1.8292|
001f14  f6456338          MOV      r3,#0x5e38            ;2316
001f18  f6456992          MOV      r9,#0x5e92            ;2316
001f1c  8800              LDRH     r0,[r0,#0]            ;2316  ; AUSW_MAIN
001f1e  4298              CMP      r0,r3                 ;2316
001f20  d001              BEQ      |L1.7974|
001f22  4548              CMP      r0,r9                 ;2316
001f24  d104              BNE      |L1.7984|
                  |L1.7974|
001f26  f44f7e96          MOV      lr,#0x12c             ;2316
001f2a  fb91f1fe          SDIV     r1,r1,lr              ;2316
001f2e  e00f              B        |L1.8016|
                  |L1.7984|
001f30  f5a04ea8          SUB      lr,r0,#0x5400
001f34  f5be7efd          SUBS     lr,lr,#0x1fa
001f38  d003              BEQ      |L1.8002|
001f3a  4560              CMP      r0,r12
001f3c  d001              BEQ      |L1.8002|
001f3e  42a8              CMP      r0,r5
001f40  d102              BNE      |L1.8008|
                  |L1.8002|
001f42  fb91f1f8          SDIV     r1,r1,r8
001f46  e003              B        |L1.8016|
                  |L1.8008|
;;;2318   	else temp_SL/=1000L;
001f48  f44f7e7a          MOV      lr,#0x3e8
001f4c  fb91f1fe          SDIV     r1,r1,lr
                  |L1.8016|
;;;2319   	#ifdef UKU_TELECORE2015
;;;2320   	temp_SL/=2L;
;;;2321   	//temp_SL=-temp_SL;
;;;2322   	#endif
;;;2323   	//#ifdef UKU_TELECORE2017
;;;2324   	//temp_SL/=-2L;
;;;2325   	//temp_SL=-temp_SL;
;;;2326   	//#endif
;;;2327   	bat[0]._Ib=(signed short)temp_SL;
001f50  8121              STRH     r1,[r4,#8]
;;;2328   
;;;2329   	temp_SL=(signed long)ad7705_buff_[1];
001f52  f8ba1002          LDRH     r1,[r10,#2]  ; ad7705_buff_
;;;2330   	temp_SL-=(signed long)Kibat0[1];
001f56  f8bba002          LDRH     r10,[r11,#2]  ; Kibat0
001f5a  eba10a0a          SUB      r10,r1,r10
;;;2331   	temp_SL*=(signed long)Kibat1[1];
001f5e  f9b21002          LDRSH    r1,[r2,#2]  ; Kibat1
001f62  fb01f10a          MUL      r1,r1,r10
;;;2332   	if((AUSW_MAIN==24120)||(AUSW_MAIN==24210))temp_SL/=300L;
001f66  4298              CMP      r0,r3
001f68  d001              BEQ      |L1.8046|
001f6a  4548              CMP      r0,r9
001f6c  d106              BNE      |L1.8060|
                  |L1.8046|
001f6e  e000              B        |L1.8050|
                  |L1.8048|
001f70  e015              B        |L1.8094|
                  |L1.8050|
001f72  f44f7096          MOV      r0,#0x12c
001f76  fb91f0f0          SDIV     r0,r1,r0
001f7a  e00e              B        |L1.8090|
                  |L1.8060|
;;;2333   	else if((AUSW_MAIN==22010)||(AUSW_MAIN==22035)||(AUSW_MAIN==22033))temp_SL/=2000L;
001f7c  f5a042aa          SUB      r2,r0,#0x5500
001f80  3afa              SUBS     r2,r2,#0xfa
001f82  d003              BEQ      |L1.8076|
001f84  4560              CMP      r0,r12
001f86  d001              BEQ      |L1.8076|
001f88  42a8              CMP      r0,r5
001f8a  d102              BNE      |L1.8082|
                  |L1.8076|
001f8c  fb91f0f8          SDIV     r0,r1,r8
001f90  e003              B        |L1.8090|
                  |L1.8082|
;;;2334   	else temp_SL/=1000L;
001f92  f44f707a          MOV      r0,#0x3e8
001f96  fb91f0f0          SDIV     r0,r1,r0
                  |L1.8090|
;;;2335   	bat[1]._Ib=(signed short)temp_SL;
001f9a  f8a40054          STRH     r0,[r4,#0x54]
                  |L1.8094|
;;;2336   	}
;;;2337   
;;;2338   
;;;2339   
;;;2340   
;;;2341   
;;;2342   //Температуры батарей
;;;2343   
;;;2344   #ifdef UKU_KONTUR
;;;2345   if((adc_buff_[6]>800)&&(adc_buff_[6]<3800))bat[0]._nd=0;
;;;2346   else bat[0]._nd=1;
;;;2347   temp_SL=(signed long)adc_buff_[6];
;;;2348   temp_SL*=Ktbat[0];
;;;2349   temp_SL/=20000L;
;;;2350   temp_SL-=273L;
;;;2351   bat[0]._Tb=(signed short)temp_SL;
;;;2352   #else
;;;2353   if((adc_buff_[6]>800)&&(adc_buff_[6]<3800))bat[0]._nd=0;
001f9e  f9b7000c          LDRSH    r0,[r7,#0xc]  ; adc_buff_
001fa2  f6403ab7          MOV      r10,#0xbb7
001fa6  4681              MOV      r9,r0
001fa8  f2a03021          SUB      r0,r0,#0x321
;;;2354   else bat[0]._nd=1;
001fac  2201              MOVS     r2,#1
001fae  2300              MOVS     r3,#0                 ;2353
001fb0  9005              STR      r0,[sp,#0x14]         ;2353
001fb2  4550              CMP      r0,r10                ;2353
001fb4  d201              BCS      |L1.8122|
001fb6  7323              STRB     r3,[r4,#0xc]          ;2353
001fb8  e000              B        |L1.8124|
                  |L1.8122|
001fba  7322              STRB     r2,[r4,#0xc]
                  |L1.8124|
;;;2355   temp_SL=(signed long)adc_buff_[6];
;;;2356   temp_SL*=Ktbat[0];
001fbc  4934              LDR      r1,|L1.8336|
001fbe  f9b10000          LDRSH    r0,[r1,#0]  ; Ktbat
001fc2  fb00f009          MUL      r0,r0,r9
;;;2357   temp_SL/=20000L;
001fc6  f6446e20          MOV      lr,#0x4e20
001fca  fb90f0fe          SDIV     r0,r0,lr
;;;2358   temp_SL-=273L;
001fce  f2a01011          SUB      r0,r0,#0x111
;;;2359   bat[0]._Tb=(signed short)temp_SL;
001fd2  8160              STRH     r0,[r4,#0xa]
;;;2360   #endif
;;;2361   
;;;2362   #ifdef UKU_KONTUR
;;;2363   if((adc_buff_[7]>800)&&(adc_buff_[7]<3800))bat[1]._nd=0;
;;;2364   else bat[1]._nd=1;
;;;2365   temp_SL=(signed long)adc_buff_[7];
;;;2366   temp_SL*=Ktbat[1];
;;;2367   temp_SL/=20000L;
;;;2368   temp_SL-=273L;
;;;2369   bat[1]._Tb=(signed short)temp_SL;
;;;2370   #else
;;;2371   if((adc_buff_[7]>800)&&(adc_buff_[7]<3800))bat[1]._nd=0;
001fd4  f9b7000e          LDRSH    r0,[r7,#0xe]  ; adc_buff_
001fd8  f2a03b21          SUB      r11,r0,#0x321
001fdc  45d3              CMP      r11,r10
001fde  d202              BCS      |L1.8166|
001fe0  f8843058          STRB     r3,[r4,#0x58]
001fe4  e001              B        |L1.8170|
                  |L1.8166|
;;;2372   else bat[1]._nd=1;
001fe6  f8842058          STRB     r2,[r4,#0x58]
                  |L1.8170|
;;;2373   temp_SL=(signed long)adc_buff_[7];
;;;2374   temp_SL*=Ktbat[1];
001fea  f9b11002          LDRSH    r1,[r1,#2]  ; Ktbat
001fee  4341              MULS     r1,r0,r1
;;;2375   temp_SL/=20000L;
001ff0  f6446020          MOV      r0,#0x4e20
001ff4  fb91f0f0          SDIV     r0,r1,r0
;;;2376   temp_SL-=273L;
001ff8  f2a01011          SUB      r0,r0,#0x111
;;;2377   bat[1]._Tb=(signed short)temp_SL;
001ffc  490b              LDR      r1,|L1.8236|
001ffe  f8a10056          STRH     r0,[r1,#0x56]
;;;2378   #endif
;;;2379   
;;;2380   #ifdef UKU_6U
;;;2381   
;;;2382   if(NUMMAKB==2)
;;;2383   	{
;;;2384   	if(makb[0]._cnt<5)
;;;2385   		{
;;;2386   		if(makb[0]._T_nd[0]==0)
;;;2387   			{
;;;2388   			bat[0]._Tb=makb[0]._T[0];
;;;2389   			bat[0]._nd=0;
;;;2390   			}
;;;2391   		}
;;;2392   
;;;2393   	if(makb[1]._cnt<5)
;;;2394   		{
;;;2395   		if(makb[1]._T_nd[0]==0)
;;;2396   			{
;;;2397   			bat[1]._Tb=makb[1]._T[0];
;;;2398   			bat[1]._nd=0;
;;;2399   			}
;;;2400   		}
;;;2401   
;;;2402   	}
;;;2403   else if(NUMMAKB==4)
;;;2404   	{
;;;2405   	signed short temp_t;
;;;2406   	temp_t=-20;
;;;2407   	if(makb[0]._cnt<5)
;;;2408   		{
;;;2409   		if(makb[0]._T_nd[0]==0)
;;;2410   			{
;;;2411   			temp_t=makb[0]._T[0];
;;;2412   			bat[0]._nd=0;
;;;2413   			}
;;;2414   		}
;;;2415   	if(makb[1]._cnt<5)
;;;2416   		{
;;;2417   		if(makb[1]._T_nd[0]==0)
;;;2418   			{
;;;2419   			if(temp_t<makb[1]._T[0])
;;;2420   				{
;;;2421   				bat[0]._nd=0;
;;;2422   				temp_t=makb[1]._T[0];
;;;2423   				}
;;;2424   			}
;;;2425   		}
;;;2426   	if(temp_t!=-20)bat[0]._Tb = temp_t;
;;;2427   
;;;2428    	temp_t=-20;
;;;2429   	if(makb[2]._cnt<5)
;;;2430   		{
;;;2431   		if(makb[2]._T_nd[0]==0)
;;;2432   			{
;;;2433   			temp_t=makb[2]._T[0];
;;;2434   			bat[1]._nd=0;
;;;2435   			}
;;;2436   		}
;;;2437   	if(makb[3]._cnt<5)
;;;2438   		{
;;;2439   		if(makb[3]._T_nd[0]==0)
;;;2440   			{
;;;2441   			if(temp_t<makb[3]._T[0])
;;;2442   				{
;;;2443   				bat[1]._nd=0;
;;;2444   				temp_t=makb[3]._T[0];
;;;2445   				}
;;;2446   			}
;;;2447   		}
;;;2448   	if(temp_t!=-20)bat[1]._Tb = temp_t;
;;;2449   	}
;;;2450   
;;;2451   #endif
;;;2452   
;;;2453   
;;;2454   //Напряжение нагрузки
;;;2455   temp_SL=(signed long)adc_buff_[2];
002002  f9b71004          LDRSH    r1,[r7,#4]  ; adc_buff_
;;;2456   temp_SL*=Kuload;
002006  4823              LDR      r0,|L1.8340|
002008  f9b00000          LDRSH    r0,[r0,#0]  ; Kuload
00200c  fb01f000          MUL      r0,r1,r0
;;;2457   temp_SL/=2000L;
002010  f44f64fa          MOV      r4,#0x7d0
002014  fb90f0f4          SDIV     r0,r0,r4
;;;2458   load_U=(signed short)temp_SL;
002018  4c1f              LDR      r4,|L1.8344|
00201a  8020              STRH     r0,[r4,#0]
;;;2459   
;;;2460   #ifdef UKU_220 
;;;2461   //Напряжение нагрузки
;;;2462   temp_SL=(signed long)adc_buff_[2];
;;;2463   temp_SL*=Kuload;
;;;2464   temp_SL/=350L;
;;;2465   load_U=(signed short)temp_SL;
;;;2466   #endif
;;;2467   
;;;2468   #ifdef UKU_220_V2 
;;;2469   //Напряжение нагрузки
;;;2470   temp_SL=(signed long)adc_buff_[2];
;;;2471   temp_SL*=Kuload;
;;;2472   temp_SL/=350L;
;;;2473   load_U=(signed short)temp_SL;
;;;2474   #endif
;;;2475   
;;;2476   #ifdef UKU_220_IPS_TERMOKOMPENSAT
;;;2477   //Напряжение шины
;;;2478   temp_SL=(signed long)adc_buff_[1];
00201c  f9b78002          LDRSH    r8,[r7,#2]  ; adc_buff_
;;;2479   temp_SL*=Kuout;
002020  481e              LDR      r0,|L1.8348|
002022  e03d              B        |L1.8352|
                  |L1.8228|
                          DCD      bat_ips
                  |L1.8232|
                          DCD      bat_u_old_cnt
                  |L1.8236|
                          DCD      bat
                  |L1.8240|
                          DCD      net_U
                  |L1.8244|
                          DCD      UMN
                  |L1.8248|
                          DCD      unet_drv_cnt
                  |L1.8252|
                          DCD      net_Ustore
                  |L1.8256|
                          DCD      main_1Hz_cnt
                  |L1.8260|
                          DCD      bps
                  |L1.8264|
                          DCD      KunetA
                  |L1.8268|
                          DCD      net_Ua
                  |L1.8272|
                          DCD      KunetB
                  |L1.8276|
                          DCD      KunetC
                  |L1.8280|
                          DCD      net_Ub
                  |L1.8284|
                          DCD      net_Uc
                  |L1.8288|
                          DCD      ||area_number.25||
                  |L1.8292|
                          DCD      AUSW_MAIN
                  |L1.8296|
                          DCD      ||.bss||+0x40c
                  |L1.8300|
                          DCD      bps+0x3fa
                  |L1.8304|
                          DCD      net_F3
                  |L1.8308|
                          DCD      Kunet
                  |L1.8312|
                          DCD      net_F
                  |L1.8316|
                          DCD      Kubat
                  |L1.8320|
                          DCD      Kubatm
                  |L1.8324|
                          DCD      ad7705_buff_
                  |L1.8328|
                          DCD      Kibat0
                  |L1.8332|
                          DCD      Kibat1
                  |L1.8336|
                          DCD      Ktbat
                  |L1.8340|
                          DCD      Kuload
                  |L1.8344|
                          DCD      load_U
                  |L1.8348|
                          DCD      Kuout
                  |L1.8352|
0020a0  f9b00000          LDRSH    r0,[r0,#0]  ; Kuout
0020a4  fb08f800          MUL      r8,r8,r0
;;;2480   if(AUSW_MAIN==22010)temp_SL/=400L;
0020a8  48fa              LDR      r0,|L1.9364|
0020aa  f24554fa          MOV      r4,#0x55fa
0020ae  f44f7bc8          MOV      r11,#0x190
0020b2  8800              LDRH     r0,[r0,#0]  ; AUSW_MAIN
0020b4  42a0              CMP      r0,r4
0020b6  d102              BNE      |L1.8382|
0020b8  fb98f8fb          SDIV     r8,r8,r11
0020bc  e003              B        |L1.8390|
                  |L1.8382|
;;;2481   else temp_SL/=500L;
0020be  f44f7efa          MOV      lr,#0x1f4
0020c2  fb98f8fe          SDIV     r8,r8,lr
                  |L1.8390|
;;;2482   out_U=(signed short)temp_SL;
0020c6  f8dfe3d0          LDR      lr,|L1.9368|
0020ca  fa0ff888          SXTH     r8,r8
0020ce  f8ae8000          STRH     r8,[lr,#0]
;;;2483   load_U=out_U;
0020d2  f8dfe3c8          LDR      lr,|L1.9372|
0020d6  f8ae8000          STRH     r8,[lr,#0]
;;;2484   
;;;2485   //Напряжение выпрямителей
;;;2486   temp_SL=(signed long)adc_buff_[2];
;;;2487   temp_SL*=Kubps;
0020da  4ff1              LDR      r7,|L1.9376|
0020dc  f9b77000          LDRSH    r7,[r7,#0]  ; Kubps
0020e0  fb01f107          MUL      r1,r1,r7
;;;2488   if(AUSW_MAIN==22010)temp_SL/=400L;
0020e4  d102              BNE      |L1.8428|
0020e6  fb91f1fb          SDIV     r1,r1,r11
0020ea  e003              B        |L1.8436|
                  |L1.8428|
;;;2489   else temp_SL/=500L;
0020ec  f44f74fa          MOV      r4,#0x1f4
0020f0  fb91f1f4          SDIV     r1,r1,r4
                  |L1.8436|
;;;2490   bps_U=(signed short)temp_SL;
0020f4  4ceb              LDR      r4,|L1.9380|
0020f6  b209              SXTH     r1,r1
0020f8  8021              STRH     r1,[r4,#0]
;;;2491   
;;;2492   if(bps_U<100)
0020fa  2964              CMP      r1,#0x64
0020fc  da19              BGE      |L1.8498|
;;;2493   	{
;;;2494   	char i;
;;;2495   	for(i=0;i<NUMIST;i++)
0020fe  f04f0100          MOV      r1,#0
002102  46a6              MOV      lr,r4                 ;2490
002104  4ce8              LDR      r4,|L1.9384|
002106  f9b4b000          LDRSH    r11,[r4,#0]
00210a  e010              B        |L1.8494|
                  |L1.8460|
;;;2496   		{
;;;2497   		if(bps[i]._Uin>bps_U)bps_U=bps[i]._Uin;
00210c  ebc104c1          RSB      r4,r1,r1,LSL #3
002110  eb041701          ADD      r7,r4,r1,LSL #4
002114  4ce5              LDR      r4,|L1.9388|
002116  eb040487          ADD      r4,r4,r7,LSL #2
00211a  f9be7000          LDRSH    r7,[lr,#0]  ; bps_U
00211e  6a24              LDR      r4,[r4,#0x20]
002120  42bc              CMP      r4,r7
002122  dd01              BLE      |L1.8488|
002124  f8ae4000          STRH     r4,[lr,#0]
                  |L1.8488|
002128  f1010101          ADD      r1,r1,#1              ;2495
00212c  b2c9              UXTB     r1,r1                 ;2495
                  |L1.8494|
00212e  4559              CMP      r1,r11                ;2495
002130  dbec              BLT      |L1.8460|
                  |L1.8498|
;;;2498   		}
;;;2499   	}
;;;2500   
;;;2501   //Суммарный ток выпрямителей
;;;2502   temp_SL=0;
002132  f04f0b00          MOV      r11,#0
;;;2503   for (i=0;i<NUMIST;i++)
002136  4659              MOV      r1,r11
002138  4cdb              LDR      r4,|L1.9384|
00213a  f9b47000          LDRSH    r7,[r4,#0]            ;2495
00213e  4cdb              LDR      r4,|L1.9388|
002140  e00b              B        |L1.8538|
                  |L1.8514|
;;;2504   	{
;;;2505   	temp_SL+=((signed long)bps[i]._Ii);
002142  ebc10ec1          RSB      lr,r1,r1,LSL #3
002146  eb0e1e01          ADD      lr,lr,r1,LSL #4
00214a  eb040e8e          ADD      lr,r4,lr,LSL #2
00214e  f8dee024          LDR      lr,[lr,#0x24]
002152  44f3              ADD      r11,r11,lr
002154  f1010101          ADD      r1,r1,#1              ;2503
002158  b2c9              UXTB     r1,r1                 ;2503
                  |L1.8538|
00215a  42b9              CMP      r1,r7                 ;2503
00215c  dbf1              BLT      |L1.8514|
;;;2506   	}
;;;2507   bps_I=(signed short)temp_SL;
00215e  49d4              LDR      r1,|L1.9392|
002160  f8a1b000          STRH     r11,[r1,#0]
;;;2508   
;;;2509   
;;;2510   #endif
;;;2511   
;;;2512   
;;;2513   #ifdef UKU_KONTUR
;;;2514   //Внешний датчик температуры №1(температура внешнего воздуха)
;;;2515   if((adc_buff_[5]>800)&&(adc_buff_[5]<3800))ND_EXT[0]=0;
;;;2516   else ND_EXT[0]=1;
;;;2517   temp_SL=(signed long)adc_buff_[5];
;;;2518   temp_SL*=Ktext[0];
;;;2519   temp_SL/=20000L;
;;;2520   temp_SL-=273L;
;;;2521   t_ext[0]=(signed short)temp_SL;
;;;2522   #else 
;;;2523   //Внешний датчик температуры №1(температура внешнего воздуха)
;;;2524   if((adc_buff_[5]>800)&&(adc_buff_[5]<3800))ND_EXT[0]=0;
002164  49d3              LDR      r1,|L1.9396|
002166  f6403ab7          MOV      r10,#0xbb7
00216a  f9b1b00a          LDRSH    r11,[r1,#0xa]  ; adc_buff_
00216e  49d2              LDR      r1,|L1.9400|
002170  f2ab3e21          SUB      lr,r11,#0x321
002174  f8cde010          STR      lr,[sp,#0x10]
002178  45d6              CMP      lr,r10
00217a  d201              BCS      |L1.8576|
00217c  700b              STRB     r3,[r1,#0]
00217e  e000              B        |L1.8578|
                  |L1.8576|
;;;2525   else ND_EXT[0]=1;
002180  700a              STRB     r2,[r1,#0]
                  |L1.8578|
;;;2526   temp_SL=(signed long)adc_buff_[5];
;;;2527   temp_SL*=Ktext[0];
002182  f8dfa338          LDR      r10,|L1.9404|
002186  f9baa000          LDRSH    r10,[r10,#0]  ; Ktext
00218a  f8cda00c          STR      r10,[sp,#0xc]
00218e  fb0afa0b          MUL      r10,r10,r11
;;;2528   temp_SL/=20000L;
002192  f6446e20          MOV      lr,#0x4e20
002196  fb9afafe          SDIV     r10,r10,lr
;;;2529   temp_SL-=273L;
00219a  f2aa1a11          SUB      r10,r10,#0x111
;;;2530   t_ext[0]=(signed short)temp_SL;
00219e  f8dfe320          LDR      lr,|L1.9408|
0021a2  f8aea000          STRH     r10,[lr,#0]
;;;2531   /*
;;;2532   if((adc_buff_[6]>800)&&(adc_buff_[6]<3800))ND_EXT[1]=0;
;;;2533   else ND_EXT[1]=1;
;;;2534   temp_SL=(signed long)adc_buff_[6];
;;;2535   temp_SL*=Ktext[1];
;;;2536   temp_SL/=20000L;
;;;2537   temp_SL-=273L;
;;;2538   t_ext[1]=(signed short)temp_SL;	*/
;;;2539   #endif
;;;2540   
;;;2541   #ifdef UKU_220
;;;2542   
;;;2543   //Внешний датчик температуры №2(температура отсека ЭПУ)
;;;2544   if((adc_buff_[3]>800)&&(adc_buff_[3]<3800))ND_EXT[1]=0;
;;;2545   else ND_EXT[1]=1;
;;;2546   temp_SL=(signed long)adc_buff_[3];
;;;2547   temp_SL*=Ktext[1];
;;;2548   temp_SL/=20000L;
;;;2549   temp_SL-=273L;
;;;2550   t_ext[1]=(signed short)temp_SL;
;;;2551   
;;;2552   //Внешний датчик температуры №3(температура отсека MSAN)
;;;2553   if((adc_buff_[10]>800)&&(adc_buff_[10]<3800))ND_EXT[2]=0;
;;;2554   else ND_EXT[2]=1;
;;;2555   temp_SL=(signed long)adc_buff_[10];
;;;2556   temp_SL*=Ktext[2];
;;;2557   temp_SL/=20000L;
;;;2558   temp_SL-=273L;
;;;2559   t_ext[2]=(signed short)temp_SL;
;;;2560   
;;;2561   #else
;;;2562   
;;;2563   
;;;2564   #ifdef UKU_220_IPS_TERMOKOMPENSAT
;;;2565   
;;;2566   //Внешний датчик температуры 
;;;2567   if((adc_buff_[6]>800)&&(adc_buff_[6]<3800))ND_EXT[0]=0;
0021a6  f8dda014          LDR      r10,[sp,#0x14]
0021aa  f6403eb7          MOV      lr,#0xbb7
0021ae  45f2              CMP      r10,lr
0021b0  d201              BCS      |L1.8630|
0021b2  700b              STRB     r3,[r1,#0]
0021b4  e000              B        |L1.8632|
                  |L1.8630|
;;;2568   else ND_EXT[0]=1;
0021b6  700a              STRB     r2,[r1,#0]
                  |L1.8632|
;;;2569   temp_SL=(signed long)adc_buff_[6];
;;;2570   temp_SL*=Ktext[0];
0021b8  f8dda00c          LDR      r10,[sp,#0xc]
0021bc  fb0afa09          MUL      r10,r10,r9
;;;2571   temp_SL/=20000L;
0021c0  f6446920          MOV      r9,#0x4e20
0021c4  fb9af9f9          SDIV     r9,r10,r9
;;;2572   temp_SL-=273L;
0021c8  f2a91911          SUB      r9,r9,#0x111
;;;2573   t_ext[0]=(signed short)temp_SL;
0021cc  f8dfe2f0          LDR      lr,|L1.9408|
0021d0  f8ae9000          STRH     r9,[lr,#0]
;;;2574   
;;;2575   //Внешний датчик температуры №2
;;;2576   if((adc_buff_[5]>800)&&(adc_buff_[5]<3800))ND_EXT[1]=0;
0021d4  f8dd9010          LDR      r9,[sp,#0x10]
0021d8  f6403ab7          MOV      r10,#0xbb7
0021dc  45d1              CMP      r9,r10
0021de  d201              BCS      |L1.8676|
0021e0  704b              STRB     r3,[r1,#1]
0021e2  e000              B        |L1.8678|
                  |L1.8676|
;;;2577   else ND_EXT[1]=1;
0021e4  704a              STRB     r2,[r1,#1]
                  |L1.8678|
;;;2578   temp_SL=(signed long)adc_buff_[5];
;;;2579   temp_SL*=Ktext[1];
0021e6  4ab5              LDR      r2,|L1.9404|
0021e8  f9b22002          LDRSH    r2,[r2,#2]  ; Ktext
0021ec  fb02f20b          MUL      r2,r2,r11
;;;2580   temp_SL/=20000L;
0021f0  f6446920          MOV      r9,#0x4e20
0021f4  fb92f2f9          SDIV     r2,r2,r9
;;;2581   temp_SL-=273L;
0021f8  f2a21211          SUB      r2,r2,#0x111
;;;2582   t_ext[1]=(signed short)temp_SL;
0021fc  fa0ffa82          SXTH     r10,r2
002200  4aaf              LDR      r2,|L1.9408|
002202  f8a2a002          STRH     r10,[r2,#2]
;;;2583   #else
;;;2584   
;;;2585   
;;;2586   
;;;2587   //Внешний датчик температуры №2(температура отсека ЭПУ)
;;;2588   if((adc_buff_[6]>800)&&(adc_buff_[6]<3800))ND_EXT[1]=0;
;;;2589   else ND_EXT[1]=1;
;;;2590   temp_SL=(signed long)adc_buff_[6];
;;;2591   temp_SL*=Ktext[1];
;;;2592   temp_SL/=20000L;
;;;2593   temp_SL-=273L;
;;;2594   t_ext[1]=(signed short)temp_SL;
;;;2595   
;;;2596   //Внешний датчик температуры №3(температура отсека MSAN)
;;;2597   if((adc_buff_[3]>800)&&(adc_buff_[3]<3800))ND_EXT[2]=0;
;;;2598   else ND_EXT[2]=1;
;;;2599   temp_SL=(signed long)adc_buff_[3];
;;;2600   temp_SL*=Ktext[2];
;;;2601   temp_SL/=20000L;
;;;2602   temp_SL-=273L;
;;;2603   t_ext[2]=(signed short)temp_SL;
;;;2604   
;;;2605   #endif
;;;2606   #endif
;;;2607   
;;;2608   #ifdef UKU_220_V2
;;;2609   
;;;2610   //Внешний датчик температуры №2(температура отсека ЭПУ)
;;;2611   if((adc_buff_[3]>800)&&(adc_buff_[3]<3800))ND_EXT[1]=0;
;;;2612   else ND_EXT[1]=1;
;;;2613   temp_SL=(signed long)adc_buff_[3];
;;;2614   temp_SL*=Ktext[1];
;;;2615   temp_SL/=20000L;
;;;2616   temp_SL-=273L;
;;;2617   t_ext[1]=(signed short)temp_SL;
;;;2618   
;;;2619   //Внешний датчик температуры №3(температура отсека MSAN)
;;;2620   if((adc_buff_[10]>800)&&(adc_buff_[10]<3800))ND_EXT[2]=0;
;;;2621   else ND_EXT[2]=1;
;;;2622   temp_SL=(signed long)adc_buff_[10];
;;;2623   temp_SL*=Ktext[2];
;;;2624   temp_SL/=20000L;
;;;2625   temp_SL-=273L;
;;;2626   t_ext[2]=(signed short)temp_SL;
;;;2627   
;;;2628   #else
;;;2629   
;;;2630   #ifdef UKU_220_IPS_TERMOKOMPENSAT
;;;2631   //Ток батареи
;;;2632   if(bps[8]._device==dIBAT_METR)
002206  f89422e0          LDRB     r2,[r4,#0x2e0]  ; bps
;;;2633   	{
;;;2634   	ibat_metr_buff_[0]=((signed long)bps[8]._buff[0])+(((signed long)bps[8]._buff[1])<<8);
;;;2635   	ibat_metr_buff_[1]=((signed long)bps[8]._buff[2])+(((signed long)bps[8]._buff[3])<<8);
;;;2636   	bIBAT_SMKLBR=((signed short)bps[8]._buff[4])+(((signed short)bps[8]._buff[5])<<8);
;;;2637   	if(bIBAT_SMKLBR) bIBAT_SMKLBR_cnt=50;
;;;2638   	if(!bIBAT_SMKLBR)
;;;2639   		{
;;;2640   		signed long temp_SL;
;;;2641   		temp_SL=(signed long)ibat_metr_buff_[0];
;;;2642   		temp_SL-=(signed long)ibat_metr_buff_[1];
;;;2643   		temp_SL*=(signed long)Kibat1[0];
;;;2644   		if((AUSW_MAIN==22010)||(AUSW_MAIN==22011)||(AUSW_MAIN==22035)||(AUSW_MAIN==22033)||(AUSW_MAIN==22063)||(AUSW_MAIN==22023)||(AUSW_MAIN==22043)||(AUSW_MAIN==22044))temp_SL/=2000L;
;;;2645   	
;;;2646   		Ib_ips_termokompensat =(signed short)temp_SL;
00220a  f8df92b8          LDR      r9,|L1.9412|
00220e  2a09              CMP      r2,#9                 ;2632
002210  d15f              BNE      |L1.8914|
002212  f89422e6          LDRB     r2,[r4,#0x2e6]        ;2634  ; bps
002216  f894b2e7          LDRB     r11,[r4,#0x2e7]       ;2634  ; bps
00221a  f8dfe2ac          LDR      lr,|L1.9416|
00221e  eb02220b          ADD      r2,r2,r11,LSL #8      ;2634
002222  f8ce2000          STR      r2,[lr,#0]            ;2634  ; ibat_metr_buff_
002226  9202              STR      r2,[sp,#8]            ;2634
002228  f89422e8          LDRB     r2,[r4,#0x2e8]        ;2635  ; bps
00222c  f894b2e9          LDRB     r11,[r4,#0x2e9]       ;2635  ; bps
002230  eb02220b          ADD      r2,r2,r11,LSL #8      ;2635
002234  f8ce2004          STR      r2,[lr,#4]            ;2635  ; ibat_metr_buff_
002238  f894b2ea          LDRB     r11,[r4,#0x2ea]       ;2636  ; bps
00223c  f894e2eb          LDRB     lr,[r4,#0x2eb]        ;2636  ; bps
002240  eb0b2b0e          ADD      r11,r11,lr,LSL #8     ;2636
002244  f8dfe284          LDR      lr,|L1.9420|
002248  fa0ffb8b          SXTH     r11,r11               ;2636
00224c  f8aeb000          STRH     r11,[lr,#0]           ;2636
002250  f1bb0f00          CMP      r11,#0                ;2637
002254  d005              BEQ      |L1.8802|
002256  f8dfb278          LDR      r11,|L1.9424|
00225a  f04f0e32          MOV      lr,#0x32              ;2637
00225e  f8abe000          STRH     lr,[r11,#0]           ;2637
                  |L1.8802|
002262  d136              BNE      |L1.8914|
002264  f8ddb008          LDR      r11,[sp,#8]           ;2641
002268  ebab0b02          SUB      r11,r11,r2            ;2642
00226c  4a99              LDR      r2,|L1.9428|
00226e  f9b22000          LDRSH    r2,[r2,#0]            ;2643  ; Kibat1
002272  fb02f20b          MUL      r2,r2,r11             ;2643
002276  f5a04ba8          SUB      r11,r0,#0x5400        ;2644
00227a  f5bb7bfd          SUBS     r11,r11,#0x1fa        ;2644
00227e  d00f              BEQ      |L1.8864|
002280  f1bb0b01          SUBS     r11,r11,#1            ;2644
002284  d00c              BEQ      |L1.8864|
002286  4560              CMP      r0,r12                ;2644
002288  d00a              BEQ      |L1.8864|
00228a  42a8              CMP      r0,r5                 ;2644
00228c  d008              BEQ      |L1.8864|
00228e  f1bb0534          SUBS     r5,r11,#0x34          ;2644
002292  d005              BEQ      |L1.8864|
002294  3528              ADDS     r5,r5,#0x28           ;2644
002296  d003              BEQ      |L1.8864|
002298  3d14              SUBS     r5,r5,#0x14           ;2644
00229a  d001              BEQ      |L1.8864|
00229c  1e6d              SUBS     r5,r5,#1              ;2644
00229e  d103              BNE      |L1.8872|
                  |L1.8864|
0022a0  f44f65fa          MOV      r5,#0x7d0             ;2644
0022a4  fb92f2f5          SDIV     r2,r2,r5              ;2644
                  |L1.8872|
0022a8  b215              SXTH     r5,r2
0022aa  f8a95000          STRH     r5,[r9,#0]
;;;2647   		if(bIBAT_SMKLBR_cnt)
0022ae  f8dfc220          LDR      r12,|L1.9424|
;;;2648   			{
;;;2649   			bIBAT_SMKLBR_cnt--;
;;;2650   			Ib_ips_termokompensat=Ib_ips_termokompensat_temp;
0022b2  f8dfb224          LDR      r11,|L1.9432|
0022b6  f9bc2000          LDRSH    r2,[r12,#0]           ;2647  ; bIBAT_SMKLBR_cnt
0022ba  b142              CBZ      r2,|L1.8910|
0022bc  f1a20201          SUB      r2,r2,#1              ;2649
0022c0  f8ac2000          STRH     r2,[r12,#0]           ;2649
0022c4  f8bb2000          LDRH     r2,[r11,#0]  ; Ib_ips_termokompensat_temp
0022c8  f8a92000          STRH     r2,[r9,#0]
0022cc  e001              B        |L1.8914|
                  |L1.8910|
;;;2651   			}
;;;2652   		else 
;;;2653   			{
;;;2654   			Ib_ips_termokompensat_temp=Ib_ips_termokompensat;
0022ce  f8ab5000          STRH     r5,[r11,#0]
                  |L1.8914|
;;;2655   			}
;;;2656   		}
;;;2657   	}
;;;2658   
;;;2659   bat[0]._Ub=load_U;
0022d2  4a82              LDR      r2,|L1.9436|
0022d4  f8a28002          STRH     r8,[r2,#2]
0022d8  f8cd8004          STR      r8,[sp,#4]
;;;2660   if(AUSW_MAIN==22018) Ib_ips_termokompensat=bat[0]._Ib;
0022dc  f5a045ac          SUB      r5,r0,#0x5600
0022e0  3d02              SUBS     r5,#2
0022e2  d103              BNE      |L1.8940|
0022e4  8910              LDRH     r0,[r2,#8]  ; bat
0022e6  f8a90000          STRH     r0,[r9,#0]
0022ea  e002              B        |L1.8946|
                  |L1.8940|
;;;2661   else bat[0]._Ib=Ib_ips_termokompensat;
0022ec  f8b90000          LDRH     r0,[r9,#0]  ; Ib_ips_termokompensat
0022f0  8110              STRH     r0,[r2,#8]
                  |L1.8946|
;;;2662   
;;;2663   #endif
;;;2664   #endif
;;;2665   
;;;2666   
;;;2667   #ifdef UKU_TELECORE2015
;;;2668   
;;;2669   //Внешний датчик температуры №1
;;;2670   if((adc_buff_[7]>800)&&(adc_buff_[7]<3800))ND_EXT[0]=0;
;;;2671   else ND_EXT[0]=1;
;;;2672   temp_SL=(signed long)adc_buff_[7];
;;;2673   temp_SL*=Ktext[0];
;;;2674   temp_SL/=20000L;
;;;2675   temp_SL-=273L;
;;;2676   t_ext[0]=(signed short)temp_SL;
;;;2677   
;;;2678   
;;;2679   //Внешний датчик температуры №2
;;;2680   if((adc_buff_[6]>800)&&(adc_buff_[6]<3800))ND_EXT[1]=0;
;;;2681   else ND_EXT[1]=1;
;;;2682   temp_SL=(signed long)adc_buff_[6];
;;;2683   temp_SL*=Ktext[1];
;;;2684   temp_SL/=20000L;
;;;2685   temp_SL-=273L;
;;;2686   t_ext[1]=(signed short)temp_SL;
;;;2687   
;;;2688   #endif
;;;2689   
;;;2690   #ifdef UKU_TELECORE2017
;;;2691   
;;;2692   //Внешний датчик температуры №1
;;;2693   if((adc_buff_[7]>800)&&(adc_buff_[7]<3800))ND_EXT[0]=0;
;;;2694   else ND_EXT[0]=1;
;;;2695   temp_SL=(signed long)adc_buff_[7];
;;;2696   temp_SL*=Ktext[0];
;;;2697   temp_SL/=20000L;
;;;2698   temp_SL-=273L;
;;;2699   t_ext[0]=(signed short)temp_SL;
;;;2700   
;;;2701   
;;;2702   //Внешний датчик температуры №2
;;;2703   if((adc_buff_[6]>800)&&(adc_buff_[6]<3800))ND_EXT[1]=0;
;;;2704   else ND_EXT[1]=1;
;;;2705   temp_SL=(signed long)adc_buff_[6];
;;;2706   temp_SL*=Ktext[1];
;;;2707   temp_SL/=20000L;
;;;2708   temp_SL-=273L;
;;;2709   t_ext[1]=(signed short)temp_SL;
;;;2710   
;;;2711   #endif
;;;2712   
;;;2713   //напряжение ввода
;;;2714   temp_SL=(signed long)adc_buff_ext_[0];
0022f2  f8dfc1ec          LDR      r12,|L1.9440|
0022f6  f8bc5000          LDRH     r5,[r12,#0]  ; adc_buff_ext_
;;;2715   temp_SL*=Kunet_ext[0];
0022fa  f8df81e8          LDR      r8,|L1.9444|
0022fe  f9b80000          LDRSH    r0,[r8,#0]  ; Kunet_ext
002302  4368              MULS     r0,r5,r0
;;;2716   temp_SL/=4000L;
002304  f44f6b7a          MOV      r11,#0xfa0
002308  fb90f0fb          SDIV     r0,r0,r11
;;;2717   Uvv[0]=(signed short)temp_SL;
00230c  4d76              LDR      r5,|L1.9448|
00230e  b280              UXTH     r0,r0
002310  8028              STRH     r0,[r5,#0]
;;;2718   if(Uvv[0]<100) Uvv0=Uvv[0];
002312  f8dfe1d8          LDR      lr,|L1.9452|
002316  2864              CMP      r0,#0x64
002318  d202              BCS      |L1.8992|
00231a  f8ae0000          STRH     r0,[lr,#0]
00231e  e003              B        |L1.9000|
                  |L1.8992|
;;;2719   else Uvv0=net_U;
002320  4873              LDR      r0,|L1.9456|
002322  8800              LDRH     r0,[r0,#0]  ; net_U
002324  f8ae0000          STRH     r0,[lr,#0]
                  |L1.9000|
;;;2720   
;;;2721   //напряжение пэс
;;;2722   temp_SL=(signed long)adc_buff_ext_[1];
002328  f8bcc002          LDRH     r12,[r12,#2]  ; adc_buff_ext_
;;;2723   temp_SL*=Kunet_ext[1];
00232c  f9b80002          LDRSH    r0,[r8,#2]  ; Kunet_ext
002330  fb00f00c          MUL      r0,r0,r12
;;;2724   temp_SL/=4000L;
002334  fb90f0fb          SDIV     r0,r0,r11
;;;2725   Uvv[1]=(signed short)temp_SL;
002338  8068              STRH     r0,[r5,#2]
;;;2726   
;;;2727   
;;;2728   //напряжение ввода трехфазное
;;;2729   temp_SL=(signed long)eb2_data_short[0];
00233a  4d6e              LDR      r5,|L1.9460|
00233c  f9b50000          LDRSH    r0,[r5,#0]  ; eb2_data_short
;;;2730   temp_SL*=Kvv_eb2[0];
002340  f8dfc1b4          LDR      r12,|L1.9464|
002344  f9bc8000          LDRSH    r8,[r12,#0]  ; Kvv_eb2
002348  fb08f800          MUL      r8,r8,r0
;;;2731   temp_SL/=6000L;
00234c  f2417070          MOV      r0,#0x1770
002350  fb98fbf0          SDIV     r11,r8,r0
;;;2732   Uvv_eb2[0]=(signed short)temp_SL;
002354  f8df81a4          LDR      r8,|L1.9468|
002358  f8a8b000          STRH     r11,[r8,#0]
;;;2733   
;;;2734   temp_SL=(signed long)eb2_data_short[1];
00235c  f9b5b002          LDRSH    r11,[r5,#2]  ; eb2_data_short
;;;2735   temp_SL*=Kvv_eb2[1];
002360  f9bce002          LDRSH    lr,[r12,#2]  ; Kvv_eb2
002364  fb0efe0b          MUL      lr,lr,r11
;;;2736   temp_SL/=6000L;
002368  fb9efbf0          SDIV     r11,lr,r0
;;;2737   Uvv_eb2[1]=(signed short)temp_SL;
00236c  f8a8b002          STRH     r11,[r8,#2]
;;;2738   
;;;2739   temp_SL=(signed long)eb2_data_short[2];
002370  f9b5b004          LDRSH    r11,[r5,#4]  ; eb2_data_short
;;;2740   temp_SL*=Kvv_eb2[2];
002374  f9bcc004          LDRSH    r12,[r12,#4]  ; Kvv_eb2
002378  fb0cfc0b          MUL      r12,r12,r11
;;;2741   temp_SL/=6000L;
00237c  fb9cfcf0          SDIV     r12,r12,r0
;;;2742   Uvv_eb2[2]=(signed short)temp_SL;
002380  f8a8c004          STRH     r12,[r8,#4]
;;;2743   
;;;2744   //напряжение пэс трехфазное
;;;2745   temp_SL=(signed long)eb2_data_short[3];
002384  f9b5b006          LDRSH    r11,[r5,#6]  ; eb2_data_short
;;;2746   temp_SL*=Kpes_eb2[0];
002388  f8dfc174          LDR      r12,|L1.9472|
00238c  f9bc8000          LDRSH    r8,[r12,#0]  ; Kpes_eb2
002390  fb08f80b          MUL      r8,r8,r11
;;;2747   temp_SL/=6000L;
002394  fb98fbf0          SDIV     r11,r8,r0
;;;2748   Upes_eb2[0]=(signed short)temp_SL;
002398  f8df8168          LDR      r8,|L1.9476|
00239c  f8a8b000          STRH     r11,[r8,#0]
;;;2749   
;;;2750   temp_SL=(signed long)eb2_data_short[4];
0023a0  f9b5b008          LDRSH    r11,[r5,#8]  ; eb2_data_short
;;;2751   temp_SL*=Kpes_eb2[1];
0023a4  f9bce002          LDRSH    lr,[r12,#2]  ; Kpes_eb2
0023a8  fb0efe0b          MUL      lr,lr,r11
;;;2752   temp_SL/=6000L;
0023ac  fb9efbf0          SDIV     r11,lr,r0
;;;2753   Upes_eb2[1]=(signed short)temp_SL;
0023b0  f8a8b002          STRH     r11,[r8,#2]
;;;2754   
;;;2755   temp_SL=(signed long)eb2_data_short[5];
0023b4  f9b5b00a          LDRSH    r11,[r5,#0xa]  ; eb2_data_short
;;;2756   temp_SL*=Kpes_eb2[2];
0023b8  f9bc5004          LDRSH    r5,[r12,#4]  ; Kpes_eb2
0023bc  fb05f50b          MUL      r5,r5,r11
;;;2757   temp_SL/=6000L;
0023c0  fb95f0f0          SDIV     r0,r5,r0
;;;2758   Upes_eb2[2]=(signed short)temp_SL;
0023c4  f8a80004          STRH     r0,[r8,#4]
;;;2759   
;;;2760   //Вычисление температуры шкафа
;;;2761   
;;;2762   ibt._T[0]=t_ext[1]+273;
0023c8  f20a1a11          ADD      r10,r10,#0x111
0023cc  fa0ffc8a          SXTH     r12,r10
0023d0  f8dfa134          LDR      r10,|L1.9480|
0023d4  483a              LDR      r0,|L1.9408|
0023d6  f8aac000          STRH     r12,[r10,#0]
;;;2763   ibt._T[1]=t_ext[2]+273;
0023da  8880              LDRH     r0,[r0,#4]  ; t_ext
0023dc  f2001011          ADD      r0,r0,#0x111
0023e0  fa0ff880          SXTH     r8,r0
0023e4  f8aa8002          STRH     r8,[r10,#2]
;;;2764   
;;;2765   ibt._nd[0]=ND_EXT[1];
0023e8  784d              LDRB     r5,[r1,#1]  ; ND_EXT
0023ea  f88a5008          STRB     r5,[r10,#8]
;;;2766   ibt._nd[1]=ND_EXT[2];
0023ee  7888              LDRB     r0,[r1,#2]  ; ND_EXT
0023f0  f88a0009          STRB     r0,[r10,#9]
;;;2767   
;;;2768   #ifndef UKU_TELECORE2015
;;;2769   if((ibt._nd[0]==0) &&  (ibt._nd[1]==0))
;;;2770   	{
;;;2771   	t_box=((ibt._T[0]+ibt._T[1])/2)-273;
0023f4  4945              LDR      r1,|L1.9484|
0023f6  b905              CBNZ     r5,|L1.9210|
0023f8  b110              CBZ      r0,|L1.9216|
                  |L1.9210|
;;;2772   	}
;;;2773   else if((ibt._nd[0]==1) &&  (ibt._nd[1]==0))
0023fa  2d01              CMP      r5,#1
0023fc  d00a              BEQ      |L1.9236|
0023fe  e00a              B        |L1.9238|
                  |L1.9216|
002400  eb0c0008          ADD      r0,r12,r8             ;2771
002404  eb0075d0          ADD      r5,r0,r0,LSR #31      ;2771
002408  f46f7088          MVN      r0,#0x110             ;2771
00240c  eb000065          ADD      r0,r0,r5,ASR #1       ;2771
002410  8008              STRH     r0,[r1,#0]            ;2771
002412  e01e              B        |L1.9298|
                  |L1.9236|
002414  b108              CBZ      r0,|L1.9242|
                  |L1.9238|
;;;2774   	{
;;;2775   	t_box=ibt._T[1]-273;
;;;2776   	}
;;;2777   else if((ibt._nd[0]==0) &&  (ibt._nd[1]==1))
002416  b12d              CBZ      r5,|L1.9252|
002418  e006              B        |L1.9256|
                  |L1.9242|
00241a  f2a81811          SUB      r8,r8,#0x111          ;2775
00241e  f8a18000          STRH     r8,[r1,#0]            ;2775
002422  e016              B        |L1.9298|
                  |L1.9252|
002424  2801              CMP      r0,#1
002426  d002              BEQ      |L1.9262|
                  |L1.9256|
;;;2778   	{
;;;2779   	t_box=ibt._T[0]-273;
;;;2780   	}
;;;2781   else if((ibt._nd[0]==1) &&  (ibt._nd[1]==1))
002428  2d01              CMP      r5,#1
00242a  d005              BEQ      |L1.9272|
00242c  e011              B        |L1.9298|
                  |L1.9262|
00242e  f2ac1c11          SUB      r12,r12,#0x111        ;2779
002432  f8a1c000          STRH     r12,[r1,#0]           ;2779
002436  e00c              B        |L1.9298|
                  |L1.9272|
002438  2801              CMP      r0,#1
00243a  d10a              BNE      |L1.9298|
;;;2782   	{
;;;2783   	if(t_ext_can_nd<5)t_box= t_ext_can;
00243c  4834              LDR      r0,|L1.9488|
00243e  7800              LDRB     r0,[r0,#0]  ; t_ext_can_nd
002440  2805              CMP      r0,#5
002442  d203              BCS      |L1.9292|
002444  4833              LDR      r0,|L1.9492|
002446  8800              LDRH     r0,[r0,#0]  ; t_ext_can
002448  8008              STRH     r0,[r1,#0]
00244a  e002              B        |L1.9298|
                  |L1.9292|
;;;2784   	else t_box=20;
00244c  f04f0014          MOV      r0,#0x14
002450  8008              STRH     r0,[r1,#0]
                  |L1.9298|
;;;2785   	}
;;;2786   #endif
;;;2787   /*
;;;2788   //Вычисление температуры шкафа
;;;2789   
;;;2790   ibt._T[0]=bat[0]._Tb+273;
;;;2791   ibt._T[1]=bat[1]._Tb+273;
;;;2792   ibt._T[2]=t_ext[1]+273;
;;;2793   ibt._T[3]=t_ext[2]+273;
;;;2794   
;;;2795   ibt._nd[0]=bat[0]._nd;
;;;2796   ibt._nd[1]=bat[1]._nd;
;;;2797   ibt._nd[2]=ND_EXT[1];
;;;2798   ibt._nd[3]=ND_EXT[2];
;;;2799   
;;;2800   ibt._avg1=0;
;;;2801   ibt._avg_cnt=4;
;;;2802   
;;;2803   if(ibt._nd[0]==0)
;;;2804   	{
;;;2805   	ibt._avg1+=ibt._T[0];
;;;2806   	}
;;;2807   else 
;;;2808   	{
;;;2809   	ibt._avg_cnt--;
;;;2810   	}
;;;2811   
;;;2812   if(ibt._nd[1]==0)
;;;2813   	{
;;;2814   	ibt._avg1+=ibt._T[1];
;;;2815   	}
;;;2816   else 
;;;2817   	{
;;;2818   	ibt._avg_cnt--;
;;;2819   	}
;;;2820   
;;;2821   if(ibt._nd[2]==0)
;;;2822   	{
;;;2823   	ibt._avg1+=ibt._T[2];
;;;2824   	}
;;;2825   else 
;;;2826   	{
;;;2827   	ibt._avg_cnt--;
;;;2828   	}
;;;2829   
;;;2830   if(ibt._nd[3]==0)
;;;2831   	{
;;;2832   	ibt._avg1+=ibt._T[3];
;;;2833   	}
;;;2834   else 
;;;2835   	{
;;;2836   	ibt._avg_cnt--;
;;;2837   	}
;;;2838   
;;;2839   if(ibt._avg_cnt==0)
;;;2840   	{
;;;2841   	}
;;;2842   else
;;;2843   	{
;;;2844   	ibt._avg1/=ibt._avg_cnt;
;;;2845   	}
;;;2846   
;;;2847   
;;;2848   if(ibt._nd[0]!=0)
;;;2849   	{
;;;2850   	ibt._T_dispers[0]=0;
;;;2851   	}
;;;2852   else 
;;;2853   	{
;;;2854   	ibt._T_dispers[0]=abs(ibt._T[0]-ibt._avg1);
;;;2855   	}
;;;2856   
;;;2857   if(ibt._nd[1]!=0)
;;;2858   	{
;;;2859   	ibt._T_dispers[1]=0;
;;;2860   	}
;;;2861   else 
;;;2862   	{
;;;2863   	ibt._T_dispers[1]=abs(ibt._T[1]-ibt._avg1);
;;;2864   	}
;;;2865   
;;;2866   if(ibt._nd[2]!=0)
;;;2867   	{
;;;2868   	ibt._T_dispers[2]=0;
;;;2869   	}
;;;2870   else 
;;;2871   	{
;;;2872   	ibt._T_dispers[2]=abs(ibt._T[2]-ibt._avg1);
;;;2873   	}
;;;2874   
;;;2875   if(ibt._nd[3]!=0)
;;;2876   	{
;;;2877   	ibt._T_dispers[3]=0;
;;;2878   	}
;;;2879   else 
;;;2880   	{
;;;2881   	ibt._T_dispers[3]=abs(ibt._T[3]-ibt._avg1);
;;;2882   	}
;;;2883   
;;;2884   if(	ibt._nd[0]&&
;;;2885   	ibt._nd[1]&&
;;;2886   	ibt._nd[2]&&
;;;2887   	ibt._nd[3]
;;;2888   	)
;;;2889   	{
;;;2890   	t_box=(bps[0]._Ti);
;;;2891   	}
;;;2892   
;;;2893   else if(	ibt._nd[0]||
;;;2894   	ibt._nd[1]||
;;;2895   	ibt._nd[2]||
;;;2896   	ibt._nd[3]
;;;2897   	)
;;;2898   	{
;;;2899   	t_box=(ibt._avg1-273);
;;;2900   	}
;;;2901   else 
;;;2902   	{
;;;2903   	ibt._max_dispers_num=0;
;;;2904   	ibt._max_dispers=ibt._T_dispers[0];
;;;2905   
;;;2906   	if(ibt._T_dispers[1]>ibt._max_dispers)
;;;2907   		{
;;;2908   		ibt._max_dispers_num=1;
;;;2909   		ibt._max_dispers=ibt._T_dispers[1];
;;;2910   		}
;;;2911   	if(ibt._T_dispers[2]>ibt._max_dispers)
;;;2912   		{
;;;2913   		ibt._max_dispers_num=2;
;;;2914   		ibt._max_dispers=ibt._T_dispers[2];
;;;2915   		}
;;;2916   	if(ibt._T_dispers[3]>ibt._max_dispers)
;;;2917   		{
;;;2918   		ibt._max_dispers_num=3;
;;;2919   		ibt._max_dispers=ibt._T_dispers[3];
;;;2920   		}
;;;2921   
;;;2922   	ibt._avg2=0;
;;;2923   
;;;2924   	if(ibt._max_dispers_num!=0)
;;;2925   		{
;;;2926   		ibt._avg2+=ibt._T[0];
;;;2927   		}
;;;2928   	if(ibt._max_dispers_num!=1)
;;;2929   		{
;;;2930   		ibt._avg2+=ibt._T[1];
;;;2931   		}
;;;2932   	if(ibt._max_dispers_num!=2)
;;;2933   		{
;;;2934   		ibt._avg2+=ibt._T[2];
;;;2935   		}
;;;2936   	if(ibt._max_dispers_num!=3)
;;;2937   		{
;;;2938   		ibt._avg2+=ibt._T[3];
;;;2939   		}
;;;2940   
;;;2941   	t_box=(ibt._avg2/3)-273;
;;;2942   
;;;2943   	}*/
;;;2944   
;;;2945   
;;;2946   //*********************************************
;;;2947   
;;;2948   #ifndef TELECORE
;;;2949   if((BAT_IS_ON[0]==bisON)&&(bat[0]._Ub>200)) Ibmax=bat[0]._Ib;
002452  4931              LDR      r1,|L1.9496|
002454  7808              LDRB     r0,[r1,#0]  ; BAT_IS_ON
002456  2855              CMP      r0,#0x55
002458  d105              BNE      |L1.9318|
00245a  9801              LDR      r0,[sp,#4]
00245c  28c8              CMP      r0,#0xc8
00245e  dd02              BLE      |L1.9318|
002460  8910              LDRH     r0,[r2,#8]  ; bat
002462  f8a60044          STRH     r0,[r6,#0x44]
                  |L1.9318|
;;;2950   if((BAT_IS_ON[1]==bisON)&&(bat[1]._Ub>200)&&(bat[1]._Ib>bat[0]._Ib)) Ibmax=bat[1]._Ib;
002466  7848              LDRB     r0,[r1,#1]  ; BAT_IS_ON
002468  2855              CMP      r0,#0x55
00246a  d10b              BNE      |L1.9348|
00246c  f9b2004e          LDRSH    r0,[r2,#0x4e]  ; bat
002470  28c8              CMP      r0,#0xc8
002472  dd07              BLE      |L1.9348|
002474  f9b20054          LDRSH    r0,[r2,#0x54]  ; bat
002478  f9b21008          LDRSH    r1,[r2,#8]  ; bat
00247c  4288              CMP      r0,r1
00247e  dd01              BLE      |L1.9348|
002480  f8a60044          STRH     r0,[r6,#0x44]
                  |L1.9348|
;;;2951   #endif
;;;2952   
;;;2953   #ifdef TELECORE
;;;2954   Ibmax=0;
;;;2955   /*
;;;2956   if((NUMBAT_TELECORE>0)&&(lakb[0]._communicationFullErrorStat==0)&&(lakb[0]._ch_curr/10>Ibmax))Ibmax=lakb[0]._ch_curr/10;
;;;2957   if((NUMBAT_TELECORE>1)&&(lakb[1]._communicationFullErrorStat==0)&&(lakb[1]._ch_curr/10>Ibmax))Ibmax=lakb[1]._ch_curr/10;
;;;2958   if((NUMBAT_TELECORE>2)&&(lakb[2]._communicationFullErrorStat==0)&&(lakb[2]._ch_curr/10>Ibmax))Ibmax=lakb[2]._ch_curr/10;
;;;2959   */
;;;2960   if((NUMBAT_TELECORE>0)&&(bat[0]._Ib/10>Ibmax))Ibmax=bat[0]._Ib/10;
;;;2961   if((NUMBAT_TELECORE>1)&&(bat[1]._Ib/10>Ibmax))Ibmax=bat[1]._Ib/10;
;;;2962   //if((BAT_IS_ON[0]==bisON)&&(bat[0]._Ub>200)) Ibmax=bat[0]._Ib/1;
;;;2963   //if((BAT_IS_ON[1]==bisON)&&(bat[1]._Ub>200)&&(bat[1]._Ib>bat[0]._Ib)) Ibmax=bat[1]._Ib;
;;;2964   #endif
;;;2965   //Ibmax=bat[0]._Ib;
;;;2966   //if((AUSW_MAIN==22063)||(AUSW_MAIN==22023)||(AUSW_MAIN==22043))Ibmax=Ib_ips_termokompensat;
;;;2967   
;;;2968   #ifdef UKU_TELECORE2017
;;;2969   Ibmax=0;
;;;2970   if((NUMBAT_TELECORE>0)&&(bat[0]._Ib/10>Ibmax))Ibmax=bat[0]._Ib/10;
;;;2971   if((NUMBAT_TELECORE>1)&&(bat[1]._Ib/10>Ibmax))Ibmax=bat[1]._Ib/10;
;;;2972   #endif
;;;2973   
;;;2974   #ifdef UKU_220_IPS_TERMOKOMPENSAT
;;;2975   Ibmax=Ib_ips_termokompensat;
002484  f8b90000          LDRH     r0,[r9,#0]  ; Ib_ips_termokompensat
002488  f8a60044          STRH     r0,[r6,#0x44]
;;;2976   #endif
;;;2977   for(i=0;i<NUMIST;i++)
00248c  f04f0100          MOV      r1,#0
002490  e074              B        |L1.9596|
002492  0000              DCW      0x0000
                  |L1.9364|
                          DCD      AUSW_MAIN
                  |L1.9368|
                          DCD      out_U
                  |L1.9372|
                          DCD      load_U
                  |L1.9376|
                          DCD      Kubps
                  |L1.9380|
                          DCD      bps_U
                  |L1.9384|
                          DCD      NUMIST
                  |L1.9388|
                          DCD      bps
                  |L1.9392|
                          DCD      bps_I
                  |L1.9396|
                          DCD      ||.bss||+0x40c
                  |L1.9400|
                          DCD      ND_EXT
                  |L1.9404|
                          DCD      Ktext
                  |L1.9408|
                          DCD      t_ext
                  |L1.9412|
                          DCD      Ib_ips_termokompensat
                  |L1.9416|
                          DCD      ibat_metr_buff_
                  |L1.9420|
                          DCD      bIBAT_SMKLBR
                  |L1.9424|
                          DCD      bIBAT_SMKLBR_cnt
                  |L1.9428|
                          DCD      Kibat1
                  |L1.9432|
                          DCD      Ib_ips_termokompensat_temp
                  |L1.9436|
                          DCD      bat
                  |L1.9440|
                          DCD      adc_buff_ext_
                  |L1.9444|
                          DCD      Kunet_ext
                  |L1.9448|
                          DCD      Uvv
                  |L1.9452|
                          DCD      Uvv0
                  |L1.9456|
                          DCD      net_U
                  |L1.9460|
                          DCD      eb2_data_short
                  |L1.9464|
                          DCD      Kvv_eb2
                  |L1.9468|
                          DCD      Uvv_eb2
                  |L1.9472|
                          DCD      Kpes_eb2
                  |L1.9476|
                          DCD      Upes_eb2
                  |L1.9480|
                          DCD      ibt
                  |L1.9484|
                          DCD      t_box
                  |L1.9488|
                          DCD      t_ext_can_nd
                  |L1.9492|
                          DCD      t_ext_can
                  |L1.9496|
                          DCD      BAT_IS_ON
                  |L1.9500|
;;;2978   	{
;;;2979   	if(bps[i]._cnt<25)
00251c  ebc100c1          RSB      r0,r1,r1,LSL #3
002520  eb001001          ADD      r0,r0,r1,LSL #4
002524  eb040080          ADD      r0,r4,r0,LSL #2
002528  78c5              LDRB     r5,[r0,#3]
00252a  2d19              CMP      r5,#0x19
00252c  d21c              BCS      |L1.9576|
;;;2980        	{
;;;2981        	bps[i]._Ii=bps[i]._buff[0]+(bps[i]._buff[1]*256);
00252e  7985              LDRB     r5,[r0,#6]
002530  79c6              LDRB     r6,[r0,#7]
002532  eb052506          ADD      r5,r5,r6,LSL #8
002536  6245              STR      r5,[r0,#0x24]
;;;2982        	bps[i]._Uin=bps[i]._buff[2]+(bps[i]._buff[3]*256);
002538  7a05              LDRB     r5,[r0,#8]
00253a  7a46              LDRB     r6,[r0,#9]
00253c  eb052506          ADD      r5,r5,r6,LSL #8
002540  6205              STR      r5,[r0,#0x20]
;;;2983        	bps[i]._Uii=bps[i]._buff[4]+(bps[i]._buff[5]*256);
002542  7a85              LDRB     r5,[r0,#0xa]
002544  7ac6              LDRB     r6,[r0,#0xb]
002546  eb052506          ADD      r5,r5,r6,LSL #8
00254a  61c5              STR      r5,[r0,#0x1c]
;;;2984        	bps[i]._Ti=(signed)(bps[i]._buff[6]);
00254c  7b05              LDRB     r5,[r0,#0xc]
00254e  6285              STR      r5,[r0,#0x28]
;;;2985        	bps[i]._adr_ee=bps[i]._buff[7];
002550  7b45              LDRB     r5,[r0,#0xd]
002552  f8805052          STRB     r5,[r0,#0x52]
;;;2986        	bps[i]._flags_tm=bps[i]._buff[8];
002556  7b85              LDRB     r5,[r0,#0xe]
002558  f8805042          STRB     r5,[r0,#0x42]
;;;2987   	     bps[i]._rotor=bps[i]._buff[10]+(bps[i]._buff[11]*256);    
00255c  7c05              LDRB     r5,[r0,#0x10]
00255e  7c46              LDRB     r6,[r0,#0x11]
002560  eb052506          ADD      r5,r5,r6,LSL #8
002564  64c5              STR      r5,[r0,#0x4c]
002566  e006              B        |L1.9590|
                  |L1.9576|
;;;2988        	} 
;;;2989   	else 
;;;2990        	{
;;;2991        	bps[i]._Uii=0; 
002568  61c3              STR      r3,[r0,#0x1c]
;;;2992        	bps[i]._Ii=0;
00256a  6243              STR      r3,[r0,#0x24]
;;;2993        	bps[i]._Uin=0;
00256c  6203              STR      r3,[r0,#0x20]
;;;2994        	bps[i]._Ti=0;
00256e  6283              STR      r3,[r0,#0x28]
;;;2995        	bps[i]._flags_tm=0; 
002570  f8803042          STRB     r3,[r0,#0x42]
;;;2996   	     bps[i]._rotor=0;    
002574  64c3              STR      r3,[r0,#0x4c]
                  |L1.9590|
002576  f1010101          ADD      r1,r1,#1              ;2977
00257a  b2c9              UXTB     r1,r1                 ;2977
                  |L1.9596|
00257c  42b9              CMP      r1,r7                 ;2977
00257e  dbcd              BLT      |L1.9500|
;;;2997        	}
;;;2998        
;;;2999        }
;;;3000   
;;;3001   load_I=0;
002580  4df9              LDR      r5,|L1.10600|
;;;3002   #ifdef TELECORE
;;;3003   
;;;3004   /*for(i=0;i<NUMBAT_TELECORE;i++)
;;;3005   	{
;;;3006   	load_I-=lakb[i]._ch_curr/10;
;;;3007   	}*/
;;;3008   load_I=-(bat[0]._Ib/10)-(bat[1]._Ib/10);
;;;3009   #elif UKU_TELECORE2017
;;;3010   load_I=-(bat[0]._Ib/10)-(bat[1]._Ib/10);
;;;3011   #else
;;;3012   load_I=-(bat[0]._Ib/10)-(bat[1]._Ib/10);
002582  f9b21008          LDRSH    r1,[r2,#8]  ; bat
002586  f04f000a          MOV      r0,#0xa
00258a  fb91f1f0          SDIV     r1,r1,r0
00258e  f9b22054          LDRSH    r2,[r2,#0x54]  ; bat
002592  fb92f0f0          SDIV     r0,r2,r0
002596  4408              ADD      r0,r0,r1
002598  f1c00000          RSB      r0,r0,#0
00259c  b206              SXTH     r6,r0
00259e  802e              STRH     r6,[r5,#0]
;;;3013   #endif
;;;3014   Isumm=0;
0025a0  4af2              LDR      r2,|L1.10604|
0025a2  8013              STRH     r3,[r2,#0]
;;;3015   
;;;3016   for(i=0;i<NUMIST;i++)
0025a4  f04f0000          MOV      r0,#0
0025a8  e012              B        |L1.9680|
                  |L1.9642|
;;;3017        {
;;;3018        if(bps[i]._cnt<5)Isumm+=bps[i]._Ii;
0025aa  ebc001c0          RSB      r1,r0,r0,LSL #3
0025ae  eb011100          ADD      r1,r1,r0,LSL #4
0025b2  eb040181          ADD      r1,r4,r1,LSL #2
0025b6  f891c003          LDRB     r12,[r1,#3]
0025ba  f1bc0f05          CMP      r12,#5
0025be  d204              BCS      |L1.9674|
0025c0  6a49              LDR      r1,[r1,#0x24]
0025c2  f8b2c000          LDRH     r12,[r2,#0]  ; Isumm
0025c6  4461              ADD      r1,r1,r12
0025c8  8011              STRH     r1,[r2,#0]
                  |L1.9674|
0025ca  f1000001          ADD      r0,r0,#1              ;3016
0025ce  b2c0              UXTB     r0,r0                 ;3016
                  |L1.9680|
0025d0  42b8              CMP      r0,r7                 ;3016
0025d2  dbea              BLT      |L1.9642|
;;;3019        }  
;;;3020        
;;;3021   load_I=load_I+Isumm;
0025d4  8810              LDRH     r0,[r2,#0]  ; Isumm
0025d6  4430              ADD      r0,r0,r6
0025d8  b200              SXTH     r0,r0
0025da  8028              STRH     r0,[r5,#0]
;;;3022   if(load_I<0)load_I=0;
0025dc  2800              CMP      r0,#0
0025de  da00              BGE      |L1.9698|
0025e0  802b              STRH     r3,[r5,#0]
                  |L1.9698|
;;;3023   
;;;3024   #ifdef UKU_220_IPS_TERMOKOMPENSAT
;;;3025   load_I=0;
0025e2  802b              STRH     r3,[r5,#0]
;;;3026   
;;;3027   Isumm=0;
0025e4  8013              STRH     r3,[r2,#0]
;;;3028   
;;;3029   for(i=0;i<NUMIST;i++)
0025e6  f04f0000          MOV      r0,#0
0025ea  e00f              B        |L1.9740|
                  |L1.9708|
;;;3030        {
;;;3031        if(bps[i]._cnt<5)Isumm+=bps[i]._Ii;
0025ec  ebc001c0          RSB      r1,r0,r0,LSL #3
0025f0  eb011100          ADD      r1,r1,r0,LSL #4
0025f4  eb040181          ADD      r1,r4,r1,LSL #2
0025f8  78ce              LDRB     r6,[r1,#3]
0025fa  2e05              CMP      r6,#5
0025fc  d203              BCS      |L1.9734|
0025fe  6a49              LDR      r1,[r1,#0x24]
002600  8816              LDRH     r6,[r2,#0]  ; Isumm
002602  4431              ADD      r1,r1,r6
002604  8011              STRH     r1,[r2,#0]
                  |L1.9734|
002606  f1000001          ADD      r0,r0,#1              ;3029
00260a  b2c0              UXTB     r0,r0                 ;3029
                  |L1.9740|
00260c  42b8              CMP      r0,r7                 ;3029
00260e  dbed              BLT      |L1.9708|
;;;3032        }  
;;;3033        
;;;3034   load_I=load_I+Isumm;
002610  8811              LDRH     r1,[r2,#0]  ; Isumm
002612  eb030001          ADD      r0,r3,r1
002616  b200              SXTH     r0,r0
002618  8028              STRH     r0,[r5,#0]
;;;3035   if(load_I<0)load_I=0;
00261a  2800              CMP      r0,#0
00261c  da00              BGE      |L1.9760|
00261e  802b              STRH     r3,[r5,#0]
                  |L1.9760|
;;;3036   
;;;3037   #endif
;;;3038   #ifdef IPS_SGEP_GAZPROM
;;;3039   load_I=Isumm;
;;;3040   #endif
;;;3041   
;;;3042   
;;;3043   #ifdef UKU_GLONASS
;;;3044   inv[0]._Uio=6;
;;;3045   if (NUMINV)
;;;3046   	{
;;;3047   	for(i=0;i<NUMINV;i++)
;;;3048   		{
;;;3049   		if(bps[i+first_inv_slot]._cnt<25)
;;;3050        		{
;;;3051        		inv[i]._Ii=bps[i+first_inv_slot]._buff[0]+(bps[i+first_inv_slot]._buff[1]*256);
;;;3052        		inv[i]._Uin=bps[i+first_inv_slot]._buff[2]+(bps[i+first_inv_slot]._buff[3]*256);
;;;3053        		inv[i]._Uio=bps[i+first_inv_slot]._buff[4]+(bps[i+first_inv_slot]._buff[5]*256);
;;;3054        		inv[i]._Ti=(signed)(bps[i+first_inv_slot]._buff[6]);
;;;3055        		inv[i]._flags_tm=bps[i+first_inv_slot]._buff[8];
;;;3056   	    	//	inv[i]._rotor=bps[i+first_inv_slot]._buff[10]+(bps[i+first_inv_slot]._buff[11]*256);
;;;3057   			inv[i]._cnt=0;    
;;;3058        		} 
;;;3059   		else 
;;;3060        		{
;;;3061        		inv[i]._Uio=0; 
;;;3062        		inv[i]._Ii=0;
;;;3063        		inv[i]._Uin=0;
;;;3064        		inv[i]._Ti=0;
;;;3065        		inv[i]._flags_tm=0; 
;;;3066   //	     	inv[i]._rotor0;
;;;3067   			inv[i]._cnt=25;    
;;;3068        		}
;;;3069        	}
;;;3070      	}
;;;3071   #endif
;;;3072   
;;;3073   #ifndef UKU_GLONASS
;;;3074   if (NUMINV)
002620  48d3              LDR      r0,|L1.10608|
002622  f9b05000          LDRSH    r5,[r0,#0]  ; NUMINV
002626  2d00              CMP      r5,#0
002628  d066              BEQ      |L1.9976|
;;;3075   	{
;;;3076   	for(i=0;i<NUMINV;i++)
00262a  f04f0200          MOV      r2,#0
;;;3077   		{
;;;3078   		if(bps[i+20]._cnt<25)
;;;3079        		{
;;;3080        		inv[i]._Ii=bps[i+20]._buff[0]+(bps[i+20]._buff[1]*256);
00262e  4ed1              LDR      r6,|L1.10612|
002630  e060              B        |L1.9972|
                  |L1.9778|
002632  f1020014          ADD      r0,r2,#0x14           ;3078
002636  ebc001c0          RSB      r1,r0,r0,LSL #3       ;3078
00263a  eb011000          ADD      r0,r1,r0,LSL #4       ;3078
00263e  eb040080          ADD      r0,r4,r0,LSL #2       ;3078
002642  78c1              LDRB     r1,[r0,#3]            ;3078
002644  2919              CMP      r1,#0x19              ;3078
002646  d239              BCS      |L1.9916|
002648  7981              LDRB     r1,[r0,#6]
00264a  79c7              LDRB     r7,[r0,#7]
00264c  eb012707          ADD      r7,r1,r7,LSL #8
002650  eb020142          ADD      r1,r2,r2,LSL #1
002654  eb061141          ADD      r1,r6,r1,LSL #5
002658  61cf              STR      r7,[r1,#0x1c]
;;;3081        		inv[i]._Pio=bps[i+20]._buff[2]+(bps[i+20]._buff[3]*256);
00265a  7a07              LDRB     r7,[r0,#8]
00265c  f890c009          LDRB     r12,[r0,#9]
002660  eb07270c          ADD      r7,r7,r12,LSL #8
002664  62cf              STR      r7,[r1,#0x2c]
;;;3082        		inv[i]._Uio=bps[i+20]._buff[4]+(bps[i+20]._buff[5]*256);
002666  7a87              LDRB     r7,[r0,#0xa]
002668  f890c00b          LDRB     r12,[r0,#0xb]
00266c  eb07270c          ADD      r7,r7,r12,LSL #8
002670  618f              STR      r7,[r1,#0x18]
;;;3083        		inv[i]._Ti=(signed)(bps[i+20]._buff[6]);
002672  7b07              LDRB     r7,[r0,#0xc]
002674  620f              STR      r7,[r1,#0x20]
;;;3084        		inv[i]._flags_tm=bps[i+20]._buff[7];
002676  7b47              LDRB     r7,[r0,#0xd]
002678  f8817046          STRB     r7,[r1,#0x46]
;;;3085        		inv[i]._Uin=bps[i+20]._buff[8]+(bps[i+20]._buff[9]*256);
00267c  7b87              LDRB     r7,[r0,#0xe]
00267e  f890c00f          LDRB     r12,[r0,#0xf]
002682  eb07270c          ADD      r7,r7,r12,LSL #8
002686  628f              STR      r7,[r1,#0x28]
;;;3086        		inv[i]._Uil=bps[i+20]._buff[10]+(bps[i+20]._buff[11]*256);
002688  7c07              LDRB     r7,[r0,#0x10]
00268a  f890c011          LDRB     r12,[r0,#0x11]
00268e  eb07270c          ADD      r7,r7,r12,LSL #8
002692  624f              STR      r7,[r1,#0x24]
;;;3087   			inv[i]._cnt=0;
002694  708b              STRB     r3,[r1,#2]
;;;3088   			inv[i]._Uoutmin=bps[i+20]._buff[12]; 
002696  7c87              LDRB     r7,[r0,#0x12]
002698  f8817059          STRB     r7,[r1,#0x59]
;;;3089   			inv[i]._Uoutmax=bps[i+20]._buff[13]; 
00269c  7cc7              LDRB     r7,[r0,#0x13]
00269e  f881705a          STRB     r7,[r1,#0x5a]
;;;3090   			inv[i]._Pnom=bps[i+20]._buff[14]; 
0026a2  7d07              LDRB     r7,[r0,#0x14]
0026a4  f8817058          STRB     r7,[r1,#0x58]
;;;3091   			inv[i]._net_contr_en=bps[i+20]._buff[15];
0026a8  7d47              LDRB     r7,[r0,#0x15]
0026aa  f881705b          STRB     r7,[r1,#0x5b]
;;;3092   			inv[i]._pwm_en=bps[i+20]._buff[16];  
0026ae  7d87              LDRB     r7,[r0,#0x16]
0026b0  f881705c          STRB     r7,[r1,#0x5c]
;;;3093   			inv[i]._phase_mode=bps[i+20]._buff[17];  
0026b4  7dc0              LDRB     r0,[r0,#0x17]
0026b6  f881005d          STRB     r0,[r1,#0x5d]
0026ba  e018              B        |L1.9966|
                  |L1.9916|
;;;3094        		} 
;;;3095   		else 
;;;3096        		{
;;;3097         		inv[i]._Ii=0;
0026bc  eb020042          ADD      r0,r2,r2,LSL #1
0026c0  eb061040          ADD      r0,r6,r0,LSL #5
0026c4  61c3              STR      r3,[r0,#0x1c]
;;;3098   			inv[i]._Pio=0;
0026c6  62c3              STR      r3,[r0,#0x2c]
;;;3099   			inv[i]._Uio=0;
0026c8  6183              STR      r3,[r0,#0x18]
;;;3100        		inv[i]._Ti=0;
0026ca  6203              STR      r3,[r0,#0x20]
;;;3101        		inv[i]._flags_tm=0; 
0026cc  f8803046          STRB     r3,[r0,#0x46]
;;;3102        		inv[i]._Uil=0;
0026d0  6243              STR      r3,[r0,#0x24]
;;;3103        		inv[i]._Uin=0;
0026d2  6283              STR      r3,[r0,#0x28]
;;;3104   			inv[i]._cnt=25; 
0026d4  f04f0119          MOV      r1,#0x19
0026d8  7081              STRB     r1,[r0,#2]
;;;3105   			inv[i]._Uoutmin=0; 
0026da  f8803059          STRB     r3,[r0,#0x59]
;;;3106   			inv[i]._Uoutmax=0; 
0026de  f880305a          STRB     r3,[r0,#0x5a]
;;;3107   			inv[i]._Pnom=0; 
0026e2  f8803058          STRB     r3,[r0,#0x58]
;;;3108   			inv[i]._net_contr_en=0;
0026e6  f880305b          STRB     r3,[r0,#0x5b]
;;;3109   			inv[i]._pwm_en=0;   
0026ea  f880305c          STRB     r3,[r0,#0x5c]
                  |L1.9966|
0026ee  f1020201          ADD      r2,r2,#1              ;3076
0026f2  b2d2              UXTB     r2,r2                 ;3076
                  |L1.9972|
0026f4  42aa              CMP      r2,r5                 ;3076
0026f6  db9c              BLT      |L1.9778|
                  |L1.9976|
;;;3110   			   
;;;3111        		}
;;;3112        	}
;;;3113      	}
;;;3114   #endif
;;;3115   
;;;3116   #ifdef GLADKOV
;;;3117   inv[0]._Ii=bps[4]._buff[0]+(bps[4]._buff[1]*256);
;;;3118   inv[0]._Pio=bps[4]._buff[2]+(bps[4]._buff[3]*256);
;;;3119   inv[0]._Uio=bps[4]._buff[4]+(bps[4]._buff[5]*256);
;;;3120   inv[0]._Ti=(signed)(bps[4]._buff[6]);
;;;3121   inv[0]._flags_tm=bps[4]._buff[7];
;;;3122   inv[0]._Uin=bps[4]._buff[8]+(bps[4]._buff[9]*256);
;;;3123   inv[0]._Uil=bps[4]._buff[10]+(bps[4]._buff[11]*256);
;;;3124   inv[0]._cnt=0;    
;;;3125   
;;;3126   inv[1]._Ii=bps[21]._buff[0]+(bps[21]._buff[1]*256);
;;;3127   inv[1]._Pio=bps[21]._buff[2]+(bps[21]._buff[3]*256);
;;;3128   inv[1]._Uio=bps[21]._buff[4]+(bps[21]._buff[5]*256);
;;;3129   inv[1]._Ti=(signed)(bps[21]._buff[6]);
;;;3130   inv[1]._flags_tm=bps[21]._buff[7];
;;;3131   inv[1]._Uin=bps[21]._buff[8]+(bps[21]._buff[9]*256);
;;;3132   inv[1]._Uil=bps[21]._buff[10]+(bps[21]._buff[11]*256);
;;;3133   inv[1]._cnt=0;    
;;;3134   #endif
;;;3135   
;;;3136   /*
;;;3137   if((BAT_IS_ON[0]==bisON)&&(BAT_TYPE==1))
;;;3138   	{
;;;3139   	lakb[0]._battCommState=0;
;;;3140   	if(lakb[0]._cnt>10)lakb[0]._battCommState=2;
;;;3141   	else if(lakb[0]._bRS485ERR==1)lakb[0]._battCommState=1;
;;;3142   	
;;;3143   	if(lakb[0]._battCommState==0)
;;;3144   		{	
;;;3145   		bat[0]._Ub=(signed short)((lakb[0]._tot_bat_volt+5)/10);
;;;3146   		bat[0]._Ib=(signed short)lakb[0]._ch_curr;
;;;3147   		if(lakb[0]._dsch_curr) bat[0]._Ib=(signed short) (-lakb[0]._dsch_curr);
;;;3148   		bat[0]._Tb=(signed short)lakb[0]._max_cell_temp;
;;;3149   		}
;;;3150   	}
;;;3151   */
;;;3152   
;;;3153   #ifdef UKU_TELECORE2015
;;;3154   
;;;3155   	if(BAT_TYPE==2)
;;;3156   		{
;;;3157   		lakb[0]._ch_curr/*temp_SS*/=((ascii2halFhex(liBatteryInBuff[113]))<<12)+
;;;3158   					 		((ascii2halFhex(liBatteryInBuff[114]))<<8)+
;;;3159   							((ascii2halFhex(liBatteryInBuff[115]))<<4)+
;;;3160   							((ascii2halFhex(liBatteryInBuff[116])));
;;;3161   		
;;;3162   		/*if(temp_SS&0x8000)		lakb[0]._ch_curr=~temp_SS;
;;;3163   		else 				lakb[0]._ch_curr=temp_SS;*/
;;;3164   	
;;;3165   		lakb[0]._tot_bat_volt=	(unsigned short)(((ascii2halFhex(liBatteryInBuff[117]))<<12)+
;;;3166   							((ascii2halFhex(liBatteryInBuff[118]))<<8)+
;;;3167   							((ascii2halFhex(liBatteryInBuff[119]))<<4)+
;;;3168   							((ascii2halFhex(liBatteryInBuff[120]))))/100;
;;;3169   	
;;;3170   		lakb[0]._max_cell_temp= 	(((ascii2halFhex(liBatteryInBuff[93]))<<12)+
;;;3171   							((ascii2halFhex(liBatteryInBuff[94]))<<8)+
;;;3172   							((ascii2halFhex(liBatteryInBuff[95]))<<4)+
;;;3173   							((ascii2halFhex(liBatteryInBuff[96]))))/10-273;
;;;3174   	
;;;3175   		lakb[0]._s_o_c_abs=		(unsigned short)((ascii2halFhex(liBatteryInBuff[121]))<<12)+
;;;3176   							((ascii2halFhex(liBatteryInBuff[122]))<<8)+
;;;3177   							((ascii2halFhex(liBatteryInBuff[123]))<<4)+
;;;3178   							((ascii2halFhex(liBatteryInBuff[124])));
;;;3179   	
;;;3180   		lakb[0]._rat_cap=		(unsigned short)((ascii2halFhex(liBatteryInBuff[127]))<<12)+
;;;3181   							((ascii2halFhex(liBatteryInBuff[128]))<<8)+
;;;3182   							((ascii2halFhex(liBatteryInBuff[129]))<<4)+
;;;3183   							((ascii2halFhex(liBatteryInBuff[130])));
;;;3184   	
;;;3185   		lakb[0]._s_o_c=		lakb[0]._s_o_c_abs/(lakb[0]._rat_cap/100);
;;;3186   	
;;;3187   	
;;;3188   	/*	lakb[0]._rat_cap= (lakb_damp[i][13]*256)+ lakb_damp[i][14];
;;;3189   		lakb[0]._max_cell_volt= (lakb_damp[i][0]*256)+ lakb_damp[i][1];
;;;3190   		lakb[0]._min_cell_volt= (lakb_damp[i][2]*256)+ lakb_damp[i][3];
;;;3191   		lakb[0]._max_cell_temp= lakb_damp[i][4];
;;;3192   		lakb[0]._min_cell_temp= lakb_damp[i][5];
;;;3193   		lakb[0]._tot_bat_volt= (lakb_damp[i][6]*256)+ lakb_damp[i][7];
;;;3194   		lakb[0]._ch_curr= (lakb_damp[i][8]*256)+ lakb_damp[i][8];
;;;3195   		lakb[0]._dsch_curr= (lakb_damp[i][10]*256)+ lakb_damp[i][11];
;;;3196   		lakb[0]._s_o_c= lakb_damp[i][12];
;;;3197   		lakb[0]._r_b_t= lakb_damp[i][15];
;;;3198   		lakb[0]._c_c_l_v= (lakb_damp[i][16]*256)+ lakb_damp[i][17];
;;;3199   		lakb[0]._s_o_h= lakb_damp[i][18];
;;;3200   	
;;;3201   		if(lakb[i]._rat_cap==0)
;;;3202   			{
;;;3203   			if(lakb[i]._isOnCnt)
;;;3204   				{
;;;3205   				lakb[i]._isOnCnt--;
;;;3206   				if(lakb[i]._isOnCnt==0)
;;;3207   					{
;;;3208   					if(lakb[i]._battIsOn!=0) bLAKB_KONF_CH=1;
;;;3209   					}
;;;3210   				}
;;;3211   			}
;;;3212   		else 
;;;3213   			{
;;;3214   			if(lakb[i]._isOnCnt<50)
;;;3215   				{
;;;3216   				lakb[i]._isOnCnt++;
;;;3217   				if(lakb[i]._isOnCnt==50)
;;;3218   					{
;;;3219   					if(lakb[i]._battIsOn!=1) bLAKB_KONF_CH=1;
;;;3220   					}
;;;3221   				}
;;;3222   			}
;;;3223   		gran(&lakb[i]._isOnCnt,0,50);*/
;;;3224   		}
;;;3225   	else if(BAT_TYPE==3)
;;;3226   		{
;;;3227   		//short numOfPacks;
;;;3228   		//short numOfCells, numOfTemperCells, baseOfData;
;;;3229   		
;;;3230   		#ifndef UKU_TELECORE2016
;;;3231   		numOfCells=((ascii2halFhex(liBatteryInBuff[17]))<<4)+((ascii2halFhex(liBatteryInBuff[18])));
;;;3232   		numOfTemperCells=((ascii2halFhex(liBatteryInBuff[17+(numOfCells*4)+2]))<<4)+((ascii2halFhex(liBatteryInBuff[18+(numOfCells*4)+2])));
;;;3233   		numOfPacks=((ascii2halFhex(liBatteryInBuff[15]))<<4)+((ascii2halFhex(liBatteryInBuff[16])));
;;;3234   		if(numOfPacks)numOfPacks-=1;
;;;3235   		if((numOfPacks<0)||(numOfPacks>NUMBAT_TELECORE))numOfPacks=0;
;;;3236   		plazma_numOfCells=numOfCells;
;;;3237   		plazma_numOfTemperCells=numOfTemperCells;
;;;3238   		plazma_numOfPacks=numOfPacks;
;;;3239   
;;;3240   
;;;3241   		baseOfData=16+(numOfCells*4)+2+(numOfTemperCells*4)+2;
;;;3242   
;;;3243   		lakb[numOfPacks]._ch_curr=(signed short)(
;;;3244   							((ascii2halFhex(liBatteryInBuff[1+baseOfData]))<<12)+
;;;3245   							((ascii2halFhex(liBatteryInBuff[2+baseOfData]))<<8)+
;;;3246   							((ascii2halFhex(liBatteryInBuff[3+baseOfData]))<<4)+
;;;3247   							((ascii2halFhex(liBatteryInBuff[4+baseOfData])))
;;;3248   							);	  
;;;3249   
;;;3250   		lakb[numOfPacks]._tot_bat_volt=(signed short)(
;;;3251   							((ascii2halFhex(liBatteryInBuff[1+baseOfData+4]))<<12)+
;;;3252   							((ascii2halFhex(liBatteryInBuff[2+baseOfData+4]))<<8)+
;;;3253   							((ascii2halFhex(liBatteryInBuff[3+baseOfData+4]))<<4)+
;;;3254   							((ascii2halFhex(liBatteryInBuff[4+baseOfData+4])))
;;;3255   							)/10;
;;;3256   
;;;3257   		lakb[numOfPacks]._max_cell_temp=(signed short)(
;;;3258   							((ascii2halFhex(liBatteryInBuff[1+baseOfData-4]))<<12)+
;;;3259   							((ascii2halFhex(liBatteryInBuff[2+baseOfData-4]))<<8)+
;;;3260   							((ascii2halFhex(liBatteryInBuff[3+baseOfData-4]))<<4)+
;;;3261   							((ascii2halFhex(liBatteryInBuff[4+baseOfData-4])))
;;;3262   							)-2730;
;;;3263   
;;;3264   		lakb[numOfPacks]._s_o_c=(signed short)(
;;;3265   							((ascii2halFhex(liBatteryInBuff[1+baseOfData+8]))<<12)+
;;;3266   							((ascii2halFhex(liBatteryInBuff[2+baseOfData+8]))<<8)+
;;;3267   							((ascii2halFhex(liBatteryInBuff[3+baseOfData+8]))<<4)+
;;;3268   							((ascii2halFhex(liBatteryInBuff[4+baseOfData+8])))
;;;3269   							)/10;
;;;3270   
;;;3271   		lakb[numOfPacks]._s_o_h=(signed short)(
;;;3272   							((ascii2halFhex(liBatteryInBuff[1+baseOfData+14]))<<12)+
;;;3273   							((ascii2halFhex(liBatteryInBuff[2+baseOfData+14]))<<8)+
;;;3274   							((ascii2halFhex(liBatteryInBuff[3+baseOfData+14]))<<4)+
;;;3275   							((ascii2halFhex(liBatteryInBuff[4+baseOfData+14])))
;;;3276   							)/10;
;;;3277   		#endif
;;;3278   		
;;;3279   		#ifdef UKU_TELECORE2016
;;;3280   		{
;;;3281   		char i;
;;;3282   		
;;;3283   		for(i=0;i<NUMBAT_TELECORE;i++)
;;;3284   			{
;;;3285   			lakb[i]._s_o_c_percent= (signed short)(((unsigned long)lakb[i]._s_o_c*100UL)/(unsigned long)lakb[i]._s_o_h);
;;;3286   			}
;;;3287   		}
;;;3288   		#endif
;;;3289   		
;;;3290   										  
;;;3291   		}
;;;3292   	
;;;3293   if(sacredSunSilentCnt<3) 
;;;3294   	{
;;;3295       	bat[0]._Ub=lakb[0]._tot_bat_volt;
;;;3296       	bat[0]._Tb=lakb[0]._max_cell_temp;
;;;3297      	//bat[0]._Ib=lakb[0]._ch_curr/10;
;;;3298   	}
;;;3299   else 
;;;3300   	{
;;;3301       	//bat[0]._Ub=0;
;;;3302       	//bat[0]._Tb=0;
;;;3303      	//bat[0]._Ib=0;
;;;3304   	}
;;;3305   
;;;3306   if(BAT_TYPE==1)
;;;3307   	{
;;;3308   	char i;
;;;3309   	for(i=0;i<1;i++)
;;;3310   		{
;;;3311   		lakb[i]._rat_cap= (lakb_damp[i][13]*256)+ lakb_damp[i][14];
;;;3312   		lakb[i]._max_cell_volt= (lakb_damp[i][0]*256)+ lakb_damp[i][1];
;;;3313   		lakb[i]._min_cell_volt= (lakb_damp[i][2]*256)+ lakb_damp[i][3];
;;;3314   		lakb[i]._max_cell_temp= lakb_damp[i][4];
;;;3315   		lakb[i]._min_cell_temp= lakb_damp[i][5];
;;;3316   		lakb[i]._tot_bat_volt= (lakb_damp[i][6]*256)+ lakb_damp[i][7];
;;;3317   		lakb[i]._ch_curr= (lakb_damp[i][8]*256)+ lakb_damp[i][9];
;;;3318   		lakb[i]._dsch_curr= (lakb_damp[i][10]*256)+ lakb_damp[i][11];
;;;3319   		lakb[i]._s_o_c= lakb_damp[i][12];
;;;3320   		lakb[i]._r_b_t= lakb_damp[i][15];
;;;3321   		lakb[i]._c_c_l_v= (lakb_damp[i][16]*256)+ lakb_damp[i][17];
;;;3322   		lakb[i]._s_o_h= lakb_damp[i][18];
;;;3323   		lakb[i]._flags1= lakb_damp[i][34];
;;;3324   		lakb[i]._flags2= lakb_damp[i][35];
;;;3325   		lakb[i]._b_p_ser_num= lakb_damp[i][36];
;;;3326   
;;;3327   /*		if(lakb[i]._rat_cap==0)
;;;3328   			{
;;;3329   			if(lakb[i]._isOnCnt)
;;;3330   				{
;;;3331   				lakb[i]._isOnCnt--;
;;;3332   				if(lakb[i]._isOnCnt==0)
;;;3333   					{
;;;3334   					if(lakb[i]._battIsOn!=0) bLAKB_KONF_CH=1;
;;;3335   					}
;;;3336   				}
;;;3337   			}
;;;3338   		else 
;;;3339   			{
;;;3340   			if(lakb[i]._isOnCnt<50)
;;;3341   				{
;;;3342   				lakb[i]._isOnCnt++;
;;;3343   				if(lakb[i]._isOnCnt==50)
;;;3344   					{
;;;3345   					if(lakb[i]._battIsOn!=1) bLAKB_KONF_CH=1;
;;;3346   					}
;;;3347   				}
;;;3348   			} */
;;;3349   		gran(&lakb[i]._isOnCnt,0,50);
;;;3350   	 	}
;;;3351   
;;;3352   	if(lakb_damp[0][41]==100)
;;;3353   		{
;;;3354   		li_bat._485Error=1;
;;;3355   		}
;;;3356   	if(lakb_damp[0][41]==0)
;;;3357   		{
;;;3358   		//if(bRS485ERR)bLAKB_KONF_CH=1;
;;;3359   		li_bat._485Error=0;
;;;3360   		}
;;;3361   	li_bat._485ErrorCnt=lakb_damp[0][41];
;;;3362   
;;;3363   
;;;3364   	}
;;;3365   
;;;3366   
;;;3367   #endif
;;;3368   
;;;3369   		#ifdef UKU_TELECORE2017
;;;3370   		{
;;;3371   		char i;
;;;3372   		
;;;3373   		for(i=0;i<NUMBAT_TELECORE;i++)
;;;3374   			{
;;;3375   			lakb[i]._s_o_c_percent= (signed short)(((unsigned long)lakb[i]._s_o_c*100UL)/(unsigned long)lakb[i]._s_o_h);
;;;3376   			}
;;;3377   		}
;;;3378   		#endif
;;;3379   #ifdef UKU_TELECORE2015
;;;3380   //вычисление параметров работы батареи
;;;3381   //TODO дописать для всех батарей все параметры и при отцепке батарей
;;;3382   li_bat._batStat=bsOK;
;;;3383   if(BAT_TYPE==1) //COSLIGHT
;;;3384   	{
;;;3385   	if(li_bat._batStat==bsOK)
;;;3386   		{
;;;3387   		li_bat._Ub=lakb[0]._tot_bat_volt/10;
;;;3388   
;;;3389   		if(lakb[0]._ch_curr)li_bat._Ib=lakb[0]._ch_curr/10;
;;;3390   		else if(lakb[0]._dsch_curr) li_bat._Ib=bat[0]._Ib/10;//lakb[0]._dsch_curr/10;
;;;3391   	
;;;3392   		li_bat._ratCap=lakb[0]._rat_cap/100;
;;;3393   		li_bat._soc=lakb[0]._s_o_c;
;;;3394   		li_bat._soh=lakb[0]._s_o_h;
;;;3395   		li_bat._cclv=lakb[0]._c_c_l_v/10;
;;;3396   		li_bat._Tb=lakb[0]._max_cell_temp;
;;;3397   		li_bat._rbt=lakb[0]._r_b_t;
;;;3398   		}
;;;3399   	else 
;;;3400   		{
;;;3401   		li_bat._Ub=bat[0]._Ub;
;;;3402   		li_bat._Ib=bat[0]._Ib/10;
;;;3403   		li_bat._Tb=bat[0]._Tb;
;;;3404   		}
;;;3405   
;;;3406   	if((li_bat._485Error)||(li_bat._canError))
;;;3407   		{
;;;3408   		li_bat._batStat=bsOFF;
;;;3409   		}
;;;3410   	else li_bat._batStat=bsOK;
;;;3411   	}
;;;3412   else if(BAT_TYPE==2) //SACRED SUN
;;;3413   	{
;;;3414   	}
;;;3415   else if(BAT_TYPE==3) //ZTT
;;;3416   	{
;;;3417   	if(li_bat._batStat==bsOK)
;;;3418   		{
;;;3419   
;;;3420   		}
;;;3421   	}
;;;3422   #endif
;;;3423   
;;;3424   
;;;3425   /*
;;;3426   if((BAT_IS_ON[0]==bisON)&&(BAT_TYPE[0]==1)&&(BAT_LINK==0))
;;;3427   	{
;;;3428   
;;;3429   
;;;3430   	if(bat_drv_rx_buff[13]<=0x39)bbb[0]=bat_drv_rx_buff[13]-0x30;
;;;3431   	else bbb[0]=bat_drv_rx_buff[13]-55;
;;;3432   	if(bat_drv_rx_buff[14]<=0x39)bbb[1]=bat_drv_rx_buff[14]-0x30;
;;;3433   	else bbb[1]=bat_drv_rx_buff[14]-55;
;;;3434   	if(bat_drv_rx_buff[15]<=0x39)bbb[2]=bat_drv_rx_buff[15]-0x30;
;;;3435   	else bbb[2]=bat_drv_rx_buff[15]-55;
;;;3436   	if(bat_drv_rx_buff[16]<=0x39)bbb[3]=bat_drv_rx_buff[16]-0x30;
;;;3437   	else bbb[3]=bat_drv_rx_buff[16]-55;
;;;3438   
;;;3439   	tempSS=0;
;;;3440   	tempSS=((bbb[0]*4096)+(bbb[1]*256)+(bbb[2]*16)+bbb[3]);
;;;3441   
;;;3442   	bat[0]._max_cell_volt=(tempSS+5)/10;
;;;3443   
;;;3444   	if(bat_drv_rx_buff[17]<=0x39)bbb[0]=bat_drv_rx_buff[17]-0x30;
;;;3445   	else bbb[0]=bat_drv_rx_buff[17]-55;
;;;3446   	if(bat_drv_rx_buff[18]<=0x39)bbb[1]=bat_drv_rx_buff[18]-0x30;
;;;3447   	else bbb[1]=bat_drv_rx_buff[18]-55;
;;;3448   	if(bat_drv_rx_buff[19]<=0x39)bbb[2]=bat_drv_rx_buff[19]-0x30;
;;;3449   	else bbb[2]=bat_drv_rx_buff[19]-55;
;;;3450   	if(bat_drv_rx_buff[20]<=0x39)bbb[3]=bat_drv_rx_buff[20]-0x30;
;;;3451   	else bbb[3]=bat_drv_rx_buff[20]-55;
;;;3452   
;;;3453   	tempSS=0;
;;;3454   	tempSS=((bbb[0]*4096)+(bbb[1]*256)+(bbb[2]*16)+bbb[3]);
;;;3455   
;;;3456   	bat[0]._min_cell_volt=(tempSS+5)/10;
;;;3457   
;;;3458   
;;;3459   	}*/
;;;3460   
;;;3461   
;;;3462   
;;;3463   }
0026f8  b007              ADD      sp,sp,#0x1c
0026fa  e8bd8ff0          POP      {r4-r11,pc}
;;;3464   
                          ENDP

                  mnemo_hndl PROC
;;;3465   //-----------------------------------------------
;;;3466   void mnemo_hndl(void)
0026fe  4a9e              LDR      r2,|L1.10616|
;;;3467   {
;;;3468   if(((ind==iMn_220)||(ind==iMn))&&(sub_ind==0)&&(MNEMO_ON==mnON))
;;;3469   	{
;;;3470   	if(mnemo_cnt)mnemo_cnt--;
002700  499e              LDR      r1,|L1.10620|
002702  7810              LDRB     r0,[r2,#0]            ;3468  ; a_ind
002704  2804              CMP      r0,#4                 ;3468
002706  d001              BEQ      |L1.9996|
002708  2801              CMP      r0,#1                 ;3468
00270a  d105              BNE      |L1.10008|
                  |L1.9996|
00270c  7850              LDRB     r0,[r2,#1]            ;3468  ; a_ind
00270e  b918              CBNZ     r0,|L1.10008|
002710  489b              LDR      r0,|L1.10624|
002712  7800              LDRB     r0,[r0,#0]            ;3468  ; MNEMO_ON
002714  2855              CMP      r0,#0x55              ;3468
002716  d003              BEQ      |L1.10016|
                  |L1.10008|
;;;3471   	}
;;;3472   else mnemo_cnt=MNEMO_TIME;
002718  489a              LDR      r0,|L1.10628|
00271a  8800              LDRH     r0,[r0,#0]  ; MNEMO_TIME
00271c  7008              STRB     r0,[r1,#0]
                  |L1.10014|
;;;3473   }
00271e  4770              BX       lr
                  |L1.10016|
002720  7808              LDRB     r0,[r1,#0]            ;3470  ; mnemo_cnt
002722  2800              CMP      r0,#0                 ;3470
002724  d0fb              BEQ      |L1.10014|
002726  f1a00001          SUB      r0,r0,#1              ;3470
00272a  7008              STRB     r0,[r1,#0]            ;3470
00272c  4770              BX       lr
;;;3474   
                          ENDP

                  adc_init PROC
;;;3475   //-----------------------------------------------
;;;3476   void adc_init(void)
00272e  4896              LDR      r0,|L1.10632|
;;;3477   {
;;;3478   
;;;3479   SET_REG(LPC_PINCON->PINSEL1,1,(25-16)*2,2);
002730  6841              LDR      r1,[r0,#4]
002732  f4212140          BIC      r1,r1,#0xc0000
002736  f4412180          ORR      r1,r1,#0x40000
00273a  6041              STR      r1,[r0,#4]
;;;3480   SET_REG(LPC_PINCON->PINSEL1,1,(24-16)*2,2);
00273c  6841              LDR      r1,[r0,#4]
00273e  f4213140          BIC      r1,r1,#0x30000
002742  f4413180          ORR      r1,r1,#0x10000
002746  6041              STR      r1,[r0,#4]
;;;3481   SET_REG(LPC_PINCON->PINSEL1,1,(23-16)*2,2);
002748  6841              LDR      r1,[r0,#4]
00274a  f4214140          BIC      r1,r1,#0xc000
00274e  f4414180          ORR      r1,r1,#0x4000
002752  6041              STR      r1,[r0,#4]
;;;3482   
;;;3483   
;;;3484   SET_REG(LPC_PINCON->PINMODE1,2,(25-16)*2,2);
002754  6c41              LDR      r1,[r0,#0x44]
002756  f4212140          BIC      r1,r1,#0xc0000
00275a  f4412100          ORR      r1,r1,#0x80000
00275e  6441              STR      r1,[r0,#0x44]
;;;3485   SET_REG(LPC_PINCON->PINMODE1,2,(24-16)*2,2);
002760  6c41              LDR      r1,[r0,#0x44]
002762  f4213140          BIC      r1,r1,#0x30000
002766  f4413100          ORR      r1,r1,#0x20000
00276a  6441              STR      r1,[r0,#0x44]
;;;3486   SET_REG(LPC_PINCON->PINMODE1,2,(23-16)*2,2);
00276c  6c41              LDR      r1,[r0,#0x44]
00276e  f4214140          BIC      r1,r1,#0xc000
002772  f4414100          ORR      r1,r1,#0x8000
002776  6441              STR      r1,[r0,#0x44]
;;;3487   
;;;3488   SET_REG(LPC_ADC->ADCR,0,24,3);
002778  4884              LDR      r0,|L1.10636|
00277a  6801              LDR      r1,[r0,#0]
00277c  f02161e0          BIC      r1,r1,#0x7000000
002780  6001              STR      r1,[r0,#0]
;;;3489   
;;;3490   SET_REG(LPC_ADC->ADCR,1,21,1);
002782  6801              LDR      r1,[r0,#0]
002784  f4411100          ORR      r1,r1,#0x200000
002788  6001              STR      r1,[r0,#0]
;;;3491   SET_REG(LPC_ADC->ADCR,0,16,1);
00278a  6801              LDR      r1,[r0,#0]
00278c  f4213180          BIC      r1,r1,#0x10000
002790  6001              STR      r1,[r0,#0]
;;;3492   SET_REG(LPC_ADC->ADCR,1,8,8);
002792  6801              LDR      r1,[r0,#0]
002794  f421417f          BIC      r1,r1,#0xff00
002798  f4417180          ORR      r1,r1,#0x100
00279c  6001              STR      r1,[r0,#0]
;;;3493   
;;;3494   //SET_REG(LPC_GPIO0->FIODIR,7,5,3);
;;;3495   //SET_REG(LPC_GPIO0->FIOPIN,4,5,3);
;;;3496   	
;;;3497   	/*if(adc_ch<=7)*///SET_REG(LPC_ADC->ADCR,1<<5,0,8);
;;;3498        /*else if(adc_ch==8) SET_REG(LPC_ADC->ADCR,1<<2,0,8);
;;;3499        else SET_REG(LPC_ADC->ADCR,1<<4,0,8);*/
;;;3500   
;;;3501   LPC_ADC->ADINTEN     =  (1<< 8);      /* global enable interrupt            */
00279e  f44f7180          MOV      r1,#0x100
0027a2  60c1              STR      r1,[r0,#0xc]
0027a4  487a              LDR      r0,|L1.10640|
0027a6  f44f0180          MOV      r1,#0x400000
0027aa  6001              STR      r1,[r0,#0]
;;;3502   
;;;3503   NVIC_EnableIRQ(ADC_IRQn);             /* enable ADC Interrupt               */
;;;3504   
;;;3505   
;;;3506   }
0027ac  4770              BX       lr
;;;3507   
                          ENDP

                  adc_drv7 PROC
;;;3508   //-----------------------------------------------
;;;3509   void adc_drv7(void) //(Uсети - постоянка)
0027ae  e92d41f0          PUSH     {r4-r8,lr}
;;;3510   {
;;;3511   //int temp_S;
;;;3512   //char i;
;;;3513   //signed short temp_SS;
;;;3514   
;;;3515   adc_self_ch_disp[0]=abs_pal(adc_self_ch_buff[1]-adc_self_ch_buff[0]);//adc_self_ch_buff[0]&0x0f80;
0027b2  4c78              LDR      r4,|L1.10644|
0027b4  8860              LDRH     r0,[r4,#2]  ; adc_self_ch_buff
0027b6  8821              LDRH     r1,[r4,#0]  ; adc_self_ch_buff
0027b8  1a40              SUBS     r0,r0,r1
0027ba  b200              SXTH     r0,r0
0027bc  f7fffffe          BL       abs_pal
0027c0  1da6              ADDS     r6,r4,#6
0027c2  8030              STRH     r0,[r6,#0]
;;;3516   adc_self_ch_disp[1]=abs_pal(adc_self_ch_buff[2]-adc_self_ch_buff[1]);//adc_self_ch_buff[1]&0x0f80;
0027c4  88a0              LDRH     r0,[r4,#4]  ; adc_self_ch_buff
0027c6  8861              LDRH     r1,[r4,#2]  ; adc_self_ch_buff
0027c8  1a40              SUBS     r0,r0,r1
0027ca  b200              SXTH     r0,r0
0027cc  f7fffffe          BL       abs_pal
0027d0  8070              STRH     r0,[r6,#2]
;;;3517   adc_self_ch_disp[2]=abs_pal(adc_self_ch_buff[2]-adc_self_ch_buff[0]);//adc_self_ch_buff[2]&0x0f80;
0027d2  88a0              LDRH     r0,[r4,#4]  ; adc_self_ch_buff
0027d4  8821              LDRH     r1,[r4,#0]  ; adc_self_ch_buff
0027d6  1a40              SUBS     r0,r0,r1
0027d8  b200              SXTH     r0,r0
0027da  f7fffffe          BL       abs_pal
0027de  80b0              STRH     r0,[r6,#4]
;;;3518   
;;;3519   //adc_self_ch_disp[0]=adc_self_ch_buff[0]&0x0ff0;
;;;3520   //adc_self_ch_disp[1]=adc_self_ch_buff[1]&0x0ff0;
;;;3521   //adc_self_ch_disp[2]=adc_self_ch_buff[2]&0x0ff0;
;;;3522   
;;;3523   
;;;3524   if(adc_self_ch_disp[2]<300)//==adc_self_ch_disp[2])
0027e0  f44f7196          MOV      r1,#0x12c
;;;3525   	{
;;;3526   	adc_result=adc_self_ch_buff[2];
0027e4  f1a405ea          SUB      r5,r4,#0xea
0027e8  4288              CMP      r0,r1                 ;3524
0027ea  da02              BGE      |L1.10226|
0027ec  88a0              LDRH     r0,[r4,#4]  ; adc_self_ch_buff
0027ee  86e8              STRH     r0,[r5,#0x36]
0027f0  e00c              B        |L1.10252|
                  |L1.10226|
;;;3527   	} 
;;;3528   else if(adc_self_ch_disp[1]<300)//==adc_self_ch_disp[2])
0027f2  f9b60002          LDRSH    r0,[r6,#2]  ; adc_self_ch_disp
0027f6  4288              CMP      r0,r1
0027f8  da02              BGE      |L1.10240|
;;;3529   	{
;;;3530   	adc_result=adc_self_ch_buff[1];
0027fa  8860              LDRH     r0,[r4,#2]  ; adc_self_ch_buff
0027fc  86e8              STRH     r0,[r5,#0x36]
0027fe  e005              B        |L1.10252|
                  |L1.10240|
;;;3531   	}
;;;3532   else if(adc_self_ch_disp[0]<300)//==adc_self_ch_disp[1])
002800  f9b60000          LDRSH    r0,[r6,#0]  ; adc_self_ch_disp
002804  4288              CMP      r0,r1
002806  da01              BGE      |L1.10252|
;;;3533   	{
;;;3534   	adc_result=adc_self_ch_buff[0];
002808  8820              LDRH     r0,[r4,#0]  ; adc_self_ch_buff
00280a  86e8              STRH     r0,[r5,#0x36]
                  |L1.10252|
;;;3535   	}
;;;3536       //adc_result=92;
;;;3537   
;;;3538   if(adc_ch_net)
00280c  7a6f              LDRB     r7,[r5,#9]  ; adc_ch_net
00280e  2600              MOVS     r6,#0
002810  b32f              CBZ      r7,|L1.10334|
;;;3539   	{
;;;3540   
;;;3541   	main_power_buffer[0]+=(long)(adc_result);
002812  4861              LDR      r0,|L1.10648|
002814  f9b51036          LDRSH    r1,[r5,#0x36]  ; adc_result
002818  6802              LDR      r2,[r0,#0]  ; main_power_buffer
00281a  440a              ADD      r2,r2,r1
00281c  6002              STR      r2,[r0,#0]  ; main_power_buffer
;;;3542   	main_power_buffer[1]+=(long)(adc_result);
00281e  6842              LDR      r2,[r0,#4]  ; main_power_buffer
002820  440a              ADD      r2,r2,r1
002822  6042              STR      r2,[r0,#4]  ; main_power_buffer
;;;3543   	main_power_buffer[2]+=(long)(adc_result);
002824  6882              LDR      r2,[r0,#8]  ; main_power_buffer
002826  440a              ADD      r2,r2,r1
002828  6082              STR      r2,[r0,#8]  ; main_power_buffer
;;;3544   	main_power_buffer[3]+=(long)(adc_result);
00282a  68c2              LDR      r2,[r0,#0xc]  ; main_power_buffer
00282c  4411              ADD      r1,r1,r2
00282e  60c1              STR      r1,[r0,#0xc]  ; main_power_buffer
;;;3545   
;;;3546   	adc_net_buff_cnt++;
002830  8fe9              LDRH     r1,[r5,#0x3e]  ; adc_net_buff_cnt
002832  f1010101          ADD      r1,r1,#1
002836  b209              SXTH     r1,r1
002838  87e9              STRH     r1,[r5,#0x3e]
;;;3547   	if(adc_net_buff_cnt>=0x1000)
00283a  f5b15f80          CMP      r1,#0x1000
00283e  db00              BLT      |L1.10306|
;;;3548   		{
;;;3549   		adc_net_buff_cnt=0;
002840  87ee              STRH     r6,[r5,#0x3e]
                  |L1.10306|
;;;3550   		}
;;;3551   	if((adc_net_buff_cnt&0x03ff)==0)
002842  f9b5103e          LDRSH    r1,[r5,#0x3e]  ; adc_net_buff_cnt
002846  058a              LSLS     r2,r1,#22
002848  d131              BNE      |L1.10414|
;;;3552   		{
;;;3553   		#ifdef UKU_220
;;;3554   		net_buff_=(short)((main_power_buffer[adc_net_buff_cnt>>10])>>11);
;;;3555   		#else
;;;3556   		#ifdef UKU_220_V2
;;;3557   		net_buff_=(short)((main_power_buffer[adc_net_buff_cnt>>10])>>11);
;;;3558   		#else
;;;3559   		net_buff_=(short)((main_power_buffer[adc_net_buff_cnt>>10])>>8);
00284a  ea4f21a1          ASR      r1,r1,#10
00284e  f8502021          LDR      r2,[r0,r1,LSL #2]
002852  ea4f2222          ASR      r2,r2,#8
002856  86aa              STRH     r2,[r5,#0x34]
;;;3560   		#endif
;;;3561   		#endif
;;;3562   		main_power_buffer[adc_net_buff_cnt>>10]=0;
002858  f8406021          STR      r6,[r0,r1,LSL #2]
00285c  e027              B        |L1.10414|
                  |L1.10334|
;;;3563   		}
;;;3564   
;;;3565   
;;;3566   	} 
;;;3567   else if(!adc_ch_net)
;;;3568   	{
;;;3569   	adc_buff[adc_ch][adc_ch_cnt]=(long)adc_result;
00285e  484f              LDR      r0,|L1.10652|
002860  7aac              LDRB     r4,[r5,#0xa]  ; adc_ch
002862  7aea              LDRB     r2,[r5,#0xb]  ; adc_ch_cnt
002864  eb001384          ADD      r3,r0,r4,LSL #6
002868  f9b51036          LDRSH    r1,[r5,#0x36]  ; adc_result
00286c  f8431022          STR      r1,[r3,r2,LSL #2]
;;;3570   	
;;;3571   	if((adc_ch_cnt&0x03)==0)
002870  0790              LSLS     r0,r2,#30
002872  d10f              BNE      |L1.10388|
;;;3572   		{
;;;3573   		long temp_L;
;;;3574   		char i;
;;;3575   		temp_L=0;
002874  4601              MOV      r1,r0
                  |L1.10358|
;;;3576   		for(i=0;i<16;i++)
;;;3577   			{
;;;3578   			temp_L+=adc_buff[adc_ch][i];
002876  f853c020          LDR      r12,[r3,r0,LSL #2]
00287a  4461              ADD      r1,r1,r12
00287c  f1000001          ADD      r0,r0,#1              ;3576
002880  b2c0              UXTB     r0,r0                 ;3576
002882  2810              CMP      r0,#0x10              ;3576
002884  d3f7              BCC      |L1.10358|
;;;3579   			}
;;;3580   		adc_buff_[adc_ch]= (short)(temp_L>>4);
002886  ea4f1021          ASR      r0,r1,#4
00288a  4943              LDR      r1,|L1.10648|
00288c  f1a10120          SUB      r1,r1,#0x20
002890  f8210014          STRH     r0,[r1,r4,LSL #1]
                  |L1.10388|
;;;3581   
;;;3582   		//adc_buff_[3]=346;
;;;3583   		}
;;;3584   	if(++adc_ch>=16) 
002894  1c64              ADDS     r4,r4,#1
002896  b2e0              UXTB     r0,r4
002898  72a8              STRB     r0,[r5,#0xa]
00289a  2810              CMP      r0,#0x10
00289c  d307              BCC      |L1.10414|
;;;3585   		{
;;;3586   		adc_ch=0;
00289e  72ae              STRB     r6,[r5,#0xa]
;;;3587   		adc_ch_cnt++;
0028a0  f1020201          ADD      r2,r2,#1
0028a4  b2d0              UXTB     r0,r2
0028a6  72e8              STRB     r0,[r5,#0xb]
;;;3588   		if(adc_ch_cnt>=16)adc_ch_cnt=0;
0028a8  2810              CMP      r0,#0x10
0028aa  d300              BCC      |L1.10414|
0028ac  72ee              STRB     r6,[r5,#0xb]
                  |L1.10414|
;;;3589   		}
;;;3590   	}
;;;3591   
;;;3592   //adc_buff[adc_ch][adc_cnt1]=(adc_self_ch_buff[2]+adc_self_ch_buff[1])/2;
;;;3593   
;;;3594   //if(adc_buff[adc_ch][adc_cnt1]<adc_buff_min[adc_ch])adc_buff_min[adc_ch]=adc_buff[adc_ch][adc_cnt1];
;;;3595   //if(adc_buff[adc_ch][adc_cnt1]>adc_buff_max[adc_ch])adc_buff_max[adc_ch]=adc_buff[adc_ch][adc_cnt1];
;;;3596   /*
;;;3597   	{
;;;3598   	if((adc_cnt1&0x03)==0)
;;;3599   		{
;;;3600   		temp_S=0;
;;;3601   		for(i=0;i<16;i++)
;;;3602   			{
;;;3603   			temp_S+=adc_buff[adc_ch][i];
;;;3604   			} 
;;;3605            	adc_buff_[adc_ch]=temp_S>>4;
;;;3606             }
;;;3607   	}*/
;;;3608   
;;;3609   
;;;3610   		  
;;;3611   
;;;3612   adc_self_ch_cnt=0;
0028ae  722e              STRB     r6,[r5,#8]
;;;3613   
;;;3614   adc_ch_net++;
0028b0  f1070701          ADD      r7,r7,#1
;;;3615   adc_ch_net&=1;
0028b4  f0070001          AND      r0,r7,#1
0028b8  7268              STRB     r0,[r5,#9]
;;;3616   
;;;3617   //SET_REG(LPC_GPIO0->FIODIR,7,5,3);
;;;3618   //SET_REG(LPC_GPIO0->FIOPIN,adc_ch,5,3);
;;;3619   
;;;3620   if(adc_ch_net)
;;;3621   	{
;;;3622   	//LPC_GPIO2->FIODIR|=(1<<7);
;;;3623   	//LPC_GPIO2->FIOPIN|=(1<<7);
;;;3624   	SET_REG(LPC_ADC->ADCR,1<<2,0,8);
0028ba  4a34              LDR      r2,|L1.10636|
0028bc  b130              CBZ      r0,|L1.10444|
0028be  6810              LDR      r0,[r2,#0]
0028c0  f02000ff          BIC      r0,r0,#0xff
0028c4  f1000004          ADD      r0,r0,#4
0028c8  6010              STR      r0,[r2,#0]
0028ca  e03d              B        |L1.10568|
                  |L1.10444|
;;;3625   	}
;;;3626   else
;;;3627   	{
;;;3628   	//LPC_GPIO2->FIODIR|=(1<<7);
;;;3629   	//LPC_GPIO2->FIOPIN&=~(1<<7);
;;;3630   	if(!(adc_ch&(1<<3)))SET_REG(LPC_ADC->ADCR,1<<0,0,8);
0028cc  7aa9              LDRB     r1,[r5,#0xa]  ; adc_ch
0028ce  0708              LSLS     r0,r1,#28
0028d0  d406              BMI      |L1.10464|
0028d2  6810              LDR      r0,[r2,#0]
0028d4  f02000ff          BIC      r0,r0,#0xff
0028d8  f1000001          ADD      r0,r0,#1
0028dc  6010              STR      r0,[r2,#0]
0028de  e005              B        |L1.10476|
                  |L1.10464|
;;;3631   	else 			SET_REG(LPC_ADC->ADCR,1<<1,0,8);
0028e0  6810              LDR      r0,[r2,#0]
0028e2  f02000ff          BIC      r0,r0,#0xff
0028e6  f1000002          ADD      r0,r0,#2
0028ea  6010              STR      r0,[r2,#0]
                  |L1.10476|
;;;3632   
;;;3633   
;;;3634   	SET_REG(LPC_GPIO0->FIODIR,1,28,1);
0028ec  482c              LDR      r0,|L1.10656|
0028ee  6803              LDR      r3,[r0,#0]
0028f0  f0435380          ORR      r3,r3,#0x10000000
0028f4  6003              STR      r3,[r0,#0]
;;;3635   	SET_REG(LPC_GPIO1->FIODIR,1,30,1);
0028f6  6a03              LDR      r3,[r0,#0x20]
0028f8  f0434380          ORR      r3,r3,#0x40000000
0028fc  6203              STR      r3,[r0,#0x20]
;;;3636   	SET_REG(LPC_GPIO3->FIODIR,1,26,1);
0028fe  6e03              LDR      r3,[r0,#0x60]
002900  f0436380          ORR      r3,r3,#0x4000000
002904  6603              STR      r3,[r0,#0x60]
;;;3637   
;;;3638   	if(!(adc_ch&(1<<0)))SET_REG(LPC_GPIO0->FIOPIN,0,28,1);
002906  07cb              LSLS     r3,r1,#31
002908  d00a              BEQ      |L1.10528|
;;;3639   	else 			SET_REG(LPC_GPIO0->FIOPIN,1,28,1);
00290a  6943              LDR      r3,[r0,#0x14]
00290c  f0435380          ORR      r3,r3,#0x10000000
002910  6143              STR      r3,[r0,#0x14]
                  |L1.10514|
;;;3640   
;;;3641   	if(!(adc_ch&(1<<1)))SET_REG(LPC_GPIO1->FIOPIN,0,30,1);
002912  078b              LSLS     r3,r1,#30
002914  d409              BMI      |L1.10538|
002916  6b43              LDR      r3,[r0,#0x34]
002918  f0234380          BIC      r3,r3,#0x40000000
00291c  6343              STR      r3,[r0,#0x34]
00291e  e008              B        |L1.10546|
                  |L1.10528|
002920  6943              LDR      r3,[r0,#0x14]         ;3638
002922  f0235380          BIC      r3,r3,#0x10000000     ;3638
002926  6143              STR      r3,[r0,#0x14]         ;3638
002928  e7f3              B        |L1.10514|
                  |L1.10538|
;;;3642   	else 			SET_REG(LPC_GPIO1->FIOPIN,1,30,1);
00292a  6b43              LDR      r3,[r0,#0x34]
00292c  f0434380          ORR      r3,r3,#0x40000000
002930  6343              STR      r3,[r0,#0x34]
                  |L1.10546|
;;;3643   
;;;3644   	if(!(adc_ch&(1<<2)))SET_REG(LPC_GPIO3->FIOPIN,0,26,1);
002932  0749              LSLS     r1,r1,#29
002934  d404              BMI      |L1.10560|
002936  6f41              LDR      r1,[r0,#0x74]
002938  f0216180          BIC      r1,r1,#0x4000000
00293c  6741              STR      r1,[r0,#0x74]
00293e  e003              B        |L1.10568|
                  |L1.10560|
;;;3645   	else 			SET_REG(LPC_GPIO3->FIOPIN,1,26,1);
002940  6f41              LDR      r1,[r0,#0x74]
002942  f0416180          ORR      r1,r1,#0x4000000
002946  6741              STR      r1,[r0,#0x74]
                  |L1.10568|
;;;3646   	}
;;;3647   	
;;;3648   
;;;3649   
;;;3650   
;;;3651   LPC_ADC->ADCR |=  (1<<24);
002948  6810              LDR      r0,[r2,#0]
00294a  f0407080          ORR      r0,r0,#0x1000000
00294e  6010              STR      r0,[r2,#0]
;;;3652   
;;;3653   }
002950  e8bd81f0          POP      {r4-r8,pc}
;;;3654   
                          ENDP

                  avg_hndl PROC
;;;3911   //-----------------------------------------------
;;;3912   void avg_hndl(void)
002954  b5f0              PUSH     {r4-r7,lr}
;;;3913   { 
;;;3914   char i;
;;;3915   
;;;3916   //#define AVGCNTMAX	5
;;;3917   if(avg_main_cnt)
002956  4d0f              LDR      r5,|L1.10644|
002958  3dea              SUBS     r5,r5,#0xea
00295a  f9b50030          LDRSH    r0,[r5,#0x30]  ; avg_main_cnt
00295e  b308              CBZ      r0,|L1.10660|
;;;3918   	{
;;;3919   	avg_main_cnt--;
002960  f1a00001          SUB      r0,r0,#1
002964  8628              STRH     r0,[r5,#0x30]
;;;3920   	goto avg_hndl_end;
002966  e0b2              B        |L1.10958|
                  |L1.10600|
                          DCD      load_I
                  |L1.10604|
                          DCD      Isumm
                  |L1.10608|
                          DCD      NUMINV
                  |L1.10612|
                          DCD      inv
                  |L1.10616|
                          DCD      a_ind
                  |L1.10620|
                          DCD      mnemo_cnt
                  |L1.10624|
                          DCD      MNEMO_ON
                  |L1.10628|
                          DCD      MNEMO_TIME
                  |L1.10632|
                          DCD      0x4002c000
                  |L1.10636|
                          DCD      0x40034000
                  |L1.10640|
                          DCD      0xe000e100
                  |L1.10644|
                          DCD      ||area_number.25||+0xea
                  |L1.10648|
                          DCD      ||.bss||+0x42c
                  |L1.10652|
                          DCD      ||.bss||+0xc
                  |L1.10656|
                          DCD      0x2009c000
                  |L1.10660|
;;;3921   	}                 
;;;3922   
;;;3923   avg_num=0;
0029a4  f04f0600          MOV      r6,#0
0029a8  74ae              STRB     r6,[r5,#0x12]
;;;3924   
;;;3925   for(i=0;i<NUMIST;i++)
0029aa  4630              MOV      r0,r6
0029ac  49ff              LDR      r1,|L1.11692|
;;;3926   	{
;;;3927   	if((bps[i]._state==bsWRK)&&(bps[i]._cnt<20))avg_num++;
0029ae  4bfe              LDR      r3,|L1.11688|
0029b0  f9b12000          LDRSH    r2,[r1,#0]            ;3925
0029b4  e012              B        |L1.10716|
                  |L1.10678|
0029b6  ebc001c0          RSB      r1,r0,r0,LSL #3
0029ba  eb011100          ADD      r1,r1,r0,LSL #4
0029be  eb030181          ADD      r1,r3,r1,LSL #2
0029c2  788c              LDRB     r4,[r1,#2]
0029c4  2c01              CMP      r4,#1
0029c6  d106              BNE      |L1.10710|
0029c8  78c9              LDRB     r1,[r1,#3]
0029ca  2914              CMP      r1,#0x14
0029cc  d203              BCS      |L1.10710|
0029ce  7ca9              LDRB     r1,[r5,#0x12]  ; avg_num
0029d0  f1010101          ADD      r1,r1,#1
0029d4  74a9              STRB     r1,[r5,#0x12]
                  |L1.10710|
0029d6  f1000001          ADD      r0,r0,#1              ;3925
0029da  b2c0              UXTB     r0,r0                 ;3925
                  |L1.10716|
0029dc  4290              CMP      r0,r2                 ;3925
0029de  dbea              BLT      |L1.10678|
;;;3928   	}
;;;3929   
;;;3930   /*if((K[NUMI]>=1)&&(bps_state[0]==ssWRK))	avg_num++;
;;;3931   if((K[NUMI]>=2)&&(bps_state[1]==ssWRK))	avg_num++;
;;;3932   if((K[NUMI]>=3)&&(bps_state[2]==ssWRK))	avg_num++;*/
;;;3933   
;;;3934   	
;;;3935   if(avg_num<2)
0029e0  7caf              LDRB     r7,[r5,#0x12]  ; avg_num
0029e2  2f02              CMP      r7,#2
0029e4  d373              BCC      |L1.10958|
;;;3936   	{
;;;3937   	goto avg_hndl_end;
;;;3938   	}
;;;3939   	
;;;3940   else
;;;3941   	{
;;;3942   	i_avg_min=5000;
0029e6  4cf2              LDR      r4,|L1.11696|
0029e8  f2413088          MOV      r0,#0x1388
0029ec  61e0              STR      r0,[r4,#0x1c]  ; i_avg_min
;;;3943   	i_avg_max=0;
0029ee  61a6              STR      r6,[r4,#0x18]  ; i_avg_max
;;;3944   	i_avg_summ=0;
0029f0  6226              STR      r6,[r4,#0x20]  ; i_avg_summ
;;;3945   	for(i=0;i<NUMIST;i++)
0029f2  f04f0100          MOV      r1,#0
0029f6  e01c              B        |L1.10802|
                  |L1.10744|
;;;3946   		{
;;;3947   		if(bps[i]._state==bsWRK)
0029f8  ebc100c1          RSB      r0,r1,r1,LSL #3
0029fc  eb001001          ADD      r0,r0,r1,LSL #4
002a00  eb030080          ADD      r0,r3,r0,LSL #2
002a04  f890c002          LDRB     r12,[r0,#2]
002a08  f1bc0f01          CMP      r12,#1
002a0c  d10e              BNE      |L1.10796|
;;;3948   			{
;;;3949   			if(bps[i]._Ii>i_avg_max)i_avg_max=bps[i]._Ii;
002a0e  6a40              LDR      r0,[r0,#0x24]
002a10  f8d4c018          LDR      r12,[r4,#0x18]  ; i_avg_max
002a14  4560              CMP      r0,r12
002a16  dd00              BLE      |L1.10778|
002a18  61a0              STR      r0,[r4,#0x18]  ; i_avg_max
                  |L1.10778|
;;;3950   			if(bps[i]._Ii<i_avg_min)i_avg_min=bps[i]._Ii;
002a1a  f8d4c01c          LDR      r12,[r4,#0x1c]  ; i_avg_min
002a1e  4560              CMP      r0,r12
002a20  da00              BGE      |L1.10788|
002a22  61e0              STR      r0,[r4,#0x1c]  ; i_avg_min
                  |L1.10788|
;;;3951   			
;;;3952   			i_avg_summ+=bps[i]._Ii;
002a24  f8d4c020          LDR      r12,[r4,#0x20]  ; i_avg_summ
002a28  4460              ADD      r0,r0,r12
002a2a  6220              STR      r0,[r4,#0x20]  ; i_avg_summ
                  |L1.10796|
002a2c  f1010101          ADD      r1,r1,#1              ;3945
002a30  b2c9              UXTB     r1,r1                 ;3945
                  |L1.10802|
002a32  4291              CMP      r1,r2                 ;3945
002a34  dbe0              BLT      |L1.10744|
;;;3953   			}
;;;3954   		}
;;;3955   	i_avg=i_avg_summ/avg_num;	
002a36  6a20              LDR      r0,[r4,#0x20]  ; i_avg_summ
002a38  fb90f7f7          SDIV     r7,r0,r7
002a3c  6267              STR      r7,[r4,#0x24]  ; i_avg
;;;3956   	
;;;3957   	if(i_avg_min==0)i_avg_min=1;
002a3e  69e0              LDR      r0,[r4,#0x1c]  ; i_avg_min
002a40  2101              MOVS     r1,#1                 ;3927
002a42  b900              CBNZ     r0,|L1.10822|
002a44  61e1              STR      r1,[r4,#0x1c]  ; i_avg_min
                  |L1.10822|
;;;3958   
;;;3959   	avg=i_avg_max;
002a46  69a0              LDR      r0,[r4,#0x18]  ; i_avg_max
;;;3960   	avg*=100;
002a48  f04f0c64          MOV      r12,#0x64
002a4c  fb00f00c          MUL      r0,r0,r12
;;;3961   	avg/=i_avg_min;
002a50  f8d4c01c          LDR      r12,[r4,#0x1c]  ; i_avg_min
002a54  fb90f0fc          SDIV     r0,r0,r12
002a58  62a0              STR      r0,[r4,#0x28]  ; avg
;;;3962   
;;;3963   	if(avg>160) bAVG=1;
002a5a  28a0              CMP      r0,#0xa0
002a5c  dd00              BLE      |L1.10848|
002a5e  7469              STRB     r1,[r5,#0x11]
                  |L1.10848|
;;;3964   	if(avg<120) bAVG=0;
002a60  2878              CMP      r0,#0x78
002a62  da00              BGE      |L1.10854|
002a64  746e              STRB     r6,[r5,#0x11]
                  |L1.10854|
;;;3965   
;;;3966   	if(bAVG==1)
002a66  7c68              LDRB     r0,[r5,#0x11]  ; bAVG
002a68  2801              CMP      r0,#1
002a6a  d130              BNE      |L1.10958|
;;;3967   		{
;;;3968   		for(i=0;i<NUMIST;i++)
002a6c  f04f0100          MOV      r1,#0
;;;3969   			{
;;;3970   			if(bps[i]._state==bsWRK)
;;;3971   				{
;;;3972   				if(bps[i]._Ii>i_avg)bps[i]._x_--;
;;;3973   				if(bps[i]._Ii<i_avg)bps[i]._x_++;
;;;3974   			
;;;3975   				if(bps[i]._x_<-50)bps[i]._x_=-50;
002a70  f06f0431          MVN      r4,#0x31
002a74  e029              B        |L1.10954|
                  |L1.10870|
002a76  ebc100c1          RSB      r0,r1,r1,LSL #3       ;3970
002a7a  eb001001          ADD      r0,r0,r1,LSL #4       ;3970
002a7e  eb030080          ADD      r0,r3,r0,LSL #2       ;3970
002a82  7885              LDRB     r5,[r0,#2]            ;3970
002a84  2d01              CMP      r5,#1                 ;3970
002a86  d11d              BNE      |L1.10948|
002a88  6a45              LDR      r5,[r0,#0x24]         ;3972
002a8a  42bd              CMP      r5,r7                 ;3972
002a8c  dd05              BLE      |L1.10906|
002a8e  f8b05050          LDRH     r5,[r0,#0x50]         ;3972
002a92  f1a50501          SUB      r5,r5,#1              ;3972
002a96  f8a05050          STRH     r5,[r0,#0x50]         ;3972
                  |L1.10906|
002a9a  da05              BGE      |L1.10920|
002a9c  f8b05050          LDRH     r5,[r0,#0x50]         ;3973
002aa0  f1050501          ADD      r5,r5,#1              ;3973
002aa4  f8a05050          STRH     r5,[r0,#0x50]         ;3973
                  |L1.10920|
002aa8  f9b05050          LDRSH    r5,[r0,#0x50]
002aac  42a5              CMP      r5,r4
002aae  da01              BGE      |L1.10932|
002ab0  f8a04050          STRH     r4,[r0,#0x50]
                  |L1.10932|
;;;3976   				if(bps[i]._x_>50)bps[i]._x_=50;	
002ab4  f9b05050          LDRSH    r5,[r0,#0x50]
002ab8  2d32              CMP      r5,#0x32
002aba  dd03              BLE      |L1.10948|
002abc  f04f0532          MOV      r5,#0x32
002ac0  f8a05050          STRH     r5,[r0,#0x50]
                  |L1.10948|
002ac4  f1010101          ADD      r1,r1,#1              ;3968
002ac8  b2c9              UXTB     r1,r1                 ;3968
                  |L1.10954|
002aca  4291              CMP      r1,r2                 ;3968
002acc  dbd3              BLT      |L1.10870|
                  |L1.10958|
;;;3977   				}
;;;3978   			}		
;;;3979   		}			
;;;3980   	}   	 
;;;3981   
;;;3982   
;;;3983   avg_hndl_end:
;;;3984   __nop();  
002ace  bf00              NOP      
;;;3985   }
002ad0  bdf0              POP      {r4-r7,pc}
;;;3986   
                          ENDP

                  rele_hndl PROC
;;;3999   //*************-----------------------------------------------
;;;4000   void rele_hndl(void)
002ad2  e92d5ff0          PUSH     {r4-r12,lr}
;;;4001   {
;;;4002   //static char cnt_rel_sam;
;;;4003   //char temp;
;;;4004   
;;;4005   //temp=0;
;;;4006   
;;;4007   
;;;4008   SET_REG(LPC_PINCON->PINSEL0,0,4*2,6*2);
002ad6  48b7              LDR      r0,|L1.11700|
002ad8  6801              LDR      r1,[r0,#0]
002ada  4ab7              LDR      r2,|L1.11704|
002adc  ea010102          AND      r1,r1,r2
002ae0  6001              STR      r1,[r0,#0]
;;;4009   SET_REG(LPC_GPIO0->FIODIR,63,4,6);
002ae2  4cb6              LDR      r4,|L1.11708|
002ae4  6821              LDR      r1,[r4,#0]
002ae6  f441717c          ORR      r1,r1,#0x3f0
002aea  6021              STR      r1,[r4,#0]
;;;4010   SET_REG(LPC_PINCON->PINSEL7,0,(25-16)*2,2);
002aec  69c1              LDR      r1,[r0,#0x1c]
002aee  f4212140          BIC      r1,r1,#0xc0000
002af2  61c1              STR      r1,[r0,#0x1c]
;;;4011   SET_REG(LPC_GPIO3->FIODIR,1,25,1);
002af4  6e21              LDR      r1,[r4,#0x60]
002af6  f0417100          ORR      r1,r1,#0x2000000
002afa  6621              STR      r1,[r4,#0x60]
;;;4012   SET_REG(LPC_PINCON->PINSEL1,0,(29-16)*2,2);
002afc  6841              LDR      r1,[r0,#4]
002afe  f0216140          BIC      r1,r1,#0xc000000
002b02  6041              STR      r1,[r0,#4]
;;;4013   SET_REG(LPC_GPIO0->FIODIR,1,29,1);
002b04  6820              LDR      r0,[r4,#0]
002b06  f0405000          ORR      r0,r0,#0x20000000
002b0a  6020              STR      r0,[r4,#0]
;;;4014   
;;;4015   
;;;4016   
;;;4017   
;;;4018   
;;;4019   
;;;4020   if((((bat[0]._rel_stat)  || (tbatdisable_stat!=tbdsON))&&(tbatdisable_cmnd))	&& (main_1Hz_cnt>5))
002b0c  48ad              LDR      r0,|L1.11716|
002b0e  4dac              LDR      r5,|L1.11712|
002b10  49ae              LDR      r1,|L1.11724|
002b12  7802              LDRB     r2,[r0,#0]  ; tbatdisable_stat
002b14  48ac              LDR      r0,|L1.11720|
002b16  f895303c          LDRB     r3,[r5,#0x3c]  ; bat
002b1a  f9b11000          LDRSH    r1,[r1,#0]
002b1e  7800              LDRB     r0,[r0,#0]
002b20  4313              ORRS     r3,r3,r2
002b22  d007              BEQ      |L1.11060|
002b24  b130              CBZ      r0,|L1.11060|
002b26  2905              CMP      r1,#5
002b28  dd04              BLE      |L1.11060|
;;;4021   	{
;;;4022   	SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_BAT1,1);
002b2a  69a3              LDR      r3,[r4,#0x18]
002b2c  f4437380          ORR      r3,r3,#0x100
002b30  61a3              STR      r3,[r4,#0x18]
002b32  e003              B        |L1.11068|
                  |L1.11060|
;;;4023   	}
;;;4024   else SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_BAT1,1);	  	
002b34  69e3              LDR      r3,[r4,#0x1c]
002b36  f4437380          ORR      r3,r3,#0x100
002b3a  61e3              STR      r3,[r4,#0x1c]
                  |L1.11068|
;;;4025   
;;;4026   if((((bat[1]._rel_stat) || (tbatdisable_stat!=tbdsON))&&(tbatdisable_cmnd))	&& (main_1Hz_cnt>5))
002b3c  f8953088          LDRB     r3,[r5,#0x88]  ; bat
002b40  4313              ORRS     r3,r3,r2
002b42  d007              BEQ      |L1.11092|
002b44  b130              CBZ      r0,|L1.11092|
002b46  2905              CMP      r1,#5
002b48  dd04              BLE      |L1.11092|
;;;4027   	{
;;;4028   	SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_BAT2,1);
002b4a  69a0              LDR      r0,[r4,#0x18]
002b4c  f0400040          ORR      r0,r0,#0x40
002b50  61a0              STR      r0,[r4,#0x18]
002b52  e003              B        |L1.11100|
                  |L1.11092|
;;;4029   	}
;;;4030   else SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_BAT2,1);
002b54  69e0              LDR      r0,[r4,#0x1c]
002b56  f0400040          ORR      r0,r0,#0x40
002b5a  61e0              STR      r0,[r4,#0x1c]
                  |L1.11100|
;;;4031   
;;;4032   
;;;4033   if(mess_find_unvol((MESS2RELE_HNDL))&&(mess_data[0]==PARAM_RELE_SAMOKALIBR)) 
002b5c  20d2              MOVS     r0,#0xd2
002b5e  f7fffffe          BL       mess_find_unvol
002b62  4d9b              LDR      r5,|L1.11728|
002b64  b110              CBZ      r0,|L1.11116|
002b66  6828              LDR      r0,[r5,#0]  ; mess_data
002b68  2864              CMP      r0,#0x64
002b6a  d048              BEQ      |L1.11262|
                  |L1.11116|
;;;4034   	{
;;;4035   	if(mess_data[1]==1)SET_REG(LPC_GPIO0->FIOSET,1,29,1);
;;;4036   	else if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,29,1);
;;;4037   	}
;;;4038   else SET_REG(LPC_GPIO0->FIOCLR,1,29,1);
002b6c  69e0              LDR      r0,[r4,#0x1c]
002b6e  f0405000          ORR      r0,r0,#0x20000000
002b72  61e0              STR      r0,[r4,#0x1c]
                  |L1.11124|
;;;4039   
;;;4040   
;;;4041   #ifndef UKU2071x
;;;4042   //Реле аварии сети
;;;4043   if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_AV_NET))
;;;4044   	{
;;;4045   	if(mess_data[1]==0) 			SET_REG(LPC_GPIO3->FIOSET,1,SHIFT_REL_AV_NET,1);
;;;4046   	else 						SET_REG(LPC_GPIO3->FIOCLR,1,SHIFT_REL_AV_NET,1);
;;;4047   	}
;;;4048   else	if(!(avar_ind_stat&0x00000001)) 	SET_REG(LPC_GPIO3->FIOSET,1,SHIFT_REL_AV_NET,1);
;;;4049   else 							SET_REG(LPC_GPIO3->FIOCLR,1,SHIFT_REL_AV_NET,1);
;;;4050   #endif
;;;4051   #ifdef UKU2071x
;;;4052   //Реле аварии сети
;;;4053   if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_AV_NET))
002b74  20d2              MOVS     r0,#0xd2
002b76  f7fffffe          BL       mess_find_unvol
;;;4054   	{
;;;4055   	if(mess_data[1]==0)				SET_REG(LPC_GPIO3->FIOCLR,1,SHIFT_REL_AV_NET,1); 
;;;4056   	else 						SET_REG(LPC_GPIO3->FIOSET,1,SHIFT_REL_AV_NET,1);
;;;4057   	}
;;;4058   else	if(!(avar_ind_stat&0x00000001))	SET_REG(LPC_GPIO3->FIOCLR,1,SHIFT_REL_AV_NET,1);
002b7a  4e96              LDR      r6,|L1.11732|
002b7c  b110              CBZ      r0,|L1.11140|
002b7e  6828              LDR      r0,[r5,#0]            ;4053  ; mess_data
002b80  2866              CMP      r0,#0x66              ;4053
002b82  d04b              BEQ      |L1.11292|
                  |L1.11140|
002b84  6830              LDR      r0,[r6,#0]  ; avar_ind_stat
002b86  07c0              LSLS     r0,r0,#31
002b88  d054              BEQ      |L1.11316|
;;;4059   else 					  		SET_REG(LPC_GPIO3->FIOSET,1,SHIFT_REL_AV_NET,1);
002b8a  6fa0              LDR      r0,[r4,#0x78]
002b8c  f0407000          ORR      r0,r0,#0x2000000
002b90  67a0              STR      r0,[r4,#0x78]
                  |L1.11154|
;;;4060   #endif
;;;4061   
;;;4062   #ifdef UKU_3U
;;;4063   //Реле аварий батарей
;;;4064   if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_AV_BAT1))
;;;4065   	{
;;;4066   	if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_BAT1,1);
;;;4067   	else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_BAT1,1);
;;;4068        }
;;;4069   else 
;;;4070   	{
;;;4071   	if(!(avar_ind_stat&0x00000002)) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_BAT1,1);
;;;4072        else SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_BAT1,1);
;;;4073   	} 
;;;4074   
;;;4075   if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_AV_BAT2))
;;;4076   	{
;;;4077   	if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_BAT2,1);
;;;4078   	else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_BAT2,1);
;;;4079        }
;;;4080   else 
;;;4081   	{
;;;4082   	if(!(avar_ind_stat&0x00000004)) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_BAT2,1);
;;;4083        else SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_BAT2,1);
;;;4084   	} 
;;;4085   
;;;4086   if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_AV_BPS))
;;;4087   	{
;;;4088   	if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_BPS,1);
;;;4089   	else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_BPS,1);
;;;4090        }
;;;4091   else 
;;;4092   	{
;;;4093   	if(!(avar_ind_stat&0x000007f8)) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_BPS,1);
;;;4094        else SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_BPS,1);
;;;4095   	} 
;;;4096   
;;;4097   #endif
;;;4098   
;;;4099   
;;;4100   #ifdef UKU_GLONASS
;;;4101   //Реле аварий батарей
;;;4102   if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_AV_BAT1))
;;;4103   	{
;;;4104   	if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_BAT1,1);
;;;4105   	else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_BAT1,1);
;;;4106        }
;;;4107   else 
;;;4108   	{
;;;4109   	if(!(avar_ind_stat&0x00000002)) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_BAT1,1);
;;;4110        else SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_BAT1,1);
;;;4111   	} 
;;;4112   
;;;4113   if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_AV_BAT2))
;;;4114   	{
;;;4115   	if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_BAT2,1);
;;;4116   	else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_BAT2,1);
;;;4117        }
;;;4118   else 
;;;4119   	{
;;;4120   	if(!(avar_ind_stat&0x00000004)) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_BAT2,1);
;;;4121        else SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_BAT2,1);
;;;4122   	} 
;;;4123   
;;;4124   if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_AV_BPS))
;;;4125   	{
;;;4126   	if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_BPS,1);
;;;4127   	else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_BPS,1);
;;;4128        }
;;;4129   else 
;;;4130   	{
;;;4131   	if(!(avar_ind_stat&0x000007f8)) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_BPS,1);
;;;4132        else SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_BPS,1);
;;;4133   	} 
;;;4134   
;;;4135   #endif
;;;4136   
;;;4137   #ifdef U 
;;;4138   
;;;4139   #endif
;;;4140   
;;;4141   #ifdef UKU_RSTKM
;;;4142   
;;;4143   //Реле общей аварии
;;;4144   if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_AV_COMM))
;;;4145   	{
;;;4146   	if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_COMM,1);
;;;4147   	else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_COMM,1);
;;;4148   	}
;;;4149   else 
;;;4150   	{
;;;4151        if(  (!(avar_ind_stat&0x00007fff))/* &&
;;;4152             ((!SK_REL_EN[0]) || (sk_av_stat[0]!=sasON))  &&
;;;4153             ((!SK_REL_EN[1]) || (sk_av_stat[1]!=sasON))  &&
;;;4154             ((!SK_REL_EN[2]) || (sk_av_stat[2]!=sasON))  &&
;;;4155             ((!SK_REL_EN[3]) || (sk_av_stat[3]!=sasON))*/  )SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_COMM,1);
;;;4156        else SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_COMM,1);
;;;4157   	}
;;;4158   	
;;;4159   
;;;4160   //Реле освещения
;;;4161   if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_LIGHT))
;;;4162   	{
;;;4163   	if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_LIGHT,1);
;;;4164   	else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_LIGHT,1);
;;;4165        }
;;;4166   else 
;;;4167   	{
;;;4168   	if(sk_av_stat[0]!=sasON) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_LIGHT,1);
;;;4169        else SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_LIGHT,1);
;;;4170   	}
;;;4171   
;;;4172   
;;;4173   //Реле выключения нагрузки
;;;4174   if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_LOAD_OFF))
;;;4175   	{
;;;4176   	if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_LOAD_OFF,1);
;;;4177   	else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_LOAD_OFF,1);
;;;4178        }
;;;4179   else if(tloaddisable_cmnd==0)
;;;4180   	{
;;;4181   	SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_LOAD_OFF,1);
;;;4182   	}
;;;4183   else if((tloaddisable_cmnd)&&(tloaddisable_cmnd<=11))
;;;4184   	{
;;;4185   	SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_LOAD_OFF,1);
;;;4186   	}
;;;4187   
;;;4188   else 
;;;4189   	{
;;;4190   	if(!(tloaddisable_stat==tldsON)) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_LOAD_OFF,1);
;;;4191        else SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_LOAD_OFF,1);
;;;4192   	} 
;;;4193   
;;;4194   //Реле осевого вентилятора
;;;4195   if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_VENT))
;;;4196   	{
;;;4197   	if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_VENT,1);
;;;4198   	else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_VENT,1);
;;;4199   	}
;;;4200   else 
;;;4201   	{
;;;4202   	if(mixer_vent_stat==mvsOFF) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_VENT,1);
;;;4203        else SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_VENT,1);
;;;4204   	} 
;;;4205   
;;;4206   #endif
;;;4207   
;;;4208   #ifdef UKU_KONTUR
;;;4209   
;;;4210   //Реле общей аварии
;;;4211   if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_AV_COMM))
;;;4212   	{
;;;4213   	if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_COMM,1);
;;;4214   	else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_COMM,1);
;;;4215   	}
;;;4216   else 
;;;4217   	{
;;;4218        if(  (!(avar_ind_stat&0x00007fff)) &&
;;;4219             ((!SK_REL_EN[0]) || (sk_av_stat[0]!=sasON))  &&
;;;4220             ((!SK_REL_EN[1]) || (sk_av_stat[1]!=sasON))  &&
;;;4221             ((!SK_REL_EN[2]) || (sk_av_stat[2]!=sasON))  /*&&
;;;4222             ((!SK_REL_EN[3]) || (sk_av_stat[3]!=sasON))*/  )SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_COMM,1);
;;;4223        else SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_COMM,1);
;;;4224   	}
;;;4225   
;;;4226   	
;;;4227   //rel_warm_plazma=0;
;;;4228   //Реле освещения   
;;;4229   /*
;;;4230   if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_WARM))
;;;4231   	{
;;;4232   	if(mess_data[1]==0)
;;;4233   		{
;;;4234   		SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_WARM,1);
;;;4235   		rel_warm_plazma=1;
;;;4236   		}
;;;4237   	else if(mess_data[1]==1) 
;;;4238   		{
;;;4239   		SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_WARM,1);
;;;4240   		rel_warm_plazma=2;
;;;4241   		}
;;;4242        }
;;;4243   else 
;;;4244   	{
;;;4245   	if(warm_stat_k==wsOFF) 
;;;4246   		{
;;;4247   		SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_WARM,1);
;;;4248   		rel_warm_plazma=3;
;;;4249   		}
;;;4250        else 
;;;4251   		{
;;;4252   		SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_WARM,1);
;;;4253   		rel_warm_plazma=4;
;;;4254   		}
;;;4255   	}
;;;4256   */
;;;4257   //Реле освещения
;;;4258   if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_LIGHT))
;;;4259   	{
;;;4260   	if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_LIGHT,1);
;;;4261   	else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_LIGHT,1);
;;;4262        }
;;;4263   else 
;;;4264   	{
;;;4265   	if(sk_av_stat[0]!=sasON) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_LIGHT,1);
;;;4266        else SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_LIGHT,1);
;;;4267   	}
;;;4268   
;;;4269   
;;;4270   
;;;4271   //Реле выключения нагрузки
;;;4272   if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_LOAD_OFF))
;;;4273   	{
;;;4274   	if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_LOAD_OFF,1);
;;;4275   	else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_LOAD_OFF,1);
;;;4276        }
;;;4277   else if(tloaddisable_cmnd==0)
;;;4278   	{
;;;4279   	SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_LOAD_OFF,1);
;;;4280   	}
;;;4281   else if((tloaddisable_cmnd)&&(tloaddisable_cmnd<=11))
;;;4282   	{
;;;4283   	SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_LOAD_OFF,1);
;;;4284   	}
;;;4285   
;;;4286   else 
;;;4287   	{
;;;4288   	if(!(tloaddisable_stat==tldsON)) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_LOAD_OFF,1);
;;;4289        else SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_LOAD_OFF,1);
;;;4290   	} 
;;;4291   
;;;4292   //Реле осевого вентилятора или отопителя
;;;4293   if(RELE_LOG)
;;;4294   	{
;;;4295   	if((mess_find_unvol(MESS2RELE_HNDL))&&(mess_data[0]==PARAM_RELE_VENT_WARM))
;;;4296   		{
;;;4297   		if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_VENT_WARM,1);
;;;4298   		else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_VENT_WARM,1);
;;;4299   		}
;;;4300   	else 
;;;4301   		{
;;;4302   		if(warm_stat_k==wsOFF) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_VENT_WARM,1);
;;;4303   	     else SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_VENT_WARM,1);
;;;4304   		} 
;;;4305   
;;;4306   	}
;;;4307   else 
;;;4308   	{
;;;4309   	if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_VENT_WARM))
;;;4310   		{
;;;4311   		if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_VENT_WARM,1);
;;;4312   		else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_VENT_WARM,1);
;;;4313   		}
;;;4314   	else 
;;;4315   		{
;;;4316   		if(vent_stat_k==vsOFF) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_VENT_WARM,1);
;;;4317   	     else SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_VENT_WARM,1);
;;;4318   		} 
;;;4319   	}
;;;4320   #endif
;;;4321   
;;;4322   #ifdef UKU_6U
;;;4323   //Реле аварий батарей
;;;4324   if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_AV_BAT1))
;;;4325   	{
;;;4326   	if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_BAT1,1);
;;;4327   	else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_BAT1,1);
;;;4328        }
;;;4329   else 
;;;4330   	{
;;;4331   	if(!(avar_ind_stat&0x00000002)) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_BAT1,1);
;;;4332        else SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_BAT1,1);
;;;4333   	} 
;;;4334   
;;;4335   if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_AV_BAT2))
;;;4336   	{
;;;4337   	if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_BAT2,1);
;;;4338   	else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_BAT2,1);
;;;4339       }
;;;4340   else if(NPN_OUT==npnoRELEAVBAT2)
;;;4341   	{
;;;4342   	if(npn_stat==npnsOFF)//&&(mess_find_unvol(MESS2RELE_HNDL))&&(mess_data[0]==PARAM_RELE_NPN))
;;;4343   		{
;;;4344   		/*if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_BAT2,1);
;;;4345   		else if(mess_data[1]==1)*/ SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_BAT2,1);
;;;4346        	}
;;;4347   	else SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_BAT2,1);
;;;4348   	}
;;;4349   else 
;;;4350   	{
;;;4351   	if(!(avar_ind_stat&0x00000004)) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_BAT2,1);
;;;4352       else SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_BAT2,1);
;;;4353   	} 
;;;4354   
;;;4355   if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_AV_BPS))
;;;4356   	{
;;;4357   	if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_BPS,1);
;;;4358   	else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_BPS,1);
;;;4359        }
;;;4360   else 
;;;4361   	{
;;;4362   	if(!(avar_ind_stat&0x000007f8)) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_BPS,1);
;;;4363        else SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_BPS,1);
;;;4364   	} 
;;;4365   
;;;4366   if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_VENT))
;;;4367   	{
;;;4368   	if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_VENT,1);
;;;4369   	else SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_VENT,1);
;;;4370   	}
;;;4371   else if((NPN_OUT==npnoRELEVENT))
;;;4372   	{
;;;4373   	if(npn_stat==npnsOFF)//&&(mess_find_unvol(MESS2RELE_HNDL))&&(mess_data[0]==PARAM_RELE_NPN))
;;;4374   		{
;;;4375   		/*if(mess_data[1]==0)*/ SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_VENT,1);
;;;4376   		//else SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_VENT,1);
;;;4377       	}
;;;4378   	else SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_VENT,1);
;;;4379   	}
;;;4380   else 
;;;4381   	{
;;;4382   	if(!vent_stat) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_VENT,1);
;;;4383   	else SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_VENT,1);
;;;4384   	}
;;;4385   
;;;4386   #endif
;;;4387   
;;;4388   #ifdef UKU_220
;;;4389   //Реле аварий батарей
;;;4390   if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_AV_BAT))
;;;4391   	{
;;;4392   	if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_BAT,1);
;;;4393   	else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_BAT,1);
;;;4394        }
;;;4395   else 
;;;4396   	{
;;;4397   	if(!(avar_ind_stat&0x00000002)) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_BAT,1);
;;;4398        else SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_BAT,1);
;;;4399   	} 
;;;4400   
;;;4401   if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_AV_BPS))
;;;4402   	{
;;;4403   	if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_BPS,1);
;;;4404   	else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_BPS,1);
;;;4405        }
;;;4406   else 
;;;4407   	{
;;;4408   	if(!(avar_ind_stat&0x000007f8)) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_BPS,1);
;;;4409        else SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_BPS,1);
;;;4410   	} 
;;;4411   
;;;4412   if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_VENT))
;;;4413   	{
;;;4414   	if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_VENT,1);
;;;4415   	else SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_VENT,1);
;;;4416   	}
;;;4417   else 
;;;4418   	{
;;;4419   	if((RELE_VENT_LOGIC==0)||(RELE_VENT_LOGIC==1))
;;;4420   		{
;;;4421   		if(vent_stat) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_VENT,1);
;;;4422   		else SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_VENT,1);
;;;4423   		}
;;;4424   	else 
;;;4425   		{
;;;4426   		if((avar_ind_stat&0x00000004)) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_VENT,1);
;;;4427        	else SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_VENT,1);
;;;4428   		}
;;;4429   	}
;;;4430   
;;;4431   #endif
;;;4432   
;;;4433   #ifdef UKU_220_V2
;;;4434   //Реле аварий батарей
;;;4435   if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_AV_BAT))
;;;4436   	{
;;;4437   	if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_BAT,1);
;;;4438   	else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_BAT,1);
;;;4439        }
;;;4440   else 
;;;4441   	{
;;;4442   	if(!(avar_ind_stat&0x00000002)) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_BAT,1);
;;;4443        else SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_BAT,1);
;;;4444   	} 
;;;4445   
;;;4446   if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_AV_BPS))
;;;4447   	{
;;;4448   	if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_BPS,1);
;;;4449   	else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_BPS,1);
;;;4450        }
;;;4451   else 
;;;4452   	{
;;;4453   	if(!(avar_ind_stat&0x000007f8)) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_BPS,1);
;;;4454        else SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_BPS,1);
;;;4455   	} 
;;;4456   
;;;4457   if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_VENT))
;;;4458   	{
;;;4459   	if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_VENT,1);
;;;4460   	else SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_VENT,1);
;;;4461   	}
;;;4462   else 
;;;4463   	{
;;;4464   	if((RELE_VENT_LOGIC==0)||(RELE_VENT_LOGIC==1))
;;;4465   		{
;;;4466   		if(vent_stat) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_VENT,1);
;;;4467   		else SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_VENT,1);
;;;4468   		}
;;;4469   	else 
;;;4470   		{
;;;4471   		if((avar_ind_stat&0x00000004)) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_VENT,1);
;;;4472        	else SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_VENT,1);
;;;4473   		}
;;;4474   	}
;;;4475   
;;;4476   #endif
;;;4477   
;;;4478   #ifdef UKU_220_IPS_TERMOKOMPENSAT
;;;4479   
;;;4480   if((AUSW_MAIN==22010)||(AUSW_MAIN==22011))
002b92  4891              LDR      r0,|L1.11736|
;;;4481   	{
;;;4482   	#ifndef UKU2071x
;;;4483   	if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_AV_NET))
;;;4484   		{
;;;4485   		if(mess_data[1]==0) SET_REG(LPC_GPIO3->FIOSET,1,25,1);
;;;4486   		else SET_REG(LPC_GPIO3->FIOCLR,1,25,1);
;;;4487   		}
;;;4488   	else	if(!(avar_ind_stat&0x00000001)) SET_REG(LPC_GPIO3->FIOSET,1,25,1);
;;;4489   	else SET_REG(LPC_GPIO3->FIOCLR,1,25,1);
;;;4490   	#endif
;;;4491   
;;;4492   	#ifdef UKU2071x
;;;4493   		#ifndef APSENERGIA
;;;4494   		if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_AV_NET))
;;;4495   			{
;;;4496   			if(mess_data[1]==0) SET_REG(LPC_GPIO3->FIOCLR,1,25,1);
;;;4497   			else SET_REG(LPC_GPIO3->FIOSET,1,25,1);
;;;4498   			}
;;;4499   		else	if(!(avar_ind_stat&0x00000001)) SET_REG(LPC_GPIO3->FIOCLR,1,25,1);
;;;4500   		else SET_REG(LPC_GPIO3->FIOSET,1,25,1);
;;;4501   		#endif
;;;4502   
;;;4503   		#ifdef APSENERGIA
;;;4504   		if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_AV_NET))
;;;4505   			{
;;;4506   			if(mess_data[1]==0) SET_REG(LPC_GPIO3->FIOCLR,1,25,1);
;;;4507   			else SET_REG(LPC_GPIO3->FIOSET,1,25,1);
;;;4508   			}
;;;4509   		else if((mess_find_unvol(MESS2RELE_HNDL))&& (mess_data[0]==PARAM_RELE_BAT_IS_DISCHARGED))  SET_REG(LPC_GPIO3->FIOCLR,1,25,1);
;;;4510   		else SET_REG(LPC_GPIO3->FIOSET,1,25,1);
;;;4511   		#endif
;;;4512   
;;;4513   	#endif
;;;4514   	if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_AV_BPS))
;;;4515   		{
;;;4516   		if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,7,1);
;;;4517   		else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOSET,1,7,1);
;;;4518   	     }
;;;4519   	else 
;;;4520   		{
;;;4521   		if(!(avar_ind_stat&0x100007f8)) SET_REG(LPC_GPIO0->FIOCLR,1,7,1);
;;;4522   	     else SET_REG(LPC_GPIO0->FIOSET,1,7,1);
;;;4523   		} 
;;;4524   
;;;4525   	//Реле аварий батарей
;;;4526   	#ifndef APSENERGIA
;;;4527   	if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_AV_BAT))
;;;4528   		{
;;;4529   		if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,4,1);
;;;4530   		else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOSET,1,4,1);
;;;4531        	}
;;;4532   	else 
;;;4533   		{
;;;4534   		if(!(ips_bat_av_stat)) SET_REG(LPC_GPIO0->FIOCLR,1,4,1);
002b94  f8df8244          LDR      r8,|L1.11740|
002b98  4f91              LDR      r7,|L1.11744|
002b9a  8800              LDRH     r0,[r0,#0]            ;4480  ; AUSW_MAIN
002b9c  f5a041aa          SUB      r1,r0,#0x5500         ;4480
002ba0  39fa              SUBS     r1,r1,#0xfa           ;4480
002ba2  d001              BEQ      |L1.11176|
002ba4  1e49              SUBS     r1,r1,#1              ;4480
002ba6  d16f              BNE      |L1.11400|
                  |L1.11176|
002ba8  20d2              MOVS     r0,#0xd2              ;4494
002baa  f7fffffe          BL       mess_find_unvol
002bae  b110              CBZ      r0,|L1.11190|
002bb0  6828              LDR      r0,[r5,#0]            ;4494  ; mess_data
002bb2  2866              CMP      r0,#0x66              ;4494
002bb4  d043              BEQ      |L1.11326|
                  |L1.11190|
002bb6  6830              LDR      r0,[r6,#0]            ;4499  ; avar_ind_stat
002bb8  07c0              LSLS     r0,r0,#31             ;4499
002bba  d04d              BEQ      |L1.11352|
002bbc  6fa0              LDR      r0,[r4,#0x78]         ;4500
002bbe  f0407000          ORR      r0,r0,#0x2000000      ;4500
002bc2  67a0              STR      r0,[r4,#0x78]         ;4500
                  |L1.11204|
002bc4  20d2              MOVS     r0,#0xd2              ;4514
002bc6  f7fffffe          BL       mess_find_unvol
002bca  b110              CBZ      r0,|L1.11218|
002bcc  6828              LDR      r0,[r5,#0]            ;4514  ; mess_data
002bce  286a              CMP      r0,#0x6a              ;4514
002bd0  d047              BEQ      |L1.11362|
                  |L1.11218|
002bd2  6830              LDR      r0,[r6,#0]            ;4521  ; avar_ind_stat
002bd4  4238              TST      r0,r7                 ;4521
002bd6  d052              BEQ      |L1.11390|
002bd8  69a0              LDR      r0,[r4,#0x18]         ;4522
002bda  f0400080          ORR      r0,r0,#0x80           ;4522
002bde  61a0              STR      r0,[r4,#0x18]         ;4522
                  |L1.11232|
002be0  20d2              MOVS     r0,#0xd2              ;4527
002be2  f7fffffe          BL       mess_find_unvol
002be6  b110              CBZ      r0,|L1.11246|
002be8  6828              LDR      r0,[r5,#0]            ;4527  ; mess_data
002bea  2867              CMP      r0,#0x67              ;4527
002bec  d04d              BEQ      |L1.11402|
                  |L1.11246|
002bee  f8980000          LDRB     r0,[r8,#0]  ; ips_bat_av_stat
002bf2  b380              CBZ      r0,|L1.11350|
;;;4535        	else SET_REG(LPC_GPIO0->FIOSET,1,4,1);
002bf4  69a0              LDR      r0,[r4,#0x18]
002bf6  f0400010          ORR      r0,r0,#0x10
002bfa  61a0              STR      r0,[r4,#0x18]
002bfc  e1f2              B        |L1.12260|
                  |L1.11262|
002bfe  6868              LDR      r0,[r5,#4]            ;4035  ; mess_data
002c00  2801              CMP      r0,#1                 ;4035
002c02  d006              BEQ      |L1.11282|
002c04  2800              CMP      r0,#0                 ;4036
002c06  d1b5              BNE      |L1.11124|
002c08  69e0              LDR      r0,[r4,#0x1c]         ;4036
002c0a  f0405000          ORR      r0,r0,#0x20000000     ;4036
002c0e  61e0              STR      r0,[r4,#0x1c]         ;4036
002c10  e7b0              B        |L1.11124|
                  |L1.11282|
002c12  69a0              LDR      r0,[r4,#0x18]         ;4035
002c14  f0405000          ORR      r0,r0,#0x20000000     ;4035
002c18  61a0              STR      r0,[r4,#0x18]         ;4035
002c1a  e7ab              B        |L1.11124|
                  |L1.11292|
002c1c  6868              LDR      r0,[r5,#4]            ;4055  ; mess_data
002c1e  b120              CBZ      r0,|L1.11306|
002c20  6fa0              LDR      r0,[r4,#0x78]         ;4056
002c22  f0407000          ORR      r0,r0,#0x2000000      ;4056
002c26  67a0              STR      r0,[r4,#0x78]         ;4056
002c28  e7b3              B        |L1.11154|
                  |L1.11306|
002c2a  6fe0              LDR      r0,[r4,#0x7c]         ;4055
002c2c  f0407000          ORR      r0,r0,#0x2000000      ;4055
002c30  67e0              STR      r0,[r4,#0x7c]         ;4055
002c32  e7ae              B        |L1.11154|
                  |L1.11316|
002c34  6fe0              LDR      r0,[r4,#0x7c]         ;4058
002c36  f0407000          ORR      r0,r0,#0x2000000      ;4058
002c3a  67e0              STR      r0,[r4,#0x7c]         ;4058
002c3c  e7a9              B        |L1.11154|
                  |L1.11326|
002c3e  6868              LDR      r0,[r5,#4]            ;4496  ; mess_data
002c40  b120              CBZ      r0,|L1.11340|
002c42  6fa0              LDR      r0,[r4,#0x78]         ;4497
002c44  f0407000          ORR      r0,r0,#0x2000000      ;4497
002c48  67a0              STR      r0,[r4,#0x78]         ;4497
002c4a  e7bb              B        |L1.11204|
                  |L1.11340|
002c4c  6fe0              LDR      r0,[r4,#0x7c]         ;4496
002c4e  f0407000          ORR      r0,r0,#0x2000000      ;4496
002c52  67e0              STR      r0,[r4,#0x7c]         ;4496
002c54  e7b6              B        |L1.11204|
                  |L1.11350|
002c56  e027              B        |L1.11432|
                  |L1.11352|
002c58  6fe0              LDR      r0,[r4,#0x7c]         ;4499
002c5a  f0407000          ORR      r0,r0,#0x2000000      ;4499
002c5e  67e0              STR      r0,[r4,#0x7c]         ;4499
002c60  e7b0              B        |L1.11204|
                  |L1.11362|
002c62  6868              LDR      r0,[r5,#4]            ;4516  ; mess_data
002c64  b130              CBZ      r0,|L1.11380|
002c66  2801              CMP      r0,#1                 ;4517
002c68  d1ba              BNE      |L1.11232|
002c6a  69a0              LDR      r0,[r4,#0x18]         ;4517
002c6c  f0400080          ORR      r0,r0,#0x80           ;4517
002c70  61a0              STR      r0,[r4,#0x18]         ;4517
002c72  e7b5              B        |L1.11232|
                  |L1.11380|
002c74  69e0              LDR      r0,[r4,#0x1c]         ;4516
002c76  f0400080          ORR      r0,r0,#0x80           ;4516
002c7a  61e0              STR      r0,[r4,#0x1c]         ;4516
002c7c  e7b0              B        |L1.11232|
                  |L1.11390|
002c7e  69e0              LDR      r0,[r4,#0x1c]         ;4521
002c80  f0400080          ORR      r0,r0,#0x80           ;4521
002c84  61e0              STR      r0,[r4,#0x1c]         ;4521
002c86  e7ab              B        |L1.11232|
                  |L1.11400|
002c88  e013              B        |L1.11442|
                  |L1.11402|
002c8a  6868              LDR      r0,[r5,#4]            ;4529  ; mess_data
002c8c  b110              CBZ      r0,|L1.11412|
002c8e  2801              CMP      r0,#1                 ;4530
002c90  d005              BEQ      |L1.11422|
002c92  e1a7              B        |L1.12260|
                  |L1.11412|
002c94  69e0              LDR      r0,[r4,#0x1c]         ;4529
002c96  f0400010          ORR      r0,r0,#0x10           ;4529
002c9a  61e0              STR      r0,[r4,#0x1c]         ;4529
002c9c  e1a2              B        |L1.12260|
                  |L1.11422|
002c9e  69a0              LDR      r0,[r4,#0x18]         ;4530
002ca0  f0400010          ORR      r0,r0,#0x10           ;4530
002ca4  61a0              STR      r0,[r4,#0x18]         ;4530
002ca6  e19d              B        |L1.12260|
                  |L1.11432|
002ca8  69e0              LDR      r0,[r4,#0x1c]         ;4534
002caa  f0400010          ORR      r0,r0,#0x10           ;4534
002cae  61e0              STR      r0,[r4,#0x1c]         ;4534
002cb0  e198              B        |L1.12260|
                  |L1.11442|
;;;4536   		}
;;;4537   	#endif
;;;4538   	#ifdef APSENERGIA
;;;4539   	if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_AV_BAT))
;;;4540   		{
;;;4541   		if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,4,1);
;;;4542   		else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOSET,1,4,1);
;;;4543        	}
;;;4544   	else 
;;;4545   		{
;;;4546   		if(!apsEnergiaStat)SET_REG(LPC_GPIO0->FIOSET,1,4,1);
;;;4547   		else SET_REG(LPC_GPIO0->FIOCLR,1,4,1);
;;;4548   		}
;;;4549   	#endif
;;;4550   	}
;;;4551   
;;;4552   else	if(AUSW_MAIN==22023)
002cb2  f5a041ac          SUB      r1,r0,#0x5600
002cb6  3907              SUBS     r1,#7
002cb8  d162              BNE      |L1.11648|
;;;4553   	{
;;;4554   
;;;4555   	//Реле аварий батарей
;;;4556   	if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_AV_BAT))
002cba  20d2              MOVS     r0,#0xd2
002cbc  f7fffffe          BL       mess_find_unvol
002cc0  b110              CBZ      r0,|L1.11464|
002cc2  6828              LDR      r0,[r5,#0]  ; mess_data
002cc4  2867              CMP      r0,#0x67
002cc6  d023              BEQ      |L1.11536|
                  |L1.11464|
;;;4557   		{
;;;4558   		if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,4,1);
;;;4559   		else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOSET,1,4,1);
;;;4560        	}
;;;4561   	else 
;;;4562   		{
;;;4563   		if(!(ips_bat_av_stat)) SET_REG(LPC_GPIO0->FIOCLR,1,4,1);
002cc8  f8980000          LDRB     r0,[r8,#0]  ; ips_bat_av_stat
002ccc  b370              CBZ      r0,|L1.11564|
;;;4564        	else SET_REG(LPC_GPIO0->FIOSET,1,4,1);
002cce  69a0              LDR      r0,[r4,#0x18]
002cd0  f0400010          ORR      r0,r0,#0x10
002cd4  61a0              STR      r0,[r4,#0x18]
                  |L1.11478|
;;;4565   		} 
;;;4566   
;;;4567   
;;;4568   	//Реле аварии сети ТУТ КАКАЯ то ЛАЖА с аварией сети. Обращение к разным портам
;;;4569   	#ifndef UKU2071x
;;;4570   	if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_AV_NET))
;;;4571   		{
;;;4572   		if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_NET,1);
;;;4573   		else SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_NET,1);
;;;4574   		}
;;;4575   	else	if(!(avar_ind_stat&0x00000001)) SET_REG(LPC_GPIO1->FIOCLR,1,SHIFT_REL_AV_NET,1);
;;;4576   	else SET_REG(LPC_GPIO3->FIOCLR,1,SHIFT_REL_AV_NET,1);
;;;4577   	#endif
;;;4578   	#ifdef UKU2071x
;;;4579   	if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_AV_NET))
002cd6  20d2              MOVS     r0,#0xd2
002cd8  f7fffffe          BL       mess_find_unvol
002cdc  b110              CBZ      r0,|L1.11492|
002cde  6828              LDR      r0,[r5,#0]  ; mess_data
002ce0  2866              CMP      r0,#0x66
002ce2  d028              BEQ      |L1.11574|
                  |L1.11492|
;;;4580   		{
;;;4581   		if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_NET,1);
;;;4582   		else SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_NET,1);
;;;4583   		}
;;;4584   	else	if(!(avar_ind_stat&0x00000001)) SET_REG(LPC_GPIO1->FIOSET,1,SHIFT_REL_AV_NET,1);
002ce4  6830              LDR      r0,[r6,#0]  ; avar_ind_stat
002ce6  07c0              LSLS     r0,r0,#31
002ce8  d031              BEQ      |L1.11598|
;;;4585   	else SET_REG(LPC_GPIO3->FIOSET,1,SHIFT_REL_AV_NET,1);
002cea  6fa0              LDR      r0,[r4,#0x78]
002cec  f0407000          ORR      r0,r0,#0x2000000
002cf0  67a0              STR      r0,[r4,#0x78]
                  |L1.11506|
;;;4586   	#endif
;;;4587   
;;;4588   	if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_AV_BPS))
002cf2  20d2              MOVS     r0,#0xd2
002cf4  f7fffffe          BL       mess_find_unvol
002cf8  b110              CBZ      r0,|L1.11520|
002cfa  6828              LDR      r0,[r5,#0]  ; mess_data
002cfc  286a              CMP      r0,#0x6a
002cfe  d02b              BEQ      |L1.11608|
                  |L1.11520|
;;;4589   		{
;;;4590   		if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,7,1);
;;;4591   		else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOSET,1,7,1);
;;;4592   	     }
;;;4593   	else 
;;;4594   		{
;;;4595   		if(!(avar_ind_stat&0x100007f8)) SET_REG(LPC_GPIO0->FIOCLR,1,7,1);
002d00  6830              LDR      r0,[r6,#0]  ; avar_ind_stat
002d02  4238              TST      r0,r7
002d04  d037              BEQ      |L1.11638|
;;;4596   	     else SET_REG(LPC_GPIO0->FIOSET,1,7,1);
002d06  69a0              LDR      r0,[r4,#0x18]
002d08  f0400080          ORR      r0,r0,#0x80
002d0c  61a0              STR      r0,[r4,#0x18]
002d0e  e169              B        |L1.12260|
                  |L1.11536|
002d10  6868              LDR      r0,[r5,#4]            ;4558  ; mess_data
002d12  b130              CBZ      r0,|L1.11554|
002d14  2801              CMP      r0,#1                 ;4559
002d16  d1de              BNE      |L1.11478|
002d18  69a0              LDR      r0,[r4,#0x18]         ;4559
002d1a  f0400010          ORR      r0,r0,#0x10           ;4559
002d1e  61a0              STR      r0,[r4,#0x18]         ;4559
002d20  e7d9              B        |L1.11478|
                  |L1.11554|
002d22  69e0              LDR      r0,[r4,#0x1c]         ;4558
002d24  f0400010          ORR      r0,r0,#0x10           ;4558
002d28  61e0              STR      r0,[r4,#0x1c]         ;4558
002d2a  e7d4              B        |L1.11478|
                  |L1.11564|
002d2c  69e0              LDR      r0,[r4,#0x1c]         ;4563
002d2e  f0400010          ORR      r0,r0,#0x10           ;4563
002d32  61e0              STR      r0,[r4,#0x1c]         ;4563
002d34  e7cf              B        |L1.11478|
                  |L1.11574|
002d36  6868              LDR      r0,[r5,#4]            ;4581  ; mess_data
002d38  b120              CBZ      r0,|L1.11588|
002d3a  69e0              LDR      r0,[r4,#0x1c]         ;4582
002d3c  f0407000          ORR      r0,r0,#0x2000000      ;4582
002d40  61e0              STR      r0,[r4,#0x1c]         ;4582
002d42  e7d6              B        |L1.11506|
                  |L1.11588|
002d44  69a0              LDR      r0,[r4,#0x18]         ;4581
002d46  f0407000          ORR      r0,r0,#0x2000000      ;4581
002d4a  61a0              STR      r0,[r4,#0x18]         ;4581
002d4c  e7d1              B        |L1.11506|
                  |L1.11598|
002d4e  6ba0              LDR      r0,[r4,#0x38]         ;4584
002d50  f0407000          ORR      r0,r0,#0x2000000      ;4584
002d54  63a0              STR      r0,[r4,#0x38]         ;4584
002d56  e7cc              B        |L1.11506|
                  |L1.11608|
002d58  6868              LDR      r0,[r5,#4]            ;4590  ; mess_data
002d5a  b110              CBZ      r0,|L1.11618|
002d5c  2801              CMP      r0,#1                 ;4591
002d5e  d005              BEQ      |L1.11628|
002d60  e140              B        |L1.12260|
                  |L1.11618|
002d62  69e0              LDR      r0,[r4,#0x1c]         ;4590
002d64  f0400080          ORR      r0,r0,#0x80           ;4590
002d68  61e0              STR      r0,[r4,#0x1c]         ;4590
002d6a  e13b              B        |L1.12260|
                  |L1.11628|
002d6c  69a0              LDR      r0,[r4,#0x18]         ;4591
002d6e  f0400080          ORR      r0,r0,#0x80           ;4591
002d72  61a0              STR      r0,[r4,#0x18]         ;4591
002d74  e136              B        |L1.12260|
                  |L1.11638|
002d76  69e0              LDR      r0,[r4,#0x1c]         ;4595
002d78  f0400080          ORR      r0,r0,#0x80           ;4595
002d7c  61e0              STR      r0,[r4,#0x1c]         ;4595
002d7e  e131              B        |L1.12260|
                  |L1.11648|
;;;4597   		} 
;;;4598   	}
;;;4599   else	if((AUSW_MAIN==22043)||(AUSW_MAIN==22044))
002d80  f5a041ac          SUB      r1,r0,#0x5600
002d84  391b              SUBS     r1,r1,#0x1b
002d86  d001              BEQ      |L1.11660|
002d88  1e49              SUBS     r1,r1,#1
002d8a  d173              BNE      |L1.11892|
                  |L1.11660|
;;;4600   	{
;;;4601   	//Реле аварий батарей
;;;4602   	if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_AV_BAT))
002d8c  20d2              MOVS     r0,#0xd2
002d8e  f7fffffe          BL       mess_find_unvol
002d92  b110              CBZ      r0,|L1.11674|
002d94  6828              LDR      r0,[r5,#0]  ; mess_data
002d96  2867              CMP      r0,#0x67
002d98  d052              BEQ      |L1.11840|
                  |L1.11674|
;;;4603   		{
;;;4604   		if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,4,1);
;;;4605   		else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOSET,1,4,1);
;;;4606        	}
;;;4607   	else 
;;;4608   		{
;;;4609   		if(!(ips_bat_av_stat)) SET_REG(LPC_GPIO0->FIOCLR,1,4,1);
002d9a  f8980000          LDRB     r0,[r8,#0]  ; ips_bat_av_stat
002d9e  b3f0              CBZ      r0,|L1.11806|
;;;4610        	else SET_REG(LPC_GPIO0->FIOSET,1,4,1);
002da0  69a0              LDR      r0,[r4,#0x18]
002da2  f0400010          ORR      r0,r0,#0x10
002da6  e01d              B        |L1.11748|
                  |L1.11688|
                          DCD      bps
                  |L1.11692|
                          DCD      NUMIST
                  |L1.11696|
                          DCD      ||area_number.25||+0x80
                  |L1.11700|
                          DCD      0x4002c000
                  |L1.11704|
                          DCD      0xfff000ff
                  |L1.11708|
                          DCD      0x2009c000
                  |L1.11712|
                          DCD      bat
                  |L1.11716|
                          DCD      tbatdisable_stat
                  |L1.11720|
                          DCD      tbatdisable_cmnd
                  |L1.11724|
                          DCD      main_1Hz_cnt
                  |L1.11728|
                          DCD      mess_data
                  |L1.11732|
                          DCD      avar_ind_stat
                  |L1.11736|
                          DCD      AUSW_MAIN
                  |L1.11740|
                          DCD      ips_bat_av_stat
                  |L1.11744|
                          DCD      0x100007f8
                  |L1.11748|
002de4  61a0              STR      r0,[r4,#0x18]
                  |L1.11750|
;;;4611   		} 
;;;4612   	//Реле аварии сети ТУТ КАКАЯ то ЛАЖА с аварией сети. Обращение к разным портам
;;;4613   	#ifndef UKU2071x 
;;;4614   	if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_AV_NET))
;;;4615   		{
;;;4616   		if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_NET,1);
;;;4617   		else SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_NET,1);
;;;4618   		}
;;;4619   	else	if(!(avar_ind_stat&0x00000001)) SET_REG(LPC_GPIO1->FIOCLR,1,SHIFT_REL_AV_NET,1);
;;;4620   	else SET_REG(LPC_GPIO3->FIOCLR,1,SHIFT_REL_AV_NET,1);
;;;4621   	#endif
;;;4622   	#ifdef UKU2071x 
;;;4623   	if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_AV_NET))
002de6  20d2              MOVS     r0,#0xd2
002de8  f7fffffe          BL       mess_find_unvol
002dec  b110              CBZ      r0,|L1.11764|
002dee  6828              LDR      r0,[r5,#0]  ; mess_data
002df0  2866              CMP      r0,#0x66
002df2  d038              BEQ      |L1.11878|
                  |L1.11764|
;;;4624   		{
;;;4625   		if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_NET,1);
;;;4626   		else SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_NET,1);
;;;4627   		}
;;;4628   	else	if(!(avar_ind_stat&0x00000001)) SET_REG(LPC_GPIO1->FIOSET,1,SHIFT_REL_AV_NET,1);
002df4  6830              LDR      r0,[r6,#0]  ; avar_ind_stat
002df6  07c0              LSLS     r0,r0,#31
002df8  d042              BEQ      |L1.11904|
;;;4629   	else SET_REG(LPC_GPIO3->FIOSET,1,SHIFT_REL_AV_NET,1);
002dfa  6fa0              LDR      r0,[r4,#0x78]
002dfc  f0407000          ORR      r0,r0,#0x2000000
002e00  67a0              STR      r0,[r4,#0x78]
                  |L1.11778|
;;;4630   	#endif
;;;4631   
;;;4632   	if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_AV_BPS))
002e02  20d2              MOVS     r0,#0xd2
002e04  f7fffffe          BL       mess_find_unvol
002e08  b110              CBZ      r0,|L1.11792|
002e0a  6828              LDR      r0,[r5,#0]  ; mess_data
002e0c  286a              CMP      r0,#0x6a
002e0e  d03c              BEQ      |L1.11914|
                  |L1.11792|
;;;4633   		{
;;;4634   		if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,7,1);
;;;4635   		else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOSET,1,7,1);
;;;4636   	     }
;;;4637   	else 
;;;4638   		{
;;;4639   		if(!(avar_ind_stat&0x100007f8)) SET_REG(LPC_GPIO0->FIOCLR,1,7,1);
002e10  6830              LDR      r0,[r6,#0]  ; avar_ind_stat
002e12  4238              TST      r0,r7
002e14  d047              BEQ      |L1.11942|
;;;4640   	     else SET_REG(LPC_GPIO0->FIOSET,1,7,1);
002e16  69a0              LDR      r0,[r4,#0x18]
002e18  f0400080          ORR      r0,r0,#0x80
002e1c  e000              B        |L1.11808|
                  |L1.11806|
002e1e  e01d              B        |L1.11868|
                  |L1.11808|
002e20  61a0              STR      r0,[r4,#0x18]
                  |L1.11810|
;;;4641   		}
;;;4642   	//Реле аварии БПС
;;;4643   	if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_AV_BPS))
002e22  20d2              MOVS     r0,#0xd2
002e24  f7fffffe          BL       mess_find_unvol
002e28  b110              CBZ      r0,|L1.11824|
002e2a  6828              LDR      r0,[r5,#0]  ; mess_data
002e2c  286a              CMP      r0,#0x6a
002e2e  d03f              BEQ      |L1.11952|
                  |L1.11824|
;;;4644   		{
;;;4645   		if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_BPS,1);
;;;4646   		else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_BPS,1);
;;;4647        	}
;;;4648   	else 
;;;4649   		{
;;;4650   		if(!(avar_ind_stat&0x100007f8)) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_BPS,1);
002e30  6830              LDR      r0,[r6,#0]  ; avar_ind_stat
002e32  4238              TST      r0,r7
002e34  d04b              BEQ      |L1.11982|
;;;4651        	else SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_BPS,1);
002e36  69a0              LDR      r0,[r4,#0x18]
002e38  f0400020          ORR      r0,r0,#0x20
002e3c  61a0              STR      r0,[r4,#0x18]
002e3e  e0d1              B        |L1.12260|
                  |L1.11840|
002e40  6868              LDR      r0,[r5,#4]            ;4604  ; mess_data
002e42  b130              CBZ      r0,|L1.11858|
002e44  2801              CMP      r0,#1                 ;4605
002e46  d1ce              BNE      |L1.11750|
002e48  69a0              LDR      r0,[r4,#0x18]         ;4605
002e4a  f0400010          ORR      r0,r0,#0x10           ;4605
002e4e  61a0              STR      r0,[r4,#0x18]         ;4605
002e50  e7c9              B        |L1.11750|
                  |L1.11858|
002e52  69e0              LDR      r0,[r4,#0x1c]         ;4604
002e54  f0400010          ORR      r0,r0,#0x10           ;4604
002e58  61e0              STR      r0,[r4,#0x1c]         ;4604
002e5a  e7c4              B        |L1.11750|
                  |L1.11868|
002e5c  69e0              LDR      r0,[r4,#0x1c]         ;4609
002e5e  f0400010          ORR      r0,r0,#0x10           ;4609
002e62  61e0              STR      r0,[r4,#0x1c]         ;4609
002e64  e7bf              B        |L1.11750|
                  |L1.11878|
002e66  6868              LDR      r0,[r5,#4]            ;4625  ; mess_data
002e68  b128              CBZ      r0,|L1.11894|
002e6a  69e0              LDR      r0,[r4,#0x1c]         ;4626
002e6c  f0407000          ORR      r0,r0,#0x2000000      ;4626
002e70  61e0              STR      r0,[r4,#0x1c]         ;4626
002e72  e7c6              B        |L1.11778|
                  |L1.11892|
002e74  e030              B        |L1.11992|
                  |L1.11894|
002e76  69a0              LDR      r0,[r4,#0x18]         ;4625
002e78  f0407000          ORR      r0,r0,#0x2000000      ;4625
002e7c  61a0              STR      r0,[r4,#0x18]         ;4625
002e7e  e7c0              B        |L1.11778|
                  |L1.11904|
002e80  6ba0              LDR      r0,[r4,#0x38]         ;4628
002e82  f0407000          ORR      r0,r0,#0x2000000      ;4628
002e86  63a0              STR      r0,[r4,#0x38]         ;4628
002e88  e7bb              B        |L1.11778|
                  |L1.11914|
002e8a  6868              LDR      r0,[r5,#4]            ;4634  ; mess_data
002e8c  b130              CBZ      r0,|L1.11932|
002e8e  2801              CMP      r0,#1                 ;4635
002e90  d1c7              BNE      |L1.11810|
002e92  69a0              LDR      r0,[r4,#0x18]         ;4635
002e94  f0400080          ORR      r0,r0,#0x80           ;4635
002e98  61a0              STR      r0,[r4,#0x18]         ;4635
002e9a  e7c2              B        |L1.11810|
                  |L1.11932|
002e9c  69e0              LDR      r0,[r4,#0x1c]         ;4634
002e9e  f0400080          ORR      r0,r0,#0x80           ;4634
002ea2  61e0              STR      r0,[r4,#0x1c]         ;4634
002ea4  e7bd              B        |L1.11810|
                  |L1.11942|
002ea6  69e0              LDR      r0,[r4,#0x1c]         ;4639
002ea8  f0400080          ORR      r0,r0,#0x80           ;4639
002eac  61e0              STR      r0,[r4,#0x1c]         ;4639
002eae  e7b8              B        |L1.11810|
                  |L1.11952|
002eb0  6868              LDR      r0,[r5,#4]            ;4645  ; mess_data
002eb2  b110              CBZ      r0,|L1.11962|
002eb4  2801              CMP      r0,#1                 ;4646
002eb6  d005              BEQ      |L1.11972|
002eb8  e094              B        |L1.12260|
                  |L1.11962|
002eba  69e0              LDR      r0,[r4,#0x1c]         ;4645
002ebc  f0400020          ORR      r0,r0,#0x20           ;4645
002ec0  61e0              STR      r0,[r4,#0x1c]         ;4645
002ec2  e08f              B        |L1.12260|
                  |L1.11972|
002ec4  69a0              LDR      r0,[r4,#0x18]         ;4646
002ec6  f0400020          ORR      r0,r0,#0x20           ;4646
002eca  61a0              STR      r0,[r4,#0x18]         ;4646
002ecc  e08a              B        |L1.12260|
                  |L1.11982|
002ece  69e0              LDR      r0,[r4,#0x1c]         ;4650
002ed0  f0400020          ORR      r0,r0,#0x20           ;4650
002ed4  61e0              STR      r0,[r4,#0x1c]         ;4650
002ed6  e085              B        |L1.12260|
                  |L1.11992|
;;;4652   		} 
;;;4653   	}
;;;4654   else	if((AUSW_MAIN==22033)||(AUSW_MAIN==22018))
002ed8  f5a041ac          SUB      r1,r0,#0x5600
002edc  3911              SUBS     r1,r1,#0x11
002ede  d001              BEQ      |L1.12004|
002ee0  310f              ADDS     r1,r1,#0xf
002ee2  d163              BNE      |L1.12204|
                  |L1.12004|
;;;4655   	{
;;;4656   	#ifndef UKU2071x 
;;;4657   	if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_AV_NET))
;;;4658   		{
;;;4659   		if(mess_data[1]==0) SET_REG(LPC_GPIO3->FIOSET,1,25,1);
;;;4660   		else SET_REG(LPC_GPIO3->FIOCLR,1,25,1);
;;;4661   		}
;;;4662   	else	if(!(avar_ind_stat&0x00000001)) SET_REG(LPC_GPIO3->FIOSET,1,25,1);
;;;4663   	else SET_REG(LPC_GPIO3->FIOCLR,1,25,1);
;;;4664   	#endif
;;;4665   	#ifdef UKU2071x 
;;;4666   	if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_AV_NET))
002ee4  20d2              MOVS     r0,#0xd2
002ee6  f7fffffe          BL       mess_find_unvol
002eea  b110              CBZ      r0,|L1.12018|
002eec  6828              LDR      r0,[r5,#0]  ; mess_data
002eee  2866              CMP      r0,#0x66
002ef0  d023              BEQ      |L1.12090|
                  |L1.12018|
;;;4667   		{
;;;4668   		if(mess_data[1]==0) SET_REG(LPC_GPIO3->FIOCLR,1,25,1);
;;;4669   		else SET_REG(LPC_GPIO3->FIOSET,1,25,1);
;;;4670   		}
;;;4671   	else	if(!(avar_ind_stat&0x00000001)) SET_REG(LPC_GPIO3->FIOCLR,1,25,1);
002ef2  6830              LDR      r0,[r6,#0]  ; avar_ind_stat
002ef4  07c0              LSLS     r0,r0,#31
002ef6  d02c              BEQ      |L1.12114|
;;;4672   	else SET_REG(LPC_GPIO3->FIOSET,1,25,1);
002ef8  6fa0              LDR      r0,[r4,#0x78]
002efa  f0407000          ORR      r0,r0,#0x2000000
002efe  67a0              STR      r0,[r4,#0x78]
                  |L1.12032|
;;;4673   	#endif
;;;4674   	
;;;4675   	
;;;4676   	if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_AV_BPS))
002f00  20d2              MOVS     r0,#0xd2
002f02  f7fffffe          BL       mess_find_unvol
002f06  b110              CBZ      r0,|L1.12046|
002f08  6828              LDR      r0,[r5,#0]  ; mess_data
002f0a  286a              CMP      r0,#0x6a
002f0c  d026              BEQ      |L1.12124|
                  |L1.12046|
;;;4677   		{
;;;4678   		if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,7,1);
;;;4679   		else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOSET,1,7,1);
;;;4680   	     }
;;;4681   	else 
;;;4682   		{
;;;4683   		if(!(avar_ind_stat&0x100007f8)) SET_REG(LPC_GPIO0->FIOCLR,1,7,1);
002f0e  6830              LDR      r0,[r6,#0]  ; avar_ind_stat
002f10  4238              TST      r0,r7
002f12  d031              BEQ      |L1.12152|
;;;4684   	     else SET_REG(LPC_GPIO0->FIOSET,1,7,1);
002f14  69a0              LDR      r0,[r4,#0x18]
002f16  f0400080          ORR      r0,r0,#0x80
002f1a  61a0              STR      r0,[r4,#0x18]
                  |L1.12060|
;;;4685   		} 
;;;4686   
;;;4687   	//Реле аварий батарей
;;;4688   	if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_AV_BAT))
002f1c  20d2              MOVS     r0,#0xd2
002f1e  f7fffffe          BL       mess_find_unvol
002f22  b110              CBZ      r0,|L1.12074|
002f24  6828              LDR      r0,[r5,#0]  ; mess_data
002f26  2867              CMP      r0,#0x67
002f28  d02b              BEQ      |L1.12162|
                  |L1.12074|
;;;4689   		{
;;;4690   		if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,4,1);
;;;4691   		else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOSET,1,4,1);
;;;4692        	}
;;;4693   	else 
;;;4694   		{
;;;4695   		if(!(ips_bat_av_stat)) SET_REG(LPC_GPIO0->FIOCLR,1,4,1);
002f2a  f8980000          LDRB     r0,[r8,#0]  ; ips_bat_av_stat
002f2e  b390              CBZ      r0,|L1.12182|
;;;4696        	else SET_REG(LPC_GPIO0->FIOSET,1,4,1);
002f30  69a0              LDR      r0,[r4,#0x18]
002f32  f0400010          ORR      r0,r0,#0x10
002f36  61a0              STR      r0,[r4,#0x18]
002f38  e054              B        |L1.12260|
                  |L1.12090|
002f3a  6868              LDR      r0,[r5,#4]            ;4668  ; mess_data
002f3c  b120              CBZ      r0,|L1.12104|
002f3e  6fa0              LDR      r0,[r4,#0x78]         ;4669
002f40  f0407000          ORR      r0,r0,#0x2000000      ;4669
002f44  67a0              STR      r0,[r4,#0x78]         ;4669
002f46  e7db              B        |L1.12032|
                  |L1.12104|
002f48  6fe0              LDR      r0,[r4,#0x7c]         ;4668
002f4a  f0407000          ORR      r0,r0,#0x2000000      ;4668
002f4e  67e0              STR      r0,[r4,#0x7c]         ;4668
002f50  e7d6              B        |L1.12032|
                  |L1.12114|
002f52  6fe0              LDR      r0,[r4,#0x7c]         ;4671
002f54  f0407000          ORR      r0,r0,#0x2000000      ;4671
002f58  67e0              STR      r0,[r4,#0x7c]         ;4671
002f5a  e7d1              B        |L1.12032|
                  |L1.12124|
002f5c  6868              LDR      r0,[r5,#4]            ;4678  ; mess_data
002f5e  b130              CBZ      r0,|L1.12142|
002f60  2801              CMP      r0,#1                 ;4679
002f62  d1db              BNE      |L1.12060|
002f64  69a0              LDR      r0,[r4,#0x18]         ;4679
002f66  f0400080          ORR      r0,r0,#0x80           ;4679
002f6a  61a0              STR      r0,[r4,#0x18]         ;4679
002f6c  e7d6              B        |L1.12060|
                  |L1.12142|
002f6e  69e0              LDR      r0,[r4,#0x1c]         ;4678
002f70  f0400080          ORR      r0,r0,#0x80           ;4678
002f74  61e0              STR      r0,[r4,#0x1c]         ;4678
002f76  e7d1              B        |L1.12060|
                  |L1.12152|
002f78  69e0              LDR      r0,[r4,#0x1c]         ;4683
002f7a  f0400080          ORR      r0,r0,#0x80           ;4683
002f7e  61e0              STR      r0,[r4,#0x1c]         ;4683
002f80  e7cc              B        |L1.12060|
                  |L1.12162|
002f82  6868              LDR      r0,[r5,#4]            ;4690  ; mess_data
002f84  b110              CBZ      r0,|L1.12172|
002f86  2801              CMP      r0,#1                 ;4691
002f88  d006              BEQ      |L1.12184|
002f8a  e02b              B        |L1.12260|
                  |L1.12172|
002f8c  69e0              LDR      r0,[r4,#0x1c]         ;4690
002f8e  f0400010          ORR      r0,r0,#0x10           ;4690
002f92  61e0              STR      r0,[r4,#0x1c]         ;4690
002f94  e026              B        |L1.12260|
                  |L1.12182|
002f96  e004              B        |L1.12194|
                  |L1.12184|
002f98  69a0              LDR      r0,[r4,#0x18]         ;4691
002f9a  f0400010          ORR      r0,r0,#0x10           ;4691
002f9e  61a0              STR      r0,[r4,#0x18]         ;4691
002fa0  e020              B        |L1.12260|
                  |L1.12194|
002fa2  69e0              LDR      r0,[r4,#0x1c]         ;4695
002fa4  f0400010          ORR      r0,r0,#0x10           ;4695
002fa8  61e0              STR      r0,[r4,#0x1c]         ;4695
002faa  e01b              B        |L1.12260|
                  |L1.12204|
;;;4697   		} 
;;;4698   	} 	 
;;;4699   else	
;;;4700   	{
;;;4701   	//Реле аварии сети ТУТ КАКАЯ то ЛАЖА с аварией сети. Обращение к разным портам
;;;4702   	#ifndef UKU2071x 
;;;4703   	if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_AV_NET))
;;;4704   		{
;;;4705   		if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_NET,1);
;;;4706   		else SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_NET,1);
;;;4707   		}
;;;4708   	else	if(!(avar_ind_stat&0x00000001)) SET_REG(LPC_GPIO1->FIOCLR,1,SHIFT_REL_AV_NET,1);
;;;4709   	else SET_REG(LPC_GPIO3->FIOCLR,1,SHIFT_REL_AV_NET,1);
;;;4710   	#endif
;;;4711   	#ifdef UKU2071x 
;;;4712   	if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_AV_NET))
002fac  20d2              MOVS     r0,#0xd2
002fae  f7fffffe          BL       mess_find_unvol
002fb2  b110              CBZ      r0,|L1.12218|
002fb4  6828              LDR      r0,[r5,#0]  ; mess_data
002fb6  2866              CMP      r0,#0x66
002fb8  d026              BEQ      |L1.12296|
                  |L1.12218|
;;;4713   		{
;;;4714   		if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_NET,1);
;;;4715   		else SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_NET,1);
;;;4716   		}
;;;4717   	else	if(!(avar_ind_stat&0x00000001)) SET_REG(LPC_GPIO1->FIOSET,1,SHIFT_REL_AV_NET,1);
002fba  6830              LDR      r0,[r6,#0]  ; avar_ind_stat
002fbc  07c0              LSLS     r0,r0,#31
002fbe  d02f              BEQ      |L1.12320|
;;;4718   	else SET_REG(LPC_GPIO3->FIOSET,1,SHIFT_REL_AV_NET,1);
002fc0  6fa0              LDR      r0,[r4,#0x78]
002fc2  f0407000          ORR      r0,r0,#0x2000000
002fc6  67a0              STR      r0,[r4,#0x78]
                  |L1.12232|
;;;4719   	#endif
;;;4720   
;;;4721   	if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_AV_BPS))
002fc8  20d2              MOVS     r0,#0xd2
002fca  f7fffffe          BL       mess_find_unvol
002fce  b110              CBZ      r0,|L1.12246|
002fd0  6828              LDR      r0,[r5,#0]  ; mess_data
002fd2  286a              CMP      r0,#0x6a
002fd4  d029              BEQ      |L1.12330|
                  |L1.12246|
;;;4722   		{
;;;4723   		if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_BPS,1);
;;;4724   		else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_BPS,1);
;;;4725        	}
;;;4726   	else 
;;;4727   		{
;;;4728   		if(!(avar_ind_stat&0x100007f8)) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_BPS,1);
002fd6  6830              LDR      r0,[r6,#0]  ; avar_ind_stat
002fd8  4238              TST      r0,r7
002fda  d034              BEQ      |L1.12358|
;;;4729        	else SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_BPS,1);
002fdc  69a0              LDR      r0,[r4,#0x18]
002fde  f0400020          ORR      r0,r0,#0x20
002fe2  61a0              STR      r0,[r4,#0x18]
                  |L1.12260|
;;;4730   		}
;;;4731   	}
;;;4732   //Дополнительное реле УКУ 
;;;4733   if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_EXT))	 
002fe4  20d2              MOVS     r0,#0xd2
002fe6  f7fffffe          BL       mess_find_unvol
;;;4734   	{
;;;4735   	if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,9,1);
;;;4736   	else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOSET,1,9,1);
;;;4737   	}
;;;4738   else if(DOP_RELE_FUNC==0)	//если допреле подключено к ускоренному заряду
;;;4739   	{
;;;4740   	if((!speedChIsOn)&&(spc_stat!=spcVZ)&&(hv_vz_stat==hvsOFF)&&(sp_ch_stat==scsOFF)&&(vz1_stat==vz1sOFF)&&(vz2_stat==vz2sOFF)&&(load_U/10<UVENTOFF))   SET_REG(LPC_GPIO0->FIOCLR,1,9,1);
002fea  f8df83fc          LDR      r8,|L1.13288|
002fee  4fff              LDR      r7,|L1.13292|
002ff0  4eff              LDR      r6,|L1.13296|
002ff2  b110              CBZ      r0,|L1.12282|
002ff4  6828              LDR      r0,[r5,#0]            ;4733  ; mess_data
002ff6  2871              CMP      r0,#0x71              ;4733
002ff8  d02a              BEQ      |L1.12368|
                  |L1.12282|
002ffa  48fe              LDR      r0,|L1.13300|
002ffc  f9b00000          LDRSH    r0,[r0,#0]            ;4738  ; DOP_RELE_FUNC
003000  b380              CBZ      r0,|L1.12388|
;;;4741   	else if((speedChIsOn)||(spc_stat==spcVZ)||(hv_vz_stat!=hvsOFF)||(sp_ch_stat!=scsOFF)||(vz1_stat!=vz1sOFF)||(vz2_stat!=vz2sOFF)) SET_REG(LPC_GPIO0->FIOSET,1,9,1);
;;;4742   	}
;;;4743   else if(DOP_RELE_FUNC==1)  //если допреле подключено к индикации разряженной батареи
003002  2801              CMP      r0,#1
003004  d068              BEQ      |L1.12504|
003006  e072              B        |L1.12526|
                  |L1.12296|
003008  6868              LDR      r0,[r5,#4]            ;4714  ; mess_data
00300a  b120              CBZ      r0,|L1.12310|
00300c  69e0              LDR      r0,[r4,#0x1c]         ;4715
00300e  f0407000          ORR      r0,r0,#0x2000000      ;4715
003012  61e0              STR      r0,[r4,#0x1c]         ;4715
003014  e7d8              B        |L1.12232|
                  |L1.12310|
003016  69a0              LDR      r0,[r4,#0x18]         ;4714
003018  f0407000          ORR      r0,r0,#0x2000000      ;4714
00301c  61a0              STR      r0,[r4,#0x18]         ;4714
00301e  e7d3              B        |L1.12232|
                  |L1.12320|
003020  6ba0              LDR      r0,[r4,#0x38]         ;4717
003022  f0407000          ORR      r0,r0,#0x2000000      ;4717
003026  63a0              STR      r0,[r4,#0x38]         ;4717
003028  e7ce              B        |L1.12232|
                  |L1.12330|
00302a  6868              LDR      r0,[r5,#4]            ;4723  ; mess_data
00302c  b130              CBZ      r0,|L1.12348|
00302e  2801              CMP      r0,#1                 ;4724
003030  d1d8              BNE      |L1.12260|
003032  69a0              LDR      r0,[r4,#0x18]         ;4724
003034  f0400020          ORR      r0,r0,#0x20           ;4724
003038  61a0              STR      r0,[r4,#0x18]         ;4724
00303a  e7d3              B        |L1.12260|
                  |L1.12348|
00303c  69e0              LDR      r0,[r4,#0x1c]         ;4723
00303e  f0400020          ORR      r0,r0,#0x20           ;4723
003042  61e0              STR      r0,[r4,#0x1c]         ;4723
003044  e7ce              B        |L1.12260|
                  |L1.12358|
003046  69e0              LDR      r0,[r4,#0x1c]         ;4728
003048  f0400020          ORR      r0,r0,#0x20           ;4728
00304c  61e0              STR      r0,[r4,#0x1c]         ;4728
00304e  e7c9              B        |L1.12260|
                  |L1.12368|
003050  6868              LDR      r0,[r5,#4]            ;4735  ; mess_data
003052  b110              CBZ      r0,|L1.12378|
003054  2801              CMP      r0,#1                 ;4736
003056  d006              BEQ      |L1.12390|
003058  e049              B        |L1.12526|
                  |L1.12378|
00305a  69e0              LDR      r0,[r4,#0x1c]         ;4735
00305c  f4407000          ORR      r0,r0,#0x200          ;4735
003060  61e0              STR      r0,[r4,#0x1c]         ;4735
003062  e044              B        |L1.12526|
                  |L1.12388|
003064  e004              B        |L1.12400|
                  |L1.12390|
003066  69a0              LDR      r0,[r4,#0x18]         ;4736
003068  f4407000          ORR      r0,r0,#0x200          ;4736
00306c  61a0              STR      r0,[r4,#0x18]         ;4736
00306e  e03e              B        |L1.12526|
                  |L1.12400|
003070  48e1              LDR      r0,|L1.13304|
003072  49e2              LDR      r1,|L1.13308|
003074  f9b00000          LDRSH    r0,[r0,#0]            ;4740  ; speedChIsOn
003078  b9d8              CBNZ     r0,|L1.12466|
00307a  7eb2              LDRB     r2,[r6,#0x1a]         ;4740  ; spc_stat
00307c  2a02              CMP      r2,#2                 ;4740
00307e  d018              BEQ      |L1.12466|
003080  780a              LDRB     r2,[r1,#0]            ;4740  ; hv_vz_stat
003082  b9b2              CBNZ     r2,|L1.12466|
003084  783a              LDRB     r2,[r7,#0]            ;4740  ; sp_ch_stat
003086  b9a2              CBNZ     r2,|L1.12466|
003088  f8962026          LDRB     r2,[r6,#0x26]         ;4740  ; vz1_stat
00308c  b98a              CBNZ     r2,|L1.12466|
00308e  f8962029          LDRB     r2,[r6,#0x29]         ;4740  ; vz2_stat
003092  b972              CBNZ     r2,|L1.12466|
003094  f9b82000          LDRSH    r2,[r8,#0]            ;4740  ; load_U
003098  230a              MOVS     r3,#0xa               ;4740
00309a  fb92f2f3          SDIV     r2,r2,r3              ;4740
00309e  4bd8              LDR      r3,|L1.13312|
0030a0  f9b33000          LDRSH    r3,[r3,#0]            ;4740  ; UVENTOFF
0030a4  429a              CMP      r2,r3                 ;4740
0030a6  da04              BGE      |L1.12466|
0030a8  69e0              LDR      r0,[r4,#0x1c]         ;4740
0030aa  f4407000          ORR      r0,r0,#0x200          ;4740
0030ae  61e0              STR      r0,[r4,#0x1c]         ;4740
0030b0  e01d              B        |L1.12526|
                  |L1.12466|
0030b2  b960              CBNZ     r0,|L1.12494|
0030b4  7eb0              LDRB     r0,[r6,#0x1a]         ;4741  ; spc_stat
0030b6  2802              CMP      r0,#2                 ;4741
0030b8  d009              BEQ      |L1.12494|
0030ba  7808              LDRB     r0,[r1,#0]            ;4741  ; hv_vz_stat
0030bc  b938              CBNZ     r0,|L1.12494|
0030be  7838              LDRB     r0,[r7,#0]            ;4741  ; sp_ch_stat
0030c0  b928              CBNZ     r0,|L1.12494|
0030c2  f8960026          LDRB     r0,[r6,#0x26]         ;4741  ; vz1_stat
0030c6  b910              CBNZ     r0,|L1.12494|
0030c8  f8960029          LDRB     r0,[r6,#0x29]         ;4741  ; vz2_stat
0030cc  b178              CBZ      r0,|L1.12526|
                  |L1.12494|
0030ce  69a0              LDR      r0,[r4,#0x18]         ;4741
0030d0  f4407000          ORR      r0,r0,#0x200          ;4741
0030d4  61a0              STR      r0,[r4,#0x18]         ;4741
0030d6  e00a              B        |L1.12526|
                  |L1.12504|
;;;4744   	{
;;;4745   	if((mess_find_unvol(MESS2RELE_HNDL))&& (mess_data[0]==PARAM_RELE_BAT_IS_DISCHARGED)) SET_REG(LPC_GPIO0->FIOCLR,1,9,1);
0030d8  20d2              MOVS     r0,#0xd2
0030da  f7fffffe          BL       mess_find_unvol
0030de  b110              CBZ      r0,|L1.12518|
0030e0  6828              LDR      r0,[r5,#0]  ; mess_data
0030e2  2872              CMP      r0,#0x72
0030e4  d017              BEQ      |L1.12566|
                  |L1.12518|
;;;4746   	else SET_REG(LPC_GPIO0->FIOSET,1,9,1);
0030e6  69a0              LDR      r0,[r4,#0x18]
0030e8  f4407000          ORR      r0,r0,#0x200
0030ec  61a0              STR      r0,[r4,#0x18]
                  |L1.12526|
;;;4747   	}
;;;4748   	
;;;4749   //Блок выносной реле
;;;4750   if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_BDR1))
0030ee  20d2              MOVS     r0,#0xd2
0030f0  f7fffffe          BL       mess_find_unvol
;;;4751   	{
;;;4752   	if(mess_data[1]==0) 		bdr_transmit_stat&=0xfe;
0030f4  f8df930c          LDR      r9,|L1.13316|
;;;4753   	else if(mess_data[1]==1) 	bdr_transmit_stat|=0x01;
;;;4754   	}
;;;4755   else 
;;;4756   	{
;;;4757   	if(bdr_avar_stat&0x01)  	bdr_transmit_stat|=0x01;
0030f8  4cc3              LDR      r4,|L1.13320|
0030fa  b110              CBZ      r0,|L1.12546|
0030fc  6828              LDR      r0,[r5,#0]            ;4750  ; mess_data
0030fe  2875              CMP      r0,#0x75              ;4750
003100  d00e              BEQ      |L1.12576|
                  |L1.12546|
003102  7820              LDRB     r0,[r4,#0]  ; bdr_avar_stat
003104  07c0              LSLS     r0,r0,#31
003106  d01e              BEQ      |L1.12614|
003108  f8990000          LDRB     r0,[r9,#0]  ; bdr_transmit_stat
00310c  f0400001          ORR      r0,r0,#1
003110  f8890000          STRB     r0,[r9,#0]
003114  e01d              B        |L1.12626|
                  |L1.12566|
003116  69e0              LDR      r0,[r4,#0x1c]         ;4745
003118  f4407000          ORR      r0,r0,#0x200          ;4745
00311c  61e0              STR      r0,[r4,#0x1c]         ;4745
00311e  e7e6              B        |L1.12526|
                  |L1.12576|
003120  6868              LDR      r0,[r5,#4]            ;4752  ; mess_data
003122  b110              CBZ      r0,|L1.12586|
003124  2801              CMP      r0,#1                 ;4753
003126  d007              BEQ      |L1.12600|
003128  e013              B        |L1.12626|
                  |L1.12586|
00312a  f8990000          LDRB     r0,[r9,#0]            ;4752  ; bdr_transmit_stat
00312e  f00000fe          AND      r0,r0,#0xfe           ;4752
003132  f8890000          STRB     r0,[r9,#0]            ;4752
003136  e00c              B        |L1.12626|
                  |L1.12600|
003138  f8990000          LDRB     r0,[r9,#0]            ;4753  ; bdr_transmit_stat
00313c  f0400001          ORR      r0,r0,#1              ;4753
003140  f8890000          STRB     r0,[r9,#0]            ;4753
003144  e005              B        |L1.12626|
                  |L1.12614|
;;;4758   	else 						bdr_transmit_stat&=0xfe;
003146  f8990000          LDRB     r0,[r9,#0]  ; bdr_transmit_stat
00314a  f00000fe          AND      r0,r0,#0xfe
00314e  f8890000          STRB     r0,[r9,#0]
                  |L1.12626|
;;;4759   	}	
;;;4760   
;;;4761   if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_BDR2))
003152  20d2              MOVS     r0,#0xd2
003154  f7fffffe          BL       mess_find_unvol
003158  b110              CBZ      r0,|L1.12640|
00315a  6828              LDR      r0,[r5,#0]  ; mess_data
00315c  2876              CMP      r0,#0x76
00315e  d009              BEQ      |L1.12660|
                  |L1.12640|
;;;4762   	{
;;;4763   	if(mess_data[1]==0) 		bdr_transmit_stat&=0xfd;
;;;4764   	else if(mess_data[1]==1) 	bdr_transmit_stat|=0x02;
;;;4765   	}
;;;4766   else 
;;;4767   	{
;;;4768   	if(bdr_avar_stat&0x01)  	bdr_transmit_stat|=0x02;
003160  7820              LDRB     r0,[r4,#0]  ; bdr_avar_stat
003162  07c0              LSLS     r0,r0,#31
003164  d019              BEQ      |L1.12698|
003166  f8990000          LDRB     r0,[r9,#0]  ; bdr_transmit_stat
00316a  f0400002          ORR      r0,r0,#2
00316e  f8890000          STRB     r0,[r9,#0]
003172  e018              B        |L1.12710|
                  |L1.12660|
003174  6868              LDR      r0,[r5,#4]            ;4763  ; mess_data
003176  b110              CBZ      r0,|L1.12670|
003178  2801              CMP      r0,#1                 ;4764
00317a  d007              BEQ      |L1.12684|
00317c  e013              B        |L1.12710|
                  |L1.12670|
00317e  f8990000          LDRB     r0,[r9,#0]            ;4763  ; bdr_transmit_stat
003182  f00000fd          AND      r0,r0,#0xfd           ;4763
003186  f8890000          STRB     r0,[r9,#0]            ;4763
00318a  e00c              B        |L1.12710|
                  |L1.12684|
00318c  f8990000          LDRB     r0,[r9,#0]            ;4764  ; bdr_transmit_stat
003190  f0400002          ORR      r0,r0,#2              ;4764
003194  f8890000          STRB     r0,[r9,#0]            ;4764
003198  e005              B        |L1.12710|
                  |L1.12698|
;;;4769   	else 						bdr_transmit_stat&=0xfd;
00319a  f8990000          LDRB     r0,[r9,#0]  ; bdr_transmit_stat
00319e  f00000fd          AND      r0,r0,#0xfd
0031a2  f8890000          STRB     r0,[r9,#0]
                  |L1.12710|
;;;4770   	}	
;;;4771   	
;;;4772   if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_BDR3))
0031a6  20d2              MOVS     r0,#0xd2
0031a8  f7fffffe          BL       mess_find_unvol
0031ac  b110              CBZ      r0,|L1.12724|
0031ae  6828              LDR      r0,[r5,#0]  ; mess_data
0031b0  2877              CMP      r0,#0x77
0031b2  d009              BEQ      |L1.12744|
                  |L1.12724|
;;;4773   	{
;;;4774   	if(mess_data[1]==0) 		bdr_transmit_stat&=0xfb;
;;;4775   	else if(mess_data[1]==1) 	bdr_transmit_stat|=0x04;
;;;4776   	}
;;;4777   else 
;;;4778   	{
;;;4779   	if(bdr_avar_stat&0x01)  	bdr_transmit_stat|=0x04;
0031b4  7820              LDRB     r0,[r4,#0]  ; bdr_avar_stat
0031b6  07c0              LSLS     r0,r0,#31
0031b8  d019              BEQ      |L1.12782|
0031ba  f8990000          LDRB     r0,[r9,#0]  ; bdr_transmit_stat
0031be  f0400004          ORR      r0,r0,#4
0031c2  f8890000          STRB     r0,[r9,#0]
0031c6  e018              B        |L1.12794|
                  |L1.12744|
0031c8  6868              LDR      r0,[r5,#4]            ;4774  ; mess_data
0031ca  b110              CBZ      r0,|L1.12754|
0031cc  2801              CMP      r0,#1                 ;4775
0031ce  d007              BEQ      |L1.12768|
0031d0  e013              B        |L1.12794|
                  |L1.12754|
0031d2  f8990000          LDRB     r0,[r9,#0]            ;4774  ; bdr_transmit_stat
0031d6  f00000fb          AND      r0,r0,#0xfb           ;4774
0031da  f8890000          STRB     r0,[r9,#0]            ;4774
0031de  e00c              B        |L1.12794|
                  |L1.12768|
0031e0  f8990000          LDRB     r0,[r9,#0]            ;4775  ; bdr_transmit_stat
0031e4  f0400004          ORR      r0,r0,#4              ;4775
0031e8  f8890000          STRB     r0,[r9,#0]            ;4775
0031ec  e005              B        |L1.12794|
                  |L1.12782|
;;;4780   	else 						bdr_transmit_stat&=0xfb;
0031ee  f8990000          LDRB     r0,[r9,#0]  ; bdr_transmit_stat
0031f2  f00000fb          AND      r0,r0,#0xfb
0031f6  f8890000          STRB     r0,[r9,#0]
                  |L1.12794|
;;;4781   	}	
;;;4782   	
;;;4783   if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_BDR4))
0031fa  20d2              MOVS     r0,#0xd2
0031fc  f7fffffe          BL       mess_find_unvol
003200  b110              CBZ      r0,|L1.12808|
003202  6828              LDR      r0,[r5,#0]  ; mess_data
003204  2878              CMP      r0,#0x78
003206  d009              BEQ      |L1.12828|
                  |L1.12808|
;;;4784   	{
;;;4785   	if(mess_data[1]==0) 		bdr_transmit_stat&=0xf7;
;;;4786   	else if(mess_data[1]==1) 	bdr_transmit_stat|=0x08;
;;;4787   	}
;;;4788   else 
;;;4789   	{
;;;4790   	if(bdr_avar_stat&0x01)  	bdr_transmit_stat|=0x08;
003208  7820              LDRB     r0,[r4,#0]  ; bdr_avar_stat
00320a  07c0              LSLS     r0,r0,#31
00320c  d019              BEQ      |L1.12866|
00320e  f8990000          LDRB     r0,[r9,#0]  ; bdr_transmit_stat
003212  f0400008          ORR      r0,r0,#8
003216  f8890000          STRB     r0,[r9,#0]
00321a  e018              B        |L1.12878|
                  |L1.12828|
00321c  6868              LDR      r0,[r5,#4]            ;4785  ; mess_data
00321e  b110              CBZ      r0,|L1.12838|
003220  2801              CMP      r0,#1                 ;4786
003222  d007              BEQ      |L1.12852|
003224  e013              B        |L1.12878|
                  |L1.12838|
003226  f8990000          LDRB     r0,[r9,#0]            ;4785  ; bdr_transmit_stat
00322a  f00000f7          AND      r0,r0,#0xf7           ;4785
00322e  f8890000          STRB     r0,[r9,#0]            ;4785
003232  e00c              B        |L1.12878|
                  |L1.12852|
003234  f8990000          LDRB     r0,[r9,#0]            ;4786  ; bdr_transmit_stat
003238  f0400008          ORR      r0,r0,#8              ;4786
00323c  f8890000          STRB     r0,[r9,#0]            ;4786
003240  e005              B        |L1.12878|
                  |L1.12866|
;;;4791   	else 						bdr_transmit_stat&=0xf7;
003242  f8990000          LDRB     r0,[r9,#0]  ; bdr_transmit_stat
003246  f00000f7          AND      r0,r0,#0xf7
00324a  f8890000          STRB     r0,[r9,#0]
                  |L1.12878|
;;;4792   	}	
;;;4793   					 	
;;;4794   #endif
;;;4795   
;;;4796   #ifdef UKU_KONTUR
;;;4797   
;;;4798   //Реле общей аварии
;;;4799   if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_AV_COMM))
;;;4800   	{
;;;4801   	if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_COMM,1);
;;;4802   	else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_COMM,1);
;;;4803   	}
;;;4804   else 
;;;4805   	{
;;;4806        if(  (!(avar_ind_stat&0x00007fff)) &&
;;;4807             ((!SK_REL_EN[0]) || (sk_av_stat[0]!=sasON))  &&
;;;4808             ((!SK_REL_EN[1]) || (sk_av_stat[1]!=sasON))  &&
;;;4809             ((!SK_REL_EN[2]) || (sk_av_stat[2]!=sasON))  /*&&
;;;4810             ((!SK_REL_EN[3]) || (sk_av_stat[3]!=sasON))*/  )SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_COMM,1);
;;;4811        else SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_COMM,1);
;;;4812   	}
;;;4813   
;;;4814   	
;;;4815   //rel_warm_plazma=0;
;;;4816   //Реле освещения   
;;;4817   /*
;;;4818   if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_WARM))
;;;4819   	{
;;;4820   	if(mess_data[1]==0)
;;;4821   		{
;;;4822   		SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_WARM,1);
;;;4823   		rel_warm_plazma=1;
;;;4824   		}
;;;4825   	else if(mess_data[1]==1) 
;;;4826   		{
;;;4827   		SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_WARM,1);
;;;4828   		rel_warm_plazma=2;
;;;4829   		}
;;;4830        }
;;;4831   else 
;;;4832   	{
;;;4833   	if(warm_stat_k==wsOFF) 
;;;4834   		{
;;;4835   		SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_WARM,1);
;;;4836   		rel_warm_plazma=3;
;;;4837   		}
;;;4838        else 
;;;4839   		{
;;;4840   		SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_WARM,1);
;;;4841   		rel_warm_plazma=4;
;;;4842   		}
;;;4843   	}
;;;4844   */
;;;4845   //Реле освещения
;;;4846   if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_LIGHT))
;;;4847   	{
;;;4848   	if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_LIGHT,1);
;;;4849   	else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_LIGHT,1);
;;;4850        }
;;;4851   else 
;;;4852   	{
;;;4853   	if(sk_av_stat[0]!=sasON) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_LIGHT,1);
;;;4854        else SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_LIGHT,1);
;;;4855   	}
;;;4856   
;;;4857   
;;;4858   
;;;4859   //Реле выключения нагрузки
;;;4860   if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_LOAD_OFF))
;;;4861   	{
;;;4862   	if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_LOAD_OFF,1);
;;;4863   	else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_LOAD_OFF,1);
;;;4864        }
;;;4865   else if(tloaddisable_cmnd==0)
;;;4866   	{
;;;4867   	SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_LOAD_OFF,1);
;;;4868   	}
;;;4869   else if((tloaddisable_cmnd)&&(tloaddisable_cmnd<=11))
;;;4870   	{
;;;4871   	SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_LOAD_OFF,1);
;;;4872   	}
;;;4873   
;;;4874   else 
;;;4875   	{
;;;4876   	if(!(tloaddisable_stat==tldsON)) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_LOAD_OFF,1);
;;;4877        else SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_LOAD_OFF,1);
;;;4878   	} 
;;;4879   
;;;4880   //Реле осевого вентилятора или отопителя
;;;4881   if(RELE_LOG)
;;;4882   	{
;;;4883   	if((mess_find_unvol(MESS2RELE_HNDL))&&(mess_data[0]==PARAM_RELE_VENT_WARM))
;;;4884   		{
;;;4885   		if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_VENT_WARM,1);
;;;4886   		else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_VENT_WARM,1);
;;;4887   		}
;;;4888   	else 
;;;4889   		{
;;;4890   		if(warm_stat_k==wsOFF) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_VENT_WARM,1);
;;;4891   	     else SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_VENT_WARM,1);
;;;4892   		} 
;;;4893   
;;;4894   	}
;;;4895   else 
;;;4896   	{
;;;4897   	if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_VENT_WARM))
;;;4898   		{
;;;4899   		if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_VENT_WARM,1);
;;;4900   		else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_VENT_WARM,1);
;;;4901   		}
;;;4902   	else 
;;;4903   		{
;;;4904   		if(vent_stat_k==vsOFF) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_VENT_WARM,1);
;;;4905   	     else SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_VENT_WARM,1);
;;;4906   		} 
;;;4907   	}
;;;4908   #endif
;;;4909   
;;;4910   
;;;4911   #ifdef UKU_TELECORE2015
;;;4912   //Реле аварии сети
;;;4913   if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_AV_NET))
;;;4914   	{
;;;4915   	if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_NET,1);
;;;4916   	else SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_NET,1);
;;;4917   	}
;;;4918   else	if(!(avar_ind_stat&0x00000001)) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_NET,1);
;;;4919   else SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_NET,1);
;;;4920   
;;;4921   
;;;4922   //Реле освещения
;;;4923   if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_LIGHT))
;;;4924   	{
;;;4925   	if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_LIGHT,1);
;;;4926   	else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_LIGHT,1);
;;;4927        }
;;;4928   else 
;;;4929   	{
;;;4930   	if(sk_av_stat[0]!=sasON) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_LIGHT,1);
;;;4931        else SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_LIGHT,1);
;;;4932   	}
;;;4933   
;;;4934   //Реле отопителя
;;;4935   if((mess_find_unvol(MESS2RELE_HNDL))&&(mess_data[0]==PARAM_RELE_WARM))
;;;4936   	{
;;;4937   	if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_WARM,1);
;;;4938   	else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_WARM,1);
;;;4939   	}
;;;4940   else 
;;;4941   	{
;;;4942   	if(warm_stat_k==wsOFF) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_WARM,1);
;;;4943        else SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_WARM,1);
;;;4944   	} 
;;;4945   //Реле вентилятора
;;;4946   if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_VENT))
;;;4947   	{
;;;4948   	if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_VENT,1);
;;;4949   	else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_VENT,1);
;;;4950   	}
;;;4951   else 
;;;4952   	{
;;;4953   	if(vent_stat_k==vsOFF) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_VENT,1);
;;;4954        else SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_VENT,1);
;;;4955   	} 
;;;4956   
;;;4957   //Реле внутреннего вентилятора
;;;4958   if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_VVENT))
;;;4959   	{
;;;4960   	if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_VVENT,1);
;;;4961   	else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_VVENT,1);
;;;4962   	}
;;;4963   else 
;;;4964   	{
;;;4965   	if(vvent_stat_k==vsOFF) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_VVENT,1);
;;;4966        else SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_VVENT,1);
;;;4967   	} 
;;;4968   
;;;4969   #endif
;;;4970   
;;;4971   #ifdef UKU_TELECORE2017
;;;4972   //Реле аварии сети
;;;4973   if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_AV_NET))
;;;4974   	{
;;;4975   	if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_NET,1);
;;;4976   	else SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_NET,1);
;;;4977   	}
;;;4978   else	if(!(avar_ind_stat&0x00000001)) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_NET,1);
;;;4979   else SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_NET,1);
;;;4980   
;;;4981   
;;;4982   //Реле освещения
;;;4983   if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_LIGHT))
;;;4984   	{
;;;4985   	if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_LIGHT,1);
;;;4986   	else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_LIGHT,1);
;;;4987        }
;;;4988   else 
;;;4989   	{
;;;4990   	if(sk_av_stat[0]!=sasON) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_LIGHT,1);
;;;4991        else SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_LIGHT,1);
;;;4992   	}
;;;4993   
;;;4994   //Реле отопителя
;;;4995   if((mess_find_unvol(MESS2RELE_HNDL))&&(mess_data[0]==PARAM_RELE_WARM))
;;;4996   	{
;;;4997   	if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_WARM,1);
;;;4998   	else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_WARM,1);
;;;4999   	}
;;;5000   else 
;;;5001   	{
;;;5002   	if(warm_stat_k==wsOFF) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_WARM,1);
;;;5003        else SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_WARM,1);
;;;5004   	} 
;;;5005   //Реле вентилятора
;;;5006   if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_VENT))
;;;5007   	{
;;;5008   	if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_VENT,1);
;;;5009   	else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_VENT,1);
;;;5010   	}
;;;5011   else 
;;;5012   	{
;;;5013   	if(vent_stat_k==vsOFF) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_VENT,1);
;;;5014        else SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_VENT,1);
;;;5015   	} 
;;;5016   
;;;5017   //Реле внутреннего вентилятора
;;;5018   if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_VVENT))
;;;5019   	{
;;;5020   	if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_VVENT,1);
;;;5021   	else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_VVENT,1);
;;;5022   	}
;;;5023   else 
;;;5024   	{
;;;5025   	if(vvent_stat_k==vsOFF) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_VVENT,1);
;;;5026        else SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_VVENT,1);
;;;5027   	} 
;;;5028   
;;;5029   //Реле выключения нагрузки
;;;5030   if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_LOAD_OFF))
;;;5031   	{
;;;5032   	if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_LOAD_OFF,1);
;;;5033   	else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_LOAD_OFF,1);
;;;5034        }
;;;5035   else if(tloaddisable_cmnd==0)
;;;5036   	{
;;;5037   	SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_LOAD_OFF,1);
;;;5038   	}
;;;5039   else if((tloaddisable_cmnd)&&(tloaddisable_cmnd<=11))
;;;5040   	{
;;;5041   	SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_LOAD_OFF,1);
;;;5042   	}
;;;5043   
;;;5044   else 
;;;5045   	{
;;;5046   	if(!(tloaddisable_stat==tldsON)) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_LOAD_OFF,1);
;;;5047        else SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_LOAD_OFF,1);
;;;5048   	} 
;;;5049   
;;;5050   
;;;5051   #endif
;;;5052   
;;;5053   #ifdef IPS_SGEP_GAZPROM
;;;5054   rele_hndl_plazma[0]++;
;;;5055   if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_AV_BPS))
;;;5056   	{
;;;5057   	rele_hndl_plazma[1]++;
;;;5058   	if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_BPS,1);
;;;5059   	else/* if(mess_data[1]==1)*/ SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_BPS,1);
;;;5060        }
;;;5061   else 
;;;5062   	{
;;;5063   	if(!(avar_ind_stat&0x000007f8)) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_BPS,1);
;;;5064        else SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_BPS,1);
;;;5065   	} 
;;;5066   
;;;5067   if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_AV_NET))
;;;5068   	{
;;;5069   	rele_hndl_plazma[2]++;
;;;5070   	if(mess_data[1]==0) SET_REG(LPC_GPIO3->FIOSET,1,25,1);
;;;5071   	else SET_REG(LPC_GPIO3->FIOCLR,1,25,1);
;;;5072   	}
;;;5073   else	if(!(avar_ind_stat&0x00000001)) SET_REG(LPC_GPIO3->FIOCLR,1,25,1);
;;;5074   else SET_REG(LPC_GPIO3->FIOSET,1,25,1);
;;;5075   #endif
;;;5076   
;;;5077   if(NUMBDR==1)
00324e  486f              LDR      r0,|L1.13324|
003250  8800              LDRH     r0,[r0,#0]  ; NUMBDR
003252  2801              CMP      r0,#1
003254  d17e              BNE      |L1.13140|
;;;5078   	{
;;;5079   	char ii_;
;;;5080   	char bdr_avar_stat_temp=0;
003256  f04f0000          MOV      r0,#0
;;;5081   	for	(ii_=0;ii_<4;ii_++)
00325a  4601              MOV      r1,r0
;;;5082   		{
;;;5083   		//АБ разряжена
;;;5084   		if((RELE_SET_MASK[ii_]&0x01)&&
;;;5085   			(load_U<(USIGN*10)))			bdr_avar_stat_temp|=(1<<ii_);
;;;5086   		//Ускоренный заряд
;;;5087   		if((RELE_SET_MASK[ii_]&0x02)&&
;;;5088   			(sp_ch_stat==scsWRK))			bdr_avar_stat_temp|=(1<<ii_);
;;;5089   		//Выравнивающий заряд
;;;5090   		if((RELE_SET_MASK[ii_]&0x04)&&
;;;5091   			(spc_stat==spcVZ))			bdr_avar_stat_temp|=(1<<ii_);
;;;5092   		//Общая авария ЗВУ
;;;5093   		if((RELE_SET_MASK[ii_]&0x08)&&
;;;5094   			(avar_stat))					bdr_avar_stat_temp|=(1<<ii_);
;;;5095   		//Uвых завышено
;;;5096   		if((RELE_SET_MASK[ii_]&0x10)&&
;;;5097   			(uout_av==1))					bdr_avar_stat_temp|=(1<<ii_);
00325c  f8dfa1b0          LDR      r10,|L1.13328|
;;;5098   		//Uвых занижено
;;;5099   		if((RELE_SET_MASK[ii_]&0x20)&&
;;;5100   			(uout_av==2))					bdr_avar_stat_temp|=(1<<ii_);
;;;5101   		if((RELE_SET_MASK[ii_]&0x40)&&
;;;5102   			(
;;;5103   			((bps[0]._av&(1<<4))&&(NUMIST>=1))||
003260  f8df91b0          LDR      r9,|L1.13332|
003264  4d6c              LDR      r5,|L1.13336|
003266  f8dfb1b4          LDR      r11,|L1.13340|
00326a  f04f0301          MOV      r3,#1                 ;4035
                  |L1.12910|
00326e  f93b2011          LDRSH    r2,[r11,r1,LSL #1]    ;5084
003272  ea5f7cc2          LSLS     r12,r2,#31            ;5084
003276  d010              BEQ      |L1.12954|
003278  f8dfc1a4          LDR      r12,|L1.13344|
00327c  f9b8e000          LDRSH    lr,[r8,#0]            ;5085  ; load_U
003280  f9bcc000          LDRSH    r12,[r12,#0]          ;5085  ; USIGN
003284  eb0c0c8c          ADD      r12,r12,r12,LSL #2    ;5085
003288  ebbe0f4c          CMP      lr,r12,LSL #1         ;5085
00328c  da05              BGE      |L1.12954|
00328e  fa03fc01          LSL      r12,r3,r1             ;5085
003292  ea4c0c00          ORR      r12,r12,r0            ;5085
003296  f00c00ff          AND      r0,r12,#0xff          ;5085
                  |L1.12954|
00329a  ea5f7c82          LSLS     r12,r2,#30            ;5087
00329e  d50a              BPL      |L1.12982|
0032a0  f897c000          LDRB     r12,[r7,#0]           ;5088  ; sp_ch_stat
0032a4  f1bc0f02          CMP      r12,#2                ;5088
0032a8  d105              BNE      |L1.12982|
0032aa  fa03fc01          LSL      r12,r3,r1             ;5088
0032ae  ea4c0c00          ORR      r12,r12,r0            ;5088
0032b2  f00c00ff          AND      r0,r12,#0xff          ;5088
                  |L1.12982|
0032b6  ea5f7c42          LSLS     r12,r2,#29            ;5090
0032ba  d50a              BPL      |L1.13010|
0032bc  f896c01a          LDRB     r12,[r6,#0x1a]        ;5091  ; spc_stat
0032c0  f1bc0f02          CMP      r12,#2                ;5091
0032c4  d105              BNE      |L1.13010|
0032c6  fa03fc01          LSL      r12,r3,r1             ;5091
0032ca  ea4c0c00          ORR      r12,r12,r0            ;5091
0032ce  f00c00ff          AND      r0,r12,#0xff          ;5091
                  |L1.13010|
0032d2  ea5f7c02          LSLS     r12,r2,#28            ;5093
0032d6  d50c              BPL      |L1.13042|
0032d8  f8dfc148          LDR      r12,|L1.13348|
0032dc  f8dcc000          LDR      r12,[r12,#0]          ;5094  ; avar_stat
0032e0  f1bc0f00          CMP      r12,#0                ;5094
0032e4  d005              BEQ      |L1.13042|
0032e6  fa03fc01          LSL      r12,r3,r1             ;5094
0032ea  ea4c0c00          ORR      r12,r12,r0            ;5094
0032ee  f00c00ff          AND      r0,r12,#0xff          ;5094
                  |L1.13042|
0032f2  ea5f6cc2          LSLS     r12,r2,#27            ;5096
0032f6  d50a              BPL      |L1.13070|
0032f8  f89ac000          LDRB     r12,[r10,#0]          ;5097  ; uout_av
0032fc  f1bc0f01          CMP      r12,#1                ;5097
003300  d105              BNE      |L1.13070|
003302  fa03fc01          LSL      r12,r3,r1             ;5097
003306  ea4c0c00          ORR      r12,r12,r0            ;5097
00330a  f00c00ff          AND      r0,r12,#0xff          ;5097
                  |L1.13070|
00330e  ea5f6c82          LSLS     r12,r2,#26            ;5099
003312  d50a              BPL      |L1.13098|
003314  f89ac000          LDRB     r12,[r10,#0]          ;5100  ; uout_av
003318  f1bc0f02          CMP      r12,#2                ;5100
00331c  d105              BNE      |L1.13098|
00331e  fa03fc01          LSL      r12,r3,r1             ;5100
003322  ea4c0c00          ORR      r12,r12,r0            ;5100
003326  f00c00ff          AND      r0,r12,#0xff          ;5100
                  |L1.13098|
00332a  ea5f6c42          LSLS     r12,r2,#25            ;5101
00332e  d525              BPL      |L1.13180|
003330  f899c001          LDRB     r12,[r9,#1]  ; bps
003334  ea5f6ccc          LSLS     r12,r12,#27
003338  d504              BPL      |L1.13124|
00333a  f9b5c000          LDRSH    r12,[r5,#0]  ; NUMIST
00333e  f1bc0f01          CMP      r12,#1
003342  da15              BGE      |L1.13168|
                  |L1.13124|
;;;5104   			((bps[1]._av&(1<<4))&&(NUMIST>=2))||
003344  f899c05d          LDRB     r12,[r9,#0x5d]  ; bps
003348  ea5f6ccc          LSLS     r12,r12,#27
00334c  d506              BPL      |L1.13148|
00334e  f9b5c000          LDRSH    r12,[r5,#0]  ; NUMIST
003352  e000              B        |L1.13142|
                  |L1.13140|
003354  e047              B        |L1.13286|
                  |L1.13142|
003356  f1bc0f02          CMP      r12,#2
00335a  da09              BGE      |L1.13168|
                  |L1.13148|
;;;5105   			((bps[2]._av&(1<<4))&&(NUMIST>=3))
00335c  f899c0b9          LDRB     r12,[r9,#0xb9]  ; bps
003360  ea5f6ccc          LSLS     r12,r12,#27
003364  d50a              BPL      |L1.13180|
003366  f9b5c000          LDRSH    r12,[r5,#0]  ; NUMIST
00336a  f1bc0f03          CMP      r12,#3
00336e  db05              BLT      |L1.13180|
                  |L1.13168|
;;;5106   			))bdr_avar_stat_temp|=(1<<ii_);
003370  fa03fc01          LSL      r12,r3,r1
003374  ea4c0c00          ORR      r12,r12,r0
003378  f00c00ff          AND      r0,r12,#0xff
                  |L1.13180|
;;;5107   		if((RELE_SET_MASK[ii_]&0x80)&&
00337c  ea5f6c02          LSLS     r12,r2,#24
003380  d523              BPL      |L1.13258|
;;;5108   			(
;;;5109   			((bps[0]._av&(0x0f))&&(NUMIST>=1))||
003382  f899c001          LDRB     r12,[r9,#1]  ; bps
003386  ea5f7c0c          LSLS     r12,r12,#28
00338a  d004              BEQ      |L1.13206|
00338c  f9b5c000          LDRSH    r12,[r5,#0]  ; NUMIST
003390  f1bc0f01          CMP      r12,#1
003394  da13              BGE      |L1.13246|
                  |L1.13206|
;;;5110   			((bps[1]._av&(0x0f))&&(NUMIST>=2))||
003396  f899c05d          LDRB     r12,[r9,#0x5d]  ; bps
00339a  ea5f7c0c          LSLS     r12,r12,#28
00339e  d004              BEQ      |L1.13226|
0033a0  f9b5c000          LDRSH    r12,[r5,#0]  ; NUMIST
0033a4  f1bc0f02          CMP      r12,#2
0033a8  da09              BGE      |L1.13246|
                  |L1.13226|
;;;5111   			((bps[2]._av&(0x0f))&&(NUMIST>=3))
0033aa  f899c0b9          LDRB     r12,[r9,#0xb9]  ; bps
0033ae  ea5f7c0c          LSLS     r12,r12,#28
0033b2  d00a              BEQ      |L1.13258|
0033b4  f9b5c000          LDRSH    r12,[r5,#0]  ; NUMIST
0033b8  f1bc0f03          CMP      r12,#3
0033bc  db05              BLT      |L1.13258|
                  |L1.13246|
;;;5112   			))bdr_avar_stat_temp|=(1<<ii_);
0033be  fa03fc01          LSL      r12,r3,r1
0033c2  ea4c0c00          ORR      r12,r12,r0
0033c6  f00c00ff          AND      r0,r12,#0xff
                  |L1.13258|
;;;5113   
;;;5114   		if(!(RELE_SET_MASK[ii_]&(1<<15))) bdr_avar_stat_temp^=(1<<ii_); 
0033ca  0412              LSLS     r2,r2,#16
0033cc  d404              BMI      |L1.13272|
0033ce  fa03f201          LSL      r2,r3,r1
0033d2  ea820200          EOR      r2,r2,r0
0033d6  b2d0              UXTB     r0,r2
                  |L1.13272|
0033d8  f1010101          ADD      r1,r1,#1              ;5081
0033dc  b2c9              UXTB     r1,r1                 ;5081
0033de  2904              CMP      r1,#4                 ;5081
0033e0  f4ffaf45          BCC      |L1.12910|
;;;5115   		}
;;;5116   	bdr_avar_stat=bdr_avar_stat_temp;
0033e4  7020              STRB     r0,[r4,#0]
                  |L1.13286|
;;;5117   	}
;;;5118   }
0033e6  e01f              B        |L1.13352|
                  |L1.13288|
                          DCD      load_U
                  |L1.13292|
                          DCD      sp_ch_stat
                  |L1.13296|
                          DCD      ||area_number.25||
                  |L1.13300|
                          DCD      DOP_RELE_FUNC
                  |L1.13304|
                          DCD      speedChIsOn
                  |L1.13308|
                          DCD      hv_vz_stat
                  |L1.13312|
                          DCD      UVENTOFF
                  |L1.13316|
                          DCD      bdr_transmit_stat
                  |L1.13320|
                          DCD      bdr_avar_stat
                  |L1.13324|
                          DCD      NUMBDR
                  |L1.13328|
                          DCD      uout_av
                  |L1.13332|
                          DCD      bps
                  |L1.13336|
                          DCD      NUMIST
                  |L1.13340|
                          DCD      RELE_SET_MASK
                  |L1.13344|
                          DCD      USIGN
                  |L1.13348|
                          DCD      avar_stat
                  |L1.13352|
003428  e8bd9ff0          POP      {r4-r12,pc}
;;;5119   
                          ENDP

                  bps_hndl PROC
;;;5121   //-----------------------------------------------
;;;5122   void bps_hndl(void)
00342c  e92d5ff0          PUSH     {r4-r12,lr}
;;;5123   {
;;;5124   char ptr__,i;
;;;5125   unsigned short tempUS;
;;;5126   
;;;5127   if(sh_cnt0<10)
003430  4efd              LDR      r6,|L1.14376|
;;;5128   	{
;;;5129   	sh_cnt0++;
;;;5130   	if(sh_cnt0>=10)
;;;5131   		{
;;;5132   		sh_cnt0=0;
003432  2700              MOVS     r7,#0
;;;5133   		b1Hz_sh=1;
003434  f04f0a01          MOV      r10,#1
003438  7e30              LDRB     r0,[r6,#0x18]         ;5127  ; sh_cnt0
00343a  280a              CMP      r0,#0xa               ;5127
00343c  d208              BCS      |L1.13392|
00343e  f1000001          ADD      r0,r0,#1              ;5129
003442  b2c0              UXTB     r0,r0                 ;5129
003444  7630              STRB     r0,[r6,#0x18]         ;5129
003446  280a              CMP      r0,#0xa               ;5130
003448  d302              BCC      |L1.13392|
00344a  7637              STRB     r7,[r6,#0x18]         ;5132
00344c  f886a019          STRB     r10,[r6,#0x19]
                  |L1.13392|
;;;5134   		}
;;;5135   	}
;;;5136   
;;;5137   /*if(sh_cnt1<5)
;;;5138   	{
;;;5139   	sh_cnt1++;
;;;5140   	if(sh_cnt1==5)
;;;5141   		{
;;;5142   		sh_cnt1=0;
;;;5143   		b2Hz_sh=1;
;;;5144   		}
;;;5145   	} */
;;;5146   
;;;5147   
;;;5148   /*
;;;5149   if(mess_find(MESS_SRC_ON_OFF))
;;;5150   	{
;;;5151   	if(mess_data[0]==_MESS_SRC_MASK_BLOK_2SEC)
;;;5152   		{
;;;5153   		char i;
;;;5154   		for(i=0;i<NUMIST;i++)
;;;5155   			{
;;;5156   			if(mess_data[1]&(1<<i))src[i]._ist_blok_cnt=20;
;;;5157   			}
;;;5158   		
;;;5159   		}
;;;5160   	else if(mess_data[0]==_MESS_SRC_MASK_UNBLOK)
;;;5161   		{
;;;5162   		char i;
;;;5163   		for(i=0;i<NUMIST;i++)
;;;5164   			{
;;;5165   			if(mess_data[1]&(1<<i))src[i]._ist_blok_cnt=0;
;;;5166   			}
;;;5167   		
;;;5168   		}
;;;5169   	}
;;;5170   	
;;;5171   else if(mess_find(_MESS_SRC_MASK_ON))
;;;5172   	{				
;;;5173   	if(mess_data[0]==_MESS_SRC_MASK_ON)
;;;5174   		{
;;;5175   		char i;
;;;5176   		for(i=0;i<NUMIST;i++)
;;;5177   			{
;;;5178   			if(mess_data[1]&(1<<i))
;;;5179   				{
;;;5180   				src[i]._ist_blok_cnt=0;
;;;5181   				src[i]._flags_tu=2;
;;;5182   				}
;;;5183   			}
;;;5184   		
;;;5185   		}				
;;;5186   	}*/
;;;5187   
;;;5188   
;;;5189   
;;;5190   /*else*/ 
;;;5191   bps_on_mask=0;
003450  f8a67058          STRH     r7,[r6,#0x58]
;;;5192   bps_off_mask=0;
003454  f8a6705a          STRH     r7,[r6,#0x5a]
;;;5193   
;;;5194   if(mess_find_unvol(MESS2BPS_HNDL))
003458  20cd              MOVS     r0,#0xcd
00345a  f7fffffe          BL       mess_find_unvol
;;;5195   	{
;;;5196   	if(mess_data[0]==PARAM_BPS_ALL_OFF_AFTER_2SEC)
;;;5197   		{
;;;5198   		bps_off_mask=0xffff;
;;;5199   		}
;;;5200   
;;;5201   	if(mess_data[0]==PARAM_BPS_MASK_OFF_AFTER_2SEC)
;;;5202   		{
;;;5203   		bps_off_mask=mess_data[1];
;;;5204   		}
;;;5205   
;;;5206   	if(mess_data[0]==PARAM_BPS_MASK_ON)
;;;5207   		{
;;;5208   		bps_on_mask=mess_data[1];
;;;5209   		}
;;;5210   
;;;5211   	if(mess_data[0]==PARAM_BPS_ALL_ON)
;;;5212   		{
;;;5213   		bps_on_mask=0xffff;
;;;5214   		}
;;;5215   
;;;5216   	if(mess_data[0]==PARAM_BPS_MASK_ON_OFF_AFTER_2SEC)
;;;5217   		{
;;;5218   		bps_on_mask=mess_data[1];
;;;5219   		bps_off_mask=~(mess_data[1]);
;;;5220   		}
;;;5221   
;;;5222   
;;;5223   	for(i=0;i<=NUMIST;i++)
;;;5224   		{
;;;5225   		if(bps_off_mask&(1<<i)) bps[i]._blok_cnt++;
00345e  f8df83cc          LDR      r8,|L1.14380|
003462  f8dfb3cc          LDR      r11,|L1.14384|
003466  b3a0              CBZ      r0,|L1.13522|
003468  4af2              LDR      r2,|L1.14388|
00346a  f64f73ff          MOV      r3,#0xffff            ;5198
00346e  6810              LDR      r0,[r2,#0]            ;5196  ; mess_data
003470  28ce              CMP      r0,#0xce              ;5196
003472  d101              BNE      |L1.13432|
003474  f8a6305a          STRH     r3,[r6,#0x5a]         ;5198
                  |L1.13432|
003478  28cf              CMP      r0,#0xcf              ;5201
00347a  d102              BNE      |L1.13442|
00347c  6851              LDR      r1,[r2,#4]            ;5203  ; mess_data
00347e  f8a6105a          STRH     r1,[r6,#0x5a]         ;5203
                  |L1.13442|
003482  28d1              CMP      r0,#0xd1              ;5206
003484  d102              BNE      |L1.13452|
003486  6851              LDR      r1,[r2,#4]            ;5208  ; mess_data
003488  f8a61058          STRH     r1,[r6,#0x58]         ;5208
                  |L1.13452|
00348c  28d2              CMP      r0,#0xd2              ;5211
00348e  d101              BNE      |L1.13460|
003490  f8a63058          STRH     r3,[r6,#0x58]         ;5213
                  |L1.13460|
003494  28d0              CMP      r0,#0xd0              ;5216
003496  d106              BNE      |L1.13478|
003498  6850              LDR      r0,[r2,#4]            ;5218  ; mess_data
00349a  f8a60058          STRH     r0,[r6,#0x58]         ;5218
00349e  ea6f0000          MVN      r0,r0                 ;5219
0034a2  f8a6005a          STRH     r0,[r6,#0x5a]         ;5219
                  |L1.13478|
0034a6  f04f0400          MOV      r4,#0                 ;5223
0034aa  e037              B        |L1.13596|
                  |L1.13484|
0034ac  f8b6005a          LDRH     r0,[r6,#0x5a]  ; bps_off_mask
0034b0  fa0af904          LSL      r9,r10,r4
0034b4  ea190f00          TST      r9,r0
0034b8  d00c              BEQ      |L1.13524|
0034ba  ebc400c4          RSB      r0,r4,r4,LSL #3
0034be  eb001004          ADD      r0,r0,r4,LSL #4
0034c2  eb080080          ADD      r0,r8,r0,LSL #2
0034c6  f8301f40          LDRH     r1,[r0,#0x40]!
0034ca  f1010101          ADD      r1,r1,#1
0034ce  8001              STRH     r1,[r0,#0]
0034d0  e008              B        |L1.13540|
                  |L1.13522|
0034d2  e028              B        |L1.13606|
                  |L1.13524|
;;;5226   		else bps[i]._blok_cnt=0;
0034d4  ebc400c4          RSB      r0,r4,r4,LSL #3
0034d8  eb001004          ADD      r0,r0,r4,LSL #4
0034dc  eb080080          ADD      r0,r8,r0,LSL #2
0034e0  f8a07040          STRH     r7,[r0,#0x40]
                  |L1.13540|
;;;5227   		gran(&bps[i]._blok_cnt,0,50);
0034e4  ebc400c4          RSB      r0,r4,r4,LSL #3
0034e8  eb001004          ADD      r0,r0,r4,LSL #4
0034ec  eb080580          ADD      r5,r8,r0,LSL #2
0034f0  f1050040          ADD      r0,r5,#0x40
0034f4  2232              MOVS     r2,#0x32
0034f6  2100              MOVS     r1,#0
0034f8  f7fffffe          BL       gran
;;;5228   		if(bps[i]._blok_cnt>20) bps[i]._flags_tu=1;
0034fc  f9b50040          LDRSH    r0,[r5,#0x40]
003500  2814              CMP      r0,#0x14
003502  dd01              BLE      |L1.13576|
003504  f885a02c          STRB     r10,[r5,#0x2c]
                  |L1.13576|
;;;5229   		if(bps_on_mask&(1<<i)) bps[i]._flags_tu=0;
003508  f8b60058          LDRH     r0,[r6,#0x58]  ; bps_on_mask
00350c  ea190f00          TST      r9,r0
003510  d001              BEQ      |L1.13590|
003512  f885702c          STRB     r7,[r5,#0x2c]
                  |L1.13590|
003516  f1040401          ADD      r4,r4,#1              ;5223
00351a  b2e4              UXTB     r4,r4                 ;5223
                  |L1.13596|
00351c  f9bb0000          LDRSH    r0,[r11,#0]           ;5223  ; NUMIST
003520  4284              CMP      r4,r0                 ;5223
003522  ddc3              BLE      |L1.13484|
003524  e08b              B        |L1.13886|
                  |L1.13606|
;;;5230   	     }
;;;5231   
;;;5232   	
;;;5233   /*
;;;5234   
;;;5235   	if(bps_all_off_cnt>20)
;;;5236   		{
;;;5237   		for(i=0;i<=NUMIST;i++)
;;;5238   			{
;;;5239   	     	bps[i]._flags_tu=1;
;;;5240   	     	}
;;;5241   		}
;;;5242   	else if(bps_mask_off_cnt>20)
;;;5243   		{
;;;5244   		for(i=0;i<=NUMIST;i++)
;;;5245   			{
;;;5246   			if(mess_data[1]&(1<<i)) bps[i]._flags_tu=1;
;;;5247   	     	}
;;;5248   		}	
;;;5249   		
;;;5250   	else if(bps_mask_on_off_cnt>20)
;;;5251   		{
;;;5252   		for(i=0;i<=NUMIST;i++)
;;;5253   			{
;;;5254   			if(mess_data[1]&(1<<i)) bps[i]._flags_tu=1;
;;;5255   			else bps[i]._flags_tu=0;
;;;5256   	     	}
;;;5257   		}
;;;5258   		
;;;5259   	if(mess_data[0]==PARAM_BPS_MASK_ON)
;;;5260   		{
;;;5261   		for(i=0;i<=NUMIST;i++)
;;;5262   			{
;;;5263   			if(mess_data[1]&(1<<i)) bps[i]._flags_tu=0;
;;;5264   	     	}
;;;5265   		}
;;;5266   */										
;;;5267   	}
;;;5268   
;;;5269   
;;;5270   else if(b1Hz_sh)
003526  7e70              LDRB     r0,[r6,#0x19]  ; b1Hz_sh
003528  b3f0              CBZ      r0,|L1.13736|
;;;5271   	{
;;;5272   	ptr__=0;
00352a  f04f0400          MOV      r4,#0
;;;5273        for(i=0;i<=NUMIST;i++)
00352e  4621              MOV      r1,r4
003530  f9bb0000          LDRSH    r0,[r11,#0]           ;5223
003534  e00a              B        |L1.13644|
                  |L1.13622|
;;;5274   		{
;;;5275   	     bps[i]._flags_tu=1;
003536  ebc102c1          RSB      r2,r1,r1,LSL #3
00353a  eb021201          ADD      r2,r2,r1,LSL #4
00353e  eb080282          ADD      r2,r8,r2,LSL #2
003542  f882a02c          STRB     r10,[r2,#0x2c]
003546  f1010101          ADD      r1,r1,#1              ;5273
00354a  b2c9              UXTB     r1,r1                 ;5273
                  |L1.13644|
00354c  4281              CMP      r1,r0                 ;5273
00354e  ddf2              BLE      |L1.13622|
;;;5276   	     }	
;;;5277     	     
;;;5278     	for(i=0;(i<NUMIST)&&(ptr__<num_necc);i++)
003550  f04f0100          MOV      r1,#0
003554  e022              B        |L1.13724|
                  |L1.13654|
;;;5279     		{
;;;5280   		char ii,iii;
;;;5281   
;;;5282   		ii=(char)NUMIST;
003556  b2c2              UXTB     r2,r0
;;;5283   		//if(ii<0)ii=0;
;;;5284   		if(ii>32)ii=32;
003558  2a20              CMP      r2,#0x20
00355a  d901              BLS      |L1.13664|
00355c  f04f0220          MOV      r2,#0x20
                  |L1.13664|
;;;5285   		iii=numOfForvardBps;
003560  7ff3              LDRB     r3,[r6,#0x1f]  ; numOfForvardBps
;;;5286   		//if(iii<0)iii=0;
;;;5287   		if(iii>=NUMIST)iii=0;
003562  4283              CMP      r3,r0
003564  db01              BLT      |L1.13674|
003566  f04f0300          MOV      r3,#0
                  |L1.13674|
;;;5288   		iii+=i;
00356a  440b              ADD      r3,r3,r1
00356c  b2db              UXTB     r3,r3
;;;5289   		iii=iii%ii;
00356e  fbb3f5f2          UDIV     r5,r3,r2
003572  fb023215          MLS      r2,r2,r5,r3
;;;5290   		
;;;5291     	     if((bps[iii]._state==bsRDY)||(bps[iii]._state==bsWRK))
003576  ebc203c2          RSB      r3,r2,r2,LSL #3
00357a  eb031202          ADD      r2,r3,r2,LSL #4
00357e  eb080282          ADD      r2,r8,r2,LSL #2
003582  7893              LDRB     r3,[r2,#2]
003584  2b02              CMP      r3,#2
003586  d001              BEQ      |L1.13708|
003588  2b01              CMP      r3,#1
00358a  d104              BNE      |L1.13718|
                  |L1.13708|
;;;5292     	         	{
;;;5293     	         	bps[iii]._flags_tu=0;
00358c  f882702c          STRB     r7,[r2,#0x2c]
;;;5294     	         	ptr__++;
003590  f1040401          ADD      r4,r4,#1
003594  b2e4              UXTB     r4,r4
                  |L1.13718|
003596  f1010101          ADD      r1,r1,#1              ;5278
00359a  b2c9              UXTB     r1,r1                 ;5278
                  |L1.13724|
00359c  4281              CMP      r1,r0                 ;5278
00359e  da06              BGE      |L1.13742|
0035a0  4aa5              LDR      r2,|L1.14392|
0035a2  f9b22000          LDRSH    r2,[r2,#0]            ;5278  ; num_necc
0035a6  e000              B        |L1.13738|
                  |L1.13736|
0035a8  e049              B        |L1.13886|
                  |L1.13738|
0035aa  4294              CMP      r4,r2                 ;5278
0035ac  dbd3              BLT      |L1.13654|
                  |L1.13742|
;;;5295     	         	}
;;;5296   			
;;;5297     	     }
;;;5298   	bps[numOfForvardBps_old]._flags_tu=0;
0035ae  f8961020          LDRB     r1,[r6,#0x20]  ; numOfForvardBps_old
0035b2  ebc102c1          RSB      r2,r1,r1,LSL #3
0035b6  eb021101          ADD      r1,r2,r1,LSL #4
0035ba  eb080181          ADD      r1,r8,r1,LSL #2
0035be  f881702c          STRB     r7,[r1,#0x2c]
;;;5299   
;;;5300   	if(main_1Hz_cnt<60)
0035c2  499e              LDR      r1,|L1.14396|
0035c4  f9b11000          LDRSH    r1,[r1,#0]  ; main_1Hz_cnt
0035c8  293c              CMP      r1,#0x3c
0035ca  da0f              BGE      |L1.13804|
;;;5301   		{
;;;5302        	for(i=0;i<=NUMIST;i++)
0035cc  f04f0100          MOV      r1,#0
0035d0  e00a              B        |L1.13800|
                  |L1.13778|
;;;5303   			{
;;;5304   	     	bps[i]._flags_tu=0;
0035d2  ebc102c1          RSB      r2,r1,r1,LSL #3
0035d6  eb021201          ADD      r2,r2,r1,LSL #4
0035da  eb080282          ADD      r2,r8,r2,LSL #2
0035de  f882702c          STRB     r7,[r2,#0x2c]
0035e2  f1010101          ADD      r1,r1,#1              ;5302
0035e6  b2c9              UXTB     r1,r1                 ;5302
                  |L1.13800|
0035e8  4281              CMP      r1,r0                 ;5302
0035ea  ddf2              BLE      |L1.13778|
                  |L1.13804|
;;;5305   	     	}	
;;;5306   		}
;;;5307   	if(ipsBlckStat)
0035ec  4994              LDR      r1,|L1.14400|
0035ee  8809              LDRH     r1,[r1,#0]  ; ipsBlckStat
0035f0  b179              CBZ      r1,|L1.13842|
;;;5308   		{
;;;5309        	for(i=0;i<=NUMIST;i++)
0035f2  f04f0100          MOV      r1,#0
0035f6  e00a              B        |L1.13838|
                  |L1.13816|
;;;5310   			{
;;;5311   	     	bps[i]._flags_tu=1;
0035f8  ebc102c1          RSB      r2,r1,r1,LSL #3
0035fc  eb021201          ADD      r2,r2,r1,LSL #4
003600  eb080282          ADD      r2,r8,r2,LSL #2
003604  f882a02c          STRB     r10,[r2,#0x2c]
003608  f1010101          ADD      r1,r1,#1              ;5309
00360c  b2c9              UXTB     r1,r1                 ;5309
                  |L1.13838|
00360e  4281              CMP      r1,r0                 ;5309
003610  ddf2              BLE      |L1.13816|
                  |L1.13842|
;;;5312   	     	}
;;;5313   		}
;;;5314   
;;;5315        for(i=0;i<=NUMIST;i++)
003612  f04f0100          MOV      r1,#0
;;;5316   		{
;;;5317   	    if(bps[i]._flags_tu==1) 	bps[i]._x_=-50;
003616  f06f0331          MVN      r3,#0x31
00361a  e00e              B        |L1.13882|
                  |L1.13852|
00361c  ebc102c1          RSB      r2,r1,r1,LSL #3
003620  eb021201          ADD      r2,r2,r1,LSL #4
003624  eb080282          ADD      r2,r8,r2,LSL #2
003628  f892402c          LDRB     r4,[r2,#0x2c]
00362c  2c01              CMP      r4,#1
00362e  d101              BNE      |L1.13876|
003630  f8a23050          STRH     r3,[r2,#0x50]
                  |L1.13876|
003634  f1010101          ADD      r1,r1,#1              ;5315
003638  b2c9              UXTB     r1,r1                 ;5315
                  |L1.13882|
00363a  4281              CMP      r1,r0                 ;5315
00363c  ddee              BLE      |L1.13852|
                  |L1.13886|
;;;5318   	   	}	
;;;5319   		 
;;;5320     	}
;;;5321   
;;;5322   
;;;5323   for(i=0;i<NUMIST;i++)
00363e  f04f0000          MOV      r0,#0
;;;5324        {
;;;5325        if(bps[i]._ist_blok_host_cnt!=0)
;;;5326             {
;;;5327             bps[i]._flags_tu=99;
003642  f04f0463          MOV      r4,#0x63
003646  f9bb1000          LDRSH    r1,[r11,#0]           ;5223
00364a  e00f              B        |L1.13932|
                  |L1.13900|
00364c  ebc002c0          RSB      r2,r0,r0,LSL #3       ;5325
003650  eb021200          ADD      r2,r2,r0,LSL #4       ;5325
003654  eb080282          ADD      r2,r8,r2,LSL #2       ;5325
003658  6bd3              LDR      r3,[r2,#0x3c]         ;5325
00365a  b123              CBZ      r3,|L1.13926|
00365c  f882402c          STRB     r4,[r2,#0x2c]
;;;5328   	     bps[i]._ist_blok_host_cnt--;
003660  f1a30301          SUB      r3,r3,#1
003664  63d3              STR      r3,[r2,#0x3c]
                  |L1.13926|
003666  f1000001          ADD      r0,r0,#1              ;5323
00366a  b2c0              UXTB     r0,r0                 ;5323
                  |L1.13932|
00366c  4288              CMP      r0,r1                 ;5323
00366e  dbed              BLT      |L1.13900|
;;;5329             }
;;;5330        }
;;;5331   
;;;5332   
;;;5333   
;;;5334   
;;;5335   b1Hz_sh=0;
003670  7677              STRB     r7,[r6,#0x19]
;;;5336   
;;;5337   
;;;5338   num_of_wrks_bps=0;
003672  7577              STRB     r7,[r6,#0x15]
;;;5339   tempUS=0;
003674  f04f0200          MOV      r2,#0
;;;5340   for(i=0;i<NUMIST;i++)
003678  4610              MOV      r0,r2
00367a  e013              B        |L1.13988|
                  |L1.13948|
;;;5341   	{
;;;5342   	if(bps[i]._state==bsWRK)
00367c  ebc003c0          RSB      r3,r0,r0,LSL #3
003680  eb031300          ADD      r3,r3,r0,LSL #4
003684  eb080383          ADD      r3,r8,r3,LSL #2
003688  789c              LDRB     r4,[r3,#2]
00368a  2c01              CMP      r4,#1
00368c  d107              BNE      |L1.13982|
;;;5343   		{
;;;5344   		num_of_wrks_bps++;
00368e  7d74              LDRB     r4,[r6,#0x15]  ; num_of_wrks_bps
003690  f1040401          ADD      r4,r4,#1
003694  7574              STRB     r4,[r6,#0x15]
;;;5345   		if(bps[i]._Uii>tempUS)tempUS=bps[i]._Uii;
003696  69db              LDR      r3,[r3,#0x1c]
003698  4293              CMP      r3,r2
00369a  dd00              BLE      |L1.13982|
00369c  b29a              UXTH     r2,r3
                  |L1.13982|
00369e  f1000001          ADD      r0,r0,#1              ;5340
0036a2  b2c0              UXTB     r0,r0                 ;5340
                  |L1.13988|
0036a4  4288              CMP      r0,r1                 ;5340
0036a6  dbe9              BLT      |L1.13948|
;;;5346   		}
;;;5347   	}
;;;5348   Ubpsmax=tempUS;
0036a8  f8a62048          STRH     r2,[r6,#0x48]
;;;5349   
;;;5350   bPARALLEL_ENOUG=0;
0036ac  f8867023          STRB     r7,[r6,#0x23]
;;;5351   bPARALLEL_NOT_ENOUG=1;
0036b0  f886a022          STRB     r10,[r6,#0x22]
;;;5352   
;;;5353   for(i=0;i<NUMIST;i++)
0036b4  f04f0000          MOV      r0,#0
;;;5354   	{
;;;5355   	if(bps[i]._Ti>=TSIGN)
0036b8  4a62              LDR      r2,|L1.14404|
0036ba  f9b23000          LDRSH    r3,[r2,#0]
;;;5356   		{
;;;5357   		bPARALLEL_ENOUG=1;
;;;5358   		}
;;;5359   	if(bps[i]._Ti>=(TSIGN-5))
0036be  f1a30405          SUB      r4,r3,#5
0036c2  e011              B        |L1.14056|
                  |L1.14020|
0036c4  ebc002c0          RSB      r2,r0,r0,LSL #3       ;5355
0036c8  eb021200          ADD      r2,r2,r0,LSL #4       ;5355
0036cc  eb080282          ADD      r2,r8,r2,LSL #2       ;5355
0036d0  6a92              LDR      r2,[r2,#0x28]         ;5355
0036d2  429a              CMP      r2,r3                 ;5355
0036d4  db01              BLT      |L1.14042|
0036d6  f886a023          STRB     r10,[r6,#0x23]        ;5357
                  |L1.14042|
0036da  42a2              CMP      r2,r4
0036dc  db01              BLT      |L1.14050|
;;;5360   		{
;;;5361   		bPARALLEL_NOT_ENOUG=0;
0036de  f8867022          STRB     r7,[r6,#0x22]
                  |L1.14050|
0036e2  f1000001          ADD      r0,r0,#1              ;5353
0036e6  b2c0              UXTB     r0,r0                 ;5353
                  |L1.14056|
0036e8  4288              CMP      r0,r1                 ;5353
0036ea  dbeb              BLT      |L1.14020|
;;;5362   		}
;;;5363   	}
;;;5364   
;;;5365   if(bPARALLEL_ENOUG==1)
0036ec  f8960023          LDRB     r0,[r6,#0x23]  ; bPARALLEL_ENOUG
0036f0  2801              CMP      r0,#1
0036f2  d00a              BEQ      |L1.14090|
;;;5366   	{
;;;5367   	bPARALLEL=1;
;;;5368   	}
;;;5369   else if(bPARALLEL && bPARALLEL_NOT_ENOUG)
0036f4  f8960024          LDRB     r0,[r6,#0x24]  ; bPARALLEL
0036f8  2800              CMP      r0,#0
0036fa  d005              BEQ      |L1.14088|
0036fc  f8960022          LDRB     r0,[r6,#0x22]  ; bPARALLEL_NOT_ENOUG
003700  2800              CMP      r0,#0
003702  d001              BEQ      |L1.14088|
;;;5370   	{
;;;5371   	bPARALLEL=0;
003704  f8867024          STRB     r7,[r6,#0x24]
                  |L1.14088|
;;;5372   	}
;;;5373   }
003708  e66d              B        |L1.13286|
                  |L1.14090|
00370a  f886a024          STRB     r10,[r6,#0x24]        ;5367
00370e  e66a              B        |L1.13286|
;;;5374   
                          ENDP

                  powerAntiAliasingHndl PROC
;;;5381   //-----------------------------------------------
;;;5382   void powerAntiAliasingHndl(void)
003710  b570              PUSH     {r4-r6,lr}
;;;5383   {
;;;5384   if((power_summary_tempo/10UL)==(power_summary_tempo_old/10UL))
003712  230a              MOVS     r3,#0xa
003714  4c4d              LDR      r4,|L1.14412|
003716  484c              LDR      r0,|L1.14408|
;;;5385   	{
;;;5386   	if(powerSummaryCnt<15)powerSummaryCnt++;
;;;5387   	if(powerSummaryCnt>=10)
;;;5388   		{
;;;5389   		power_summary=power_summary_tempo;
;;;5390   		}
;;;5391   	}
;;;5392   else powerSummaryCnt=0;
003718  2500              MOVS     r5,#0
00371a  6822              LDR      r2,[r4,#0]            ;5384  ; power_summary_tempo_old
00371c  6800              LDR      r0,[r0,#0]            ;5384  ; power_summary_tempo
00371e  fbb2f6f3          UDIV     r6,r2,r3              ;5384
003722  fbb0f1f3          UDIV     r1,r0,r3              ;5384
003726  4a4a              LDR      r2,|L1.14416|
003728  42b1              CMP      r1,r6                 ;5384
00372a  d10b              BNE      |L1.14148|
00372c  7811              LDRB     r1,[r2,#0]            ;5386  ; powerSummaryCnt
00372e  290f              CMP      r1,#0xf               ;5386
003730  d202              BCS      |L1.14136|
003732  f1010101          ADD      r1,r1,#1              ;5386
003736  7011              STRB     r1,[r2,#0]            ;5386
                  |L1.14136|
003738  7811              LDRB     r1,[r2,#0]            ;5387  ; powerSummaryCnt
00373a  290a              CMP      r1,#0xa               ;5387
00373c  d303              BCC      |L1.14150|
00373e  4945              LDR      r1,|L1.14420|
003740  6008              STR      r0,[r1,#0]            ;5389  ; power_summary
003742  e000              B        |L1.14150|
                  |L1.14148|
003744  7015              STRB     r5,[r2,#0]
                  |L1.14150|
;;;5393   power_summary_tempo_old=power_summary_tempo;
003746  6020              STR      r0,[r4,#0]  ; power_summary_tempo_old
;;;5394   
;;;5395   if((power_current_tempo/10UL)==(power_current_tempo_old/10UL))
003748  4843              LDR      r0,|L1.14424|
00374a  4c44              LDR      r4,|L1.14428|
00374c  f9b00000          LDRSH    r0,[r0,#0]  ; power_current_tempo
003750  f9b42000          LDRSH    r2,[r4,#0]  ; power_current_tempo_old
003754  fbb0f1f3          UDIV     r1,r0,r3
003758  fbb2f3f3          UDIV     r3,r2,r3
;;;5396   	{
;;;5397   	if(powerCurrentCnt<15)powerCurrentCnt++;
00375c  4a40              LDR      r2,|L1.14432|
00375e  4299              CMP      r1,r3                 ;5395
003760  d10b              BNE      |L1.14202|
003762  7811              LDRB     r1,[r2,#0]  ; powerCurrentCnt
003764  290f              CMP      r1,#0xf
003766  d202              BCS      |L1.14190|
003768  f1010101          ADD      r1,r1,#1
00376c  7011              STRB     r1,[r2,#0]
                  |L1.14190|
;;;5398   	if(powerCurrentCnt>=10)
00376e  7811              LDRB     r1,[r2,#0]  ; powerCurrentCnt
003770  290a              CMP      r1,#0xa
003772  d303              BCC      |L1.14204|
;;;5399   		{
;;;5400   		power_current=power_current_tempo;
003774  493b              LDR      r1,|L1.14436|
003776  8008              STRH     r0,[r1,#0]
003778  e000              B        |L1.14204|
                  |L1.14202|
;;;5401   		}
;;;5402   	}
;;;5403   else powerCurrentCnt=0;
00377a  7015              STRB     r5,[r2,#0]
                  |L1.14204|
;;;5404   power_current_tempo_old=power_current_tempo;
00377c  8020              STRH     r0,[r4,#0]
;;;5405   }
00377e  bd70              POP      {r4-r6,pc}
;;;5406   
                          ENDP

                  energometr_hndl PROC
;;;5516   //-----------------------------------------------
;;;5517   void energometr_hndl(void)
003780  4770              BX       lr
;;;5518   {
;;;5519   //2F 3F 21 0D 0A 
;;;5520   //05 33 0A 2F 45 4B 54 35 43 45 31 30 32 4D 76 30 31 0D 0A 
;;;5521   //2F 3F 21 0D 0A 
;;;5522   //05 33 0A 2F 45 4B 54 35 43 45 31 30 32 4D 76 30 31 0D 0A 
;;;5523   //06 30 35 31 0D 0A 
;;;5524   //06 33 0A 01 50 30 02 28 31 31 38 36 35 32 39 32 32 29 03 2A 
;;;5525   
;;;5526   #ifdef CE102M_ENABLED
;;;5527   /*if
;;;5528   uart_out1 (5,0xaf,0x3f,0x21,0x8d,0x0a,0);*/
;;;5529   
;;;5530   if(read_power_cnt_main_cnt)
;;;5531   	{
;;;5532   	read_power_cnt_main_cnt--;
;;;5533   	if(read_power_cnt_main_cnt==0)
;;;5534   		{
;;;5535   		rx_read_power_cnt_phase=0;
;;;5536   		if(bENERGOMETR_UIP==0)bENERGOMETR_UIP=1;
;;;5537   		else if(bENERGOMETR_UIP==1)bENERGOMETR_UIP=2;
;;;5538   		else bENERGOMETR_UIP=0;
;;;5539   		//bENERGOMETR_UIP=2;
;;;5540   		}
;;;5541   	}
;;;5542   
;;;5543   if (rx_read_power_cnt_phase==0)
;;;5544   	{
;;;5545   	char command_with_crc[20];
;;;5546   	
;;;5547      	command_with_crc[0]=0xaf;  // /
;;;5548   	command_with_crc[1]=0x3f;  // ?
;;;5549   	command_with_crc[2]=0x21;  // !
;;;5550   	command_with_crc[3]=0x8d;  // CR
;;;5551   	command_with_crc[4]=0x0a;  // LF
;;;5552   
;;;5553   	uart_out__adr1(command_with_crc,5);
;;;5554   
;;;5555   	rx_wr_index1=0;
;;;5556   	rx_read_power_cnt_phase=1;
;;;5557   
;;;5558   	read_power_cnt_main_cnt=50;
;;;5559   	}
;;;5560   if ((rx_read_power_cnt_phase==2)&&(!ce102m_delayCnt))
;;;5561   	{
;;;5562   	char command_with_crc[20];
;;;5563   	
;;;5564   	command_with_crc[0]=0x06;  //  
;;;5565   	command_with_crc[1]=0x30;  // 0
;;;5566   	command_with_crc[2]=0x35;  // 5
;;;5567   	command_with_crc[3]=0xb1;  // 1
;;;5568   	command_with_crc[4]=0x8d;  // CR
;;;5569   	command_with_crc[5]=0x0a;  // LF
;;;5570   	
;;;5571   	uart_out__adr1(command_with_crc,6);
;;;5572   	
;;;5573   	rx_wr_index1=0;
;;;5574   	rx_read_power_cnt_phase=3;
;;;5575   
;;;5576   	read_power_cnt_main_cnt=50;
;;;5577   	}  
;;;5578   
;;;5579   if ((rx_read_power_cnt_phase==4)&&(!ce102m_delayCnt))
;;;5580   	{
;;;5581   	char command_with_crc[20];
;;;5582   	
;;;5583   	command_with_crc[0]=0x81;  //  
;;;5584   	command_with_crc[1]=0xd2;  // 0
;;;5585   	command_with_crc[2]=0xb1;  // 5
;;;5586   	command_with_crc[3]=0x82;  // 1
;;;5587   	command_with_crc[4]=0x56;  // CR
;;;5588   	command_with_crc[5]=0xcf;  // LF
;;;5589   	command_with_crc[6]=0xcc;  // 1
;;;5590   	command_with_crc[7]=0xd4;  // CR
;;;5591   	command_with_crc[8]=0x41;  // LF
;;;5592   	command_with_crc[9]=0x28;  // 1
;;;5593   	command_with_crc[10]=0xa9;  // CR
;;;5594   	command_with_crc[11]=0x03;  // LF
;;;5595   	command_with_crc[12]=0x5f;  // LF
;;;5596   		
;;;5597   	uart_out__adr1(command_with_crc,13);
;;;5598   	
;;;5599   	rx_wr_index1=0;
;;;5600   	rx_read_power_cnt_phase=5;
;;;5601   
;;;5602   	read_power_cnt_main_cnt=50;
;;;5603   	}  
;;;5604   
;;;5605   if ((rx_read_power_cnt_phase==8)&&(!ce102m_delayCnt))
;;;5606   	{
;;;5607   	char command_with_crc[20];
;;;5608   	
;;;5609   	command_with_crc[0]=0x81;  //  
;;;5610   	command_with_crc[1]=0xd2;  // 0
;;;5611   	command_with_crc[2]=0xb1;  // 5
;;;5612   	command_with_crc[3]=0x82;  // 1
;;;5613   	command_with_crc[4]=0xc3;  // CR
;;;5614   	command_with_crc[5]=0x55;  // LF
;;;5615   	command_with_crc[6]=0xd2;  // 1
;;;5616   	command_with_crc[7]=0xd2;  // CR
;;;5617   	command_with_crc[8]=0xc5;  // LF
;;;5618   	command_with_crc[9]=0x28;  // 1
;;;5619   	command_with_crc[10]=0xa9;  // CR
;;;5620   	command_with_crc[11]=0x03;  // LF
;;;5621   	command_with_crc[12]=0x5a;  // LF
;;;5622   		
;;;5623   	uart_out__adr1(command_with_crc,13);
;;;5624   	
;;;5625   	rx_wr_index1=0;
;;;5626   	rx_read_power_cnt_phase=9;
;;;5627   
;;;5628   	read_power_cnt_main_cnt=50;
;;;5629   	}  
;;;5630   
;;;5631   if ((rx_read_power_cnt_phase==20)&&(!ce102m_delayCnt))
;;;5632   	{
;;;5633   	char command_with_crc[20];
;;;5634   	
;;;5635   	command_with_crc[0]=0x81;  //  		01
;;;5636   	command_with_crc[1]=0xd2;  // R		52
;;;5637   	command_with_crc[2]=0xb1;  // 1		31
;;;5638   	command_with_crc[3]=0x82;  // 		02
;;;5639   	command_with_crc[4]=0x50;  // P		50
;;;5640   	command_with_crc[5]=0xcf;  // O	  	4f
;;;5641   	command_with_crc[6]=0xd7;  // W		57
;;;5642   	command_with_crc[7]=0xc5;  // E		45
;;;5643   	command_with_crc[8]=0x50;  // P		50
;;;5644   	command_with_crc[9]=0x28;  // (		28
;;;5645   	command_with_crc[10]=0xa9;  // )	29
;;;5646   	command_with_crc[11]=0x03;  // 		03
;;;5647   	command_with_crc[12]=0xe4;  // d	64
;;;5648   		
;;;5649   	uart_out__adr1(command_with_crc,13);
;;;5650   	
;;;5651   	rx_wr_index1=0;
;;;5652   	rx_read_power_cnt_phase=21;
;;;5653   
;;;5654   	read_power_cnt_main_cnt=50;
;;;5655   	}  
;;;5656   
;;;5657   
;;;5658   #endif
;;;5659   }
;;;5660   
                          ENDP

                  ips_current_average_hndl PROC
;;;5661   //-----------------------------------------------
;;;5662   void ips_current_average_hndl(void)
003782  e92d4ff0          PUSH     {r4-r11,lr}
;;;5663   {
003786  b089              SUB      sp,sp,#0x24
;;;5664   
;;;5665   if(++ica_timer_cnt>=10) 
003788  4e37              LDR      r6,|L1.14440|
;;;5666   	{
;;;5667   	ica_timer_cnt=0;
00378a  2400              MOVS     r4,#0
00378c  7830              LDRB     r0,[r6,#0]            ;5665  ; ica_timer_cnt
00378e  1c40              ADDS     r0,r0,#1              ;5665
003790  b2c0              UXTB     r0,r0                 ;5665
003792  7030              STRB     r0,[r6,#0]            ;5665
003794  280a              CMP      r0,#0xa               ;5665
003796  d300              BCC      |L1.14234|
003798  7034              STRB     r4,[r6,#0]
                  |L1.14234|
;;;5668   	}
;;;5669   
;;;5670   if((ica_timer_cnt==0) && (num_of_wrks_bps)&&((spc_stat==spcOFF)&&(vz1_stat==vz1sOFF)&&(vz2_stat==vz2sOFF)&&(sp_ch_stat==scsOFF)))
00379a  7830              LDRB     r0,[r6,#0]  ; ica_timer_cnt
00379c  4f33              LDR      r7,|L1.14444|
;;;5671   	{
;;;5672   	
;;;5673   	ica_plazma[0]++;
;;;5674   
;;;5675   	ica_my_current=bps_I;
;;;5676   
;;;5677   	if((ica_my_current>ica_your_current)&&((ica_my_current-ica_your_current)>=5)&&((ICA_EN==1)||((ICA_EN==2)&&(ica_cntrl_hndl_cnt>5))))
00379e  f8dfb0d0          LDR      r11,|L1.14448|
0037a2  4d21              LDR      r5,|L1.14376|
0037a4  bbf0              CBNZ     r0,|L1.14372|
0037a6  7d68              LDRB     r0,[r5,#0x15]         ;5670  ; num_of_wrks_bps
0037a8  b3e0              CBZ      r0,|L1.14372|
0037aa  7ea8              LDRB     r0,[r5,#0x1a]         ;5670  ; spc_stat
0037ac  f8951026          LDRB     r1,[r5,#0x26]         ;5670  ; vz1_stat
0037b0  4308              ORRS     r0,r0,r1              ;5670
0037b2  f8951029          LDRB     r1,[r5,#0x29]         ;5670  ; vz2_stat
0037b6  4308              ORRS     r0,r0,r1              ;5670
0037b8  7839              LDRB     r1,[r7,#0]            ;5670  ; sp_ch_stat
0037ba  4308              ORRS     r0,r0,r1              ;5670
0037bc  d17f              BNE      |L1.14526|
0037be  f8df90b4          LDR      r9,|L1.14452|
0037c2  f8990000          LDRB     r0,[r9,#0]            ;5673  ; ica_plazma
0037c6  f1000001          ADD      r0,r0,#1              ;5673
0037ca  f8890000          STRB     r0,[r9,#0]            ;5673
0037ce  482a              LDR      r0,|L1.14456|
0037d0  f9b01000          LDRSH    r1,[r0,#0]            ;5675  ; bps_I
0037d4  4829              LDR      r0,|L1.14460|
0037d6  8001              STRH     r1,[r0,#0]            ;5675
0037d8  4829              LDR      r0,|L1.14464|
;;;5678   		{
;;;5679   		ica_plazma[1]++;
;;;5680   		ica_u_necc--;
0037da  f8dfa0a8          LDR      r10,|L1.14468|
0037de  f9b02000          LDRSH    r2,[r0,#0]            ;5677  ; ica_your_current
0037e2  4648              MOV      r0,r9                 ;5673
0037e4  f9bac000          LDRSH    r12,[r10,#0]
0037e8  7843              LDRB     r3,[r0,#1]            ;5679
0037ea  4827              LDR      r0,|L1.14472|
0037ec  4291              CMP      r1,r2                 ;5677
0037ee  f9b08000          LDRSH    r8,[r0,#0]            ;5677
0037f2  4658              MOV      r0,r11                ;5677
0037f4  f9b00000          LDRSH    r0,[r0,#0]            ;5677
0037f8  dd48              BLE      |L1.14476|
0037fa  eba10e02          SUB      lr,r1,r2              ;5677
0037fe  f1be0f05          CMP      lr,#5                 ;5677
003802  db43              BLT      |L1.14476|
003804  2801              CMP      r0,#1                 ;5677
003806  d004              BEQ      |L1.14354|
003808  2802              CMP      r0,#2                 ;5677
00380a  d13f              BNE      |L1.14476|
00380c  f1b80f05          CMP      r8,#5                 ;5677
003810  dd3c              BLE      |L1.14476|
                  |L1.14354|
003812  f1030301          ADD      r3,r3,#1              ;5679
003816  f8893001          STRB     r3,[r9,#1]            ;5679
00381a  f1ac0c01          SUB      r12,r12,#1
00381e  f8aac000          STRH     r12,[r10,#0]
003822  e047              B        |L1.14516|
                  |L1.14372|
003824  e04b              B        |L1.14526|
003826  0000              DCW      0x0000
                  |L1.14376|
                          DCD      ||area_number.25||
                  |L1.14380|
                          DCD      bps
                  |L1.14384|
                          DCD      NUMIST
                  |L1.14388|
                          DCD      mess_data
                  |L1.14392|
                          DCD      num_necc
                  |L1.14396|
                          DCD      main_1Hz_cnt
                  |L1.14400|
                          DCD      ipsBlckStat
                  |L1.14404|
                          DCD      TSIGN
                  |L1.14408|
                          DCD      power_summary_tempo
                  |L1.14412|
                          DCD      power_summary_tempo_old
                  |L1.14416|
                          DCD      powerSummaryCnt
                  |L1.14420|
                          DCD      power_summary
                  |L1.14424|
                          DCD      power_current_tempo
                  |L1.14428|
                          DCD      power_current_tempo_old
                  |L1.14432|
                          DCD      powerCurrentCnt
                  |L1.14436|
                          DCD      power_current
                  |L1.14440|
                          DCD      ica_timer_cnt
                  |L1.14444|
                          DCD      sp_ch_stat
                  |L1.14448|
                          DCD      ICA_EN
                  |L1.14452|
                          DCD      ica_plazma
                  |L1.14456|
                          DCD      bps_I
                  |L1.14460|
                          DCD      ica_my_current
                  |L1.14464|
                          DCD      ica_your_current
                  |L1.14468|
                          DCD      ica_u_necc
                  |L1.14472|
                          DCD      ica_cntrl_hndl_cnt
                  |L1.14476|
;;;5681   		}
;;;5682   	else if((ica_my_current<ica_your_current)&&((ica_your_current-ica_my_current)>=5)&&((ICA_EN==1)||((ICA_EN==2)&&(ica_cntrl_hndl_cnt>5))))
00388c  4291              CMP      r1,r2
00388e  da11              BGE      |L1.14516|
003890  1a51              SUBS     r1,r2,r1
003892  2905              CMP      r1,#5
003894  db0e              BLT      |L1.14516|
003896  2801              CMP      r0,#1
003898  d004              BEQ      |L1.14500|
00389a  2802              CMP      r0,#2
00389c  d10a              BNE      |L1.14516|
00389e  f1b80f05          CMP      r8,#5
0038a2  dd07              BLE      |L1.14516|
                  |L1.14500|
;;;5683   		{
;;;5684   		ica_plazma[1]--;
0038a4  f1a30301          SUB      r3,r3,#1
0038a8  f8893001          STRB     r3,[r9,#1]
;;;5685   		ica_u_necc++;
0038ac  f10c0c01          ADD      r12,r12,#1
0038b0  f8aac000          STRH     r12,[r10,#0]
                  |L1.14516|
;;;5686   		}
;;;5687   	gran(&ica_u_necc,-100,100);
0038b4  2264              MOVS     r2,#0x64
0038b6  4251              RSBS     r1,r2,#0
0038b8  48ff              LDR      r0,|L1.15544|
0038ba  f7fffffe          BL       gran
                  |L1.14526|
;;;5688   	}
;;;5689   
;;;5690   
;;;5691   if((ICA_EN==1)&&((spc_stat==spcOFF)&&(vz1_stat==vz1sOFF)&&(vz2_stat==vz2sOFF)&&(sp_ch_stat==scsOFF)) /*&& (num_of_wrks_bps)*/)
0038be  f8bb0000          LDRH     r0,[r11,#0]  ; ICA_EN
0038c2  2801              CMP      r0,#1
0038c4  d167              BNE      |L1.14742|
0038c6  7ea8              LDRB     r0,[r5,#0x1a]  ; spc_stat
0038c8  f8951026          LDRB     r1,[r5,#0x26]  ; vz1_stat
0038cc  4308              ORRS     r0,r0,r1
0038ce  f8951029          LDRB     r1,[r5,#0x29]  ; vz2_stat
0038d2  4308              ORRS     r0,r0,r1
0038d4  7839              LDRB     r1,[r7,#0]  ; sp_ch_stat
0038d6  4308              ORRS     r0,r0,r1
0038d8  d15d              BNE      |L1.14742|
;;;5692   	{
;;;5693   	
;;;5694   	if(ica_timer_cnt==8)
0038da  7830              LDRB     r0,[r6,#0]  ; ica_timer_cnt
;;;5695   		{
;;;5696   		char modbus_buff[20],i;
;;;5697   		short crc_temp;
;;;5698   	
;;;5699   		modbus_buff[0] = ICA_MODBUS_ADDRESS;
0038dc  4bf7              LDR      r3,|L1.15548|
;;;5700   		modbus_buff[1] = 4;
;;;5701   		modbus_buff[2] = 0;
;;;5702   		modbus_buff[3] = 2;
;;;5703   		modbus_buff[4] = 0;	
;;;5704   		modbus_buff[5] = 1;
;;;5705   	
;;;5706   		crc_temp= CRC16_2(modbus_buff,6);
;;;5707   	
;;;5708   		modbus_buff[6]= (char)crc_temp;
;;;5709   		modbus_buff[7]= (char)(crc_temp>>8);
;;;5710   	
;;;5711   		if(ICA_CH==0)
0038de  4ff8              LDR      r7,|L1.15552|
0038e0  2808              CMP      r0,#8                 ;5694
0038e2  d05b              BEQ      |L1.14748|
;;;5712   			{
;;;5713   			for (i=0;i<8;i++)
;;;5714   				{
;;;5715   				putchar_sc16is700(modbus_buff[i]);
;;;5716   				}
;;;5717   			}
;;;5718   		else if(ICA_CH==2)
;;;5719   			{
;;;5720   			uart_out1 (5,4,0,2,0,1,0);
;;;5721   			}
;;;5722   		}
;;;5723   	else
;;;5724   		{
;;;5725   		char modbus_buff[20],i;
;;;5726   		short crc_temp, tempSSSS;
;;;5727   
;;;5728   		tempSSSS=cntrl_stat_old;
0038e4  f9b5602e          LDRSH    r6,[r5,#0x2e]  ; cntrl_stat_old
;;;5729   		if(	(main_kb_cnt==(TBAT*60)-21) || (main_kb_cnt==(TBAT*60)-20) || (main_kb_cnt==(TBAT*60)-19)) tempSSSS=((short)TBAT)|0x4000;
0038e8  48f6              LDR      r0,|L1.15556|
0038ea  f06f0214          MVN      r2,#0x14
0038ee  f9b00000          LDRSH    r0,[r0,#0]  ; TBAT
0038f2  ebc01100          RSB      r1,r0,r0,LSL #4
0038f6  eb020c81          ADD      r12,r2,r1,LSL #2
0038fa  f9b5204c          LDRSH    r2,[r5,#0x4c]  ; main_kb_cnt
0038fe  4594              CMP      r12,r2
003900  d00b              BEQ      |L1.14618|
003902  f06f0c13          MVN      r12,#0x13
003906  eb0c0c81          ADD      r12,r12,r1,LSL #2
00390a  4594              CMP      r12,r2
00390c  d005              BEQ      |L1.14618|
00390e  f06f0c12          MVN      r12,#0x12
003912  eb0c0181          ADD      r1,r12,r1,LSL #2
003916  4291              CMP      r1,r2
003918  d101              BNE      |L1.14622|
                  |L1.14618|
00391a  f4404680          ORR      r6,r0,#0x4000
                  |L1.14622|
;;;5730   
;;;5731   
;;;5732   		modbus_buff[0] = ICA_MODBUS_ADDRESS;
00391e  8818              LDRH     r0,[r3,#0]  ; ICA_MODBUS_ADDRESS
003920  f88d0010          STRB     r0,[sp,#0x10]
;;;5733   		modbus_buff[1] = 6;
003924  f04f0006          MOV      r0,#6
003928  f88d0011          STRB     r0,[sp,#0x11]
;;;5734   		modbus_buff[2] = 0;
00392c  f88d4012          STRB     r4,[sp,#0x12]
;;;5735   		modbus_buff[3] = 100;
003930  f04f0064          MOV      r0,#0x64
003934  f88d0013          STRB     r0,[sp,#0x13]
;;;5736   		modbus_buff[4] = (char)(tempSSSS/256);	
003938  ea4f70e6          ASR      r0,r6,#31
00393c  eb066010          ADD      r0,r6,r0,LSR #24
003940  ea4f2120          ASR      r1,r0,#8
003944  f88d1014          STRB     r1,[sp,#0x14]
;;;5737   		modbus_buff[5] = (char)(tempSSSS%256);
003948  4630              MOV      r0,r6
00394a  f88d0015          STRB     r0,[sp,#0x15]
;;;5738   	
;;;5739   		crc_temp= CRC16_2(modbus_buff,6);
00394e  f04f0106          MOV      r1,#6
003952  a804              ADD      r0,sp,#0x10
003954  f7fffffe          BL       CRC16_2
;;;5740   	
;;;5741   		modbus_buff[6]= (char)crc_temp;
003958  f88d0016          STRB     r0,[sp,#0x16]
;;;5742   		modbus_buff[7]= (char)(crc_temp>>8);
00395c  ea4f2020          ASR      r0,r0,#8
003960  f88d0017          STRB     r0,[sp,#0x17]
;;;5743   	
;;;5744   		crc_temp= CRC16_2(modbus_buff,6);
003964  f04f0106          MOV      r1,#6
003968  a804              ADD      r0,sp,#0x10
00396a  f7fffffe          BL       CRC16_2
;;;5745   	
;;;5746   		plazma_ica1=tempSSSS;
00396e  f8a5607c          STRH     r6,[r5,#0x7c]
;;;5747   		if(ICA_CH==0)
003972  f9b70000          LDRSH    r0,[r7,#0]  ; ICA_CH
003976  b3f0              CBZ      r0,|L1.14838|
;;;5748   			{
;;;5749   			for (i=0;i<8;i++)
;;;5750   				{
;;;5751   				putchar_sc16is700(modbus_buff[i]);
;;;5752   				}
;;;5753   			}
;;;5754   		else if(ICA_CH==2)
003978  2802              CMP      r0,#2
00397a  d10c              BNE      |L1.14742|
;;;5755   			{
;;;5756   			uart_out1 (5,6,0,100,modbus_buff[4],modbus_buff[5],0);
00397c  f89d0015          LDRB     r0,[sp,#0x15]
003980  f89d1014          LDRB     r1,[sp,#0x14]
003984  e9cd0401          STRD     r0,r4,[sp,#4]
003988  9100              STR      r1,[sp,#0]
00398a  2364              MOVS     r3,#0x64
00398c  2200              MOVS     r2,#0
00398e  2106              MOVS     r1,#6
003990  2005              MOVS     r0,#5
003992  f7fffffe          BL       uart_out1
                  |L1.14742|
;;;5757   			}
;;;5758   		}
;;;5759   	}
;;;5760   }
003996  b009              ADD      sp,sp,#0x24
003998  e8bd8ff0          POP      {r4-r11,pc}
                  |L1.14748|
00399c  8818              LDRH     r0,[r3,#0]            ;5699  ; ICA_MODBUS_ADDRESS
00399e  f88d0010          STRB     r0,[sp,#0x10]         ;5699
0039a2  f04f0004          MOV      r0,#4                 ;5700
0039a6  f88d0011          STRB     r0,[sp,#0x11]         ;5700
0039aa  f88d4012          STRB     r4,[sp,#0x12]         ;5701
0039ae  f04f0002          MOV      r0,#2                 ;5702
0039b2  f88d0013          STRB     r0,[sp,#0x13]         ;5702
0039b6  f88d4014          STRB     r4,[sp,#0x14]         ;5703
0039ba  f04f0501          MOV      r5,#1                 ;5704
0039be  f88d5015          STRB     r5,[sp,#0x15]         ;5704
0039c2  f04f0106          MOV      r1,#6                 ;5706
0039c6  a804              ADD      r0,sp,#0x10           ;5706
0039c8  f7fffffe          BL       CRC16_2
0039cc  f88d0016          STRB     r0,[sp,#0x16]         ;5708
0039d0  ea4f2020          ASR      r0,r0,#8              ;5709
0039d4  f88d0017          STRB     r0,[sp,#0x17]         ;5709
0039d8  f9b70000          LDRSH    r0,[r7,#0]            ;5711  ; ICA_CH
0039dc  b160              CBZ      r0,|L1.14840|
0039de  2802              CMP      r0,#2                 ;5718
0039e0  d1d9              BNE      |L1.14742|
0039e2  e9cd4500          STRD     r4,r5,[sp,#0]         ;5720
0039e6  2302              MOVS     r3,#2                 ;5720
0039e8  2200              MOVS     r2,#0                 ;5720
0039ea  2104              MOVS     r1,#4                 ;5720
0039ec  2005              MOVS     r0,#5                 ;5720
0039ee  9402              STR      r4,[sp,#8]            ;5720
0039f0  f7fffffe          BL       uart_out1
0039f4  e7cf              B        |L1.14742|
                  |L1.14838|
0039f6  e00b              B        |L1.14864|
                  |L1.14840|
0039f8  f04f0400          MOV      r4,#0                 ;5713
0039fc  ad04              ADD      r5,sp,#0x10           ;5696
                  |L1.14846|
0039fe  5d28              LDRB     r0,[r5,r4]            ;5715
003a00  f7fffffe          BL       putchar_sc16is700
003a04  f1040401          ADD      r4,r4,#1              ;5713
003a08  b2e4              UXTB     r4,r4                 ;5713
003a0a  2c08              CMP      r4,#8                 ;5713
003a0c  d3f7              BCC      |L1.14846|
003a0e  e7c2              B        |L1.14742|
                  |L1.14864|
003a10  f04f0400          MOV      r4,#0                 ;5749
003a14  ad04              ADD      r5,sp,#0x10           ;5725
                  |L1.14870|
003a16  5d28              LDRB     r0,[r5,r4]            ;5751
003a18  f7fffffe          BL       putchar_sc16is700
003a1c  f1040401          ADD      r4,r4,#1              ;5749
003a20  b2e4              UXTB     r4,r4                 ;5749
003a22  2c08              CMP      r4,#8                 ;5749
003a24  d3f7              BCC      |L1.14870|
003a26  e7b6              B        |L1.14742|
;;;5761   
                          ENDP

                  ipsBlckHndl PROC
;;;5844   //-----------------------------------------------
;;;5845   void ipsBlckHndl(char in)
003a28  b510              PUSH     {r4,lr}
;;;5846   {
;;;5847   
;;;5848   ipsBlckStat=0;
003a2a  4ba7              LDR      r3,|L1.15560|
003a2c  f04f0000          MOV      r0,#0
003a30  8018              STRH     r0,[r3,#0]
;;;5849   if(ipsBlckSrc==1)
003a32  48a6              LDR      r0,|L1.15564|
003a34  f04f0401          MOV      r4,#1
;;;5850   	{
;;;5851   	if(((ipsBlckLog==0)&&(adc_buff_[11]>2000)) || ((ipsBlckLog==1)&&(adc_buff_[11]<2000))) ipsBlckStat=1;
003a38  f44f62fa          MOV      r2,#0x7d0
003a3c  f9b01000          LDRSH    r1,[r0,#0]            ;5849  ; ipsBlckSrc
003a40  48a3              LDR      r0,|L1.15568|
003a42  2901              CMP      r1,#1                 ;5849
003a44  f9b00000          LDRSH    r0,[r0,#0]
003a48  d006              BEQ      |L1.14936|
;;;5852   	}
;;;5853   else if(ipsBlckSrc==2)
003a4a  2902              CMP      r1,#2
003a4c  d10f              BNE      |L1.14958|
003a4e  49a1              LDR      r1,|L1.15572|
;;;5854   	{
;;;5855   	if(((ipsBlckLog==0)&&(adc_buff_[13]>2000)) || ((ipsBlckLog==1)&&(adc_buff_[13]<2000))) ipsBlckStat=1;
003a50  f9b1101a          LDRSH    r1,[r1,#0x1a]
003a54  b160              CBZ      r0,|L1.14960|
003a56  e00d              B        |L1.14964|
                  |L1.14936|
003a58  499e              LDR      r1,|L1.15572|
003a5a  f9b11016          LDRSH    r1,[r1,#0x16]         ;5851
003a5e  b908              CBNZ     r0,|L1.14948|
003a60  4291              CMP      r1,r2                 ;5851
003a62  dc03              BGT      |L1.14956|
                  |L1.14948|
003a64  2801              CMP      r0,#1                 ;5851
003a66  d102              BNE      |L1.14958|
003a68  4291              CMP      r1,r2                 ;5851
003a6a  da00              BGE      |L1.14958|
                  |L1.14956|
003a6c  801c              STRH     r4,[r3,#0]            ;5851
                  |L1.14958|
;;;5856   	}
;;;5857   }
003a6e  bd10              POP      {r4,pc}
                  |L1.14960|
003a70  4291              CMP      r1,r2                 ;5855
003a72  dc03              BGT      |L1.14972|
                  |L1.14964|
003a74  2801              CMP      r0,#1                 ;5855
003a76  d1fa              BNE      |L1.14958|
003a78  4291              CMP      r1,r2                 ;5855
003a7a  daf8              BGE      |L1.14958|
                  |L1.14972|
003a7c  801c              STRH     r4,[r3,#0]            ;5855
003a7e  bd10              POP      {r4,pc}
;;;5858   
                          ENDP

                  bps_drv PROC
;;;5859   //-----------------------------------------------
;;;5860   void bps_drv(char in)
003a80  e92d41f0          PUSH     {r4-r8,lr}
;;;5861   {
003a84  4606              MOV      r6,r0
;;;5862   char temp;
;;;5863   
;;;5864   if (bps[in]._device!=dSRC) return;
003a86  ebc600c6          RSB      r0,r6,r6,LSL #3
003a8a  4993              LDR      r1,|L1.15576|
003a8c  eb001006          ADD      r0,r0,r6,LSL #4
003a90  f8112020          LDRB     r2,[r1,r0,LSL #2]
003a94  2a03              CMP      r2,#3
003a96  d177              BNE      |L1.15240|
;;;5865   temp=bps[in]._flags_tm;
003a98  eb010480          ADD      r4,r1,r0,LSL #2
003a9c  f8945042          LDRB     r5,[r4,#0x42]
;;;5866   if(temp&(1<<AV_T))
003aa0  07a8              LSLS     r0,r5,#30
003aa2  d517              BPL      |L1.15060|
;;;5867   	{
;;;5868   	if(bps[in]._temp_av_cnt<1200) 
003aa4  f9b41046          LDRSH    r1,[r4,#0x46]
003aa8  f44f6096          MOV      r0,#0x4b0
003aac  4281              CMP      r1,r0
003aae  da22              BGE      |L1.15094|
;;;5869   		{
;;;5870   		bps[in]._temp_av_cnt++;
003ab0  f1010101          ADD      r1,r1,#1
003ab4  b209              SXTH     r1,r1
003ab6  f8a41046          STRH     r1,[r4,#0x46]
;;;5871   		if(bps[in]._temp_av_cnt>=1200)
003aba  4281              CMP      r1,r0
003abc  db1b              BLT      |L1.15094|
;;;5872   			{
;;;5873   			bps[in]._temp_av_cnt=1200;
003abe  f8a40046          STRH     r0,[r4,#0x46]
;;;5874   		   	if(!(bps[in]._av&(1<<0)))avar_bps_hndl(in,0,1);
003ac2  7860              LDRB     r0,[r4,#1]
003ac4  07c0              LSLS     r0,r0,#31
003ac6  d116              BNE      |L1.15094|
003ac8  2201              MOVS     r2,#1
003aca  2100              MOVS     r1,#0
003acc  4630              MOV      r0,r6
003ace  f7fffffe          BL       avar_bps_hndl
003ad2  e010              B        |L1.15094|
                  |L1.15060|
;;;5875   			}
;;;5876   		}
;;;5877   	}
;;;5878   
;;;5879   else if(!(temp&(1<<AV_T)))
;;;5880   	{
;;;5881   	if(bps[in]._temp_av_cnt) 
003ad4  f9b41046          LDRSH    r1,[r4,#0x46]
003ad8  b169              CBZ      r1,|L1.15094|
;;;5882   		{
;;;5883   		bps[in]._temp_av_cnt--;
003ada  f1a10101          SUB      r1,r1,#1
003ade  b208              SXTH     r0,r1
003ae0  f8a40046          STRH     r0,[r4,#0x46]
;;;5884   		if(!bps[in]._temp_av_cnt)
003ae4  b938              CBNZ     r0,|L1.15094|
;;;5885   			{
;;;5886   			if(bps[in]._av&(1<<0))avar_bps_hndl(in,0,0);
003ae6  7860              LDRB     r0,[r4,#1]
003ae8  07c0              LSLS     r0,r0,#31
003aea  d004              BEQ      |L1.15094|
003aec  2200              MOVS     r2,#0
003aee  4611              MOV      r1,r2
003af0  4630              MOV      r0,r6
003af2  f7fffffe          BL       avar_bps_hndl
                  |L1.15094|
;;;5887   			}
;;;5888   		} 	
;;;5889   
;;;5890   	}
;;;5891   
;;;5892   if((temp&(1<<AVUMAX)))
003af6  0729              LSLS     r1,r5,#28
;;;5893   	{
;;;5894   	if(bps[in]._umax_av_cnt<10) 
;;;5895   		{
;;;5896   		bps[in]._umax_av_cnt++;
;;;5897   		if(bps[in]._umax_av_cnt>=10)
;;;5898   			{ 
;;;5899   			bps[in]._umax_av_cnt=10;
003af8  f04f070a          MOV      r7,#0xa
003afc  f04f0000          MOV      r0,#0                 ;5874
003b00  d515              BPL      |L1.15150|
003b02  f9b40048          LDRSH    r0,[r4,#0x48]         ;5894
003b06  280a              CMP      r0,#0xa               ;5894
003b08  da26              BGE      |L1.15192|
003b0a  f1000001          ADD      r0,r0,#1              ;5896
003b0e  b200              SXTH     r0,r0                 ;5896
003b10  f8a40048          STRH     r0,[r4,#0x48]         ;5896
003b14  280a              CMP      r0,#0xa               ;5897
003b16  db1f              BLT      |L1.15192|
003b18  f8a47048          STRH     r7,[r4,#0x48]
;;;5900   			if(!(bps[in]._av&(1<<1)))avar_bps_hndl(in,1,1);
003b1c  7860              LDRB     r0,[r4,#1]
003b1e  0780              LSLS     r0,r0,#30
003b20  d41a              BMI      |L1.15192|
003b22  2201              MOVS     r2,#1
003b24  4611              MOV      r1,r2
003b26  4630              MOV      r0,r6
003b28  f7fffffe          BL       avar_bps_hndl
003b2c  e014              B        |L1.15192|
                  |L1.15150|
;;;5901   		  	/*if((K[APV]!=ON)||((apv_cnt[in,0]==0)&&(apv_cnt[in,1]==0)&&(apv_cnt[in,2]==0)&&(apv_flags[in]==afOFF)))avar_s_hndl(in,1,1);
;;;5902   			if((apv_cnt[in,0]==0)&&(apv_cnt[in,1]==0)&&(apv_cnt[in,2]==0)&&(apv_flags[in]==afON))
;;;5903   				{
;;;5904   				apv_cnt[in,0]=APV_INIT;
;;;5905   				apv_cnt[in,1]=APV_INIT;
;;;5906   				apv_cnt[in,2]=APV_INIT;
;;;5907   				apv_flags[in]=afOFF;
;;;5908   				}				*/
;;;5909   						
;;;5910   			}
;;;5911   		} 
;;;5912   	}		
;;;5913   else if(!(temp&(1<<AVUMAX)))
;;;5914   	{
;;;5915   	if(bps[in]._umax_av_cnt>0) 
003b2e  f9b41048          LDRSH    r1,[r4,#0x48]
003b32  2900              CMP      r1,#0
003b34  dd0d              BLE      |L1.15186|
;;;5916   		{
;;;5917   		bps[in]._umax_av_cnt--;
003b36  f1a10101          SUB      r1,r1,#1
003b3a  b208              SXTH     r0,r1
003b3c  f8a40048          STRH     r0,[r4,#0x48]
;;;5918   		if(bps[in]._umax_av_cnt==0)
003b40  b950              CBNZ     r0,|L1.15192|
;;;5919   			{
;;;5920   			bps[in]._umax_av_cnt=0;
;;;5921   			avar_bps_hndl(in,1,0);
003b42  f04f0200          MOV      r2,#0
003b46  f04f0101          MOV      r1,#1
003b4a  4630              MOV      r0,r6
003b4c  f7fffffe          BL       avar_bps_hndl
003b50  e002              B        |L1.15192|
                  |L1.15186|
;;;5922   	 //		apv_cnt[in,0]=0;
;;;5923   	//		apv_cnt[in,1]=0;
;;;5924   	 //		apv_cnt[in,2]=0;			
;;;5925   			}
;;;5926   		}
;;;5927   	else if(bps[in]._umax_av_cnt<0) bps[in]._umax_av_cnt=0;		 
003b52  da01              BGE      |L1.15192|
003b54  f8a40048          STRH     r0,[r4,#0x48]
                  |L1.15192|
;;;5928   	}
;;;5929   
;;;5930   if(temp&(1<<AVUMIN))
003b58  06e8              LSLS     r0,r5,#27
003b5a  d516              BPL      |L1.15242|
;;;5931   	{
;;;5932   	if(bps[in]._umin_av_cnt<10) 
003b5c  f9b4004a          LDRSH    r0,[r4,#0x4a]
003b60  280a              CMP      r0,#0xa
003b62  da20              BGE      |L1.15270|
;;;5933   		{
;;;5934   		bps[in]._umin_av_cnt++;
003b64  f1000001          ADD      r0,r0,#1
003b68  b200              SXTH     r0,r0
003b6a  f8a4004a          STRH     r0,[r4,#0x4a]
;;;5935   		if(bps[in]._umin_av_cnt>=10)
003b6e  280a              CMP      r0,#0xa
003b70  db19              BLT      |L1.15270|
;;;5936   			{ 
;;;5937   			bps[in]._umin_av_cnt=10;
003b72  f8a4704a          STRH     r7,[r4,#0x4a]
;;;5938   			if(!(bps[in]._av&(1<<2)))avar_bps_hndl(in,2,1);
003b76  7860              LDRB     r0,[r4,#1]
003b78  0740              LSLS     r0,r0,#29
003b7a  d414              BMI      |L1.15270|
003b7c  2201              MOVS     r2,#1
003b7e  2102              MOVS     r1,#2
003b80  4630              MOV      r0,r6
003b82  f7fffffe          BL       avar_bps_hndl
003b86  e00e              B        |L1.15270|
                  |L1.15240|
003b88  e046              B        |L1.15384|
                  |L1.15242|
;;;5939   		  	/*	if((K[APV]!=ON)||((apv_cnt[in,0]==0)&&(apv_cnt[in,1]==0)&&(apv_cnt[in,2]==0)&&(apv_flags[in]==afOFF)))avar_s_hndl(in,2,1);
;;;5940   			if((apv_cnt[in,0]==0)&&(apv_cnt[in,1]==0)&&(apv_cnt[in,2]==0)&&(apv_flags[in]==afON))
;;;5941   				{
;;;5942   				apv_cnt[in,0]=APV_INIT;
;;;5943   				apv_cnt[in,1]=APV_INIT;
;;;5944   				apv_cnt[in,2]=APV_INIT;
;;;5945   				apv_flags[in]=afOFF;
;;;5946   				}*/				
;;;5947   			}
;;;5948   		} 
;;;5949   	}	
;;;5950   	
;;;5951   else if(!(temp&(1<<AVUMIN)))
;;;5952   	{
;;;5953   	if(bps[in]._umin_av_cnt) 
003b8a  f9b4004a          LDRSH    r0,[r4,#0x4a]
003b8e  b150              CBZ      r0,|L1.15270|
;;;5954   		{
;;;5955   		bps[in]._umin_av_cnt--;
003b90  f1a00001          SUB      r0,r0,#1
003b94  b201              SXTH     r1,r0
003b96  f8a4104a          STRH     r1,[r4,#0x4a]
;;;5956   		if(bps[in]._umin_av_cnt==0)
003b9a  b921              CBNZ     r1,|L1.15270|
;;;5957   			{
;;;5958   			bps[in]._umin_av_cnt=0;
;;;5959   			avar_bps_hndl(in,2,0);
003b9c  2200              MOVS     r2,#0
003b9e  2102              MOVS     r1,#2
003ba0  4630              MOV      r0,r6
003ba2  f7fffffe          BL       avar_bps_hndl
                  |L1.15270|
;;;5960   		//	apv_cnt[in,0]=0;
;;;5961   		//	apv_cnt[in,1]=0;
;;;5962   		//	apv_cnt[in,2]=0;
;;;5963   			}
;;;5964   		}
;;;5965   	else if(bps[in]._umin_av_cnt>10)bps[in]._umin_av_cnt--;	 
;;;5966   	}
;;;5967   
;;;5968   //bps[in]._state=bsOFF;
;;;5969   
;;;5970   if (bps[in]._av&0x0f)					bps[in]._state=bsAV;
003ba6  7860              LDRB     r0,[r4,#1]
003ba8  0700              LSLS     r0,r0,#28
003baa  d003              BEQ      |L1.15284|
003bac  f04f0004          MOV      r0,#4
003bb0  70a0              STRB     r0,[r4,#2]
003bb2  e017              B        |L1.15332|
                  |L1.15284|
;;;5971   else if ( (net_av) && (bps[in]._cnt>20)/*&& 
003bb4  4849              LDR      r0,|L1.15580|
003bb6  7800              LDRB     r0,[r0,#0]  ; net_av
003bb8  b130              CBZ      r0,|L1.15304|
003bba  78e0              LDRB     r0,[r4,#3]
003bbc  2814              CMP      r0,#0x14
003bbe  d903              BLS      |L1.15304|
;;;5972   		(bps[in]._Uii<200)*/)				bps[in]._state=bsOFF_AV_NET;
003bc0  f04f0005          MOV      r0,#5
003bc4  70a0              STRB     r0,[r4,#2]
003bc6  e00d              B        |L1.15332|
                  |L1.15304|
;;;5973   else if (bps[in]._flags_tm&BIN8(100000))	bps[in]._state=bsRDY;
003bc8  f8940042          LDRB     r0,[r4,#0x42]
003bcc  0680              LSLS     r0,r0,#26
003bce  d503              BPL      |L1.15320|
003bd0  f04f0002          MOV      r0,#2
003bd4  70a0              STRB     r0,[r4,#2]
003bd6  e005              B        |L1.15332|
                  |L1.15320|
;;;5974   else if (bps[in]._cnt<20)				bps[in]._state=bsWRK;
003bd8  78e0              LDRB     r0,[r4,#3]
003bda  2814              CMP      r0,#0x14
003bdc  d202              BCS      |L1.15332|
003bde  f04f0001          MOV      r0,#1
003be2  70a0              STRB     r0,[r4,#2]
                  |L1.15332|
;;;5975   
;;;5976   
;;;5977   
;;;5978   //else if(bps[in]._flags_tm&BIN8(100000)) bps[in]._state=ssBL;
;;;5979   //else if((!(bps[in]._flags_tm&BIN8(100000)))&&(net_U>100))bps[in]._state=ssWRK;
;;;5980   //else bps[0]._state=ssNOT;
;;;5981   
;;;5982   //bps[in]._is_ready=0;
;;;5983   //bps[in]._is_wrk=0;
;;;5984   //if(bps[in]._av_net) bps[in]._flags_bp='N';// не подключен
;;;5985   //else if(bps[in]._av_u_max) bps[in]._flags_bp='P';// завышено напряжение(u_.av_.bAS1T)) bps_state[0]=ssAV;
;;;5986   //else if(bps[in]._av_u_min) bps[in]._flags_bp='M';// занижено напряжение
;;;5987   //else if(bps[in]._av_temper) bps[in]._flags_bp='T';// температура
;;;5988   //else if(bps[in]._flags_tm&BIN8(100000)) 
;;;5989   //	{
;;;5990   //	bps[in]._flags_bp='B';// заблокирован
;;;5991   //	bps[in]._is_ready=1;
;;;5992   //	}
;;;5993   //else if((!(bps[in]._flags_tm&BIN8(100000)))&&(net_U>100))
;;;5994   //     {
;;;5995   //     bps[in]._flags_bp='W';// работает
;;;5996   //     bps[in]._is_ready=1;
;;;5997   //     bps[in]._is_wrk=1;
;;;5998        
;;;5999   //     }
;;;6000   //else bps[in]._is_ready=1;     
;;;6001   
;;;6002   
;;;6003   
;;;6004   
;;;6005   
;;;6006   /*
;;;6007   bps[in]._flags_tu&=BIN8(11111110);
;;;6008   if(bps[in]._ist_blok_cnt)
;;;6009   	{
;;;6010   	bps[in]._ist_blok_cnt--;
;;;6011   	bps[in]._flags_tu|=BIN8(1);
;;;6012   	}
;;;6013   
;;;6014   	   */ 
;;;6015   
;;;6016   //Пересброс БПСа при потере связи
;;;6017   if(bps[in]._cnt>=10) bps[in]._flags_tu|=BIN8(10000000);
003be4  78e0              LDRB     r0,[r4,#3]
003be6  280a              CMP      r0,#0xa
003be8  d306              BCC      |L1.15352|
003bea  f894002c          LDRB     r0,[r4,#0x2c]
003bee  f0400080          ORR      r0,r0,#0x80
003bf2  f884002c          STRB     r0,[r4,#0x2c]
003bf6  e005              B        |L1.15364|
                  |L1.15352|
;;;6018   else bps[in]._flags_tu&=BIN8(1111111);
003bf8  f894002c          LDRB     r0,[r4,#0x2c]
003bfc  f000007f          AND      r0,r0,#0x7f
003c00  f884002c          STRB     r0,[r4,#0x2c]
                  |L1.15364|
;;;6019   	
;;;6020   bps[in]._vol_u=cntrl_stat+bps[in]._x_;	
003c04  4936              LDR      r1,|L1.15584|
003c06  f9b40050          LDRSH    r0,[r4,#0x50]
003c0a  f9b1102c          LDRSH    r1,[r1,#0x2c]  ; cntrl_stat
003c0e  4408              ADD      r0,r0,r1
003c10  6320              STR      r0,[r4,#0x30]
;;;6021   bps[in]._vol_i=1000; 
003c12  f44f707a          MOV      r0,#0x3e8
003c16  6360              STR      r0,[r4,#0x34]
                  |L1.15384|
;;;6022   }
003c18  e8bd81f0          POP      {r4-r8,pc}
;;;6023   
                          ENDP

                  avt_hndl PROC
;;;6024   //-----------------------------------------------
;;;6025   void avt_hndl(void)
003c1c  b570              PUSH     {r4-r6,lr}
;;;6026   {
;;;6027   char i;
;;;6028   for(i=0;i<12;i++)
003c1e  f04f0000          MOV      r0,#0
;;;6029   	{
;;;6030   	if(eb2_data_short[6]&(1<<i))
003c22  4930              LDR      r1,|L1.15588|
;;;6031   		{
;;;6032   		avt_stat[i]=avtON;
003c24  4d30              LDR      r5,|L1.15592|
003c26  f04f0401          MOV      r4,#1                 ;6030
003c2a  f9b1200c          LDRSH    r2,[r1,#0xc]          ;6030
003c2e  4603              MOV      r3,r0                 ;6028
                  |L1.15408|
003c30  fa04f100          LSL      r1,r4,r0              ;6030
003c34  420a              TST      r2,r1                 ;6030
003c36  d001              BEQ      |L1.15420|
003c38  542c              STRB     r4,[r5,r0]
003c3a  e000              B        |L1.15422|
                  |L1.15420|
;;;6033   		}
;;;6034   	else avt_stat[i]=avtOFF;
003c3c  542b              STRB     r3,[r5,r0]
                  |L1.15422|
003c3e  f1000001          ADD      r0,r0,#1              ;6028
003c42  b2c0              UXTB     r0,r0                 ;6028
003c44  280c              CMP      r0,#0xc               ;6028
003c46  d3f3              BCC      |L1.15408|
;;;6035   	}
;;;6036   
;;;6037   if((avt_stat_old[0]!=avt_stat[0])&&(NUMAVT>=1))
003c48  4e28              LDR      r6,|L1.15596|
003c4a  7828              LDRB     r0,[r5,#0]  ; avt_stat
003c4c  4c28              LDR      r4,|L1.15600|
003c4e  7831              LDRB     r1,[r6,#0]  ; avt_stat_old
003c50  4281              CMP      r1,r0
003c52  d00b              BEQ      |L1.15468|
003c54  f9b41000          LDRSH    r1,[r4,#0]  ; NUMAVT
003c58  2901              CMP      r1,#1
003c5a  db07              BLT      |L1.15468|
;;;6038   	{
;;;6039   	if(avt_stat[0]==avtON) 	snmp_trap_send("Avtomat #1 is ON ",11,1,1);
003c5c  2801              CMP      r0,#1
003c5e  d02a              BEQ      |L1.15542|
;;;6040   	else 				snmp_trap_send("Avtomat #1 is OFF",11,1,0);
003c60  2300              MOVS     r3,#0
003c62  2201              MOVS     r2,#1
003c64  210b              MOVS     r1,#0xb
003c66  a023              ADR      r0,|L1.15604|
003c68  f7fffffe          BL       snmp_trap_send
                  |L1.15468|
;;;6041   	}
;;;6042   if((avt_stat_old[1]!=avt_stat[1])&&(NUMAVT>=2))
003c6c  7871              LDRB     r1,[r6,#1]  ; avt_stat_old
003c6e  7868              LDRB     r0,[r5,#1]  ; avt_stat
003c70  4281              CMP      r1,r0
003c72  d00b              BEQ      |L1.15500|
003c74  f9b41000          LDRSH    r1,[r4,#0]  ; NUMAVT
003c78  2902              CMP      r1,#2
003c7a  db07              BLT      |L1.15500|
;;;6043   	{
;;;6044   	if(avt_stat[1]==avtON) 	snmp_trap_send("Avtomat #2 is ON ",11,2,1);
003c7c  2801              CMP      r0,#1
003c7e  d07e              BEQ      |L1.15742|
;;;6045   	else 				snmp_trap_send("Avtomat #2 is OFF",11,2,0);
003c80  2300              MOVS     r3,#0
003c82  2202              MOVS     r2,#2
003c84  210b              MOVS     r1,#0xb
003c86  a020              ADR      r0,|L1.15624|
003c88  f7fffffe          BL       snmp_trap_send
                  |L1.15500|
;;;6046   	}
;;;6047   if((avt_stat_old[2]!=avt_stat[2])&&(NUMAVT>=3))
003c8c  78b1              LDRB     r1,[r6,#2]  ; avt_stat_old
003c8e  78a8              LDRB     r0,[r5,#2]  ; avt_stat
003c90  4281              CMP      r1,r0
003c92  d00b              BEQ      |L1.15532|
003c94  f9b41000          LDRSH    r1,[r4,#0]  ; NUMAVT
003c98  2903              CMP      r1,#3
003c9a  db07              BLT      |L1.15532|
;;;6048   	{
;;;6049   	if(avt_stat[2]==avtON) 	snmp_trap_send("Avtomat #3 is ON ",11,3,1);
003c9c  2801              CMP      r0,#1
003c9e  d06f              BEQ      |L1.15744|
;;;6050   	else 				snmp_trap_send("Avtomat #3 is OFF",11,3,0);
003ca0  2300              MOVS     r3,#0
003ca2  2203              MOVS     r2,#3
003ca4  210b              MOVS     r1,#0xb
003ca6  a01d              ADR      r0,|L1.15644|
003ca8  f7fffffe          BL       snmp_trap_send
                  |L1.15532|
;;;6051   	}
;;;6052   if((avt_stat_old[3]!=avt_stat[3])&&(NUMAVT>=4))
003cac  78f1              LDRB     r1,[r6,#3]  ; avt_stat_old
003cae  78e8              LDRB     r0,[r5,#3]  ; avt_stat
003cb0  4281              CMP      r1,r0
003cb2  d049              BEQ      |L1.15688|
003cb4  e03c              B        |L1.15664|
                  |L1.15542|
003cb6  e0a4              B        |L1.15874|
                  |L1.15544|
                          DCD      ica_u_necc
                  |L1.15548|
                          DCD      ICA_MODBUS_ADDRESS
                  |L1.15552|
                          DCD      ICA_CH
                  |L1.15556|
                          DCD      TBAT
                  |L1.15560|
                          DCD      ipsBlckStat
                  |L1.15564|
                          DCD      ipsBlckSrc
                  |L1.15568|
                          DCD      ipsBlckLog
                  |L1.15572|
                          DCD      ||.bss||+0x40c
                  |L1.15576|
                          DCD      bps
                  |L1.15580|
                          DCD      net_av
                  |L1.15584|
                          DCD      ||area_number.25||
                  |L1.15588|
                          DCD      eb2_data_short
                  |L1.15592|
                          DCD      avt_stat
                  |L1.15596|
                          DCD      avt_stat_old
                  |L1.15600|
                          DCD      NUMAVT
                  |L1.15604|
003cf4  4176746f          DCB      "Avtomat #1 is OFF",0
003cf8  6d617420
003cfc  23312069
003d00  73204f46
003d04  4600    
003d06  00                DCB      0
003d07  00                DCB      0
                  |L1.15624|
003d08  4176746f          DCB      "Avtomat #2 is OFF",0
003d0c  6d617420
003d10  23322069
003d14  73204f46
003d18  4600    
003d1a  00                DCB      0
003d1b  00                DCB      0
                  |L1.15644|
003d1c  4176746f          DCB      "Avtomat #3 is OFF",0
003d20  6d617420
003d24  23332069
003d28  73204f46
003d2c  4600    
003d2e  00                DCB      0
003d2f  00                DCB      0
                  |L1.15664|
003d30  f9b41000          LDRSH    r1,[r4,#0]  ; NUMAVT
003d34  2904              CMP      r1,#4
003d36  db07              BLT      |L1.15688|
;;;6053   	{
;;;6054   	if(avt_stat[3]==avtON) 	snmp_trap_send("Avtomat #4 is ON ",11,4,1);
003d38  2801              CMP      r0,#1
003d3a  d078              BEQ      |L1.15918|
;;;6055   	else 				snmp_trap_send("Avtomat #4 is OFF",11,4,0);
003d3c  2300              MOVS     r3,#0
003d3e  2204              MOVS     r2,#4
003d40  210b              MOVS     r1,#0xb
003d42  a0ff              ADR      r0,|L1.16704|
003d44  f7fffffe          BL       snmp_trap_send
                  |L1.15688|
;;;6056   	}
;;;6057   if((avt_stat_old[4]!=avt_stat[4])&&(NUMAVT>=5))
003d48  7931              LDRB     r1,[r6,#4]  ; avt_stat_old
003d4a  7928              LDRB     r0,[r5,#4]  ; avt_stat
003d4c  4281              CMP      r1,r0
003d4e  d00b              BEQ      |L1.15720|
003d50  f9b41000          LDRSH    r1,[r4,#0]  ; NUMAVT
003d54  2905              CMP      r1,#5
003d56  db07              BLT      |L1.15720|
;;;6058   	{
;;;6059   	if(avt_stat[4]==avtON) 	snmp_trap_send("Avtomat #5 is ON ",11,5,1);
003d58  2801              CMP      r0,#1
003d5a  d070              BEQ      |L1.15934|
;;;6060   	else 				snmp_trap_send("Avtomat #5 is OFF",11,5,0);
003d5c  2300              MOVS     r3,#0
003d5e  2205              MOVS     r2,#5
003d60  210b              MOVS     r1,#0xb
003d62  a0fc              ADR      r0,|L1.16724|
003d64  f7fffffe          BL       snmp_trap_send
                  |L1.15720|
;;;6061   	}
;;;6062   if((avt_stat_old[5]!=avt_stat[5])&&(NUMAVT>=6))
003d68  7971              LDRB     r1,[r6,#5]  ; avt_stat_old
003d6a  7968              LDRB     r0,[r5,#5]  ; avt_stat
003d6c  4281              CMP      r1,r0
003d6e  d00e              BEQ      |L1.15758|
003d70  f9b41000          LDRSH    r1,[r4,#0]  ; NUMAVT
003d74  2906              CMP      r1,#6
003d76  db0a              BLT      |L1.15758|
;;;6063   	{
;;;6064   	if(avt_stat[5]==avtON) 	snmp_trap_send("Avtomat #6 is ON ",11,6,1);
003d78  2801              CMP      r0,#1
003d7a  d067              BEQ      |L1.15948|
;;;6065   	else 				snmp_trap_send("Avtomat #6 is OFF",11,6,0);
003d7c  e001              B        |L1.15746|
                  |L1.15742|
003d7e  e047              B        |L1.15888|
                  |L1.15744|
003d80  e04e              B        |L1.15904|
                  |L1.15746|
003d82  2300              MOVS     r3,#0
003d84  2206              MOVS     r2,#6
003d86  210b              MOVS     r1,#0xb
003d88  a0f7              ADR      r0,|L1.16744|
003d8a  f7fffffe          BL       snmp_trap_send
                  |L1.15758|
;;;6066   	}
;;;6067   if((avt_stat_old[6]!=avt_stat[6])&&(NUMAVT>=7))
003d8e  79b1              LDRB     r1,[r6,#6]  ; avt_stat_old
003d90  79a8              LDRB     r0,[r5,#6]  ; avt_stat
003d92  4281              CMP      r1,r0
003d94  d00b              BEQ      |L1.15790|
003d96  f9b41000          LDRSH    r1,[r4,#0]  ; NUMAVT
003d9a  2907              CMP      r1,#7
003d9c  db07              BLT      |L1.15790|
;;;6068   	{
;;;6069   	if(avt_stat[6]==avtON) 	snmp_trap_send("Avtomat #7 is ON ",11,7,1);
003d9e  2801              CMP      r0,#1
003da0  d05b              BEQ      |L1.15962|
;;;6070   	else 				snmp_trap_send("Avtomat #7 is OFF",11,7,0);
003da2  2300              MOVS     r3,#0
003da4  2207              MOVS     r2,#7
003da6  210b              MOVS     r1,#0xb
003da8  a0f4              ADR      r0,|L1.16764|
003daa  f7fffffe          BL       snmp_trap_send
                  |L1.15790|
;;;6071   	}
;;;6072   if((avt_stat_old[7]!=avt_stat[7])&&(NUMAVT>=8))
003dae  79f1              LDRB     r1,[r6,#7]  ; avt_stat_old
003db0  79e8              LDRB     r0,[r5,#7]  ; avt_stat
003db2  4281              CMP      r1,r0
003db4  d00b              BEQ      |L1.15822|
003db6  f9b41000          LDRSH    r1,[r4,#0]  ; NUMAVT
003dba  2908              CMP      r1,#8
003dbc  db07              BLT      |L1.15822|
;;;6073   	{
;;;6074   	if(avt_stat[7]==avtON) 	snmp_trap_send("Avtomat #8 is ON ",11,8,1);
003dbe  2801              CMP      r0,#1
003dc0  d052              BEQ      |L1.15976|
;;;6075   	else 				snmp_trap_send("Avtomat #8 is OFF",11,8,0);
003dc2  2300              MOVS     r3,#0
003dc4  2208              MOVS     r2,#8
003dc6  210b              MOVS     r1,#0xb
003dc8  a0f1              ADR      r0,|L1.16784|
003dca  f7fffffe          BL       snmp_trap_send
                  |L1.15822|
;;;6076   	}
;;;6077   if((avt_stat_old[8]!=avt_stat[8])&&(NUMAVT>=9))
003dce  7a31              LDRB     r1,[r6,#8]  ; avt_stat_old
003dd0  7a28              LDRB     r0,[r5,#8]  ; avt_stat
003dd2  4281              CMP      r1,r0
003dd4  d00b              BEQ      |L1.15854|
003dd6  f9b41000          LDRSH    r1,[r4,#0]  ; NUMAVT
003dda  2909              CMP      r1,#9
003ddc  db07              BLT      |L1.15854|
;;;6078   	{
;;;6079   	if(avt_stat[8]==avtON) 	snmp_trap_send("Avtomat #9 is ON ",11,9,1);
003dde  2801              CMP      r0,#1
003de0  d049              BEQ      |L1.15990|
;;;6080   	else 				snmp_trap_send("Avtomat #9 is OFF",11,9,0);
003de2  2300              MOVS     r3,#0
003de4  2209              MOVS     r2,#9
003de6  210b              MOVS     r1,#0xb
003de8  a0ee              ADR      r0,|L1.16804|
003dea  f7fffffe          BL       snmp_trap_send
                  |L1.15854|
;;;6081   	}
;;;6082   
;;;6083   for(i=0;i<12;i++)
003dee  f04f0000          MOV      r0,#0
                  |L1.15858|
;;;6084   	{
;;;6085   	avt_stat_old[i]=avt_stat[i];
003df2  5c29              LDRB     r1,[r5,r0]
003df4  5431              STRB     r1,[r6,r0]
003df6  f1000001          ADD      r0,r0,#1              ;6083
003dfa  b2c0              UXTB     r0,r0                 ;6083
003dfc  280c              CMP      r0,#0xc               ;6083
003dfe  d3f8              BCC      |L1.15858|
;;;6086   	}
;;;6087   }
003e00  bd70              POP      {r4-r6,pc}
                  |L1.15874|
003e02  2301              MOVS     r3,#1                 ;6039
003e04  461a              MOV      r2,r3                 ;6039
003e06  210b              MOVS     r1,#0xb               ;6039
003e08  a0eb              ADR      r0,|L1.16824|
003e0a  f7fffffe          BL       snmp_trap_send
003e0e  e72d              B        |L1.15468|
                  |L1.15888|
003e10  2301              MOVS     r3,#1                 ;6044
003e12  2202              MOVS     r2,#2                 ;6044
003e14  210b              MOVS     r1,#0xb               ;6044
003e16  a0ed              ADR      r0,|L1.16844|
003e18  f7fffffe          BL       snmp_trap_send
003e1c  e736              B        |L1.15500|
003e1e  e006              B        |L1.15918|
                  |L1.15904|
003e20  2301              MOVS     r3,#1                 ;6049
003e22  2203              MOVS     r2,#3                 ;6049
003e24  210b              MOVS     r1,#0xb               ;6049
003e26  a0ee              ADR      r0,|L1.16864|
003e28  f7fffffe          BL       snmp_trap_send
003e2c  e73e              B        |L1.15532|
                  |L1.15918|
003e2e  2301              MOVS     r3,#1                 ;6054
003e30  2204              MOVS     r2,#4                 ;6054
003e32  210b              MOVS     r1,#0xb               ;6054
003e34  a0ef              ADR      r0,|L1.16884|
003e36  f7fffffe          BL       snmp_trap_send
003e3a  e785              B        |L1.15688|
003e3c  e7ff              B        |L1.15934|
                  |L1.15934|
003e3e  2301              MOVS     r3,#1                 ;6059
003e40  2205              MOVS     r2,#5                 ;6059
003e42  210b              MOVS     r1,#0xb               ;6059
003e44  a0f0              ADR      r0,|L1.16904|
003e46  f7fffffe          BL       snmp_trap_send
003e4a  e78d              B        |L1.15720|
                  |L1.15948|
003e4c  2301              MOVS     r3,#1                 ;6064
003e4e  2206              MOVS     r2,#6                 ;6064
003e50  210b              MOVS     r1,#0xb               ;6064
003e52  a0f2              ADR      r0,|L1.16924|
003e54  f7fffffe          BL       snmp_trap_send
003e58  e799              B        |L1.15758|
                  |L1.15962|
003e5a  2301              MOVS     r3,#1                 ;6069
003e5c  2207              MOVS     r2,#7                 ;6069
003e5e  210b              MOVS     r1,#0xb               ;6069
003e60  a0f3              ADR      r0,|L1.16944|
003e62  f7fffffe          BL       snmp_trap_send
003e66  e7a2              B        |L1.15790|
                  |L1.15976|
003e68  2301              MOVS     r3,#1                 ;6074
003e6a  2208              MOVS     r2,#8                 ;6074
003e6c  210b              MOVS     r1,#0xb               ;6074
003e6e  a0f5              ADR      r0,|L1.16964|
003e70  f7fffffe          BL       snmp_trap_send
003e74  e7ab              B        |L1.15822|
                  |L1.15990|
003e76  2301              MOVS     r3,#1                 ;6079
003e78  2209              MOVS     r2,#9                 ;6079
003e7a  210b              MOVS     r1,#0xb               ;6079
003e7c  a0f6              ADR      r0,|L1.16984|
003e7e  f7fffffe          BL       snmp_trap_send
003e82  e7b4              B        |L1.15854|
;;;6088   
                          ENDP

                  bat_hndl PROC
;;;6089   //-----------------------------------------------
;;;6090   void bat_hndl(void)
003e84  b570              PUSH     {r4-r6,lr}
;;;6091   {
;;;6092   /*if(mess_find(_MESS_BAT_MASK_ON))
;;;6093   	{
;;;6094   	if(mess_data[0]==_MESS_BAT_MASK_ON)
;;;6095   		{
;;;6096   		char i;
;;;6097   		for(i=0;i<2;i++)
;;;6098   			{
;;;6099   			if(mess_data[1]&(1<<i))
;;;6100   				{
;;;6101   				bat[i]._cnt_to_block=0;
;;;6102        			bat[i]._rel_stat=0;
;;;6103        			}
;;;6104   			}
;;;6105   		}
;;;6106   	}
;;;6107   if(mess_find(_MESS_BAT_MASK_OFF))
;;;6108   	{		
;;;6109   	if(mess_data[0]==_MESS_BAT_MASK_OFF)
;;;6110   		{
;;;6111   		char i;
;;;6112   		for(i=0;i<2;i++)
;;;6113   			{
;;;6114   			if((mess_data[1]&(1<<i)) && (bat[i]._cnt_to_block==0) && (bat[i]._rel_stat==0))
;;;6115   				{
;;;6116   				bat[i]._cnt_to_block=20;
;;;6117   				bat[i]._rel_stat=1;
;;;6118        			}
;;;6119   			}
;;;6120   		
;;;6121   		}		
;;;6122   	}*/
;;;6123   
;;;6124   if(mess_find_unvol(MESS2BAT_HNDL))
003e86  20c8              MOVS     r0,#0xc8
003e88  f7fffffe          BL       mess_find_unvol
;;;6125   	{ 
;;;6126   	char i;
;;;6127   	
;;;6128   	if(mess_data[0]==PARAM_BAT_ALL_OFF_AFTER_2SEC)
;;;6129   		{
;;;6130   		for(i=0;i<MAX_NUM_OF_BAT;i++)
;;;6131   			{
;;;6132   			if(bat[i]._cnt_to_block<50)bat[i]._cnt_to_block++;
003e8c  49f7              LDR      r1,|L1.17004|
003e8e  2200              MOVS     r2,#0                 ;6130
003e90  b3a8              CBZ      r0,|L1.16126|
003e92  4bf7              LDR      r3,|L1.17008|
;;;6133   			}
;;;6134   		}
;;;6135   
;;;6136   	else if(mess_data[0]==PARAM_BAT_MASK_OFF_AFTER_2SEC)
;;;6137   		{
;;;6138   		for(i=0;i<MAX_NUM_OF_BAT;i++)
;;;6139   			{
;;;6140   			if(mess_data[1]&(1<<i))
003e94  2401              MOVS     r4,#1
003e96  6818              LDR      r0,[r3,#0]            ;6128  ; mess_data
003e98  28c9              CMP      r0,#0xc9              ;6128
003e9a  d01c              BEQ      |L1.16086|
003e9c  28ca              CMP      r0,#0xca              ;6136
003e9e  d02f              BEQ      |L1.16128|
;;;6141   				{
;;;6142   				if(bat[i]._cnt_to_block<50) bat[i]._cnt_to_block++;
;;;6143   				}
;;;6144   			else bat[i]._cnt_to_block=0;
;;;6145   			}
;;;6146   		}
;;;6147   	else 
;;;6148   	 	{
;;;6149   		for(i=0;i<MAX_NUM_OF_BAT;i++)
003ea0  4610              MOV      r0,r2
                  |L1.16034|
;;;6150   			{
;;;6151   			bat[i]._cnt_to_block=0;
003ea2  eb000340          ADD      r3,r0,r0,LSL #1
003ea6  eb031300          ADD      r3,r3,r0,LSL #4
003eaa  f8012023          STRB     r2,[r1,r3,LSL #2]
003eae  f1000001          ADD      r0,r0,#1              ;6149
003eb2  b2c0              UXTB     r0,r0                 ;6149
003eb4  2802              CMP      r0,#2                 ;6149
003eb6  d3f4              BCC      |L1.16034|
                  |L1.16056|
;;;6152   			}
;;;6153   
;;;6154   		}
;;;6155   	for(i=0;i<MAX_NUM_OF_BAT;i++)
003eb8  f04f0000          MOV      r0,#0
                  |L1.16060|
;;;6156   		{
;;;6157   		if(bat[i]._cnt_to_block>20)bat[i]._rel_stat=1;
003ebc  eb000340          ADD      r3,r0,r0,LSL #1
003ec0  eb031300          ADD      r3,r3,r0,LSL #4
003ec4  f8115023          LDRB     r5,[r1,r3,LSL #2]
003ec8  2d14              CMP      r5,#0x14
003eca  d939              BLS      |L1.16192|
003ecc  eb010383          ADD      r3,r1,r3,LSL #2
003ed0  f883403c          STRB     r4,[r3,#0x3c]
003ed4  e038              B        |L1.16200|
                  |L1.16086|
003ed6  f04f0000          MOV      r0,#0                 ;6130
                  |L1.16090|
003eda  eb000340          ADD      r3,r0,r0,LSL #1       ;6132
003ede  eb031500          ADD      r5,r3,r0,LSL #4       ;6132
003ee2  f8113025          LDRB     r3,[r1,r5,LSL #2]     ;6132
003ee6  2b32              CMP      r3,#0x32              ;6132
003ee8  d203              BCS      |L1.16114|
003eea  f1030301          ADD      r3,r3,#1              ;6132
003eee  f8013025          STRB     r3,[r1,r5,LSL #2]     ;6132
                  |L1.16114|
003ef2  f1000001          ADD      r0,r0,#1              ;6130
003ef6  b2c0              UXTB     r0,r0                 ;6130
003ef8  2802              CMP      r0,#2                 ;6130
003efa  d3ee              BCC      |L1.16090|
003efc  e7dc              B        |L1.16056|
                  |L1.16126|
003efe  e029              B        |L1.16212|
                  |L1.16128|
003f00  f04f0000          MOV      r0,#0                 ;6138
003f04  685e              LDR      r6,[r3,#4]            ;6140
                  |L1.16134|
003f06  fa04f300          LSL      r3,r4,r0              ;6140
003f0a  421e              TST      r6,r3                 ;6140
003f0c  d00c              BEQ      |L1.16168|
003f0e  eb000340          ADD      r3,r0,r0,LSL #1       ;6142
003f12  eb031500          ADD      r5,r3,r0,LSL #4       ;6142
003f16  f8113025          LDRB     r3,[r1,r5,LSL #2]     ;6142
003f1a  2b32              CMP      r3,#0x32              ;6142
003f1c  d20a              BCS      |L1.16180|
003f1e  f1030301          ADD      r3,r3,#1              ;6142
003f22  f8013025          STRB     r3,[r1,r5,LSL #2]     ;6142
003f26  e005              B        |L1.16180|
                  |L1.16168|
003f28  eb000340          ADD      r3,r0,r0,LSL #1       ;6144
003f2c  eb031300          ADD      r3,r3,r0,LSL #4       ;6144
003f30  f8012023          STRB     r2,[r1,r3,LSL #2]     ;6144
                  |L1.16180|
003f34  f1000001          ADD      r0,r0,#1              ;6138
003f38  b2c0              UXTB     r0,r0                 ;6138
003f3a  2802              CMP      r0,#2                 ;6138
003f3c  d3e3              BCC      |L1.16134|
003f3e  e7bb              B        |L1.16056|
                  |L1.16192|
;;;6158   		else bat[i]._rel_stat=0;
003f40  eb010383          ADD      r3,r1,r3,LSL #2
003f44  f883203c          STRB     r2,[r3,#0x3c]
                  |L1.16200|
003f48  f1000001          ADD      r0,r0,#1              ;6155
003f4c  b2c0              UXTB     r0,r0                 ;6155
003f4e  2802              CMP      r0,#2                 ;6155
003f50  d3b4              BCC      |L1.16060|
;;;6159   		}
;;;6160   
;;;6161   	}
;;;6162   
;;;6163   else 
;;;6164   	{
;;;6165   	char i;
;;;6166   	for(i=0;i<MAX_NUM_OF_BAT;i++)
;;;6167   		{
;;;6168   		bat[i]._cnt_to_block=0;
;;;6169   		bat[i]._rel_stat=0;
;;;6170   		}
;;;6171   
;;;6172   	}
;;;6173   
;;;6174   /*if(mess_find_unvol(MESS2BAT_HNDL1))
;;;6175   	{
;;;6176   	if(PARAM_BAT_ON)
;;;6177   		{
;;;6178   		char i;
;;;6179   		for(i=0;i<MAX_NUM_OF_BAT;i++)
;;;6180   			{
;;;6181   			if(mess_data[1]&(1<<i))
;;;6182   				{
;;;6183   				bat[i]._cnt_to_block=0;
;;;6184   				bat[i]._rel_stat=0;
;;;6185   				}
;;;6186   			}
;;;6187   		}
;;;6188   	} */
;;;6189   }
003f52  bd70              POP      {r4-r6,pc}
                  |L1.16212|
003f54  f04f0000          MOV      r0,#0                 ;6166
                  |L1.16216|
003f58  eb000340          ADD      r3,r0,r0,LSL #1       ;6168
003f5c  eb031300          ADD      r3,r3,r0,LSL #4       ;6168
003f60  f8012023          STRB     r2,[r1,r3,LSL #2]     ;6168
003f64  eb010383          ADD      r3,r1,r3,LSL #2       ;6169
003f68  f883203c          STRB     r2,[r3,#0x3c]         ;6169
003f6c  f1000001          ADD      r0,r0,#1              ;6166
003f70  b2c0              UXTB     r0,r0                 ;6166
003f72  2802              CMP      r0,#2                 ;6166
003f74  d3f0              BCC      |L1.16216|
003f76  bd70              POP      {r4-r6,pc}
;;;6190   
                          ENDP

                  bat_drv PROC
;;;6828   //-----------------------------------------------
;;;6829   void bat_drv(char in)
003f78  e92d4ffe          PUSH     {r1-r11,lr}
;;;6830   {
003f7c  4605              MOV      r5,r0
;;;6831   unsigned short /*tempUS,*/tempUS_;
;;;6832   unsigned long tempUL,tempUL_;
;;;6833   unsigned short b_zar;
;;;6834   //static unsigned short time_cnt[2];
;;;6835   
;;;6836   
;;;6837   
;;;6838   if(cntrl_stat_blok_cnt_plus[in])cntrl_stat_blok_cnt_plus[in]--;
003f7e  49bd              LDR      r1,|L1.17012|
003f80  f9310015          LDRSH    r0,[r1,r5,LSL #1]
003f84  b118              CBZ      r0,|L1.16270|
003f86  f1a00001          SUB      r0,r0,#1
003f8a  f8210015          STRH     r0,[r1,r5,LSL #1]
                  |L1.16270|
;;;6839   if(cntrl_stat_blok_cnt_minus[in])cntrl_stat_blok_cnt_minus[in]--;
003f8e  4ab9              LDR      r2,|L1.17012|
003f90  1d12              ADDS     r2,r2,#4
003f92  f9320015          LDRSH    r0,[r2,r5,LSL #1]
003f96  b118              CBZ      r0,|L1.16288|
003f98  f1a00001          SUB      r0,r0,#1
003f9c  f8220015          STRH     r0,[r2,r5,LSL #1]
                  |L1.16288|
;;;6840   
;;;6841   
;;;6842   if(bat[in]._Ib>IZMAX) cntrl_stat_blok_cnt_plus[in]=100;
003fa0  eb050045          ADD      r0,r5,r5,LSL #1
003fa4  4bb1              LDR      r3,|L1.17004|
003fa6  eb001005          ADD      r0,r0,r5,LSL #4
003faa  eb030480          ADD      r4,r3,r0,LSL #2
003fae  4bb2              LDR      r3,|L1.17016|
003fb0  9002              STR      r0,[sp,#8]
003fb2  f9b40008          LDRSH    r0,[r4,#8]
003fb6  f9b33000          LDRSH    r3,[r3,#0]  ; IZMAX
003fba  f04f0b64          MOV      r11,#0x64
003fbe  4298              CMP      r0,r3
003fc0  dd01              BLE      |L1.16326|
003fc2  f821b015          STRH     r11,[r1,r5,LSL #1]
                  |L1.16326|
;;;6843   if(bat[in]._Ib<0)     cntrl_stat_blok_cnt_minus[in]=100;
003fc6  2800              CMP      r0,#0
003fc8  da01              BGE      |L1.16334|
003fca  f822b015          STRH     r11,[r2,r5,LSL #1]
                  |L1.16334|
;;;6844   
;;;6845   if(cntrl_stat_blok_cnt_plus[in] && cntrl_stat_blok_cnt_minus[in])
;;;6846        {
;;;6847        if(!cntrl_stat_blok_cnt_)
003fce  48a9              LDR      r0,|L1.17012|
003fd0  f8313015          LDRH     r3,[r1,r5,LSL #1]     ;6845
003fd4  38ac              SUBS     r0,r0,#0xac
003fd6  2700              MOVS     r7,#0
003fd8  b14b              CBZ      r3,|L1.16366|
003fda  f8323015          LDRH     r3,[r2,r5,LSL #1]     ;6845
003fde  b133              CBZ      r3,|L1.16366|
003fe0  f8b03070          LDRH     r3,[r0,#0x70]  ; cntrl_stat_blok_cnt_
003fe4  b1a3              CBZ      r3,|L1.16400|
;;;6848             {
;;;6849             cntrl_stat_blok_cnt_=600; 
;;;6850             cntrl_stat_blok_cnt_plus[in]=0;
;;;6851             cntrl_stat_blok_cnt_minus[in]=0;
;;;6852             }
;;;6853        else cntrl_stat_blok_cnt=3000;
003fe6  f64031b8          MOV      r1,#0xbb8
003fea  f8a0106e          STRH     r1,[r0,#0x6e]
                  |L1.16366|
;;;6854        }
;;;6855   cntrl_stat_blok_cnt=0;
003fee  f8a0706e          STRH     r7,[r0,#0x6e]
;;;6856   
;;;6857   if(++(bat[in]._time_cnt)>=10)
003ff2  f894003e          LDRB     r0,[r4,#0x3e]
003ff6  1c40              ADDS     r0,r0,#1
003ff8  b2c0              UXTB     r0,r0
003ffa  f884003e          STRB     r0,[r4,#0x3e]
003ffe  280a              CMP      r0,#0xa
004000  d301              BCC      |L1.16390|
;;;6858   	{
;;;6859   	bat[in]._time_cnt=0;
004002  f884703e          STRB     r7,[r4,#0x3e]
                  |L1.16390|
;;;6860   	//bat[in]._zar_cnt++;
;;;6861   	}
;;;6862   
;;;6863   if(main_10Hz_cnt==50)
004006  4e9d              LDR      r6,|L1.17020|
004008  8830              LDRH     r0,[r6,#0]  ; main_10Hz_cnt
00400a  2832              CMP      r0,#0x32
00400c  d009              BEQ      |L1.16418|
00400e  e017              B        |L1.16448|
                  |L1.16400|
004010  f44f7316          MOV      r3,#0x258             ;6849
004014  f8a03070          STRH     r3,[r0,#0x70]         ;6849
004018  f8217015          STRH     r7,[r1,r5,LSL #1]     ;6850
00401c  f8227015          STRH     r7,[r2,r5,LSL #1]     ;6851
004020  e7e5              B        |L1.16366|
                  |L1.16418|
;;;6864   	{
;;;6865   	if(!bat[in]._rel_stat)
004022  f894003c          LDRB     r0,[r4,#0x3c]
004026  b958              CBNZ     r0,|L1.16448|
;;;6866   		{
;;;6867   		
;;;6868   		if(bat[in]._Ub<80) 
004028  f9b40002          LDRSH    r0,[r4,#2]
00402c  2850              CMP      r0,#0x50
00402e  da07              BGE      |L1.16448|
;;;6869   			{
;;;6870   			
;;;6871   			if(!(bat[in]._av&1))
004030  f894003d          LDRB     r0,[r4,#0x3d]
004034  07c0              LSLS     r0,r0,#31
004036  d103              BNE      |L1.16448|
;;;6872   				{
;;;6873   				avar_bat_hndl(in,1);
004038  2101              MOVS     r1,#1
00403a  4628              MOV      r0,r5
00403c  f7fffffe          BL       avar_bat_hndl
                  |L1.16448|
;;;6874   				//if(in==0)plazma_bat++;
;;;6875   				}
;;;6876   			}				
;;;6877   
;;;6878   		}
;;;6879   	}
;;;6880   
;;;6881   if(main_10Hz_cnt>200)
004040  f9b60000          LDRSH    r0,[r6,#0]  ; main_10Hz_cnt
;;;6882   	{
;;;6883   	if(abs(bat[in]._Ib)>IKB) 
004044  4e8e              LDR      r6,|L1.17024|
004046  28c8              CMP      r0,#0xc8              ;6881
004048  dd0f              BLE      |L1.16490|
00404a  f9b40008          LDRSH    r0,[r4,#8]
00404e  f7fffffe          BL       abs
004052  f9b61000          LDRSH    r1,[r6,#0]  ; IKB
004056  4288              CMP      r0,r1
004058  dd07              BLE      |L1.16490|
;;;6884   		{
;;;6885   		if((bat[in]._av&1))avar_bat_hndl(in,0);
00405a  f894003d          LDRB     r0,[r4,#0x3d]
00405e  07c0              LSLS     r0,r0,#31
004060  d003              BEQ      |L1.16490|
004062  2100              MOVS     r1,#0
004064  4628              MOV      r0,r5
004066  f7fffffe          BL       avar_bat_hndl
                  |L1.16490|
;;;6886   		}
;;;6887   	}
;;;6888   
;;;6889   #ifdef APSENERGIA
;;;6890   //if(bat[in]._Ib>(-IKB))
;;;6891   
;;;6892   
;;;6893   #endif
;;;6894   
;;;6895   if(bat[in]._Ib>(-IKB))
00406a  4885              LDR      r0,|L1.17024|
00406c  f9b41008          LDRSH    r1,[r4,#8]
004070  f9b00000          LDRSH    r0,[r0,#0]  ; IKB
004074  4240              RSBS     r0,r0,#0
004076  4281              CMP      r1,r0
004078  dd14              BLE      |L1.16548|
;;;6896   	{
;;;6897   	if(bat[in]._cnt_wrk<10)
00407a  7b60              LDRB     r0,[r4,#0xd]
00407c  280a              CMP      r0,#0xa
00407e  d20d              BCS      |L1.16540|
;;;6898   		{
;;;6899   		bat[in]._cnt_wrk++;
004080  f1000001          ADD      r0,r0,#1
004084  b2c0              UXTB     r0,r0
004086  7360              STRB     r0,[r4,#0xd]
;;;6900   		if((bat[in]._cnt_wrk>=10)&&(bat[in]._wrk)) 
004088  280a              CMP      r0,#0xa
00408a  d306              BCC      |L1.16538|
00408c  7ba0              LDRB     r0,[r4,#0xe]
00408e  2800              CMP      r0,#0
004090  d003              BEQ      |L1.16538|
;;;6901   			{
;;;6902   			bat[in]._wrk=0;
004092  73a7              STRB     r7,[r4,#0xe]
;;;6903   			//beep_init(0x7L,'O');
;;;6904   			//wrk_mem_hndl(0);
;;;6905   			wrk_mem_hndl(in);
004094  4628              MOV      r0,r5
004096  f7fffffe          BL       wrk_mem_hndl
                  |L1.16538|
00409a  e110              B        |L1.17086|
                  |L1.16540|
;;;6906   			//plazma++;
;;;6907   			}
;;;6908   		}
;;;6909   	else bat[in]._cnt_wrk=10;	
00409c  f04f000a          MOV      r0,#0xa
0040a0  7360              STRB     r0,[r4,#0xd]
0040a2  e10c              B        |L1.17086|
                  |L1.16548|
;;;6910   	}	
;;;6911   
;;;6912   else if(bat[in]._Ib<(-IKB))
0040a4  da40              BGE      |L1.16680|
;;;6913   	{
;;;6914   	if(bat[in]._cnt_wrk)
0040a6  7b60              LDRB     r0,[r4,#0xd]
0040a8  b3f0              CBZ      r0,|L1.16680|
;;;6915   		{
;;;6916   		bat[in]._cnt_wrk--;
0040aa  f1a00001          SUB      r0,r0,#1
0040ae  b2c0              UXTB     r0,r0
0040b0  7360              STRB     r0,[r4,#0xd]
;;;6917   		if((bat[in]._cnt_wrk==0)&&(bat[in]._wrk==0)) 
0040b2  bbc8              CBNZ     r0,|L1.16680|
0040b4  7ba0              LDRB     r0,[r4,#0xe]
0040b6  bbb8              CBNZ     r0,|L1.16680|
;;;6918   			{
;;;6919   			bat[in]._wrk=1;
0040b8  f04f0001          MOV      r0,#1
0040bc  73a0              STRB     r0,[r4,#0xe]
;;;6920   
;;;6921   				{
;;;6922   				char temp;
;;;6923   				signed short temp_temp;
;;;6924   				temp_temp=bat[in]._u_old[((bat_u_old_cnt+1)&0x07)];
0040be  4871              LDR      r0,|L1.17028|
0040c0  8800              LDRH     r0,[r0,#0]  ; bat_u_old_cnt
0040c2  f1000001          ADD      r0,r0,#1
0040c6  f0000007          AND      r0,r0,#7
0040ca  eb040040          ADD      r0,r4,r0,LSL #1
0040ce  8c00              LDRH     r0,[r0,#0x20]
0040d0  9000              STR      r0,[sp,#0]
;;;6925   			 
;;;6926   				temp=LPC_RTC->YEAR;
0040d2  4e6d              LDR      r6,|L1.17032|
0040d4  8bb0              LDRH     r0,[r6,#0x1c]
0040d6  9001              STR      r0,[sp,#4]
;;;6927   				gran_char((signed char*)&temp,1,99);
0040d8  f04f0263          MOV      r2,#0x63
0040dc  f04f0101          MOV      r1,#1
0040e0  a801              ADD      r0,sp,#4
0040e2  f7fffffe          BL       gran_char
;;;6928   				*((char*)(&(bat[in]._wrk_date[0])))=temp;
0040e6  f104041c          ADD      r4,r4,#0x1c
0040ea  f89d0004          LDRB     r0,[sp,#4]
0040ee  7620              STRB     r0,[r4,#0x18]
;;;6929   			
;;;6930   				temp=LPC_RTC->MONTH;
0040f0  7e30              LDRB     r0,[r6,#0x18]
0040f2  9001              STR      r0,[sp,#4]
;;;6931   				gran_char((signed char*)&temp,1,12);
0040f4  f04f020c          MOV      r2,#0xc
0040f8  f04f0101          MOV      r1,#1
0040fc  a801              ADD      r0,sp,#4
0040fe  f7fffffe          BL       gran_char
;;;6932   				*(((char*)(&(bat[in]._wrk_date[0])))+1)=temp;
004102  f89d0004          LDRB     r0,[sp,#4]
004106  7660              STRB     r0,[r4,#0x19]
;;;6933   			
;;;6934   				temp=LPC_RTC->DOM;
004108  7b30              LDRB     r0,[r6,#0xc]
00410a  9001              STR      r0,[sp,#4]
;;;6935   				gran_char((signed char*)&temp,1,31);
00410c  221f              MOVS     r2,#0x1f
00410e  2101              MOVS     r1,#1
004110  a801              ADD      r0,sp,#4
004112  f7fffffe          BL       gran_char
;;;6936   				*(((char*)(&(bat[in]._wrk_date[0])))+2)=temp;			
004116  f89d0004          LDRB     r0,[sp,#4]
00411a  76a0              STRB     r0,[r4,#0x1a]
;;;6937   				
;;;6938   				*(((char*)(&(bat[in]._wrk_date[0])))+3)=*((char*)&temp_temp);
00411c  f89d0000          LDRB     r0,[sp,#0]
004120  76e0              STRB     r0,[r4,#0x1b]
;;;6939   
;;;6940   				temp=LPC_RTC->HOUR;
004122  7a30              LDRB     r0,[r6,#8]
004124  9001              STR      r0,[sp,#4]
;;;6941   				gran_char((signed char*)&temp,0,23);
004126  e000              B        |L1.16682|
                  |L1.16680|
004128  e0c9              B        |L1.17086|
                  |L1.16682|
00412a  2217              MOVS     r2,#0x17
00412c  2100              MOVS     r1,#0
00412e  a801              ADD      r0,sp,#4
004130  f7fffffe          BL       gran_char
;;;6942   				*((char*)(&(bat[in]._wrk_date[1])))=temp;
004134  f89d0004          LDRB     r0,[sp,#4]
004138  7720              STRB     r0,[r4,#0x1c]
;;;6943                  	
;;;6944   				temp=LPC_RTC->MIN;
00413a  7930              LDRB     r0,[r6,#4]
00413c  9001              STR      r0,[sp,#4]
;;;6945   				gran_char((signed char*)&temp,0,59);
00413e  e0a5              B        |L1.17036|
                  |L1.16704|
004140  4176746f          DCB      "Avtomat #4 is OFF",0
004144  6d617420
004148  23342069
00414c  73204f46
004150  4600    
004152  00                DCB      0
004153  00                DCB      0
                  |L1.16724|
004154  4176746f          DCB      "Avtomat #5 is OFF",0
004158  6d617420
00415c  23352069
004160  73204f46
004164  4600    
004166  00                DCB      0
004167  00                DCB      0
                  |L1.16744|
004168  4176746f          DCB      "Avtomat #6 is OFF",0
00416c  6d617420
004170  23362069
004174  73204f46
004178  4600    
00417a  00                DCB      0
00417b  00                DCB      0
                  |L1.16764|
00417c  4176746f          DCB      "Avtomat #7 is OFF",0
004180  6d617420
004184  23372069
004188  73204f46
00418c  4600    
00418e  00                DCB      0
00418f  00                DCB      0
                  |L1.16784|
004190  4176746f          DCB      "Avtomat #8 is OFF",0
004194  6d617420
004198  23382069
00419c  73204f46
0041a0  4600    
0041a2  00                DCB      0
0041a3  00                DCB      0
                  |L1.16804|
0041a4  4176746f          DCB      "Avtomat #9 is OFF",0
0041a8  6d617420
0041ac  23392069
0041b0  73204f46
0041b4  4600    
0041b6  00                DCB      0
0041b7  00                DCB      0
                  |L1.16824|
0041b8  4176746f          DCB      "Avtomat #1 is ON ",0
0041bc  6d617420
0041c0  23312069
0041c4  73204f4e
0041c8  2000    
0041ca  00                DCB      0
0041cb  00                DCB      0
                  |L1.16844|
0041cc  4176746f          DCB      "Avtomat #2 is ON ",0
0041d0  6d617420
0041d4  23322069
0041d8  73204f4e
0041dc  2000    
0041de  00                DCB      0
0041df  00                DCB      0
                  |L1.16864|
0041e0  4176746f          DCB      "Avtomat #3 is ON ",0
0041e4  6d617420
0041e8  23332069
0041ec  73204f4e
0041f0  2000    
0041f2  00                DCB      0
0041f3  00                DCB      0
                  |L1.16884|
0041f4  4176746f          DCB      "Avtomat #4 is ON ",0
0041f8  6d617420
0041fc  23342069
004200  73204f4e
004204  2000    
004206  00                DCB      0
004207  00                DCB      0
                  |L1.16904|
004208  4176746f          DCB      "Avtomat #5 is ON ",0
00420c  6d617420
004210  23352069
004214  73204f4e
004218  2000    
00421a  00                DCB      0
00421b  00                DCB      0
                  |L1.16924|
00421c  4176746f          DCB      "Avtomat #6 is ON ",0
004220  6d617420
004224  23362069
004228  73204f4e
00422c  2000    
00422e  00                DCB      0
00422f  00                DCB      0
                  |L1.16944|
004230  4176746f          DCB      "Avtomat #7 is ON ",0
004234  6d617420
004238  23372069
00423c  73204f4e
004240  2000    
004242  00                DCB      0
004243  00                DCB      0
                  |L1.16964|
004244  4176746f          DCB      "Avtomat #8 is ON ",0
004248  6d617420
00424c  23382069
004250  73204f4e
004254  2000    
004256  00                DCB      0
004257  00                DCB      0
                  |L1.16984|
004258  4176746f          DCB      "Avtomat #9 is ON ",0
00425c  6d617420
004260  23392069
004264  73204f4e
004268  2000    
00426a  00                DCB      0
00426b  00                DCB      0
                  |L1.17004|
                          DCD      bat
                  |L1.17008|
                          DCD      mess_data
                  |L1.17012|
                          DCD      ||area_number.25||+0xac
                  |L1.17016|
                          DCD      IZMAX
                  |L1.17020|
                          DCD      main_10Hz_cnt
                  |L1.17024|
                          DCD      IKB
                  |L1.17028|
                          DCD      bat_u_old_cnt
                  |L1.17032|
                          DCD      0x40024020
                  |L1.17036|
00428c  223b              MOVS     r2,#0x3b
00428e  2100              MOVS     r1,#0
004290  a801              ADD      r0,sp,#4
004292  f7fffffe          BL       gran_char
;;;6946   				*(((char*)(&(bat[in]._wrk_date[1])))+1)=temp;
004296  f89d0004          LDRB     r0,[sp,#4]
00429a  7760              STRB     r0,[r4,#0x1d]
;;;6947   	          
;;;6948   				temp=LPC_RTC->SEC;
00429c  7830              LDRB     r0,[r6,#0]
00429e  9001              STR      r0,[sp,#4]
;;;6949   				gran_char((signed char*)&temp,0,59);
0042a0  223b              MOVS     r2,#0x3b
0042a2  2100              MOVS     r1,#0
0042a4  a801              ADD      r0,sp,#4
0042a6  f7fffffe          BL       gran_char
;;;6950   				*(((char*)(&(bat[in]._wrk_date[1])))+2)=temp;
0042aa  f89d0004          LDRB     r0,[sp,#4]
0042ae  77a0              STRB     r0,[r4,#0x1e]
;;;6951   			
;;;6952   				*(((char*)(&(bat[in]._wrk_date[1])))+3)=*(((char*)&temp_temp)+1);
0042b0  f89d0001          LDRB     r0,[sp,#1]
0042b4  77e0              STRB     r0,[r4,#0x1f]
;;;6953   				bat[in]._Iintegr=0;		//Счетчик десятков милиамперсекунд
0042b6  8027              STRH     r7,[r4,#0]
;;;6954   				bat[in]._Iintegr_=0;	//Счетчик сотен милиамперчасов
0042b8  8067              STRH     r7,[r4,#2]
0042ba  f1a4041c          SUB      r4,r4,#0x1c
                  |L1.17086|
;;;6955   				}
;;;6956   	
;;;6957   			}
;;;6958   
;;;6959   		}
;;;6960   	else bat[in]._cnt_wrk=0;	 
;;;6961   	
;;;6962   	}					
;;;6963   
;;;6964   /*
;;;6965   if(Ibat>=(-IKB))
;;;6966   	{
;;;6967   	if(cnt_wrk<10)
;;;6968   		{
;;;6969   		cnt_wrk++;
;;;6970   		if((cnt_wrk>=10)&&(wrk!=wrkOFF)) 
;;;6971   			{
;;;6972   			wrk=wrkOFF;
;;;6973   			//beep_init(0x7L,'O');
;;;6974   			wrk_mem_hndl(ibat_integr);
;;;6975   			}
;;;6976   		}
;;;6977   	else cnt_wrk=10;	
;;;6978   	}	
;;;6979   
;;;6980   else if((Ibat<(-IKB))&&(spc_stat!=spc_KE))
;;;6981   	{
;;;6982   	if(cnt_wrk)
;;;6983   		{
;;;6984   		cnt_wrk--;
;;;6985   		if((cnt_wrk==0)&&(wrk!=wrkON)) 
;;;6986   			{
;;;6987   			char temp;
;;;6988   			signed short temp_temp;
;;;6989   			temp_temp=ubat_old[((ubat_old_cnt+1)&0x07)];
;;;6990   			 
;;;6991   			wrk=wrkON;
;;;6992   			
;;;6993   			temp=_year;
;;;6994   			gran_char(&temp,1,99);
;;;6995   			*((char*)(&(wrk_date[0])))=temp;
;;;6996   			
;;;6997   			temp=_month;
;;;6998   			gran_char(&temp,1,12);
;;;6999   			*(((char*)(&(wrk_date[0])))+1)=temp;
;;;7000   			
;;;7001   			temp=_date;
;;;7002   			gran_char(&temp,1,31);
;;;7003   			*(((char*)(&(wrk_date[0])))+2)=temp;			
;;;7004   				
;;;7005   			*(((char*)(&(wrk_date[0])))+3)=*((char*)&temp_temp);
;;;7006   
;;;7007   			temp=_hour;
;;;7008   			gran_char(&temp,0,23);
;;;7009   			*((char*)(&(wrk_date[1])))=temp;
;;;7010                  
;;;7011   			temp=_min;
;;;7012   			gran_char(&temp,0,59);
;;;7013   			*(((char*)(&(wrk_date[1])))+1)=temp;
;;;7014   	          
;;;7015   			temp=_sec;
;;;7016   			gran_char(&temp,0,59);
;;;7017   			*(((char*)(&(wrk_date[1])))+2)=temp;
;;;7018   			
;;;7019   			*(((char*)(&(wrk_date[1])))+3)=*(((char*)&temp_temp)+1);
;;;7020   
;;;7021   			
;;;7022   			//beep_init(0xFL,'O'); 
;;;7023   			ibat_integr=0;
;;;7024   			ibat_integr_=0;
;;;7025   			}
;;;7026   		}
;;;7027   	else cnt_wrk=0;	 
;;;7028   	
;;;7029   	}
;;;7030   if(wrk==wrkON)
;;;7031   	{
;;;7032   	ibat_integr_+=-Ibat;
;;;7033   	if(ibat_integr_>=SEC_IN_HOUR*10L)
;;;7034   		{
;;;7035   		ibat_integr_-=SEC_IN_HOUR*10L;
;;;7036   		ibat_integr++;
;;;7037   		}
;;;7038   	}
;;;7039   
;;;7040   */
;;;7041   
;;;7042   
;;;7043   /*if(bat[in]._cnt_to_block)
;;;7044   	{
;;;7045   	bat[in]._cnt_to_block--;
;;;7046   	if(!(bat[in]._cnt_to_block))
;;;7047   		{
;;;7048   		//bat[in]._rel_stat=1;
;;;7049   		}
;;;7050   	}
;;;7051   */
;;;7052   
;;;7053   
;;;7054   
;;;7055   
;;;7056   //unsigned int tempUI,tempUI_;
;;;7057   //unsigned int b_zar; 
;;;7058   //char i;
;;;7059   //Ibat[0]=5000;                     
;;;7060   
;;;7061   
;;;7062                               
;;;7063   if(bat[in]._time_cnt==0)
;;;7064   	{
;;;7065   	bat[in]._zar_cnt+=(signed long)bat[in]._Ib;
;;;7066   	
;;;7067   	if(bat[in]._zar_cnt>=AH_CONSTANT)
0042be  f64848a0          MOV      r8,#0x8ca0
0042c2  f894003e          LDRB     r0,[r4,#0x3e]         ;7063
0042c6  2800              CMP      r0,#0                 ;7063
0042c8  d17e              BNE      |L1.17352|
0042ca  f9b41008          LDRSH    r1,[r4,#8]            ;7065
0042ce  6960              LDR      r0,[r4,#0x14]         ;7065
0042d0  4408              ADD      r0,r0,r1              ;7065
0042d2  6160              STR      r0,[r4,#0x14]         ;7065
;;;7068   		{
;;;7069   		if(BAT_C_REAL[in]==0x5555) tempUS_=BAT_C_NOM[in];
;;;7070   		else tempUS_=BAT_C_REAL[in];
;;;7071   		
;;;7072   		b_zar=lc640_read_int(ADR_EE_BAT_ZAR_CNT[in]);
0042d4  f8df940c          LDR      r9,|L1.18148|
0042d8  f8dfa40c          LDR      r10,|L1.18152|
0042dc  4540              CMP      r0,r8                 ;7067
0042de  db2a              BLT      |L1.17206|
0042e0  f93a1015          LDRSH    r1,[r10,r5,LSL #1]    ;7069
0042e4  f5a140aa          SUB      r0,r1,#0x5500         ;7069
0042e8  3855              SUBS     r0,r0,#0x55           ;7069
0042ea  d103              BNE      |L1.17140|
0042ec  48ff              LDR      r0,|L1.18156|
0042ee  f8306015          LDRH     r6,[r0,r5,LSL #1]     ;7069
0042f2  e001              B        |L1.17144|
                  |L1.17140|
0042f4  f83a6015          LDRH     r6,[r10,r5,LSL #1]    ;7070
                  |L1.17144|
0042f8  f8390015          LDRH     r0,[r9,r5,LSL #1]
0042fc  f7fffffe          BL       lc640_read_int
004300  b280              UXTH     r0,r0
;;;7073   
;;;7074   		if(b_zar<(tempUS_/**10*/))
004302  42b0              CMP      r0,r6
004304  d20e              BCS      |L1.17188|
;;;7075   			{
;;;7076   			bat[in]._zar_cnt-=AH_CONSTANT;
004306  6961              LDR      r1,[r4,#0x14]
004308  f5a14100          SUB      r1,r1,#0x8000
00430c  f5a1614a          SUB      r1,r1,#0xca0
004310  6161              STR      r1,[r4,#0x14]
;;;7077   
;;;7078   			lc640_write_int(ADR_EE_BAT_ZAR_CNT[in],b_zar+1);
004312  f9392015          LDRSH    r2,[r9,r5,LSL #1]
004316  f1000001          ADD      r0,r0,#1
00431a  b201              SXTH     r1,r0
00431c  4610              MOV      r0,r2
00431e  f7fffffe          BL       lc640_write_int
004322  e033              B        |L1.17292|
                  |L1.17188|
;;;7079   			}
;;;7080   		else if(b_zar>(tempUS_/**10*/))  
004324  d932              BLS      |L1.17292|
;;;7081   			{
;;;7082   			lc640_write_int(ADR_EE_BAT_ZAR_CNT[in],tempUS_);
004326  f9390015          LDRSH    r0,[r9,r5,LSL #1]
00432a  b231              SXTH     r1,r6
00432c  f7fffffe          BL       lc640_write_int
;;;7083   			bat[in]._zar_cnt=AH_CONSTANT;
004330  f8c48014          STR      r8,[r4,#0x14]
004334  e02a              B        |L1.17292|
                  |L1.17206|
;;;7084   
;;;7085   			}
;;;7086   
;;;7087   		}
;;;7088   
;;;7089   	else if(bat[in]._zar_cnt<=-AH_CONSTANT)
004336  49ee              LDR      r1,|L1.18160|
004338  4288              CMP      r0,r1
00433a  dc27              BGT      |L1.17292|
;;;7090   		{
;;;7091   		if(BAT_C_REAL[in]==0x5555) tempUS_=BAT_C_NOM[in];
00433c  f93a1015          LDRSH    r1,[r10,r5,LSL #1]
004340  f5a140aa          SUB      r0,r1,#0x5500
004344  3855              SUBS     r0,r0,#0x55
004346  d103              BNE      |L1.17232|
004348  48e8              LDR      r0,|L1.18156|
00434a  f8306015          LDRH     r6,[r0,r5,LSL #1]
00434e  e001              B        |L1.17236|
                  |L1.17232|
;;;7092   		else tempUS_=BAT_C_REAL[in];
004350  f83a6015          LDRH     r6,[r10,r5,LSL #1]
                  |L1.17236|
;;;7093   		
;;;7094   		b_zar=lc640_read_int(ADR_EE_BAT_ZAR_CNT[in]);
004354  f8390015          LDRH     r0,[r9,r5,LSL #1]
004358  f7fffffe          BL       lc640_read_int
00435c  b280              UXTH     r0,r0
;;;7095   
;;;7096   		if(b_zar>tempUS_)
00435e  42b0              CMP      r0,r6
004360  d905              BLS      |L1.17262|
;;;7097   			{
;;;7098   			lc640_write_int(ADR_EE_BAT_ZAR_CNT[in],tempUS_);
004362  f9390015          LDRSH    r0,[r9,r5,LSL #1]
004366  b231              SXTH     r1,r6
004368  f7fffffe          BL       lc640_write_int
;;;7099   			b_zar=tempUS_;
00436c  4630              MOV      r0,r6
                  |L1.17262|
;;;7100   			}
;;;7101   		if(b_zar)
00436e  b158              CBZ      r0,|L1.17288|
;;;7102   			{
;;;7103   			bat[in]._zar_cnt+=AH_CONSTANT;
004370  6961              LDR      r1,[r4,#0x14]
004372  4441              ADD      r1,r1,r8
004374  6161              STR      r1,[r4,#0x14]
;;;7104   
;;;7105   			lc640_write_int(ADR_EE_BAT_ZAR_CNT[in],b_zar-1);
004376  f9392015          LDRSH    r2,[r9,r5,LSL #1]
00437a  f1a00001          SUB      r0,r0,#1
00437e  b201              SXTH     r1,r0
004380  4610              MOV      r0,r2
004382  f7fffffe          BL       lc640_write_int
004386  e001              B        |L1.17292|
                  |L1.17288|
;;;7106   			}
;;;7107   		else 
;;;7108   			{
;;;7109   			bat[in]._zar_cnt=-AH_CONSTANT;
004388  48d9              LDR      r0,|L1.18160|
00438a  6160              STR      r0,[r4,#0x14]
                  |L1.17292|
;;;7110   			}
;;;7111   
;;;7112   		}
;;;7113   
;;;7114   			
;;;7115   	tempUL=(unsigned long)lc640_read_int(ADR_EE_BAT_ZAR_CNT[in]);
00438c  f8390015          LDRH     r0,[r9,r5,LSL #1]
004390  f7fffffe          BL       lc640_read_int
004394  4601              MOV      r1,r0
;;;7116   	
;;;7117   	if(BAT_C_REAL[in]==0x5555) tempUL_=(unsigned long)BAT_C_NOM[in];
004396  f93a0015          LDRSH    r0,[r10,r5,LSL #1]
00439a  f5a042aa          SUB      r2,r0,#0x5500
00439e  3a55              SUBS     r2,r2,#0x55
0043a0  d102              BNE      |L1.17320|
0043a2  48d2              LDR      r0,|L1.18156|
0043a4  f9300015          LDRSH    r0,[r0,r5,LSL #1]
                  |L1.17320|
;;;7118   	else tempUL_=(unsigned long)BAT_C_REAL[in];
;;;7119   		           	
;;;7120   	tempUL*=1000L;
0043a8  f44f727a          MOV      r2,#0x3e8
0043ac  fb01f102          MUL      r1,r1,r2
;;;7121   
;;;7122   
;;;7123   	if(tempUL_==0) tempUL=0;
0043b0  b168              CBZ      r0,|L1.17358|
;;;7124   	else tempUL/=tempUL_;
0043b2  fbb1f0f0          UDIV     r0,r1,r0
                  |L1.17334|
;;;7125   
;;;7126   	tempUL/=10L;
0043b6  f04f010a          MOV      r1,#0xa
0043ba  fbb0f0f1          UDIV     r0,r0,r1
;;;7127   
;;;7128   	bat[in]._zar=(unsigned short)tempUL;
0043be  8220              STRH     r0,[r4,#0x10]
;;;7129   
;;;7130   	if(BAT_TYPE==1)
0043c0  48cc              LDR      r0,|L1.18164|
0043c2  8800              LDRH     r0,[r0,#0]  ; BAT_TYPE
0043c4  2801              CMP      r0,#1
0043c6  e000              B        |L1.17354|
                  |L1.17352|
0043c8  e010              B        |L1.17388|
                  |L1.17354|
0043ca  d003              BEQ      |L1.17364|
0043cc  e008              B        |L1.17376|
                  |L1.17358|
0043ce  f04f0000          MOV      r0,#0                 ;7123
0043d2  e7f0              B        |L1.17334|
                  |L1.17364|
;;;7131   		{
;;;7132   		bat[in]._zar=lakb[in]._s_o_c;
0043d4  49c8              LDR      r1,|L1.18168|
0043d6  9802              LDR      r0,[sp,#8]
0043d8  eb010080          ADD      r0,r1,r0,LSL #2
0043dc  8a40              LDRH     r0,[r0,#0x12]
0043de  8220              STRH     r0,[r4,#0x10]
                  |L1.17376|
;;;7133   		}
;;;7134   	
;;;7135   	gran((signed short*)&bat[in]._zar,0,100);
0043e0  f1040010          ADD      r0,r4,#0x10
0043e4  2264              MOVS     r2,#0x64
0043e6  2100              MOVS     r1,#0
0043e8  f7fffffe          BL       gran
                  |L1.17388|
;;;7136        }
;;;7137   
;;;7138   
;;;7139   //Подсчет тока разряда батареи      
;;;7140   if(bat[in]._wrk==1)
0043ec  7ba0              LDRB     r0,[r4,#0xe]
0043ee  2801              CMP      r0,#1
0043f0  d113              BNE      |L1.17434|
;;;7141   	{
;;;7142   	if(bat[in]._Iintegr<36000)
0043f2  8ba0              LDRH     r0,[r4,#0x1c]
0043f4  4540              CMP      r0,r8
0043f6  d20f              BCS      |L1.17432|
;;;7143   		{          
;;;7144   		bat[in]._Iintegr+=abs(bat[in]._Ib);
0043f8  f9b40008          LDRSH    r0,[r4,#8]
0043fc  f7fffffe          BL       abs
004400  8ba1              LDRH     r1,[r4,#0x1c]
004402  4408              ADD      r0,r0,r1
004404  b280              UXTH     r0,r0
004406  83a0              STRH     r0,[r4,#0x1c]
;;;7145   		if(bat[in]._Iintegr>=36000)
004408  4540              CMP      r0,r8
00440a  d306              BCC      |L1.17434|
;;;7146   			{
;;;7147   			bat[in]._Iintegr=0;		//Счетчик десятков милиамперсекунд
00440c  83a7              STRH     r7,[r4,#0x1c]
;;;7148   			bat[in]._Iintegr_++;	//Счетчик сотен милиамперчасов
00440e  8be0              LDRH     r0,[r4,#0x1e]
004410  f1000001          ADD      r0,r0,#1
004414  83e0              STRH     r0,[r4,#0x1e]
004416  e000              B        |L1.17434|
                  |L1.17432|
;;;7149   			}
;;;7150   		}
;;;7151   	else 
;;;7152   		{
;;;7153   		bat[in]._Iintegr=0;
004418  83a7              STRH     r7,[r4,#0x1c]
                  |L1.17434|
;;;7154   		}	
;;;7155   	} 
;;;7156   	    
;;;7157   #ifdef UKU_220_IPS_TERMOKOMPENSAT
;;;7158   if((t_ext[0]>TBATSIGN)&&(!ND_EXT[0]))	
00441a  f8df92e0          LDR      r9,|L1.18172|
00441e  49b8              LDR      r1,|L1.18176|
004420  f8dfa2e0          LDR      r10,|L1.18180|
004424  f9b90000          LDRSH    r0,[r9,#0]  ; t_ext
004428  f9b11000          LDRSH    r1,[r1,#0]  ; TBATSIGN
00442c  4288              CMP      r0,r1
00442e  dd02              BLE      |L1.17462|
004430  f89a0000          LDRB     r0,[r10,#0]  ; ND_EXT
004434  b3e8              CBZ      r0,|L1.17586|
                  |L1.17462|
;;;7159   	{
;;;7160   	bat[in]._sign_temper_cnt++;
;;;7161   	}
;;;7162   else 
;;;7163   	{
;;;7164   	bat[in]._sign_temper_cnt--;
004436  f8b40040          LDRH     r0,[r4,#0x40]
00443a  f1a00001          SUB      r0,r0,#1
00443e  f8a40040          STRH     r0,[r4,#0x40]
                  |L1.17474|
;;;7165   	}
;;;7166   #else
;;;7167   if((bat[in]._Tb>TBATSIGN)&&(!bat[in]._nd))	
;;;7168   	{
;;;7169   	bat[in]._sign_temper_cnt++;
;;;7170   	}
;;;7171   else 
;;;7172   	{
;;;7173   	bat[in]._sign_temper_cnt--;
;;;7174   	}
;;;7175   #endif
;;;7176   gran(&bat[in]._sign_temper_cnt,0,600);
004442  f1040040          ADD      r0,r4,#0x40
004446  f44f7216          MOV      r2,#0x258
00444a  2100              MOVS     r1,#0
00444c  f7fffffe          BL       gran
;;;7177   if(bat[in]._sign_temper_cnt>=590)	bat[in]._temper_stat|=(1<<0);
004450  f9b40040          LDRSH    r0,[r4,#0x40]
004454  f240264e          MOV      r6,#0x24e
004458  42b0              CMP      r0,r6
00445a  db05              BLT      |L1.17512|
00445c  f894103f          LDRB     r1,[r4,#0x3f]
004460  f0410101          ORR      r1,r1,#1
004464  f884103f          STRB     r1,[r4,#0x3f]
                  |L1.17512|
;;;7178   if(bat[in]._sign_temper_cnt<=10)	bat[in]._temper_stat&=~(1<<0);
004468  280a              CMP      r0,#0xa
00446a  dc05              BGT      |L1.17528|
00446c  f894003f          LDRB     r0,[r4,#0x3f]
004470  f0200001          BIC      r0,r0,#1
004474  f884003f          STRB     r0,[r4,#0x3f]
                  |L1.17528|
;;;7179   
;;;7180   #ifdef UKU_220_IPS_TERMOKOMPENSAT
;;;7181   if((t_ext[0]>TBATMAX)&&(!ND_EXT[0]))	
004478  49a3              LDR      r1,|L1.18184|
00447a  f9b90000          LDRSH    r0,[r9,#0]  ; t_ext
00447e  f9b11000          LDRSH    r1,[r1,#0]  ; TBATMAX
004482  4288              CMP      r0,r1
004484  dd02              BLE      |L1.17548|
004486  f89a0000          LDRB     r0,[r10,#0]  ; ND_EXT
00448a  b3b0              CBZ      r0,|L1.17658|
                  |L1.17548|
;;;7182   	{
;;;7183   	bat[in]._max_temper_cnt++;
;;;7184   	}
;;;7185   else 
;;;7186   	{
;;;7187   	bat[in]._max_temper_cnt--;
00448c  f8b40042          LDRH     r0,[r4,#0x42]
004490  f1a00001          SUB      r0,r0,#1
004494  f8a40042          STRH     r0,[r4,#0x42]
                  |L1.17560|
;;;7188   	}
;;;7189   #else
;;;7190   if((bat[in]._Tb>TBATMAX)&&(!bat[in]._nd))	
;;;7191   	{
;;;7192   	bat[in]._max_temper_cnt++;
;;;7193   	}
;;;7194   else 
;;;7195   	{
;;;7196   	bat[in]._max_temper_cnt--;
;;;7197   	}
;;;7198   #endif
;;;7199   
;;;7200   gran(&bat[in]._max_temper_cnt,0,600);
004498  f44f7916          MOV      r9,#0x258
00449c  f1040042          ADD      r0,r4,#0x42
0044a0  464a              MOV      r2,r9
0044a2  2100              MOVS     r1,#0
0044a4  f7fffffe          BL       gran
;;;7201   if(bat[in]._max_temper_cnt>=590)	bat[in]._temper_stat|=(1<<1);
0044a8  f9b40042          LDRSH    r0,[r4,#0x42]
0044ac  42b0              CMP      r0,r6
0044ae  db07              BLT      |L1.17600|
0044b0  e000              B        |L1.17588|
                  |L1.17586|
0044b2  e023              B        |L1.17660|
                  |L1.17588|
0044b4  f894103f          LDRB     r1,[r4,#0x3f]
0044b8  f0410102          ORR      r1,r1,#2
0044bc  f884103f          STRB     r1,[r4,#0x3f]
                  |L1.17600|
;;;7202   if(bat[in]._max_temper_cnt<=10)	bat[in]._temper_stat&=~(1<<1);
0044c0  280a              CMP      r0,#0xa
0044c2  dc05              BGT      |L1.17616|
0044c4  f894003f          LDRB     r0,[r4,#0x3f]
0044c8  f0200002          BIC      r0,r0,#2
0044cc  f884003f          STRB     r0,[r4,#0x3f]
                  |L1.17616|
;;;7203   
;;;7204   
;;;7205   
;;;7206   //Подсчет наработки батареи
;;;7207   if(bat[in]._resurs_cnt<36000)
0044d0  6c60              LDR      r0,[r4,#0x44]
0044d2  4540              CMP      r0,r8
0044d4  da20              BGE      |L1.17688|
;;;7208   	{               
;;;7209   	bat[in]._resurs_cnt++;
0044d6  f1000001          ADD      r0,r0,#1
0044da  6460              STR      r0,[r4,#0x44]
;;;7210   	if(bat[in]._resurs_cnt>=36000)
0044dc  4540              CMP      r0,r8
0044de  db1c              BLT      |L1.17690|
;;;7211   		{
;;;7212   		bat[in]._resurs_cnt=0;
0044e0  6467              STR      r7,[r4,#0x44]
;;;7213   		lc640_write_int(ADR_EE_BAT_RESURS[in],lc640_read_int(ADR_EE_BAT_RESURS[in])+1);
0044e2  4e8a              LDR      r6,|L1.18188|
0044e4  f8360015          LDRH     r0,[r6,r5,LSL #1]
0044e8  f7fffffe          BL       lc640_read_int
0044ec  1c40              ADDS     r0,r0,#1
0044ee  b201              SXTH     r1,r0
0044f0  f9360015          LDRSH    r0,[r6,r5,LSL #1]
0044f4  f7fffffe          BL       lc640_write_int
0044f8  e00f              B        |L1.17690|
                  |L1.17658|
0044fa  e006              B        |L1.17674|
                  |L1.17660|
0044fc  f8b40040          LDRH     r0,[r4,#0x40]         ;7160
004500  f1000001          ADD      r0,r0,#1              ;7160
004504  f8a40040          STRH     r0,[r4,#0x40]         ;7160
004508  e79b              B        |L1.17474|
                  |L1.17674|
00450a  f8b40042          LDRH     r0,[r4,#0x42]         ;7183
00450e  f1000001          ADD      r0,r0,#1              ;7183
004512  f8a40042          STRH     r0,[r4,#0x42]         ;7183
004516  e7bf              B        |L1.17560|
                  |L1.17688|
;;;7214   		}
;;;7215   	}
;;;7216   else bat[in]._resurs_cnt=0;
004518  6467              STR      r7,[r4,#0x44]
                  |L1.17690|
;;;7217   
;;;7218   
;;;7219   #ifndef UKU_220_V2
;;;7220   #ifndef UKU_GLONASS
;;;7221   #ifndef UKU_6U
;;;7222   //#ifndef UKU_220
;;;7223   if(UBM_AV)
00451a  4e7d              LDR      r6,|L1.18192|
00451c  8830              LDRH     r0,[r6,#0]  ; UBM_AV
00451e  2800              CMP      r0,#0
004520  d05e              BEQ      |L1.17888|
;;;7224        {
;;;7225        signed short temp_SS;
;;;7226   #ifdef UKU_220
;;;7227   temp_SS=bat[in]._Ub/2;
;;;7228   #else
;;;7229        if(U0B<600)
004522  487c              LDR      r0,|L1.18196|
004524  f9b00000          LDRSH    r0,[r0,#0]  ; U0B
004528  4548              CMP      r0,r9
00452a  da08              BGE      |L1.17726|
;;;7230             {
;;;7231             temp_SS=bat[in]._Ub/4;
00452c  f9b40002          LDRSH    r0,[r4,#2]
004530  ea4f71e0          ASR      r1,r0,#31
004534  eb007091          ADD      r0,r0,r1,LSR #30
004538  ea4f00a0          ASR      r0,r0,#2
00453c  e006              B        |L1.17740|
                  |L1.17726|
;;;7232             }
;;;7233        else temp_SS=bat[in]._Ub/5;
00453e  f9b40002          LDRSH    r0,[r4,#2]
004542  f04f0105          MOV      r1,#5
004546  fb90f0f1          SDIV     r0,r0,r1
00454a  b200              SXTH     r0,r0
                  |L1.17740|
;;;7234   	
;;;7235   	temp_SS+=temp_SS;     
00454c  ea4f0040          LSL      r0,r0,#1
;;;7236   #endif
;;;7237        temp_SS-=(bat[in]._Ubm);
004550  88a1              LDRH     r1,[r4,#4]
004552  eba00001          SUB      r0,r0,r1
004556  b200              SXTH     r0,r0
;;;7238   
;;;7239        temp_SS=abs(temp_SS);
004558  f7fffffe          BL       abs
;;;7240   
;;;7241        temp_SS*=10;
00455c  eb000080          ADD      r0,r0,r0,LSL #2
004560  ea4f0040          LSL      r0,r0,#1
004564  b200              SXTH     r0,r0
;;;7242   
;;;7243        temp_SS/=12;
004566  f04f010c          MOV      r1,#0xc
00456a  fb90f0f1          SDIV     r0,r0,r1
00456e  b200              SXTH     r0,r0
;;;7244   
;;;7245        bat[in]._dUbm=temp_SS;
004570  80e0              STRH     r0,[r4,#6]
;;;7246   
;;;7247   
;;;7248        if(	(bat[in]._dUbm>UBM_AV) &&
004572  f9b61000          LDRSH    r1,[r6,#0]  ; UBM_AV
004576  4288              CMP      r0,r1
004578  dd34              BLE      |L1.17892|
;;;7249   		(abs(bat[in]._Ib)<(5*IKB)) &&
00457a  f9b40008          LDRSH    r0,[r4,#8]
00457e  f7fffffe          BL       abs
004582  4601              MOV      r1,r0
004584  4864              LDR      r0,|L1.18200|
004586  f9b00000          LDRSH    r0,[r0,#0]  ; IKB
00458a  eb000080          ADD      r0,r0,r0,LSL #2
00458e  4281              CMP      r1,r0
004590  da28              BGE      |L1.17892|
;;;7250   		(bat[in]._Ub>((short)(((long)USIGN*115)/100))) &&
004592  4862              LDR      r0,|L1.18204|
004594  2173              MOVS     r1,#0x73
004596  f9b00000          LDRSH    r0,[r0,#0]  ; USIGN
00459a  4348              MULS     r0,r1,r0
00459c  fb90f0fb          SDIV     r0,r0,r11
0045a0  f9b41002          LDRSH    r1,[r4,#2]
0045a4  b200              SXTH     r0,r0
0045a6  4288              CMP      r0,r1
0045a8  da1c              BGE      |L1.17892|
;;;7251   		(!(bat[in]._av & 2))  )
0045aa  f894003d          LDRB     r0,[r4,#0x3d]
0045ae  0780              LSLS     r0,r0,#30
0045b0  d418              BMI      |L1.17892|
;;;7252   		{
;;;7253   		bat[in]._cnt_as++;
0045b2  f8b40048          LDRH     r0,[r4,#0x48]
0045b6  f1000001          ADD      r0,r0,#1
0045ba  b200              SXTH     r0,r0
0045bc  f8a40048          STRH     r0,[r4,#0x48]
;;;7254   		if(bat[in]._cnt_as==3000)
0045c0  f5a06130          SUB      r1,r0,#0xb00
0045c4  39b8              SUBS     r1,r1,#0xb8
0045c6  d103              BNE      |L1.17872|
;;;7255   			{
;;;7256   			avar_bat_as_hndl(in,1);
0045c8  2101              MOVS     r1,#1
0045ca  4628              MOV      r0,r5
0045cc  f7fffffe          BL       avar_bat_as_hndl
                  |L1.17872|
;;;7257   			}
;;;7258   		if(bat[in]._cnt_as>=3005) bat[in]._cnt_as=3005;
0045d0  f9b41048          LDRSH    r1,[r4,#0x48]
0045d4  f64030bd          MOV      r0,#0xbbd
0045d8  4281              CMP      r1,r0
0045da  db01              BLT      |L1.17888|
0045dc  f8a40048          STRH     r0,[r4,#0x48]
                  |L1.17888|
;;;7259   		}
;;;7260   	else 
;;;7261   		{
;;;7262   		bat[in]._cnt_as=0;
;;;7263   		}
;;;7264        
;;;7265        }
;;;7266   #endif 
;;;7267   #endif 
;;;7268   #endif
;;;7269   
;;;7270   }
0045e0  e8bd8ffe          POP      {r1-r11,pc}
                  |L1.17892|
0045e4  f8a47048          STRH     r7,[r4,#0x48]         ;7262
0045e8  e7fa              B        |L1.17888|
;;;7271   
                          ENDP

                  bat_hndl_zvu PROC
;;;7273   //-----------------------------------------------
;;;7274   void bat_hndl_zvu(void)
0045ea  e92d4ff0          PUSH     {r4-r11,lr}
;;;7275   {
0045ee  b089              SUB      sp,sp,#0x24
;;;7276   char i;
;;;7277   short bat_hndl_i_temp;
;;;7278   const long bat_hndl_t_razr_const[7]={600L,1800L,3600L,10800L,18000L,36000L,72000L};
0045f0  f04f021c          MOV      r2,#0x1c
0045f4  494a              LDR      r1,|L1.18208|
0045f6  4668              MOV      r0,sp
0045f8  f7fffffe          BL       __aeabi_memcpy4
;;;7279   
;;;7280   //Ib_ips_termokompensat=-17000;
;;;7281    
;;;7282   if(bat_hndl_zvu_init==0)
0045fc  4c49              LDR      r4,|L1.18212|
;;;7283   	{
;;;7284   	//Инициализация при включении системы
;;;7285   	bat_hndl_zvu_Q=(long)lc640_read_int(EE_BAT1_ZAR_CNT);
;;;7286   	if((bat_hndl_zvu_Q>100L)||(bat_hndl_zvu_Q<0L)) bat_hndl_zvu_Q=100L;
0045fe  2564              MOVS     r5,#0x64
;;;7287   	bat_hndl_zvu_Q*=10000L;
;;;7288   
;;;7289   	bat_hndl_zvu_init=1;
;;;7290   	}
;;;7291   else 
;;;7292   	{
;;;7293   	if(Ib_ips_termokompensat<-IKB)
;;;7294   		{
;;;7295   		bat_hndl_i_vector=0;
;;;7296   		bat_hndl_i_zar_price=0L;
;;;7297   			
;;;7298   		bat_hndl_i=-Ib_ips_termokompensat;
;;;7299   		I_from_t_table[0]=BAT_C_POINT_1_6*6; //Ток при котором батарея разрядится за 1/6 часа (0.1А)
;;;7300   		I_from_t_table[1]=BAT_C_POINT_1_2*2; //Ток при котором батарея разрядится за 1/2 часа (0.1А)
;;;7301   		I_from_t_table[2]=BAT_C_POINT_1; //Ток при котором батарея разрядится за 1 час (0.1А)
;;;7302   		I_from_t_table[3]=BAT_C_POINT_3/3; //Ток при котором батарея разрядится за 3 часа (0.1А)
;;;7303   		I_from_t_table[4]=BAT_C_POINT_5/5; //Ток при котором батарея разрядится за 5 часов (0.1А)
;;;7304   		I_from_t_table[5]=BAT_C_POINT_10/10; //Ток при котором батарея разрядится за 10 часов (0.1А)
;;;7305   		I_from_t_table[6]=BAT_C_POINT_20/20; //Ток при котором батарея разрядится за 20 часов (0.1А)
;;;7306   		
;;;7307   		I_from_t_table[0]=(short)((((long)I_from_t_table[0])*((long)BAT_K_OLD))/100L);
;;;7308   		I_from_t_table[1]=(short)((((long)I_from_t_table[1])*((long)BAT_K_OLD))/100L);
;;;7309   		I_from_t_table[2]=(short)((((long)I_from_t_table[2])*((long)BAT_K_OLD))/100L);
;;;7310   		I_from_t_table[3]=(short)((((long)I_from_t_table[3])*((long)BAT_K_OLD))/100L);
;;;7311   		I_from_t_table[4]=(short)((((long)I_from_t_table[4])*((long)BAT_K_OLD))/100L);
;;;7312   		I_from_t_table[5]=(short)((((long)I_from_t_table[5])*((long)BAT_K_OLD))/100L);
;;;7313   		I_from_t_table[6]=(short)((((long)I_from_t_table[6])*((long)BAT_K_OLD))/100L);
;;;7314   
;;;7315   		bat_hndl_i_temp=bat_hndl_i/10;
;;;7316   		for(i=0;i<7;i++)
;;;7317   			{
;;;7318   			if(bat_hndl_i_temp>=I_from_t_table[i])
;;;7319   				{
;;;7320   				break;
;;;7321   				}
;;;7322   			}
;;;7323   		 if(i==0) bat_hndl_t_razr=bat_hndl_t_razr_const[0];
;;;7324   		 else if((i>=1)&&(i<7))
;;;7325   		 	{
;;;7326   			short i1,i2;
;;;7327   			i1=I_from_t_table[i-1]-bat_hndl_i_temp;
;;;7328   			i2=I_from_t_table[i-1]-I_from_t_table[i];
;;;7329   			bat_hndl_t_razr=bat_hndl_t_razr_const[i]-bat_hndl_t_razr_const[i-1];
;;;7330   			bat_hndl_t_razr*=(long)i1;
;;;7331   			bat_hndl_t_razr/=(long)i2;
;;;7332   			bat_hndl_t_razr+=bat_hndl_t_razr_const[i-1];
;;;7333   			}
;;;7334   		else if(i>=7)
;;;7335   			{
;;;7336   			bat_hndl_t_razr=bat_hndl_t_razr_const[6];
;;;7337   			}
;;;7338   		bat_hndl_proc_razr=1000000L/bat_hndl_t_razr;
004600  f8df8124          LDR      r8,|L1.18216|
004604  7860              LDRB     r0,[r4,#1]            ;7282  ; bat_hndl_zvu_init
004606  2700              MOVS     r7,#0                 ;7282
004608  f04f0901          MOV      r9,#1                 ;7289
00460c  f1040680          ADD      r6,r4,#0x80           ;7285
004610  2800              CMP      r0,#0                 ;7282
004612  d065              BEQ      |L1.18144|
004614  4940              LDR      r1,|L1.18200|
004616  4845              LDR      r0,|L1.18220|
004618  f9b12000          LDRSH    r2,[r1,#0]            ;7293  ; IKB
00461c  4631              MOV      r1,r6                 ;7285
00461e  f9b00000          LDRSH    r0,[r0,#0]            ;7293  ; Ib_ips_termokompensat
004622  4253              RSBS     r3,r2,#0              ;7293
004624  6d09              LDR      r1,[r1,#0x50]         ;7285
004626  4298              CMP      r0,r3                 ;7293
004628  da5b              BGE      |L1.18146|
00462a  70e7              STRB     r7,[r4,#3]            ;7295
00462c  60f7              STR      r7,[r6,#0xc]          ;7296  ; bat_hndl_i_zar_price
00462e  f1c00000          RSB      r0,r0,#0              ;7298
004632  b200              SXTH     r0,r0                 ;7298
004634  f8a4007e          STRH     r0,[r4,#0x7e]         ;7298
004638  9008              STR      r0,[sp,#0x20]         ;7298
00463a  483d              LDR      r0,|L1.18224|
00463c  4a3d              LDR      r2,|L1.18228|
00463e  8800              LDRH     r0,[r0,#0]            ;7299  ; BAT_C_POINT_1_6
004640  eb000040          ADD      r0,r0,r0,LSL #1       ;7299
004644  ea4f0040          LSL      r0,r0,#1              ;7299
004648  fa0ffb80          SXTH     r11,r0                ;7299
00464c  483a              LDR      r0,|L1.18232|
00464e  8800              LDRH     r0,[r0,#0]            ;7300  ; BAT_C_POINT_1_2
004650  ea4f0040          LSL      r0,r0,#1              ;7300
004654  b203              SXTH     r3,r0                 ;7300
004656  4839              LDR      r0,|L1.18236|
004658  f9b0c000          LDRSH    r12,[r0,#0]           ;7301  ; BAT_C_POINT_1
00465c  4838              LDR      r0,|L1.18240|
00465e  f04f0903          MOV      r9,#3                 ;7302
004662  f9b00000          LDRSH    r0,[r0,#0]            ;7302  ; BAT_C_POINT_3
004666  fb90f0f9          SDIV     r0,r0,r9              ;7302
00466a  b200              SXTH     r0,r0                 ;7302
00466c  9007              STR      r0,[sp,#0x1c]         ;7302
00466e  4835              LDR      r0,|L1.18244|
004670  f04f0905          MOV      r9,#5                 ;7303
004674  f9b00000          LDRSH    r0,[r0,#0]            ;7303  ; BAT_C_POINT_5
004678  fb90f0f9          SDIV     r0,r0,r9              ;7303
00467c  fa0ff980          SXTH     r9,r0                 ;7303
004680  4831              LDR      r0,|L1.18248|
004682  f9b0a000          LDRSH    r10,[r0,#0]           ;7304  ; BAT_C_POINT_10
004686  f04f000a          MOV      r0,#0xa               ;7304
00468a  fb9af0f0          SDIV     r0,r10,r0             ;7304
00468e  fa0ffe80          SXTH     lr,r0                 ;7304
004692  482e              LDR      r0,|L1.18252|
004694  f04f0a14          MOV      r10,#0x14             ;7305
004698  f9b00000          LDRSH    r0,[r0,#0]            ;7305  ; BAT_C_POINT_20
00469c  fb90f0fa          SDIV     r0,r0,r10             ;7305
0046a0  fa0ffa80          SXTH     r10,r0                ;7305
0046a4  482a              LDR      r0,|L1.18256|
0046a6  f9b00000          LDRSH    r0,[r0,#0]            ;7307  ; BAT_K_OLD
0046aa  fb0bfb00          MUL      r11,r11,r0            ;7307
0046ae  fb9bfbf5          SDIV     r11,r11,r5            ;7307
0046b2  f8a2b000          STRH     r11,[r2,#0]           ;7307
0046b6  fb03f300          MUL      r3,r3,r0              ;7308
0046ba  fb93f3f5          SDIV     r3,r3,r5              ;7308
0046be  8053              STRH     r3,[r2,#2]            ;7308
0046c0  fb0cfc00          MUL      r12,r12,r0            ;7309
0046c4  fb9cf3f5          SDIV     r3,r12,r5             ;7309
0046c8  8093              STRH     r3,[r2,#4]            ;7309
0046ca  9b07              LDR      r3,[sp,#0x1c]         ;7310
0046cc  fb03f300          MUL      r3,r3,r0              ;7310
0046d0  fb93f3f5          SDIV     r3,r3,r5              ;7310
0046d4  80d3              STRH     r3,[r2,#6]            ;7310
0046d6  fb09f900          MUL      r9,r9,r0              ;7311
0046da  fb99f3f5          SDIV     r3,r9,r5              ;7311
0046de  e039              B        |L1.18260|
                  |L1.18144|
0046e0  e070              B        |L1.18372|
                  |L1.18146|
0046e2  e0a4              B        |L1.18478|
                  |L1.18148|
                          DCD      ADR_EE_BAT_ZAR_CNT
                  |L1.18152|
                          DCD      BAT_C_REAL
                  |L1.18156|
                          DCD      BAT_C_NOM
                  |L1.18160|
                          DCD      0xffff7360
                  |L1.18164|
                          DCD      BAT_TYPE
                  |L1.18168|
                          DCD      lakb
                  |L1.18172|
                          DCD      t_ext
                  |L1.18176|
                          DCD      TBATSIGN
                  |L1.18180|
                          DCD      ND_EXT
                  |L1.18184|
                          DCD      TBATMAX
                  |L1.18188|
                          DCD      ADR_EE_BAT_RESURS
                  |L1.18192|
                          DCD      UBM_AV
                  |L1.18196|
                          DCD      U0B
                  |L1.18200|
                          DCD      IKB
                  |L1.18204|
                          DCD      USIGN
                  |L1.18208|
                          DCD      ||area_number.19||+0x20
                  |L1.18212|
                          DCD      ||area_number.25||
                  |L1.18216|
                          DCD      0x000f4240
                  |L1.18220|
                          DCD      Ib_ips_termokompensat
                  |L1.18224|
                          DCD      BAT_C_POINT_1_6
                  |L1.18228|
                          DCD      ||.bss||+0x44c
                  |L1.18232|
                          DCD      BAT_C_POINT_1_2
                  |L1.18236|
                          DCD      BAT_C_POINT_1
                  |L1.18240|
                          DCD      BAT_C_POINT_3
                  |L1.18244|
                          DCD      BAT_C_POINT_5
                  |L1.18248|
                          DCD      BAT_C_POINT_10
                  |L1.18252|
                          DCD      BAT_C_POINT_20
                  |L1.18256|
                          DCD      BAT_K_OLD
                  |L1.18260|
004754  8113              STRH     r3,[r2,#8]            ;7311
004756  fb0efe00          MUL      lr,lr,r0              ;7312
00475a  fb9ef3f5          SDIV     r3,lr,r5              ;7312
00475e  8153              STRH     r3,[r2,#0xa]          ;7312
004760  fb0afa00          MUL      r10,r10,r0            ;7313
004764  fb9af0f5          SDIV     r0,r10,r5             ;7313
004768  8190              STRH     r0,[r2,#0xc]          ;7313
00476a  9808              LDR      r0,[sp,#0x20]         ;7315
00476c  f04f030a          MOV      r3,#0xa               ;7315
004770  fb90f0f3          SDIV     r0,r0,r3              ;7315
004774  b203              SXTH     r3,r0                 ;7315
004776  f04f0000          MOV      r0,#0                 ;7316
                  |L1.18298|
00477a  f9325010          LDRSH    r5,[r2,r0,LSL #1]     ;7318
00477e  429d              CMP      r5,r3                 ;7318
004780  dd04              BLE      |L1.18316|
004782  f1000001          ADD      r0,r0,#1              ;7316
004786  b2c0              UXTB     r0,r0                 ;7316
004788  2807              CMP      r0,#7                 ;7316
00478a  d3f6              BCC      |L1.18298|
                  |L1.18316|
00478c  b358              CBZ      r0,|L1.18406|
00478e  1e45              SUBS     r5,r0,#1              ;7324
004790  2d06              CMP      r5,#6                 ;7324
004792  d22b              BCS      |L1.18412|
004794  f832c015          LDRH     r12,[r2,r5,LSL #1]    ;7327
004798  ebac0303          SUB      r3,r12,r3             ;7327
00479c  b21b              SXTH     r3,r3                 ;7327
00479e  f8322010          LDRH     r2,[r2,r0,LSL #1]     ;7328
0047a2  ebac0202          SUB      r2,r12,r2             ;7328
0047a6  fa0ffc82          SXTH     r12,r2                ;7328
0047aa  f85d9020          LDR      r9,[sp,r0,LSL #2]     ;7329
0047ae  f85d0025          LDR      r0,[sp,r5,LSL #2]     ;7329
0047b2  eba90200          SUB      r2,r9,r0              ;7329
0047b6  fb02f203          MUL      r2,r2,r3              ;7330
0047ba  fb92f2fc          SDIV     r2,r2,r12             ;7331
0047be  4410              ADD      r0,r0,r2              ;7332
0047c0  64b0              STR      r0,[r6,#0x48]         ;7332  ; bat_hndl_t_razr
0047c2  e017              B        |L1.18420|
                  |L1.18372|
0047c4  f44f70ef          MOV      r0,#0x1de             ;7285
0047c8  f7fffffe          BL       lc640_read_int
0047cc  6530              STR      r0,[r6,#0x50]         ;7285  ; bat_hndl_zvu_Q
0047ce  2865              CMP      r0,#0x65              ;7286
0047d0  d300              BCC      |L1.18388|
0047d2  6535              STR      r5,[r6,#0x50]         ;7286  ; bat_hndl_zvu_Q
                  |L1.18388|
0047d4  6d30              LDR      r0,[r6,#0x50]         ;7287  ; bat_hndl_zvu_Q
0047d6  f2427110          MOV      r1,#0x2710            ;7287
0047da  fb00f001          MUL      r0,r0,r1              ;7287
0047de  6530              STR      r0,[r6,#0x50]         ;7287  ; bat_hndl_zvu_Q
0047e0  f8849001          STRB     r9,[r4,#1]            ;7289
0047e4  e067              B        |L1.18614|
                  |L1.18406|
0047e6  9800              LDR      r0,[sp,#0]            ;7323
0047e8  64b0              STR      r0,[r6,#0x48]         ;7323  ; bat_hndl_t_razr
0047ea  e003              B        |L1.18420|
                  |L1.18412|
0047ec  2807              CMP      r0,#7                 ;7334
0047ee  d301              BCC      |L1.18420|
0047f0  9806              LDR      r0,[sp,#0x18]         ;7336
0047f2  64b0              STR      r0,[r6,#0x48]         ;7336  ; bat_hndl_t_razr
                  |L1.18420|
0047f4  6cb0              LDR      r0,[r6,#0x48]  ; bat_hndl_t_razr
0047f6  fb98f0f0          SDIV     r0,r8,r0
0047fa  6570              STR      r0,[r6,#0x54]  ; bat_hndl_proc_razr
;;;7339   
;;;7340   		if(bat_hndl_zvu_Q>bat_hndl_proc_razr)bat_hndl_zvu_Q-=bat_hndl_proc_razr;
0047fc  4281              CMP      r1,r0
0047fe  dd03              BLE      |L1.18440|
004800  eba10000          SUB      r0,r1,r0
004804  6530              STR      r0,[r6,#0x50]  ; bat_hndl_zvu_Q
004806  e000              B        |L1.18442|
                  |L1.18440|
;;;7341   		else bat_hndl_zvu_Q=0L;
004808  6537              STR      r7,[r6,#0x50]  ; bat_hndl_zvu_Q
                  |L1.18442|
;;;7342   
;;;7343   		bat_hndl_t_razr_hour=(short)(bat_hndl_remain_time/3600L);
00480a  6db1              LDR      r1,[r6,#0x58]  ; bat_hndl_remain_time
00480c  f44f6061          MOV      r0,#0xe10
004810  fb91f0f0          SDIV     r0,r1,r0
004814  8030              STRH     r0,[r6,#0]
;;;7344   		bat_hndl_t_razr_min=(short)(bat_hndl_remain_time/60L);
004816  f04f003c          MOV      r0,#0x3c
00481a  fb91f1f0          SDIV     r1,r1,r0
00481e  b209              SXTH     r1,r1
004820  8071              STRH     r1,[r6,#2]
;;;7345   		bat_hndl_t_razr_mininhour=bat_hndl_t_razr_min%60L;
004822  fb91f2f0          SDIV     r2,r1,r0
004826  fb001012          MLS      r0,r0,r2,r1
00482a  80b0              STRH     r0,[r6,#4]
00482c  e017              B        |L1.18526|
                  |L1.18478|
;;;7346   
;;;7347   		}
;;;7348   	else if(Ib_ips_termokompensat>IKB)
00482e  4290              CMP      r0,r2
004830  dd15              BLE      |L1.18526|
;;;7349   		{
;;;7350   		bat_hndl_i_vector=1;
004832  f8849003          STRB     r9,[r4,#3]
;;;7351   
;;;7352   		bat_hndl_i=Ib_ips_termokompensat;
004836  f8a4007e          STRH     r0,[r4,#0x7e]
;;;7353   		bat_hndl_i_summ+=(long)bat_hndl_i;
00483a  6e32              LDR      r2,[r6,#0x60]  ; bat_hndl_i_summ
00483c  4410              ADD      r0,r0,r2
00483e  6630              STR      r0,[r6,#0x60]  ; bat_hndl_i_summ
;;;7354   		if(bat_hndl_i_summ>=36000L)
004840  f64842a0          MOV      r2,#0x8ca0
004844  4290              CMP      r0,r2
004846  db0a              BLT      |L1.18526|
;;;7355   
;;;7356   		//bat_hndl_t_razr=BAT_C_POINT_20*36000L/bat_hndl_i;
;;;7357   		//bat_hndl_proc_razr=1000000L/bat_hndl_t_razr;
;;;7358   			{
;;;7359   			bat_hndl_i_summ-=36000L;
004848  eba00002          SUB      r0,r0,r2
00484c  6630              STR      r0,[r6,#0x60]  ; bat_hndl_i_summ
;;;7360   			if(bat_hndl_zvu_Q<1000000L)bat_hndl_zvu_Q+=bat_hndl_i_zar_price;
00484e  4541              CMP      r1,r8
004850  da03              BGE      |L1.18522|
004852  68f0              LDR      r0,[r6,#0xc]  ; bat_hndl_i_zar_price
004854  4408              ADD      r0,r0,r1
004856  6530              STR      r0,[r6,#0x50]  ; bat_hndl_zvu_Q
004858  e001              B        |L1.18526|
                  |L1.18522|
;;;7361   			else bat_hndl_zvu_Q=1000000L; 
00485a  f8c68050          STR      r8,[r6,#0x50]  ; bat_hndl_zvu_Q
                  |L1.18526|
;;;7362   			}
;;;7363   		}
;;;7364   
;;;7365   
;;;7366   	if(bat_hndl_i_vector!=bat_hndl_i_vector_old)
00485e  78e0              LDRB     r0,[r4,#3]  ; bat_hndl_i_vector
004860  7921              LDRB     r1,[r4,#4]  ; bat_hndl_i_vector_old
004862  4288              CMP      r0,r1
004864  d00d              BEQ      |L1.18562|
;;;7367   		{
;;;7368   		if(bat_hndl_i_vector==1)
004866  2801              CMP      r0,#1
004868  d10b              BNE      |L1.18562|
;;;7369   			{
;;;7370   			signed short tempSS;
;;;7371   			tempSS=lc640_read_int(EE_AMPER_CHAS_CNT);
00486a  f44f70e4          MOV      r0,#0x1c8
00486e  f7fffffe          BL       lc640_read_int
004872  b200              SXTH     r0,r0
;;;7372   			bat_hndl_i_zar_price=(bat_hndl_zvu_Q-1000000L)/((long)tempSS);
004874  4aff              LDR      r2,|L1.19572|
004876  6d31              LDR      r1,[r6,#0x50]  ; bat_hndl_zvu_Q
004878  4411              ADD      r1,r1,r2
00487a  fb91f0f0          SDIV     r0,r1,r0
00487e  60f0              STR      r0,[r6,#0xc]  ; bat_hndl_i_zar_price
;;;7373   			bat_hndl_i_summ=0;
004880  6637              STR      r7,[r6,#0x60]  ; bat_hndl_i_summ
                  |L1.18562|
;;;7374   			}
;;;7375   		}
;;;7376   	bat_hndl_i_vector_old=bat_hndl_i_vector;
004882  78e0              LDRB     r0,[r4,#3]  ; bat_hndl_i_vector
004884  7120              STRB     r0,[r4,#4]
;;;7377   
;;;7378   	if((bat_hndl_zvu_Q/10000L)!=lc640_read_int(EE_BAT1_ZAR_CNT)) lc640_write_int(EE_BAT1_ZAR_CNT,bat_hndl_zvu_Q/10000L);
004886  6d30              LDR      r0,[r6,#0x50]  ; bat_hndl_zvu_Q
004888  f2427a10          MOV      r10,#0x2710
00488c  fb90f5fa          SDIV     r5,r0,r10
004890  f44f79ef          MOV      r9,#0x1de
004894  4648              MOV      r0,r9
004896  f7fffffe          BL       lc640_read_int
00489a  4285              CMP      r5,r0
00489c  d006              BEQ      |L1.18604|
00489e  6d30              LDR      r0,[r6,#0x50]  ; bat_hndl_zvu_Q
0048a0  fb90f0fa          SDIV     r0,r0,r10
0048a4  b201              SXTH     r1,r0
0048a6  4648              MOV      r0,r9
0048a8  f7fffffe          BL       lc640_write_int
                  |L1.18604|
;;;7379   	bat_hndl_remain_time=bat_hndl_zvu_Q/bat_hndl_proc_razr;
0048ac  e9d60114          LDRD     r0,r1,[r6,#0x50]
0048b0  fb90f0f1          SDIV     r0,r0,r1
0048b4  65b0              STR      r0,[r6,#0x58]  ; bat_hndl_remain_time
                  |L1.18614|
;;;7380   	}
;;;7381   
;;;7382   
;;;7383   
;;;7384   if((Ib_ips_termokompensat/10<(2*IKB))&&(Ib_ips_termokompensat/10>(-2*IKB))&&(!(bat[0]._av&0x01))&& (out_U<=u_necc_up) && (out_U>u_necc_dn) && (main_kb_cnt>=10) && (main_kb_cnt<=200) /*(main_kb_cnt==((TBAT*60)-10))*//*&& ((TVENTMAX!=0))*/ )
0048b6  48f0              LDR      r0,|L1.19576|
0048b8  f9b01000          LDRSH    r1,[r0,#0]  ; Ib_ips_termokompensat
0048bc  200a              MOVS     r0,#0xa
0048be  fb91f0f0          SDIV     r0,r1,r0
0048c2  49ee              LDR      r1,|L1.19580|
0048c4  f9b11000          LDRSH    r1,[r1,#0]  ; IKB
0048c8  ebb00f41          CMP      r0,r1,LSL #1
0048cc  da30              BGE      |L1.18736|
0048ce  4249              RSBS     r1,r1,#0
0048d0  ebb00f41          CMP      r0,r1,LSL #1
0048d4  dd2c              BLE      |L1.18736|
0048d6  48ea              LDR      r0,|L1.19584|
0048d8  f890003d          LDRB     r0,[r0,#0x3d]  ; bat
0048dc  07c0              LSLS     r0,r0,#31
0048de  d127              BNE      |L1.18736|
0048e0  48e8              LDR      r0,|L1.19588|
0048e2  49e9              LDR      r1,|L1.19592|
0048e4  f9b00000          LDRSH    r0,[r0,#0]  ; out_U
0048e8  f9b11000          LDRSH    r1,[r1,#0]  ; u_necc_up
0048ec  4288              CMP      r0,r1
0048ee  dc1f              BGT      |L1.18736|
0048f0  49e6              LDR      r1,|L1.19596|
0048f2  f9b11000          LDRSH    r1,[r1,#0]  ; u_necc_dn
0048f6  4288              CMP      r0,r1
0048f8  dd1a              BLE      |L1.18736|
0048fa  f9b4004c          LDRSH    r0,[r4,#0x4c]  ; main_kb_cnt
0048fe  280a              CMP      r0,#0xa
004900  db16              BLT      |L1.18736|
004902  28c8              CMP      r0,#0xc8
004904  dc14              BGT      |L1.18736|
;;;7385   	{
;;;7386   	if(bat_hndl_zvu_Q_cnt<60)
004906  f894002b          LDRB     r0,[r4,#0x2b]  ; bat_hndl_zvu_Q_cnt
00490a  283c              CMP      r0,#0x3c
00490c  d20d              BCS      |L1.18730|
;;;7387   		{
;;;7388   		bat_hndl_zvu_Q_cnt++;
00490e  f1000001          ADD      r0,r0,#1
004912  b2c0              UXTB     r0,r0
004914  f884002b          STRB     r0,[r4,#0x2b]
;;;7389   		if(bat_hndl_zvu_Q_cnt>=60)
004918  283c              CMP      r0,#0x3c
00491a  d306              BCC      |L1.18730|
;;;7390   			{
;;;7391   			lc640_write_int(EE_BAT1_ZAR_CNT,100);
00491c  2164              MOVS     r1,#0x64
00491e  f44f70ef          MOV      r0,#0x1de
004922  f7fffffe          BL       lc640_write_int
;;;7392   			bat_hndl_zvu_Q=1000000L;
004926  f8c68050          STR      r8,[r6,#0x50]  ; bat_hndl_zvu_Q
                  |L1.18730|
;;;7393   
;;;7394   
;;;7395   			}
;;;7396   		}
;;;7397   	}
;;;7398   else 
;;;7399   	{
;;;7400   	bat_hndl_zvu_Q_cnt=0;
;;;7401   	}
;;;7402   
;;;7403   
;;;7404   
;;;7405   };
00492a  b009              ADD      sp,sp,#0x24
00492c  e8bd8ff0          POP      {r4-r11,pc}
                  |L1.18736|
004930  f884702b          STRB     r7,[r4,#0x2b]         ;7400
004934  e7f9              B        |L1.18730|
;;;7406   #endif
                          ENDP

                  u_avt_set_hndl PROC
;;;7410   //Установка напряжения автономной работы в полуавтоматическом режиме
;;;7411   void u_avt_set_hndl(void)
004936  e92d5fff          PUSH     {r0-r12,lr}
;;;7412   {
;;;7413   if(uavt_set_stat==uassSTEP1)
00493a  4dd5              LDR      r5,|L1.19600|
;;;7414   	{
;;;7415   	char i,find_succes;
;;;7416   
;;;7417   	//u_max_temp=U_AVT+10;//(short)((((long)U_AVT)*101U)/100U);
;;;7418   	//u_min_temp=U_AVT-10;//(short)((((long)U_AVT)*99U)/100U);
;;;7419   	if(uavt_set_stat_old!=uavt_set_stat)
;;;7420   		{
;;;7421   		uavt_set_error_cnt=60;
00493c  4ed5              LDR      r6,|L1.19604|
00493e  f8df8358          LDR      r8,|L1.19608|
004942  7828              LDRB     r0,[r5,#0]            ;7413  ; uavt_set_stat
;;;7422   		}
;;;7423   	//mess_send(MESS2UNECC_HNDL,PARAM_UNECC_SET,U_AVT,10);
;;;7424   	mess_send(MESS2CNTRL_HNDL,PARAM_CNTRL_STAT_FAST_REG,0,10);
;;;7425   	find_succes=0;
;;;7426   /*	for(i=0;i<NUMIST;i++)
;;;7427   		{
;;;7428   		if((bps[i]._Uii<u_max_temp)&&(bps[i]._Uii>u_min_temp))continue;
;;;7429   		else
;;;7430   			{
;;;7431   			find_succes=0;
;;;7432   			break;
;;;7433   			}
;;;7434   		}*/
;;;7435   	if((bps_U>=U_AVT-1)&&(bps_U<=U_AVT+1))find_succes=1;
004944  f8dfa354          LDR      r10,|L1.19612|
004948  2400              MOVS     r4,#0                 ;7424
;;;7436   
;;;7437   	if(find_succes==1)
;;;7438   		{
;;;7439   		uavt_set_stat=uassSTEP2;
00494a  f04f0902          MOV      r9,#2
;;;7440   		}
;;;7441   	if(uavt_set_error_cnt)
;;;7442   		{
;;;7443   		uavt_set_error_cnt--;
;;;7444   		if(!uavt_set_error_cnt)
;;;7445   			{
;;;7446   			uavt_set_stat=uassOFF;
;;;7447   			uavt_set_result_stat=uasrsERR;
;;;7448   			avt_error_bps=100;
00494e  f04f0b64          MOV      r11,#0x64
004952  2801              CMP      r0,#1                 ;7413
004954  d12e              BNE      |L1.18868|
004956  f8980000          LDRB     r0,[r8,#0]            ;7419  ; uavt_set_stat_old
00495a  2801              CMP      r0,#1                 ;7419
00495c  d002              BEQ      |L1.18788|
00495e  f04f003c          MOV      r0,#0x3c              ;7421
004962  7030              STRB     r0,[r6,#0]            ;7421
                  |L1.18788|
004964  230a              MOVS     r3,#0xa               ;7424
004966  2200              MOVS     r2,#0                 ;7424
004968  21e6              MOVS     r1,#0xe6              ;7424
00496a  20e1              MOVS     r0,#0xe1              ;7424
00496c  f7fffffe          BL       mess_send
004970  f04f0000          MOV      r0,#0                 ;7425
004974  49ca              LDR      r1,|L1.19616|
004976  f9b12000          LDRSH    r2,[r1,#0]            ;7435  ; bps_U
00497a  f9ba1000          LDRSH    r1,[r10,#0]           ;7435  ; U_AVT
00497e  f1a10301          SUB      r3,r1,#1              ;7435
004982  429a              CMP      r2,r3                 ;7435
004984  db04              BLT      |L1.18832|
004986  1c49              ADDS     r1,r1,#1              ;7435
004988  428a              CMP      r2,r1                 ;7435
00498a  dc01              BGT      |L1.18832|
00498c  f04f0001          MOV      r0,#1                 ;7435
                  |L1.18832|
004990  2801              CMP      r0,#1                 ;7437
004992  d101              BNE      |L1.18840|
004994  f8859000          STRB     r9,[r5,#0]            ;7439
                  |L1.18840|
004998  7830              LDRB     r0,[r6,#0]            ;7441  ; uavt_set_error_cnt
00499a  b158              CBZ      r0,|L1.18868|
00499c  f1a00001          SUB      r0,r0,#1              ;7443
0049a0  b2c0              UXTB     r0,r0                 ;7443
0049a2  7030              STRB     r0,[r6,#0]            ;7443
0049a4  b930              CBNZ     r0,|L1.18868|
0049a6  702c              STRB     r4,[r5,#0]            ;7446
0049a8  48be              LDR      r0,|L1.19620|
0049aa  f8809000          STRB     r9,[r0,#0]            ;7447
0049ae  48be              LDR      r0,|L1.19624|
0049b0  f880b000          STRB     r11,[r0,#0]
                  |L1.18868|
;;;7449   			}
;;;7450   		}
;;;7451   	}
;;;7452   if(uavt_set_stat==uassSTEP2)
0049b4  782a              LDRB     r2,[r5,#0]  ; uavt_set_stat
;;;7453   	{
;;;7454   	char i,find_succes;
;;;7455   
;;;7456   	u_max_temp=(short)((((long)U_AVT)*101U)/100U);
0049b6  49bd              LDR      r1,|L1.19628|
;;;7457   	u_min_temp=(short)((((long)U_AVT)*99U)/100U);
0049b8  48bd              LDR      r0,|L1.19632|
;;;7458   
;;;7459   	if(uavt_set_stat_old!=uavt_set_stat)
;;;7460   		{
;;;7461   		uavt_set_error_cnt=60;
;;;7462   		}
;;;7463   
;;;7464   	mess_send(MESS2UNECC_HNDL,PARAM_UNECC_SET,U_AVT,10);
;;;7465   	mess_send(MESS2CNTRL_HNDL,PARAM_CNTRL_STAT_FAST_REG,0,10);
;;;7466   	find_succes=1;
;;;7467   
;;;7468   	for(i=0;i<NUMIST;i++)
;;;7469   		{
;;;7470   		if((bps[i]._Uii<u_max_temp)&&(bps[i]._Uii>u_min_temp))continue;
;;;7471   		else
;;;7472   			{
;;;7473   			find_succes=0;
;;;7474   			avt_error_bps=i+1;
;;;7475   			break;
;;;7476   			}
;;;7477   		}
;;;7478   
;;;7479   	if(find_succes==1)
;;;7480   		{
;;;7481   		uavt_set_stat=uassSTEP3;
;;;7482   		uavt_bps_pntr=0;
0049ba  4fbe              LDR      r7,|L1.19636|
0049bc  2a02              CMP      r2,#2                 ;7452
0049be  d002              BEQ      |L1.18886|
;;;7483   		avt_plazma=0;
;;;7484   		}
;;;7485   
;;;7486   	if(uavt_set_error_cnt)
;;;7487   		{
;;;7488   		uavt_set_error_cnt--;
;;;7489   		if(!uavt_set_error_cnt)
;;;7490   			{
;;;7491   			uavt_set_stat=uassOFF;
;;;7492   			uavt_set_result_stat=uasrsERR;
;;;7493   			}
;;;7494   		}
;;;7495   	}
;;;7496   else if(uavt_set_stat==uassSTEP3)
0049c0  2a03              CMP      r2,#3
0049c2  d05e              BEQ      |L1.19074|
0049c4  e0ca              B        |L1.19292|
                  |L1.18886|
0049c6  f9ba2000          LDRSH    r2,[r10,#0]           ;7456  ; U_AVT
0049ca  f04f0365          MOV      r3,#0x65              ;7456
0049ce  fb02f303          MUL      r3,r2,r3              ;7456
0049d2  fbb3f3fb          UDIV     r3,r3,r11             ;7456
0049d6  468a              MOV      r10,r1                ;7456
0049d8  800b              STRH     r3,[r1,#0]            ;7456
0049da  eb021142          ADD      r1,r2,r2,LSL #5       ;7457
0049de  eb010141          ADD      r1,r1,r1,LSL #1       ;7457
0049e2  fbb1f1fb          UDIV     r1,r1,r11             ;7457
0049e6  4683              MOV      r11,r0                ;7457
0049e8  8001              STRH     r1,[r0,#0]            ;7457
0049ea  f8980000          LDRB     r0,[r8,#0]            ;7459  ; uavt_set_stat_old
0049ee  2802              CMP      r0,#2                 ;7459
0049f0  d002              BEQ      |L1.18936|
0049f2  f04f003c          MOV      r0,#0x3c              ;7461
0049f6  7030              STRB     r0,[r6,#0]            ;7461
                  |L1.18936|
0049f8  230a              MOVS     r3,#0xa               ;7464
0049fa  21bf              MOVS     r1,#0xbf              ;7464
0049fc  20be              MOVS     r0,#0xbe              ;7464
0049fe  f7fffffe          BL       mess_send
004a02  230a              MOVS     r3,#0xa               ;7465
004a04  2200              MOVS     r2,#0                 ;7465
004a06  21e6              MOVS     r1,#0xe6              ;7465
004a08  20e1              MOVS     r0,#0xe1              ;7465
004a0a  f7fffffe          BL       mess_send
004a0e  f04f0201          MOV      r2,#1                 ;7466
004a12  f04f0000          MOV      r0,#0                 ;7468
004a16  49a9              LDR      r1,|L1.19644|
004a18  f9ba3000          LDRSH    r3,[r10,#0]           ;7468
004a1c  f8dfe298          LDR      lr,|L1.19640|
004a20  f9bbc000          LDRSH    r12,[r11,#0]          ;7470
004a24  f9b1a000          LDRSH    r10,[r1,#0]           ;7468
004a28  e00d              B        |L1.19014|
                  |L1.18986|
004a2a  ebc001c0          RSB      r1,r0,r0,LSL #3       ;7470
004a2e  eb011100          ADD      r1,r1,r0,LSL #4       ;7470
004a32  eb0e0181          ADD      r1,lr,r1,LSL #2       ;7470
004a36  69c9              LDR      r1,[r1,#0x1c]         ;7470
004a38  4299              CMP      r1,r3                 ;7470
004a3a  da09              BGE      |L1.19024|
004a3c  4561              CMP      r1,r12                ;7470
004a3e  dd07              BLE      |L1.19024|
004a40  f1000001          ADD      r0,r0,#1              ;7468
004a44  b2c0              UXTB     r0,r0                 ;7468
                  |L1.19014|
004a46  4550              CMP      r0,r10                ;7468
004a48  dbef              BLT      |L1.18986|
                  |L1.19018|
004a4a  2a01              CMP      r2,#1                 ;7479
004a4c  d007              BEQ      |L1.19038|
004a4e  e00c              B        |L1.19050|
                  |L1.19024|
004a50  f04f0200          MOV      r2,#0                 ;7473
004a54  4994              LDR      r1,|L1.19624|
004a56  f1000001          ADD      r0,r0,#1              ;7474
004a5a  7008              STRB     r0,[r1,#0]            ;7474
004a5c  e7f5              B        |L1.19018|
                  |L1.19038|
004a5e  f04f0003          MOV      r0,#3                 ;7481
004a62  7028              STRB     r0,[r5,#0]            ;7481
004a64  703c              STRB     r4,[r7,#0]            ;7482
004a66  4896              LDR      r0,|L1.19648|
004a68  7004              STRB     r4,[r0,#0]            ;7483
                  |L1.19050|
004a6a  7830              LDRB     r0,[r6,#0]            ;7486  ; uavt_set_error_cnt
004a6c  b3d0              CBZ      r0,|L1.19172|
004a6e  f1a00001          SUB      r0,r0,#1              ;7488
004a72  b2c0              UXTB     r0,r0                 ;7488
004a74  7030              STRB     r0,[r6,#0]            ;7488
004a76  bba8              CBNZ     r0,|L1.19172|
004a78  702c              STRB     r4,[r5,#0]            ;7491
004a7a  488a              LDR      r0,|L1.19620|
004a7c  f8809000          STRB     r9,[r0,#0]            ;7492
004a80  e06c              B        |L1.19292|
                  |L1.19074|
;;;7497   	{
;;;7498   	char i,find_succes;
;;;7499   
;;;7500   	u_max_temp=(short)((((long)U_AVT)*101U)/100U);
004a82  f9ba2000          LDRSH    r2,[r10,#0]  ; U_AVT
004a86  f04f0365          MOV      r3,#0x65
004a8a  fb02f303          MUL      r3,r2,r3
004a8e  fbb3f3fb          UDIV     r3,r3,r11
004a92  468a              MOV      r10,r1
004a94  800b              STRH     r3,[r1,#0]
;;;7501   	u_min_temp=(short)((((long)U_AVT)*99U)/100U);
004a96  eb021142          ADD      r1,r2,r2,LSL #5
004a9a  eb010141          ADD      r1,r1,r1,LSL #1
004a9e  fbb1f1fb          UDIV     r1,r1,r11
004aa2  4683              MOV      r11,r0
004aa4  8001              STRH     r1,[r0,#0]
;;;7502   	
;;;7503   	if(uavt_set_stat_old!=uavt_set_stat)
004aa6  f8980000          LDRB     r0,[r8,#0]  ; uavt_set_stat_old
004aaa  2803              CMP      r0,#3
004aac  d000              BEQ      |L1.19120|
;;;7504   		{
;;;7505   		uavt_bps_pntr=0;
004aae  703c              STRB     r4,[r7,#0]
                  |L1.19120|
;;;7506   		}
;;;7507   
;;;7508   	mess_send(MESS2UNECC_HNDL,PARAM_UNECC_SET,U_AVT,10);
004ab0  230a              MOVS     r3,#0xa
004ab2  21bf              MOVS     r1,#0xbf
004ab4  20be              MOVS     r0,#0xbe
004ab6  f7fffffe          BL       mess_send
;;;7509   	mess_send(MESS2CNTRL_HNDL,PARAM_CNTRL_STAT_FAST_REG,0,10);
004aba  230a              MOVS     r3,#0xa
004abc  2200              MOVS     r2,#0
004abe  21e6              MOVS     r1,#0xe6
004ac0  20e1              MOVS     r0,#0xe1
004ac2  f7fffffe          BL       mess_send
;;;7510   
;;;7511   	find_succes=1;
004ac6  f04f0601          MOV      r6,#1
;;;7512   	for(i=0;i<NUMIST;i++)
004aca  f04f0000          MOV      r0,#0
004ace  f8df91ec          LDR      r9,|L1.19644|
004ad2  f9ba2000          LDRSH    r2,[r10,#0]
004ad6  f8dfc1e0          LDR      r12,|L1.19640|
004ada  f9bb3000          LDRSH    r3,[r11,#0]           ;7470
004ade  f9b9a000          LDRSH    r10,[r9,#0]           ;7468
004ae2  e00e              B        |L1.19202|
                  |L1.19172|
004ae4  e03a              B        |L1.19292|
                  |L1.19174|
;;;7513   		{
;;;7514   		if((bps[i]._Uii<u_max_temp)&&(bps[i]._Uii>u_min_temp))continue;
004ae6  ebc001c0          RSB      r1,r0,r0,LSL #3
004aea  eb011100          ADD      r1,r1,r0,LSL #4
004aee  eb0c0181          ADD      r1,r12,r1,LSL #2
004af2  69c9              LDR      r1,[r1,#0x1c]
004af4  4291              CMP      r1,r2
004af6  da0f              BGE      |L1.19224|
004af8  4299              CMP      r1,r3
004afa  dd0d              BLE      |L1.19224|
004afc  f1000001          ADD      r0,r0,#1              ;7512
004b00  b2c0              UXTB     r0,r0                 ;7512
                  |L1.19202|
004b02  4550              CMP      r0,r10                ;7512
004b04  dbef              BLT      |L1.19174|
                  |L1.19206|
;;;7515   		else
;;;7516   			{
;;;7517   			find_succes=0;
;;;7518   			break;
;;;7519   			}
;;;7520   		}
;;;7521   
;;;7522   	if(mess_find( (MESS2IND_HNDL)) && (mess_data[0]==PARAM_U_AVT_GOOD) )
004b06  20d7              MOVS     r0,#0xd7
004b08  f7fffffe          BL       mess_find
004b0c  b1a0              CBZ      r0,|L1.19256|
004b0e  486d              LDR      r0,|L1.19652|
004b10  6800              LDR      r0,[r0,#0]  ; mess_data
004b12  28d9              CMP      r0,#0xd9
004b14  d003              BEQ      |L1.19230|
004b16  e00f              B        |L1.19256|
                  |L1.19224|
004b18  f04f0600          MOV      r6,#0                 ;7517
004b1c  e7f3              B        |L1.19206|
                  |L1.19230|
;;;7523   		{
;;;7524   		if(++uavt_bps_pntr>=NUMIST)
004b1e  7838              LDRB     r0,[r7,#0]  ; uavt_bps_pntr
004b20  1c40              ADDS     r0,r0,#1
004b22  b2c0              UXTB     r0,r0
004b24  7038              STRB     r0,[r7,#0]
004b26  f9b91000          LDRSH    r1,[r9,#0]  ; NUMIST
004b2a  4288              CMP      r0,r1
004b2c  db04              BLT      |L1.19256|
;;;7525   			{
;;;7526   			uavt_set_stat=uassOFF;
004b2e  702c              STRB     r4,[r5,#0]
;;;7527   			uavt_set_result_stat=uasrsSUCCESS;
004b30  495c              LDR      r1,|L1.19620|
004b32  f04f0003          MOV      r0,#3
004b36  7008              STRB     r0,[r1,#0]
                  |L1.19256|
;;;7528   			}
;;;7529   		//uavt_bps_pntr++;
;;;7530   		//if()
;;;7531   		}
;;;7532   	if(find_succes==1)
004b38  2e01              CMP      r6,#1
004b3a  d10f              BNE      |L1.19292|
;;;7533   		{
;;;7534   		mcp2515_transmit(uavt_bps_pntr,uavt_bps_pntr,CMND,0xee,0xee,0,0,0);
004b3c  20ee              MOVS     r0,#0xee
004b3e  e9cd0400          STRD     r0,r4,[sp,#0]
004b42  9402              STR      r4,[sp,#8]
004b44  9403              STR      r4,[sp,#0xc]
004b46  7839              LDRB     r1,[r7,#0]  ; uavt_bps_pntr
004b48  4603              MOV      r3,r0
004b4a  2216              MOVS     r2,#0x16
004b4c  4608              MOV      r0,r1
004b4e  f7fffffe          BL       mcp2515_transmit
;;;7535   		avt_plazma++;
004b52  485b              LDR      r0,|L1.19648|
004b54  7801              LDRB     r1,[r0,#0]  ; avt_plazma
004b56  f1010101          ADD      r1,r1,#1
004b5a  7001              STRB     r1,[r0,#0]
                  |L1.19292|
;;;7536   		}
;;;7537   	}
;;;7538   
;;;7539   
;;;7540   
;;;7541   uavt_set_stat_old=uavt_set_stat;
004b5c  7828              LDRB     r0,[r5,#0]  ; uavt_set_stat
004b5e  f8880000          STRB     r0,[r8,#0]
;;;7542   
;;;7543   }
004b62  e8bd9fff          POP      {r0-r12,pc}
;;;7544   
                          ENDP

                  u_necc_hndl PROC
;;;7619   //-----------------------------------------------
;;;7620   void u_necc_hndl(void)
004b66  b5f8              PUSH     {r3-r7,lr}
;;;7621   {
;;;7622   signed long temp_L;
;;;7623   signed long temp_SL;
;;;7624   //signed short temp_SS;
;;;7625   
;;;7626   //char i;
;;;7627   
;;;7628   //temp_SS=0;
;;;7629   signed short t[2];
;;;7630   
;;;7631   
;;;7632   
;;;7633   
;;;7634   #ifdef UKU_220_IPS_TERMOKOMPENSAT
;;;7635   
;;;7636   if(!TERMOKOMPENS)
004b68  4857              LDR      r0,|L1.19656|
;;;7637   	{
;;;7638   	//u_necc=U0B;
;;;7639   	u_necc=UB20;
;;;7640   	}
;;;7641   else
;;;7642   	{
;;;7643   	if(ND_EXT[0])t[0]=20;
;;;7644   	else t[0]=t_ext[0];
;;;7645   
;;;7646   	mat_temper=t[0];
;;;7647   			
;;;7648   	if(mat_temper<0)temp_SL=UB0; 
;;;7649   	else 
;;;7650   		{
;;;7651   		if(mat_temper>40)mat_temper=40; 
;;;7652   		temp_SL=(UB20-UB0)*10;
;;;7653   		temp_SL*=mat_temper;
;;;7654   		temp_SL/=200;
;;;7655   		temp_SL+=UB0;
;;;7656   		}
;;;7657   	if((spc_stat==spcVZ)&&((sk_stat[0]==1)||(VZ_CH_VENT_BLOK==0)))
004b6a  4d5a              LDR      r5,|L1.19668|
004b6c  4c5a              LDR      r4,|L1.19672|
004b6e  8801              LDRH     r1,[r0,#0]            ;7636  ; TERMOKOMPENS
004b70  4856              LDR      r0,|L1.19660|
004b72  f9b03000          LDRSH    r3,[r0,#0]            ;7639
;;;7658   		{
;;;7659   		temp_SL=UVZ;
004b76  4856              LDR      r0,|L1.19664|
004b78  f9b02000          LDRSH    r2,[r0,#0]
004b7c  b139              CBZ      r1,|L1.19342|
004b7e  4857              LDR      r0,|L1.19676|
004b80  7800              LDRB     r0,[r0,#0]            ;7643  ; ND_EXT
004b82  b130              CBZ      r0,|L1.19346|
004b84  f04f0014          MOV      r0,#0x14              ;7643
004b88  f8ad0000          STRH     r0,[sp,#0]            ;7643
004b8c  e005              B        |L1.19354|
                  |L1.19342|
004b8e  8023              STRH     r3,[r4,#0]            ;7639
004b90  e02b              B        |L1.19434|
                  |L1.19346|
004b92  4853              LDR      r0,|L1.19680|
004b94  8800              LDRH     r0,[r0,#0]            ;7644  ; t_ext
004b96  f8ad0000          STRH     r0,[sp,#0]            ;7644
                  |L1.19354|
004b9a  4e52              LDR      r6,|L1.19684|
004b9c  f9bd1000          LDRSH    r1,[sp,#0]            ;7646
004ba0  6031              STR      r1,[r6,#0]            ;7646  ; mat_temper
004ba2  4851              LDR      r0,|L1.19688|
004ba4  2900              CMP      r1,#0                 ;7648
004ba6  f9b00000          LDRSH    r0,[r0,#0]            ;7648
004baa  db12              BLT      |L1.19410|
004bac  2928              CMP      r1,#0x28              ;7651
004bae  dd02              BLE      |L1.19382|
004bb0  f04f0128          MOV      r1,#0x28              ;7651
004bb4  6031              STR      r1,[r6,#0]            ;7651  ; mat_temper
                  |L1.19382|
004bb6  eba30100          SUB      r1,r3,r0              ;7652
004bba  eb010181          ADD      r1,r1,r1,LSL #2       ;7652
004bbe  ea4f0141          LSL      r1,r1,#1              ;7652
004bc2  6833              LDR      r3,[r6,#0]            ;7653  ; mat_temper
004bc4  fb01f103          MUL      r1,r1,r3              ;7653
004bc8  f04f03c8          MOV      r3,#0xc8              ;7654
004bcc  fb91f1f3          SDIV     r1,r1,r3              ;7654
004bd0  4408              ADD      r0,r0,r1              ;7655
                  |L1.19410|
004bd2  7ea9              LDRB     r1,[r5,#0x1a]         ;7657  ; spc_stat
004bd4  2902              CMP      r1,#2                 ;7657
004bd6  d107              BNE      |L1.19432|
004bd8  4944              LDR      r1,|L1.19692|
004bda  7809              LDRB     r1,[r1,#0]            ;7657  ; sk_stat
004bdc  2901              CMP      r1,#1                 ;7657
004bde  d002              BEQ      |L1.19430|
004be0  4943              LDR      r1,|L1.19696|
004be2  8809              LDRH     r1,[r1,#0]            ;7657  ; VZ_CH_VENT_BLOK
004be4  b901              CBNZ     r1,|L1.19432|
                  |L1.19430|
004be6  4610              MOV      r0,r2
                  |L1.19432|
;;;7660   		}
;;;7661   	u_necc=(unsigned int)temp_SL;
004be8  8020              STRH     r0,[r4,#0]
                  |L1.19434|
;;;7662   	///u_necc=3456;
;;;7663   	}  
;;;7664   
;;;7665   //u_necc=2355;
;;;7666   
;;;7667   if((speedChIsOn)||(sp_ch_stat==scsWRK))
004bea  4842              LDR      r0,|L1.19700|
004bec  8800              LDRH     r0,[r0,#0]  ; speedChIsOn
004bee  b918              CBNZ     r0,|L1.19448|
004bf0  4841              LDR      r0,|L1.19704|
004bf2  7800              LDRB     r0,[r0,#0]  ; sp_ch_stat
004bf4  2802              CMP      r0,#2
004bf6  d102              BNE      |L1.19454|
                  |L1.19448|
;;;7668   	{
;;;7669   	u_necc=speedChrgVolt;
004bf8  4840              LDR      r0,|L1.19708|
004bfa  8800              LDRH     r0,[r0,#0]  ; speedChrgVolt
004bfc  8020              STRH     r0,[r4,#0]
                  |L1.19454|
;;;7670   	}
;;;7671   if(hv_vz_stat==hvsWRK)
004bfe  4840              LDR      r0,|L1.19712|
004c00  7800              LDRB     r0,[r0,#0]  ; hv_vz_stat
004c02  2805              CMP      r0,#5
004c04  d100              BNE      |L1.19464|
;;;7672   	{
;;;7673   	u_necc=UVZ;
004c06  8022              STRH     r2,[r4,#0]
                  |L1.19464|
;;;7674   	}
;;;7675   if(vz1_stat==vz1sWRK)
004c08  f8950026          LDRB     r0,[r5,#0x26]  ; vz1_stat
004c0c  280a              CMP      r0,#0xa
004c0e  d102              BNE      |L1.19478|
;;;7676   	{
;;;7677   	u_necc=UZ_U;
004c10  483c              LDR      r0,|L1.19716|
004c12  8800              LDRH     r0,[r0,#0]  ; UZ_U
004c14  8020              STRH     r0,[r4,#0]
                  |L1.19478|
;;;7678   	}
;;;7679   if(vz2_stat==vz2sWRK1)
004c16  f8950029          LDRB     r0,[r5,#0x29]  ; vz2_stat
004c1a  280a              CMP      r0,#0xa
004c1c  d102              BNE      |L1.19492|
;;;7680   	{
;;;7681   	u_necc=FZ_U1;
004c1e  493a              LDR      r1,|L1.19720|
004c20  8809              LDRH     r1,[r1,#0]  ; FZ_U1
004c22  8021              STRH     r1,[r4,#0]
                  |L1.19492|
;;;7682   	}
;;;7683   if(vz2_stat==vz2sWRK2)
004c24  280b              CMP      r0,#0xb
004c26  d102              BNE      |L1.19502|
;;;7684   	{
;;;7685   	u_necc=FZ_U2;
004c28  4838              LDR      r0,|L1.19724|
004c2a  8800              LDRH     r0,[r0,#0]  ; FZ_U2
004c2c  8020              STRH     r0,[r4,#0]
                  |L1.19502|
;;;7686   	}
;;;7687   
;;;7688   if((uavt_set_stat==uassSTEP1)||(uavt_set_stat==uassSTEP2))
004c2e  4818              LDR      r0,|L1.19600|
004c30  7800              LDRB     r0,[r0,#0]  ; uavt_set_stat
004c32  2801              CMP      r0,#1
004c34  d001              BEQ      |L1.19514|
004c36  2802              CMP      r0,#2
004c38  d102              BNE      |L1.19520|
                  |L1.19514|
;;;7689   	{
;;;7690   	u_necc=U_AVT;
004c3a  4818              LDR      r0,|L1.19612|
004c3c  8800              LDRH     r0,[r0,#0]  ; U_AVT
004c3e  8020              STRH     r0,[r4,#0]
                  |L1.19520|
;;;7691   	}
;;;7692   
;;;7693   if(mess_find_unvol(MESS2UNECC_HNDL))
004c40  20be              MOVS     r0,#0xbe
004c42  f7fffffe          BL       mess_find_unvol
004c46  b128              CBZ      r0,|L1.19540|
;;;7694   	{		
;;;7695   	if(mess_data[0]==PARAM_UNECC_SET)
004c48  481e              LDR      r0,|L1.19652|
004c4a  6801              LDR      r1,[r0,#0]  ; mess_data
004c4c  29bf              CMP      r1,#0xbf
004c4e  d101              BNE      |L1.19540|
;;;7696   		{
;;;7697   		u_necc=mess_data[1];
004c50  6840              LDR      r0,[r0,#4]  ; mess_data
004c52  8020              STRH     r0,[r4,#0]
                  |L1.19540|
;;;7698   		}		
;;;7699   	} 
;;;7700   
;;;7701   //if(ICA_EN)u_necc+=ica_u_necc;
;;;7702   #endif
;;;7703   
;;;7704   
;;;7705   #ifndef UKU_220_IPS_TERMOKOMPENSAT
;;;7706   
;;;7707   #ifndef UKU_TELECORE2015
;;;7708   #ifndef UKU_TELECORE2017
;;;7709   if(unh_cnt0<10)
;;;7710   	{
;;;7711   	unh_cnt0++;
;;;7712   	if(unh_cnt0>=10)
;;;7713   		{
;;;7714   		unh_cnt0=0;
;;;7715   		b1Hz_unh=1;
;;;7716   		}
;;;7717   	}
;;;7718   
;;;7719   if(unh_cnt1<5)
;;;7720   	{
;;;7721   	unh_cnt1++;
;;;7722   	if(unh_cnt1==5)
;;;7723   		{
;;;7724   		unh_cnt1=0;
;;;7725   //		b2Hz_unh=1;
;;;7726   		}
;;;7727   	} 
;;;7728   
;;;7729   
;;;7730   
;;;7731   if(mess_find_unvol(MESS2UNECC_HNDL))
;;;7732   	{		
;;;7733   	if(mess_data[0]==PARAM_UNECC_SET)
;;;7734   		{
;;;7735   		u_necc=mess_data[1];
;;;7736   		}		
;;;7737   	}
;;;7738   
;;;7739   
;;;7740   else if(b1Hz_unh)
;;;7741   	{
;;;7742   	
;;;7743   	if((BAT_IS_ON[0]!=bisON) && (BAT_IS_ON[1]!=bisON))
;;;7744   		{
;;;7745   		
;;;7746   		u_necc=U0B;
;;;7747   		#ifdef IPS_SGEP_GAZPROM
;;;7748   		u_necc=UB0;
;;;7749   		#endif
;;;7750   		}
;;;7751   	else 
;;;7752   		{
;;;7753   		if(BAT_TYPE==0) //если батарея обычная
;;;7754   			{
;;;7755   			for(i=0;i<2;i++)
;;;7756   				{
;;;7757   				if(BAT_IS_ON[i]==bisON)
;;;7758   					{
;;;7759   					if(bat[i]._nd)t[i]=20;
;;;7760   					else t[i]=bat[i]._Tb;
;;;7761   					}
;;;7762   				else
;;;7763   					{
;;;7764   					t[i]=-20;
;;;7765   					}
;;;7766   				}
;;;7767   			if(t[0]>t[1])mat_temper=t[0];
;;;7768   			else mat_temper=t[1];
;;;7769   			
;;;7770   		
;;;7771   			if(mat_temper<0)temp_SL=UB0; 
;;;7772   			else 
;;;7773   				{
;;;7774   				if(mat_temper>40)mat_temper=40; 
;;;7775   				temp_SL=(UB20-UB0)*10;
;;;7776   				temp_SL*=mat_temper;
;;;7777   				temp_SL/=200;
;;;7778   				temp_SL+=UB0;
;;;7779   				}
;;;7780   			if((spc_stat==spcVZ)&&(sk_stat[0]==1))
;;;7781   				{
;;;7782   				temp_SL=UVZ;
;;;7783   				}
;;;7784   			u_necc=(unsigned int)temp_SL;
;;;7785   			}
;;;7786   		else if(BAT_TYPE==1) //если батарея китайская
;;;7787   			{
;;;7788   			u_necc=U0B;
;;;7789   					
;;;7790   			u_necc=bat[0]._Ub+10;
;;;7791   
;;;7792   			
;;;7793   			if((spc_stat==spcVZ)&&(sk_stat[0]==1))
;;;7794   				{
;;;7795   				u_necc=UVZ;
;;;7796   				}
;;;7797   			if(u_necc>=UB0) u_necc=UB0;
;;;7798   			if(u_necc>=UB20) u_necc=UB20;
;;;7799   			}
;;;7800   		}  
;;;7801   	}
;;;7802   #endif
;;;7803   #endif
;;;7804   
;;;7805   #ifdef UKU_TELECORE2015
;;;7806   
;;;7807   if(unh_cnt0<10)
;;;7808   	{
;;;7809   	unh_cnt0++;
;;;7810   	if(unh_cnt0>=10)
;;;7811   		{
;;;7812   		unh_cnt0=0;
;;;7813   		b1Hz_unh=1;
;;;7814   		}
;;;7815   	}
;;;7816   
;;;7817   if(unh_cnt1<5)
;;;7818   	{
;;;7819   	unh_cnt1++;
;;;7820   	if(unh_cnt1==5)
;;;7821   		{
;;;7822   		unh_cnt1=0;
;;;7823   //		b2Hz_unh=1;
;;;7824   		}
;;;7825   	} 
;;;7826   
;;;7827   
;;;7828   
;;;7829   if(mess_find_unvol(MESS2UNECC_HNDL))
;;;7830   	{		
;;;7831   	if(mess_data[0]==PARAM_UNECC_SET)
;;;7832   		{
;;;7833   		u_necc=mess_data[1];
;;;7834   		}		
;;;7835   	}
;;;7836   
;;;7837   
;;;7838   else if(b1Hz_unh)
;;;7839   	{
;;;7840   	b1Hz_unh=0;
;;;7841   
;;;7842   	if(BAT_TYPE==0)
;;;7843   		{
;;;7844   		if(bat[0]._nd)mat_temper=20;
;;;7845   		else mat_temper=bat[0]._Tb;
;;;7846   
;;;7847   			
;;;7848   		if(mat_temper<0)temp_SL=UB0; 
;;;7849   		else 
;;;7850   			{
;;;7851   			if(mat_temper>40)mat_temper=40; 
;;;7852   			temp_SL=(UB20-UB0)*10;
;;;7853   			temp_SL*=mat_temper;
;;;7854   			temp_SL/=200;
;;;7855   			temp_SL+=UB0;
;;;7856   			}
;;;7857   		if((spc_stat==spcVZ)&&(sk_stat[0]==1))
;;;7858   			{
;;;7859   			temp_SL=UVZ;
;;;7860   			}
;;;7861   		u_necc=(unsigned int)temp_SL;
;;;7862   	///u_necc=3456;
;;;7863   		}
;;;7864   	else if(BAT_TYPE==1)
;;;7865   		{
;;;7866   		
;;;7867   		gran(&DU_LI_BAT,1,30);
;;;7868   		u_necc=li_bat._Ub+DU_LI_BAT;
;;;7869   		gran(&u_necc,0,UB0);
;;;7870   		gran(&u_necc,0,UB20);
;;;7871   		gran(&u_necc,0,540);		
;;;7872   
;;;7873   
;;;7874   		if(li_bat._batStat!=bsOK)
;;;7875   			{
;;;7876   			u_necc=U0B;
;;;7877   			}
;;;7878   		if((spc_stat==spcVZ)&&(sk_stat[0]==1))
;;;7879   			{
;;;7880   			u_necc=UVZ;
;;;7881   			}
;;;7882   		/* 
;;;7883   		u_necc=U0B;
;;;7884   		
;;;7885   
;;;7886   	
;;;7887   		u_necc=UB0;
;;;7888   		u_necc=li_bat._Ub+10;
;;;7889   		if((li_bat._Ub<450)||(li_bat._Ub>550))
;;;7890   			{
;;;7891   			lakb_error_cnt++;
;;;7892   			if(lakb_error_cnt>=30)
;;;7893   				{
;;;7894   				lakb_error_cnt=30;
;;;7895   				u_necc=U0B;
;;;7896   				}
;;;7897   			}
;;;7898   		else lakb_error_cnt=0;*/
;;;7899   		}
;;;7900   	else if(BAT_TYPE==2)
;;;7901   		{
;;;7902   		u_necc=U0B;
;;;7903   		
;;;7904   		if((spc_stat==spcVZ)&&(sk_stat[0]==1))
;;;7905   			{
;;;7906   			u_necc=UVZ;
;;;7907   			}
;;;7908   	
;;;7909   		u_necc=UB0;
;;;7910   		}
;;;7911   
;;;7912   	else if(BAT_TYPE==3)
;;;7913   		{
;;;7914   		u_necc=U0B;
;;;7915   		
;;;7916   		if((spc_stat==spcVZ)&&(sk_stat[0]==1))
;;;7917   			{
;;;7918   			u_necc=UVZ;
;;;7919   			}
;;;7920   
;;;7921   		gran(&DU_LI_BAT,1,30);
;;;7922   
;;;7923   
;;;7924   		if(lakbNotErrorNum==0)
;;;7925   			{
;;;7926   			u_necc=U0B;
;;;7927   			}
;;;7928   		else 
;;;7929   			{
;;;7930   			signed short i;
;;;7931   			//signed short u_necc_max;
;;;7932   			//u_necc_max=0;
;;;7933   			char soc_flag=0;
;;;7934   
;;;7935   			for(i=(NUMBAT_TELECORE-1);i>=0;i--)
;;;7936   				{
;;;7937   				if(lakb[i]._communicationFullErrorStat==0)u_necc=lakb[i]._tot_bat_volt+DU_LI_BAT;
;;;7938   				if(lakb[i]._s_o_c_percent<QSODERG_LI_BAT)soc_flag=1;
;;;7939   				}
;;;7940   
;;;7941   			if(soc_flag==0)u_necc=USODERG_LI_BAT;
;;;7942   			}
;;;7943   		gran(&u_necc,0,UB0);
;;;7944   		//gran(&u_necc,0,UB20);
;;;7945   		gran(&u_necc,0,540);
;;;7946   		}
;;;7947   	}
;;;7948   
;;;7949   #endif 
;;;7950   
;;;7951   #ifdef UKU_TELECORE2017
;;;7952   
;;;7953   if(unh_cnt0<10)
;;;7954   	{
;;;7955   	unh_cnt0++;
;;;7956   	if(unh_cnt0>=10)
;;;7957   		{
;;;7958   		unh_cnt0=0;
;;;7959   		b1Hz_unh=1;
;;;7960   		}
;;;7961   	}
;;;7962   
;;;7963   if(unh_cnt1<5)
;;;7964   	{
;;;7965   	unh_cnt1++;
;;;7966   	if(unh_cnt1==5)
;;;7967   		{
;;;7968   		unh_cnt1=0;
;;;7969   //		b2Hz_unh=1;
;;;7970   		}
;;;7971   	} 
;;;7972   
;;;7973   
;;;7974   
;;;7975   if(mess_find_unvol(MESS2UNECC_HNDL))
;;;7976   	{		
;;;7977   	if(mess_data[0]==PARAM_UNECC_SET)
;;;7978   		{
;;;7979   		u_necc=mess_data[1];
;;;7980   		}		
;;;7981   	}
;;;7982   
;;;7983   
;;;7984   else if(b1Hz_unh)
;;;7985   	{
;;;7986   	b1Hz_unh=0;
;;;7987   
;;;7988   	if(BAT_TYPE==0)
;;;7989   		{
;;;7990   		if(bat[0]._nd)mat_temper=20;
;;;7991   		else mat_temper=bat[0]._Tb;
;;;7992   
;;;7993   			
;;;7994   		if(mat_temper<0)temp_SL=UB0; 
;;;7995   		else 
;;;7996   			{
;;;7997   			if(mat_temper>40)mat_temper=40; 
;;;7998   			temp_SL=(UB20-UB0)*10;
;;;7999   			temp_SL*=mat_temper;
;;;8000   			temp_SL/=200;
;;;8001   			temp_SL+=UB0;
;;;8002   			}
;;;8003   		if((spc_stat==spcVZ)&&(sk_stat[0]==1))
;;;8004   			{
;;;8005   			temp_SL=UVZ;
;;;8006   			}
;;;8007   		u_necc=(unsigned int)temp_SL;
;;;8008   	///u_necc=3456;
;;;8009   		}
;;;8010   	else if(BAT_TYPE==1)
;;;8011   		{
;;;8012   		
;;;8013   		gran(&DU_LI_BAT,1,30);
;;;8014   		u_necc=li_bat._Ub+DU_LI_BAT;
;;;8015   		gran(&u_necc,0,UB0);
;;;8016   		gran(&u_necc,0,UB20);
;;;8017   		gran(&u_necc,0,540);		
;;;8018   
;;;8019   
;;;8020   		if(li_bat._batStat!=bsOK)
;;;8021   			{
;;;8022   			u_necc=U0B;
;;;8023   			}
;;;8024   		if((spc_stat==spcVZ)&&(sk_stat[0]==1))
;;;8025   			{
;;;8026   			u_necc=UVZ;
;;;8027   			}
;;;8028   		}
;;;8029   	else if(BAT_TYPE==2)
;;;8030   		{
;;;8031   		u_necc=U0B;
;;;8032   		
;;;8033   		if((spc_stat==spcVZ)&&(sk_stat[0]==1))
;;;8034   			{
;;;8035   			u_necc=UVZ;
;;;8036   			}
;;;8037   	
;;;8038   		u_necc=UB0;
;;;8039   		}
;;;8040   
;;;8041   	else if(BAT_TYPE==3)
;;;8042   		{
;;;8043   		u_necc=U0B;
;;;8044   		
;;;8045   		if((spc_stat==spcVZ)&&(sk_stat[0]==1))
;;;8046   			{
;;;8047   			u_necc=UVZ;
;;;8048   			}
;;;8049   
;;;8050   		gran(&DU_LI_BAT,1,30);
;;;8051   
;;;8052   
;;;8053   		if(lakbNotErrorNum==0)
;;;8054   			{
;;;8055   			u_necc=U0B;
;;;8056   			}
;;;8057   		else 
;;;8058   			{
;;;8059   			signed short i;
;;;8060   			//signed short u_necc_max;
;;;8061   			//u_necc_max=0;
;;;8062   			char soc_flag=0;
;;;8063   
;;;8064   			for(i=(NUMBAT_TELECORE-1);i>=0;i--)
;;;8065   				{
;;;8066   				if(lakb[i]._communicationFullErrorStat==0)u_necc=lakb[i]._tot_bat_volt+DU_LI_BAT;
;;;8067   				if(lakb[i]._s_o_c_percent<QSODERG_LI_BAT)soc_flag=1;
;;;8068   				}
;;;8069   
;;;8070   			if(soc_flag==0)u_necc=USODERG_LI_BAT;
;;;8071   			}
;;;8072   		gran(&u_necc,0,UB0);
;;;8073   		//gran(&u_necc,0,UB20);
;;;8074   		gran(&u_necc,0,540);
;;;8075   		}
;;;8076   	}
;;;8077   
;;;8078   #endif 
;;;8079   //u_necc=2356;
;;;8080   
;;;8081   if((speedChIsOn)||(sp_ch_stat==scsWRK))
;;;8082   	{
;;;8083   	u_necc=speedChrgVolt;
;;;8084   	}
;;;8085   #endif//gran(&u_necc,400,UMAX);
;;;8086   
;;;8087   
;;;8088   
;;;8089   temp_L=(signed long) u_necc;
004c54  f9b40000          LDRSH    r0,[r4,#0]  ; u_necc
;;;8090   temp_L*=98L;
004c58  f04f0162          MOV      r1,#0x62
004c5c  fb00f101          MUL      r1,r0,r1
;;;8091   temp_L/=100L;
004c60  f04f0264          MOV      r2,#0x64
004c64  fb91f1f2          SDIV     r1,r1,r2
;;;8092   u_necc_dn=(signed short)temp_L;
004c68  4b08              LDR      r3,|L1.19596|
004c6a  8019              STRH     r1,[r3,#0]
;;;8093   
;;;8094   temp_L=(signed long) u_necc;
;;;8095   temp_L*=102L;
004c6c  f04f0166          MOV      r1,#0x66
004c70  e04e              B        |L1.19728|
004c72  0000              DCW      0x0000
                  |L1.19572|
                          DCD      0xfff0bdc0
                  |L1.19576|
                          DCD      Ib_ips_termokompensat
                  |L1.19580|
                          DCD      IKB
                  |L1.19584|
                          DCD      bat
                  |L1.19588|
                          DCD      out_U
                  |L1.19592|
                          DCD      u_necc_up
                  |L1.19596|
                          DCD      u_necc_dn
                  |L1.19600|
                          DCD      uavt_set_stat
                  |L1.19604|
                          DCD      uavt_set_error_cnt
                  |L1.19608|
                          DCD      uavt_set_stat_old
                  |L1.19612|
                          DCD      U_AVT
                  |L1.19616|
                          DCD      bps_U
                  |L1.19620|
                          DCD      uavt_set_result_stat
                  |L1.19624|
                          DCD      avt_error_bps
                  |L1.19628|
                          DCD      u_max_temp
                  |L1.19632|
                          DCD      u_min_temp
                  |L1.19636|
                          DCD      uavt_bps_pntr
                  |L1.19640|
                          DCD      bps
                  |L1.19644|
                          DCD      NUMIST
                  |L1.19648|
                          DCD      avt_plazma
                  |L1.19652|
                          DCD      mess_data
                  |L1.19656|
                          DCD      TERMOKOMPENS
                  |L1.19660|
                          DCD      UB20
                  |L1.19664|
                          DCD      UVZ
                  |L1.19668|
                          DCD      ||area_number.25||
                  |L1.19672|
                          DCD      u_necc
                  |L1.19676|
                          DCD      ND_EXT
                  |L1.19680|
                          DCD      t_ext
                  |L1.19684|
                          DCD      mat_temper
                  |L1.19688|
                          DCD      UB0
                  |L1.19692|
                          DCD      sk_stat
                  |L1.19696|
                          DCD      VZ_CH_VENT_BLOK
                  |L1.19700|
                          DCD      speedChIsOn
                  |L1.19704|
                          DCD      sp_ch_stat
                  |L1.19708|
                          DCD      speedChrgVolt
                  |L1.19712|
                          DCD      hv_vz_stat
                  |L1.19716|
                          DCD      UZ_U
                  |L1.19720|
                          DCD      FZ_U1
                  |L1.19724|
                          DCD      FZ_U2
                  |L1.19728|
004d10  fb00f001          MUL      r0,r0,r1
;;;8096   temp_L/=100L;
004d14  fb90f0f2          SDIV     r0,r0,r2
;;;8097   u_necc_up=(signed short)temp_L;
004d18  49f9              LDR      r1,|L1.20736|
004d1a  8008              STRH     r0,[r1,#0]
;;;8098   /*
;;;8099   #ifdef IPS_SGEP_GAZPROM
;;;8100   u_necc=248;
;;;8101   #endif */
;;;8102   }
004d1c  bdf8              POP      {r3-r7,pc}
;;;8103   
                          ENDP

                  num_necc_hndl PROC
;;;8105   //-----------------------------------------------
;;;8106   void num_necc_hndl(void)
004d1e  e92d41f0          PUSH     {r4-r8,lr}
;;;8107   {
;;;8108   
;;;8109   static short num_necc_block_cnt;
;;;8110   if(num_necc_block_cnt) num_necc_block_cnt--;
004d22  4cf8              LDR      r4,|L1.20740|
004d24  f9b40032          LDRSH    r0,[r4,#0x32]  ; num_necc_block_cnt
004d28  b110              CBZ      r0,|L1.19760|
004d2a  f1a00001          SUB      r0,r0,#1
004d2e  8660              STRH     r0,[r4,#0x32]
                  |L1.19760|
;;;8111   
;;;8112   Isumm_=Isumm;
004d30  48f5              LDR      r0,|L1.20744|
004d32  4df6              LDR      r5,|L1.20748|
004d34  8800              LDRH     r0,[r0,#0]  ; Isumm
004d36  8028              STRH     r0,[r5,#0]
;;;8113   
;;;8114   if(bat[0]._Ib<0) Isumm_+=(abs(bat[0]._Ib))/10;
004d38  4ef5              LDR      r6,|L1.20752|
004d3a  270a              MOVS     r7,#0xa
004d3c  f9b60008          LDRSH    r0,[r6,#8]  ; bat
004d40  2800              CMP      r0,#0
004d42  da06              BGE      |L1.19794|
004d44  f7fffffe          BL       abs
004d48  fb90f0f7          SDIV     r0,r0,r7
004d4c  8829              LDRH     r1,[r5,#0]  ; Isumm_
004d4e  4408              ADD      r0,r0,r1
004d50  8028              STRH     r0,[r5,#0]
                  |L1.19794|
;;;8115   if(bat[1]._Ib<0) Isumm_+=(abs(bat[1]._Ib))/10;
004d52  f9b60054          LDRSH    r0,[r6,#0x54]  ; bat
004d56  2800              CMP      r0,#0
004d58  da06              BGE      |L1.19816|
004d5a  f7fffffe          BL       abs
004d5e  fb90f0f7          SDIV     r0,r0,r7
004d62  8829              LDRH     r1,[r5,#0]  ; Isumm_
004d64  4408              ADD      r0,r0,r1
004d66  8028              STRH     r0,[r5,#0]
                  |L1.19816|
;;;8116   
;;;8117   num_necc_up=(Isumm_/((signed short)IMAX))+1;
004d68  49ea              LDR      r1,|L1.20756|
004d6a  f9b50000          LDRSH    r0,[r5,#0]  ; Isumm_
004d6e  f9b11000          LDRSH    r1,[r1,#0]  ; IMAX
004d72  fb90f1f1          SDIV     r1,r0,r1
004d76  f1010101          ADD      r1,r1,#1
004d7a  b2c9              UXTB     r1,r1
004d7c  75a1              STRB     r1,[r4,#0x16]
;;;8118   ////Isumm_+=(signed short)((IMAX*(10-KIMAX))/10);
;;;8119   ////Isumm_+=(signed short)(IMAX-IMIN);
;;;8120   
;;;8121   num_necc_down=(Isumm_/((signed short)IMIN))+1;
004d7e  4ae6              LDR      r2,|L1.20760|
004d80  f9b22000          LDRSH    r2,[r2,#0]  ; IMIN
004d84  fb90f0f2          SDIV     r0,r0,r2
004d88  f1000001          ADD      r0,r0,#1
004d8c  b2c2              UXTB     r2,r0
004d8e  75e2              STRB     r2,[r4,#0x17]
;;;8122   
;;;8123   if(num_necc_up>num_necc)
004d90  48e2              LDR      r0,|L1.20764|
;;;8124   	{
;;;8125   	num_necc=num_necc_up;
;;;8126   	num_necc_block_cnt=60;
004d92  f04f053c          MOV      r5,#0x3c
004d96  f9b03000          LDRSH    r3,[r0,#0]            ;8123  ; num_necc
004d9a  4299              CMP      r1,r3                 ;8123
004d9c  dd02              BLE      |L1.19876|
004d9e  8001              STRH     r1,[r0,#0]            ;8125
004da0  8665              STRH     r5,[r4,#0x32]
004da2  e005              B        |L1.19888|
                  |L1.19876|
;;;8127   	}
;;;8128   else if(num_necc_down<num_necc)
004da4  429a              CMP      r2,r3
004da6  da03              BGE      |L1.19888|
;;;8129   	{
;;;8130   	if(!num_necc_block_cnt)
004da8  8e61              LDRH     r1,[r4,#0x32]  ; num_necc_block_cnt
004daa  b909              CBNZ     r1,|L1.19888|
;;;8131   		{
;;;8132   		num_necc=num_necc_down;
004dac  8002              STRH     r2,[r0,#0]
;;;8133   		num_necc_block_cnt=60;
004dae  8665              STRH     r5,[r4,#0x32]
                  |L1.19888|
;;;8134   		}
;;;8135   	}
;;;8136   
;;;8137   if(PAR) num_necc=NUMIST;
004db0  49db              LDR      r1,|L1.20768|
004db2  880a              LDRH     r2,[r1,#0]  ; PAR
004db4  49db              LDR      r1,|L1.20772|
004db6  b10a              CBZ      r2,|L1.19900|
004db8  880a              LDRH     r2,[r1,#0]  ; NUMIST
004dba  8002              STRH     r2,[r0,#0]
                  |L1.19900|
;;;8138   #ifdef UKU_220_IPS_TERMOKOMPENSAT
;;;8139   if(bPARALLEL) num_necc=NUMIST;
004dbc  f8942024          LDRB     r2,[r4,#0x24]  ; bPARALLEL
004dc0  b10a              CBZ      r2,|L1.19910|
004dc2  880a              LDRH     r2,[r1,#0]  ; NUMIST
004dc4  8002              STRH     r2,[r0,#0]
                  |L1.19910|
;;;8140   if(vz1_stat==vz1sWRK)num_necc=NUMIST; //Включаем все источники если уравнительный заряд
004dc6  f8942026          LDRB     r2,[r4,#0x26]  ; vz1_stat
004dca  2a0a              CMP      r2,#0xa
004dcc  d101              BNE      |L1.19922|
004dce  880a              LDRH     r2,[r1,#0]  ; NUMIST
004dd0  8002              STRH     r2,[r0,#0]
                  |L1.19922|
;;;8141   if((vz2_stat==vz2sWRK1)||(vz2_stat==vz2sWRK2))num_necc=NUMIST; //Включаем все источники если уравнительный заряд
004dd2  f8942029          LDRB     r2,[r4,#0x29]  ; vz2_stat
004dd6  2a0a              CMP      r2,#0xa
004dd8  d001              BEQ      |L1.19934|
004dda  2a0b              CMP      r2,#0xb
004ddc  d101              BNE      |L1.19938|
                  |L1.19934|
004dde  880a              LDRH     r2,[r1,#0]  ; NUMIST
004de0  8002              STRH     r2,[r0,#0]
                  |L1.19938|
;;;8142   #endif
;;;8143   
;;;8144   gran(&num_necc,1,NUMIST);
004de2  f9b12000          LDRSH    r2,[r1,#0]  ; NUMIST
004de6  e8bd41f0          POP      {r4-r8,lr}
004dea  2101              MOVS     r1,#1
004dec  48cb              LDR      r0,|L1.20764|
004dee  f7ffbffe          B.W      gran
;;;8145   
;;;8146   }
;;;8147   
                          ENDP

                  cntrl_hndl PROC
;;;8150   //-----------------------------------------------
;;;8151   void cntrl_hndl(void)
004df2  e92d5ff0          PUSH     {r4-r12,lr}
;;;8152   {
;;;8153   
;;;8154   
;;;8155   
;;;8156   IZMAX_=IZMAX;
004df6  48cc              LDR      r0,|L1.20776|
004df8  4cc2              LDR      r4,|L1.20740|
004dfa  8800              LDRH     r0,[r0,#0]  ; IZMAX
004dfc  f8a40046          STRH     r0,[r4,#0x46]
;;;8157   
;;;8158   //cntrl_hndl_plazma=10;
;;;8159   
;;;8160   if((speedChIsOn)||(sp_ch_stat==scsWRK))IZMAX_=speedChrgCurr;
004e00  48ca              LDR      r0,|L1.20780|
004e02  8800              LDRH     r0,[r0,#0]  ; speedChIsOn
004e04  b918              CBNZ     r0,|L1.19982|
004e06  48ca              LDR      r0,|L1.20784|
004e08  7800              LDRB     r0,[r0,#0]  ; sp_ch_stat
004e0a  2802              CMP      r0,#2
004e0c  d103              BNE      |L1.19990|
                  |L1.19982|
004e0e  48c9              LDR      r0,|L1.20788|
004e10  8800              LDRH     r0,[r0,#0]  ; speedChrgCurr
004e12  f8a40046          STRH     r0,[r4,#0x46]
                  |L1.19990|
;;;8161   if(vz1_stat==vz1sWRK) IZMAX_=UZ_IMAX;
004e16  f8940026          LDRB     r0,[r4,#0x26]  ; vz1_stat
004e1a  280a              CMP      r0,#0xa
004e1c  d103              BNE      |L1.20006|
004e1e  48c6              LDR      r0,|L1.20792|
004e20  8800              LDRH     r0,[r0,#0]  ; UZ_IMAX
004e22  f8a40046          STRH     r0,[r4,#0x46]
                  |L1.20006|
;;;8162   if(vz2_stat==vz2sWRK1) IZMAX_=FZ_IMAX1;
004e26  f8940029          LDRB     r0,[r4,#0x29]  ; vz2_stat
004e2a  280a              CMP      r0,#0xa
004e2c  d103              BNE      |L1.20022|
004e2e  49c3              LDR      r1,|L1.20796|
004e30  8809              LDRH     r1,[r1,#0]  ; FZ_IMAX1
004e32  f8a41046          STRH     r1,[r4,#0x46]
                  |L1.20022|
;;;8163   if(vz2_stat==vz2sWRK2) IZMAX_=FZ_IMAX2;
004e36  280b              CMP      r0,#0xb
004e38  d103              BNE      |L1.20034|
004e3a  48c1              LDR      r0,|L1.20800|
004e3c  8800              LDRH     r0,[r0,#0]  ; FZ_IMAX2
004e3e  f8a40046          STRH     r0,[r4,#0x46]
                  |L1.20034|
;;;8164   //if(spc_stat==spcVZ) IZMAX_=IMAX_VZ;
;;;8165   
;;;8166   if(cntrl_stat_blok_cnt)cntrl_stat_blok_cnt--;
004e42  f9b4006e          LDRSH    r0,[r4,#0x6e]  ; cntrl_stat_blok_cnt
004e46  b118              CBZ      r0,|L1.20048|
004e48  f1a00001          SUB      r0,r0,#1
004e4c  f8a4006e          STRH     r0,[r4,#0x6e]
                  |L1.20048|
;;;8167   if(cntrl_stat_blok_cnt_)cntrl_stat_blok_cnt_--;
004e50  f9b40070          LDRSH    r0,[r4,#0x70]  ; cntrl_stat_blok_cnt_
004e54  b118              CBZ      r0,|L1.20062|
004e56  f1a00001          SUB      r0,r0,#1
004e5a  f8a40070          STRH     r0,[r4,#0x70]
                  |L1.20062|
;;;8168   
;;;8169   if((bat[0]._temper_stat&0x03)||(bat[1]._temper_stat&0x03))IZMAX_=IZMAX_/10;
004e5e  48ac              LDR      r0,|L1.20752|
004e60  f04f080a          MOV      r8,#0xa               ;8161
004e64  f890103f          LDRB     r1,[r0,#0x3f]  ; bat
004e68  0789              LSLS     r1,r1,#30
004e6a  d103              BNE      |L1.20084|
004e6c  f890008b          LDRB     r0,[r0,#0x8b]  ; bat
004e70  0780              LSLS     r0,r0,#30
004e72  d005              BEQ      |L1.20096|
                  |L1.20084|
004e74  f8b40046          LDRH     r0,[r4,#0x46]  ; IZMAX_
004e78  fbb0f0f8          UDIV     r0,r0,r8
004e7c  f8a40046          STRH     r0,[r4,#0x46]
                  |L1.20096|
;;;8170   
;;;8171   
;;;8172   #ifdef UKU_220_IPS_TERMOKOMPENSAT
;;;8173   if((REG_SPEED<1)||(REG_SPEED>5)) REG_SPEED=1;
004e80  48b0              LDR      r0,|L1.20804|
004e82  2601              MOVS     r6,#1
004e84  f9b01000          LDRSH    r1,[r0,#0]  ; REG_SPEED
004e88  1e49              SUBS     r1,r1,#1
004e8a  2905              CMP      r1,#5
004e8c  d300              BCC      |L1.20112|
004e8e  8006              STRH     r6,[r0,#0]
                  |L1.20112|
;;;8174   if(ch_cnt0<(10*REG_SPEED))
004e90  f9b00000          LDRSH    r0,[r0,#0]  ; REG_SPEED
004e94  2500              MOVS     r5,#0                 ;8160
004e96  eb000180          ADD      r1,r0,r0,LSL #2
004e9a  7b60              LDRB     r0,[r4,#0xd]  ; ch_cnt0
004e9c  ebb00f41          CMP      r0,r1,LSL #1
004ea0  da08              BGE      |L1.20148|
;;;8175   	{
;;;8176   	ch_cnt0++;
004ea2  f1000001          ADD      r0,r0,#1
004ea6  b2c0              UXTB     r0,r0
004ea8  7360              STRB     r0,[r4,#0xd]
;;;8177   	if(ch_cnt0>=10*REG_SPEED)
004eaa  ebb00f41          CMP      r0,r1,LSL #1
004eae  db01              BLT      |L1.20148|
;;;8178   		{
;;;8179   		ch_cnt0=0;
004eb0  7365              STRB     r5,[r4,#0xd]
;;;8180   		b1Hz_ch=1;
004eb2  73a6              STRB     r6,[r4,#0xe]
                  |L1.20148|
;;;8181   		}
;;;8182   	}
;;;8183   #endif
;;;8184   #ifndef UKU_220_IPS_TERMOKOMPENSAT
;;;8185   if(ch_cnt0<10)
;;;8186   	{
;;;8187   	ch_cnt0++;
;;;8188   	if(ch_cnt0>=10)
;;;8189   		{
;;;8190   		ch_cnt0=0;
;;;8191   		b1Hz_ch=1;
;;;8192   		}
;;;8193   	}
;;;8194   #endif
;;;8195   
;;;8196   
;;;8197   if(mess_find_unvol(MESS2CNTRL_HNDL))
004eb4  20e1              MOVS     r0,#0xe1
004eb6  f7fffffe          BL       mess_find_unvol
;;;8198   	{
;;;8199   	if(mess_data[0]==PARAM_CNTRL_STAT_PLUS)
;;;8200   		{
;;;8201   		cntrl_stat_new=cntrl_stat_old+mess_data[1];
;;;8202   		}
;;;8203   	else if(mess_data[0]==PARAM_CNTRL_STAT_MINUS)
;;;8204   		{
;;;8205   		cntrl_stat_new=cntrl_stat_old-mess_data[1];
;;;8206   		}
;;;8207   	else if(mess_data[0]==PARAM_CNTRL_STAT_STEP_DOWN)
;;;8208   		{
;;;8209   		static char cntrlStatIsDownCnt;
;;;8210   		cntrl_stat--;
;;;8211   
;;;8212   		if((cntrl_stat<=30)||(load_U<USIGN))
;;;8213   			{
;;;8214   			if(++cntrlStatIsDownCnt==250)mess_send(MESS2KB_HNDL,PARAM_CNTRL_IS_DOWN,0,10);
;;;8215   			}
;;;8216   		else 
;;;8217   			{
;;;8218   			cntrlStatIsDownCnt=0;
;;;8219   			}
;;;8220   
;;;8221   		}
;;;8222   	else if(mess_data[0]==PARAM_CNTRL_STAT_SET)
;;;8223   		{
;;;8224   		cntrl_stat_new=mess_data[1];
;;;8225   		}
;;;8226   
;;;8227   	else if(mess_data[0]==PARAM_CNTRL_STAT_FAST_REG)
;;;8228   		{
;;;8229   		#ifdef UKU_220_IPS_TERMOKOMPENSAT
;;;8230   		if(bps_U>u_necc)
004eba  f8dfc28c          LDR      r12,|L1.20808|
004ebe  4aa3              LDR      r2,|L1.20812|
;;;8231   			{
;;;8232   			cntrl_hndl_plazma=11;
;;;8233   			if(((bps_U-u_necc)>40)&&(cntrl_stat_new>0))cntrl_stat_new-=5;
;;;8234   			else if((cntrl_stat_new)&&b1Hz_ch)cntrl_stat_new--;
;;;8235   			}
;;;8236   		else if(bps_U<u_necc)
;;;8237   			{
;;;8238   			cntrl_hndl_plazma=12;	
;;;8239   			if(((u_necc-bps_U)>40)&&(cntrl_stat_new<1015))cntrl_stat_new+=5;
;;;8240   			else	if((cntrl_stat_new<1020)&&b1Hz_ch)cntrl_stat_new++;
;;;8241   			}
;;;8242   		#elif defined(UKU_220)
;;;8243   		if(load_U>u_necc)
;;;8244   			{
;;;8245   			cntrl_hndl_plazma=13;
;;;8246   			if(((load_U-u_necc)>40)&&(cntrl_stat_new>0))cntrl_stat_new-=5;
;;;8247   			else if((cntrl_stat_new)&&b1Hz_ch)cntrl_stat_new--;
;;;8248   			}
;;;8249   		else if(load_U<u_necc)
;;;8250   			{
;;;8251   			cntrl_hndl_plazma=14;	
;;;8252   			if(((u_necc-load_U)>40)&&(cntrl_stat_new<1015))cntrl_stat_new+=5;
;;;8253   			else	if((cntrl_stat_new<1020)&&b1Hz_ch)cntrl_stat_new++;
;;;8254   			}
;;;8255   		#elif defined(UKU_220_V2)
;;;8256   		if(load_U>u_necc)
;;;8257   			{
;;;8258   			cntrl_hndl_plazma=15;
;;;8259   			if(((load_U-u_necc)>40)&&(cntrl_stat_new>0))cntrl_stat_new-=5;
;;;8260   			else if((cntrl_stat_new)&&b1Hz_ch)cntrl_stat_new--;
;;;8261   			}
;;;8262   		else if(load_U<u_necc)
;;;8263   			{
;;;8264   			cntrl_hndl_plazma=16;	
;;;8265   			if(((u_necc-load_U)>40)&&(cntrl_stat_new<1015))cntrl_stat_new+=5;
;;;8266   			else	if((cntrl_stat_new<1020)&&b1Hz_ch)cntrl_stat_new++;
;;;8267   			}
;;;8268   		#else
;;;8269   
;;;8270   		if(load_U>u_necc)
;;;8271   			{
;;;8272   			cntrl_hndl_plazma=17;
;;;8273   			if(((load_U-u_necc)>10)&&(cntrl_stat_new>0))cntrl_stat_new-=5;
;;;8274   			else if((cntrl_stat_new)&&b1Hz_ch)cntrl_stat_new--;
;;;8275   			}
;;;8276   		else if(load_U<u_necc)
;;;8277   			{
;;;8278   			cntrl_hndl_plazma=18;	
;;;8279   			if(((u_necc-load_U)>10)&&(cntrl_stat_new<1015))cntrl_stat_new+=5;
;;;8280   			else	if((cntrl_stat_new<1020)&&b1Hz_ch)cntrl_stat_new++;
;;;8281   			}
;;;8282   		#endif	
;;;8283   	 	}
;;;8284   
;;;8285   	gran(&cntrl_stat_new,10,1010);			
;;;8286   	cntrl_stat_old=cntrl_stat_new;
;;;8287   	cntrl_stat=cntrl_stat_new;
;;;8288   	}
;;;8289   
;;;8290   #ifdef UKU_220_IPS_TERMOKOMPENSAT
;;;8291   else if((b1Hz_ch)&&((!bIBAT_SMKLBR)||(bps[8]._cnt>40)))
004ec0  f8df928c          LDR      r9,|L1.20816|
;;;8292   	{
;;;8293   	cntrl_stat_new=cntrl_stat_old;
;;;8294   	cntrl_hndl_plazma=19;
;;;8295   	if((Ibmax/10)>(2*IZMAX_))
;;;8296   		{
;;;8297   		cntrl_hndl_plazma=20;
;;;8298             if(cntrl_stat_blok_cnt)cntrl_stat_new--;
;;;8299   		else	cntrl_stat_new-=10;
;;;8300   		}		
;;;8301   	else if(((Ibmax/10)<(IZMAX_*2))&&(Ibmax>(IZMAX_*15)))
;;;8302   		{
;;;8303   		cntrl_hndl_plazma=21;
;;;8304             if(cntrl_stat_blok_cnt)cntrl_stat_new--;
;;;8305             else	cntrl_stat_new-=3;
;;;8306   		}   
;;;8307   	else if((Ibmax<(IZMAX_*15))&&((Ibmax/10)>IZMAX_))
;;;8308   		{
;;;8309   		cntrl_hndl_plazma=22;
;;;8310   		cntrl_stat_new--;
;;;8311   		}
;;;8312   		
;;;8313   	else if(bps_U<u_necc)
;;;8314   		{
;;;8315   		cntrl_hndl_plazma=23;
;;;8316   		if(bps_U<(u_necc-(UB0-UB20)))
;;;8317   			{
;;;8318   			cntrl_hndl_plazma=24;
;;;8319   			if(Ibmax<0)
;;;8320   				{
;;;8321   				cntrl_hndl_plazma=25;
;;;8322                       if(cntrl_stat_blok_cnt)cntrl_stat_new++;
;;;8323   				else cntrl_stat_new+=10;
;;;8324   				}
;;;8325   			else if(Ibmax<(IZMAX_*5))
;;;8326   				{
;;;8327   				cntrl_hndl_plazma=26;
;;;8328                       if(cntrl_stat_blok_cnt)cntrl_stat_new++;
;;;8329   				else	cntrl_stat_new+=2;
;;;8330   				}
;;;8331   			else if(Ibmax<((IZMAX_*10)/*-10*/))//(Ibmax<((IZMAX_*95)/10))
;;;8332   				{
;;;8333   				cntrl_hndl_plazma=27;
;;;8334   				cntrl_stat_new++;
;;;8335   				}					
;;;8336   			}
;;;8337   		else if(bps_U<(u_necc-((UB0-UB20)/4)))
;;;8338   			{
;;;8339   			cntrl_hndl_plazma=28;
;;;8340   			if(Ibmax<(IZMAX_*5))
;;;8341   				{
;;;8342   				cntrl_hndl_plazma=29;
;;;8343                       if(cntrl_stat_blok_cnt)cntrl_stat_new++;
;;;8344   				else	cntrl_stat_new+=2;
;;;8345   				}
;;;8346   			else if(Ibmax<((IZMAX_*10)/*-10*/))//(Ibmax<((IZMAX_*95)/10))
;;;8347   				{
;;;8348   				cntrl_hndl_plazma=30;
;;;8349   				cntrl_stat_new++;
;;;8350   				}					
;;;8351   			}	
;;;8352   		else if(bps_U<(u_necc-1))
;;;8353   			{
;;;8354   			cntrl_hndl_plazma=31;
;;;8355   			if(Ibmax<((IZMAX_*10)/*-10*/))//(Ibmax<((IZMAX_*95)/10))
;;;8356   				{
;;;8357   				cntrl_hndl_plazma=32;
;;;8358   				cntrl_stat_new++;
;;;8359   				}					
;;;8360   			}					
;;;8361   		}	
;;;8362   	else if((bps_U>u_necc)/*&&(!cntrl_blok)*/)
;;;8363   		{ 	
;;;8364   		cntrl_hndl_plazma=33;
;;;8365   		if(bps_U>(u_necc+(UB0-UB20)))
;;;8366   			{
;;;8367   			cntrl_hndl_plazma=34;
;;;8368                  if(cntrl_stat_blok_cnt)cntrl_stat_new--;
;;;8369   			else	cntrl_stat_new-=10;
;;;8370   			}
;;;8371   		else if(bps_U>(u_necc+((UB0-UB20)/4)))
;;;8372   			{
;;;8373   			cntrl_hndl_plazma=35;
;;;8374                  if(cntrl_stat_blok_cnt)cntrl_stat_new--;
;;;8375   			else cntrl_stat_new-=2;
;;;8376   			}	
;;;8377   		else if(bps_U>(u_necc+1))
;;;8378   			{
;;;8379   			cntrl_hndl_plazma=36;
;;;8380   			cntrl_stat_new--;
;;;8381   			}					
;;;8382   		}
;;;8383   
;;;8384   	if((hv_vz_stat==hvsOFF)&&(vz1_stat==vz1sOFF)&&(vz2_stat==vz2sOFF))
;;;8385   		{
;;;8386   		if(((sk_stat[1]==1)&&(sk_stat_old[1]==0))&&(VZ_KIND==1))cntrl_stat_new=50;
;;;8387   		}
;;;8388   
;;;8389   	gran(&cntrl_stat_new,10,1010);			
;;;8390   	cntrl_stat_old=cntrl_stat_new;
;;;8391   	cntrl_stat=cntrl_stat_new;
;;;8392   	
;;;8393   	if(ICA_EN==0)
;;;8394   		{
;;;8395   		if(ica_cntrl_hndl_cnt)
004ec4  4fa3              LDR      r7,|L1.20820|
004ec6  2800              CMP      r0,#0                 ;8197
004ec8  d070              BEQ      |L1.20396|
004eca  49a3              LDR      r1,|L1.20824|
004ecc  6808              LDR      r0,[r1,#0]            ;8199  ; mess_data
004ece  2864              CMP      r0,#0x64              ;8199
004ed0  d008              BEQ      |L1.20196|
004ed2  2869              CMP      r0,#0x69              ;8203
004ed4  d00c              BEQ      |L1.20208|
004ed6  286e              CMP      r0,#0x6e              ;8207
004ed8  d011              BEQ      |L1.20222|
004eda  28e5              CMP      r0,#0xe5              ;8222
004edc  d02d              BEQ      |L1.20282|
004ede  28e6              CMP      r0,#0xe6              ;8227
004ee0  d02f              BEQ      |L1.20290|
004ee2  e06f              B        |L1.20420|
                  |L1.20196|
004ee4  6848              LDR      r0,[r1,#4]            ;8201  ; mess_data
004ee6  8de1              LDRH     r1,[r4,#0x2e]         ;8201  ; cntrl_stat_old
004ee8  4408              ADD      r0,r0,r1              ;8201
004eea  f8a40042          STRH     r0,[r4,#0x42]         ;8201
004eee  e069              B        |L1.20420|
                  |L1.20208|
004ef0  6848              LDR      r0,[r1,#4]            ;8205  ; mess_data
004ef2  8de1              LDRH     r1,[r4,#0x2e]         ;8205  ; cntrl_stat_old
004ef4  eba10000          SUB      r0,r1,r0              ;8205
004ef8  f8a40042          STRH     r0,[r4,#0x42]         ;8205
004efc  e062              B        |L1.20420|
                  |L1.20222|
004efe  8da0              LDRH     r0,[r4,#0x2c]         ;8210  ; cntrl_stat
004f00  f1a00001          SUB      r0,r0,#1              ;8210
004f04  b200              SXTH     r0,r0                 ;8210
004f06  85a0              STRH     r0,[r4,#0x2c]         ;8210
004f08  281e              CMP      r0,#0x1e              ;8212
004f0a  dd07              BLE      |L1.20252|
004f0c  4893              LDR      r0,|L1.20828|
004f0e  4994              LDR      r1,|L1.20832|
004f10  f9b00000          LDRSH    r0,[r0,#0]            ;8212  ; load_U
004f14  f9b11000          LDRSH    r1,[r1,#0]            ;8212  ; USIGN
004f18  4288              CMP      r0,r1                 ;8212
004f1a  da0c              BGE      |L1.20278|
                  |L1.20252|
004f1c  79e0              LDRB     r0,[r4,#7]            ;8214  ; cntrlStatIsDownCnt
004f1e  1c40              ADDS     r0,r0,#1              ;8214
004f20  b2c0              UXTB     r0,r0                 ;8214
004f22  71e0              STRB     r0,[r4,#7]            ;8214
004f24  28fa              CMP      r0,#0xfa              ;8214
004f26  d14d              BNE      |L1.20420|
004f28  230a              MOVS     r3,#0xa               ;8214
004f2a  2200              MOVS     r2,#0                 ;8214
004f2c  21e7              MOVS     r1,#0xe7              ;8214
004f2e  20e6              MOVS     r0,#0xe6              ;8214
004f30  f7fffffe          BL       mess_send
004f34  e046              B        |L1.20420|
                  |L1.20278|
004f36  71e5              STRB     r5,[r4,#7]            ;8218
004f38  e044              B        |L1.20420|
                  |L1.20282|
004f3a  6848              LDR      r0,[r1,#4]            ;8224  ; mess_data
004f3c  f8a40042          STRH     r0,[r4,#0x42]         ;8224
004f40  e040              B        |L1.20420|
                  |L1.20290|
004f42  f9bc0000          LDRSH    r0,[r12,#0]           ;8230  ; bps_U
004f46  f9b21000          LDRSH    r1,[r2,#0]            ;8230  ; u_necc
004f4a  4288              CMP      r0,r1                 ;8230
004f4c  dd1a              BLE      |L1.20356|
004f4e  f04f020b          MOV      r2,#0xb               ;8232
004f52  f8842025          STRB     r2,[r4,#0x25]         ;8232
004f56  eba00001          SUB      r0,r0,r1              ;8233
004f5a  2828              CMP      r0,#0x28              ;8233
004f5c  dd08              BLE      |L1.20336|
004f5e  f9b40042          LDRSH    r0,[r4,#0x42]         ;8233  ; cntrl_stat_new
004f62  2800              CMP      r0,#0                 ;8233
004f64  dd04              BLE      |L1.20336|
004f66  f1a00005          SUB      r0,r0,#5              ;8233
004f6a  f8a40042          STRH     r0,[r4,#0x42]         ;8233
004f6e  e029              B        |L1.20420|
                  |L1.20336|
004f70  f9b40042          LDRSH    r0,[r4,#0x42]         ;8234  ; cntrl_stat_new
004f74  b330              CBZ      r0,|L1.20420|
004f76  7ba1              LDRB     r1,[r4,#0xe]          ;8234  ; b1Hz_ch
004f78  b321              CBZ      r1,|L1.20420|
004f7a  f1a00001          SUB      r0,r0,#1              ;8234
004f7e  f8a40042          STRH     r0,[r4,#0x42]         ;8234
004f82  e01f              B        |L1.20420|
                  |L1.20356|
004f84  da1e              BGE      |L1.20420|
004f86  f04f020c          MOV      r2,#0xc               ;8238
004f8a  f8842025          STRB     r2,[r4,#0x25]         ;8238
004f8e  eba10000          SUB      r0,r1,r0              ;8239
004f92  2828              CMP      r0,#0x28              ;8239
004f94  dd0b              BLE      |L1.20398|
004f96  f9b40042          LDRSH    r0,[r4,#0x42]         ;8239  ; cntrl_stat_new
004f9a  f24031f7          MOV      r1,#0x3f7             ;8239
004f9e  4288              CMP      r0,r1                 ;8239
004fa0  da05              BGE      |L1.20398|
004fa2  f1000005          ADD      r0,r0,#5              ;8239
004fa6  f8a40042          STRH     r0,[r4,#0x42]         ;8239
004faa  e00b              B        |L1.20420|
                  |L1.20396|
004fac  e016              B        |L1.20444|
                  |L1.20398|
004fae  f9b40042          LDRSH    r0,[r4,#0x42]         ;8240  ; cntrl_stat_new
004fb2  f5b07f7f          CMP      r0,#0x3fc             ;8240
004fb6  da05              BGE      |L1.20420|
004fb8  7ba1              LDRB     r1,[r4,#0xe]          ;8240  ; b1Hz_ch
004fba  b119              CBZ      r1,|L1.20420|
004fbc  f1000001          ADD      r0,r0,#1              ;8240
004fc0  f8a40042          STRH     r0,[r4,#0x42]         ;8240
                  |L1.20420|
004fc4  484f              LDR      r0,|L1.20740|
004fc6  f24032f2          MOV      r2,#0x3f2             ;8285
004fca  210a              MOVS     r1,#0xa               ;8285
004fcc  3042              ADDS     r0,r0,#0x42           ;8285
004fce  f7fffffe          BL       gran
004fd2  f8b40042          LDRH     r0,[r4,#0x42]         ;8286  ; cntrl_stat_new
004fd6  85e0              STRH     r0,[r4,#0x2e]         ;8286
004fd8  85a0              STRH     r0,[r4,#0x2c]         ;8287
                  |L1.20442|
004fda  e199              B        |L1.21264|
                  |L1.20444|
004fdc  7ba0              LDRB     r0,[r4,#0xe]          ;8291  ; b1Hz_ch
004fde  2800              CMP      r0,#0                 ;8291
004fe0  d0fb              BEQ      |L1.20442|
004fe2  4860              LDR      r0,|L1.20836|
004fe4  8800              LDRH     r0,[r0,#0]            ;8291  ; bIBAT_SMKLBR
004fe6  b118              CBZ      r0,|L1.20464|
004fe8  f89902e3          LDRB     r0,[r9,#0x2e3]        ;8291  ; bps
004fec  2828              CMP      r0,#0x28              ;8291
004fee  d9f4              BLS      |L1.20442|
                  |L1.20464|
004ff0  f1040424          ADD      r4,r4,#0x24           ;8293
004ff4  f9b4000a          LDRSH    r0,[r4,#0xa]          ;8293  ; cntrl_stat_old
004ff8  83e0              STRH     r0,[r4,#0x1e]         ;8293
004ffa  f04f0113          MOV      r1,#0x13              ;8294
004ffe  7061              STRB     r1,[r4,#1]            ;8294
005000  f9b41020          LDRSH    r1,[r4,#0x20]         ;8295  ; Ibmax
005004  8c63              LDRH     r3,[r4,#0x22]         ;8295  ; IZMAX_
005006  fb91f8f8          SDIV     r8,r1,r8              ;8295
00500a  f1a40424          SUB      r4,r4,#0x24           ;8295
00500e  ebb80f43          CMP      r8,r3,LSL #1          ;8295
005012  dd10              BLE      |L1.20534|
005014  f04f0114          MOV      r1,#0x14              ;8297
005018  f8841025          STRB     r1,[r4,#0x25]         ;8297
00501c  f8b4106e          LDRH     r1,[r4,#0x6e]         ;8298  ; cntrl_stat_blok_cnt
005020  b121              CBZ      r1,|L1.20524|
005022  f1a00001          SUB      r0,r0,#1              ;8298
005026  f8a40042          STRH     r0,[r4,#0x42]         ;8298
00502a  e139              B        |L1.21152|
                  |L1.20524|
00502c  f1a0000a          SUB      r0,r0,#0xa            ;8299
005030  f8a40042          STRH     r0,[r4,#0x42]         ;8299
005034  e134              B        |L1.21152|
                  |L1.20534|
005036  da14              BGE      |L1.20578|
005038  ebc31a03          RSB      r10,r3,r3,LSL #4      ;8301
00503c  458a              CMP      r10,r1                ;8301
00503e  da10              BGE      |L1.20578|
005040  f04f0115          MOV      r1,#0x15              ;8303
005044  f8841025          STRB     r1,[r4,#0x25]         ;8303
005048  f8b4106e          LDRH     r1,[r4,#0x6e]         ;8304  ; cntrl_stat_blok_cnt
00504c  b121              CBZ      r1,|L1.20568|
00504e  f1a00001          SUB      r0,r0,#1              ;8304
005052  f8a40042          STRH     r0,[r4,#0x42]         ;8304
005056  e123              B        |L1.21152|
                  |L1.20568|
005058  f1a00003          SUB      r0,r0,#3              ;8305
00505c  f8a40042          STRH     r0,[r4,#0x42]         ;8305
005060  e11e              B        |L1.21152|
                  |L1.20578|
005062  ebc31a03          RSB      r10,r3,r3,LSL #4      ;8307
005066  458a              CMP      r10,r1                ;8307
005068  dd0a              BLE      |L1.20608|
00506a  4598              CMP      r8,r3                 ;8307
00506c  dd08              BLE      |L1.20608|
00506e  f04f0116          MOV      r1,#0x16              ;8309
005072  f8841025          STRB     r1,[r4,#0x25]         ;8309
005076  f1a00001          SUB      r0,r0,#1              ;8310
00507a  f8a40042          STRH     r0,[r4,#0x42]         ;8310
00507e  e10f              B        |L1.21152|
                  |L1.20608|
005080  f9bcc000          LDRSH    r12,[r12,#0]          ;8313  ; bps_U
005084  f9b22000          LDRSH    r2,[r2,#0]            ;8313  ; u_necc
005088  f8df80dc          LDR      r8,|L1.20840|
00508c  f8dfb0dc          LDR      r11,|L1.20844|
005090  4594              CMP      r12,r2                ;8313
005092  da6d              BGE      |L1.20848|
005094  f04f0a17          MOV      r10,#0x17             ;8315
005098  f884a025          STRB     r10,[r4,#0x25]        ;8315
00509c  f9b88000          LDRSH    r8,[r8,#0]            ;8316  ; UB0
0050a0  f9bba000          LDRSH    r10,[r11,#0]          ;8316  ; UB20
0050a4  eba8080a          SUB      r8,r8,r10             ;8316
0050a8  eba20a08          SUB      r10,r2,r8             ;8316
0050ac  45e2              CMP      r10,r12               ;8316
0050ae  dd72              BLE      |L1.20886|
0050b0  f04f0218          MOV      r2,#0x18              ;8318
0050b4  f8842025          STRB     r2,[r4,#0x25]         ;8318
0050b8  2900              CMP      r1,#0                 ;8319
0050ba  da10              BGE      |L1.20702|
0050bc  f04f0119          MOV      r1,#0x19              ;8321
0050c0  f8841025          STRB     r1,[r4,#0x25]         ;8321
0050c4  f8b4106e          LDRH     r1,[r4,#0x6e]         ;8322  ; cntrl_stat_blok_cnt
0050c8  b121              CBZ      r1,|L1.20692|
0050ca  f1000001          ADD      r0,r0,#1              ;8322
0050ce  f8a40042          STRH     r0,[r4,#0x42]         ;8322
0050d2  e0e5              B        |L1.21152|
                  |L1.20692|
0050d4  f100000a          ADD      r0,r0,#0xa            ;8323
0050d8  f8a40042          STRH     r0,[r4,#0x42]         ;8323
0050dc  e0e0              B        |L1.21152|
                  |L1.20702|
0050de  eb030283          ADD      r2,r3,r3,LSL #2       ;8325
0050e2  428a              CMP      r2,r1                 ;8325
0050e4  dd4a              BLE      |L1.20860|
0050e6  f04f011a          MOV      r1,#0x1a              ;8327
0050ea  f8841025          STRB     r1,[r4,#0x25]         ;8327
0050ee  f8b4106e          LDRH     r1,[r4,#0x6e]         ;8328  ; cntrl_stat_blok_cnt
0050f2  b121              CBZ      r1,|L1.20734|
0050f4  f1000001          ADD      r0,r0,#1              ;8328
0050f8  f8a40042          STRH     r0,[r4,#0x42]         ;8328
0050fc  e0d0              B        |L1.21152|
                  |L1.20734|
0050fe  e038              B        |L1.20850|
                  |L1.20736|
                          DCD      u_necc_up
                  |L1.20740|
                          DCD      ||area_number.25||
                  |L1.20744|
                          DCD      Isumm
                  |L1.20748|
                          DCD      Isumm_
                  |L1.20752|
                          DCD      bat
                  |L1.20756|
                          DCD      IMAX
                  |L1.20760|
                          DCD      IMIN
                  |L1.20764|
                          DCD      num_necc
                  |L1.20768|
                          DCD      PAR
                  |L1.20772|
                          DCD      NUMIST
                  |L1.20776|
                          DCD      IZMAX
                  |L1.20780|
                          DCD      speedChIsOn
                  |L1.20784|
                          DCD      sp_ch_stat
                  |L1.20788|
                          DCD      speedChrgCurr
                  |L1.20792|
                          DCD      UZ_IMAX
                  |L1.20796|
                          DCD      FZ_IMAX1
                  |L1.20800|
                          DCD      FZ_IMAX2
                  |L1.20804|
                          DCD      REG_SPEED
                  |L1.20808|
                          DCD      bps_U
                  |L1.20812|
                          DCD      u_necc
                  |L1.20816|
                          DCD      bps
                  |L1.20820|
                          DCD      ica_cntrl_hndl_cnt
                  |L1.20824|
                          DCD      mess_data
                  |L1.20828|
                          DCD      load_U
                  |L1.20832|
                          DCD      USIGN
                  |L1.20836|
                          DCD      bIBAT_SMKLBR
                  |L1.20840|
                          DCD      UB0
                  |L1.20844|
                          DCD      UB20
                  |L1.20848|
005170  e053              B        |L1.21018|
                  |L1.20850|
005172  f1000002          ADD      r0,r0,#2              ;8329
005176  f8a40042          STRH     r0,[r4,#0x42]         ;8329
00517a  e091              B        |L1.21152|
                  |L1.20860|
00517c  ebb10f42          CMP      r1,r2,LSL #1          ;8331
005180  da07              BGE      |L1.20882|
005182  f04f011b          MOV      r1,#0x1b              ;8333
005186  f8841025          STRB     r1,[r4,#0x25]         ;8333
00518a  f1000001          ADD      r0,r0,#1              ;8334
00518e  f8a40042          STRH     r0,[r4,#0x42]         ;8334
                  |L1.20882|
005192  e085              B        |L1.21152|
005194  e7ff              B        |L1.20886|
                  |L1.20886|
005196  ea4f7ae8          ASR      r10,r8,#31            ;8337
00519a  eb08789a          ADD      r8,r8,r10,LSR #30     ;8337
00519e  eba208a8          SUB      r8,r2,r8,ASR #2       ;8337
0051a2  45e0              CMP      r8,r12                ;8337
0051a4  dd24              BLE      |L1.20976|
0051a6  f04f021c          MOV      r2,#0x1c              ;8339
0051aa  f8842025          STRB     r2,[r4,#0x25]         ;8339
0051ae  eb030283          ADD      r2,r3,r3,LSL #2       ;8340
0051b2  428a              CMP      r2,r1                 ;8340
0051b4  dd10              BLE      |L1.20952|
0051b6  f04f011d          MOV      r1,#0x1d              ;8342
0051ba  f8841025          STRB     r1,[r4,#0x25]         ;8342
0051be  f8b4106e          LDRH     r1,[r4,#0x6e]         ;8343  ; cntrl_stat_blok_cnt
0051c2  b121              CBZ      r1,|L1.20942|
0051c4  f1000001          ADD      r0,r0,#1              ;8343
0051c8  f8a40042          STRH     r0,[r4,#0x42]         ;8343
0051cc  e068              B        |L1.21152|
                  |L1.20942|
0051ce  f1000002          ADD      r0,r0,#2              ;8344
0051d2  f8a40042          STRH     r0,[r4,#0x42]         ;8344
0051d6  e063              B        |L1.21152|
                  |L1.20952|
0051d8  ebb10f42          CMP      r1,r2,LSL #1          ;8346
0051dc  da60              BGE      |L1.21152|
0051de  f04f011e          MOV      r1,#0x1e              ;8348
0051e2  f8841025          STRB     r1,[r4,#0x25]         ;8348
0051e6  f1000001          ADD      r0,r0,#1              ;8349
0051ea  f8a40042          STRH     r0,[r4,#0x42]         ;8349
0051ee  e057              B        |L1.21152|
                  |L1.20976|
0051f0  1e52              SUBS     r2,r2,#1              ;8352
0051f2  4594              CMP      r12,r2                ;8352
0051f4  da54              BGE      |L1.21152|
0051f6  f04f021f          MOV      r2,#0x1f              ;8354
0051fa  f8842025          STRB     r2,[r4,#0x25]         ;8354
0051fe  eb030283          ADD      r2,r3,r3,LSL #2       ;8355
005202  ebb10f42          CMP      r1,r2,LSL #1          ;8355
005206  da4b              BGE      |L1.21152|
005208  f04f0120          MOV      r1,#0x20              ;8357
00520c  f8841025          STRB     r1,[r4,#0x25]         ;8357
005210  f1000001          ADD      r0,r0,#1              ;8358
005214  f8a40042          STRH     r0,[r4,#0x42]         ;8358
005218  e042              B        |L1.21152|
                  |L1.21018|
00521a  dd41              BLE      |L1.21152|
00521c  f04f0121          MOV      r1,#0x21              ;8364
005220  f8841025          STRB     r1,[r4,#0x25]         ;8364
005224  f9b81000          LDRSH    r1,[r8,#0]            ;8365  ; UB0
005228  f9bb3000          LDRSH    r3,[r11,#0]           ;8365  ; UB20
00522c  eba10103          SUB      r1,r1,r3              ;8365
005230  eb010302          ADD      r3,r1,r2              ;8365
005234  4563              CMP      r3,r12                ;8365
005236  da10              BGE      |L1.21082|
005238  f04f0122          MOV      r1,#0x22              ;8367
00523c  f8841025          STRB     r1,[r4,#0x25]         ;8367
005240  f8b4106e          LDRH     r1,[r4,#0x6e]         ;8368  ; cntrl_stat_blok_cnt
005244  b121              CBZ      r1,|L1.21072|
005246  f1a00001          SUB      r0,r0,#1              ;8368
00524a  f8a40042          STRH     r0,[r4,#0x42]         ;8368
00524e  e027              B        |L1.21152|
                  |L1.21072|
005250  f1a0000a          SUB      r0,r0,#0xa            ;8369
005254  f8a40042          STRH     r0,[r4,#0x42]         ;8369
005258  e022              B        |L1.21152|
                  |L1.21082|
00525a  17cb              ASRS     r3,r1,#31             ;8371
00525c  eb017193          ADD      r1,r1,r3,LSR #30      ;8371
005260  eb0201a1          ADD      r1,r2,r1,ASR #2       ;8371
005264  4561              CMP      r1,r12                ;8371
005266  da10              BGE      |L1.21130|
005268  f04f0123          MOV      r1,#0x23              ;8373
00526c  f8841025          STRB     r1,[r4,#0x25]         ;8373
005270  f8b4106e          LDRH     r1,[r4,#0x6e]         ;8374  ; cntrl_stat_blok_cnt
005274  b121              CBZ      r1,|L1.21120|
005276  f1a00001          SUB      r0,r0,#1              ;8374
00527a  f8a40042          STRH     r0,[r4,#0x42]         ;8374
00527e  e00f              B        |L1.21152|
                  |L1.21120|
005280  f1a00002          SUB      r0,r0,#2              ;8375
005284  f8a40042          STRH     r0,[r4,#0x42]         ;8375
005288  e00a              B        |L1.21152|
                  |L1.21130|
00528a  1c52              ADDS     r2,r2,#1              ;8377
00528c  4594              CMP      r12,r2                ;8377
00528e  dd07              BLE      |L1.21152|
005290  f04f0124          MOV      r1,#0x24              ;8379
005294  f8841025          STRB     r1,[r4,#0x25]         ;8379
005298  f1a00001          SUB      r0,r0,#1              ;8380
00529c  f8a40042          STRH     r0,[r4,#0x42]         ;8380
                  |L1.21152|
0052a0  48ff              LDR      r0,|L1.22176|
0052a2  f8941026          LDRB     r1,[r4,#0x26]         ;8384  ; vz1_stat
0052a6  7800              LDRB     r0,[r0,#0]            ;8384  ; hv_vz_stat
0052a8  4308              ORRS     r0,r0,r1              ;8384
0052aa  f8941029          LDRB     r1,[r4,#0x29]         ;8384  ; vz2_stat
0052ae  4308              ORRS     r0,r0,r1              ;8384
0052b0  d10e              BNE      |L1.21200|
0052b2  48fc              LDR      r0,|L1.22180|
0052b4  7840              LDRB     r0,[r0,#1]            ;8386  ; sk_stat
0052b6  2801              CMP      r0,#1                 ;8386
0052b8  d10a              BNE      |L1.21200|
0052ba  48fb              LDR      r0,|L1.22184|
0052bc  7840              LDRB     r0,[r0,#1]            ;8386  ; sk_stat_old
0052be  b938              CBNZ     r0,|L1.21200|
0052c0  48fa              LDR      r0,|L1.22188|
0052c2  8800              LDRH     r0,[r0,#0]            ;8386  ; VZ_KIND
0052c4  2801              CMP      r0,#1                 ;8386
0052c6  d103              BNE      |L1.21200|
0052c8  f04f0032          MOV      r0,#0x32              ;8386
0052cc  f8a40042          STRH     r0,[r4,#0x42]         ;8386
                  |L1.21200|
0052d0  f24032f2          MOV      r2,#0x3f2             ;8389
0052d4  210a              MOVS     r1,#0xa               ;8389
0052d6  48f6              LDR      r0,|L1.22192|
0052d8  f7fffffe          BL       gran
0052dc  f8b40042          LDRH     r0,[r4,#0x42]         ;8390  ; cntrl_stat_new
0052e0  85e0              STRH     r0,[r4,#0x2e]         ;8390
0052e2  85a0              STRH     r0,[r4,#0x2c]         ;8391
0052e4  48f3              LDR      r0,|L1.22196|
0052e6  f9b00000          LDRSH    r0,[r0,#0]            ;8393  ; ICA_EN
0052ea  b938              CBNZ     r0,|L1.21244|
0052ec  8839              LDRH     r1,[r7,#0]  ; ica_cntrl_hndl_cnt
0052ee  b129              CBZ      r1,|L1.21244|
;;;8396   			{
;;;8397   			cntrl_stat = ica_cntrl_hndl;
0052f0  49f1              LDR      r1,|L1.22200|
0052f2  8809              LDRH     r1,[r1,#0]  ; ica_cntrl_hndl
0052f4  85a1              STRH     r1,[r4,#0x2c]
;;;8398   			cntrl_stat_new = ica_cntrl_hndl;//=10*PWM_START;
0052f6  f8a41042          STRH     r1,[r4,#0x42]
;;;8399   			cntrl_stat_old = ica_cntrl_hndl;//=10*PWM_START;
0052fa  85e1              STRH     r1,[r4,#0x2e]
                  |L1.21244|
;;;8400   			}
;;;8401   		}
;;;8402   	
;;;8403   	if((ICA_EN==1)||(ICA_EN==2))
0052fc  2801              CMP      r0,#1
0052fe  d001              BEQ      |L1.21252|
005300  2802              CMP      r0,#2
005302  d105              BNE      |L1.21264|
                  |L1.21252|
;;;8404   		{
;;;8405   		cntrl_stat=cntrl_stat_new+ica_u_necc;
005304  49ed              LDR      r1,|L1.22204|
005306  f8b40042          LDRH     r0,[r4,#0x42]  ; cntrl_stat_new
00530a  8809              LDRH     r1,[r1,#0]  ; ica_u_necc
00530c  4408              ADD      r0,r0,r1
00530e  85a0              STRH     r0,[r4,#0x2c]
                  |L1.21264|
;;;8406   		}			
;;;8407   	}
;;;8408   #else
;;;8409   else if((b1Hz_ch)&&((!bIBAT_SMKLBR)||(bps[8]._cnt>40)))
;;;8410   	{
;;;8411   	cntrl_hndl_plazma=37;
;;;8412   	cntrl_stat_new=cntrl_stat_old;
;;;8413   	
;;;8414   	if((Ibmax/10)>(2*IZMAX_))
;;;8415   		{
;;;8416   		cntrl_hndl_plazma=38;
;;;8417             if(cntrl_stat_blok_cnt)cntrl_stat_new--;
;;;8418   		else	cntrl_stat_new-=10;
;;;8419   		}		
;;;8420   	else if(((Ibmax/10)<(IZMAX_*2))&&(Ibmax>(IZMAX_*15)))
;;;8421   		{
;;;8422   		cntrl_hndl_plazma=39;
;;;8423             if(cntrl_stat_blok_cnt)cntrl_stat_new--;
;;;8424             else	cntrl_stat_new-=3;
;;;8425   		}   
;;;8426   	else if((Ibmax<(IZMAX_*15))&&((Ibmax/10)>IZMAX_))
;;;8427   		{
;;;8428   		cntrl_hndl_plazma=40;
;;;8429   		cntrl_stat_new--;
;;;8430   		}
;;;8431   		
;;;8432   	else if(load_U<u_necc)
;;;8433   		{
;;;8434   		cntrl_hndl_plazma=41;
;;;8435   		if(load_U<(u_necc-(UB0-UB20)))
;;;8436   			{
;;;8437   			cntrl_hndl_plazma=42;
;;;8438   			if(Ibmax<0)
;;;8439   				{
;;;8440   				cntrl_hndl_plazma=43;
;;;8441                       if(cntrl_stat_blok_cnt)cntrl_stat_new++;
;;;8442   				else cntrl_stat_new+=10;
;;;8443   				}
;;;8444   			else if(Ibmax<(IZMAX_*5))
;;;8445   				{
;;;8446   				cntrl_hndl_plazma=44;
;;;8447                       if(cntrl_stat_blok_cnt)cntrl_stat_new++;
;;;8448   				else	cntrl_stat_new+=2;
;;;8449   				}
;;;8450   			else if(Ibmax<((IZMAX_*95)/10))
;;;8451   				{
;;;8452   				cntrl_hndl_plazma=45;
;;;8453   				cntrl_stat_new++;
;;;8454   				}					
;;;8455   			}
;;;8456   		else if(load_U<(u_necc-((UB0-UB20)/4)))
;;;8457   			{
;;;8458   			cntrl_hndl_plazma=46;
;;;8459   			if(Ibmax<(IZMAX_*5))
;;;8460   				{
;;;8461   				cntrl_hndl_plazma=47;
;;;8462                       if(cntrl_stat_blok_cnt)cntrl_stat_new++;
;;;8463   				else	cntrl_stat_new+=2;
;;;8464   				}
;;;8465   			else if(Ibmax<((IZMAX_*95)/10))
;;;8466   				{
;;;8467   				cntrl_hndl_plazma=48;
;;;8468   				cntrl_stat_new++;
;;;8469   				}					
;;;8470   			}	
;;;8471   		else if(load_U<(u_necc-1))
;;;8472   			{
;;;8473   			cntrl_hndl_plazma=49;
;;;8474   			if(Ibmax<((IZMAX_*95)/10))
;;;8475   				{
;;;8476   				cntrl_hndl_plazma=50;
;;;8477   				cntrl_stat_new++;
;;;8478   				}					
;;;8479   			}					
;;;8480   		}	
;;;8481   	else if((load_U>u_necc)/*&&(!cntrl_blok)*/)
;;;8482   		{
;;;8483   		cntrl_hndl_plazma=51;
;;;8484   		if(load_U>(u_necc+(UB0-UB20)))
;;;8485   			{
;;;8486   			cntrl_hndl_plazma=52;
;;;8487                  if(cntrl_stat_blok_cnt)cntrl_stat_new--;
;;;8488   			else	cntrl_stat_new-=10;
;;;8489   			}
;;;8490   		else if(load_U>(u_necc+((UB0-UB20)/4)))
;;;8491   			{
;;;8492   			cntrl_hndl_plazma=53;
;;;8493                  if(cntrl_stat_blok_cnt)cntrl_stat_new--;
;;;8494   			else cntrl_stat_new-=2;
;;;8495   			}	
;;;8496   		else if(load_U>(u_necc+1))
;;;8497   			{
;;;8498   			cntrl_hndl_plazma=54;
;;;8499   			cntrl_stat_new--;
;;;8500   			}					
;;;8501   		}
;;;8502   
;;;8503   	gran(&cntrl_stat_new,10,1010);			
;;;8504   	cntrl_stat_old=cntrl_stat_new;
;;;8505   	cntrl_stat=cntrl_stat_new;	
;;;8506   	}
;;;8507   #endif
;;;8508   
;;;8509   iiii=0;
005310  7425              STRB     r5,[r4,#0x10]
;;;8510   for(i=0;i<NUMIST;i++)
005312  73e5              STRB     r5,[r4,#0xf]
005314  48ea              LDR      r0,|L1.22208|
005316  f9b01000          LDRSH    r1,[r0,#0]
00531a  e00c              B        |L1.21302|
                  |L1.21276|
;;;8511        {
;;;8512        if(bps[i]._cnt<30)iiii=1;
00531c  ebc002c0          RSB      r2,r0,r0,LSL #3
005320  eb021200          ADD      r2,r2,r0,LSL #4
005324  eb090282          ADD      r2,r9,r2,LSL #2
005328  78d2              LDRB     r2,[r2,#3]
00532a  2a1e              CMP      r2,#0x1e
00532c  d200              BCS      |L1.21296|
00532e  7426              STRB     r6,[r4,#0x10]
                  |L1.21296|
005330  f1000001          ADD      r0,r0,#1              ;8510
005334  73e0              STRB     r0,[r4,#0xf]          ;8510
                  |L1.21302|
005336  7be0              LDRB     r0,[r4,#0xf]          ;8510  ; i
005338  4288              CMP      r0,r1                 ;8510
00533a  dbef              BLT      |L1.21276|
;;;8513        }
;;;8514   
;;;8515   if(iiii==0)
00533c  7c20              LDRB     r0,[r4,#0x10]  ; iiii
00533e  b928              CBNZ     r0,|L1.21324|
;;;8516        {
;;;8517        cntrl_stat=600;	
005340  f44f7016          MOV      r0,#0x258
005344  85a0              STRH     r0,[r4,#0x2c]
;;;8518        cntrl_stat_old=600;
005346  85e0              STRH     r0,[r4,#0x2e]
;;;8519        cntrl_stat_new=600;
005348  f8a40042          STRH     r0,[r4,#0x42]
                  |L1.21324|
;;;8520   	#ifdef UKU_TELECORE2015
;;;8521   	//cntrl_stat=0;
;;;8522   	//cntrl_stat_old=0;
;;;8523   	//cntrl_stat_new=0;
;;;8524   	#endif
;;;8525        }
;;;8526   
;;;8527   #ifdef UKU_220_IPS_TERMOKOMPENSAT
;;;8528   if(ica_cntrl_hndl_cnt)	ica_cntrl_hndl_cnt--;
00534c  f9b70000          LDRSH    r0,[r7,#0]  ; ica_cntrl_hndl_cnt
005350  b110              CBZ      r0,|L1.21336|
005352  f1a00001          SUB      r0,r0,#1
005356  8038              STRH     r0,[r7,#0]
                  |L1.21336|
;;;8529   
;;;8530   
;;;8531   
;;;8532   #endif
;;;8533   
;;;8534   
;;;8535   gran(&cntrl_stat,10,1010); 
005358  48d5              LDR      r0,|L1.22192|
00535a  f24032f2          MOV      r2,#0x3f2
00535e  210a              MOVS     r1,#0xa
005360  3816              SUBS     r0,r0,#0x16
005362  f7fffffe          BL       gran
;;;8536   b1Hz_ch=0;
005366  73a5              STRB     r5,[r4,#0xe]
                  |L1.21352|
;;;8537   }
005368  e8bd9ff0          POP      {r4-r12,pc}
;;;8538   #endif
                          ENDP

                  ext_drv PROC
;;;9027   //-----------------------------------------------
;;;9028   void ext_drv(void)
00536c  e92d5ff0          PUSH     {r4-r12,lr}
;;;9029   {
;;;9030   char i;
;;;9031   
;;;9032   
;;;9033   for(i=0;i<NUMSK;i++)
005370  f04f0000          MOV      r0,#0
005374  4ad4              LDR      r2,|L1.22216|
;;;9034   	{
;;;9035   	#ifdef UKU_MGTS
;;;9036   	if(adc_buff_[sk_buff_RSTKM[i]]<2000)
;;;9037   	#endif
;;;9038   	#ifdef UKU_RSTKM
;;;9039   	if(adc_buff_[sk_buff_RSTKM[i]]<2000)
;;;9040   	#endif
;;;9041   	#ifdef UKU_3U
;;;9042   	if(adc_buff_[sk_buff_3U[i]]<2000)
;;;9043   	#endif
;;;9044   	#ifdef UKU_GLONASS
;;;9045   	if(adc_buff_[sk_buff_GLONASS[i]]<2000)
;;;9046   	#endif
;;;9047   	#ifdef UKU_KONTUR
;;;9048   	if(adc_buff_[sk_buff_KONTUR[i]]<2000)
;;;9049   	#endif
;;;9050   	#ifdef UKU_6U
;;;9051   	if(adc_buff_[sk_buff_6U[i]]<2000)
;;;9052   	#endif
;;;9053   	#ifdef UKU_220
;;;9054   	if(adc_buff_[sk_buff_220[i]]<2000)
;;;9055   	#endif
;;;9056   	#ifdef UKU_220_V2
;;;9057   	if(adc_buff_[sk_buff_220[i]]<2000)
;;;9058   	#endif
;;;9059   	#ifdef UKU_220_IPS_TERMOKOMPENSAT
;;;9060   	if(adc_buff_[sk_buff_220[i]]<2000)
;;;9061   	#endif
;;;9062   	#ifdef UKU_TELECORE2015	
;;;9063   	if(adc_buff_[sk_buff_TELECORE2015[i]]<2000)	 //TODO
;;;9064   	#endif
;;;9065   	#ifdef UKU_TELECORE2017
;;;9066   	if(adc_buff_[sk_buff_TELECORE2015[i]]<2000)	 //TODO
;;;9067   	#endif
;;;9068   	#ifdef IPS_SGEP_GAZPROM
;;;9069   	if(adc_buff_[sk_buff_6U[i]]<2000)
;;;9070   	#endif		
;;;9071   		{
;;;9072   		if(sk_cnt[i]<10)
005376  4bd3              LDR      r3,|L1.22212|
;;;9073   			{
;;;9074   			sk_cnt[i]++;
;;;9075   			if(sk_cnt[i]>=10)
;;;9076   				{
;;;9077   				sk_stat[i]=ssON;
005378  4dca              LDR      r5,|L1.22180|
00537a  f04f0a01          MOV      r10,#1
;;;9078   				}
;;;9079   			}
;;;9080   		else 
;;;9081   			{
;;;9082   			sk_cnt[i]=10;
00537e  f04f0b0a          MOV      r11,#0xa
005382  4606              MOV      r6,r0                 ;9033
005384  f9b24000          LDRSH    r4,[r2,#0]            ;9033
005388  e025              B        |L1.21462|
                  |L1.21386|
00538a  49d0              LDR      r1,|L1.22220|
00538c  4fd0              LDR      r7,|L1.22224|
00538e  5c09              LDRB     r1,[r1,r0]            ;9060
005390  f9371011          LDRSH    r1,[r7,r1,LSL #1]     ;9060
005394  f5b16ffa          CMP      r1,#0x7d0             ;9060
005398  da0e              BGE      |L1.21432|
00539a  5619              LDRSB    r1,[r3,r0]            ;9072
00539c  290a              CMP      r1,#0xa               ;9072
00539e  da08              BGE      |L1.21426|
0053a0  f1010101          ADD      r1,r1,#1              ;9074
0053a4  b249              SXTB     r1,r1                 ;9074
0053a6  5419              STRB     r1,[r3,r0]            ;9074
0053a8  290a              CMP      r1,#0xa               ;9075
0053aa  db11              BLT      |L1.21456|
0053ac  f805a000          STRB     r10,[r5,r0]           ;9077
0053b0  e00e              B        |L1.21456|
                  |L1.21426|
0053b2  f803b000          STRB     r11,[r3,r0]
0053b6  e00b              B        |L1.21456|
                  |L1.21432|
;;;9083   			}
;;;9084                  
;;;9085   		}
;;;9086   	else
;;;9087   		{
;;;9088   		if(sk_cnt[i]>0)
0053b8  5619              LDRSB    r1,[r3,r0]
0053ba  2900              CMP      r1,#0
0053bc  dd07              BLE      |L1.21454|
;;;9089   			{
;;;9090   			sk_cnt[i]--;
0053be  f1a10101          SUB      r1,r1,#1
0053c2  b249              SXTB     r1,r1
0053c4  5419              STRB     r1,[r3,r0]
;;;9091   			if(sk_cnt[i]<=0)
0053c6  2900              CMP      r1,#0
0053c8  dc02              BGT      |L1.21456|
;;;9092   				{
;;;9093   				sk_stat[i]=ssOFF;
0053ca  542e              STRB     r6,[r5,r0]
0053cc  e000              B        |L1.21456|
                  |L1.21454|
;;;9094   				}
;;;9095   			}
;;;9096   		else 
;;;9097   			{
;;;9098   			sk_cnt[i]=0;
0053ce  541e              STRB     r6,[r3,r0]
                  |L1.21456|
0053d0  f1000001          ADD      r0,r0,#1              ;9033
0053d4  b2c0              UXTB     r0,r0                 ;9033
                  |L1.21462|
0053d6  42a0              CMP      r0,r4                 ;9033
0053d8  dbd7              BLT      |L1.21386|
;;;9099   			}
;;;9100   		}
;;;9101   	}
;;;9102   
;;;9103   for(i=0;i<NUMSK;i++)
0053da  f04f0400          MOV      r4,#0
;;;9104   	{
;;;9105   	if(((SK_SIGN[i]==0)&&(sk_stat[i]==ssON))||((SK_SIGN[i])&&(sk_stat[i]==ssOFF)) )
;;;9106   		{
;;;9107   		if(sk_av_cnt[i]<10)
0053de  f8df92f4          LDR      r9,|L1.22228|
;;;9108   			{
;;;9109   			sk_av_cnt[i]++;
;;;9110   			if(sk_av_cnt[i]>=10)
;;;9111   				{
;;;9112   				sk_av_stat[i]=sasON;
0053e2  4fbd              LDR      r7,|L1.22232|
;;;9113   				}
;;;9114   			}
;;;9115   		else 
;;;9116   			{
;;;9117   			sk_av_cnt[i]=10;
;;;9118   			}
;;;9119   		}
;;;9120   	else
;;;9121   		{
;;;9122   		if(sk_av_cnt[i]>=0)
;;;9123   			{
;;;9124   			sk_av_cnt[i]--;
;;;9125   			if(sk_av_cnt[i]<=0)
;;;9126   				{
;;;9127   				sk_av_stat[i]=sasOFF;
;;;9128   				}
;;;9129   			}
;;;9130   		else 
;;;9131   			{
;;;9132   			sk_av_cnt[i]=0;
;;;9133   			}
;;;9134   		}
;;;9135   
;;;9136   #ifndef UKU_KONTUR
;;;9137   	if(sk_av_stat_old[i]!=sk_av_stat[i])
0053e4  f8df82f4          LDR      r8,|L1.22236|
0053e8  e083              B        |L1.21746|
                  |L1.21482|
0053ea  48bd              LDR      r0,|L1.22240|
0053ec  f9300014          LDRSH    r0,[r0,r4,LSL #1]     ;9105
0053f0  b910              CBNZ     r0,|L1.21496|
0053f2  5d29              LDRB     r1,[r5,r4]            ;9105
0053f4  2901              CMP      r1,#1                 ;9105
0053f6  d00f              BEQ      |L1.21528|
                  |L1.21496|
0053f8  b108              CBZ      r0,|L1.21502|
0053fa  5d28              LDRB     r0,[r5,r4]            ;9105
0053fc  b160              CBZ      r0,|L1.21528|
                  |L1.21502|
0053fe  f9190004          LDRSB    r0,[r9,r4]            ;9122
005402  2800              CMP      r0,#0                 ;9122
005404  db19              BLT      |L1.21562|
005406  f1a00001          SUB      r0,r0,#1              ;9124
00540a  b240              SXTB     r0,r0                 ;9124
00540c  f8090004          STRB     r0,[r9,r4]            ;9124
005410  2800              CMP      r0,#0                 ;9125
005412  dc14              BGT      |L1.21566|
005414  553e              STRB     r6,[r7,r4]            ;9127
005416  e012              B        |L1.21566|
                  |L1.21528|
005418  f9190004          LDRSB    r0,[r9,r4]            ;9107
00541c  280a              CMP      r0,#0xa               ;9107
00541e  da09              BGE      |L1.21556|
005420  f1000001          ADD      r0,r0,#1              ;9109
005424  b240              SXTB     r0,r0                 ;9109
005426  f8090004          STRB     r0,[r9,r4]            ;9109
00542a  280a              CMP      r0,#0xa               ;9110
00542c  db07              BLT      |L1.21566|
00542e  f807a004          STRB     r10,[r7,r4]           ;9112
005432  e004              B        |L1.21566|
                  |L1.21556|
005434  f809b004          STRB     r11,[r9,r4]           ;9117
005438  e001              B        |L1.21566|
                  |L1.21562|
00543a  f8096004          STRB     r6,[r9,r4]            ;9132
                  |L1.21566|
00543e  f8181004          LDRB     r1,[r8,r4]
005442  5d38              LDRB     r0,[r7,r4]
005444  4281              CMP      r1,r0
005446  d04e              BEQ      |L1.21734|
;;;9138   		{
;;;9139   		plazma_sk++;
005448  4a99              LDR      r2,|L1.22192|
00544a  1e92              SUBS     r2,r2,#2
00544c  8811              LDRH     r1,[r2,#0]  ; plazma_sk
00544e  f1010101          ADD      r1,r1,#1
005452  8011              STRH     r1,[r2,#0]
;;;9140   		if(sk_av_stat[i]==sasON)
005454  2801              CMP      r0,#1
005456  d007              BEQ      |L1.21608|
;;;9141   			{
;;;9142   			if(i==0)snmp_trap_send("SK #1 Alarm",15,1,1);
;;;9143   			else if(i==1)
;;;9144   				{
;;;9145   				#ifndef UKU_TELEKORE2017
;;;9146   				snmp_trap_send("SK #2 Alarm",15,2,1);
;;;9147   				#endif
;;;9148   				#ifdef UKU_TELEKORE2017
;;;9149   				snmp_trap_send("Door open",15,2,1);
;;;9150   				#endif
;;;9151   				}
;;;9152   			else if(i==2)snmp_trap_send("SK #3 Alarm",15,3,1);
;;;9153   			else if(i==3)snmp_trap_send("SK #4 Alarm",15,4,1);
;;;9154   			}
;;;9155   		else 
;;;9156   			{
;;;9157   			if(i==0)snmp_trap_send("SK #1 Alarm is off",15,1,0);
005458  b354              CBZ      r4,|L1.21680|
;;;9158   			else if(i==1)
00545a  2c01              CMP      r4,#1
00545c  d02f              BEQ      |L1.21694|
;;;9159   				{
;;;9160   				#ifndef UKU_TELEKORE2017
;;;9161   				snmp_trap_send("SK #2 Alarm is off",15,2,0);
;;;9162   				#endif
;;;9163   				#ifdef UKU_TELEKORE2017
;;;9164   				snmp_trap_send("Door open clear",15,2,0);
;;;9165   				#endif
;;;9166   				}
;;;9167   			else if(i==2)snmp_trap_send("SK #3 Alarm is off",15,3,0);
00545e  2c02              CMP      r4,#2
005460  d034              BEQ      |L1.21708|
;;;9168   			else if(i==3)snmp_trap_send("SK #4 Alarm is off",15,4,0);
005462  2c03              CMP      r4,#3
005464  d039              BEQ      |L1.21722|
005466  e03e              B        |L1.21734|
                  |L1.21608|
005468  b134              CBZ      r4,|L1.21624|
00546a  2c01              CMP      r4,#1                 ;9143
00546c  d00b              BEQ      |L1.21638|
00546e  2c02              CMP      r4,#2                 ;9152
005470  d010              BEQ      |L1.21652|
005472  2c03              CMP      r4,#3                 ;9153
005474  d015              BEQ      |L1.21666|
005476  e036              B        |L1.21734|
                  |L1.21624|
005478  2301              MOVS     r3,#1                 ;9142
00547a  461a              MOV      r2,r3                 ;9142
00547c  210f              MOVS     r1,#0xf               ;9142
00547e  a099              ADR      r0,|L1.22244|
005480  f7fffffe          BL       snmp_trap_send
005484  e02f              B        |L1.21734|
                  |L1.21638|
005486  2301              MOVS     r3,#1                 ;9146
005488  2202              MOVS     r2,#2                 ;9146
00548a  210f              MOVS     r1,#0xf               ;9146
00548c  a098              ADR      r0,|L1.22256|
00548e  f7fffffe          BL       snmp_trap_send
005492  e028              B        |L1.21734|
                  |L1.21652|
005494  2301              MOVS     r3,#1                 ;9152
005496  2203              MOVS     r2,#3                 ;9152
005498  210f              MOVS     r1,#0xf               ;9152
00549a  a098              ADR      r0,|L1.22268|
00549c  f7fffffe          BL       snmp_trap_send
0054a0  e021              B        |L1.21734|
                  |L1.21666|
0054a2  2301              MOVS     r3,#1                 ;9153
0054a4  2204              MOVS     r2,#4                 ;9153
0054a6  210f              MOVS     r1,#0xf               ;9153
0054a8  a097              ADR      r0,|L1.22280|
0054aa  f7fffffe          BL       snmp_trap_send
0054ae  e01a              B        |L1.21734|
                  |L1.21680|
0054b0  2300              MOVS     r3,#0                 ;9157
0054b2  2201              MOVS     r2,#1                 ;9157
0054b4  210f              MOVS     r1,#0xf               ;9157
0054b6  a097              ADR      r0,|L1.22292|
0054b8  f7fffffe          BL       snmp_trap_send
0054bc  e013              B        |L1.21734|
                  |L1.21694|
0054be  2300              MOVS     r3,#0                 ;9161
0054c0  2202              MOVS     r2,#2                 ;9161
0054c2  210f              MOVS     r1,#0xf               ;9161
0054c4  a098              ADR      r0,|L1.22312|
0054c6  f7fffffe          BL       snmp_trap_send
0054ca  e00c              B        |L1.21734|
                  |L1.21708|
0054cc  2300              MOVS     r3,#0                 ;9167
0054ce  2203              MOVS     r2,#3                 ;9167
0054d0  210f              MOVS     r1,#0xf               ;9167
0054d2  a09a              ADR      r0,|L1.22332|
0054d4  f7fffffe          BL       snmp_trap_send
0054d8  e005              B        |L1.21734|
                  |L1.21722|
0054da  2300              MOVS     r3,#0
0054dc  2204              MOVS     r2,#4
0054de  210f              MOVS     r1,#0xf
0054e0  a09b              ADR      r0,|L1.22352|
0054e2  f7fffffe          BL       snmp_trap_send
                  |L1.21734|
;;;9169   			}
;;;9170   	 	}
;;;9171   #endif
;;;9172   
;;;9173   #ifdef UKU_KONTUR
;;;9174   	if(sk_av_stat_old[i]!=sk_av_stat[i])
;;;9175   		{
;;;9176   		plazma_sk++;
;;;9177   		if(sk_av_stat[i]==sasON)
;;;9178   			{
;;;9179   			if(i==0)snmp_trap_send("Door is opened",15,1,1);
;;;9180   			else if(i==1)snmp_trap_send("Smoke Alarm",15,2,1);
;;;9181   			else if(i==2)snmp_trap_send("Shock Sensor Alarm",15,3,1);
;;;9182   			else if(i==3)snmp_trap_send("SK #4 Alarm",15,4,1);
;;;9183   			}
;;;9184   		else 
;;;9185   			{
;;;9186   			if(i==0)snmp_trap_send("Door is closed",15,1,0);
;;;9187   			else if(i==1)snmp_trap_send("Smoke Alarm is off",15,2,0);
;;;9188   			else if(i==2)snmp_trap_send("Shock Sensor Alarm is off",15,3,0);
;;;9189   			else if(i==3)snmp_trap_send("SK #4 Alarm is off",15,4,0);
;;;9190   			}
;;;9191   	 	}
;;;9192   #endif
;;;9193   	sk_av_stat_old[i]=sk_av_stat[i];
0054e6  5d38              LDRB     r0,[r7,r4]
0054e8  f8080004          STRB     r0,[r8,r4]
0054ec  f1040401          ADD      r4,r4,#1              ;9103
0054f0  b2e4              UXTB     r4,r4                 ;9103
                  |L1.21746|
0054f2  4875              LDR      r0,|L1.22216|
0054f4  f9b00000          LDRSH    r0,[r0,#0]            ;9103  ; NUMSK
0054f8  4284              CMP      r4,r0                 ;9103
0054fa  f6ffaf76          BLT      |L1.21482|
;;;9194   	}
;;;9195   }
0054fe  e733              B        |L1.21352|
;;;9196   
                          ENDP

                  zar_superviser_start PROC
;;;9233   //-----------------------------------------------
;;;9234   void zar_superviser_start(void)
005500  4a98              LDR      r2,|L1.22372|
;;;9235   {
;;;9236   sign_U[0]=1;
005502  f04f0001          MOV      r0,#1
005506  7010              STRB     r0,[r2,#0]
;;;9237   sign_I[0]=1;
005508  4997              LDR      r1,|L1.22376|
00550a  7008              STRB     r0,[r1,#0]
;;;9238   sign_U[1]=1;
00550c  7050              STRB     r0,[r2,#1]
;;;9239   sign_I[1]=1;
00550e  7048              STRB     r0,[r1,#1]
;;;9240   
;;;9241   }
005510  4770              BX       lr
;;;9242   
                          ENDP

                  zar_superviser_drv PROC
;;;9198   //-----------------------------------------------
;;;9199   void zar_superviser_drv(void)
005512  e92d5ff0          PUSH     {r4-r12,lr}
;;;9200   {
;;;9201   
;;;9202   if(((bat[0]._Ub>u_necc_up) || (bat[0]._Ub<u_necc_dn))&&(main_kb_cnt<((TBAT*60)-30))&&(main_kb_cnt>((TBAT*60)-150))) sign_U[0]=0;
005516  4896              LDR      r0,|L1.22384|
005518  f8df9258          LDR      r9,|L1.22388|
00551c  f8df824c          LDR      r8,|L1.22380|
005520  f9b0c000          LDRSH    r12,[r0,#0]  ; u_necc_up
005524  f9b90000          LDRSH    r0,[r9,#0]
005528  4c61              LDR      r4,|L1.22192|
00552a  ebc01100          RSB      r1,r0,r0,LSL #4
00552e  3c42              SUBS     r4,r4,#0x42
005530  f9b87002          LDRSH    r7,[r8,#2]  ; bat
005534  f06f0a1d          MVN      r10,#0x1d
005538  f06f0b95          MVN      r11,#0x95
00553c  2500              MOVS     r5,#0
00553e  4e89              LDR      r6,|L1.22372|
005540  f9b4004c          LDRSH    r0,[r4,#0x4c]
005544  eb0a0281          ADD      r2,r10,r1,LSL #2
005548  eb0b0381          ADD      r3,r11,r1,LSL #2
00554c  4567              CMP      r7,r12
00554e  dc05              BGT      |L1.21852|
005550  f8dfc224          LDR      r12,|L1.22392|
005554  f9bcc000          LDRSH    r12,[r12,#0]  ; u_necc_dn
005558  4567              CMP      r7,r12
00555a  da04              BGE      |L1.21862|
                  |L1.21852|
00555c  4282              CMP      r2,r0
00555e  dd02              BLE      |L1.21862|
005560  4283              CMP      r3,r0
005562  da00              BGE      |L1.21862|
005564  7035              STRB     r5,[r6,#0]
                  |L1.21862|
;;;9203   
;;;9204   if(((bat[0]._Ib>(2*IKB)) || (bat[0]._Ib<(-IKB*2))) &&(main_kb_cnt<((TBAT*60)-30))&&(main_kb_cnt>((TBAT*60)-150))) sign_I[0]=0;
005566  4f85              LDR      r7,|L1.22396|
005568  f9b8c008          LDRSH    r12,[r8,#8]  ; bat
00556c  f9b7e000          LDRSH    lr,[r7,#0]  ; IKB
005570  4f7d              LDR      r7,|L1.22376|
005572  ebbc0f4e          CMP      r12,lr,LSL #1
005576  dc04              BGT      |L1.21890|
005578  f1ce0e00          RSB      lr,lr,#0
00557c  ebbc0f4e          CMP      r12,lr,LSL #1
005580  da04              BGE      |L1.21900|
                  |L1.21890|
005582  4282              CMP      r2,r0
005584  dd02              BLE      |L1.21900|
005586  4283              CMP      r3,r0
005588  da00              BGE      |L1.21900|
00558a  703d              STRB     r5,[r7,#0]
                  |L1.21900|
;;;9205   																 
;;;9206   if((main_kb_cnt==((TBAT*60)-10)) &&(spc_stat==spcOFF))
00558c  f06f0209          MVN      r2,#9
005590  eb020181          ADD      r1,r2,r1,LSL #2
005594  4281              CMP      r1,r0
005596  d120              BNE      |L1.21978|
005598  7ea0              LDRB     r0,[r4,#0x1a]  ; spc_stat
00559a  b9f0              CBNZ     r0,|L1.21978|
;;;9207   	{
;;;9208   	if((sign_U[0]==1) && (sign_I[0]==1) && (lc640_read_int(EE_BAT1_ZAR_CNT)!=BAT_C_REAL[0]) && (NUMBAT) && (!(bat[0]._av&1)))
00559c  7830              LDRB     r0,[r6,#0]  ; sign_U
00559e  2801              CMP      r0,#1
0055a0  d11b              BNE      |L1.21978|
0055a2  7838              LDRB     r0,[r7,#0]  ; sign_I
0055a4  2801              CMP      r0,#1
0055a6  d118              BNE      |L1.21978|
0055a8  f44f70ef          MOV      r0,#0x1de
0055ac  f7fffffe          BL       lc640_read_int
0055b0  4973              LDR      r1,|L1.22400|
0055b2  f9b11000          LDRSH    r1,[r1,#0]  ; BAT_C_REAL
0055b6  4288              CMP      r0,r1
0055b8  d00f              BEQ      |L1.21978|
0055ba  4872              LDR      r0,|L1.22404|
0055bc  8800              LDRH     r0,[r0,#0]  ; NUMBAT
0055be  b160              CBZ      r0,|L1.21978|
0055c0  f898003d          LDRB     r0,[r8,#0x3d]  ; bat
0055c4  07c0              LSLS     r0,r0,#31
0055c6  d108              BNE      |L1.21978|
;;;9209   		{
;;;9210   		lc640_write_int(EE_BAT1_ZAR_CNT,BAT_C_REAL[0]);
0055c8  f44f70ef          MOV      r0,#0x1de
0055cc  f7fffffe          BL       lc640_write_int
;;;9211   		superviser_cnt++;
0055d0  486d              LDR      r0,|L1.22408|
0055d2  7801              LDRB     r1,[r0,#0]  ; superviser_cnt
0055d4  f1010101          ADD      r1,r1,#1
0055d8  7001              STRB     r1,[r0,#0]
                  |L1.21978|
;;;9212   		}
;;;9213   	
;;;9214   	}
;;;9215   
;;;9216   if(((bat[0]._Ub>u_necc_up) || (bat[1]._Ub<u_necc_dn))&&(main_kb_cnt<((TBAT*60)-30))&&(main_kb_cnt>((TBAT*60)-150))) sign_U[1]=0;
0055da  4865              LDR      r0,|L1.22384|
0055dc  f9b81002          LDRSH    r1,[r8,#2]  ; bat
0055e0  f9b00000          LDRSH    r0,[r0,#0]  ; u_necc_up
0055e4  4281              CMP      r1,r0
0055e6  dc06              BGT      |L1.22006|
0055e8  4863              LDR      r0,|L1.22392|
0055ea  f9b8104e          LDRSH    r1,[r8,#0x4e]  ; bat
0055ee  f9b00000          LDRSH    r0,[r0,#0]  ; u_necc_dn
0055f2  4281              CMP      r1,r0
0055f4  da0e              BGE      |L1.22036|
                  |L1.22006|
0055f6  f9b90000          LDRSH    r0,[r9,#0]  ; TBAT
0055fa  f9b4104c          LDRSH    r1,[r4,#0x4c]  ; main_kb_cnt
0055fe  ebc01000          RSB      r0,r0,r0,LSL #4
005602  eb0a0280          ADD      r2,r10,r0,LSL #2
005606  428a              CMP      r2,r1
005608  dd04              BLE      |L1.22036|
00560a  eb0b0080          ADD      r0,r11,r0,LSL #2
00560e  4288              CMP      r0,r1
005610  da00              BGE      |L1.22036|
005612  7075              STRB     r5,[r6,#1]
                  |L1.22036|
;;;9217   
;;;9218   if(((bat[1]._Ib>(2*IKB)) || (bat[1]._Ib<(-IKB*2))) &&(main_kb_cnt<((TBAT*60)-30))&&(main_kb_cnt>((TBAT*60)-150))) sign_I[1]=0;
005614  4959              LDR      r1,|L1.22396|
005616  f9b80054          LDRSH    r0,[r8,#0x54]  ; bat
00561a  f9b11000          LDRSH    r1,[r1,#0]  ; IKB
00561e  ebb00f41          CMP      r0,r1,LSL #1
005622  dc03              BGT      |L1.22060|
005624  4249              RSBS     r1,r1,#0
005626  ebb00f41          CMP      r0,r1,LSL #1
00562a  da0e              BGE      |L1.22090|
                  |L1.22060|
00562c  f9b90000          LDRSH    r0,[r9,#0]  ; TBAT
005630  f9b4104c          LDRSH    r1,[r4,#0x4c]  ; main_kb_cnt
005634  ebc01000          RSB      r0,r0,r0,LSL #4
005638  eb0a0280          ADD      r2,r10,r0,LSL #2
00563c  428a              CMP      r2,r1
00563e  dd04              BLE      |L1.22090|
005640  eb0b0080          ADD      r0,r11,r0,LSL #2
005644  4288              CMP      r0,r1
005646  da00              BGE      |L1.22090|
005648  707d              STRB     r5,[r7,#1]
                  |L1.22090|
;;;9219   																 
;;;9220   if((main_kb_cnt==((TBAT*60)-10)) &&(spc_stat==spcOFF))
00564a  f9b90000          LDRSH    r0,[r9,#0]  ; TBAT
00564e  ebc01100          RSB      r1,r0,r0,LSL #4
005652  f06f0009          MVN      r0,#9
005656  eb000081          ADD      r0,r0,r1,LSL #2
00565a  f9b4104c          LDRSH    r1,[r4,#0x4c]  ; main_kb_cnt
00565e  4288              CMP      r0,r1
005660  d11d              BNE      |L1.22174|
005662  7ea0              LDRB     r0,[r4,#0x1a]  ; spc_stat
005664  b9d8              CBNZ     r0,|L1.22174|
;;;9221   	{
;;;9222   	if((sign_U[1]==1) && (sign_I[1]==1) && (lc640_read_int(EE_BAT2_ZAR_CNT)!=BAT_C_REAL[1]) && (NUMBAT==2) && (!(bat[1]._av&1)))
005666  7870              LDRB     r0,[r6,#1]  ; sign_U
005668  2801              CMP      r0,#1
00566a  d118              BNE      |L1.22174|
00566c  7878              LDRB     r0,[r7,#1]  ; sign_I
00566e  2801              CMP      r0,#1
005670  d115              BNE      |L1.22174|
005672  f44f75fe          MOV      r5,#0x1fc
005676  4628              MOV      r0,r5
005678  f7fffffe          BL       lc640_read_int
00567c  4940              LDR      r1,|L1.22400|
00567e  f9b11002          LDRSH    r1,[r1,#2]  ; BAT_C_REAL
005682  4288              CMP      r0,r1
005684  d00b              BEQ      |L1.22174|
005686  483f              LDR      r0,|L1.22404|
005688  8800              LDRH     r0,[r0,#0]  ; NUMBAT
00568a  2802              CMP      r0,#2
00568c  d107              BNE      |L1.22174|
00568e  f8980089          LDRB     r0,[r8,#0x89]  ; bat
005692  07c0              LSLS     r0,r0,#31
005694  d17f              BNE      |L1.22422|
;;;9223   		{
;;;9224   		lc640_write_int(EE_BAT2_ZAR_CNT,BAT_C_REAL[1]);
005696  4628              MOV      r0,r5
005698  f7fffffe          BL       lc640_write_int
;;;9225   		superviser_cnt++;
00569c  e076              B        |L1.22412|
                  |L1.22174|
00569e  e07a              B        |L1.22422|
                  |L1.22176|
                          DCD      hv_vz_stat
                  |L1.22180|
                          DCD      sk_stat
                  |L1.22184|
                          DCD      sk_stat_old
                  |L1.22188|
                          DCD      VZ_KIND
                  |L1.22192|
                          DCD      ||area_number.25||+0x42
                  |L1.22196|
                          DCD      ICA_EN
                  |L1.22200|
                          DCD      ica_cntrl_hndl
                  |L1.22204|
                          DCD      ica_u_necc
                  |L1.22208|
                          DCD      NUMIST
                  |L1.22212|
                          DCD      sk_cnt
                  |L1.22216|
                          DCD      NUMSK
                  |L1.22220|
                          DCD      ||area_number.19||
                  |L1.22224|
                          DCD      ||.bss||+0x40c
                  |L1.22228|
                          DCD      sk_av_cnt
                  |L1.22232|
                          DCD      sk_av_stat
                  |L1.22236|
                          DCD      sk_av_stat_old
                  |L1.22240|
                          DCD      SK_SIGN
                  |L1.22244|
0056e4  534b2023          DCB      "SK #1 Alarm",0
0056e8  3120416c
0056ec  61726d00
                  |L1.22256|
0056f0  534b2023          DCB      "SK #2 Alarm",0
0056f4  3220416c
0056f8  61726d00
                  |L1.22268|
0056fc  534b2023          DCB      "SK #3 Alarm",0
005700  3320416c
005704  61726d00
                  |L1.22280|
005708  534b2023          DCB      "SK #4 Alarm",0
00570c  3420416c
005710  61726d00
                  |L1.22292|
005714  534b2023          DCB      "SK #1 Alarm is off",0
005718  3120416c
00571c  61726d20
005720  6973206f
005724  666600  
005727  00                DCB      0
                  |L1.22312|
005728  534b2023          DCB      "SK #2 Alarm is off",0
00572c  3220416c
005730  61726d20
005734  6973206f
005738  666600  
00573b  00                DCB      0
                  |L1.22332|
00573c  534b2023          DCB      "SK #3 Alarm is off",0
005740  3320416c
005744  61726d20
005748  6973206f
00574c  666600  
00574f  00                DCB      0
                  |L1.22352|
005750  534b2023          DCB      "SK #4 Alarm is off",0
005754  3420416c
005758  61726d20
00575c  6973206f
005760  666600  
005763  00                DCB      0
                  |L1.22372|
                          DCD      sign_U
                  |L1.22376|
                          DCD      sign_I
                  |L1.22380|
                          DCD      bat
                  |L1.22384|
                          DCD      u_necc_up
                  |L1.22388|
                          DCD      TBAT
                  |L1.22392|
                          DCD      u_necc_dn
                  |L1.22396|
                          DCD      IKB
                  |L1.22400|
                          DCD      BAT_C_REAL
                  |L1.22404|
                          DCD      NUMBAT
                  |L1.22408|
                          DCD      superviser_cnt
                  |L1.22412|
00578c  48ff              LDR      r0,|L1.23436|
00578e  7801              LDRB     r1,[r0,#0]  ; superviser_cnt
005790  f1010101          ADD      r1,r1,#1
005794  7001              STRB     r1,[r0,#0]
                  |L1.22422|
;;;9226   		}
;;;9227   	
;;;9228   	}
;;;9229   
;;;9230   if(main_kb_cnt==((TBAT*60)-2)) zar_superviser_start();
005796  f9b90000          LDRSH    r0,[r9,#0]  ; TBAT
00579a  f06f0101          MVN      r1,#1
00579e  ebc01000          RSB      r0,r0,r0,LSL #4
0057a2  eb010080          ADD      r0,r1,r0,LSL #2
0057a6  f9b4104c          LDRSH    r1,[r4,#0x4c]  ; main_kb_cnt
0057aa  4288              CMP      r0,r1
0057ac  d102              BNE      |L1.22452|
0057ae  e8bd5ff0          POP      {r4-r12,lr}
0057b2  e7fe              B        zar_superviser_start
                  |L1.22452|
;;;9231   }
0057b4  e5d8              B        |L1.21352|
;;;9232   
                          ENDP

                  npn_hndl PROC
;;;9243   //-----------------------------------------------
;;;9244   void npn_hndl(void)
0057b6  e92d03f0          PUSH     {r4-r9}
;;;9245   {
;;;9246   if(NPN_OUT!=npnoOFF)
0057ba  48f5              LDR      r0,|L1.23440|
;;;9247   	{
;;;9248   /*	if(NPN_SIGN==npnsAVNET)
;;;9249   		{
;;;9250   		if(net_av==1)
;;;9251   			{
;;;9252   			if(npn_tz_cnt<TZNPN)
;;;9253   				{
;;;9254   				npn_tz_cnt++;
;;;9255   				if(npn_tz_cnt==TZNPN)
;;;9256   					{
;;;9257   					npn_stat=npnsOFF;
;;;9258   					}
;;;9259   				}
;;;9260   			}
;;;9261   		else
;;;9262   			{
;;;9263   			if(npn_tz_cnt)
;;;9264   				{
;;;9265   				npn_tz_cnt--;
;;;9266   				if(npn_tz_cnt==0)
;;;9267   					{
;;;9268   					npn_stat=npnsON;
;;;9269   					}
;;;9270   				}
;;;9271   			}
;;;9272   		}*/
;;;9273   /*	if(NPN_SIGN==npnsULOAD)
;;;9274   		{
;;;9275   		if(load_U<UONPN)
;;;9276   			{
;;;9277   			if(npn_tz_cnt<TZNPN)
;;;9278   				{
;;;9279   				npn_tz_cnt++;
;;;9280   				if(npn_tz_cnt==TZNPN)
;;;9281   					{
;;;9282   					npn_stat=npnsOFF;
;;;9283   					}
;;;9284   				}
;;;9285   			}
;;;9286   		else if(load_U>UVNPN)
;;;9287   			{
;;;9288   			if(npn_tz_cnt)
;;;9289   				{
;;;9290   				npn_tz_cnt--;
;;;9291   				if(npn_tz_cnt==0)
;;;9292   					{
;;;9293   					npn_stat=npnsON;
;;;9294   					}
;;;9295   				}
;;;9296   			}
;;;9297   		}*/
;;;9298   
;;;9299   	if((load_U<UONPN)&&((net_Ua<UMN)||(net_Ub<UMN)||(net_Uc<UMN)))
;;;9300   		{
;;;9301   		if(npn_tz_cnt<TZNPN)
0057bc  4ff5              LDR      r7,|L1.23444|
;;;9302   			{
;;;9303   			npn_tz_cnt++;
;;;9304   			if(npn_tz_cnt==TZNPN)
;;;9305   				{
;;;9306   				npn_stat=npnsOFF;
0057be  4ef6              LDR      r6,|L1.23448|
0057c0  7800              LDRB     r0,[r0,#0]            ;9246  ; NPN_OUT
0057c2  f04f0c00          MOV      r12,#0                ;9246
;;;9307   				}
;;;9308   			}
;;;9309   		}
;;;9310   	else if((load_U>UVNPN)&&(net_Ua>UMN)&&(net_Ub>UMN)&&(net_Uc>UMN))
;;;9311   		{
;;;9312   		if(npn_tz_cnt)
;;;9313   			{
;;;9314   			npn_tz_cnt--;
;;;9315   			if(npn_tz_cnt==0)
;;;9316   				{
;;;9317   				npn_stat=npnsON;
0057c6  f04f0801          MOV      r8,#1
0057ca  b3e8              CBZ      r0,|L1.22600|
0057cc  48f3              LDR      r0,|L1.23452|
0057ce  4639              MOV      r1,r7                 ;9301
0057d0  f9b05000          LDRSH    r5,[r0,#0]            ;9299  ; load_U
0057d4  48f2              LDR      r0,|L1.23456|
0057d6  f9b11000          LDRSH    r1,[r1,#0]            ;9301
0057da  f9b09000          LDRSH    r9,[r0,#0]            ;9299  ; UONPN
0057de  48f1              LDR      r0,|L1.23460|
0057e0  454d              CMP      r5,r9                 ;9299
0057e2  f9b02000          LDRSH    r2,[r0,#0]            ;9299
0057e6  48f0              LDR      r0,|L1.23464|
0057e8  f9b03000          LDRSH    r3,[r0,#0]            ;9299
0057ec  48ef              LDR      r0,|L1.23468|
0057ee  f9b04000          LDRSH    r4,[r0,#0]            ;9299
0057f2  48ef              LDR      r0,|L1.23472|
0057f4  f9b00000          LDRSH    r0,[r0,#0]            ;9299
0057f8  da13              BGE      |L1.22562|
0057fa  4282              CMP      r2,r0                 ;9299
0057fc  db03              BLT      |L1.22534|
0057fe  4283              CMP      r3,r0                 ;9299
005800  db01              BLT      |L1.22534|
005802  4284              CMP      r4,r0                 ;9299
005804  da0d              BGE      |L1.22562|
                  |L1.22534|
005806  48eb              LDR      r0,|L1.23476|
005808  f9b02000          LDRSH    r2,[r0,#0]            ;9301  ; TZNPN
00580c  4291              CMP      r1,r2                 ;9301
00580e  da23              BGE      |L1.22616|
005810  f1010101          ADD      r1,r1,#1              ;9303
005814  b208              SXTH     r0,r1                 ;9303
005816  8038              STRH     r0,[r7,#0]            ;9303
005818  4290              CMP      r0,r2                 ;9304
00581a  d11d              BNE      |L1.22616|
00581c  f886c000          STRB     r12,[r6,#0]           ;9306
005820  e01a              B        |L1.22616|
                  |L1.22562|
005822  f8dfc394          LDR      r12,|L1.23480|
005826  f9bcc000          LDRSH    r12,[r12,#0]          ;9310  ; UVNPN
00582a  4565              CMP      r5,r12                ;9310
00582c  dd14              BLE      |L1.22616|
00582e  4282              CMP      r2,r0                 ;9310
005830  dd12              BLE      |L1.22616|
005832  4283              CMP      r3,r0                 ;9310
005834  dd10              BLE      |L1.22616|
005836  4284              CMP      r4,r0                 ;9310
005838  dd0e              BLE      |L1.22616|
00583a  b169              CBZ      r1,|L1.22616|
00583c  f1a10101          SUB      r1,r1,#1              ;9314
005840  b208              SXTH     r0,r1                 ;9314
005842  8038              STRH     r0,[r7,#0]            ;9314
005844  b940              CBNZ     r0,|L1.22616|
005846  e000              B        |L1.22602|
                  |L1.22600|
005848  e002              B        |L1.22608|
                  |L1.22602|
00584a  f8868000          STRB     r8,[r6,#0]
00584e  e003              B        |L1.22616|
                  |L1.22608|
;;;9318   				}
;;;9319   			}
;;;9320   		}
;;;9321   	}
;;;9322   else
;;;9323   	{
;;;9324   	npn_tz_cnt=0;
005850  f8a7c000          STRH     r12,[r7,#0]
;;;9325   	npn_stat=npnsON;
005854  f8868000          STRB     r8,[r6,#0]
                  |L1.22616|
;;;9326   	}
;;;9327   
;;;9328   if(npn_stat==npnsOFF) mess_send(MESS2RELE_HNDL,PARAM_RELE_NPN,1,15);
005858  7830              LDRB     r0,[r6,#0]  ; npn_stat
00585a  2800              CMP      r0,#0
00585c  d107              BNE      |L1.22638|
00585e  e8bd03f0          POP      {r4-r9}
005862  230f              MOVS     r3,#0xf
005864  2201              MOVS     r2,#1
005866  216e              MOVS     r1,#0x6e
005868  20d2              MOVS     r0,#0xd2
00586a  f7ffbffe          B.W      mess_send
                  |L1.22638|
;;;9329   
;;;9330   
;;;9331   }
00586e  e8bd03f0          POP      {r4-r9}
005872  4770              BX       lr
;;;9332   
                          ENDP

                  loadoff_hndl PROC
;;;9334   //-----------------------------------------------
;;;9335   void loadoff_hndl(void)
005874  b5f0              PUSH     {r4-r7,lr}
;;;9336   {
;;;9337   if((load_U>UONPN)||(load_U<UVNPN))
005876  48c9              LDR      r0,|L1.23452|
;;;9338   	{
;;;9339   	if(load_off_cnt<TZNPN)
005878  4dd0              LDR      r5,|L1.23484|
;;;9340   		{
;;;9341   		load_off_cnt++;
;;;9342   		if(load_off_cnt>=TZNPN)
;;;9343   			{
;;;9344   			load_off_stat=npnsOFF;
00587a  2700              MOVS     r7,#0
00587c  f9b01000          LDRSH    r1,[r0,#0]            ;9337  ; load_U
005880  48c7              LDR      r0,|L1.23456|
005882  4ecf              LDR      r6,|L1.23488|
005884  f9b02000          LDRSH    r2,[r0,#0]            ;9337  ; UONPN
005888  f9b50000          LDRSH    r0,[r5,#0]            ;9339
00588c  4291              CMP      r1,r2                 ;9337
00588e  dc04              BGT      |L1.22682|
005890  4bc9              LDR      r3,|L1.23480|
005892  f9b33000          LDRSH    r3,[r3,#0]            ;9337  ; UVNPN
005896  4299              CMP      r1,r3                 ;9337
005898  da0d              BGE      |L1.22710|
                  |L1.22682|
00589a  49c6              LDR      r1,|L1.23476|
00589c  f9b11000          LDRSH    r1,[r1,#0]            ;9339  ; TZNPN
0058a0  4288              CMP      r0,r1                 ;9339
0058a2  da1c              BGE      |L1.22750|
0058a4  f1000001          ADD      r0,r0,#1              ;9341
0058a8  b200              SXTH     r0,r0                 ;9341
0058aa  8028              STRH     r0,[r5,#0]            ;9341
0058ac  4288              CMP      r0,r1                 ;9342
0058ae  db16              BLT      |L1.22750|
0058b0  7037              STRB     r7,[r6,#0]
;;;9345   			load_off_cnt=TZNPN;
0058b2  8029              STRH     r1,[r5,#0]
0058b4  e013              B        |L1.22750|
                  |L1.22710|
;;;9346   			}
;;;9347   		}
;;;9348   	}
;;;9349   else if((load_U>(UVNPN+dUNPN))&&(load_U<(UONPN-dUNPN)))
0058b6  4cc3              LDR      r4,|L1.23492|
0058b8  f9b44000          LDRSH    r4,[r4,#0]  ; dUNPN
0058bc  4423              ADD      r3,r3,r4
0058be  428b              CMP      r3,r1
0058c0  da0d              BGE      |L1.22750|
0058c2  1b12              SUBS     r2,r2,r4
0058c4  428a              CMP      r2,r1
0058c6  dd0a              BLE      |L1.22750|
;;;9350   	{
;;;9351   	if(load_off_cnt)
0058c8  b148              CBZ      r0,|L1.22750|
;;;9352   		{
;;;9353   		load_off_cnt--;
0058ca  f1a00001          SUB      r0,r0,#1
0058ce  b200              SXTH     r0,r0
0058d0  8028              STRH     r0,[r5,#0]
;;;9354   		if(load_off_cnt<=0)
0058d2  2800              CMP      r0,#0
0058d4  dc03              BGT      |L1.22750|
;;;9355   			{
;;;9356   			load_off_stat=npnsON;
0058d6  f04f0001          MOV      r0,#1
0058da  7030              STRB     r0,[r6,#0]
;;;9357   			load_off_cnt=0;
0058dc  802f              STRH     r7,[r5,#0]
                  |L1.22750|
;;;9358   			}
;;;9359   		}
;;;9360   	}
;;;9361   
;;;9362   
;;;9363   if(load_off_stat==npnsOFF) tloaddisable_cmnd=10;
0058de  7830              LDRB     r0,[r6,#0]  ; load_off_stat
0058e0  2800              CMP      r0,#0
0058e2  d103              BNE      |L1.22764|
0058e4  49b8              LDR      r1,|L1.23496|
0058e6  f04f000a          MOV      r0,#0xa
0058ea  7008              STRB     r0,[r1,#0]
                  |L1.22764|
;;;9364   
;;;9365   
;;;9366   }
0058ec  bdf0              POP      {r4-r7,pc}
;;;9367   
                          ENDP

                  speedChargeStartStop PROC
;;;9555   //-----------------------------------------------
;;;9556   void speedChargeStartStop(void)
0058ee  b508              PUSH     {r3,lr}
;;;9557   {
;;;9558   /*if(speedChIsOn)
;;;9559   	{
;;;9560   	speedChIsOn=0;
;;;9561   	}
;;;9562   
;;;9563   else
;;;9564   	{
;;;9565   	if(speedChrgBlckStat==0)
;;;9566   		{
;;;9567   		speedChIsOn=1;
;;;9568   		speedChTimeCnt=0;
;;;9569   		}
;;;9570   	else
;;;9571   		{
;;;9572   		show_mess(	"     Ускоренный     ",
;;;9573   	          		"       заряд        ",
;;;9574   	          		"    заблокирован!   ",
;;;9575   	          		"                    ",2000);	 
;;;9576   		}
;;;9577   	}*/
;;;9578   
;;;9579   if(sp_ch_stat!=scsOFF)
0058f0  48b6              LDR      r0,|L1.23500|
0058f2  7801              LDRB     r1,[r0,#0]  ; sp_ch_stat
0058f4  b141              CBZ      r1,|L1.22792|
;;;9580   	{
;;;9581   	sp_ch_stat=scsOFF;
0058f6  f04f0100          MOV      r1,#0
0058fa  7001              STRB     r1,[r0,#0]
;;;9582   	speedz_mem_hndl(10);
0058fc  e8bd4008          POP      {r3,lr}
005900  f04f000a          MOV      r0,#0xa
005904  f7ffbffe          B.W      speedz_mem_hndl
                  |L1.22792|
;;;9583   	}
;;;9584   
;;;9585   else
;;;9586   	{
;;;9587   	if((speedChrgBlckStat==0)&&(spc_stat==spcOFF)
005908  49b1              LDR      r1,|L1.23504|
00590a  f9b12000          LDRSH    r2,[r1,#0]  ; speedChrgBlckStat
00590e  49b1              LDR      r1,|L1.23508|
005910  780b              LDRB     r3,[r1,#0]  ; spc_stat
005912  431a              ORRS     r2,r2,r3
005914  7b0b              LDRB     r3,[r1,#0xc]  ; vz1_stat
005916  7bc9              LDRB     r1,[r1,#0xf]  ; vz2_stat
005918  431a              ORRS     r2,r2,r3
00591a  430a              ORRS     r2,r2,r1
00591c  d009              BEQ      |L1.22834|
;;;9588   		#ifdef UKU_220_IPS_TERMOKOMPENSAT
;;;9589   		&&(vz1_stat==vz1sOFF)&&(vz2_stat==vz2sOFF)
;;;9590   		#endif
;;;9591   		)
;;;9592   		{
;;;9593   		#ifdef UKU_220_IPS_TERMOKOMPENSAT
;;;9594   		sp_ch_stat=scsSTEP1;
;;;9595   		#else
;;;9596   		sp_ch_stat=scsWRK;
;;;9597   		#endif
;;;9598   		speedz_mem_hndl(1);
;;;9599   		}
;;;9600   	else 
;;;9601   		{
;;;9602   		show_mess(	"     Ускоренный     ",
00591e  f44f60fa          MOV      r0,#0x7d0
005922  9000              STR      r0,[sp,#0]
005924  4bac              LDR      r3,|L1.23512|
005926  a2ad              ADR      r2,|L1.23516|
005928  a1b2              ADR      r1,|L1.23540|
00592a  a0b8              ADR      r0,|L1.23564|
00592c  f7fffffe          BL       show_mess
;;;9603   	          		"       заряд        ",
;;;9604   	          		"    заблокирован!   ",
;;;9605   	          		"                    ",2000);
;;;9606   		}
;;;9607   	}
;;;9608   }
005930  bd08              POP      {r3,pc}
                  |L1.22834|
005932  f04f0101          MOV      r1,#1                 ;9594
005936  7001              STRB     r1,[r0,#0]            ;9594
005938  e8bd4008          POP      {r3,lr}               ;9598
00593c  4608              MOV      r0,r1                 ;9598
00593e  f7ffbffe          B.W      speedz_mem_hndl
;;;9609   
                          ENDP

                  speedChargeHndl PROC
;;;9368   //-----------------------------------------------
;;;9369   void speedChargeHndl(void)
005942  e92d4ff8          PUSH     {r3-r11,lr}
;;;9370   {
;;;9371   /*
;;;9372   if(sp_ch_stat==scsOFF)
;;;9373   	{
;;;9374   	if((sk_stat[1]==1)&&(sk_stat_old[1]=0))
;;;9375   	}*/
;;;9376   	 
;;;9377   if(sp_ch_stat==scsSTEP1)
005946  4fa1              LDR      r7,|L1.23500|
;;;9378   	{
;;;9379   	if(sp_ch_stat_old!=sp_ch_stat)
005948  4eb8              LDR      r6,|L1.23596|
;;;9380   		{
;;;9381   		sp_ch_stat_cnt=5;
;;;9382   		if(SP_CH_VENT_BLOK==0)
00594a  f8dfa2d8          LDR      r10,|L1.23588|
00594e  7839              LDRB     r1,[r7,#0]            ;9377  ; sp_ch_stat
;;;9383   			{
;;;9384   			sp_ch_stat_cnt=0;
;;;9385   			sp_ch_stat=scsWRK;
;;;9386   			}
;;;9387   		}
;;;9388   	if(sp_ch_stat_cnt)
;;;9389   		{
;;;9390   		sp_ch_stat_cnt--;
;;;9391   		if(sp_ch_stat_cnt==0)
;;;9392   			{
;;;9393   			sp_ch_stat=scsERR1; 	//Не включилась вентиляция;
;;;9394   
;;;9395   			}
;;;9396   		}
;;;9397   	if(sk_stat[0]==1)sp_ch_stat=scsWRK;
005950  f8df92d4          LDR      r9,|L1.23592|
005954  7830              LDRB     r0,[r6,#0]            ;9379
005956  4cb6              LDR      r4,|L1.23600|
005958  2500              MOVS     r5,#0                 ;9382
00595a  f04f0802          MOV      r8,#2                 ;9385
00595e  2901              CMP      r1,#1                 ;9377
005960  d11b              BNE      |L1.22938|
005962  2801              CMP      r0,#1                 ;9379
005964  d008              BEQ      |L1.22904|
005966  f04f0105          MOV      r1,#5                 ;9381
00596a  8021              STRH     r1,[r4,#0]            ;9381
00596c  f8ba1000          LDRH     r1,[r10,#0]           ;9382  ; SP_CH_VENT_BLOK
005970  b911              CBNZ     r1,|L1.22904|
005972  8025              STRH     r5,[r4,#0]            ;9384
005974  f8878000          STRB     r8,[r7,#0]            ;9385
                  |L1.22904|
005978  f9b41000          LDRSH    r1,[r4,#0]            ;9388  ; sp_ch_stat_cnt
00597c  b139              CBZ      r1,|L1.22926|
00597e  f1a10101          SUB      r1,r1,#1              ;9390
005982  b209              SXTH     r1,r1                 ;9390
005984  8021              STRH     r1,[r4,#0]            ;9390
005986  b911              CBNZ     r1,|L1.22926|
005988  f04f0103          MOV      r1,#3                 ;9393
00598c  7039              STRB     r1,[r7,#0]            ;9393
                  |L1.22926|
00598e  f8991000          LDRB     r1,[r9,#0]  ; sk_stat
005992  2901              CMP      r1,#1
005994  d101              BNE      |L1.22938|
005996  f8878000          STRB     r8,[r7,#0]
                  |L1.22938|
;;;9398   	}
;;;9399   
;;;9400   if(sp_ch_stat==scsWRK)
00599a  7839              LDRB     r1,[r7,#0]  ; sp_ch_stat
00599c  2902              CMP      r1,#2
00599e  d123              BNE      |L1.23016|
;;;9401   	{
;;;9402   	if(sp_ch_stat_old!=sp_ch_stat)
;;;9403   		{
;;;9404   		sp_ch_wrk_cnt=(signed long)speedChrgTimeInHour*3600L;
0059a0  4aa4              LDR      r2,|L1.23604|
;;;9405   		hv_vz_up_cnt=0;
0059a2  49a5              LDR      r1,|L1.23608|
0059a4  2802              CMP      r0,#2                 ;9402
0059a6  d008              BEQ      |L1.22970|
0059a8  48a4              LDR      r0,|L1.23612|
0059aa  f44f6361          MOV      r3,#0xe10             ;9404
0059ae  f9b00000          LDRSH    r0,[r0,#0]            ;9404  ; speedChrgTimeInHour
0059b2  fb00f003          MUL      r0,r0,r3              ;9404
0059b6  6010              STR      r0,[r2,#0]            ;9404  ; sp_ch_wrk_cnt
0059b8  600d              STR      r5,[r1,#0]  ; hv_vz_up_cnt
                  |L1.22970|
;;;9406   		}
;;;9407   	sp_ch_wrk_cnt--;
0059ba  6810              LDR      r0,[r2,#0]  ; sp_ch_wrk_cnt
0059bc  f1a00001          SUB      r0,r0,#1
0059c0  6010              STR      r0,[r2,#0]  ; sp_ch_wrk_cnt
;;;9408   	hv_vz_up_cnt++;
0059c2  680a              LDR      r2,[r1,#0]  ; hv_vz_up_cnt
0059c4  f1020201          ADD      r2,r2,#1
0059c8  600a              STR      r2,[r1,#0]  ; hv_vz_up_cnt
;;;9409   	if(sp_ch_wrk_cnt==0)
0059ca  b918              CBNZ     r0,|L1.22996|
;;;9410   		{
;;;9411   		sp_ch_stat=scsOFF;
0059cc  703d              STRB     r5,[r7,#0]
;;;9412   		speedz_mem_hndl(0);
0059ce  2000              MOVS     r0,#0
0059d0  f7fffffe          BL       speedz_mem_hndl
                  |L1.22996|
;;;9413   		}
;;;9414   	#ifdef UKU_220_IPS_TERMOKOMPENSAT
;;;9415   	if((sk_stat[0]==0)&&(SP_CH_VENT_BLOK==1))sp_ch_stat=scsERR2;
0059d4  f8990000          LDRB     r0,[r9,#0]  ; sk_stat
0059d8  b930              CBNZ     r0,|L1.23016|
0059da  f8ba0000          LDRH     r0,[r10,#0]  ; SP_CH_VENT_BLOK
0059de  2801              CMP      r0,#1
0059e0  d102              BNE      |L1.23016|
0059e2  f04f0004          MOV      r0,#4
0059e6  7038              STRB     r0,[r7,#0]
                  |L1.23016|
;;;9416   	#endif
;;;9417   	}
;;;9418   
;;;9419   if(sp_ch_stat==scsERR1)		//Отсутствует вентиляция при включении
0059e8  7838              LDRB     r0,[r7,#0]  ; sp_ch_stat
;;;9420   	{
;;;9421   	if((sp_ch_stat_old!=sp_ch_stat)||(sp_ch_stat_cnt==0))
;;;9422   		{
;;;9423   		sp_ch_stat_cnt=10;
;;;9424   		}
;;;9425   	sp_ch_stat_cnt--;
;;;9426   	if((sp_ch_stat_cnt==10)||(sp_ch_stat_cnt==9))
;;;9427   		{
;;;9428   		show_mess(	"  УСКОРЕННЫЙ ЗАРЯД  ",
0059ea  f2413b88          MOV      r11,#0x1388
0059ee  f04f0a0a          MOV      r10,#0xa              ;9423
0059f2  2803              CMP      r0,#3                 ;9419
0059f4  d119              BNE      |L1.23082|
0059f6  7830              LDRB     r0,[r6,#0]            ;9421  ; sp_ch_stat_old
0059f8  2803              CMP      r0,#3                 ;9421
0059fa  d101              BNE      |L1.23040|
0059fc  8820              LDRH     r0,[r4,#0]            ;9421  ; sp_ch_stat_cnt
0059fe  b908              CBNZ     r0,|L1.23044|
                  |L1.23040|
005a00  f8a4a000          STRH     r10,[r4,#0]           ;9423
                  |L1.23044|
005a04  8820              LDRH     r0,[r4,#0]            ;9425  ; sp_ch_stat_cnt
005a06  f1a00001          SUB      r0,r0,#1              ;9425
005a0a  b200              SXTH     r0,r0                 ;9425
005a0c  8020              STRH     r0,[r4,#0]            ;9425
005a0e  280a              CMP      r0,#0xa               ;9426
005a10  d001              BEQ      |L1.23062|
005a12  2809              CMP      r0,#9                 ;9426
005a14  d109              BNE      |L1.23082|
                  |L1.23062|
005a16  4b8a              LDR      r3,|L1.23616|
005a18  a08a              ADR      r0,|L1.23620|
005a1a  f1030218          ADD      r2,r3,#0x18
005a1e  f1020118          ADD      r1,r2,#0x18
005a22  f8cdb000          STR      r11,[sp,#0]
005a26  f7fffffe          BL       show_mess
                  |L1.23082|
;;;9429   					"   НЕ МОЖЕТ БЫТЬ    ",
;;;9430   					"      ВКЛЮЧЕН       ",
;;;9431   					"  БЕЗ ВЕНТИЛЯЦИИ!!  ",
;;;9432   					5000);
;;;9433   		}
;;;9434   	}
;;;9435   if(sp_ch_stat==scsERR2)		//Пропала вентиляция при работе
005a2a  7838              LDRB     r0,[r7,#0]  ; sp_ch_stat
005a2c  2804              CMP      r0,#4
005a2e  d11f              BNE      |L1.23152|
;;;9436   	{
;;;9437   	if((sp_ch_stat_old!=sp_ch_stat)||(sp_ch_stat_cnt==0))
005a30  7830              LDRB     r0,[r6,#0]  ; sp_ch_stat_old
005a32  2804              CMP      r0,#4
005a34  d101              BNE      |L1.23098|
005a36  8820              LDRH     r0,[r4,#0]  ; sp_ch_stat_cnt
005a38  b908              CBNZ     r0,|L1.23102|
                  |L1.23098|
;;;9438   		{
;;;9439   		sp_ch_stat_cnt=10;
005a3a  f8a4a000          STRH     r10,[r4,#0]
                  |L1.23102|
;;;9440   		}
;;;9441   	sp_ch_stat_cnt--;
005a3e  8820              LDRH     r0,[r4,#0]  ; sp_ch_stat_cnt
005a40  f1a00001          SUB      r0,r0,#1
005a44  b200              SXTH     r0,r0
005a46  8020              STRH     r0,[r4,#0]
;;;9442   	if((sp_ch_stat_cnt==10)||(sp_ch_stat_cnt==9))
005a48  280a              CMP      r0,#0xa
005a4a  d001              BEQ      |L1.23120|
005a4c  2809              CMP      r0,#9
005a4e  d109              BNE      |L1.23140|
                  |L1.23120|
;;;9443   		{
;;;9444   		show_mess(	"  УСКОРЕННЫЙ ЗАРЯД  ",
005a50  4b82              LDR      r3,|L1.23644|
005a52  a07c              ADR      r0,|L1.23620|
005a54  f1030218          ADD      r2,r3,#0x18
005a58  f1020118          ADD      r1,r2,#0x18
005a5c  f8cdb000          STR      r11,[sp,#0]
005a60  f7fffffe          BL       show_mess
                  |L1.23140|
;;;9445   					"    ЗАБЛОКИРОВАН    ",
;;;9446   					"     НЕИСПРАВНА     ",
;;;9447   					"    ВЕНТИЛЯЦИЯ!!!   ",
;;;9448   					5000);
;;;9449   		}
;;;9450   	if(sk_stat[0]==1)sp_ch_stat=scsWRK;
005a64  f8990000          LDRB     r0,[r9,#0]  ; sk_stat
005a68  2801              CMP      r0,#1
005a6a  d101              BNE      |L1.23152|
005a6c  f8878000          STRB     r8,[r7,#0]
                  |L1.23152|
;;;9451   	}
;;;9452   
;;;9453   
;;;9454   sp_ch_stat_old=sp_ch_stat;
005a70  7838              LDRB     r0,[r7,#0]  ; sp_ch_stat
005a72  7030              STRB     r0,[r6,#0]
;;;9455   
;;;9456   
;;;9457   
;;;9458   if(speedChrgAvtEn==1)
005a74  497a              LDR      r1,|L1.23648|
;;;9459   	{
;;;9460   	if((sp_ch_stat==scsOFF)&&(spc_stat==spcOFF)
;;;9461   		#ifdef UKU_220_IPS_TERMOKOMPENSAT
;;;9462   		&&(vz1_stat==vz1sOFF)&&(vz2_stat==vz2sOFF)
;;;9463   		#endif
;;;9464   		)
;;;9465   		{
;;;9466   		if((load_U<u_necc)&&((u_necc-load_U)>speedChrgDU)
;;;9467   		#ifdef UKU_220_IPS_TERMOKOMPENSAT
;;;9468   		&&(abs(Ib_ips_termokompensat/10-IZMAX)<5)
;;;9469   		#endif
;;;9470   		#ifdef UKU_220_V2
;;;9471   		&&(abs(bat[0]._Ib/10-IZMAX)<10)
;;;9472   		#endif
;;;9473   		&&(!speedChrgBlckStat))
005a76  4c56              LDR      r4,|L1.23504|
005a78  8809              LDRH     r1,[r1,#0]            ;9458  ; speedChrgAvtEn
005a7a  2901              CMP      r1,#1                 ;9458
005a7c  d109              BNE      |L1.23186|
005a7e  4955              LDR      r1,|L1.23508|
;;;9474   			{
;;;9475   			speedChargeStartCnt++;
005a80  4e78              LDR      r6,|L1.23652|
005a82  780a              LDRB     r2,[r1,#0]            ;9460  ; spc_stat
005a84  4310              ORRS     r0,r0,r2              ;9460
005a86  7b0a              LDRB     r2,[r1,#0xc]          ;9460  ; vz1_stat
005a88  7bc9              LDRB     r1,[r1,#0xf]          ;9460  ; vz2_stat
005a8a  4310              ORRS     r0,r0,r2              ;9460
005a8c  4308              ORRS     r0,r0,r1              ;9460
005a8e  d007              BEQ      |L1.23200|
;;;9476   			if(speedChargeStartCnt>=60)
;;;9477   				{
;;;9478   				speedChargeStartStop();
;;;9479   				speedz_mem_hndl(5);
;;;9480   				}
;;;9481   			}
;;;9482   		else speedChargeStartCnt=0;
;;;9483   		}
;;;9484   	else speedChargeStartCnt=0;
005a90  7035              STRB     r5,[r6,#0]
                  |L1.23186|
;;;9485   	}
;;;9486   
;;;9487   
;;;9488   
;;;9489   /*
;;;9490   if(speedChIsOn)
;;;9491   	{
;;;9492   	speedChTimeCnt++;
;;;9493   	if(speedChTimeCnt>=((signed long)speedChrgTimeInHour*3600L))
;;;9494   		{
;;;9495   		speedChIsOn=0;
;;;9496   		}
;;;9497   	if(speedChrgBlckStat)
;;;9498   		{
;;;9499   		speedChIsOn=0;
;;;9500   		speedChTimeCnt=0;
;;;9501   		}
;;;9502   	}
;;;9503   
;;;9504   
;;;9505   
;;;9506   if(speedChrgAvtEn)
;;;9507   	{
;;;9508   	if(!speedChIsOn)
;;;9509   		{
;;;9510   		if((load_U<u_necc)&&((u_necc-load_U)>speedChrgDU)&&(abs(Ib_ips_termokompensat/10-IZMAX)<5)&&(!speedChrgBlckStat))
;;;9511   			{
;;;9512   			speedChIsOn=1;
;;;9513   			}
;;;9514   		}
;;;9515   	}
;;;9516   
;;;9517   
;;;9518   */
;;;9519   if(/*(speedChrgBlckSrc!=1)&&*/(speedChrgBlckSrc!=2)) speedChrgBlckStat=0;
005a92  4875              LDR      r0,|L1.23656|
005a94  8800              LDRH     r0,[r0,#0]  ; speedChrgBlckSrc
005a96  2802              CMP      r0,#2
005a98  d02e              BEQ      |L1.23288|
005a9a  8025              STRH     r5,[r4,#0]
                  |L1.23196|
;;;9520   else
;;;9521   	{
;;;9522   	speedChrgBlckStat=0;
;;;9523   	if(speedChrgBlckSrc==1)
;;;9524   		{
;;;9525   		if(((speedChrgBlckLog==0)&&(adc_buff_[11]>2000)) || ((speedChrgBlckLog==1)&&(adc_buff_[11]<2000))) speedChrgBlckStat=1;
;;;9526   		}
;;;9527   	else if(speedChrgBlckSrc==2)
;;;9528   		{
;;;9529   		if(((speedChrgBlckLog==0)&&(adc_buff_[13]>2000)) || ((speedChrgBlckLog==1)&&(adc_buff_[13]<2000))) speedChrgBlckStat=1;
;;;9530   		}
;;;9531   	}
;;;9532   
;;;9533   /*
;;;9534   if(speedChrgBlckStat==1)
;;;9535   	{
;;;9536   
;;;9537   	//speedChargeStartStop();
;;;9538   
;;;9539   	speedChrgShowCnt++;
;;;9540   	if(speedChrgShowCnt>=30)	
;;;9541   		{
;;;9542   		speedChrgShowCnt=0;
;;;9543   		show_mess(	"     УСКОРЕННЫЙ     ",
;;;9544   					"       ЗАРЯД        ",
;;;9545   					"     ЗАПРЕЩЕН!!!    ",
;;;9546   					"                    ",
;;;9547   					5000);
;;;9548   		}
;;;9549   	} 
;;;9550   else speedChrgShowCnt=0;  */
;;;9551   
;;;9552   
;;;9553   }
005a9c  e8bd8ff8          POP      {r3-r11,pc}
                  |L1.23200|
005aa0  483e              LDR      r0,|L1.23452|
005aa2  4972              LDR      r1,|L1.23660|
005aa4  f9b00000          LDRSH    r0,[r0,#0]            ;9466  ; load_U
005aa8  f9b11000          LDRSH    r1,[r1,#0]            ;9466  ; u_necc
005aac  4288              CMP      r0,r1                 ;9466
005aae  da14              BGE      |L1.23258|
005ab0  1a08              SUBS     r0,r1,r0              ;9466
005ab2  496f              LDR      r1,|L1.23664|
005ab4  f9b11000          LDRSH    r1,[r1,#0]            ;9466  ; speedChrgDU
005ab8  4288              CMP      r0,r1                 ;9466
005aba  dd0e              BLE      |L1.23258|
005abc  486d              LDR      r0,|L1.23668|
005abe  496e              LDR      r1,|L1.23672|
005ac0  f9b00000          LDRSH    r0,[r0,#0]            ;9468  ; Ib_ips_termokompensat
005ac4  8809              LDRH     r1,[r1,#0]            ;9468  ; IZMAX
005ac6  fb90f0fa          SDIV     r0,r0,r10             ;9468
005aca  1a40              SUBS     r0,r0,r1              ;9468
005acc  b200              SXTH     r0,r0                 ;9468
005ace  f7fffffe          BL       abs
005ad2  2805              CMP      r0,#5                 ;9468
005ad4  da01              BGE      |L1.23258|
005ad6  8820              LDRH     r0,[r4,#0]            ;9473  ; speedChrgBlckStat
005ad8  b108              CBZ      r0,|L1.23262|
                  |L1.23258|
005ada  7035              STRB     r5,[r6,#0]            ;9482
005adc  e7d9              B        |L1.23186|
                  |L1.23262|
005ade  7830              LDRB     r0,[r6,#0]            ;9475  ; speedChargeStartCnt
005ae0  f1000001          ADD      r0,r0,#1              ;9475
005ae4  b2c0              UXTB     r0,r0                 ;9475
005ae6  7030              STRB     r0,[r6,#0]            ;9475
005ae8  283c              CMP      r0,#0x3c              ;9476
005aea  d3d2              BCC      |L1.23186|
005aec  f7fffffe          BL       speedChargeStartStop
005af0  2005              MOVS     r0,#5                 ;9479
005af2  f7fffffe          BL       speedz_mem_hndl
005af6  e7cc              B        |L1.23186|
                  |L1.23288|
005af8  8025              STRH     r5,[r4,#0]            ;9522
005afa  4860              LDR      r0,|L1.23676|
005afc  4960              LDR      r1,|L1.23680|
005afe  f44f63fa          MOV      r3,#0x7d0             ;9525
005b02  f9b00000          LDRSH    r0,[r0,#0]            ;9529  ; speedChrgBlckLog
005b06  b918              CBNZ     r0,|L1.23312|
005b08  f9b1201a          LDRSH    r2,[r1,#0x1a]         ;9529  ; adc_buff_
005b0c  429a              CMP      r2,r3                 ;9529
005b0e  dc05              BGT      |L1.23324|
                  |L1.23312|
005b10  2801              CMP      r0,#1                 ;9529
005b12  d1c3              BNE      |L1.23196|
005b14  f9b1001a          LDRSH    r0,[r1,#0x1a]         ;9529  ; adc_buff_
005b18  4298              CMP      r0,r3                 ;9529
005b1a  dabf              BGE      |L1.23196|
                  |L1.23324|
005b1c  f04f0001          MOV      r0,#1                 ;9529
005b20  8020              STRH     r0,[r4,#0]            ;9529
005b22  e7bb              B        |L1.23196|
;;;9554   
                          ENDP

                  averageChargeHndl PROC
;;;9610   //-----------------------------------------------
;;;9611   void averageChargeHndl(void)
005b24  e92d4ff8          PUSH     {r3-r11,lr}
;;;9612   {
;;;9613   /*
;;;9614   if(hv_vz_stat==hvsOFF)
;;;9615   	{
;;;9616   	if((sk_stat[1]==1)&&(sk_stat_old[1]=0))
;;;9617   	} */
;;;9618   if(hv_vz_stat!=hvsOFF)
005b28  f8dfa158          LDR      r10,|L1.23684|
005b2c  f04f0b00          MOV      r11,#0
005b30  f89a0000          LDRB     r0,[r10,#0]  ; hv_vz_stat
005b34  b130              CBZ      r0,|L1.23364|
;;;9619   	{
;;;9620   	hv_vz_stat=hvsOFF; 	
005b36  f88ab000          STRB     r11,[r10,#0]
;;;9621   	lc640_write(EE_HV_VZ_STAT,hvsOFF);
005b3a  2100              MOVS     r1,#0
005b3c  f44f70b4          MOV      r0,#0x168
005b40  f7fffffe          BL       lc640_write
                  |L1.23364|
;;;9622   	}
;;;9623   
;;;9624   if(hv_vz_stat==hvsSTEP1)
005b44  f89a0000          LDRB     r0,[r10,#0]  ; hv_vz_stat
;;;9625   	{
;;;9626   	if(hv_vz_stat_old!=hv_vz_stat)
;;;9627   		{
;;;9628   		hv_vz_stat_cnt=5;
;;;9629   		}
;;;9630   	if(hv_vz_stat_cnt)
;;;9631   		{
;;;9632   		hv_vz_stat_cnt--;
;;;9633   		if(hv_vz_stat_cnt==0)
;;;9634   			{
;;;9635   			hv_vz_stat=hvsERR1; 	//Не включилась вентиляция;
;;;9636   			lc640_write(EE_HV_VZ_STAT,hvsERR1);
;;;9637   			}
;;;9638   		}
;;;9639   	if(sk_stat[0]==1)
005b48  4e37              LDR      r6,|L1.23592|
005b4a  4d4f              LDR      r5,|L1.23688|
005b4c  4c4f              LDR      r4,|L1.23692|
005b4e  f04f0905          MOV      r9,#5                 ;9628
005b52  2801              CMP      r0,#1                 ;9624
005b54  d118              BNE      |L1.23432|
005b56  7828              LDRB     r0,[r5,#0]            ;9626  ; hv_vz_stat_old
005b58  2801              CMP      r0,#1                 ;9626
005b5a  d001              BEQ      |L1.23392|
005b5c  f8a49000          STRH     r9,[r4,#0]            ;9628
                  |L1.23392|
005b60  f9b40000          LDRSH    r0,[r4,#0]            ;9630  ; hv_vz_stat_cnt
005b64  b168              CBZ      r0,|L1.23426|
005b66  f1a00001          SUB      r0,r0,#1              ;9632
005b6a  b200              SXTH     r0,r0                 ;9632
005b6c  8020              STRH     r0,[r4,#0]            ;9632
005b6e  b940              CBNZ     r0,|L1.23426|
005b70  f04f0006          MOV      r0,#6                 ;9635
005b74  f88a0000          STRB     r0,[r10,#0]           ;9635
005b78  4601              MOV      r1,r0                 ;9636
005b7a  f44f70b4          MOV      r0,#0x168             ;9636
005b7e  f7fffffe          BL       lc640_write
                  |L1.23426|
005b82  7830              LDRB     r0,[r6,#0]  ; sk_stat
005b84  2801              CMP      r0,#1
005b86  e083              B        |L1.23696|
                  |L1.23432|
005b88  e09c              B        |L1.23748|
005b8a  0000              DCW      0x0000
                  |L1.23436|
                          DCD      superviser_cnt
                  |L1.23440|
                          DCD      NPN_OUT
                  |L1.23444|
                          DCD      npn_tz_cnt
                  |L1.23448|
                          DCD      npn_stat
                  |L1.23452|
                          DCD      load_U
                  |L1.23456|
                          DCD      UONPN
                  |L1.23460|
                          DCD      net_Ua
                  |L1.23464|
                          DCD      net_Ub
                  |L1.23468|
                          DCD      net_Uc
                  |L1.23472|
                          DCD      UMN
                  |L1.23476|
                          DCD      TZNPN
                  |L1.23480|
                          DCD      UVNPN
                  |L1.23484|
                          DCD      load_off_cnt
                  |L1.23488|
                          DCD      load_off_stat
                  |L1.23492|
                          DCD      dUNPN
                  |L1.23496|
                          DCD      tloaddisable_cmnd
                  |L1.23500|
                          DCD      sp_ch_stat
                  |L1.23504|
                          DCD      speedChrgBlckStat
                  |L1.23508|
                          DCD      ||area_number.25||+0x1a
                  |L1.23512|
                          DCD      ||.text||+0xeb4
                  |L1.23516|
005bdc  20202020          DCB      "    ",231,224,225,235,238,234,232,240,238,226,224,237,"!"
005be0  e7e0e1eb
005be4  eeeae8f0
005be8  eee2e0ed
005bec  21      
005bed  20202000          DCB      "   ",0
005bf1  00                DCB      0
005bf2  00                DCB      0
005bf3  00                DCB      0
                  |L1.23540|
005bf4  20202020          DCB      "       ",231,224,240,255,228,"        ",0
005bf8  202020e7
005bfc  e0f0ffe4
005c00  20202020
005c04  20202020
005c08  00      
005c09  00                DCB      0
005c0a  00                DCB      0
005c0b  00                DCB      0
                  |L1.23564|
005c0c  20202020          DCB      "     ",211,241,234,238,240,229,237,237,251,233,"     ",0
005c10  20d3f1ea
005c14  eef0e5ed
005c18  edfbe920
005c1c  20202020
005c20  00      
005c21  00                DCB      0
005c22  00                DCB      0
005c23  00                DCB      0
                  |L1.23588|
                          DCD      SP_CH_VENT_BLOK
                  |L1.23592|
                          DCD      sk_stat
                  |L1.23596|
                          DCD      sp_ch_stat_old
                  |L1.23600|
                          DCD      sp_ch_stat_cnt
                  |L1.23604|
                          DCD      sp_ch_wrk_cnt
                  |L1.23608|
                          DCD      hv_vz_up_cnt
                  |L1.23612|
                          DCD      speedChrgTimeInHour
                  |L1.23616|
                          DCD      ||.text||+0xd7c
                  |L1.23620|
005c44  2020d3d1          DCB      "  ",211,209,202,206,208,197,205,205,219,201," ",199,192
005c48  caced0c5
005c4c  cdcddbc9
005c50  20c7c0  
005c53  d0dfc420          DCB      208,223,196,"  ",0
005c57  2000    
005c59  00                DCB      0
005c5a  00                DCB      0
005c5b  00                DCB      0
                  |L1.23644|
                          DCD      ||.text||+0x8e0
                  |L1.23648|
                          DCD      speedChrgAvtEn
                  |L1.23652|
                          DCD      speedChargeStartCnt
                  |L1.23656|
                          DCD      speedChrgBlckSrc
                  |L1.23660|
                          DCD      u_necc
                  |L1.23664|
                          DCD      speedChrgDU
                  |L1.23668|
                          DCD      Ib_ips_termokompensat
                  |L1.23672|
                          DCD      IZMAX
                  |L1.23676|
                          DCD      speedChrgBlckLog
                  |L1.23680|
                          DCD      ||.bss||+0x40c
                  |L1.23684|
                          DCD      hv_vz_stat
                  |L1.23688|
                          DCD      hv_vz_stat_old
                  |L1.23692|
                          DCD      hv_vz_stat_cnt
                  |L1.23696|
005c90  d118              BNE      |L1.23748|
;;;9640   		{
;;;9641   		hv_vz_stat=hvsSTEP2;
005c92  f04f0002          MOV      r0,#2
005c96  f88a0000          STRB     r0,[r10,#0]
;;;9642   		lc640_write(EE_HV_VZ_STAT,hvsSTEP2);
005c9a  4601              MOV      r1,r0
005c9c  f44f70b4          MOV      r0,#0x168
005ca0  f7fffffe          BL       lc640_write
;;;9643   		tree_up(iHV_STEP2_2,1,0,0);
005ca4  2300              MOVS     r3,#0
005ca6  461a              MOV      r2,r3
005ca8  2101              MOVS     r1,#1
005caa  20dc              MOVS     r0,#0xdc
005cac  f7fffffe          BL       tree_up
;;;9644   		tree_up(iHV_STEP2_1,0,0,0);
005cb0  2300              MOVS     r3,#0
005cb2  461a              MOV      r2,r3
005cb4  4619              MOV      r1,r3
005cb6  20db              MOVS     r0,#0xdb
005cb8  f7fffffe          BL       tree_up
;;;9645   		ret(1200);
005cbc  f44f6096          MOV      r0,#0x4b0
005cc0  f7fffffe          BL       ||ret||
                  |L1.23748|
;;;9646   		}
;;;9647   	}
;;;9648   
;;;9649   if(hv_vz_stat==hvsSTEP2)
005cc4  f89a0000          LDRB     r0,[r10,#0]  ; hv_vz_stat
005cc8  2802              CMP      r0,#2
005cca  d10b              BNE      |L1.23780|
;;;9650   	{
;;;9651   	if((hv_vz_stat_old!=hv_vz_stat)||(hv_vz_stat_cnt==0))
005ccc  7829              LDRB     r1,[r5,#0]  ; hv_vz_stat_old
005cce  2902              CMP      r1,#2
005cd0  d101              BNE      |L1.23766|
005cd2  8821              LDRH     r1,[r4,#0]  ; hv_vz_stat_cnt
005cd4  b911              CBNZ     r1,|L1.23772|
                  |L1.23766|
;;;9652   		{
;;;9653   		hv_vz_stat_cnt=15;
005cd6  f04f010f          MOV      r1,#0xf
005cda  8021              STRH     r1,[r4,#0]
                  |L1.23772|
;;;9654   		}
;;;9655   	hv_vz_stat_cnt--;
005cdc  8821              LDRH     r1,[r4,#0]  ; hv_vz_stat_cnt
005cde  f1a10101          SUB      r1,r1,#1
005ce2  8021              STRH     r1,[r4,#0]
                  |L1.23780|
;;;9656   	//if((hv_vz_stat_cnt==14)/*||(hv_vz_stat_cnt==13)||(hv_vz_stat_cnt==12)*/)
;;;9657   	//	{
;;;9658   //		show_mess_number(	"     ВНИМАНИЕ!!!    ",
;;;9659   	//				"  Напряжение будет  ",
;;;9660   	//				" увеличено до     @В",
;;;9661   	//				"ОТКЛЮЧИТЕ НАГРУЗКУ!!",
;;;9662   	//				4800,UVZ,1);
;;;9663   	//	}
;;;9664   	//if((hv_vz_stat_cnt==8)/*||(hv_vz_stat_cnt==7)||(hv_vz_stat_cnt==6)*/)
;;;9665   	//	{
;;;9666   	//	show_mess(	"    ПОДТВЕРДИТЕ     ",
;;;9667   	//				"     НАЖАТИЕМ       ",
;;;9668   	//				"    ЦЕНТРАЛЬНОЙ     ",
;;;9669   	//				"      КНОПКИ        ",
;;;9670   	//				4800);
;;;9671   	//	} 
;;;9672   /*	if(sk_stat[1]==1)
;;;9673   		{
;;;9674   		hv_vz_stat=hvsWRK;
;;;9675   		lc640_write(EE_HV_VZ_STAT,hvsWRK);
;;;9676   		}*/
;;;9677   	}
;;;9678   
;;;9679   if(hv_vz_stat==hvsSTEP3)
;;;9680   	{
;;;9681   	if((hv_vz_stat_old!=hv_vz_stat)||(hv_vz_stat_cnt==0))
;;;9682   		{
;;;9683   		hv_vz_stat_cnt=10;
005ce4  270a              MOVS     r7,#0xa
;;;9684   		}
;;;9685   	hv_vz_stat_cnt--;
;;;9686   	if((hv_vz_stat_cnt==10)||(hv_vz_stat_cnt==9))
;;;9687   		{
;;;9688   		show_mess(	"     ВКЛЮЧИТЕ       ",
005ce6  f2413888          MOV      r8,#0x1388
005cea  2803              CMP      r0,#3                 ;9679
005cec  d122              BNE      |L1.23860|
005cee  7828              LDRB     r0,[r5,#0]            ;9681  ; hv_vz_stat_old
005cf0  2803              CMP      r0,#3                 ;9681
005cf2  d101              BNE      |L1.23800|
005cf4  8820              LDRH     r0,[r4,#0]            ;9681  ; hv_vz_stat_cnt
005cf6  b900              CBNZ     r0,|L1.23802|
                  |L1.23800|
005cf8  8027              STRH     r7,[r4,#0]            ;9683
                  |L1.23802|
005cfa  8820              LDRH     r0,[r4,#0]            ;9685  ; hv_vz_stat_cnt
005cfc  f1a00001          SUB      r0,r0,#1              ;9685
005d00  b200              SXTH     r0,r0                 ;9685
005d02  8020              STRH     r0,[r4,#0]            ;9685
005d04  280a              CMP      r0,#0xa               ;9686
005d06  d001              BEQ      |L1.23820|
005d08  2809              CMP      r0,#9                 ;9686
005d0a  d109              BNE      |L1.23840|
                  |L1.23820|
005d0c  4bfd              LDR      r3,|L1.24836|
005d0e  a2fe              ADR      r2,|L1.24840|
005d10  f5a37194          SUB      r1,r3,#0x128
005d14  f1010018          ADD      r0,r1,#0x18
005d18  f8cd8000          STR      r8,[sp,#0]
005d1c  f7fffffe          BL       show_mess
                  |L1.23840|
;;;9689   					"      ТУМБЛЕР       ",
;;;9690   					"   ВЫРАВНИВАЮЩИЙ    ",
;;;9691   					"       ЗАРЯД        ",
;;;9692   					5000);
;;;9693   		}
;;;9694   	if(sk_stat[1]==1)
005d20  7870              LDRB     r0,[r6,#1]  ; sk_stat
005d22  2801              CMP      r0,#1
005d24  d106              BNE      |L1.23860|
;;;9695   		{
;;;9696   		hv_vz_stat=hvsWRK;
005d26  f88a9000          STRB     r9,[r10,#0]
;;;9697   		lc640_write(EE_HV_VZ_STAT,hvsWRK);
005d2a  2105              MOVS     r1,#5
005d2c  f44f70b4          MOV      r0,#0x168
005d30  f7fffffe          BL       lc640_write
                  |L1.23860|
;;;9698   		}
;;;9699   	}
;;;9700   
;;;9701   if(hv_vz_stat==hvsWRK)
005d34  f89a0000          LDRB     r0,[r10,#0]  ; hv_vz_stat
005d38  2805              CMP      r0,#5
005d3a  d13a              BNE      |L1.23986|
;;;9702   	{
;;;9703   	if(hv_vz_stat_old!=hv_vz_stat)
005d3c  7828              LDRB     r0,[r5,#0]  ; hv_vz_stat_old
;;;9704   		{
;;;9705   		hv_vz_wrk_cnt=3600L/*100L*/*((long)VZ_HR);
005d3e  4af8              LDR      r2,|L1.24864|
;;;9706   		if(VZ_HR==0)  	hv_vz_wrk_cnt=1800L;
;;;9707   		hv_vz_up_cnt=0L;
005d40  49f8              LDR      r1,|L1.24868|
005d42  2805              CMP      r0,#5                 ;9703
005d44  d00d              BEQ      |L1.23906|
005d46  48f8              LDR      r0,|L1.24872|
005d48  f44f6361          MOV      r3,#0xe10             ;9705
005d4c  f9b00000          LDRSH    r0,[r0,#0]            ;9705  ; VZ_HR
005d50  fb00f303          MUL      r3,r0,r3              ;9705
005d54  6013              STR      r3,[r2,#0]            ;9705  ; hv_vz_wrk_cnt
005d56  b910              CBNZ     r0,|L1.23902|
005d58  f44f60e1          MOV      r0,#0x708             ;9706
005d5c  6010              STR      r0,[r2,#0]            ;9706  ; hv_vz_wrk_cnt
                  |L1.23902|
005d5e  f8c1b000          STR      r11,[r1,#0]  ; hv_vz_up_cnt
                  |L1.23906|
;;;9708   		}
;;;9709   	hv_vz_wrk_cnt--;
005d62  6810              LDR      r0,[r2,#0]  ; hv_vz_wrk_cnt
005d64  f1a00001          SUB      r0,r0,#1
005d68  6010              STR      r0,[r2,#0]  ; hv_vz_wrk_cnt
;;;9710   	hv_vz_up_cnt++;
005d6a  680a              LDR      r2,[r1,#0]  ; hv_vz_up_cnt
005d6c  f1020201          ADD      r2,r2,#1
005d70  600a              STR      r2,[r1,#0]  ; hv_vz_up_cnt
;;;9711   
;;;9712   	if(hv_vz_wrk_cnt==0)
005d72  b940              CBNZ     r0,|L1.23942|
;;;9713   		{
;;;9714   		hv_vz_stat=hvsERR4;
005d74  f04f0009          MOV      r0,#9
005d78  f88a0000          STRB     r0,[r10,#0]
;;;9715   		lc640_write(EE_HV_VZ_STAT,hvsERR4);
005d7c  4601              MOV      r1,r0
005d7e  f44f70b4          MOV      r0,#0x168
005d82  f7fffffe          BL       lc640_write
                  |L1.23942|
;;;9716   		}
;;;9717   	if(sk_stat[0]==0)
005d86  7830              LDRB     r0,[r6,#0]  ; sk_stat
005d88  b940              CBNZ     r0,|L1.23964|
;;;9718   		{
;;;9719   		hv_vz_stat=hvsERR2;
005d8a  f04f0007          MOV      r0,#7
005d8e  f88a0000          STRB     r0,[r10,#0]
;;;9720   		lc640_write(EE_HV_VZ_STAT,hvsERR2);
005d92  4601              MOV      r1,r0
005d94  f44f70b4          MOV      r0,#0x168
005d98  f7fffffe          BL       lc640_write
                  |L1.23964|
;;;9721   		}
;;;9722   	if(sk_stat[1]==0)
005d9c  7870              LDRB     r0,[r6,#1]  ; sk_stat
005d9e  b940              CBNZ     r0,|L1.23986|
;;;9723   		{
;;;9724   		hv_vz_stat=hvsERR3;
005da0  f04f0008          MOV      r0,#8
005da4  f88a0000          STRB     r0,[r10,#0]
;;;9725   		lc640_write(EE_HV_VZ_STAT,hvsERR3);
005da8  4601              MOV      r1,r0
005daa  f44f70b4          MOV      r0,#0x168
005dae  f7fffffe          BL       lc640_write
                  |L1.23986|
;;;9726   		}
;;;9727   	}
;;;9728   
;;;9729   if(hv_vz_stat==hvsERR1)		//Отсутствует вентиляция при включении
005db2  f89a0000          LDRB     r0,[r10,#0]  ; hv_vz_stat
005db6  2806              CMP      r0,#6
005db8  d11a              BNE      |L1.24048|
;;;9730   	{
;;;9731   	if((hv_vz_stat_old!=hv_vz_stat)||(hv_vz_stat_cnt==0))
005dba  7828              LDRB     r0,[r5,#0]  ; hv_vz_stat_old
005dbc  2806              CMP      r0,#6
005dbe  d101              BNE      |L1.24004|
005dc0  8820              LDRH     r0,[r4,#0]  ; hv_vz_stat_cnt
005dc2  b900              CBNZ     r0,|L1.24006|
                  |L1.24004|
;;;9732   		{
;;;9733   		hv_vz_stat_cnt=10;
005dc4  8027              STRH     r7,[r4,#0]
                  |L1.24006|
;;;9734   		}
;;;9735   	hv_vz_stat_cnt--;
005dc6  8820              LDRH     r0,[r4,#0]  ; hv_vz_stat_cnt
005dc8  f1a00001          SUB      r0,r0,#1
005dcc  b200              SXTH     r0,r0
005dce  8020              STRH     r0,[r4,#0]
;;;9736   	if((hv_vz_stat_cnt==10)||(hv_vz_stat_cnt==9))
005dd0  280a              CMP      r0,#0xa
005dd2  d001              BEQ      |L1.24024|
005dd4  2809              CMP      r0,#9
005dd6  d10b              BNE      |L1.24048|
                  |L1.24024|
;;;9737   		{
;;;9738   		show_mess(	"ВЫРАВНИВАЮЩИЙ ЗАРЯД ",
005dd8  4bca              LDR      r3,|L1.24836|
005dda  f8cd8000          STR      r8,[sp,#0]
005dde  3bf0              SUBS     r3,r3,#0xf0
005de0  f1030218          ADD      r2,r3,#0x18
005de4  f1020118          ADD      r1,r2,#0x18
005de8  f2a14084          SUB      r0,r1,#0x484
005dec  f7fffffe          BL       show_mess
                  |L1.24048|
;;;9739   					"   НЕ МОЖЕТ БЫТЬ    ",
;;;9740   					"      ВКЛЮЧЕН       ",
;;;9741   					"  БЕЗ ВЕНТИЛЯЦИИ!!  ",
;;;9742   					5000);
;;;9743   		}
;;;9744   	}
;;;9745   if(hv_vz_stat==hvsERR2)		//Пропала вентиляция при работе
005df0  f89a0000          LDRB     r0,[r10,#0]  ; hv_vz_stat
005df4  2807              CMP      r0,#7
005df6  d123              BNE      |L1.24128|
;;;9746   	{
;;;9747   	if((hv_vz_stat_old!=hv_vz_stat)||(hv_vz_stat_cnt==0))
005df8  7828              LDRB     r0,[r5,#0]  ; hv_vz_stat_old
005dfa  2807              CMP      r0,#7
005dfc  d101              BNE      |L1.24066|
005dfe  8820              LDRH     r0,[r4,#0]  ; hv_vz_stat_cnt
005e00  b900              CBNZ     r0,|L1.24068|
                  |L1.24066|
;;;9748   		{
;;;9749   		hv_vz_stat_cnt=10;
005e02  8027              STRH     r7,[r4,#0]
                  |L1.24068|
;;;9750   		}
;;;9751   	hv_vz_stat_cnt--;
005e04  8820              LDRH     r0,[r4,#0]  ; hv_vz_stat_cnt
005e06  f1a00001          SUB      r0,r0,#1
005e0a  b200              SXTH     r0,r0
005e0c  8020              STRH     r0,[r4,#0]
;;;9752   	if((hv_vz_stat_cnt==10)||(hv_vz_stat_cnt==9))
005e0e  280a              CMP      r0,#0xa
005e10  d001              BEQ      |L1.24086|
005e12  2809              CMP      r0,#9
005e14  d10a              BNE      |L1.24108|
                  |L1.24086|
;;;9753   		{
;;;9754   		show_mess(	"ВЫРАВНИВАЮЩИЙ ЗАРЯД ",
005e16  4bc5              LDR      r3,|L1.24876|
005e18  f8cd8000          STR      r8,[sp,#0]
005e1c  f1030218          ADD      r2,r3,#0x18
005e20  f1020118          ADD      r1,r2,#0x18
005e24  f1010018          ADD      r0,r1,#0x18
005e28  f7fffffe          BL       show_mess
                  |L1.24108|
;;;9755   					"    ЗАБЛОКИРОВАН    ",
;;;9756   					"     НЕИСПРАВНА     ",
;;;9757   					"    ВЕНТИЛЯЦИЯ!!!   ",
;;;9758   					5000);
;;;9759   		}
;;;9760   	if(sk_stat[0]==1)
005e2c  7830              LDRB     r0,[r6,#0]  ; sk_stat
005e2e  2801              CMP      r0,#1
005e30  d106              BNE      |L1.24128|
;;;9761   		{
;;;9762   		hv_vz_stat=hvsWRK;
005e32  f88a9000          STRB     r9,[r10,#0]
;;;9763   		lc640_write(EE_HV_VZ_STAT,hvsWRK);
005e36  2105              MOVS     r1,#5
005e38  f44f70b4          MOV      r0,#0x168
005e3c  f7fffffe          BL       lc640_write
                  |L1.24128|
;;;9764   		}
;;;9765   	}
;;;9766   
;;;9767   if(hv_vz_stat==hvsERR3)		//Отключен тумблер "Выравнивающий заряд"
005e40  f89a0000          LDRB     r0,[r10,#0]  ; hv_vz_stat
005e44  2808              CMP      r0,#8
005e46  d123              BNE      |L1.24208|
;;;9768   	{
;;;9769   	if((hv_vz_stat_old!=hv_vz_stat)||(hv_vz_stat_cnt==0))
005e48  7828              LDRB     r0,[r5,#0]  ; hv_vz_stat_old
005e4a  2808              CMP      r0,#8
005e4c  d101              BNE      |L1.24146|
005e4e  8820              LDRH     r0,[r4,#0]  ; hv_vz_stat_cnt
005e50  b900              CBNZ     r0,|L1.24148|
                  |L1.24146|
;;;9770   		{
;;;9771   		hv_vz_stat_cnt=10;
005e52  8027              STRH     r7,[r4,#0]
                  |L1.24148|
;;;9772   		}
;;;9773   	hv_vz_stat_cnt--;
005e54  8820              LDRH     r0,[r4,#0]  ; hv_vz_stat_cnt
005e56  f1a00001          SUB      r0,r0,#1
005e5a  b200              SXTH     r0,r0
005e5c  8020              STRH     r0,[r4,#0]
;;;9774   	if((hv_vz_stat_cnt==10)||(hv_vz_stat_cnt==9))
005e5e  280a              CMP      r0,#0xa
005e60  d001              BEQ      |L1.24166|
005e62  2809              CMP      r0,#9
005e64  d10a              BNE      |L1.24188|
                  |L1.24166|
;;;9775   		{
;;;9776   		show_mess(	"ВЫРАВНИВАЮЩИЙ ЗАРЯД ",
005e66  4bb2              LDR      r3,|L1.24880|
005e68  f8cd8000          STR      r8,[sp,#0]
005e6c  f5a36217          SUB      r2,r3,#0x970
005e70  f1020118          ADD      r1,r2,#0x18
005e74  f2a140e4          SUB      r0,r1,#0x4e4
005e78  f7fffffe          BL       show_mess
                  |L1.24188|
;;;9777   					"  БУДЕТ ПРОДОЛЖЕН   ",
;;;9778   					"  ПОСЛЕ ВКЛЮЧЕНИЯ   ",
;;;9779   					"    ТУМБЛЕРА!!!     ",
;;;9780   					5000);
;;;9781   		}
;;;9782   	if(sk_stat[1]==1)
005e7c  7870              LDRB     r0,[r6,#1]  ; sk_stat
005e7e  2801              CMP      r0,#1
005e80  d106              BNE      |L1.24208|
;;;9783   		{
;;;9784   		hv_vz_stat=hvsWRK;
005e82  f88a9000          STRB     r9,[r10,#0]
;;;9785   		lc640_write(EE_HV_VZ_STAT,hvsWRK);
005e86  2105              MOVS     r1,#5
005e88  f44f70b4          MOV      r0,#0x168
005e8c  f7fffffe          BL       lc640_write
                  |L1.24208|
;;;9786   		}
;;;9787   	}
;;;9788   if(hv_vz_stat==hvsERR4)		//ВЗ закончился а тумблер включен
005e90  f89a0000          LDRB     r0,[r10,#0]  ; hv_vz_stat
005e94  2809              CMP      r0,#9
005e96  d123              BNE      |L1.24288|
;;;9789   	{
;;;9790   	if((hv_vz_stat_old!=hv_vz_stat)||(hv_vz_stat_cnt==0))
005e98  7828              LDRB     r0,[r5,#0]  ; hv_vz_stat_old
005e9a  2809              CMP      r0,#9
005e9c  d101              BNE      |L1.24226|
005e9e  8820              LDRH     r0,[r4,#0]  ; hv_vz_stat_cnt
005ea0  b900              CBNZ     r0,|L1.24228|
                  |L1.24226|
;;;9791   		{
;;;9792   		hv_vz_stat_cnt=10;
005ea2  8027              STRH     r7,[r4,#0]
                  |L1.24228|
;;;9793   		}
;;;9794   	hv_vz_stat_cnt--;
005ea4  8820              LDRH     r0,[r4,#0]  ; hv_vz_stat_cnt
005ea6  f1a00001          SUB      r0,r0,#1
005eaa  b200              SXTH     r0,r0
005eac  8020              STRH     r0,[r4,#0]
;;;9795   	if((hv_vz_stat_cnt==10)||(hv_vz_stat_cnt==9))
005eae  280a              CMP      r0,#0xa
005eb0  d001              BEQ      |L1.24246|
005eb2  2809              CMP      r0,#9
005eb4  d109              BNE      |L1.24266|
                  |L1.24246|
;;;9796   		{
;;;9797   		show_mess(	"     ВЫКЛЮЧИТЕ      ",
005eb6  4b93              LDR      r3,|L1.24836|
005eb8  a293              ADR      r2,|L1.24840|
005eba  f5a37194          SUB      r1,r3,#0x128
005ebe  f50170ac          ADD      r0,r1,#0x158
005ec2  f8cd8000          STR      r8,[sp,#0]
005ec6  f7fffffe          BL       show_mess
                  |L1.24266|
;;;9798   					"      ТУМБЛЕР       ",
;;;9799   					"   ВЫРАВНИВАЮЩИЙ    ",
;;;9800   					"       ЗАРЯД        ",
;;;9801   					5000);
;;;9802   		}
;;;9803   	if(sk_stat[1]==0)
005eca  7870              LDRB     r0,[r6,#1]  ; sk_stat
005ecc  b940              CBNZ     r0,|L1.24288|
;;;9804   		{
;;;9805   		hv_vz_stat=hvsOFF;
005ece  f88ab000          STRB     r11,[r10,#0]
;;;9806   		lc640_write(EE_HV_VZ_STAT,hvsOFF);
005ed2  2100              MOVS     r1,#0
005ed4  f44f70b4          MOV      r0,#0x168
005ed8  f7fffffe          BL       lc640_write
;;;9807   		vz_stop();
005edc  f7fffffe          BL       vz_stop
                  |L1.24288|
;;;9808   
;;;9809   		}
;;;9810   	}
;;;9811   hv_vz_stat_old=hv_vz_stat;
005ee0  f89a0000          LDRB     r0,[r10,#0]  ; hv_vz_stat
005ee4  7028              STRB     r0,[r5,#0]
;;;9812   /*
;;;9813   if(speedChIsOn)
;;;9814   	{
;;;9815   	speedChTimeCnt++;
;;;9816   	if(speedChTimeCnt>=((signed long)speedChrgTimeInHour*3600L))
;;;9817   		{
;;;9818   		speedChIsOn=0;
;;;9819   		}
;;;9820   	if(speedChrgBlckStat)
;;;9821   		{
;;;9822   		speedChIsOn=0;
;;;9823   		speedChTimeCnt=0;
;;;9824   		}
;;;9825   	}
;;;9826   
;;;9827   
;;;9828   
;;;9829   if(speedChrgAvtEn)
;;;9830   	{
;;;9831   	if(!speedChIsOn)
;;;9832   		{
;;;9833   		if((load_U<u_necc)&&((u_necc-load_U)>speedChrgDU)&&(abs(Ib_ips_termokompensat/10-IZMAX)<5)&&(!speedChrgBlckStat))
;;;9834   			{
;;;9835   			speedChIsOn=1;
;;;9836   			}
;;;9837   		}
;;;9838   	}
;;;9839   
;;;9840   
;;;9841   
;;;9842   if((speedChrgBlckSrc!=1)&&(speedChrgBlckSrc!=2)) speedChrgBlckStat=0;
;;;9843   else
;;;9844   	{
;;;9845   	speedChrgBlckStat=0;
;;;9846   	if(speedChrgBlckSrc==1)
;;;9847   		{
;;;9848   		if(((speedChrgBlckLog==0)&&(adc_buff_[11]>2000)) || ((speedChrgBlckLog==1)&&(adc_buff_[11]<2000))) speedChrgBlckStat=1;
;;;9849   		}
;;;9850   	else if(speedChrgBlckSrc==2)
;;;9851   		{
;;;9852   		if(((speedChrgBlckLog==0)&&(adc_buff_[13]>2000)) || ((speedChrgBlckLog==1)&&(adc_buff_[13]<2000))) speedChrgBlckStat=1;
;;;9853   		}
;;;9854   	}
;;;9855   
;;;9856   
;;;9857   if(speedChrgBlckStat==1)
;;;9858   	{
;;;9859   
;;;9860   	//speedChargeStartStop();
;;;9861   
;;;9862   	speedChrgShowCnt++;
;;;9863   	if(speedChrgShowCnt>=30)	
;;;9864   		{
;;;9865   		speedChrgShowCnt=0;
;;;9866   		show_mess(	"     УСКОРЕННЫЙ     ",
;;;9867   					"       ЗАРЯД        ",
;;;9868   					"     ЗАПРЕЩЕН!!!    ",
;;;9869   					"                    ",
;;;9870   					5000);
;;;9871   		}
;;;9872   	}
;;;9873   else speedChrgShowCnt=0;
;;;9874   
;;;9875   */
;;;9876   }
005ee6  e5d9              B        |L1.23196|
;;;9877   
                          ENDP

                  numOfForvardBps_hndl PROC
;;;9894   //-----------------------------------------------
;;;9895   void	numOfForvardBps_hndl(void)			//Программа смены первого источника для равномерного износа БПСов
005ee8  e92d41f0          PUSH     {r4-r8,lr}
;;;9896   {
;;;9897   
;;;9898   numOfForvardBps_old=numOfForvardBps;
005eec  4c91              LDR      r4,|L1.24884|
005eee  7fe0              LDRB     r0,[r4,#0x1f]  ; numOfForvardBps
005ef0  f8840020          STRB     r0,[r4,#0x20]
;;;9899   
;;;9900   numOfForvardBps=0;
005ef4  f04f0500          MOV      r5,#0
005ef8  77e5              STRB     r5,[r4,#0x1f]
;;;9901   
;;;9902   //FORVARDBPSCHHOUR=10;
;;;9903   
;;;9904   if((FORVARDBPSCHHOUR<=0)||(FORVARDBPSCHHOUR>500))
005efa  4e8f              LDR      r6,|L1.24888|
005efc  f9b60000          LDRSH    r0,[r6,#0]  ; FORVARDBPSCHHOUR
005f00  2800              CMP      r0,#0
005f02  dd02              BLE      |L1.24330|
005f04  f5b07ffa          CMP      r0,#0x1f4
005f08  dd02              BLE      |L1.24336|
                  |L1.24330|
;;;9905   	{
;;;9906   	FORVARDBPSCHHOUR=0;
005f0a  8035              STRH     r5,[r6,#0]
                  |L1.24332|
;;;9907   	return;
;;;9908   	}
;;;9909   
;;;9910   numOfForvardBps_minCnt++;
;;;9911   
;;;9912   
;;;9913   if(numOfForvardBps_minCnt>=60)
;;;9914   	{
;;;9915   	numOfForvardBps_minCnt=0;
;;;9916   	numOfForvardBps_hourCnt=lc640_read_int(EE_FORVBPSHOURCNT);
;;;9917   	numOfForvardBps_hourCnt++;
;;;9918   	if(numOfForvardBps_hourCnt>=(FORVARDBPSCHHOUR*NUMIST))
;;;9919   		{
;;;9920   		numOfForvardBps_hourCnt=0;
;;;9921   		}
;;;9922   	lc640_write_int(EE_FORVBPSHOURCNT,numOfForvardBps_hourCnt);
;;;9923   	}
;;;9924   
;;;9925   numOfForvardBps=numOfForvardBps_hourCnt/FORVARDBPSCHHOUR;
;;;9926   
;;;9927   //if(numOfForvardBps)
;;;9928   //numOfForvardBps_old=numOfForvardBps; 
;;;9929   }
005f0c  e8bd81f0          POP      {r4-r8,pc}
                  |L1.24336|
005f10  f8940021          LDRB     r0,[r4,#0x21]         ;9910  ; numOfForvardBps_minCnt
005f14  f1000001          ADD      r0,r0,#1              ;9910
005f18  b2c0              UXTB     r0,r0                 ;9910
005f1a  f8840021          STRB     r0,[r4,#0x21]         ;9910
005f1e  283c              CMP      r0,#0x3c              ;9913
005f20  d31b              BCC      |L1.24410|
005f22  f8845021          STRB     r5,[r4,#0x21]         ;9915
005f26  f44f7794          MOV      r7,#0x128             ;9916
005f2a  4638              MOV      r0,r7                 ;9916
005f2c  f7fffffe          BL       lc640_read_int
005f30  f1000001          ADD      r0,r0,#1              ;9917
005f34  b200              SXTH     r0,r0                 ;9917
005f36  f8a40072          STRH     r0,[r4,#0x72]         ;9917
005f3a  4a80              LDR      r2,|L1.24892|
005f3c  f9b61000          LDRSH    r1,[r6,#0]            ;9918  ; FORVARDBPSCHHOUR
005f40  f9b22000          LDRSH    r2,[r2,#0]            ;9918  ; NUMIST
005f44  fb01f102          MUL      r1,r1,r2              ;9918
005f48  4281              CMP      r1,r0                 ;9918
005f4a  dc01              BGT      |L1.24400|
005f4c  f8a45072          STRH     r5,[r4,#0x72]         ;9920
                  |L1.24400|
005f50  f9b41072          LDRSH    r1,[r4,#0x72]         ;9922  ; numOfForvardBps_hourCnt
005f54  4638              MOV      r0,r7                 ;9922
005f56  f7fffffe          BL       lc640_write_int
                  |L1.24410|
005f5a  f9b40072          LDRSH    r0,[r4,#0x72]         ;9925  ; numOfForvardBps_hourCnt
005f5e  f9b61000          LDRSH    r1,[r6,#0]            ;9925  ; FORVARDBPSCHHOUR
005f62  fb90f0f1          SDIV     r0,r0,r1              ;9925
005f66  77e0              STRB     r0,[r4,#0x1f]         ;9925
005f68  e7d0              B        |L1.24332|
;;;9930   
                          ENDP

                  numOfForvardBps_init PROC
;;;9931   //-----------------------------------------------
;;;9932   void	numOfForvardBps_init(void)			//Программа сброса системы смены первого источника для равномерного износа БПСов
005f6a  b510              PUSH     {r4,lr}
;;;9933   {									//Должна вызываться при изменении кол-ва источников в структуре
;;;9934   lc640_write_int(EE_FORVBPSHOURCNT,0);
005f6c  2100              MOVS     r1,#0
005f6e  f44f7094          MOV      r0,#0x128
005f72  f7fffffe          BL       lc640_write_int
;;;9935   numOfForvardBps_minCnt=58;
005f76  496f              LDR      r1,|L1.24884|
005f78  f04f003a          MOV      r0,#0x3a
005f7c  f8810021          STRB     r0,[r1,#0x21]
;;;9936   }
005f80  bd10              POP      {r4,pc}
;;;9937   
                          ENDP

                  outVoltContrHndl PROC
;;;9938   //-----------------------------------------------
;;;9939   void outVoltContrHndl(void)
005f82  b570              PUSH     {r4-r6,lr}
;;;9940   { 
;;;9941   if((load_U>U_OUT_KONTR_MAX)||(load_U<U_OUT_KONTR_MIN))
005f84  4c6e              LDR      r4,|L1.24896|
005f86  486f              LDR      r0,|L1.24900|
;;;9942   	{
;;;9943   	outVoltContrHndlCnt_=0;
;;;9944   	if(outVoltContrHndlCnt<U_OUT_KONTR_DELAY)
005f88  4a6f              LDR      r2,|L1.24904|
005f8a  f9b41000          LDRSH    r1,[r4,#0]            ;9941  ; load_U
005f8e  f9b06000          LDRSH    r6,[r0,#0]            ;9941  ; U_OUT_KONTR_MAX
005f92  2500              MOVS     r5,#0                 ;9943
005f94  f9b20000          LDRSH    r0,[r2,#0]
005f98  4b6c              LDR      r3,|L1.24908|
005f9a  42b1              CMP      r1,r6                 ;9941
005f9c  dc04              BGT      |L1.24488|
005f9e  4e6c              LDR      r6,|L1.24912|
005fa0  f9b66000          LDRSH    r6,[r6,#0]            ;9941  ; U_OUT_KONTR_MIN
005fa4  42b1              CMP      r1,r6                 ;9941
005fa6  da0f              BGE      |L1.24520|
                  |L1.24488|
005fa8  801d              STRH     r5,[r3,#0]            ;9943
005faa  496a              LDR      r1,|L1.24916|
005fac  f9b11000          LDRSH    r1,[r1,#0]  ; U_OUT_KONTR_DELAY
005fb0  4288              CMP      r0,r1
005fb2  da1b              BGE      |L1.24556|
;;;9945   		{
;;;9946   		outVoltContrHndlCnt++;
005fb4  f1000001          ADD      r0,r0,#1
005fb8  b200              SXTH     r0,r0
005fba  8010              STRH     r0,[r2,#0]
;;;9947   		if(outVoltContrHndlCnt==U_OUT_KONTR_DELAY)
005fbc  4288              CMP      r0,r1
005fbe  d115              BNE      |L1.24556|
;;;9948   			{
;;;9949   			avar_uout_hndl(1);
005fc0  2001              MOVS     r0,#1
005fc2  f7fffffe          BL       avar_uout_hndl
005fc6  e011              B        |L1.24556|
                  |L1.24520|
;;;9950   			}
;;;9951   		}
;;;9952   	}
;;;9953   else
;;;9954   	{
;;;9955   	if(outVoltContrHndlCnt)
005fc8  b180              CBZ      r0,|L1.24556|
;;;9956   		{
;;;9957   		if(outVoltContrHndlCnt_<5)
005fca  f9b30000          LDRSH    r0,[r3,#0]  ; outVoltContrHndlCnt_
005fce  2805              CMP      r0,#5
005fd0  da0c              BGE      |L1.24556|
;;;9958   			{
;;;9959   			outVoltContrHndlCnt_++;
005fd2  f1000001          ADD      r0,r0,#1
005fd6  b200              SXTH     r0,r0
005fd8  8018              STRH     r0,[r3,#0]
;;;9960   			if(outVoltContrHndlCnt_>=5)
005fda  2805              CMP      r0,#5
005fdc  db06              BLT      |L1.24556|
;;;9961   				{
;;;9962   				outVoltContrHndlCnt=0;
005fde  8015              STRH     r5,[r2,#0]
;;;9963   				if(uout_av)avar_uout_hndl(0);
005fe0  485d              LDR      r0,|L1.24920|
005fe2  7800              LDRB     r0,[r0,#0]  ; uout_av
005fe4  b110              CBZ      r0,|L1.24556|
005fe6  2000              MOVS     r0,#0
005fe8  f7fffffe          BL       avar_uout_hndl
                  |L1.24556|
;;;9964   				}
;;;9965   			}
;;;9966   		}
;;;9967   	}
;;;9968   
;;;9969   if (load_U<(USIGN*10)) 
005fec  485b              LDR      r0,|L1.24924|
005fee  f9b41000          LDRSH    r1,[r4,#0]  ; load_U
005ff2  f9b00000          LDRSH    r0,[r0,#0]  ; USIGN
005ff6  eb000080          ADD      r0,r0,r0,LSL #2
005ffa  ebb10f40          CMP      r1,r0,LSL #1
005ffe  da0b              BGE      |L1.24600|
;;;9970   	{
;;;9971   	if(!bSILENT)
006000  4857              LDR      r0,|L1.24928|
006002  6800              LDR      r0,[r0,#0]  ; bSILENT
006004  2800              CMP      r0,#0
006006  d107              BNE      |L1.24600|
;;;9972   		{
;;;9973   		mess_send(MESS2RELE_HNDL,PARAM_RELE_BAT_IS_DISCHARGED,1,20);
006008  e8bd4070          POP      {r4-r6,lr}
00600c  2314              MOVS     r3,#0x14
00600e  2201              MOVS     r2,#1
006010  2172              MOVS     r1,#0x72
006012  20d2              MOVS     r0,#0xd2
006014  f7ffbffe          B.W      mess_send
                  |L1.24600|
;;;9974   		}
;;;9975   
;;;9976   	//bU_BAT2REL_AV_BAT=1;
;;;9977   	}
;;;9978   
;;;9979   
;;;9980   }
006018  bd70              POP      {r4-r6,pc}
;;;9981   
                          ENDP

                  vent_resurs_hndl PROC
;;;9982   //-----------------------------------------------
;;;9983   void vent_resurs_hndl(void)
00601a  e92d47f0          PUSH     {r4-r10,lr}
;;;9984   {
;;;9985   char i;
;;;9986   char crc_in,crc_eval;
;;;9987   
;;;9988   for(i=0;i<NUMIST;i++)
00601e  f04f0200          MOV      r2,#0
;;;9989   	{
;;;9990   	if((bps[i]._buff[7]&0xc0)==0x00)
;;;9991   		{
;;;9992   		bps[i]._vent_resurs_temp[0]=bps[i]._buff[7];
;;;9993   		}
;;;9994   	else if((bps[i]._buff[7]&0xc0)==0x40)
;;;9995   		{
;;;9996   		bps[i]._vent_resurs_temp[1]=bps[i]._buff[7];
;;;9997   		}
;;;9998   	else if((bps[i]._buff[7]&0xc0)==0x80)
;;;9999   		{
;;;10000  		bps[i]._vent_resurs_temp[2]=bps[i]._buff[7];
;;;10001  		}
;;;10002  	else if((bps[i]._buff[7]&0xc0)==0xc0)
;;;10003  		{
;;;10004  		bps[i]._vent_resurs_temp[3]=bps[i]._buff[7];
;;;10005  		}
;;;10006  	crc_in=0;
;;;10007  	crc_in|=(bps[i]._vent_resurs_temp[0]&0x30)>>4;
;;;10008  	crc_in|=(bps[i]._vent_resurs_temp[1]&0x30)>>2;
;;;10009  	crc_in|=(bps[i]._vent_resurs_temp[2]&0x30);
;;;10010  	crc_in|=(bps[i]._vent_resurs_temp[3]&0x30)<<2;
;;;10011  
;;;10012  	crc_eval =bps[i]._vent_resurs_temp[0]&0x0f;
;;;10013  	crc_eval^=bps[i]._vent_resurs_temp[1]&0x0f;
;;;10014  	crc_eval^=bps[i]._vent_resurs_temp[2]&0x0f;
;;;10015  	crc_eval^=bps[i]._vent_resurs_temp[3]&0x0f;
;;;10016  
;;;10017  	if(crc_eval==crc_in)
;;;10018  		{
;;;10019  		unsigned short temp_US;
;;;10020  		temp_US=0;
;;;10021  
;;;10022  		temp_US|=(bps[i]._vent_resurs_temp[3]&0x0f);
;;;10023  		temp_US<<=4;
;;;10024  		temp_US|=(bps[i]._vent_resurs_temp[2]&0x0f);
;;;10025  		temp_US<<=4;
;;;10026  		temp_US|=(bps[i]._vent_resurs_temp[1]&0x0f);
;;;10027  		temp_US<<=4;
;;;10028  		temp_US|=(bps[i]._vent_resurs_temp[0]&0x0f);
;;;10029  
;;;10030  		if(bps[i]._vent_resurs!=temp_US)bps[i]._vent_resurs=temp_US;
;;;10031  		}
;;;10032  
;;;10033  	if((bps[i]._vent_resurs>TVENTMAX*10)&&(TVENTMAX>0))
006022  4850              LDR      r0,|L1.24932|
006024  f8dfc140          LDR      r12,|L1.24936|
006028  f9b06000          LDRSH    r6,[r0,#0]
00602c  4843              LDR      r0,|L1.24892|
00602e  f9b07000          LDRSH    r7,[r0,#0]            ;9988
006032  e0a2              B        |L1.24954|
                  |L1.24628|
006034  ebc200c2          RSB      r0,r2,r2,LSL #3       ;9990
006038  eb001002          ADD      r0,r0,r2,LSL #4       ;9990
00603c  eb0c0080          ADD      r0,r12,r0,LSL #2      ;9990
006040  7b41              LDRB     r1,[r0,#0xd]          ;9990
006042  098b              LSRS     r3,r1,#6              ;9990
006044  d006              BEQ      |L1.24660|
006046  2301              MOVS     r3,#1                 ;9994
006048  ebb31f91          CMP      r3,r1,LSR #6          ;9994
00604c  d105              BNE      |L1.24666|
00604e  f8801055          STRB     r1,[r0,#0x55]         ;9996
006052  e00f              B        |L1.24692|
                  |L1.24660|
006054  f8801054          STRB     r1,[r0,#0x54]         ;9992
006058  e00c              B        |L1.24692|
                  |L1.24666|
00605a  2302              MOVS     r3,#2                 ;9998
00605c  ebb31f91          CMP      r3,r1,LSR #6          ;9998
006060  d102              BNE      |L1.24680|
006062  f8801056          STRB     r1,[r0,#0x56]         ;10000
006066  e005              B        |L1.24692|
                  |L1.24680|
006068  2303              MOVS     r3,#3                 ;10002
00606a  ebb31f91          CMP      r3,r1,LSR #6          ;10002
00606e  d101              BNE      |L1.24692|
006070  f8801057          STRB     r1,[r0,#0x57]         ;10004
                  |L1.24692|
006074  f8101f54          LDRB     r1,[r0,#0x54]!        ;10007
006078  f3c11401          UBFX     r4,r1,#4,#2           ;10007
00607c  7843              LDRB     r3,[r0,#1]            ;10008
00607e  f0030530          AND      r5,r3,#0x30           ;10008
006082  ea440495          ORR      r4,r4,r5,LSR #2       ;10008
006086  f8909002          LDRB     r9,[r0,#2]            ;10009
00608a  f0090830          AND      r8,r9,#0x30           ;10009
00608e  ea480804          ORR      r8,r8,r4              ;10009
006092  78c5              LDRB     r5,[r0,#3]            ;10010
006094  f1a00054          SUB      r0,r0,#0x54           ;10010
006098  f0050430          AND      r4,r5,#0x30           ;10010
00609c  ea480884          ORR      r8,r8,r4,LSL #2       ;10010
0060a0  f001010f          AND      r1,r1,#0xf            ;10012
0060a4  f003040f          AND      r4,r3,#0xf            ;10013
0060a8  ea840a01          EOR      r10,r4,r1             ;10013
0060ac  f009030f          AND      r3,r9,#0xf            ;10014
0060b0  ea83090a          EOR      r9,r3,r10             ;10014
0060b4  f005050f          AND      r5,r5,#0xf            ;10015
0060b8  ea850909          EOR      r9,r5,r9              ;10015
0060bc  45c1              CMP      r9,r8                 ;10017
0060be  d113              BNE      |L1.24808|
0060c0  ea4f1505          LSL      r5,r5,#4              ;10023
0060c4  ea430305          ORR      r3,r3,r5              ;10024
0060c8  ea4f1303          LSL      r3,r3,#4              ;10025
0060cc  ea440403          ORR      r4,r4,r3              ;10026
0060d0  ea4f5304          LSL      r3,r4,#20             ;10027
0060d4  ea4f4313          LSR      r3,r3,#16             ;10027
0060d8  ea410103          ORR      r1,r1,r3              ;10028
0060dc  f8b03058          LDRH     r3,[r0,#0x58]         ;10030
0060e0  428b              CMP      r3,r1                 ;10030
0060e2  d001              BEQ      |L1.24808|
0060e4  f8a01058          STRH     r1,[r0,#0x58]         ;10030
                  |L1.24808|
0060e8  f8b01058          LDRH     r1,[r0,#0x58]
0060ec  eb060386          ADD      r3,r6,r6,LSL #2
0060f0  ebb10f43          CMP      r1,r3,LSL #1
0060f4  dd3a              BLE      |L1.24940|
0060f6  2e00              CMP      r6,#0
0060f8  dd38              BLE      |L1.24940|
;;;10034  		{
;;;10035  		bps[i]._av|=(1<<4);
0060fa  7841              LDRB     r1,[r0,#1]
0060fc  f0410110          ORR      r1,r1,#0x10
006100  7041              STRB     r1,[r0,#1]
006102  e037              B        |L1.24948|
                  |L1.24836|
                          DCD      ||.text||+0xe6c
                  |L1.24840|
006108  202020c2          DCB      "   ",194,219,208,192,194,205,200,194,192,222,217,200,201
00610c  dbd0c0c2
006110  cdc8c2c0
006114  ded9c8c9
006118  20202020          DCB      "    ",0
00611c  00      
00611d  00                DCB      0
00611e  00                DCB      0
00611f  00                DCB      0
                  |L1.24864|
                          DCD      hv_vz_wrk_cnt
                  |L1.24868|
                          DCD      hv_vz_up_cnt
                  |L1.24872|
                          DCD      VZ_HR
                  |L1.24876|
                          DCD      ||.text||+0x8e0
                  |L1.24880|
                          DCD      ||.text||+0x1764
                  |L1.24884|
                          DCD      ||area_number.25||
                  |L1.24888|
                          DCD      FORVARDBPSCHHOUR
                  |L1.24892|
                          DCD      NUMIST
                  |L1.24896|
                          DCD      load_U
                  |L1.24900|
                          DCD      U_OUT_KONTR_MAX
                  |L1.24904|
                          DCD      outVoltContrHndlCnt
                  |L1.24908|
                          DCD      outVoltContrHndlCnt_
                  |L1.24912|
                          DCD      U_OUT_KONTR_MIN
                  |L1.24916|
                          DCD      U_OUT_KONTR_DELAY
                  |L1.24920|
                          DCD      uout_av
                  |L1.24924|
                          DCD      USIGN
                  |L1.24928|
                          DCD      bSILENT
                  |L1.24932|
                          DCD      TVENTMAX
                  |L1.24936|
                          DCD      bps
                  |L1.24940|
;;;10036  		}
;;;10037  	else bps[i]._av&=~(1<<4);
00616c  7841              LDRB     r1,[r0,#1]
00616e  f0210110          BIC      r1,r1,#0x10
006172  7041              STRB     r1,[r0,#1]
                  |L1.24948|
006174  f1020201          ADD      r2,r2,#1              ;9988
006178  b2d2              UXTB     r2,r2                 ;9988
                  |L1.24954|
00617a  42ba              CMP      r2,r7                 ;9988
00617c  f6ffaf5a          BLT      |L1.24628|
;;;10038  	}
;;;10039  }
006180  e8bd87f0          POP      {r4-r10,pc}
;;;10040  
                          ENDP

                  vent_hndl PROC
;;;10041  //-----------------------------------------------
;;;10042  void vent_hndl(void)
006184  e92d4ff0          PUSH     {r4-r11,lr}
;;;10043  {
006188  b087              SUB      sp,sp,#0x1c
;;;10044  if(RELEVENTSIGN==rvsAKB)
00618a  48ab              LDR      r0,|L1.25656|
;;;10045  	{
;;;10046  	if(vent_stat==0)
00618c  4cab              LDR      r4,|L1.25660|
;;;10047  		{
;;;10048  		if	(
;;;10049  			(BAT_IS_ON[0]==bisON)&&((bat[0]._Tb>TVENTON)||(bat[0]._nd))
00618e  49ac              LDR      r1,|L1.25664|
;;;10050  			||
;;;10051  			(BAT_IS_ON[1]==bisON)&&((bat[1]._Tb>TVENTON)||(bat[1]._nd))
;;;10052  			)
;;;10053  			{
;;;10054  			vent_stat=1;
;;;10055  			}
;;;10056  		}
;;;10057  	else if(vent_stat==1)
;;;10058  		{
;;;10059  		if	(
;;;10060  			((BAT_IS_ON[0]!=bisON)||((BAT_IS_ON[0]==bisON)&&(bat[0]._Tb<TVENTOFF)&&(!bat[0]._nd)))
006190  4aac              LDR      r2,|L1.25668|
006192  7800              LDRB     r0,[r0,#0]            ;10044  ; RELEVENTSIGN
006194  f9943000          LDRSB    r3,[r4,#0]            ;10046
006198  f9b11000          LDRSH    r1,[r1,#0]            ;10049
00619c  f9b22000          LDRSH    r2,[r2,#0]
0061a0  b148              CBZ      r0,|L1.25014|
;;;10061  			&&
;;;10062  			((BAT_IS_ON[1]!=bisON)||((BAT_IS_ON[1]==bisON)&&(bat[1]._Tb<TVENTOFF)&&(!bat[1]._nd)))
;;;10063  			)
;;;10064  			{
;;;10065  			vent_stat=0;
;;;10066  			}
;;;10067  		}
;;;10068  	}
;;;10069  else if(RELEVENTSIGN==rvsBPS)
0061a2  2802              CMP      r0,#2
0061a4  d03c              BEQ      |L1.25120|
;;;10070  	{
;;;10071  /*	if	(
;;;10072  		(((bps[0]._flags_tm&0x06)||(bps[0]._cnt>=30)))||
;;;10073  		(((bps[1]._flags_tm&0x06)||(bps[1]._cnt>=30))&&(NUMIST>1))||
;;;10074  		(((bps[2]._flags_tm&0x06)||(bps[2]._cnt>=30))&&(NUMIST>2))||
;;;10075  		(((bps[3]._flags_tm&0x06)||(bps[3]._cnt>=30))&&(NUMIST>3))||
;;;10076  		(((bps[4]._flags_tm&0x06)||(bps[4]._cnt>=30))&&(NUMIST>4))||
;;;10077  		(((bps[5]._flags_tm&0x06)||(bps[5]._cnt>=30))&&(NUMIST>5))||
;;;10078  		(((bps[6]._flags_tm&0x06)||(bps[6]._cnt>=30))&&(NUMIST>6))
;;;10079  		)
;;;10080  		{
;;;10081  		vent_stat=1;
;;;10082  		}
;;;10083  	else vent_stat=0;
;;;10084  	*/
;;;10085  
;;;10086  	if	(
;;;10087  		((NUMIST)&&((bps[0]._Ti>TVENTON)||(bps[0]._cnt>=30)))
;;;10088  		||
;;;10089  		((NUMIST>1)&&((bps[1]._Ti>TVENTON)||(bps[1]._cnt>=30)))
;;;10090  		||
;;;10091  		((NUMIST>2)&&((bps[2]._Ti>TVENTON)||(bps[2]._cnt>=30)))
;;;10092  		||
;;;10093  		((NUMIST>3)&&((bps[3]._Ti>TVENTON)||(bps[3]._cnt>=30)))
;;;10094  		||
;;;10095  		((NUMIST>4)&&((bps[4]._Ti>TVENTON)||(bps[4]._cnt>=30)))
;;;10096  		||
;;;10097  		((NUMIST>5)&&((bps[5]._Ti>TVENTON)||(bps[5]._cnt>=30)))
;;;10098  		||
;;;10099  		((NUMIST>6)&&((bps[6]._Ti>TVENTON)||(bps[6]._cnt>=30)))
;;;10100  		||
;;;10101  		((NUMIST>7)&&((bps[7]._Ti>TVENTON)||(bps[7]._cnt>=30)))
;;;10102  		)
;;;10103  		{
;;;10104  		vent_stat=1;
;;;10105  		}
;;;10106  	else if(vent_stat==1)
;;;10107  		{
;;;10108  		if	(
;;;10109  			((!NUMIST)||((NUMIST)&&(bps[0]._Ti<TVENTOFF)&&(bps[0]._cnt<10)))
;;;10110  			&&
;;;10111  			((NUMIST<2)||((NUMIST>=2)&&(bps[1]._Ti<TVENTOFF)&&(bps[1]._cnt<10)))
;;;10112  			&&
;;;10113  			((NUMIST<3)||((NUMIST>=3)&&(bps[2]._Ti<TVENTOFF)&&(bps[2]._cnt<10)))
;;;10114  			&&
;;;10115  			((NUMIST<4)||((NUMIST>=4)&&(bps[3]._Ti<TVENTOFF)&&(bps[3]._cnt<10)))
;;;10116  			&&
;;;10117  			((NUMIST<5)||((NUMIST>=5)&&(bps[4]._Ti<TVENTOFF)&&(bps[4]._cnt<10)))
;;;10118  			&&
;;;10119  			((NUMIST<6)||((NUMIST>=6)&&(bps[5]._Ti<TVENTOFF)&&(bps[5]._cnt<10)))
;;;10120  			&&
;;;10121  			((NUMIST<7)||((NUMIST>=7)&&(bps[6]._Ti<TVENTOFF)&&(bps[6]._cnt<10)))
;;;10122  			&&
;;;10123  			((NUMIST<8)||((NUMIST>=8)&&(bps[7]._Ti<TVENTOFF)&&(bps[7]._cnt<10)))
;;;10124  			)
;;;10125  			{
;;;10126  			vent_stat=0;
;;;10127  			}
;;;10128  		}
;;;10129  	}
;;;10130  else if(RELEVENTSIGN==rvsEXT)
0061a6  2801              CMP      r0,#1
0061a8  d07e              BEQ      |L1.25256|
;;;10131  	{
;;;10132  	if	(
;;;10133  		((NUMDT)&&((t_ext[0]>TVENTON)||(ND_EXT[0])))
;;;10134  		||
;;;10135  		((NUMDT>1)&&((t_ext[1]>TVENTON)||(ND_EXT[1])))
;;;10136  		||
;;;10137  		((NUMDT>2)&&((t_ext[2]>TVENTON)||(ND_EXT[2])))
;;;10138  		)
;;;10139  		{
;;;10140  		vent_stat=1;
;;;10141  		}
;;;10142  	else if(vent_stat==1)
;;;10143  		{
;;;10144  		if	(
;;;10145  			((!NUMDT)||((NUMDT)&&(t_ext[0]<TVENTOFF)&&(!ND_EXT[0])))
;;;10146  			&&
;;;10147  			((NUMDT<2)||((NUMDT>=2)&&(t_ext[1]<TVENTOFF)&&(!ND_EXT[1])))
;;;10148  			&&
;;;10149  			((NUMDT<3)||((NUMDT>=3)&&(t_ext[2]<TVENTOFF)&&(!ND_EXT[2])))
;;;10150  			)
;;;10151  			{
;;;10152  			vent_stat=0;
;;;10153  			}
;;;10154  		}
;;;10155  	}
;;;10156  else vent_stat=1;
0061aa  f04f0001          MOV      r0,#1
0061ae  7020              STRB     r0,[r4,#0]
                  |L1.25008|
;;;10157  }
0061b0  b007              ADD      sp,sp,#0x1c
0061b2  e8bd8ff0          POP      {r4-r11,pc}
                  |L1.25014|
0061b6  4fa4              LDR      r7,|L1.25672|
0061b8  f8df8290          LDR      r8,|L1.25676|
0061bc  f9b7000a          LDRSH    r0,[r7,#0xa]          ;10049
0061c0  7b3d              LDRB     r5,[r7,#0xc]          ;10049
0061c2  f9b76056          LDRSH    r6,[r7,#0x56]         ;10051
0061c6  f898c000          LDRB     r12,[r8,#0]           ;10048
0061ca  f8977058          LDRB     r7,[r7,#0x58]         ;10051
0061ce  f8988001          LDRB     r8,[r8,#1]            ;10051
0061d2  b12b              CBZ      r3,|L1.25056|
0061d4  2b01              CMP      r3,#1                 ;10057
0061d6  d1eb              BNE      |L1.25008|
0061d8  f1bc0f55          CMP      r12,#0x55             ;10059
0061dc  d115              BNE      |L1.25098|
0061de  e010              B        |L1.25090|
                  |L1.25056|
0061e0  f1bc0f55          CMP      r12,#0x55             ;10048
0061e4  d102              BNE      |L1.25068|
0061e6  4288              CMP      r0,r1                 ;10049
0061e8  dc07              BGT      |L1.25082|
0061ea  b935              CBNZ     r5,|L1.25082|
                  |L1.25068|
0061ec  f1b80f55          CMP      r8,#0x55              ;10051
0061f0  d1de              BNE      |L1.25008|
0061f2  428e              CMP      r6,r1                 ;10051
0061f4  dc01              BGT      |L1.25082|
0061f6  2f00              CMP      r7,#0                 ;10051
0061f8  d0da              BEQ      |L1.25008|
                  |L1.25082|
0061fa  f04f0001          MOV      r0,#1                 ;10054
0061fe  7020              STRB     r0,[r4,#0]            ;10054
006200  e7d6              B        |L1.25008|
                  |L1.25090|
006202  4290              CMP      r0,r2                 ;10060
006204  dad4              BGE      |L1.25008|
006206  2d00              CMP      r5,#0                 ;10060
006208  d1d2              BNE      |L1.25008|
                  |L1.25098|
00620a  f1b80f55          CMP      r8,#0x55              ;10062
00620e  d103              BNE      |L1.25112|
006210  4296              CMP      r6,r2                 ;10062
006212  dacd              BGE      |L1.25008|
006214  2f00              CMP      r7,#0                 ;10062
006216  d1cb              BNE      |L1.25008|
                  |L1.25112|
006218  f04f0000          MOV      r0,#0                 ;10065
00621c  7020              STRB     r0,[r4,#0]            ;10065
00621e  e7c7              B        |L1.25008|
                  |L1.25120|
006220  4e8c              LDR      r6,|L1.25684|
006222  488b              LDR      r0,|L1.25680|
006224  6ab5              LDR      r5,[r6,#0x28]         ;10087
006226  f9b00000          LDRSH    r0,[r0,#0]            ;10086  ; NUMIST
00622a  78f6              LDRB     r6,[r6,#3]            ;10087
00622c  b118              CBZ      r0,|L1.25142|
00622e  428d              CMP      r5,r1                 ;10087
006230  dc7a              BGT      |L1.25384|
006232  2e1e              CMP      r6,#0x1e              ;10087
006234  d278              BCS      |L1.25384|
                  |L1.25142|
006236  f8dfc21c          LDR      r12,|L1.25684|
00623a  2801              CMP      r0,#1                 ;10089
00623c  f8dc7084          LDR      r7,[r12,#0x84]        ;10089
006240  f89cc05f          LDRB     r12,[r12,#0x5f]       ;10089
006244  f8cdc018          STR      r12,[sp,#0x18]        ;10089
006248  dd06              BLE      |L1.25176|
00624a  428f              CMP      r7,r1                 ;10089
00624c  dc6c              BGT      |L1.25384|
00624e  f8ddc018          LDR      r12,[sp,#0x18]        ;10089
006252  f1bc0f1e          CMP      r12,#0x1e             ;10089
006256  d267              BCS      |L1.25384|
                  |L1.25176|
006258  f8dfc1f8          LDR      r12,|L1.25684|
00625c  2802              CMP      r0,#2                 ;10091
00625e  f8dc80e0          LDR      r8,[r12,#0xe0]        ;10091
006262  f8cd8014          STR      r8,[sp,#0x14]         ;10091
006266  f89cc0bb          LDRB     r12,[r12,#0xbb]       ;10091
00626a  f8cdc010          STR      r12,[sp,#0x10]        ;10091
00626e  dd08              BLE      |L1.25218|
006270  f8ddc014          LDR      r12,[sp,#0x14]        ;10091
006274  458c              CMP      r12,r1                ;10091
006276  dc57              BGT      |L1.25384|
006278  f8ddc010          LDR      r12,[sp,#0x10]        ;10091
00627c  f1bc0f1e          CMP      r12,#0x1e             ;10091
006280  d252              BCS      |L1.25384|
                  |L1.25218|
006282  f8dfc1d0          LDR      r12,|L1.25684|
006286  2803              CMP      r0,#3                 ;10093
006288  f8dc813c          LDR      r8,[r12,#0x13c]       ;10093
00628c  f8cd800c          STR      r8,[sp,#0xc]          ;10093
006290  f89cc117          LDRB     r12,[r12,#0x117]      ;10093
006294  f8cdc008          STR      r12,[sp,#8]           ;10093
006298  dd0a              BLE      |L1.25264|
00629a  f8ddc00c          LDR      r12,[sp,#0xc]         ;10093
00629e  458c              CMP      r12,r1                ;10093
0062a0  dc42              BGT      |L1.25384|
0062a2  f8ddc008          LDR      r12,[sp,#8]           ;10093
0062a6  e000              B        |L1.25258|
                  |L1.25256|
0062a8  e080              B        |L1.25516|
                  |L1.25258|
0062aa  f1bc0f1e          CMP      r12,#0x1e             ;10093
0062ae  d23b              BCS      |L1.25384|
                  |L1.25264|
0062b0  f8df81a0          LDR      r8,|L1.25684|
0062b4  2804              CMP      r0,#4                 ;10095
0062b6  f8d8c198          LDR      r12,[r8,#0x198]       ;10095
0062ba  f8988173          LDRB     r8,[r8,#0x173]        ;10095
0062be  f8cd8004          STR      r8,[sp,#4]            ;10095
0062c2  dd06              BLE      |L1.25298|
0062c4  458c              CMP      r12,r1                ;10095
0062c6  dc2f              BGT      |L1.25384|
0062c8  f8dd8004          LDR      r8,[sp,#4]            ;10095
0062cc  f1b80f1e          CMP      r8,#0x1e              ;10095
0062d0  d22a              BCS      |L1.25384|
                  |L1.25298|
0062d2  f8df9180          LDR      r9,|L1.25684|
0062d6  2805              CMP      r0,#5                 ;10097
0062d8  f8d981f4          LDR      r8,[r9,#0x1f4]        ;10097
0062dc  f89991cf          LDRB     r9,[r9,#0x1cf]        ;10097
0062e0  f8cd9000          STR      r9,[sp,#0]            ;10097
0062e4  dd06              BLE      |L1.25332|
0062e6  4588              CMP      r8,r1                 ;10097
0062e8  dc1e              BGT      |L1.25384|
0062ea  f8dd9000          LDR      r9,[sp,#0]            ;10097
0062ee  f1b90f1e          CMP      r9,#0x1e              ;10097
0062f2  d219              BCS      |L1.25384|
                  |L1.25332|
0062f4  f8dfa15c          LDR      r10,|L1.25684|
0062f8  2806              CMP      r0,#6                 ;10099
0062fa  f89ae22b          LDRB     lr,[r10,#0x22b]       ;10099
0062fe  f8da9250          LDR      r9,[r10,#0x250]       ;10099
006302  dd04              BLE      |L1.25358|
006304  4589              CMP      r9,r1                 ;10099
006306  dc0f              BGT      |L1.25384|
006308  f1be0f1e          CMP      lr,#0x1e              ;10099
00630c  d20c              BCS      |L1.25384|
                  |L1.25358|
00630e  f8dfb144          LDR      r11,|L1.25684|
006312  2807              CMP      r0,#7                 ;10101
006314  f8dba2ac          LDR      r10,[r11,#0x2ac]      ;10101
006318  f89bb287          LDRB     r11,[r11,#0x287]      ;10101
00631c  dd08              BLE      |L1.25392|
00631e  458a              CMP      r10,r1                ;10101
006320  dc02              BGT      |L1.25384|
006322  f1bb0f1e          CMP      r11,#0x1e             ;10101
006326  d303              BCC      |L1.25392|
                  |L1.25384|
006328  f04f0001          MOV      r0,#1                 ;10104
00632c  7020              STRB     r0,[r4,#0]            ;10104
                  |L1.25390|
00632e  e73f              B        |L1.25008|
                  |L1.25392|
006330  2b01              CMP      r3,#1                 ;10106
006332  d1fc              BNE      |L1.25390|
006334  b118              CBZ      r0,|L1.25406|
006336  4295              CMP      r5,r2                 ;10109
006338  daf9              BGE      |L1.25390|
00633a  2e0a              CMP      r6,#0xa               ;10109
00633c  d2f7              BCS      |L1.25390|
                  |L1.25406|
00633e  2802              CMP      r0,#2                 ;10111
006340  db04              BLT      |L1.25420|
006342  4297              CMP      r7,r2                 ;10111
006344  daf3              BGE      |L1.25390|
006346  9906              LDR      r1,[sp,#0x18]         ;10111
006348  290a              CMP      r1,#0xa               ;10111
00634a  d2f0              BCS      |L1.25390|
                  |L1.25420|
00634c  2803              CMP      r0,#3                 ;10113
00634e  db05              BLT      |L1.25436|
006350  9905              LDR      r1,[sp,#0x14]         ;10113
006352  4291              CMP      r1,r2                 ;10113
006354  daeb              BGE      |L1.25390|
006356  9904              LDR      r1,[sp,#0x10]         ;10113
006358  290a              CMP      r1,#0xa               ;10113
00635a  d2e8              BCS      |L1.25390|
                  |L1.25436|
00635c  2804              CMP      r0,#4                 ;10115
00635e  db05              BLT      |L1.25452|
006360  9903              LDR      r1,[sp,#0xc]          ;10115
006362  4291              CMP      r1,r2                 ;10115
006364  dae3              BGE      |L1.25390|
006366  9902              LDR      r1,[sp,#8]            ;10115
006368  290a              CMP      r1,#0xa               ;10115
00636a  d2e0              BCS      |L1.25390|
                  |L1.25452|
00636c  2805              CMP      r0,#5                 ;10117
00636e  db04              BLT      |L1.25466|
006370  4594              CMP      r12,r2                ;10117
006372  dadc              BGE      |L1.25390|
006374  9901              LDR      r1,[sp,#4]            ;10117
006376  290a              CMP      r1,#0xa               ;10117
006378  d2d9              BCS      |L1.25390|
                  |L1.25466|
00637a  2806              CMP      r0,#6                 ;10119
00637c  db04              BLT      |L1.25480|
00637e  4590              CMP      r8,r2                 ;10119
006380  dad5              BGE      |L1.25390|
006382  9900              LDR      r1,[sp,#0]            ;10119
006384  290a              CMP      r1,#0xa               ;10119
006386  d2d2              BCS      |L1.25390|
                  |L1.25480|
006388  2807              CMP      r0,#7                 ;10121
00638a  db04              BLT      |L1.25494|
00638c  4591              CMP      r9,r2                 ;10121
00638e  dace              BGE      |L1.25390|
006390  f1be0f0a          CMP      lr,#0xa               ;10121
006394  d2cb              BCS      |L1.25390|
                  |L1.25494|
006396  2808              CMP      r0,#8                 ;10123
006398  db04              BLT      |L1.25508|
00639a  4592              CMP      r10,r2                ;10123
00639c  dac7              BGE      |L1.25390|
00639e  f1bb0f0a          CMP      r11,#0xa              ;10123
0063a2  d2c4              BCS      |L1.25390|
                  |L1.25508|
0063a4  f04f0000          MOV      r0,#0                 ;10126
0063a8  7020              STRB     r0,[r4,#0]            ;10126
                  |L1.25514|
0063aa  e701              B        |L1.25008|
                  |L1.25516|
0063ac  482a              LDR      r0,|L1.25688|
0063ae  4d2b              LDR      r5,|L1.25692|
0063b0  4e2b              LDR      r6,|L1.25696|
0063b2  f9b00000          LDRSH    r0,[r0,#0]            ;10132  ; NUMDT
0063b6  f9b55000          LDRSH    r5,[r5,#0]            ;10133
0063ba  7836              LDRB     r6,[r6,#0]            ;10133
0063bc  b110              CBZ      r0,|L1.25540|
0063be  428d              CMP      r5,r1                 ;10133
0063c0  dc1d              BGT      |L1.25598|
0063c2  b9e6              CBNZ     r6,|L1.25598|
                  |L1.25540|
0063c4  4f25              LDR      r7,|L1.25692|
0063c6  f8dfc098          LDR      r12,|L1.25696|
0063ca  2801              CMP      r0,#1                 ;10135
0063cc  f9b77002          LDRSH    r7,[r7,#2]            ;10135
0063d0  f89cc001          LDRB     r12,[r12,#1]          ;10135
0063d4  dd04              BLE      |L1.25568|
0063d6  428f              CMP      r7,r1                 ;10135
0063d8  dc11              BGT      |L1.25598|
0063da  f1bc0f00          CMP      r12,#0                ;10135
0063de  d10e              BNE      |L1.25598|
                  |L1.25568|
0063e0  f8df8078          LDR      r8,|L1.25692|
0063e4  f8df9078          LDR      r9,|L1.25696|
0063e8  2802              CMP      r0,#2                 ;10137
0063ea  f9b88004          LDRSH    r8,[r8,#4]            ;10137
0063ee  f8999002          LDRB     r9,[r9,#2]            ;10137
0063f2  dd08              BLE      |L1.25606|
0063f4  4588              CMP      r8,r1                 ;10137
0063f6  dc02              BGT      |L1.25598|
0063f8  f1b90f00          CMP      r9,#0                 ;10137
0063fc  d003              BEQ      |L1.25606|
                  |L1.25598|
0063fe  f04f0001          MOV      r0,#1                 ;10140
006402  7020              STRB     r0,[r4,#0]            ;10140
006404  e6d4              B        |L1.25008|
                  |L1.25606|
006406  2b01              CMP      r3,#1                 ;10142
006408  d191              BNE      |L1.25390|
00640a  b118              CBZ      r0,|L1.25620|
00640c  4295              CMP      r5,r2                 ;10145
00640e  da8e              BGE      |L1.25390|
006410  2e00              CMP      r6,#0                 ;10145
006412  d18c              BNE      |L1.25390|
                  |L1.25620|
006414  2802              CMP      r0,#2                 ;10147
006416  db04              BLT      |L1.25634|
006418  4297              CMP      r7,r2                 ;10147
00641a  da88              BGE      |L1.25390|
00641c  f1bc0f00          CMP      r12,#0                ;10147
006420  d185              BNE      |L1.25390|
                  |L1.25634|
006422  2803              CMP      r0,#3                 ;10149
006424  db04              BLT      |L1.25648|
006426  4590              CMP      r8,r2                 ;10149
006428  dabf              BGE      |L1.25514|
00642a  f1b90f00          CMP      r9,#0                 ;10149
00642e  d1bc              BNE      |L1.25514|
                  |L1.25648|
006430  f04f0000          MOV      r0,#0                 ;10152
006434  7020              STRB     r0,[r4,#0]            ;10152
006436  e6bb              B        |L1.25008|
;;;10158  
                          ENDP

                  |L1.25656|
                          DCD      RELEVENTSIGN
                  |L1.25660|
                          DCD      ||area_number.25||
                  |L1.25664|
                          DCD      TVENTON
                  |L1.25668|
                          DCD      TVENTOFF
                  |L1.25672|
                          DCD      bat
                  |L1.25676|
                          DCD      BAT_IS_ON
                  |L1.25680|
                          DCD      NUMIST
                  |L1.25684|
                          DCD      bps
                  |L1.25688|
                          DCD      NUMDT
                  |L1.25692|
                          DCD      t_ext
                  |L1.25696|
                          DCD      ND_EXT

                          AREA ||area_number.2||, CODE, READONLY, ALIGN=2

                          EXPORTAS ||area_number.2||, ||.text||
                  samokalibr_init PROC
;;;295    //-----------------------------------------------
;;;296    void ke_start(char in)
000000  4902              LDR      r1,|L2.12|
;;;297    {          
000002  f24060f9          MOV      r0,#0x6f9
;;;298    ke_start_stat=(enum_ke_start_stat)0;		 
000006  f8a1004a          STRH     r0,[r1,#0x4a]
00000a  4770              BX       lr
;;;299    /*
;;;300    if(spc_stat==spcVZ)ke_start_stat=kssNOT_VZ;
;;;301    #ifndef UKU_220_IPS_TERMOKOMPENSAT
;;;302    else if(BAT_IS_ON[in]!=bisON)ke_start_stat=kssNOT_BAT;
;;;303    #endif
;;;304    else if(bat[in]._av&(1<<0))ke_start_stat=kssNOT_BAT_AV;
;;;305    else if(bat[in]._temper_stat&(1<<1))ke_start_stat=kssNOT_BAT_AV_T;
;;;306    else if(bat[in]._av&(1<<1))ke_start_stat=kssNOT_BAT_AV_ASS;
;;;307    else if(bat[in]._Ib>IKB)ke_start_stat=kssNOT_BAT_ZAR;
;;;308    else if(bat[in]._Ib<-IKB)ke_start_stat=kssNOT_BAT_RAZR;
;;;309    else if((spc_stat==spcKE)&&(spc_bat==0))ke_start_stat=kssNOT_KE1;
;;;310    else if((spc_stat==spcKE)&&(spc_bat==1))ke_start_stat=kssNOT_KE2;
;;;311    else */
;;;312    	{
;;;313    
;;;314    	ke_start_stat=kssYES;
;;;315    
;;;316    	spc_stat=spcKE;
;;;317    	__ee_spc_stat=spcKE;
;;;318    	lc640_write_int(EE_SPC_STAT,__ee_spc_stat);
;;;319    	
;;;320    	spc_bat=0;
;;;321    	__ee_spc_bat=0;
;;;322    	lc640_write_int(EE_SPC_BAT,__ee_spc_bat);
;;;323    
;;;324    	bat[0]._zar_cnt_ke=0;
;;;325    	lc640_write_int(ADR_EE_BAT_ZAR_CNT_KE[0],0);
;;;326    
;;;327    	bat[0]._time_min_cnt_ke=0;
;;;328    	lc640_write_int(EE_ZVU_BAT_MIN_CNT_KE,0);
;;;329    
;;;330    	
;;;331    	spc_phase=0;
;;;332    	__ee_spc_phase=0;
;;;333    	lc640_write_int(EE_SPC_PHASE,__ee_spc_phase);
;;;334    
;;;335    	//ke_mem_hndl(in,lc640_read_int(ADR_EE_BAT_ZAR_CNT_KE[spc_bat]));
;;;336    
;;;337    		{					
;;;338    		signed short temp_temp;
;;;339    		signed char temp;
;;;340    		temp_temp=bat[in]._u_old[((bat_u_old_cnt+1)&0x07)]; 
;;;341    		    
;;;342    		temp=LPC_RTC->YEAR;
;;;343    		gran_char(&temp,1,99);
;;;344    		*((char*)(&(ke_date[0])))=temp;
;;;345    			
;;;346    		temp=LPC_RTC->MONTH;
;;;347    		gran_char(&temp,1,12);
;;;348    		*(((char*)(&(ke_date[0])))+1)=temp;
;;;349    		
;;;350    		temp=LPC_RTC->DOM;
;;;351    		gran_char(&temp,1,31);
;;;352    		*(((char*)(&(ke_date[0])))+2)=temp;			
;;;353    				
;;;354    		*(((char*)(&(ke_date[0])))+3)=*((char*)&temp_temp);
;;;355    		lc640_write_long(EE_SPC_KE_DATE0,ke_date[0]);
;;;356    
;;;357    		temp=LPC_RTC->HOUR;
;;;358    		gran_char(&temp,0,23);
;;;359    		*((char*)(&(ke_date[1])))=temp;
;;;360                   
;;;361    		temp=LPC_RTC->MIN;
;;;362    		gran_char(&temp,0,59);
;;;363    		*(((char*)(&(ke_date[1])))+1)=temp;
;;;364    	          
;;;365    		temp=LPC_RTC->SEC;
;;;366    		gran_char(&temp,0,59);
;;;367    		*(((char*)(&(ke_date[1])))+2)=temp;
;;;368    			
;;;369    		*(((char*)(&(ke_date[1])))+3)=*(((char*)&temp_temp)+1);
;;;370    		lc640_write_long(EE_SPC_KE_DATE1,ke_date[1]);
;;;371    		}
;;;372    	bat_hndl_zvu_ke_init=1;
;;;373    	}
;;;374    }
;;;375    #endif
                          ENDP

                  |L2.12|
                          DCD      ||area_number.25||

                          AREA ||area_number.3||, CODE, READONLY, ALIGN=2

                          EXPORTAS ||area_number.3||, ||.text||
                  adc_drv6 PROC
;;;295    //-----------------------------------------------
;;;296    void ke_start(char in)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;297    {          
000004  4c80              LDR      r4,|L3.520|
;;;298    ke_start_stat=(enum_ke_start_stat)0;		 
000006  8860              LDRH     r0,[r4,#2]  ; adc_self_ch_buff
000008  8821              LDRH     r1,[r4,#0]  ; adc_self_ch_buff
00000a  1a40              SUBS     r0,r0,r1
;;;299    /*
;;;300    if(spc_stat==spcVZ)ke_start_stat=kssNOT_VZ;
;;;301    #ifndef UKU_220_IPS_TERMOKOMPENSAT
;;;302    else if(BAT_IS_ON[in]!=bisON)ke_start_stat=kssNOT_BAT;
;;;303    #endif
;;;304    else if(bat[in]._av&(1<<0))ke_start_stat=kssNOT_BAT_AV;
;;;305    else if(bat[in]._temper_stat&(1<<1))ke_start_stat=kssNOT_BAT_AV_T;
;;;306    else if(bat[in]._av&(1<<1))ke_start_stat=kssNOT_BAT_AV_ASS;
;;;307    else if(bat[in]._Ib>IKB)ke_start_stat=kssNOT_BAT_ZAR;
;;;308    else if(bat[in]._Ib<-IKB)ke_start_stat=kssNOT_BAT_RAZR;
;;;309    else if((spc_stat==spcKE)&&(spc_bat==0))ke_start_stat=kssNOT_KE1;
;;;310    else if((spc_stat==spcKE)&&(spc_bat==1))ke_start_stat=kssNOT_KE2;
;;;311    else */
;;;312    	{
;;;313    
;;;314    	ke_start_stat=kssYES;
00000c  b200              SXTH     r0,r0
00000e  f7fffffe          BL       abs_pal
;;;315    
;;;316    	spc_stat=spcKE;
000012  1da5              ADDS     r5,r4,#6
000014  8028              STRH     r0,[r5,#0]
000016  88a0              LDRH     r0,[r4,#4]  ; adc_self_ch_buff
;;;317    	__ee_spc_stat=spcKE;
000018  8861              LDRH     r1,[r4,#2]  ; adc_self_ch_buff
00001a  1a40              SUBS     r0,r0,r1
;;;318    	lc640_write_int(EE_SPC_STAT,__ee_spc_stat);
00001c  b200              SXTH     r0,r0
00001e  f7fffffe          BL       abs_pal
000022  8068              STRH     r0,[r5,#2]
000024  88a0              LDRH     r0,[r4,#4]  ; adc_self_ch_buff
;;;319    	
;;;320    	spc_bat=0;
000026  8821              LDRH     r1,[r4,#0]  ; adc_self_ch_buff
;;;321    	__ee_spc_bat=0;
000028  1a40              SUBS     r0,r0,r1
00002a  b200              SXTH     r0,r0
;;;322    	lc640_write_int(EE_SPC_BAT,__ee_spc_bat);
00002c  f7fffffe          BL       abs_pal
000030  80a8              STRH     r0,[r5,#4]
000032  f44f7196          MOV      r1,#0x12c
;;;323    
;;;324    	bat[0]._zar_cnt_ke=0;
000036  f1a406ea          SUB      r6,r4,#0xea
00003a  4288              CMP      r0,r1
00003c  da02              BGE      |L3.68|
;;;325    	lc640_write_int(ADR_EE_BAT_ZAR_CNT_KE[0],0);
00003e  88a0              LDRH     r0,[r4,#4]  ; adc_self_ch_buff
000040  86f0              STRH     r0,[r6,#0x36]
000042  e00c              B        |L3.94|
                  |L3.68|
000044  f9b50002          LDRSH    r0,[r5,#2]  ; adc_self_ch_disp
000048  4288              CMP      r0,r1
;;;326    
;;;327    	bat[0]._time_min_cnt_ke=0;
00004a  da02              BGE      |L3.82|
00004c  8860              LDRH     r0,[r4,#2]  ; adc_self_ch_buff
;;;328    	lc640_write_int(EE_ZVU_BAT_MIN_CNT_KE,0);
00004e  86f0              STRH     r0,[r6,#0x36]
000050  e005              B        |L3.94|
                  |L3.82|
000052  f9b50000          LDRSH    r0,[r5,#0]  ; adc_self_ch_disp
000056  4288              CMP      r0,r1
;;;329    
;;;330    	
;;;331    	spc_phase=0;
000058  da01              BGE      |L3.94|
;;;332    	__ee_spc_phase=0;
00005a  8820              LDRH     r0,[r4,#0]  ; adc_self_ch_buff
00005c  86f0              STRH     r0,[r6,#0x36]
                  |L3.94|
;;;333    	lc640_write_int(EE_SPC_PHASE,__ee_spc_phase);
00005e  7a77              LDRB     r7,[r6,#9]  ; adc_ch_net
000060  2200              MOVS     r2,#0
000062  b3f7              CBZ      r7,|L3.226|
000064  7b33              LDRB     r3,[r6,#0xc]  ; adc_window_flag
000066  4869              LDR      r0,|L3.524|
;;;334    
;;;335    	//ke_mem_hndl(in,lc640_read_int(ADR_EE_BAT_ZAR_CNT_KE[spc_bat]));
;;;336    
;;;337    		{					
;;;338    		signed short temp_temp;
;;;339    		signed char temp;
;;;340    		temp_temp=bat[in]._u_old[((bat_u_old_cnt+1)&0x07)]; 
000068  b18b              CBZ      r3,|L3.142|
00006a  f9b61036          LDRSH    r1,[r6,#0x36]  ; adc_result
00006e  6804              LDR      r4,[r0,#0]  ; main_power_buffer
000070  eb0404a1          ADD      r4,r4,r1,ASR #2
000074  6004              STR      r4,[r0,#0]  ; main_power_buffer
000076  6844              LDR      r4,[r0,#4]  ; main_power_buffer
000078  eb0404a1          ADD      r4,r4,r1,ASR #2
00007c  6044              STR      r4,[r0,#4]  ; main_power_buffer
00007e  6884              LDR      r4,[r0,#8]  ; main_power_buffer
000080  eb0404a1          ADD      r4,r4,r1,ASR #2
000084  6084              STR      r4,[r0,#8]  ; main_power_buffer
000086  68c4              LDR      r4,[r0,#0xc]  ; main_power_buffer
;;;341    		    
;;;342    		temp=LPC_RTC->YEAR;
000088  eb0401a1          ADD      r1,r4,r1,ASR #2
00008c  60c1              STR      r1,[r0,#0xc]  ; main_power_buffer
                  |L3.142|
;;;343    		gran_char(&temp,1,99);
00008e  f9b61036          LDRSH    r1,[r6,#0x36]  ; adc_result
000092  2964              CMP      r1,#0x64
000094  da04              BGE      |L3.160|
000096  8f71              LDRH     r1,[r6,#0x3a]  ; adc_zero_cnt
000098  f1010101          ADD      r1,r1,#1
;;;344    		*((char*)(&(ke_date[0])))=temp;
00009c  8771              STRH     r1,[r6,#0x3a]
00009e  e000              B        |L3.162|
                  |L3.160|
0000a0  8772              STRH     r2,[r6,#0x3a]
                  |L3.162|
0000a2  f9b6403a          LDRSH    r4,[r6,#0x3a]  ; adc_zero_cnt
;;;345    			
;;;346    		temp=LPC_RTC->MONTH;
0000a6  f44f61fa          MOV      r1,#0x7d0
;;;347    		gran_char(&temp,1,12);
0000aa  428c              CMP      r4,r1
0000ac  db05              BLT      |L3.186|
0000ae  8771              STRH     r1,[r6,#0x3a]
0000b0  6002              STR      r2,[r0,#0]  ; main_power_buffer
0000b2  6042              STR      r2,[r0,#4]  ; main_power_buffer
;;;348    		*(((char*)(&(ke_date[0])))+1)=temp;
0000b4  6082              STR      r2,[r0,#8]  ; main_power_buffer
0000b6  60c2              STR      r2,[r0,#0xc]  ; main_power_buffer
0000b8  86b2              STRH     r2,[r6,#0x34]
                  |L3.186|
;;;349    		
;;;350    		temp=LPC_RTC->DOM;
0000ba  8f71              LDRH     r1,[r6,#0x3a]  ; adc_zero_cnt
0000bc  2905              CMP      r1,#5
;;;351    		gran_char(&temp,1,31);
0000be  d14f              BNE      |L3.352|
0000c0  b1bb              CBZ      r3,|L3.242|
0000c2  8f31              LDRH     r1,[r6,#0x38]  ; adc_gorb_cnt
0000c4  f1010101          ADD      r1,r1,#1
;;;352    		*(((char*)(&(ke_date[0])))+2)=temp;			
0000c8  b209              SXTH     r1,r1
0000ca  8731              STRH     r1,[r6,#0x38]
0000cc  f5b17f00          CMP      r1,#0x200
;;;353    				
;;;354    		*(((char*)(&(ke_date[0])))+3)=*((char*)&temp_temp);
0000d0  db00              BLT      |L3.212|
0000d2  8732              STRH     r2,[r6,#0x38]
                  |L3.212|
;;;355    		lc640_write_long(EE_SPC_KE_DATE0,ke_date[0]);
0000d4  f9b61038          LDRSH    r1,[r6,#0x38]  ; adc_gorb_cnt
0000d8  064c              LSLS     r4,r1,#25
0000da  d10a              BNE      |L3.242|
0000dc  ea4f11e1          ASR      r1,r1,#7
;;;356    
;;;357    		temp=LPC_RTC->HOUR;
0000e0  e000              B        |L3.228|
                  |L3.226|
;;;358    		gran_char(&temp,0,23);
0000e2  e015              B        |L3.272|
                  |L3.228|
0000e4  f8504021          LDR      r4,[r0,r1,LSL #2]
0000e8  ea4f2424          ASR      r4,r4,#8
;;;359    		*((char*)(&(ke_date[1])))=temp;
0000ec  86b4              STRH     r4,[r6,#0x34]
0000ee  f8402021          STR      r2,[r0,r1,LSL #2]
                  |L3.242|
;;;360                   
;;;361    		temp=LPC_RTC->MIN;
0000f2  f9b6003c          LDRSH    r0,[r6,#0x3c]  ; adc_window_cnt
;;;362    		gran_char(&temp,0,59);
0000f6  2896              CMP      r0,#0x96
0000f8  dd01              BLE      |L3.254|
0000fa  b103              CBZ      r3,|L3.254|
0000fc  7332              STRB     r2,[r6,#0xc]
                  |L3.254|
0000fe  381f              SUBS     r0,r0,#0x1f
;;;363    		*(((char*)(&(ke_date[1])))+1)=temp;
000100  2827              CMP      r0,#0x27
000102  d22d              BCS      |L3.352|
000104  7b30              LDRB     r0,[r6,#0xc]  ; adc_window_flag
;;;364    	          
;;;365    		temp=LPC_RTC->SEC;
000106  bb58              CBNZ     r0,|L3.352|
000108  f04f0001          MOV      r0,#1
;;;366    		gran_char(&temp,0,59);
00010c  7330              STRB     r0,[r6,#0xc]
00010e  e027              B        |L3.352|
                  |L3.272|
000110  483f              LDR      r0,|L3.528|
000112  7ab5              LDRB     r5,[r6,#0xa]  ; adc_ch
;;;367    		*(((char*)(&(ke_date[1])))+2)=temp;
000114  7af3              LDRB     r3,[r6,#0xb]  ; adc_ch_cnt
000116  eb001485          ADD      r4,r0,r5,LSL #6
;;;368    			
;;;369    		*(((char*)(&(ke_date[1])))+3)=*(((char*)&temp_temp)+1);
00011a  f9b61036          LDRSH    r1,[r6,#0x36]  ; adc_result
00011e  f8441023          STR      r1,[r4,r3,LSL #2]
;;;370    		lc640_write_long(EE_SPC_KE_DATE1,ke_date[1]);
000122  0798              LSLS     r0,r3,#30
000124  d10f              BNE      |L3.326|
000126  4601              MOV      r1,r0
                  |L3.296|
000128  f854c020          LDR      r12,[r4,r0,LSL #2]
;;;371    		}
;;;372    	bat_hndl_zvu_ke_init=1;
;;;373    	}
;;;374    }
00012c  4461              ADD      r1,r1,r12
00012e  f1000001          ADD      r0,r0,#1
000132  b2c0              UXTB     r0,r0
000134  2810              CMP      r0,#0x10
000136  d3f7              BCC      |L3.296|
000138  ea4f1021          ASR      r0,r1,#4
00013c  4933              LDR      r1,|L3.524|
00013e  f1a10120          SUB      r1,r1,#0x20
000142  f8210015          STRH     r0,[r1,r5,LSL #1]
                  |L3.326|
000146  1c6d              ADDS     r5,r5,#1
000148  b2e8              UXTB     r0,r5
00014a  72b0              STRB     r0,[r6,#0xa]
00014c  2810              CMP      r0,#0x10
00014e  d307              BCC      |L3.352|
000150  72b2              STRB     r2,[r6,#0xa]
000152  f1030301          ADD      r3,r3,#1
000156  b2d8              UXTB     r0,r3
000158  72f0              STRB     r0,[r6,#0xb]
00015a  2810              CMP      r0,#0x10
00015c  d300              BCC      |L3.352|
00015e  72f2              STRB     r2,[r6,#0xb]
                  |L3.352|
000160  7232              STRB     r2,[r6,#8]
000162  f1070701          ADD      r7,r7,#1
000166  f0070001          AND      r0,r7,#1
00016a  7270              STRB     r0,[r6,#9]
00016c  4a29              LDR      r2,|L3.532|
00016e  b130              CBZ      r0,|L3.382|
000170  6810              LDR      r0,[r2,#0]
000172  f02000ff          BIC      r0,r0,#0xff
000176  f1000004          ADD      r0,r0,#4
00017a  6010              STR      r0,[r2,#0]
00017c  e03d              B        |L3.506|
                  |L3.382|
00017e  7ab1              LDRB     r1,[r6,#0xa]  ; adc_ch
000180  0708              LSLS     r0,r1,#28
000182  d406              BMI      |L3.402|
000184  6810              LDR      r0,[r2,#0]
000186  f02000ff          BIC      r0,r0,#0xff
00018a  f1000001          ADD      r0,r0,#1
00018e  6010              STR      r0,[r2,#0]
000190  e005              B        |L3.414|
                  |L3.402|
000192  6810              LDR      r0,[r2,#0]
000194  f02000ff          BIC      r0,r0,#0xff
000198  f1000002          ADD      r0,r0,#2
00019c  6010              STR      r0,[r2,#0]
                  |L3.414|
00019e  481e              LDR      r0,|L3.536|
0001a0  6803              LDR      r3,[r0,#0]
0001a2  f0435380          ORR      r3,r3,#0x10000000
0001a6  6003              STR      r3,[r0,#0]
0001a8  6a03              LDR      r3,[r0,#0x20]
0001aa  f0434380          ORR      r3,r3,#0x40000000
0001ae  6203              STR      r3,[r0,#0x20]
0001b0  6e03              LDR      r3,[r0,#0x60]
0001b2  f0436380          ORR      r3,r3,#0x4000000
0001b6  6603              STR      r3,[r0,#0x60]
0001b8  07cb              LSLS     r3,r1,#31
0001ba  d00a              BEQ      |L3.466|
0001bc  6943              LDR      r3,[r0,#0x14]
0001be  f0435380          ORR      r3,r3,#0x10000000
0001c2  6143              STR      r3,[r0,#0x14]
                  |L3.452|
0001c4  078b              LSLS     r3,r1,#30
0001c6  d409              BMI      |L3.476|
0001c8  6b43              LDR      r3,[r0,#0x34]
0001ca  f0234380          BIC      r3,r3,#0x40000000
0001ce  6343              STR      r3,[r0,#0x34]
0001d0  e008              B        |L3.484|
                  |L3.466|
0001d2  6943              LDR      r3,[r0,#0x14]
0001d4  f0235380          BIC      r3,r3,#0x10000000
0001d8  6143              STR      r3,[r0,#0x14]
0001da  e7f3              B        |L3.452|
                  |L3.476|
0001dc  6b43              LDR      r3,[r0,#0x34]
0001de  f0434380          ORR      r3,r3,#0x40000000
0001e2  6343              STR      r3,[r0,#0x34]
                  |L3.484|
0001e4  0749              LSLS     r1,r1,#29
0001e6  d404              BMI      |L3.498|
0001e8  6f41              LDR      r1,[r0,#0x74]
0001ea  f0216180          BIC      r1,r1,#0x4000000
0001ee  6741              STR      r1,[r0,#0x74]
0001f0  e003              B        |L3.506|
                  |L3.498|
0001f2  6f41              LDR      r1,[r0,#0x74]
0001f4  f0416180          ORR      r1,r1,#0x4000000
0001f8  6741              STR      r1,[r0,#0x74]
                  |L3.506|
0001fa  6810              LDR      r0,[r2,#0]
0001fc  f0407080          ORR      r0,r0,#0x1000000
000200  6010              STR      r0,[r2,#0]
000202  e8bd81f0          POP      {r4-r8,pc}
;;;375    #endif
                          ENDP

000206  0000              DCW      0x0000
                  |L3.520|
                          DCD      ||area_number.25||+0xea
                  |L3.524|
                          DCD      ||.bss||+0x42c
                  |L3.528|
                          DCD      ||.bss||+0xc
                  |L3.532|
                          DCD      0x40034000
                  |L3.536|
                          DCD      0x2009c000

                          AREA ||area_number.4||, CODE, READONLY, ALIGN=2

                          EXPORTAS ||area_number.4||, ||.text||
                  ips_current_average_hndl_ PROC
;;;295    //-----------------------------------------------
;;;296    void ke_start(char in)
000000  e92d43f0          PUSH     {r4-r9,lr}
;;;297    {          
000004  b085              SUB      sp,sp,#0x14
;;;298    ke_start_stat=(enum_ke_start_stat)0;		 
000006  4c64              LDR      r4,|L4.408|
000008  4e64              LDR      r6,|L4.412|
00000a  2500              MOVS     r5,#0
;;;299    /*
;;;300    if(spc_stat==spcVZ)ke_start_stat=kssNOT_VZ;
;;;301    #ifndef UKU_220_IPS_TERMOKOMPENSAT
;;;302    else if(BAT_IS_ON[in]!=bisON)ke_start_stat=kssNOT_BAT;
;;;303    #endif
;;;304    else if(bat[in]._av&(1<<0))ke_start_stat=kssNOT_BAT_AV;
;;;305    else if(bat[in]._temper_stat&(1<<1))ke_start_stat=kssNOT_BAT_AV_T;
;;;306    else if(bat[in]._av&(1<<1))ke_start_stat=kssNOT_BAT_AV_ASS;
;;;307    else if(bat[in]._Ib>IKB)ke_start_stat=kssNOT_BAT_ZAR;
;;;308    else if(bat[in]._Ib<-IKB)ke_start_stat=kssNOT_BAT_RAZR;
;;;309    else if((spc_stat==spcKE)&&(spc_bat==0))ke_start_stat=kssNOT_KE1;
;;;310    else if((spc_stat==spcKE)&&(spc_bat==1))ke_start_stat=kssNOT_KE2;
;;;311    else */
;;;312    	{
;;;313    
;;;314    	ke_start_stat=kssYES;
00000c  7820              LDRB     r0,[r4,#0]  ; ica_timer_cnt
00000e  1c40              ADDS     r0,r0,#1
000010  b2c0              UXTB     r0,r0
;;;315    
;;;316    	spc_stat=spcKE;
000012  7020              STRB     r0,[r4,#0]
000014  280a              CMP      r0,#0xa
000016  d340              BCC      |L4.154|
;;;317    	__ee_spc_stat=spcKE;
000018  7025              STRB     r5,[r4,#0]
00001a  f8dfc184          LDR      r12,|L4.416|
;;;318    	lc640_write_int(EE_SPC_STAT,__ee_spc_stat);
00001e  f89c0000          LDRB     r0,[r12,#0]  ; ica_plazma
000022  f1000001          ADD      r0,r0,#1
;;;319    	
;;;320    	spc_bat=0;
000026  f88c0000          STRB     r0,[r12,#0]
;;;321    	__ee_spc_bat=0;
00002a  485e              LDR      r0,|L4.420|
;;;322    	lc640_write_int(EE_SPC_BAT,__ee_spc_bat);
00002c  495e              LDR      r1,|L4.424|
00002e  f9b00000          LDRSH    r0,[r0,#0]  ; bps_I
000032  8008              STRH     r0,[r1,#0]
000034  495d              LDR      r1,|L4.428|
;;;323    
;;;324    	bat[0]._zar_cnt_ke=0;
000036  f8df8178          LDR      r8,|L4.432|
00003a  4662              MOV      r2,r12
00003c  4637              MOV      r7,r6
;;;325    	lc640_write_int(ADR_EE_BAT_ZAR_CNT_KE[0],0);
00003e  f9b11000          LDRSH    r1,[r1,#0]  ; ica_your_current
000042  7852              LDRB     r2,[r2,#1]
000044  f9b83000          LDRSH    r3,[r8,#0]
000048  f9b77000          LDRSH    r7,[r7,#0]
;;;326    
;;;327    	bat[0]._time_min_cnt_ke=0;
00004c  4288              CMP      r0,r1
;;;328    	lc640_write_int(EE_ZVU_BAT_MIN_CNT_KE,0);
00004e  dd06              BLE      |L4.94|
000050  eba00901          SUB      r9,r0,r1
000054  f1b90f0a          CMP      r9,#0xa
;;;329    
;;;330    	
;;;331    	spc_phase=0;
000058  db01              BLT      |L4.94|
;;;332    	__ee_spc_phase=0;
00005a  2f01              CMP      r7,#1
00005c  d007              BEQ      |L4.110|
                  |L4.94|
;;;333    	lc640_write_int(EE_SPC_PHASE,__ee_spc_phase);
00005e  4288              CMP      r0,r1
000060  da16              BGE      |L4.144|
000062  1a08              SUBS     r0,r1,r0
000064  280a              CMP      r0,#0xa
000066  db13              BLT      |L4.144|
;;;334    
;;;335    	//ke_mem_hndl(in,lc640_read_int(ADR_EE_BAT_ZAR_CNT_KE[spc_bat]));
;;;336    
;;;337    		{					
;;;338    		signed short temp_temp;
;;;339    		signed char temp;
;;;340    		temp_temp=bat[in]._u_old[((bat_u_old_cnt+1)&0x07)]; 
000068  2f01              CMP      r7,#1
00006a  d009              BEQ      |L4.128|
00006c  e010              B        |L4.144|
                  |L4.110|
00006e  f1020201          ADD      r2,r2,#1
000072  f88c2001          STRB     r2,[r12,#1]
000076  f1a30301          SUB      r3,r3,#1
00007a  f8a83000          STRH     r3,[r8,#0]
00007e  e007              B        |L4.144|
                  |L4.128|
000080  f1a20201          SUB      r2,r2,#1
000084  f88c2001          STRB     r2,[r12,#1]
;;;341    		    
;;;342    		temp=LPC_RTC->YEAR;
000088  f1030301          ADD      r3,r3,#1
00008c  f8a83000          STRH     r3,[r8,#0]
                  |L4.144|
;;;343    		gran_char(&temp,1,99);
000090  2214              MOVS     r2,#0x14
000092  4251              RSBS     r1,r2,#0
000094  4846              LDR      r0,|L4.432|
000096  f7fffffe          BL       gran
                  |L4.154|
00009a  7820              LDRB     r0,[r4,#0]  ; ica_timer_cnt
;;;344    		*((char*)(&(ke_date[0])))=temp;
00009c  f8df8114          LDR      r8,|L4.436|
0000a0  4f45              LDR      r7,|L4.440|
0000a2  2808              CMP      r0,#8
0000a4  d125              BNE      |L4.242|
;;;345    			
;;;346    		temp=LPC_RTC->MONTH;
0000a6  8830              LDRH     r0,[r6,#0]  ; ICA_EN
0000a8  2801              CMP      r0,#1
;;;347    		gran_char(&temp,1,12);
0000aa  d122              BNE      |L4.242|
0000ac  f8b80000          LDRH     r0,[r8,#0]  ; ICA_MODBUS_ADDRESS
0000b0  f88d0000          STRB     r0,[sp,#0]
;;;348    		*(((char*)(&(ke_date[0])))+1)=temp;
0000b4  f04f0004          MOV      r0,#4
0000b8  f88d0001          STRB     r0,[sp,#1]
;;;349    		
;;;350    		temp=LPC_RTC->DOM;
0000bc  f88d5002          STRB     r5,[sp,#2]
;;;351    		gran_char(&temp,1,31);
0000c0  f04f0002          MOV      r0,#2
0000c4  f88d0003          STRB     r0,[sp,#3]
;;;352    		*(((char*)(&(ke_date[0])))+2)=temp;			
0000c8  f88d5004          STRB     r5,[sp,#4]
0000cc  f04f0001          MOV      r0,#1
;;;353    				
;;;354    		*(((char*)(&(ke_date[0])))+3)=*((char*)&temp_temp);
0000d0  f88d0005          STRB     r0,[sp,#5]
;;;355    		lc640_write_long(EE_SPC_KE_DATE0,ke_date[0]);
0000d4  f04f0106          MOV      r1,#6
0000d8  4668              MOV      r0,sp
0000da  f7fffffe          BL       CRC16_2
;;;356    
;;;357    		temp=LPC_RTC->HOUR;
0000de  f88d0006          STRB     r0,[sp,#6]
;;;358    		gran_char(&temp,0,23);
0000e2  ea4f2020          ASR      r0,r0,#8
0000e6  f88d0007          STRB     r0,[sp,#7]
0000ea  f9b70000          LDRSH    r0,[r7,#0]  ; ICA_CH
;;;359    		*((char*)(&(ke_date[1])))=temp;
0000ee  b3e8              CBZ      r0,|L4.364|
0000f0  2801              CMP      r0,#1
                  |L4.242|
;;;360                   
;;;361    		temp=LPC_RTC->MIN;
0000f2  4832              LDR      r0,|L4.444|
0000f4  f06f0214          MVN      r2,#0x14
;;;362    		gran_char(&temp,0,59);
0000f8  f9b00000          LDRSH    r0,[r0,#0]  ; TBAT
0000fc  ebc01100          RSB      r1,r0,r0,LSL #4
;;;363    		*(((char*)(&(ke_date[1])))+1)=temp;
000100  eb020181          ADD      r1,r2,r1,LSL #2
000104  4a2e              LDR      r2,|L4.448|
;;;364    	          
;;;365    		temp=LPC_RTC->SEC;
000106  f9b2204c          LDRSH    r2,[r2,#0x4c]  ; main_kb_cnt
;;;366    		gran_char(&temp,0,59);
00010a  4291              CMP      r1,r2
00010c  d134              BNE      |L4.376|
00010e  8831              LDRH     r1,[r6,#0]  ; ICA_EN
000110  2901              CMP      r1,#1
000112  d131              BNE      |L4.376|
;;;367    		*(((char*)(&(ke_date[1])))+2)=temp;
000114  f8b81000          LDRH     r1,[r8,#0]  ; ICA_MODBUS_ADDRESS
000118  f88d1000          STRB     r1,[sp,#0]
;;;368    			
;;;369    		*(((char*)(&(ke_date[1])))+3)=*(((char*)&temp_temp)+1);
00011c  f04f0106          MOV      r1,#6
;;;370    		lc640_write_long(EE_SPC_KE_DATE1,ke_date[1]);
000120  f88d1001          STRB     r1,[sp,#1]
000124  f88d5002          STRB     r5,[sp,#2]
000128  f04f011e          MOV      r1,#0x1e
;;;371    		}
;;;372    	bat_hndl_zvu_ke_init=1;
;;;373    	}
;;;374    }
00012c  f88d1003          STRB     r1,[sp,#3]
000130  ea4f71e0          ASR      r1,r0,#31
000134  eb006111          ADD      r1,r0,r1,LSR #24
000138  ea4f2221          ASR      r2,r1,#8
00013c  f88d2004          STRB     r2,[sp,#4]
000140  f88d0005          STRB     r0,[sp,#5]
000144  f04f0106          MOV      r1,#6
000148  4668              MOV      r0,sp
00014a  f7fffffe          BL       CRC16_2
00014e  f88d0006          STRB     r0,[sp,#6]
000152  ea4f2020          ASR      r0,r0,#8
000156  f88d0007          STRB     r0,[sp,#7]
00015a  8838              LDRH     r0,[r7,#0]  ; ICA_CH
00015c  2800              CMP      r0,#0
00015e  d10b              BNE      |L4.376|
000160  4604              MOV      r4,r0
000162  466d              MOV      r5,sp
                  |L4.356|
000164  5d28              LDRB     r0,[r5,r4]
000166  f7fffffe          BL       putchar_sc16is700
00016a  e000              B        |L4.366|
                  |L4.364|
00016c  e007              B        |L4.382|
                  |L4.366|
00016e  f1040401          ADD      r4,r4,#1
000172  b2e4              UXTB     r4,r4
000174  2c08              CMP      r4,#8
000176  d3f5              BCC      |L4.356|
                  |L4.376|
000178  b005              ADD      sp,sp,#0x14
00017a  e8bd83f0          POP      {r4-r9,pc}
                  |L4.382|
00017e  f04f0400          MOV      r4,#0
000182  46e9              MOV      r9,sp
                  |L4.388|
000184  f8190004          LDRB     r0,[r9,r4]
000188  f7fffffe          BL       putchar_sc16is700
00018c  f1040401          ADD      r4,r4,#1
000190  b2e4              UXTB     r4,r4
000192  2c08              CMP      r4,#8
000194  d3f6              BCC      |L4.388|
000196  e7ac              B        |L4.242|
;;;375    #endif
                          ENDP

                  |L4.408|
                          DCD      ica_timer_cnt
                  |L4.412|
                          DCD      ICA_EN
                  |L4.416|
                          DCD      ica_plazma
                  |L4.420|
                          DCD      bps_I
                  |L4.424|
                          DCD      ica_my_current
                  |L4.428|
                          DCD      ica_your_current
                  |L4.432|
                          DCD      ica_u_necc
                  |L4.436|
                          DCD      ICA_MODBUS_ADDRESS
                  |L4.440|
                          DCD      ICA_CH
                  |L4.444|
                          DCD      TBAT
                  |L4.448|
                          DCD      ||area_number.25||

                          AREA ||area_number.5||, CODE, READONLY, ALIGN=2

                          EXPORTAS ||area_number.5||, ||.text||
                  inv_drv PROC
;;;295    //-----------------------------------------------
;;;296    void ke_start(char in)
000000  b570              PUSH     {r4-r6,lr}
;;;297    {          
000002  4604              MOV      r4,r0
000004  f04f0207          MOV      r2,#7
;;;298    ke_start_stat=(enum_ke_start_stat)0;		 
000008  f04f0101          MOV      r1,#1
;;;299    /*
;;;300    if(spc_stat==spcVZ)ke_start_stat=kssNOT_VZ;
;;;301    #ifndef UKU_220_IPS_TERMOKOMPENSAT
;;;302    else if(BAT_IS_ON[in]!=bisON)ke_start_stat=kssNOT_BAT;
;;;303    #endif
;;;304    else if(bat[in]._av&(1<<0))ke_start_stat=kssNOT_BAT_AV;
;;;305    else if(bat[in]._temper_stat&(1<<1))ke_start_stat=kssNOT_BAT_AV_T;
;;;306    else if(bat[in]._av&(1<<1))ke_start_stat=kssNOT_BAT_AV_ASS;
;;;307    else if(bat[in]._Ib>IKB)ke_start_stat=kssNOT_BAT_ZAR;
;;;308    else if(bat[in]._Ib<-IKB)ke_start_stat=kssNOT_BAT_RAZR;
;;;309    else if((spc_stat==spcKE)&&(spc_bat==0))ke_start_stat=kssNOT_KE1;
;;;310    else if((spc_stat==spcKE)&&(spc_bat==1))ke_start_stat=kssNOT_KE2;
;;;311    else */
;;;312    	{
;;;313    
;;;314    	ke_start_stat=kssYES;
00000c  48a4              LDR      r0,|L5.672|
00000e  f7fffffe          BL       gran_char
;;;315    
;;;316    	spc_stat=spcKE;
000012  48a4              LDR      r0,|L5.676|
000014  eb040144          ADD      r1,r4,r4,LSL #1
;;;317    	__ee_spc_stat=spcKE;
000018  eb001541          ADD      r5,r0,r1,LSL #5
;;;318    	lc640_write_int(EE_SPC_STAT,__ee_spc_stat);
00001c  f8950047          LDRB     r0,[r5,#0x47]
000020  f8951046          LDRB     r1,[r5,#0x46]
000024  ea800001          EOR      r0,r0,r1
;;;319    	
;;;320    	spc_bat=0;
;;;321    	__ee_spc_bat=0;
000028  4a9f              LDR      r2,|L5.680|
00002a  b100              CBZ      r0,|L5.46|
;;;322    	lc640_write_int(EE_SPC_BAT,__ee_spc_bat);
00002c  7050              STRB     r0,[r2,#1]
                  |L5.46|
00002e  ea010100          AND      r1,r1,r0
000032  b101              CBZ      r1,|L5.54|
000034  7091              STRB     r1,[r2,#2]
                  |L5.54|
;;;323    
;;;324    	bat[0]._zar_cnt_ke=0;
000036  ea000301          AND      r3,r0,r1
00003a  07db              LSLS     r3,r3,#31
00003c  d027              BEQ      |L5.142|
;;;325    	lc640_write_int(ADR_EE_BAT_ZAR_CNT_KE[0],0);
00003e  78d0              LDRB     r0,[r2,#3]  ; plazma_inv
000040  f1000001          ADD      r0,r0,#1
000044  70d0              STRB     r0,[r2,#3]
000046  b134              CBZ      r4,|L5.86|
000048  2c01              CMP      r4,#1
;;;326    
;;;327    	bat[0]._time_min_cnt_ke=0;
00004a  d00b              BEQ      |L5.100|
00004c  2c02              CMP      r4,#2
;;;328    	lc640_write_int(EE_ZVU_BAT_MIN_CNT_KE,0);
00004e  d010              BEQ      |L5.114|
000050  2c03              CMP      r4,#3
000052  d015              BEQ      |L5.128|
000054  e120              B        |L5.664|
                  |L5.86|
000056  2301              MOVS     r3,#1
;;;329    
;;;330    	
;;;331    	spc_phase=0;
000058  461a              MOV      r2,r3
;;;332    	__ee_spc_phase=0;
00005a  210e              MOVS     r1,#0xe
00005c  a093              ADR      r0,|L5.684|
;;;333    	lc640_write_int(EE_SPC_PHASE,__ee_spc_phase);
00005e  f7fffffe          BL       snmp_trap_send
000062  e119              B        |L5.664|
                  |L5.100|
000064  2301              MOVS     r3,#1
000066  2202              MOVS     r2,#2
;;;334    
;;;335    	//ke_mem_hndl(in,lc640_read_int(ADR_EE_BAT_ZAR_CNT_KE[spc_bat]));
;;;336    
;;;337    		{					
;;;338    		signed short temp_temp;
;;;339    		signed char temp;
;;;340    		temp_temp=bat[in]._u_old[((bat_u_old_cnt+1)&0x07)]; 
000068  210e              MOVS     r1,#0xe
00006a  a097              ADR      r0,|L5.712|
00006c  f7fffffe          BL       snmp_trap_send
000070  e112              B        |L5.664|
                  |L5.114|
000072  2301              MOVS     r3,#1
000074  2203              MOVS     r2,#3
000076  210e              MOVS     r1,#0xe
000078  a09a              ADR      r0,|L5.740|
00007a  f7fffffe          BL       snmp_trap_send
00007e  e10b              B        |L5.664|
                  |L5.128|
000080  2301              MOVS     r3,#1
000082  2204              MOVS     r2,#4
000084  210e              MOVS     r1,#0xe
000086  a09e              ADR      r0,|L5.768|
;;;341    		    
;;;342    		temp=LPC_RTC->YEAR;
000088  f7fffffe          BL       snmp_trap_send
00008c  e104              B        |L5.664|
                  |L5.142|
;;;343    		gran_char(&temp,1,99);
00008e  0783              LSLS     r3,r0,#30
000090  d529              BPL      |L5.230|
000092  078b              LSLS     r3,r1,#30
000094  d527              BPL      |L5.230|
000096  78d0              LDRB     r0,[r2,#3]  ; plazma_inv
000098  f1000001          ADD      r0,r0,#1
;;;344    		*((char*)(&(ke_date[0])))=temp;
00009c  70d0              STRB     r0,[r2,#3]
00009e  b134              CBZ      r4,|L5.174|
0000a0  2c01              CMP      r4,#1
0000a2  d00b              BEQ      |L5.188|
0000a4  2c02              CMP      r4,#2
;;;345    			
;;;346    		temp=LPC_RTC->MONTH;
0000a6  d010              BEQ      |L5.202|
0000a8  2c03              CMP      r4,#3
;;;347    		gran_char(&temp,1,12);
0000aa  d015              BEQ      |L5.216|
0000ac  e0f4              B        |L5.664|
                  |L5.174|
0000ae  2302              MOVS     r3,#2
0000b0  2201              MOVS     r2,#1
0000b2  210e              MOVS     r1,#0xe
;;;348    		*(((char*)(&(ke_date[0])))+1)=temp;
0000b4  a099              ADR      r0,|L5.796|
0000b6  f7fffffe          BL       snmp_trap_send
;;;349    		
;;;350    		temp=LPC_RTC->DOM;
0000ba  e0ed              B        |L5.664|
                  |L5.188|
0000bc  2302              MOVS     r3,#2
;;;351    		gran_char(&temp,1,31);
0000be  461a              MOV      r2,r3
0000c0  210e              MOVS     r1,#0xe
0000c2  a09d              ADR      r0,|L5.824|
0000c4  f7fffffe          BL       snmp_trap_send
;;;352    		*(((char*)(&(ke_date[0])))+2)=temp;			
0000c8  e0e6              B        |L5.664|
                  |L5.202|
0000ca  2302              MOVS     r3,#2
0000cc  2203              MOVS     r2,#3
;;;353    				
;;;354    		*(((char*)(&(ke_date[0])))+3)=*((char*)&temp_temp);
0000ce  210e              MOVS     r1,#0xe
0000d0  a0a0              ADR      r0,|L5.852|
0000d2  f7fffffe          BL       snmp_trap_send
;;;355    		lc640_write_long(EE_SPC_KE_DATE0,ke_date[0]);
0000d6  e0df              B        |L5.664|
                  |L5.216|
0000d8  2302              MOVS     r3,#2
0000da  2204              MOVS     r2,#4
0000dc  210e              MOVS     r1,#0xe
;;;356    
;;;357    		temp=LPC_RTC->HOUR;
0000de  a0a4              ADR      r0,|L5.880|
0000e0  f7fffffe          BL       snmp_trap_send
;;;358    		gran_char(&temp,0,23);
0000e4  e0d8              B        |L5.664|
                  |L5.230|
0000e6  0743              LSLS     r3,r0,#29
0000e8  d529              BPL      |L5.318|
0000ea  074b              LSLS     r3,r1,#29
;;;359    		*((char*)(&(ke_date[1])))=temp;
0000ec  d527              BPL      |L5.318|
0000ee  78d0              LDRB     r0,[r2,#3]  ; plazma_inv
0000f0  f1000001          ADD      r0,r0,#1
;;;360                   
;;;361    		temp=LPC_RTC->MIN;
0000f4  70d0              STRB     r0,[r2,#3]
;;;362    		gran_char(&temp,0,59);
0000f6  b134              CBZ      r4,|L5.262|
0000f8  2c01              CMP      r4,#1
0000fa  d00b              BEQ      |L5.276|
0000fc  2c02              CMP      r4,#2
0000fe  d010              BEQ      |L5.290|
;;;363    		*(((char*)(&(ke_date[1])))+1)=temp;
000100  2c03              CMP      r4,#3
000102  d015              BEQ      |L5.304|
000104  e0c8              B        |L5.664|
                  |L5.262|
;;;364    	          
;;;365    		temp=LPC_RTC->SEC;
000106  2303              MOVS     r3,#3
000108  2201              MOVS     r2,#1
;;;366    		gran_char(&temp,0,59);
00010a  210e              MOVS     r1,#0xe
00010c  a09f              ADR      r0,|L5.908|
00010e  f7fffffe          BL       snmp_trap_send
000112  e0c1              B        |L5.664|
                  |L5.276|
;;;367    		*(((char*)(&(ke_date[1])))+2)=temp;
000114  2303              MOVS     r3,#3
000116  2202              MOVS     r2,#2
000118  210e              MOVS     r1,#0xe
;;;368    			
;;;369    		*(((char*)(&(ke_date[1])))+3)=*(((char*)&temp_temp)+1);
00011a  a0a3              ADR      r0,|L5.936|
00011c  f7fffffe          BL       snmp_trap_send
;;;370    		lc640_write_long(EE_SPC_KE_DATE1,ke_date[1]);
000120  e0ba              B        |L5.664|
                  |L5.290|
000122  2303              MOVS     r3,#3
000124  461a              MOV      r2,r3
000126  210e              MOVS     r1,#0xe
000128  a0a6              ADR      r0,|L5.964|
;;;371    		}
;;;372    	bat_hndl_zvu_ke_init=1;
00012a  f7fffffe          BL       snmp_trap_send
;;;373    	}
;;;374    }
00012e  e0b3              B        |L5.664|
                  |L5.304|
000130  2303              MOVS     r3,#3
000132  2204              MOVS     r2,#4
000134  210e              MOVS     r1,#0xe
000136  a0aa              ADR      r0,|L5.992|
000138  f7fffffe          BL       snmp_trap_send
00013c  e0ac              B        |L5.664|
                  |L5.318|
00013e  0703              LSLS     r3,r0,#28
000140  d529              BPL      |L5.406|
000142  070b              LSLS     r3,r1,#28
000144  d527              BPL      |L5.406|
000146  78d0              LDRB     r0,[r2,#3]  ; plazma_inv
000148  f1000001          ADD      r0,r0,#1
00014c  70d0              STRB     r0,[r2,#3]
00014e  b134              CBZ      r4,|L5.350|
000150  2c01              CMP      r4,#1
000152  d00b              BEQ      |L5.364|
000154  2c02              CMP      r4,#2
000156  d010              BEQ      |L5.378|
000158  2c03              CMP      r4,#3
00015a  d015              BEQ      |L5.392|
00015c  e09c              B        |L5.664|
                  |L5.350|
00015e  2304              MOVS     r3,#4
000160  2201              MOVS     r2,#1
000162  210e              MOVS     r1,#0xe
000164  a0a5              ADR      r0,|L5.1020|
000166  f7fffffe          BL       snmp_trap_send
00016a  e095              B        |L5.664|
                  |L5.364|
00016c  2304              MOVS     r3,#4
00016e  2202              MOVS     r2,#2
000170  210e              MOVS     r1,#0xe
000172  a0ab              ADR      r0,|L5.1056|
000174  f7fffffe          BL       snmp_trap_send
000178  e08e              B        |L5.664|
                  |L5.378|
00017a  2304              MOVS     r3,#4
00017c  2203              MOVS     r2,#3
00017e  210e              MOVS     r1,#0xe
000180  a0b0              ADR      r0,|L5.1092|
000182  f7fffffe          BL       snmp_trap_send
000186  e087              B        |L5.664|
                  |L5.392|
000188  2304              MOVS     r3,#4
00018a  461a              MOV      r2,r3
00018c  210e              MOVS     r1,#0xe
00018e  a0b6              ADR      r0,|L5.1128|
000190  f7fffffe          BL       snmp_trap_send
000194  e080              B        |L5.664|
                  |L5.406|
000196  06c3              LSLS     r3,r0,#27
000198  d529              BPL      |L5.494|
00019a  06cb              LSLS     r3,r1,#27
00019c  d527              BPL      |L5.494|
00019e  78d0              LDRB     r0,[r2,#3]  ; plazma_inv
0001a0  f1000001          ADD      r0,r0,#1
0001a4  70d0              STRB     r0,[r2,#3]
0001a6  b134              CBZ      r4,|L5.438|
0001a8  2c01              CMP      r4,#1
0001aa  d00b              BEQ      |L5.452|
0001ac  2c02              CMP      r4,#2
0001ae  d010              BEQ      |L5.466|
0001b0  2c03              CMP      r4,#3
0001b2  d015              BEQ      |L5.480|
0001b4  e070              B        |L5.664|
                  |L5.438|
0001b6  2305              MOVS     r3,#5
0001b8  2201              MOVS     r2,#1
0001ba  210e              MOVS     r1,#0xe
0001bc  a0b3              ADR      r0,|L5.1164|
0001be  f7fffffe          BL       snmp_trap_send
0001c2  e069              B        |L5.664|
                  |L5.452|
0001c4  2305              MOVS     r3,#5
0001c6  2202              MOVS     r2,#2
0001c8  210e              MOVS     r1,#0xe
0001ca  a0b9              ADR      r0,|L5.1200|
0001cc  f7fffffe          BL       snmp_trap_send
0001d0  e062              B        |L5.664|
                  |L5.466|
0001d2  2305              MOVS     r3,#5
0001d4  2203              MOVS     r2,#3
0001d6  210e              MOVS     r1,#0xe
0001d8  a0be              ADR      r0,|L5.1236|
0001da  f7fffffe          BL       snmp_trap_send
0001de  e05b              B        |L5.664|
                  |L5.480|
0001e0  2305              MOVS     r3,#5
0001e2  2204              MOVS     r2,#4
0001e4  210e              MOVS     r1,#0xe
0001e6  a0c4              ADR      r0,|L5.1272|
0001e8  f7fffffe          BL       snmp_trap_send
0001ec  e054              B        |L5.664|
                  |L5.494|
0001ee  0683              LSLS     r3,r0,#26
0001f0  d529              BPL      |L5.582|
0001f2  068b              LSLS     r3,r1,#26
0001f4  d527              BPL      |L5.582|
0001f6  78d0              LDRB     r0,[r2,#3]  ; plazma_inv
0001f8  f1000001          ADD      r0,r0,#1
0001fc  70d0              STRB     r0,[r2,#3]
0001fe  b134              CBZ      r4,|L5.526|
000200  2c01              CMP      r4,#1
000202  d00b              BEQ      |L5.540|
000204  2c02              CMP      r4,#2
000206  d010              BEQ      |L5.554|
000208  2c03              CMP      r4,#3
00020a  d015              BEQ      |L5.568|
00020c  e044              B        |L5.664|
                  |L5.526|
00020e  2306              MOVS     r3,#6
000210  2201              MOVS     r2,#1
000212  210e              MOVS     r1,#0xe
000214  a0c1              ADR      r0,|L5.1308|
000216  f7fffffe          BL       snmp_trap_send
00021a  e03d              B        |L5.664|
                  |L5.540|
00021c  2306              MOVS     r3,#6
00021e  2202              MOVS     r2,#2
000220  210e              MOVS     r1,#0xe
000222  a0c7              ADR      r0,|L5.1344|
000224  f7fffffe          BL       snmp_trap_send
000228  e036              B        |L5.664|
                  |L5.554|
00022a  2306              MOVS     r3,#6
00022c  2203              MOVS     r2,#3
00022e  210e              MOVS     r1,#0xe
000230  a0cc              ADR      r0,|L5.1380|
000232  f7fffffe          BL       snmp_trap_send
000236  e02f              B        |L5.664|
                  |L5.568|
000238  2306              MOVS     r3,#6
00023a  2204              MOVS     r2,#4
00023c  210e              MOVS     r1,#0xe
00023e  a0d2              ADR      r0,|L5.1416|
000240  f7fffffe          BL       snmp_trap_send
000244  e028              B        |L5.664|
                  |L5.582|
000246  b300              CBZ      r0,|L5.650|
000248  b9f9              CBNZ     r1,|L5.650|
00024a  78d0              LDRB     r0,[r2,#3]  ; plazma_inv
00024c  f1000001          ADD      r0,r0,#1
000250  70d0              STRB     r0,[r2,#3]
000252  b134              CBZ      r4,|L5.610|
000254  2c01              CMP      r4,#1
000256  d00b              BEQ      |L5.624|
000258  2c02              CMP      r4,#2
00025a  d010              BEQ      |L5.638|
00025c  2c03              CMP      r4,#3
00025e  d015              BEQ      |L5.652|
000260  e01a              B        |L5.664|
                  |L5.610|
000262  2300              MOVS     r3,#0
000264  2201              MOVS     r2,#1
000266  210e              MOVS     r1,#0xe
000268  a0d0              ADR      r0,|L5.1452|
00026a  f7fffffe          BL       snmp_trap_send
00026e  e013              B        |L5.664|
                  |L5.624|
000270  2300              MOVS     r3,#0
000272  2202              MOVS     r2,#2
000274  210e              MOVS     r1,#0xe
000276  a0d2              ADR      r0,|L5.1472|
000278  f7fffffe          BL       snmp_trap_send
00027c  e00c              B        |L5.664|
                  |L5.638|
00027e  2300              MOVS     r3,#0
000280  2203              MOVS     r2,#3
000282  210e              MOVS     r1,#0xe
000284  a0d3              ADR      r0,|L5.1492|
000286  f7fffffe          BL       snmp_trap_send
                  |L5.650|
00028a  e005              B        |L5.664|
                  |L5.652|
00028c  2300              MOVS     r3,#0
00028e  2204              MOVS     r2,#4
000290  210e              MOVS     r1,#0xe
000292  a0d5              ADR      r0,|L5.1512|
000294  f7fffffe          BL       snmp_trap_send
                  |L5.664|
000298  f8150f46          LDRB     r0,[r5,#0x46]!
00029c  7068              STRB     r0,[r5,#1]
00029e  bd70              POP      {r4-r6,pc}
;;;375    #endif
                          ENDP

                  |L5.672|
                          DCD      first_inv_slot
                  |L5.676|
                          DCD      inv
                  |L5.680|
                          DCD      ||area_number.25||+0xb4
                  |L5.684|
0002ac  496e7665          DCB      "Invertor #1 Alarm, overload",0
0002b0  72746f72
0002b4  20233120
0002b8  416c6172
0002bc  6d2c206f
0002c0  7665726c
0002c4  6f616400
                  |L5.712|
0002c8  496e7665          DCB      "Invertor #2 Alarm, overload",0
0002cc  72746f72
0002d0  20233220
0002d4  416c6172
0002d8  6d2c206f
0002dc  7665726c
0002e0  6f616400
                  |L5.740|
0002e4  496e7665          DCB      "Invertor #3 Alarm, overload",0
0002e8  72746f72
0002ec  20233320
0002f0  416c6172
0002f4  6d2c206f
0002f8  7665726c
0002fc  6f616400
                  |L5.768|
000300  496e7665          DCB      "Invertor #4 Alarm, overload",0
000304  72746f72
000308  20233420
00030c  416c6172
000310  6d2c206f
000314  7665726c
000318  6f616400
                  |L5.796|
00031c  496e7665          DCB      "Invertor #1 Alarm, overheat",0
000320  72746f72
000324  20233120
000328  416c6172
00032c  6d2c206f
000330  76657268
000334  65617400
                  |L5.824|
000338  496e7665          DCB      "Invertor #2 Alarm, overheat",0
00033c  72746f72
000340  20233220
000344  416c6172
000348  6d2c206f
00034c  76657268
000350  65617400
                  |L5.852|
000354  496e7665          DCB      "Invertor #3 Alarm, overheat",0
000358  72746f72
00035c  20233320
000360  416c6172
000364  6d2c206f
000368  76657268
00036c  65617400
                  |L5.880|
000370  496e7665          DCB      "Invertor #4 Alarm, overheat",0
000374  72746f72
000378  20233420
00037c  416c6172
000380  6d2c206f
000384  76657268
000388  65617400
                  |L5.908|
00038c  496e7665          DCB      "Invertor #1 Alarm, is warm",0
000390  72746f72
000394  20233120
000398  416c6172
00039c  6d2c2069
0003a0  73207761
0003a4  726d00  
0003a7  00                DCB      0
                  |L5.936|
0003a8  496e7665          DCB      "Invertor #2 Alarm, is warm",0
0003ac  72746f72
0003b0  20233220
0003b4  416c6172
0003b8  6d2c2069
0003bc  73207761
0003c0  726d00  
0003c3  00                DCB      0
                  |L5.964|
0003c4  496e7665          DCB      "Invertor #3 Alarm, is warm",0
0003c8  72746f72
0003cc  20233320
0003d0  416c6172
0003d4  6d2c2069
0003d8  73207761
0003dc  726d00  
0003df  00                DCB      0
                  |L5.992|
0003e0  496e7665          DCB      "Invertor #4 Alarm, is warm",0
0003e4  72746f72
0003e8  20233420
0003ec  416c6172
0003f0  6d2c2069
0003f4  73207761
0003f8  726d00  
0003fb  00                DCB      0
                  |L5.1020|
0003fc  496e7665          DCB      "Invertor #1 Alarm, voltage is up",0
000400  72746f72
000404  20233120
000408  416c6172
00040c  6d2c2076
000410  6f6c7461
000414  67652069
000418  73207570
00041c  00      
00041d  00                DCB      0
00041e  00                DCB      0
00041f  00                DCB      0
                  |L5.1056|
000420  496e7665          DCB      "Invertor #2 Alarm, voltage is up",0
000424  72746f72
000428  20233220
00042c  416c6172
000430  6d2c2076
000434  6f6c7461
000438  67652069
00043c  73207570
000440  00      
000441  00                DCB      0
000442  00                DCB      0
000443  00                DCB      0
                  |L5.1092|
000444  496e7665          DCB      "Invertor #3 Alarm, voltage is up",0
000448  72746f72
00044c  20233320
000450  416c6172
000454  6d2c2076
000458  6f6c7461
00045c  67652069
000460  73207570
000464  00      
000465  00                DCB      0
000466  00                DCB      0
000467  00                DCB      0
                  |L5.1128|
000468  496e7665          DCB      "Invertor #4 Alarm, voltage is up",0
00046c  72746f72
000470  20233420
000474  416c6172
000478  6d2c2076
00047c  6f6c7461
000480  67652069
000484  73207570
000488  00      
000489  00                DCB      0
00048a  00                DCB      0
00048b  00                DCB      0
                  |L5.1164|
00048c  496e7665          DCB      "Invertor #1 Alarm, voltage is down",0
000490  72746f72
000494  20233120
000498  416c6172
00049c  6d2c2076
0004a0  6f6c7461
0004a4  67652069
0004a8  7320646f
0004ac  776e00  
0004af  00                DCB      0
                  |L5.1200|
0004b0  496e7665          DCB      "Invertor #2 Alarm, voltage is down",0
0004b4  72746f72
0004b8  20233220
0004bc  416c6172
0004c0  6d2c2076
0004c4  6f6c7461
0004c8  67652069
0004cc  7320646f
0004d0  776e00  
0004d3  00                DCB      0
                  |L5.1236|
0004d4  496e7665          DCB      "Invertor #3 Alarm, voltage is down",0
0004d8  72746f72
0004dc  20233320
0004e0  416c6172
0004e4  6d2c2076
0004e8  6f6c7461
0004ec  67652069
0004f0  7320646f
0004f4  776e00  
0004f7  00                DCB      0
                  |L5.1272|
0004f8  496e7665          DCB      "Invertor #4 Alarm, voltage is down",0
0004fc  72746f72
000500  20233420
000504  416c6172
000508  6d2c2076
00050c  6f6c7461
000510  67652069
000514  7320646f
000518  776e00  
00051b  00                DCB      0
                  |L5.1308|
00051c  496e7665          DCB      "Invertor #1 Alarm, output is offed",0
000520  72746f72
000524  20233120
000528  416c6172
00052c  6d2c206f
000530  75747075
000534  74206973
000538  206f6666
00053c  656400  
00053f  00                DCB      0
                  |L5.1344|
000540  496e7665          DCB      "Invertor #2 Alarm, output is offed",0
000544  72746f72
000548  20233220
00054c  416c6172
000550  6d2c206f
000554  75747075
000558  74206973
00055c  206f6666
000560  656400  
000563  00                DCB      0
                  |L5.1380|
000564  496e7665          DCB      "Invertor #3 Alarm, output is offed",0
000568  72746f72
00056c  20233320
000570  416c6172
000574  6d2c206f
000578  75747075
00057c  74206973
000580  206f6666
000584  656400  
000587  00                DCB      0
                  |L5.1416|
000588  496e7665          DCB      "Invertor #4 Alarm, output is offed",0
00058c  72746f72
000590  20233420
000594  416c6172
000598  6d2c206f
00059c  75747075
0005a0  74206973
0005a4  206f6666
0005a8  656400  
0005ab  00                DCB      0
                  |L5.1452|
0005ac  496e7665          DCB      "Invertor #1 is norm",0
0005b0  72746f72
0005b4  20233120
0005b8  6973206e
0005bc  6f726d00
                  |L5.1472|
0005c0  496e7665          DCB      "Invertor #2 is norm",0
0005c4  72746f72
0005c8  20233220
0005cc  6973206e
0005d0  6f726d00
                  |L5.1492|
0005d4  496e7665          DCB      "Invertor #3 is norm",0
0005d8  72746f72
0005dc  20233320
0005e0  6973206e
0005e4  6f726d00
                  |L5.1512|
0005e8  496e7665          DCB      "Invertor #4 is norm",0
0005ec  72746f72
0005f0  20233420
0005f4  6973206e
0005f8  6f726d00

                          AREA ||area_number.6||, CODE, READONLY, ALIGN=2

                          EXPORTAS ||area_number.6||, ||.text||
                  klimat_hndl PROC
;;;295    //-----------------------------------------------
;;;296    void ke_start(char in)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;297    {          
000004  4d66              LDR      r5,|L6.416|
;;;298    ke_start_stat=(enum_ke_start_stat)0;		 
000006  4867              LDR      r0,|L6.420|
000008  4c67              LDR      r4,|L6.424|
00000a  f9b51000          LDRSH    r1,[r5,#0]  ; t_box
;;;299    /*
;;;300    if(spc_stat==spcVZ)ke_start_stat=kssNOT_VZ;
;;;301    #ifndef UKU_220_IPS_TERMOKOMPENSAT
;;;302    else if(BAT_IS_ON[in]!=bisON)ke_start_stat=kssNOT_BAT;
;;;303    #endif
;;;304    else if(bat[in]._av&(1<<0))ke_start_stat=kssNOT_BAT_AV;
;;;305    else if(bat[in]._temper_stat&(1<<1))ke_start_stat=kssNOT_BAT_AV_T;
;;;306    else if(bat[in]._av&(1<<1))ke_start_stat=kssNOT_BAT_AV_ASS;
;;;307    else if(bat[in]._Ib>IKB)ke_start_stat=kssNOT_BAT_ZAR;
;;;308    else if(bat[in]._Ib<-IKB)ke_start_stat=kssNOT_BAT_RAZR;
;;;309    else if((spc_stat==spcKE)&&(spc_bat==0))ke_start_stat=kssNOT_KE1;
;;;310    else if((spc_stat==spcKE)&&(spc_bat==1))ke_start_stat=kssNOT_KE2;
;;;311    else */
;;;312    	{
;;;313    
;;;314    	ke_start_stat=kssYES;
00000e  f9b02000          LDRSH    r2,[r0,#0]  ; TBOXMAX
;;;315    
;;;316    	spc_stat=spcKE;
000012  f9b40000          LDRSH    r0,[r4,#0]
000016  4291              CMP      r1,r2
;;;317    	__ee_spc_stat=spcKE;
000018  dd03              BLE      |L6.34|
00001a  f1000001          ADD      r0,r0,#1
;;;318    	lc640_write_int(EE_SPC_STAT,__ee_spc_stat);
00001e  8020              STRH     r0,[r4,#0]
000020  e003              B        |L6.42|
                  |L6.34|
000022  da02              BGE      |L6.42|
000024  f1a00001          SUB      r0,r0,#1
;;;319    	
;;;320    	spc_bat=0;
;;;321    	__ee_spc_bat=0;
000028  8020              STRH     r0,[r4,#0]
                  |L6.42|
00002a  2206              MOVS     r2,#6
;;;322    	lc640_write_int(EE_SPC_BAT,__ee_spc_bat);
00002c  2100              MOVS     r1,#0
00002e  485e              LDR      r0,|L6.424|
000030  f7fffffe          BL       gran
000034  f9b40000          LDRSH    r0,[r4,#0]  ; av_tbox_cnt
;;;323    
;;;324    	bat[0]._zar_cnt_ke=0;
000038  495c              LDR      r1,|L6.428|
00003a  2601              MOVS     r6,#1
00003c  2805              CMP      r0,#5
;;;325    	lc640_write_int(ADR_EE_BAT_ZAR_CNT_KE[0],0);
00003e  dd00              BLE      |L6.66|
000040  700e              STRB     r6,[r1,#0]
                  |L6.66|
000042  2400              MOVS     r4,#0
000044  2801              CMP      r0,#1
000046  da00              BGE      |L6.74|
000048  700c              STRB     r4,[r1,#0]
                  |L6.74|
;;;326    
;;;327    	bat[0]._time_min_cnt_ke=0;
00004a  4959              LDR      r1,|L6.432|
00004c  f9b50000          LDRSH    r0,[r5,#0]  ; t_box
;;;328    	lc640_write_int(EE_ZVU_BAT_MIN_CNT_KE,0);
000050  4a58              LDR      r2,|L6.436|
000052  f9b11000          LDRSH    r1,[r1,#0]  ; TBOXREG
000056  4f58              LDR      r7,|L6.440|
;;;329    
;;;330    	
;;;331    	spc_phase=0;
000058  1e8b              SUBS     r3,r1,#2
;;;332    	__ee_spc_phase=0;
00005a  4298              CMP      r0,r3
00005c  da0f              BGE      |L6.126|
;;;333    	lc640_write_int(EE_SPC_PHASE,__ee_spc_phase);
00005e  f9921000          LDRSB    r1,[r2,#0]  ; t_box_cnt
000062  291e              CMP      r1,#0x1e
000064  da1e              BGE      |L6.164|
000066  f1010101          ADD      r1,r1,#1
;;;334    
;;;335    	//ke_mem_hndl(in,lc640_read_int(ADR_EE_BAT_ZAR_CNT_KE[spc_bat]));
;;;336    
;;;337    		{					
;;;338    		signed short temp_temp;
;;;339    		signed char temp;
;;;340    		temp_temp=bat[in]._u_old[((bat_u_old_cnt+1)&0x07)]; 
00006a  b249              SXTB     r1,r1
00006c  7011              STRB     r1,[r2,#0]
00006e  291e              CMP      r1,#0x1e
000070  db18              BLT      |L6.164|
000072  8839              LDRH     r1,[r7,#0]  ; main_vent_pos
000074  f1a10101          SUB      r1,r1,#1
000078  8039              STRH     r1,[r7,#0]
00007a  7014              STRB     r4,[r2,#0]
00007c  e012              B        |L6.164|
                  |L6.126|
00007e  4288              CMP      r0,r1
000080  dd0f              BLE      |L6.162|
000082  f9921000          LDRSB    r1,[r2,#0]  ; t_box_cnt
000086  291e              CMP      r1,#0x1e
;;;341    		    
;;;342    		temp=LPC_RTC->YEAR;
000088  da0c              BGE      |L6.164|
00008a  f1010101          ADD      r1,r1,#1
;;;343    		gran_char(&temp,1,99);
00008e  b249              SXTB     r1,r1
000090  7011              STRB     r1,[r2,#0]
000092  291e              CMP      r1,#0x1e
000094  db06              BLT      |L6.164|
000096  8839              LDRH     r1,[r7,#0]  ; main_vent_pos
000098  f1010101          ADD      r1,r1,#1
;;;344    		*((char*)(&(ke_date[0])))=temp;
00009c  8039              STRH     r1,[r7,#0]
00009e  7014              STRB     r4,[r2,#0]
0000a0  e000              B        |L6.164|
                  |L6.162|
0000a2  7014              STRB     r4,[r2,#0]
                  |L6.164|
0000a4  4945              LDR      r1,|L6.444|
;;;345    			
;;;346    		temp=LPC_RTC->MONTH;
0000a6  f9b11000          LDRSH    r1,[r1,#0]  ; TBOXVENTMAX
;;;347    		gran_char(&temp,1,12);
0000aa  4288              CMP      r0,r1
0000ac  dd05              BLE      |L6.186|
0000ae  2214              MOVS     r2,#0x14
0000b0  2100              MOVS     r1,#0
0000b2  4841              LDR      r0,|L6.440|
;;;348    		*(((char*)(&(ke_date[0])))+1)=temp;
0000b4  f7fffffe          BL       gran
0000b8  e007              B        |L6.202|
                  |L6.186|
;;;349    		
;;;350    		temp=LPC_RTC->DOM;
0000ba  4841              LDR      r0,|L6.448|
0000bc  2100              MOVS     r1,#0
;;;351    		gran_char(&temp,1,31);
0000be  8800              LDRH     r0,[r0,#0]  ; pos_vent
0000c0  3009              ADDS     r0,r0,#9
0000c2  b202              SXTH     r2,r0
0000c4  483c              LDR      r0,|L6.440|
0000c6  f7fffffe          BL       gran
                  |L6.202|
;;;352    		*(((char*)(&(ke_date[0])))+2)=temp;			
0000ca  20f0              MOVS     r0,#0xf0
0000cc  f7fffffe          BL       mess_find_unvol
;;;353    				
;;;354    		*(((char*)(&(ke_date[0])))+3)=*((char*)&temp_temp);
0000d0  b128              CBZ      r0,|L6.222|
0000d2  483c              LDR      r0,|L6.452|
;;;355    		lc640_write_long(EE_SPC_KE_DATE0,ke_date[0]);
0000d4  6801              LDR      r1,[r0,#0]  ; mess_data
0000d6  29f1              CMP      r1,#0xf1
0000d8  d101              BNE      |L6.222|
0000da  6840              LDR      r0,[r0,#4]  ; mess_data
0000dc  8038              STRH     r0,[r7,#0]
                  |L6.222|
;;;356    
;;;357    		temp=LPC_RTC->HOUR;
0000de  f9b71000          LDRSH    r1,[r7,#0]  ; main_vent_pos
;;;358    		gran_char(&temp,0,23);
0000e2  4839              LDR      r0,|L6.456|
0000e4  2901              CMP      r1,#1
0000e6  dc01              BGT      |L6.236|
0000e8  7006              STRB     r6,[r0,#0]
0000ea  e000              B        |L6.238|
                  |L6.236|
;;;359    		*((char*)(&(ke_date[1])))=temp;
0000ec  7004              STRB     r4,[r0,#0]
                  |L6.238|
0000ee  4837              LDR      r0,|L6.460|
0000f0  f8df80dc          LDR      r8,|L6.464|
;;;360                   
;;;361    		temp=LPC_RTC->MIN;
0000f4  f9b00000          LDRSH    r0,[r0,#0]  ; TBATDISABLE
;;;362    		gran_char(&temp,0,59);
0000f8  f1a00132          SUB      r1,r0,#0x32
0000fc  2928              CMP      r1,#0x28
0000fe  d821              BHI      |L6.324|
;;;363    		*(((char*)(&(ke_date[1])))+1)=temp;
000100  f9b51000          LDRSH    r1,[r5,#0]  ; t_box
000104  4f33              LDR      r7,|L6.468|
;;;364    	          
;;;365    		temp=LPC_RTC->SEC;
000106  4281              CMP      r1,r0
000108  dd03              BLE      |L6.274|
;;;366    		gran_char(&temp,0,59);
00010a  8838              LDRH     r0,[r7,#0]  ; tbatdisable_cnt
00010c  f1000001          ADD      r0,r0,#1
000110  8038              STRH     r0,[r7,#0]
                  |L6.274|
000112  4831              LDR      r0,|L6.472|
;;;367    		*(((char*)(&(ke_date[1])))+2)=temp;
000114  f9b00000          LDRSH    r0,[r0,#0]  ; TBATENABLE
000118  4281              CMP      r1,r0
;;;368    			
;;;369    		*(((char*)(&(ke_date[1])))+3)=*(((char*)&temp_temp)+1);
00011a  da03              BGE      |L6.292|
00011c  8838              LDRH     r0,[r7,#0]  ; tbatdisable_cnt
00011e  f1a00001          SUB      r0,r0,#1
;;;370    		lc640_write_long(EE_SPC_KE_DATE1,ke_date[1]);
000122  8038              STRH     r0,[r7,#0]
                  |L6.292|
000124  2206              MOVS     r2,#6
000126  2100              MOVS     r1,#0
000128  482a              LDR      r0,|L6.468|
;;;371    		}
;;;372    	bat_hndl_zvu_ke_init=1;
00012a  f7fffffe          BL       gran
;;;373    	}
;;;374    }
00012e  f9b70000          LDRSH    r0,[r7,#0]  ; tbatdisable_cnt
000132  2805              CMP      r0,#5
000134  dd01              BLE      |L6.314|
000136  f8886000          STRB     r6,[r8,#0]
                  |L6.314|
00013a  2801              CMP      r0,#1
00013c  da04              BGE      |L6.328|
00013e  f8884000          STRB     r4,[r8,#0]
000142  e001              B        |L6.328|
                  |L6.324|
000144  f8884000          STRB     r4,[r8,#0]
                  |L6.328|
000148  4824              LDR      r0,|L6.476|
00014a  4f25              LDR      r7,|L6.480|
00014c  f9b00000          LDRSH    r0,[r0,#0]  ; TLOADDISABLE
000150  f1a00132          SUB      r1,r0,#0x32
000154  291e              CMP      r1,#0x1e
000156  d820              BHI      |L6.410|
000158  f9b51000          LDRSH    r1,[r5,#0]  ; t_box
00015c  4d21              LDR      r5,|L6.484|
00015e  4281              CMP      r1,r0
000160  dd03              BLE      |L6.362|
000162  8828              LDRH     r0,[r5,#0]  ; tloaddisable_cnt
000164  f1000001          ADD      r0,r0,#1
000168  8028              STRH     r0,[r5,#0]
                  |L6.362|
00016a  481f              LDR      r0,|L6.488|
00016c  f9b00000          LDRSH    r0,[r0,#0]  ; TLOADENABLE
000170  4281              CMP      r1,r0
000172  da03              BGE      |L6.380|
000174  8828              LDRH     r0,[r5,#0]  ; tloaddisable_cnt
000176  f1a00001          SUB      r0,r0,#1
00017a  8028              STRH     r0,[r5,#0]
                  |L6.380|
00017c  2206              MOVS     r2,#6
00017e  2100              MOVS     r1,#0
000180  4818              LDR      r0,|L6.484|
000182  f7fffffe          BL       gran
000186  f9b50000          LDRSH    r0,[r5,#0]  ; tloaddisable_cnt
00018a  2805              CMP      r0,#5
00018c  dd00              BLE      |L6.400|
00018e  703e              STRB     r6,[r7,#0]
                  |L6.400|
000190  2801              CMP      r0,#1
000192  da00              BGE      |L6.406|
000194  703c              STRB     r4,[r7,#0]
                  |L6.406|
000196  e8bd81f0          POP      {r4-r8,pc}
                  |L6.410|
00019a  703c              STRB     r4,[r7,#0]
00019c  e7fb              B        |L6.406|
;;;375    #endif
                          ENDP

00019e  0000              DCW      0x0000
                  |L6.416|
                          DCD      t_box
                  |L6.420|
                          DCD      TBOXMAX
                  |L6.424|
                          DCD      av_tbox_cnt
                  |L6.428|
                          DCD      av_tbox_stat
                  |L6.432|
                          DCD      TBOXREG
                  |L6.436|
                          DCD      t_box_cnt
                  |L6.440|
                          DCD      main_vent_pos
                  |L6.444|
                          DCD      TBOXVENTMAX
                  |L6.448|
                          DCD      pos_vent
                  |L6.452|
                          DCD      mess_data
                  |L6.456|
                          DCD      mixer_vent_stat
                  |L6.460|
                          DCD      TBATDISABLE
                  |L6.464|
                          DCD      tbatdisable_stat
                  |L6.468|
                          DCD      tbatdisable_cnt
                  |L6.472|
                          DCD      TBATENABLE
                  |L6.476|
                          DCD      TLOADDISABLE
                  |L6.480|
                          DCD      tloaddisable_stat
                  |L6.484|
                          DCD      tloaddisable_cnt
                  |L6.488|
                          DCD      TLOADENABLE

                          AREA ||area_number.7||, CODE, READONLY, ALIGN=2

                          EXPORTAS ||area_number.7||, ||.text||
                  u_avt_set_hndl1 PROC
;;;295    //-----------------------------------------------
;;;296    void ke_start(char in)
000000  e92d5fff          PUSH     {r0-r12,lr}
;;;297    {          
000004  484e              LDR      r0,|L7.320|
;;;298    ke_start_stat=(enum_ke_start_stat)0;		 
000006  2165              MOVS     r1,#0x65
000008  2564              MOVS     r5,#0x64
00000a  f9b00000          LDRSH    r0,[r0,#0]
;;;299    /*
;;;300    if(spc_stat==spcVZ)ke_start_stat=kssNOT_VZ;
;;;301    #ifndef UKU_220_IPS_TERMOKOMPENSAT
;;;302    else if(BAT_IS_ON[in]!=bisON)ke_start_stat=kssNOT_BAT;
;;;303    #endif
;;;304    else if(bat[in]._av&(1<<0))ke_start_stat=kssNOT_BAT_AV;
;;;305    else if(bat[in]._temper_stat&(1<<1))ke_start_stat=kssNOT_BAT_AV_T;
;;;306    else if(bat[in]._av&(1<<1))ke_start_stat=kssNOT_BAT_AV_ASS;
;;;307    else if(bat[in]._Ib>IKB)ke_start_stat=kssNOT_BAT_ZAR;
;;;308    else if(bat[in]._Ib<-IKB)ke_start_stat=kssNOT_BAT_RAZR;
;;;309    else if((spc_stat==spcKE)&&(spc_bat==0))ke_start_stat=kssNOT_KE1;
;;;310    else if((spc_stat==spcKE)&&(spc_bat==1))ke_start_stat=kssNOT_KE2;
;;;311    else */
;;;312    	{
;;;313    
;;;314    	ke_start_stat=kssYES;
00000e  4c4b              LDR      r4,|L7.316|
000010  4341              MULS     r1,r0,r1
;;;315    
;;;316    	spc_stat=spcKE;
000012  eb001040          ADD      r0,r0,r0,LSL #5
000016  fbb1f1f5          UDIV     r1,r1,r5
;;;317    	__ee_spc_stat=spcKE;
00001a  eb000040          ADD      r0,r0,r0,LSL #1
;;;318    	lc640_write_int(EE_SPC_STAT,__ee_spc_stat);
00001e  fbb0f0f5          UDIV     r0,r0,r5
000022  f8dfb120          LDR      r11,|L7.324|
;;;319    	
;;;320    	spc_bat=0;
000026  b20a              SXTH     r2,r1
;;;321    	__ee_spc_bat=0;
000028  7823              LDRB     r3,[r4,#0]  ; uavt_set_stat
00002a  b201              SXTH     r1,r0
;;;322    	lc640_write_int(EE_SPC_BAT,__ee_spc_bat);
00002c  f89b0000          LDRB     r0,[r11,#0]
000030  4e45              LDR      r6,|L7.328|
000032  4f46              LDR      r7,|L7.332|
000034  f8df8118          LDR      r8,|L7.336|
;;;323    
;;;324    	bat[0]._zar_cnt_ke=0;
000038  f8df9118          LDR      r9,|L7.340|
00003c  f8dfa118          LDR      r10,|L7.344|
;;;325    	lc640_write_int(ADR_EE_BAT_ZAR_CNT_KE[0],0);
000040  2500              MOVS     r5,#0
000042  2b01              CMP      r3,#1
000044  d002              BEQ      |L7.76|
000046  2b02              CMP      r3,#2
000048  d031              BEQ      |L7.174|
;;;326    
;;;327    	bat[0]._time_min_cnt_ke=0;
00004a  e071              B        |L7.304|
                  |L7.76|
00004c  803a              STRH     r2,[r7,#0]
;;;328    	lc640_write_int(EE_ZVU_BAT_MIN_CNT_KE,0);
00004e  f8a81000          STRH     r1,[r8,#0]
000052  2801              CMP      r0,#1
000054  d000              BEQ      |L7.88|
000056  7035              STRB     r5,[r6,#0]
                  |L7.88|
;;;329    
;;;330    	
;;;331    	spc_phase=0;
000058  230a              MOVS     r3,#0xa
;;;332    	__ee_spc_phase=0;
00005a  2200              MOVS     r2,#0
00005c  21e6              MOVS     r1,#0xe6
;;;333    	lc640_write_int(EE_SPC_PHASE,__ee_spc_phase);
00005e  20e1              MOVS     r0,#0xe1
000060  f7fffffe          BL       mess_send
000064  f04f0201          MOV      r2,#1
;;;334    
;;;335    	//ke_mem_hndl(in,lc640_read_int(ADR_EE_BAT_ZAR_CNT_KE[spc_bat]));
;;;336    
;;;337    		{					
;;;338    		signed short temp_temp;
;;;339    		signed char temp;
;;;340    		temp_temp=bat[in]._u_old[((bat_u_old_cnt+1)&0x07)]; 
000068  f04f0000          MOV      r0,#0
00006c  f9b73000          LDRSH    r3,[r7,#0]
000070  f9b85000          LDRSH    r5,[r8,#0]
000074  f9ba6000          LDRSH    r6,[r10,#0]
000078  e00d              B        |L7.150|
                  |L7.122|
00007a  ebc001c0          RSB      r1,r0,r0,LSL #3
00007e  eb011100          ADD      r1,r1,r0,LSL #4
000082  eb090181          ADD      r1,r9,r1,LSL #2
000086  69c9              LDR      r1,[r1,#0x1c]
;;;341    		    
;;;342    		temp=LPC_RTC->YEAR;
000088  4299              CMP      r1,r3
00008a  da09              BGE      |L7.160|
00008c  42a9              CMP      r1,r5
;;;343    		gran_char(&temp,1,99);
00008e  dd07              BLE      |L7.160|
000090  f1000001          ADD      r0,r0,#1
000094  b2c0              UXTB     r0,r0
                  |L7.150|
000096  42b0              CMP      r0,r6
000098  dbef              BLT      |L7.122|
                  |L7.154|
00009a  2a01              CMP      r2,#1
;;;344    		*((char*)(&(ke_date[0])))=temp;
00009c  d003              BEQ      |L7.166|
00009e  e047              B        |L7.304|
                  |L7.160|
0000a0  f04f0200          MOV      r2,#0
0000a4  e7f9              B        |L7.154|
                  |L7.166|
;;;345    			
;;;346    		temp=LPC_RTC->MONTH;
0000a6  f04f0002          MOV      r0,#2
;;;347    		gran_char(&temp,1,12);
0000aa  7020              STRB     r0,[r4,#0]
0000ac  e040              B        |L7.304|
                  |L7.174|
0000ae  803a              STRH     r2,[r7,#0]
0000b0  f8a81000          STRH     r1,[r8,#0]
;;;348    		*(((char*)(&(ke_date[0])))+1)=temp;
0000b4  2802              CMP      r0,#2
0000b6  d000              BEQ      |L7.186|
0000b8  7035              STRB     r5,[r6,#0]
                  |L7.186|
;;;349    		
;;;350    		temp=LPC_RTC->DOM;
0000ba  230a              MOVS     r3,#0xa
0000bc  2200              MOVS     r2,#0
;;;351    		gran_char(&temp,1,31);
0000be  21e6              MOVS     r1,#0xe6
0000c0  20e1              MOVS     r0,#0xe1
0000c2  f7fffffe          BL       mess_send
0000c6  f04f0201          MOV      r2,#1
;;;352    		*(((char*)(&(ke_date[0])))+2)=temp;			
0000ca  f04f0000          MOV      r0,#0
;;;353    				
;;;354    		*(((char*)(&(ke_date[0])))+3)=*((char*)&temp_temp);
0000ce  f9b73000          LDRSH    r3,[r7,#0]
0000d2  f9b87000          LDRSH    r7,[r8,#0]
;;;355    		lc640_write_long(EE_SPC_KE_DATE0,ke_date[0]);
0000d6  f9bac000          LDRSH    r12,[r10,#0]
0000da  e00d              B        |L7.248|
                  |L7.220|
0000dc  ebc001c0          RSB      r1,r0,r0,LSL #3
;;;356    
;;;357    		temp=LPC_RTC->HOUR;
0000e0  eb011100          ADD      r1,r1,r0,LSL #4
;;;358    		gran_char(&temp,0,23);
0000e4  eb090181          ADD      r1,r9,r1,LSL #2
0000e8  69c9              LDR      r1,[r1,#0x1c]
0000ea  4299              CMP      r1,r3
;;;359    		*((char*)(&(ke_date[1])))=temp;
0000ec  da09              BGE      |L7.258|
0000ee  42b9              CMP      r1,r7
0000f0  dd07              BLE      |L7.258|
;;;360                   
;;;361    		temp=LPC_RTC->MIN;
0000f2  f1000001          ADD      r0,r0,#1
;;;362    		gran_char(&temp,0,59);
0000f6  b2c0              UXTB     r0,r0
                  |L7.248|
0000f8  4560              CMP      r0,r12
0000fa  dbef              BLT      |L7.220|
                  |L7.252|
0000fc  2a01              CMP      r2,#1
0000fe  d003              BEQ      |L7.264|
;;;363    		*(((char*)(&(ke_date[1])))+1)=temp;
000100  e016              B        |L7.304|
                  |L7.258|
000102  f04f0200          MOV      r2,#0
;;;364    	          
;;;365    		temp=LPC_RTC->SEC;
000106  e7f9              B        |L7.252|
                  |L7.264|
000108  20ee              MOVS     r0,#0xee
;;;366    		gran_char(&temp,0,59);
00010a  e9cd0500          STRD     r0,r5,[sp,#0]
00010e  9502              STR      r5,[sp,#8]
000110  9503              STR      r5,[sp,#0xc]
000112  7831              LDRB     r1,[r6,#0]  ; uavt_bps_pntr
;;;367    		*(((char*)(&(ke_date[1])))+2)=temp;
000114  4603              MOV      r3,r0
000116  2216              MOVS     r2,#0x16
000118  4608              MOV      r0,r1
;;;368    			
;;;369    		*(((char*)(&(ke_date[1])))+3)=*(((char*)&temp_temp)+1);
00011a  f7fffffe          BL       mcp2515_transmit
00011e  7830              LDRB     r0,[r6,#0]  ; uavt_bps_pntr
;;;370    		lc640_write_long(EE_SPC_KE_DATE1,ke_date[1]);
000120  1c40              ADDS     r0,r0,#1
000122  b2c0              UXTB     r0,r0
000124  7030              STRB     r0,[r6,#0]
000126  f9ba1000          LDRSH    r1,[r10,#0]  ; NUMIST
;;;371    		}
;;;372    	bat_hndl_zvu_ke_init=1;
00012a  4288              CMP      r0,r1
;;;373    	}
;;;374    }
00012c  db00              BLT      |L7.304|
00012e  7025              STRB     r5,[r4,#0]
                  |L7.304|
000130  7820              LDRB     r0,[r4,#0]  ; uavt_set_stat
000132  f88b0000          STRB     r0,[r11,#0]
000136  e8bd9fff          POP      {r0-r12,pc}
;;;375    #endif
                          ENDP

00013a  0000              DCW      0x0000
                  |L7.316|
                          DCD      uavt_set_stat
                  |L7.320|
                          DCD      U_AVT
                  |L7.324|
                          DCD      uavt_set_stat_old
                  |L7.328|
                          DCD      uavt_bps_pntr
                  |L7.332|
                          DCD      u_max_temp
                  |L7.336|
                          DCD      u_min_temp
                  |L7.340|
                          DCD      bps
                  |L7.344|
                          DCD      NUMIST

                          AREA ||area_number.8||, CODE, READONLY, ALIGN=2

                          EXPORTAS ||area_number.8||, ||.text||
                  averageChargeStartStop PROC
;;;295    //-----------------------------------------------
;;;296    void ke_start(char in)
000000  4908              LDR      r1,|L8.36|
;;;297    {          
000002  f44f70b4          MOV      r0,#0x168
;;;298    ke_start_stat=(enum_ke_start_stat)0;		 
000006  780a              LDRB     r2,[r1,#0]  ; hv_vz_stat
000008  b132              CBZ      r2,|L8.24|
00000a  f04f0200          MOV      r2,#0
;;;299    /*
;;;300    if(spc_stat==spcVZ)ke_start_stat=kssNOT_VZ;
;;;301    #ifndef UKU_220_IPS_TERMOKOMPENSAT
;;;302    else if(BAT_IS_ON[in]!=bisON)ke_start_stat=kssNOT_BAT;
;;;303    #endif
;;;304    else if(bat[in]._av&(1<<0))ke_start_stat=kssNOT_BAT_AV;
;;;305    else if(bat[in]._temper_stat&(1<<1))ke_start_stat=kssNOT_BAT_AV_T;
;;;306    else if(bat[in]._av&(1<<1))ke_start_stat=kssNOT_BAT_AV_ASS;
;;;307    else if(bat[in]._Ib>IKB)ke_start_stat=kssNOT_BAT_ZAR;
;;;308    else if(bat[in]._Ib<-IKB)ke_start_stat=kssNOT_BAT_RAZR;
;;;309    else if((spc_stat==spcKE)&&(spc_bat==0))ke_start_stat=kssNOT_KE1;
;;;310    else if((spc_stat==spcKE)&&(spc_bat==1))ke_start_stat=kssNOT_KE2;
;;;311    else */
;;;312    	{
;;;313    
;;;314    	ke_start_stat=kssYES;
00000e  700a              STRB     r2,[r1,#0]
000010  f04f0100          MOV      r1,#0
;;;315    
;;;316    	spc_stat=spcKE;
000014  f7ffbffe          B.W      lc640_write
                  |L8.24|
;;;317    	__ee_spc_stat=spcKE;
000018  f04f0201          MOV      r2,#1
;;;318    	lc640_write_int(EE_SPC_STAT,__ee_spc_stat);
00001c  700a              STRB     r2,[r1,#0]
00001e  4611              MOV      r1,r2
000020  f7ffbffe          B.W      lc640_write
;;;319    	
;;;320    	spc_bat=0;
;;;321    	__ee_spc_bat=0;
;;;322    	lc640_write_int(EE_SPC_BAT,__ee_spc_bat);
;;;323    
;;;324    	bat[0]._zar_cnt_ke=0;
;;;325    	lc640_write_int(ADR_EE_BAT_ZAR_CNT_KE[0],0);
;;;326    
;;;327    	bat[0]._time_min_cnt_ke=0;
;;;328    	lc640_write_int(EE_ZVU_BAT_MIN_CNT_KE,0);
;;;329    
;;;330    	
;;;331    	spc_phase=0;
;;;332    	__ee_spc_phase=0;
;;;333    	lc640_write_int(EE_SPC_PHASE,__ee_spc_phase);
;;;334    
;;;335    	//ke_mem_hndl(in,lc640_read_int(ADR_EE_BAT_ZAR_CNT_KE[spc_bat]));
;;;336    
;;;337    		{					
;;;338    		signed short temp_temp;
;;;339    		signed char temp;
;;;340    		temp_temp=bat[in]._u_old[((bat_u_old_cnt+1)&0x07)]; 
;;;341    		    
;;;342    		temp=LPC_RTC->YEAR;
;;;343    		gran_char(&temp,1,99);
;;;344    		*((char*)(&(ke_date[0])))=temp;
;;;345    			
;;;346    		temp=LPC_RTC->MONTH;
;;;347    		gran_char(&temp,1,12);
;;;348    		*(((char*)(&(ke_date[0])))+1)=temp;
;;;349    		
;;;350    		temp=LPC_RTC->DOM;
;;;351    		gran_char(&temp,1,31);
;;;352    		*(((char*)(&(ke_date[0])))+2)=temp;			
;;;353    				
;;;354    		*(((char*)(&(ke_date[0])))+3)=*((char*)&temp_temp);
;;;355    		lc640_write_long(EE_SPC_KE_DATE0,ke_date[0]);
;;;356    
;;;357    		temp=LPC_RTC->HOUR;
;;;358    		gran_char(&temp,0,23);
;;;359    		*((char*)(&(ke_date[1])))=temp;
;;;360                   
;;;361    		temp=LPC_RTC->MIN;
;;;362    		gran_char(&temp,0,59);
;;;363    		*(((char*)(&(ke_date[1])))+1)=temp;
;;;364    	          
;;;365    		temp=LPC_RTC->SEC;
;;;366    		gran_char(&temp,0,59);
;;;367    		*(((char*)(&(ke_date[1])))+2)=temp;
;;;368    			
;;;369    		*(((char*)(&(ke_date[1])))+3)=*(((char*)&temp_temp)+1);
;;;370    		lc640_write_long(EE_SPC_KE_DATE1,ke_date[1]);
;;;371    		}
;;;372    	bat_hndl_zvu_ke_init=1;
;;;373    	}
;;;374    }
;;;375    #endif
                          ENDP

                  |L8.36|
                          DCD      hv_vz_stat

                          AREA ||.bss||, DATA, NOINIT, ALIGN=2

                  i_bat_buff
                          %        12
                  adc_buff
                          %        1024
                  adc_buff_
                          %        32
                  main_power_buffer
                          %        32
                  I_from_t_table
                          %        14
                  U_end_from_i_table
                          %        14
                  bat_hndl_plazma
                          %        20

                          AREA ||area_number.11||, DATA, NOINIT, ALIGN=1

                          EXPORTAS ||area_number.11||, ||.bss||
                  adc_buff_max
                          %        24

                          AREA ||area_number.12||, DATA, NOINIT, ALIGN=1

                          EXPORTAS ||area_number.12||, ||.bss||
                  net_buff
                          %        64

                          AREA ||.constdata||, DATA, READONLY, ALIGN=0

                  sk_buff_KONTUR
000000  0d0b0f0e          DCB      0x0d,0x0b,0x0f,0x0e

                          AREA ||area_number.15||, DATA, READONLY, ALIGN=0

                          EXPORTAS ||area_number.15||, ||.constdata||
                  sk_buff_RSTKM
000000  0d0b0f0e          DCB      0x0d,0x0b,0x0f,0x0e

                          AREA ||area_number.16||, DATA, READONLY, ALIGN=0

                          EXPORTAS ||area_number.16||, ||.constdata||
                  sk_buff_GLONASS
000000  0b0d0f0e          DCB      0x0b,0x0d,0x0f,0x0e

                          AREA ||area_number.17||, DATA, READONLY, ALIGN=0

                          EXPORTAS ||area_number.17||, ||.constdata||
                  sk_buff_3U
000000  0b0d0f0e          DCB      0x0b,0x0d,0x0f,0x0e

                          AREA ||area_number.18||, DATA, READONLY, ALIGN=0

                          EXPORTAS ||area_number.18||, ||.constdata||
                  sk_buff_6U
000000  0b0d0f0e          DCB      0x0b,0x0d,0x0f,0x0e

                          AREA ||area_number.19||, DATA, READONLY, ALIGN=2

                          EXPORTAS ||area_number.19||, ||.constdata||
                  sk_buff_220
000000  0b0d0f0e          DCB      0x0b,0x0d,0x0f,0x0e
                          DCD      0x00000258
                          DCD      0x00000708
                          DCD      0x00000e10
                          DCD      0x00002a30
                          DCD      0x00004650
                          DCD      0x00008ca0
                          DCD      0x00011940
                          DCD      0x00000258
                          DCD      0x00000708
                          DCD      0x00000e10
                          DCD      0x00002a30
                          DCD      0x00004650
                          DCD      0x00008ca0
                          DCD      0x00011940

                          AREA ||area_number.20||, DATA, READONLY, ALIGN=0

                          EXPORTAS ||area_number.20||, ||.constdata||
                  sk_buff_TELECORE2015
000000  0b0d0f0e          DCB      0x0b,0x0d,0x0f,0x0e

                          AREA ||.data||, DATA, ALIGN=1

                  adc_buff_min
000000  13881388          DCW      0x1388,0x1388
000004  13881388          DCW      0x1388,0x1388
000008  13881388          DCW      0x1388,0x1388
00000c  13881388          DCW      0x1388,0x1388
000010  13881388          DCW      0x1388,0x1388
                          DCDU     0x00000000

                          AREA ||area_number.22||, DATA, ALIGN=1

                          EXPORTAS ||area_number.22||, ||.data||
                  unet_buff_min
000000  1388              DCW      0x1388

                          AREA ||area_number.23||, DATA, ALIGN=0

                          EXPORTAS ||area_number.23||, ||.data||
                  adc_stat
000000  01                DCB      0x01

                          AREA ||area_number.24||, DATA, ALIGN=1

                          EXPORTAS ||area_number.24||, ||.data||
                  bat_ver_cnt
000000  0096              DCW      0x0096

                          AREA ||area_number.25||, DATA, ALIGN=2

                          EXPORTAS ||area_number.25||, ||.data||
                  vent_stat
000000  00                DCB      0x00
                  bat_hndl_zvu_init
000001  00                DCB      0x00
                  bat_hndl_zvu_ke_init
000002  00                DCB      0x00
                  bat_hndl_i_vector
000003  00                DCB      0x00
                  bat_hndl_i_vector_old
000004  00                DCB      0x00
                  ke_drv_cnt_10s
000005  00                DCB      0x00
                  i_bat_buff_cnt
000006  00                DCB      0x00
                  cntrlStatIsDownCnt
000007  00                DCB      0x00
                  adc_self_ch_cnt
000008  00                DCB      0x00
                  adc_ch_net
000009  00                DCB      0x00
                  adc_ch
00000a  00                DCB      0x00
                  adc_ch_cnt
00000b  00                DCB      0x00
                  adc_window_flag
00000c  00                DCB      0x00
                  ch_cnt0
00000d  00                DCB      0x00
                  b1Hz_ch
00000e  00                DCB      0x00
                  i
00000f  00                DCB      0x00
                  iiii
000010  00                DCB      0x00
                  bAVG
000011  00                DCB      0x00
                  avg_num
000012  00                DCB      0x00
                  kb_full_ver
000013  00                DCB      0x00
                  kb_start_ips
000014  00                DCB      0x00
                  num_of_wrks_bps
000015  00                DCB      0x00
                  num_necc_up
000016  00                DCB      0x00
                  num_necc_down
000017  00                DCB      0x00
                  sh_cnt0
000018  00                DCB      0x00
                  b1Hz_sh
000019  00                DCB      0x00
                  spc_stat
00001a  00                DCB      0x00
                  spc_bat
00001b  00                DCB      0x00
                  spc_phase
00001c  00                DCB      0x00
                  bAVZ
00001d  00                DCB      0x00
                  ke_start_stat
00001e  00                DCB      0x00
                  numOfForvardBps
00001f  00                DCB      0x00
                  numOfForvardBps_old
000020  00                DCB      0x00
                  numOfForvardBps_minCnt
000021  00                DCB      0x00
                  bPARALLEL_NOT_ENOUG
000022  00                DCB      0x00
                  bPARALLEL_ENOUG
000023  00                DCB      0x00
                  bPARALLEL
000024  00                DCB      0x00
                  cntrl_hndl_plazma
000025  00                DCB      0x00
                  vz1_stat
000026  00                DCB      0x00
                  vz1_stat_old
000027  00                DCB      0x00
                  volt_region
000028  00                DCB      0x00
                  vz2_stat
000029  00                DCB      0x00
                  vz2_stat_old
00002a  00                DCB      0x00
                  bat_hndl_zvu_Q_cnt
00002b  00                DCB      0x00
                  cntrl_stat
00002c  0258              DCW      0x0258
                  cntrl_stat_old
00002e  0258              DCW      0x0258
                  avg_main_cnt
000030  0014              DCW      0x0014
                  num_necc_block_cnt
000032  0000              DCB      0x00,0x00
                  net_buff_
000034  0000              DCB      0x00,0x00
                  adc_result
000036  0000              DCB      0x00,0x00
                  adc_gorb_cnt
000038  0000              DCB      0x00,0x00
                  adc_zero_cnt
00003a  0000              DCB      0x00,0x00
                  adc_window_cnt
00003c  0000              DCB      0x00,0x00
                  adc_net_buff_cnt
00003e  0000              DCB      0x00,0x00
                  plazma_sk
000040  0000              DCB      0x00,0x00
                  cntrl_stat_new
000042  0000              DCB      0x00,0x00
                  Ibmax
000044  0000              DCB      0x00,0x00
                  IZMAX_
000046  0000              DCB      0x00,0x00
                  Ubpsmax
000048  0000              DCB      0x00,0x00
                  samokalibr_cnt
00004a  0000              DCB      0x00,0x00
                  main_kb_cnt
00004c  0000              DCB      0x00,0x00
                  kb_cnt_1lev
00004e  0000              DCB      0x00,0x00
                  kb_cnt_2lev
000050  0000              DCB      0x00,0x00
                  kb_start
000052  0000              DCB      0x00,0x00
                  ibat_ips
000054  0000              DCB      0x00,0x00
                  ibat_ips_
000056  0000              DCB      0x00,0x00
                  bps_on_mask
000058  0000              DCB      0x00,0x00
                  bps_off_mask
00005a  0000              DCB      0x00,0x00
                  vz_cnt_s
00005c  0000              DCB      0x00,0x00
                  vz_cnt_s_
00005e  0000              DCB      0x00,0x00
                  vz_cnt_h
000060  0000              DCB      0x00,0x00
                  vz_cnt_h_
000062  0000              DCB      0x00,0x00
                  cnt_end_ke
000064  0000              DCB      0x00,0x00
                  __ee_vz_cnt
000066  0000              DCB      0x00,0x00
                  __ee_spc_stat
000068  0000              DCB      0x00,0x00
                  __ee_spc_bat
00006a  0000              DCB      0x00,0x00
                  __ee_spc_phase
00006c  0000              DCB      0x00,0x00
                  cntrl_stat_blok_cnt
00006e  0000              DCB      0x00,0x00
                  cntrl_stat_blok_cnt_
000070  0000              DCB      0x00,0x00
                  numOfForvardBps_hourCnt
000072  0000              DCB      0x00,0x00
                  vz1_stat_cnt
000074  0000              DCB      0x00,0x00
                  volt_region_cnt
000076  0000              DCB      0x00,0x00
                  vz2_stat_cnt
000078  0000              DCB      0x00,0x00
                  vz2_stat_ph2_cnt
00007a  0000              DCB      0x00,0x00
                  plazma_ica1
00007c  0000              DCB      0x00,0x00
                  bat_hndl_i
00007e  0000              DCB      0x00,0x00
                  bat_hndl_t_razr_hour
000080  0000              DCB      0x00,0x00
                  bat_hndl_t_razr_min
000082  0000              DCB      0x00,0x00
                  bat_hndl_t_razr_mininhour
000084  0000              DCB      0x00,0x00
                  bat_hndl_i_temp
000086  0000              DCB      0x00,0x00
                  bat_hndl_u_end
000088  00000000          DCB      0x00,0x00,0x00,0x00
                  bat_hndl_i_zar_price
                          DCD      0x00000000
                  ibat
                          DCD      0x00000000
                  ibat_
                          DCD      0x00000000
                  i_avg_max
                          DCD      0x00000000
                  i_avg_min
                          DCD      0x00000000
                  i_avg_summ
                          DCD      0x00000000
                  i_avg
                          DCD      0x00000000
                  avg
                          DCD      0x00000000
                  cntrl_stat_blok_cnt_plus
                          DCD      0x00000000
                  cntrl_stat_blok_cnt_minus
                          DCD      0x00000000
                  plazma_inv
                          DCD      0x00000000
                  vz1_wrk_cnt
                          DCD      0x00000000
                  vz1_up_cnt
                          DCD      0x00000000
                  vz2_wrk_cnt
                          DCD      0x00000000
                  vz2_up_cnt
                          DCD      0x00000000
                  bat_hndl_t_razr
                          DCD      0x00000000
                  bat_hndl_t_razr_ke
                          DCD      0x00000000
                  bat_hndl_zvu_Q
                          DCD      0x00000000
                  bat_hndl_proc_razr
                          DCD      0x00000000
                  bat_hndl_remain_time
                          DCD      0x00000000
                  amper_chas_cnt_drv_summ
                          DCD      0x00000000
                  bat_hndl_i_summ
                          DCD      0x00000000
                  net_metr_buff_
                          DCD      0x00000000
0000e8  0000              DCB      0x00,0x00
                  adc_self_ch_buff
0000ea  0000              DCB      0x00,0x00
                          DCD      0x00000000
                  adc_self_ch_disp
                          DCD      0x00000000
0000f4  00000000          DCB      0x00,0x00,0x00,0x00
                  ke_date
                          %        8

                          AREA ||area_number.26||, DATA, ALIGN=0

                          EXPORTAS ||area_number.26||, ||.data||
                  rx_read_power_cnt_phase
000000  0f                DCB      0x0f

                          AREA ||area_number.27||, DATA, ALIGN=1

                          EXPORTAS ||area_number.27||, ||.data||
                  read_power_cnt_main_cnt
000000  0064              DCW      0x0064

                          AREA ||area_number.28||, DATA, ALIGN=0

                          EXPORTAS ||area_number.28||, ||.data||
                  rx_read_power_cnt_plazma
000000  00                DCB      0x00

                          AREA ||area_number.29||, DATA, ALIGN=0

                          EXPORTAS ||area_number.29||, ||.data||
                  rx_read_power_cnt_flag
000000  00                DCB      0x00

                          AREA ||area_number.30||, DATA, ALIGN=0

                          EXPORTAS ||area_number.30||, ||.data||
                  bENERGOMETR_UIP
000000  00                DCB      0x00

                          AREA ||area_number.31||, DATA, ALIGN=1

                          EXPORTAS ||area_number.31||, ||.data||
                  unet_buff_max
000000  0000              DCB      0x00,0x00

                          AREA ||area_number.32||, DATA, ALIGN=0

                          EXPORTAS ||area_number.32||, ||.data||
                  adc_cnt
000000  00                DCB      0x00

                          AREA ||area_number.33||, DATA, ALIGN=0

                          EXPORTAS ||area_number.33||, ||.data||
                  adc_cnt1
000000  00                DCB      0x00

                          AREA ||area_number.34||, DATA, ALIGN=1

                          EXPORTAS ||area_number.34||, ||.data||
                  zero_cnt
000000  0000              DCB      0x00,0x00

                          AREA ||area_number.35||, DATA, ALIGN=0

                          EXPORTAS ||area_number.35||, ||.data||
                  net_buff_cnt
000000  00                DCB      0x00

                          AREA ||area_number.36||, DATA, ALIGN=1

                          EXPORTAS ||area_number.36||, ||.data||
                  ADWR
000000  0000              DCB      0x00,0x00

                          AREA ||area_number.37||, DATA, ALIGN=1

                          EXPORTAS ||area_number.37||, ||.data||
                  period_cnt
000000  0000              DCB      0x00,0x00

                          AREA ||area_number.38||, DATA, ALIGN=1

                          EXPORTAS ||area_number.38||, ||.data||
                  non_zero_cnt
000000  0000              DCB      0x00,0x00

                          AREA ||area_number.39||, DATA, ALIGN=0

                          EXPORTAS ||area_number.39||, ||.data||
                  rele_stat
000000  00                DCB      0x00

                          AREA ||area_number.40||, DATA, ALIGN=0

                          EXPORTAS ||area_number.40||, ||.data||
                  bRELE_OUT
000000  00                DCB      0x00

                          AREA ||area_number.41||, DATA, ALIGN=2

                          EXPORTAS ||area_number.41||, ||.data||
                  main_power_buffer_
                          DCD      0x00000000

                          AREA ||area_number.42||, DATA, ALIGN=1

                          EXPORTAS ||area_number.42||, ||.data||
                  main_power_buffer_cnt
000000  0000              DCB      0x00,0x00

                          AREA ||area_number.43||, DATA, ALIGN=1

                          EXPORTAS ||area_number.43||, ||.data||
                  adc_buff_out_
                          DCDU     0x00000000
000004  0000              DCB      0x00,0x00

                          AREA ||area_number.44||, DATA, ALIGN=1

                          EXPORTAS ||area_number.44||, ||.data||
                  plazma_adc_cnt
000000  0000              DCB      0x00,0x00

                          AREA ||area_number.45||, DATA, ALIGN=0

                          EXPORTAS ||area_number.45||, ||.data||
                  unh_cnt0
000000  00                DCB      0x00

                          AREA ||area_number.46||, DATA, ALIGN=0

                          EXPORTAS ||area_number.46||, ||.data||
                  unh_cnt1
000000  00                DCB      0x00

                          AREA ||area_number.47||, DATA, ALIGN=0

                          EXPORTAS ||area_number.47||, ||.data||
                  b1Hz_unh
000000  00                DCB      0x00

                          AREA ||area_number.48||, DATA, ALIGN=0

                          EXPORTAS ||area_number.48||, ||.data||
                  ch_cnt1
000000  00                DCB      0x00

                          AREA ||area_number.49||, DATA, ALIGN=0

                          EXPORTAS ||area_number.49||, ||.data||
                  b1_30Hz_ch
000000  00                DCB      0x00

                          AREA ||area_number.50||, DATA, ALIGN=0

                          EXPORTAS ||area_number.50||, ||.data||
                  ch_cnt2
000000  00                DCB      0x00

                          AREA ||area_number.51||, DATA, ALIGN=0

                          EXPORTAS ||area_number.51||, ||.data||
                  b1_10Hz_ch
000000  00                DCB      0x00

                          AREA ||area_number.52||, DATA, ALIGN=1

                          EXPORTAS ||area_number.52||, ||.data||
                  IZMAX_70
000000  0000              DCB      0x00,0x00

                          AREA ||area_number.53||, DATA, ALIGN=1

                          EXPORTAS ||area_number.53||, ||.data||
                  IZMAX_130
000000  0000              DCB      0x00,0x00

                          AREA ||area_number.54||, DATA, ALIGN=1

                          EXPORTAS ||area_number.54||, ||.data||
                  cntrl_stat_blck_cnt
000000  0000              DCB      0x00,0x00

                          AREA ||area_number.55||, DATA, ALIGN=0

                          EXPORTAS ||area_number.55||, ||.data||
                  avg_cnt
000000  00                DCB      0x00

                          AREA ||area_number.56||, DATA, ALIGN=0

                          EXPORTAS ||area_number.56||, ||.data||
                  bps_all_off_cnt
000000  00                DCB      0x00

                          AREA ||area_number.57||, DATA, ALIGN=0

                          EXPORTAS ||area_number.57||, ||.data||
                  bps_mask_off_cnt
000000  00                DCB      0x00

                          AREA ||area_number.58||, DATA, ALIGN=0

                          EXPORTAS ||area_number.58||, ||.data||
                  bps_mask_on_off_cnt
000000  00                DCB      0x00

                          AREA ||area_number.59||, DATA, ALIGN=0

                          EXPORTAS ||area_number.59||, ||.data||
                  bps_hndl_2sec_cnt
000000  00                DCB      0x00

                          AREA ||area_number.60||, DATA, ALIGN=0

                          EXPORTAS ||area_number.60||, ||.data||
                  plazma_bat
000000  00                DCB      0x00

                          AREA ||area_number.61||, DATA, ALIGN=0

                          EXPORTAS ||area_number.61||, ||.data||
                  plazma_cntrl_stat
000000  00                DCB      0x00

                          AREA ||area_number.62||, DATA, ALIGN=1

                          EXPORTAS ||area_number.62||, ||.data||
                  ce102m_delayCnt
000000  0000              DCB      0x00,0x00

                          AREA ||area_number.63||, DATA, ALIGN=1

                          EXPORTAS ||area_number.63||, ||.data||
                  volta_short
000000  0000              DCB      0x00,0x00

                          AREA ||area_number.64||, DATA, ALIGN=1

                          EXPORTAS ||area_number.64||, ||.data||
                  curr_short
000000  0000              DCB      0x00,0x00

                          AREA ||area_number.65||, DATA, ALIGN=2

                          EXPORTAS ||area_number.65||, ||.data||
                  power_int
                          DCD      0x00000000

                          AREA ||area_number.66||, DATA, ALIGN=1

                          EXPORTAS ||area_number.66||, ||.data||
                  plazma_ica2
000000  0000              DCB      0x00,0x00

                          AREA ||area_number.67||, DATA, ALIGN=0

                          EXPORTAS ||area_number.67||, ||.data||
                  rele_hndl_plazma
000000  000000            DCB      0x00,0x00,0x00
