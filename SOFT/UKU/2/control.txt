; generated by ARM C/C++ Compiler, 4.1 [Build 644]
; commandline ArmCC [--list --debug -c --asm --interleave -o.\EXE\control.o --asm_dir=.\ --list_dir=.\ --depend=.\EXE\control.d --feedback=.\EXE\UKU_220_IPS_TERMOKOMPENSAT.fed --cpu=Cortex-M3 --apcs=interwork -O1 -IC:\Keil\ARM\CMSIS\Include -IC:\Keil\ARM\INC\NXP\LPC17xx -D__MICROLIB -DUKU_220_IPS_TERMOKOMPENSAT -DUKU2071x -DUKU_ZVU --omf_browse=.\EXE\control.crf control.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  bat_flag PROC
;;;326    // заполнение флагов для АКБ
;;;327    void bat_flag (void)
000000  e92d5ff0          PUSH     {r4-r12,lr}
;;;328    {  
;;;329    if(spc_stat!=spcVZ) 
000004  4eff              LDR      r6,|L1.1028|
;;;330    	{
;;;331    	vz_error=0;
000006  2700              MOVS     r7,#0
000008  f8960023          LDRB     r0,[r6,#0x23]         ;329  ; spc_stat
00000c  2802              CMP      r0,#2                 ;329
00000e  d003              BEQ      |L1.24|
000010  7077              STRB     r7,[r6,#1]
;;;332    	sp_ch_error=0;
000012  70b7              STRB     r7,[r6,#2]
;;;333    	vz1_error=0;
000014  70f7              STRB     r7,[r6,#3]
;;;334    	vz2_error=0;
000016  7137              STRB     r7,[r6,#4]
                  |L1.24|
;;;335    	}
;;;336    
;;;337    if(!snmp_bat_status[0])	 			//Батарея №1
000018  f8dfa3ec          LDR      r10,|L1.1032|
;;;338    	{
;;;339    	if((bat[0]._Ub<(USIGN*10)))		//Снижение напряжения батареи ниже Uбсигн 
00001c  f8dfb3ec          LDR      r11,|L1.1036|
000020  f8df83ec          LDR      r8,|L1.1040|
000024  f8ba0000          LDRH     r0,[r10,#0]           ;337  ; snmp_bat_status
;;;340    		{
;;;341    		snmp_bat_flag[0]|=0x0001; 
;;;342    		if((snmp_bat_flag_puts[0]&0x0001)==0) 
;;;343    			{
;;;344    			snmp_trap_send("BAT #1 Alarm, battery is low",5,8,0); 
;;;345    			snmp_bat_flag_puts[0]|=0x0001;
;;;346    			}
;;;347    		}
;;;348    	else 
;;;349    		{
;;;350    		snmp_bat_flag[0]&=~0x0001; 
;;;351    		if(snmp_bat_flag_puts[0]&0x0001) 
;;;352    			{
;;;353    			snmp_trap_send("BAT #1 Alarm clear, battery is not low",5,8,1);
;;;354    			snmp_bat_flag_puts[0]&=~0x0001;
;;;355    			}
;;;356    		}
;;;357    
;;;358    	if(bat[0]._temper_stat&0x01)	//Повышенная температура батареи, первый порог - предупреждение
;;;359    		{
;;;360    		snmp_bat_flag[0]|=0x0002;
;;;361    		if((snmp_bat_flag_puts[0]&0x0002)==0) 
;;;362    			{
;;;363    			//snmp_trap_send("BAT #1 Warning, high battery temperature",5,8,2); 
;;;364    			snmp_bat_flag_puts[0]|=0x0002;
;;;365    			}
;;;366    		}
;;;367    	else 
;;;368    		{
;;;369    		snmp_bat_flag[0]&=~0x0002;
;;;370    		if(snmp_bat_flag_puts[0]&0x0002) 
;;;371    			{
;;;372    			//snmp_trap_send("BAT #1 Warning clear, battery temperature is normal",5,8,3);
;;;373    			snmp_bat_flag_puts[0]&=~0x02;
;;;374    			}
;;;375    		}
;;;376    
;;;377    	if(bat[0]._temper_stat&0x02)  	//Повышенная температура батареи, второй порог - авария
;;;378    		{
;;;379    		snmp_bat_flag[0]|=0x0004;
;;;380    		if((snmp_bat_flag_puts[0]&0x0004)==0) 
;;;381    			{
;;;382    			//snmp_trap_send("BAT #1 Alarm, high battery temperature",5,8,4); 
;;;383    			snmp_bat_flag_puts[0]|=0x0004;
;;;384    			}
;;;385    		}
;;;386    	else 
;;;387    		{
;;;388    		snmp_bat_flag[0]&=~0x0004;
;;;389    		if(snmp_bat_flag_puts[0]&0x0004) 
;;;390    			{
;;;391    			//snmp_trap_send("BAT #1 Alarm clear, battery temperature is normal",5,8,5);
;;;392    			snmp_bat_flag_puts[0]&=~0x0004;
;;;393    			}
;;;394    		}
;;;395    
;;;396    	if(bat[0]._Ib<(-IKB)) snmp_bat_flag[0]|=0x0008;		//Разряд батареи
000028  f8df93e8          LDR      r9,|L1.1044|
00002c  4cfa              LDR      r4,|L1.1048|
00002e  4dfb              LDR      r5,|L1.1052|
000030  b148              CBZ      r0,|L1.70|
;;;397    	else if(bat[0]._Ib>IKB) snmp_bat_flag[0]&=~0x0008;	//Заряд батареи
;;;398    
;;;399    	if((spc_stat==spcKE)&&(spc_bat==0))					//Контроль емкости батареи №1 
;;;400    		{
;;;401    		snmp_bat_flag[0]|=0x0010;
;;;402    		if((snmp_bat_flag_puts[0]&0x0010)==0) 
;;;403    			{
;;;404    			snmp_trap_send("BAT #1, capacity test started",5,8,6); 
;;;405    			snmp_bat_flag_puts[0]|=0x0010;
;;;406    			}
;;;407    		}
;;;408    	else 
;;;409    		{
;;;410    		snmp_bat_flag[0]&=~0x0010;
;;;411    		if(snmp_bat_flag_puts[0]&0x0010) 
;;;412    			{
;;;413    			snmp_trap_send("BAT #1, capacity test stopped",5,8,7);
;;;414    			snmp_bat_flag_puts[0]&=~0x0010;
;;;415    			}
;;;416    		}
;;;417    		
;;;418    	if(spc_stat==spcVZ)									//Выравнивающий заряд 
;;;419    		{
;;;420    		snmp_bat_flag[0]|=0x0020;
;;;421    		if((snmp_bat_flag_puts[0]&0x0020)==0) 
;;;422    			{
;;;423    			snmp_trap_send("BAT #1,leveling charge is started",5,8,8); 
;;;424    			snmp_bat_flag_puts[0]|=0x0020;
;;;425    			}
;;;426    		}
;;;427    	else 
;;;428    		{
;;;429    		snmp_bat_flag[0]&=~0x0020;
;;;430    		if(snmp_bat_flag_puts[0]&0x0020) 
;;;431    			{
;;;432    			snmp_trap_send("BAT #1,leveling charge is stopped",5,8,9);
;;;433    			snmp_bat_flag_puts[0]&=~0x0020;
;;;434    			}
;;;435    		}
;;;436    
;;;437    	if(vz_error)										 //Выравнивающий заряд заблокирован по вентиляции
;;;438    		{
;;;439    		snmp_bat_flag[0]|=0x0040;
;;;440    		if((snmp_bat_flag_puts[0]&0x0040)==0) 
;;;441    			{
;;;442    			snmp_trap_send("BAT #1,leveling charge is blocked",5,8,10); 
;;;443    			snmp_bat_flag_puts[0]|=0x0040;
;;;444    			}
;;;445    		}
;;;446    	else 
;;;447    		{
;;;448    		snmp_bat_flag[0]&=~0x0040;
;;;449    		if(snmp_bat_flag_puts[0]&0x0040) 
;;;450    			{
;;;451    			snmp_trap_send("BAT #1,leveling charge is unblocked",5,8,11);
;;;452    			snmp_bat_flag_puts[0]&=~0x0040;
;;;453    			} 
;;;454    		}
;;;455    
;;;456    	if(sp_ch_stat==scsWRK) 								//Ускореннный заряд
;;;457    		{
;;;458    		snmp_bat_flag[0]|=0x0080;
;;;459    		if((snmp_bat_flag_puts[0]&0x0080)==0) 
;;;460    			{
;;;461    			snmp_trap_send("BAT #1,speed charge is started",5,8,10); 
;;;462    			snmp_bat_flag_puts[0]|=0x0080;
;;;463    			}
;;;464    		}
;;;465    	else 
;;;466    		{
;;;467    		snmp_bat_flag[0]&=~0x0080;
;;;468    		if(snmp_bat_flag_puts[0]&0x0080) 
;;;469    			{
;;;470    			snmp_trap_send("BAT #1,speed charge is stopped",5,8,11);
;;;471    			snmp_bat_flag_puts[0]&=~0x0080;
;;;472    			}
;;;473    		}
;;;474    
;;;475    	if(sp_ch_error) 									//Ускореннный заряд заблокирован по вентиляции
;;;476    		{
;;;477    		snmp_bat_flag[0]|=0x0100;
;;;478    		if((snmp_bat_flag_puts[0]&0x0100)==0) 
;;;479    			{
;;;480    			snmp_trap_send("BAT #1,speed charge is blocked",5,8,12); 
;;;481    			snmp_bat_flag_puts[0]|=0x0100;
;;;482    			}
;;;483    		}
;;;484    	else 
;;;485    		{
;;;486    		snmp_bat_flag[0]&=~0x0100;
;;;487    		if(snmp_bat_flag_puts[0]&0x0100) 
;;;488    			{
;;;489    			snmp_trap_send("BAT #1,speed charge is unblocked",5,8,13);
;;;490    			snmp_bat_flag_puts[0]&=~0x0100;
;;;491    			} 
;;;492    		}
;;;493    
;;;494    	if(vz1_stat!=vz1sOFF)								//Уравнительный заряд 
;;;495    		{
;;;496    		snmp_bat_flag[0]|=0x0200;
;;;497    		if((snmp_bat_flag_puts[0]&0x0200)==0) 
;;;498    			{
;;;499    			snmp_trap_send("BAT #1,equalising charge is on",5,8,14); 
;;;500    			snmp_bat_flag_puts[0]|=0x0200;
;;;501    			}
;;;502    		}
;;;503    	else 
;;;504    		{
;;;505    		snmp_bat_flag[0]&=~0x0200;
;;;506    		if(snmp_bat_flag_puts[0]&0x0200) 
;;;507    			{
;;;508    			snmp_trap_send("BAT #1,equalising charge is off",5,8,15);
;;;509    			snmp_bat_flag_puts[0]&=~0x0200;
;;;510    			}
;;;511    		}
;;;512    
;;;513    	if(vz1_error)										//Уравнительный заряд заблокирован по вентиляции 
;;;514    		{
;;;515    		snmp_bat_flag[0]|=0x0400;
;;;516    		if((snmp_bat_flag_puts[0]&0x0400)==0) 
;;;517    			{
;;;518    			snmp_trap_send("BAT #1,equalising charge is blocked",5,8,16); 
;;;519    			snmp_bat_flag_puts[0]|=0x0400;
;;;520    			}
;;;521    		}
;;;522    	else 
;;;523    		{
;;;524    		snmp_bat_flag[0]&=~0x0400;
;;;525    		if(snmp_bat_flag_puts[0]&0x0400) 
;;;526    			{
;;;527    			snmp_trap_send("BAT #1,equalising charge is unblocked",5,8,17);
;;;528    			snmp_bat_flag_puts[0]&=~0x0400;
;;;529    			} 
;;;530    		}
;;;531    
;;;532    	if(vz2_stat!=vz2sOFF)								//Формовочный заряд 
;;;533    		{
;;;534    		snmp_bat_flag[0]|=0x0800;
;;;535    		if((snmp_bat_flag_puts[0]&0x0800)==0) 
;;;536    			{
;;;537    			snmp_trap_send("BAT #1,molding charge is on",5,8,18); 
;;;538    			snmp_bat_flag_puts[0]|=0x0800;
;;;539    			}
;;;540    		}
;;;541    	else 
;;;542    		{
;;;543    		snmp_bat_flag[0]&=~0x0800;
;;;544    		if(snmp_bat_flag_puts[0]&0x0800) 
;;;545    			{
;;;546    			snmp_trap_send("BAT #1,molding charge is off",5,8,19);
;;;547    			snmp_bat_flag_puts[0]&=~0x0800;
;;;548    			}
;;;549    		}
;;;550    
;;;551    	if(vz2_error) 										//Формовочный заряд заблокирован по вентиляции
;;;552    		{
;;;553    		snmp_bat_flag[0]|=0x1000;
;;;554    		if((snmp_bat_flag_puts[0]&0x1000)==0) 
;;;555    			{
;;;556    			snmp_trap_send("BAT #1,molding charge is blocked",5,8,20); 
;;;557    			snmp_bat_flag_puts[0]|=0x1000;
;;;558    			}
;;;559    		}
;;;560    	else 
;;;561    		{
;;;562    		snmp_bat_flag[0]&=~0x1000;
;;;563    		if(snmp_bat_flag_puts[0]&0x1000) 
;;;564    			{
;;;565    			snmp_trap_send("BAT #1,molding charge is unblocked",5,8,21);
;;;566    			snmp_bat_flag_puts[0]&=~0x1000;
;;;567    			} 
;;;568    		}
;;;569    	}
;;;570    else 
;;;571    	{
;;;572    	snmp_bat_flag[0]=0; 
000032  8027              STRH     r7,[r4,#0]
;;;573    	snmp_bat_flag_puts[0]=0;
000034  802f              STRH     r7,[r5,#0]
                  |L1.54|
;;;574    	}
;;;575    
;;;576    if(!snmp_bat_status[1])	 			//Батарея №2
000036  f8ba0002          LDRH     r0,[r10,#2]  ; snmp_bat_status
00003a  2800              CMP      r0,#0
00003c  d071              BEQ      |L1.290|
;;;577    	{
;;;578    	if((bat[1]._Ub<(USIGN*10)))		//Снижение напряжения батареи ниже Uбсигн 
;;;579    		{
;;;580    		snmp_bat_flag[1]|=0x0001; 
;;;581    		if((snmp_bat_flag_puts[1]&0x0001)==0) 
;;;582    			{
;;;583    			snmp_trap_send("BAT #2 Alarm, battery is low",5,8,22); 
;;;584    			snmp_bat_flag_puts[1]|=0x0001;
;;;585    			}
;;;586    		}
;;;587    	else 
;;;588    		{
;;;589    		snmp_bat_flag[1]&=~0x0001; 
;;;590    		if(snmp_bat_flag_puts[1]&0x0001) 
;;;591    			{
;;;592    			snmp_trap_send("BAT #2 Alarm clear, battery is not low",5,8,23);
;;;593    			snmp_bat_flag_puts[1]&=~0x0001;
;;;594    			}
;;;595    		}
;;;596    
;;;597    	if(bat[1]._temper_stat&0x01)	//Повышенная температура батареи, первый порог - предупреждение
;;;598    		{
;;;599    		snmp_bat_flag[1]|=0x0002;
;;;600    		if((snmp_bat_flag_puts[0]&0x0002)==0) 
;;;601    			{
;;;602    			//snmp_trap_send("BAT #2 Warning, high battery temperature",5,8,24); 
;;;603    			snmp_bat_flag_puts[1]|=0x0002;
;;;604    			}
;;;605    		}
;;;606    	else 
;;;607    		{
;;;608    		snmp_bat_flag[1]&=~0x0002;
;;;609    		if(snmp_bat_flag_puts[1]&0x0002) 
;;;610    			{
;;;611    			//snmp_trap_send("BAT #2 Warning clear, battery temperature is normal",5,8,25);
;;;612    			snmp_bat_flag_puts[1]&=~0x02;
;;;613    			}
;;;614    		}
;;;615    
;;;616    	if(bat[1]._temper_stat&0x02)  	//Повышенная температура батареи, второй порог - авария
;;;617    		{
;;;618    		snmp_bat_flag[1]|=0x0004;
;;;619    		if((snmp_bat_flag_puts[1]&0x0004)==0) 
;;;620    			{
;;;621    			//snmp_trap_send("BAT #2 Alarm, high battery temperature",5,8,26); 
;;;622    			snmp_bat_flag_puts[1]|=0x0004;
;;;623    			}
;;;624    		}
;;;625    	else 
;;;626    		{
;;;627    		snmp_bat_flag[1]&=~0x0004;
;;;628    		if(snmp_bat_flag_puts[1]&0x0004) 
;;;629    			{
;;;630    			//snmp_trap_send("BAT #2 Alarm clear, battery temperature is normal",5,8,27);
;;;631    			snmp_bat_flag_puts[1]&=~0x0004;
;;;632    			}
;;;633    		}
;;;634    
;;;635    	if(bat[1]._Ib<(-IKB)) snmp_bat_flag[1]|=0x0008;		//Разряд батареи
;;;636    	else if(bat[1]._Ib>IKB) snmp_bat_flag[1]&=~0x0008;	//Заряд батареи
;;;637    
;;;638    	if((spc_stat==spcKE)&&(spc_bat==0))					//Контроль емкости батареи №1 
;;;639    		{
;;;640    		snmp_bat_flag[1]|=0x0010;
;;;641    		if((snmp_bat_flag_puts[1]&0x0010)==0) 
;;;642    			{
;;;643    			snmp_trap_send("BAT #2, capacity test started",5,8,28); 
;;;644    			snmp_bat_flag_puts[1]|=0x0010;
;;;645    			}
;;;646    		}
;;;647    	else 
;;;648    		{
;;;649    		snmp_bat_flag[1]&=~0x0010;
;;;650    		if(snmp_bat_flag_puts[1]&0x0010) 
;;;651    			{
;;;652    			snmp_trap_send("BAT #2, capacity test stopped",5,8,29);
;;;653    			snmp_bat_flag_puts[1]&=~0x0010;
;;;654    			}
;;;655    		}
;;;656    		
;;;657    	if(spc_stat==spcVZ)									//Выравнивающий заряд 
;;;658    		{
;;;659    		snmp_bat_flag[1]|=0x0020;
;;;660    		if((snmp_bat_flag_puts[1]&0x0020)==0) 
;;;661    			{
;;;662    			snmp_trap_send("BAT #2,leveling charge is started",5,8,30); 
;;;663    			snmp_bat_flag_puts[1]|=0x0020;
;;;664    			}
;;;665    		}
;;;666    	else 
;;;667    		{
;;;668    		snmp_bat_flag[1]&=~0x0020;
;;;669    		if(snmp_bat_flag_puts[1]&0x0020) 
;;;670    			{
;;;671    			snmp_trap_send("BAT #2,leveling charge is stopped",5,8,31);
;;;672    			snmp_bat_flag_puts[1]&=~0x0020;
;;;673    			}
;;;674    		}
;;;675    
;;;676    	if(vz_error)										 //Выравнивающий заряд заблокирован по вентиляции
;;;677    		{
;;;678    		snmp_bat_flag[1]|=0x0040;
;;;679    		if((snmp_bat_flag_puts[1]&0x0040)==0) 
;;;680    			{
;;;681    			snmp_trap_send("BAT #2,leveling charge is blocked",5,8,32); 
;;;682    			snmp_bat_flag_puts[1]|=0x0040;
;;;683    			}
;;;684    		}
;;;685    	else 
;;;686    		{
;;;687    		snmp_bat_flag[1]&=~0x0040;
;;;688    		if(snmp_bat_flag_puts[1]&0x0040) 
;;;689    			{
;;;690    			snmp_trap_send("BAT #2,leveling charge is unblocked",5,8,33);
;;;691    			snmp_bat_flag_puts[1]&=~0x0040;
;;;692    			} 
;;;693    		}
;;;694    
;;;695    	if(sp_ch_stat==scsWRK) 								//Ускореннный заряд
;;;696    		{
;;;697    		snmp_bat_flag[1]|=0x0080;
;;;698    		if((snmp_bat_flag_puts[1]&0x0080)==0) 
;;;699    			{
;;;700    			snmp_trap_send("BAT #2,speed charge is started",5,8,34); 
;;;701    			snmp_bat_flag_puts[1]|=0x0080;
;;;702    			}
;;;703    		}
;;;704    	else 
;;;705    		{
;;;706    		snmp_bat_flag[1]&=~0x0080;
;;;707    		if(snmp_bat_flag_puts[1]&0x0080) 
;;;708    			{
;;;709    			snmp_trap_send("BAT #2,speed charge is stopped",5,8,35);
;;;710    			snmp_bat_flag_puts[1]&=~0x0080;
;;;711    			}
;;;712    		}
;;;713    
;;;714    	if(sp_ch_error) 									//Ускореннный заряд заблокирован по вентиляции
;;;715    		{
;;;716    		snmp_bat_flag[1]|=0x0100;
;;;717    		if((snmp_bat_flag_puts[1]&0x0100)==0) 
;;;718    			{
;;;719    			snmp_trap_send("BAT #2,speed charge is blocked",5,8,36); 
;;;720    			snmp_bat_flag_puts[1]|=0x0100;
;;;721    			}
;;;722    		}
;;;723    	else 
;;;724    		{
;;;725    		snmp_bat_flag[1]&=~0x0100;
;;;726    		if(snmp_bat_flag_puts[1]&0x0100) 
;;;727    			{
;;;728    			snmp_trap_send("BAT #2,speed charge is unblocked",5,8,37);
;;;729    			snmp_bat_flag_puts[1]&=~0x0100;
;;;730    			} 
;;;731    		}
;;;732    
;;;733    	if(vz1_stat!=vz1sOFF)								//Уравнительный заряд 
;;;734    		{
;;;735    		snmp_bat_flag[1]|=0x0200;
;;;736    		if((snmp_bat_flag_puts[1]&0x0200)==0) 
;;;737    			{
;;;738    			snmp_trap_send("BAT #2,equalising charge is on",5,8,38); 
;;;739    			snmp_bat_flag_puts[1]|=0x0200;
;;;740    			}
;;;741    		}
;;;742    	else 
;;;743    		{
;;;744    		snmp_bat_flag[1]&=~0x0200;
;;;745    		if(snmp_bat_flag_puts[1]&0x0200) 
;;;746    			{
;;;747    			snmp_trap_send("BAT #2,equalising charge is off",5,8,39);
;;;748    			snmp_bat_flag_puts[1]&=~0x0200;
;;;749    			}
;;;750    		}
;;;751    
;;;752    	if(vz1_error)										//Уравнительный заряд заблокирован по вентиляции 
;;;753    		{
;;;754    		snmp_bat_flag[1]|=0x0400;
;;;755    		if((snmp_bat_flag_puts[1]&0x0400)==0) 
;;;756    			{
;;;757    			snmp_trap_send("BAT #2,equalising charge is blocked",5,8,40); 
;;;758    			snmp_bat_flag_puts[1]|=0x0400;
;;;759    			}
;;;760    		}
;;;761    	else 
;;;762    		{
;;;763    		snmp_bat_flag[1]&=~0x0400;
;;;764    		if(snmp_bat_flag_puts[1]&0x0400) 
;;;765    			{
;;;766    			snmp_trap_send("BAT #2,equalising charge is unblocked",5,8,41);
;;;767    			snmp_bat_flag_puts[1]&=~0x0400;
;;;768    			} 
;;;769    		}
;;;770    
;;;771    	if(vz2_stat!=vz2sOFF)								//Формовочный заряд 
;;;772    		{
;;;773    		snmp_bat_flag[1]|=0x0800;
;;;774    		if((snmp_bat_flag_puts[1]&0x0800)==0) 
;;;775    			{
;;;776    			snmp_trap_send("BAT #2,molding charge is on",5,8,42); 
;;;777    			snmp_bat_flag_puts[1]|=0x0800;
;;;778    			}
;;;779    		}
;;;780    	else 
;;;781    		{
;;;782    		snmp_bat_flag[1]&=~0x0800;
;;;783    		if(snmp_bat_flag_puts[1]&0x0800) 
;;;784    			{
;;;785    			snmp_trap_send("BAT #2,molding charge is off",5,8,43);
;;;786    			snmp_bat_flag_puts[1]&=~0x0800;
;;;787    			}
;;;788    		}
;;;789    
;;;790    	if(vz2_error) 										//Формовочный заряд заблокирован по вентиляции
;;;791    		{
;;;792    		snmp_bat_flag[1]|=0x1000;
;;;793    		if((snmp_bat_flag_puts[1]&0x1000)==0) 
;;;794    			{
;;;795    			snmp_trap_send("BAT #2,molding charge is blocked",5,8,44); 
;;;796    			snmp_bat_flag_puts[1]|=0x1000;
;;;797    			}
;;;798    		}
;;;799    	else 
;;;800    		{
;;;801    		snmp_bat_flag[1]&=~0x1000;
;;;802    		if(snmp_bat_flag_puts[1]&0x1000) 
;;;803    			{
;;;804    			snmp_trap_send("BAT #2,molding charge is unblocked",5,8,45);
;;;805    			snmp_bat_flag_puts[1]&=~0x1000;
;;;806    			} 
;;;807    		}
;;;808    	}
;;;809    else 
;;;810    	{
;;;811    	snmp_bat_flag[1]=0; 
00003e  8067              STRH     r7,[r4,#2]
;;;812    	snmp_bat_flag_puts[1]=0;
000040  806f              STRH     r7,[r5,#2]
                  |L1.66|
;;;813    	}
;;;814    /*
;;;815    if(!snmp_bat_status[1])
;;;816    	{
;;;817    	if((bat[1]._Ub<(USIGN*10))) 
;;;818    		{
;;;819    		snmp_bat_flag[1]|=0x01; 
;;;820    		if((snmp_bat_flag_puts[1]&0x01)==0) 
;;;821    			{
;;;822    			snmp_trap_send("BAT #2 Alarm, battery is low",5,8,0); 
;;;823    			snmp_bat_flag_puts[1]|=0x01;
;;;824    			}
;;;825    		}
;;;826    	else 
;;;827    		{
;;;828    		snmp_bat_flag[1]&=~0x01; 
;;;829    		if(snmp_bat_flag_puts[1]&0x01) 
;;;830    			{
;;;831    			snmp_trap_send("BAT #2 Alarm clear, battery is not low",5,8,1);
;;;832    			snmp_bat_flag_puts[1]&=~0x01;
;;;833    			}
;;;834    		}
;;;835    	if(bat[1]._temper_stat&0x01) 
;;;836    		{
;;;837    		snmp_bat_flag[1]|=0x02;
;;;838    		if((snmp_bat_flag_puts[1]&0x02)==0) 
;;;839    			{
;;;840    			snmp_trap_send("BAT #2 Alarm, high battery temperature",5,8,2); 
;;;841    			snmp_bat_flag_puts[1]|=0x02;
;;;842    			}
;;;843    		}
;;;844    	else 
;;;845    		{
;;;846    		snmp_bat_flag[1]&=~0x02;
;;;847    		if(snmp_bat_flag_puts[1]&0x02) 
;;;848    			{
;;;849    			snmp_trap_send("BAT #2 Alarm clear, battery temperature is normal",5,8,3);
;;;850    			snmp_bat_flag_puts[1]&=~0x02;
;;;851    			}
;;;852    		}
;;;853    	if(bat[1]._temper_stat&0x02) 
;;;854    		{
;;;855    		snmp_bat_flag[1]|=0x04;
;;;856    		if((snmp_bat_flag_puts[1]&0x04)==0) 
;;;857    			{
;;;858    			snmp_trap_send("BAT #2 Alarm, maximum battery temperature",5,8,4); 
;;;859    			snmp_bat_flag_puts[1]|=0x04;
;;;860    			}
;;;861    		}
;;;862    	else 
;;;863    		{
;;;864    		snmp_bat_flag[1]&=~0x04;
;;;865    		if(snmp_bat_flag_puts[1]&0x04) 
;;;866    			{
;;;867    			snmp_trap_send("BAT #2 Alarm clear, battery temperature is normal",5,8,5);
;;;868    			snmp_bat_flag_puts[1]&=~0x04;
;;;869    			}
;;;870    		}
;;;871    		
;;;872    	if(bat[1]._Ib<(-IKB))	snmp_bat_flag[1]|=0x80;
;;;873    	else if(bat[1]._Ib>IKB)snmp_bat_flag[1]&=~0x80;
;;;874    
;;;875    	if((spc_stat==spcKE)&&(spc_bat==1)) 
;;;876    		{
;;;877    		snmp_bat_flag[1]|=0x10;
;;;878    		if((snmp_bat_flag_puts[1]&0x10)==0) 
;;;879    			{
;;;880    			snmp_trap_send("BAT #2, capacity check enabled",5,8,6); 
;;;881    			snmp_bat_flag_puts[1]|=0x10;
;;;882    			}
;;;883    		}
;;;884    	else 
;;;885    		{
;;;886    		snmp_bat_flag[1]&=~0x10;
;;;887    		if(snmp_bat_flag_puts[1]&0x10) 
;;;888    			{
;;;889    			snmp_trap_send("BAT #2, capacity check disabled",5,8,7);
;;;890    			snmp_bat_flag_puts[1]&=~0x10;
;;;891    			}
;;;892    		}
;;;893    		
;;;894    	if(spc_stat==spcVZ) 
;;;895    		{
;;;896    		snmp_bat_flag[1]|=0x20;
;;;897    		if((snmp_bat_flag_puts[1]&0x20)==0) 
;;;898    			{
;;;899    			snmp_trap_send("BAT #2,equalizing charge is on",5,8,8); 
;;;900    			snmp_bat_flag_puts[1]|=0x20;
;;;901    			}
;;;902    		}
;;;903    	else 
;;;904    		{
;;;905    		snmp_bat_flag[1]&=~0x20;
;;;906    		if(snmp_bat_flag_puts[1]&0x20) 
;;;907    			{
;;;908    			snmp_trap_send("BAT #2,equalizing charge is off",5,8,9);
;;;909    			snmp_bat_flag_puts[1]&=~0x20;
;;;910    			}
;;;911    		}
;;;912    
;;;913    	if(vz_error) 
;;;914    		{
;;;915    		snmp_bat_flag[1]|=0x40;
;;;916    		if((snmp_bat_flag_puts[1]&0x40)==0) 
;;;917    			{
;;;918    			snmp_trap_send("BAT #2,equalizing charge blocked",5,8,10); 
;;;919    			snmp_bat_flag_puts[1]|=0x40;
;;;920    			}
;;;921    		}
;;;922    	else 
;;;923    		{
;;;924    		snmp_bat_flag[1]&=~0x40;
;;;925    		if(snmp_bat_flag_puts[1]&0x40) 
;;;926    			{
;;;927    			snmp_trap_send("BAT #2,equalizing charge is not blocked",5,8,11);
;;;928    			snmp_bat_flag_puts[1]&=~0x40;
;;;929    			} 
;;;930    		}
;;;931       }
;;;932    else 
;;;933    	{
;;;934    	snmp_bat_flag[1]=0; 
;;;935    	snmp_bat_flag_puts[1]=0;
;;;936    	} */
;;;937    }
000042  e8bd9ff0          POP      {r4-r12,pc}
                  |L1.70|
000046  f9bb0000          LDRSH    r0,[r11,#0]           ;339  ; USIGN
00004a  f9b82002          LDRSH    r2,[r8,#2]            ;339  ; bat
00004e  eb000380          ADD      r3,r0,r0,LSL #2       ;339
000052  48f1              LDR      r0,|L1.1048|
000054  ebb20f43          CMP      r2,r3,LSL #1          ;339
000058  f9b01000          LDRSH    r1,[r0,#0]            ;341
00005c  48ef              LDR      r0,|L1.1052|
00005e  f9b00000          LDRSH    r0,[r0,#0]            ;342
000062  da0f              BGE      |L1.132|
000064  f0410101          ORR      r1,r1,#1              ;341
000068  8021              STRH     r1,[r4,#0]            ;341
00006a  07c0              LSLS     r0,r0,#31             ;342
00006c  d119              BNE      |L1.162|
00006e  2300              MOVS     r3,#0                 ;344
000070  2208              MOVS     r2,#8                 ;344
000072  2105              MOVS     r1,#5                 ;344
000074  a0ea              ADR      r0,|L1.1056|
000076  f7fffffe          BL       snmp_trap_send
00007a  8828              LDRH     r0,[r5,#0]            ;345  ; snmp_bat_flag_puts
00007c  f0400001          ORR      r0,r0,#1              ;345
000080  8028              STRH     r0,[r5,#0]            ;345
000082  e00e              B        |L1.162|
                  |L1.132|
000084  f0210101          BIC      r1,r1,#1              ;350
000088  8021              STRH     r1,[r4,#0]            ;350
00008a  07c0              LSLS     r0,r0,#31             ;351
00008c  d009              BEQ      |L1.162|
00008e  2301              MOVS     r3,#1                 ;353
000090  2208              MOVS     r2,#8                 ;353
000092  2105              MOVS     r1,#5                 ;353
000094  a0ea              ADR      r0,|L1.1088|
000096  f7fffffe          BL       snmp_trap_send
00009a  8828              LDRH     r0,[r5,#0]            ;354  ; snmp_bat_flag_puts
00009c  f0200001          BIC      r0,r0,#1              ;354
0000a0  8028              STRH     r0,[r5,#0]            ;354
                  |L1.162|
0000a2  f898003f          LDRB     r0,[r8,#0x3f]         ;358  ; bat
0000a6  07c1              LSLS     r1,r0,#31             ;358
0000a8  d00b              BEQ      |L1.194|
0000aa  8821              LDRH     r1,[r4,#0]            ;360  ; snmp_bat_flag
0000ac  f0410102          ORR      r1,r1,#2              ;360
0000b0  8021              STRH     r1,[r4,#0]            ;360
0000b2  f9b51000          LDRSH    r1,[r5,#0]            ;361  ; snmp_bat_flag_puts
0000b6  078a              LSLS     r2,r1,#30             ;361
0000b8  d40e              BMI      |L1.216|
0000ba  f0410102          ORR      r1,r1,#2              ;364
0000be  8029              STRH     r1,[r5,#0]            ;364
0000c0  e00a              B        |L1.216|
                  |L1.194|
0000c2  8821              LDRH     r1,[r4,#0]            ;369  ; snmp_bat_flag
0000c4  f0210102          BIC      r1,r1,#2              ;369
0000c8  8021              STRH     r1,[r4,#0]            ;369
0000ca  f9b51000          LDRSH    r1,[r5,#0]            ;370  ; snmp_bat_flag_puts
0000ce  078a              LSLS     r2,r1,#30             ;370
0000d0  d502              BPL      |L1.216|
0000d2  f0210102          BIC      r1,r1,#2              ;373
0000d6  8029              STRH     r1,[r5,#0]            ;373
                  |L1.216|
0000d8  0780              LSLS     r0,r0,#30             ;377
0000da  d50b              BPL      |L1.244|
0000dc  8820              LDRH     r0,[r4,#0]            ;379  ; snmp_bat_flag
0000de  f0400004          ORR      r0,r0,#4              ;379
0000e2  8020              STRH     r0,[r4,#0]            ;379
0000e4  f9b50000          LDRSH    r0,[r5,#0]            ;380  ; snmp_bat_flag_puts
0000e8  0741              LSLS     r1,r0,#29             ;380
0000ea  d40e              BMI      |L1.266|
0000ec  f0400004          ORR      r0,r0,#4              ;383
0000f0  8028              STRH     r0,[r5,#0]            ;383
0000f2  e00a              B        |L1.266|
                  |L1.244|
0000f4  8820              LDRH     r0,[r4,#0]            ;388  ; snmp_bat_flag
0000f6  f0200004          BIC      r0,r0,#4              ;388
0000fa  8020              STRH     r0,[r4,#0]            ;388
0000fc  f9b50000          LDRSH    r0,[r5,#0]            ;389  ; snmp_bat_flag_puts
000100  0741              LSLS     r1,r0,#29             ;389
000102  d502              BPL      |L1.266|
000104  f0200004          BIC      r0,r0,#4              ;392
000108  8028              STRH     r0,[r5,#0]            ;392
                  |L1.266|
00010a  f9b91000          LDRSH    r1,[r9,#0]            ;396  ; IKB
00010e  f9b80008          LDRSH    r0,[r8,#8]            ;396  ; bat
000112  424a              RSBS     r2,r1,#0              ;396
000114  4290              CMP      r0,r2                 ;396
000116  da05              BGE      |L1.292|
000118  8820              LDRH     r0,[r4,#0]            ;396  ; snmp_bat_flag
00011a  f0400008          ORR      r0,r0,#8              ;396
00011e  8020              STRH     r0,[r4,#0]            ;396
000120  e006              B        |L1.304|
                  |L1.290|
000122  e15f              B        |L1.996|
                  |L1.292|
000124  4288              CMP      r0,r1                 ;397
000126  dd03              BLE      |L1.304|
000128  8820              LDRH     r0,[r4,#0]            ;397  ; snmp_bat_flag
00012a  f0200008          BIC      r0,r0,#8              ;397
00012e  8020              STRH     r0,[r4,#0]            ;397
                  |L1.304|
000130  f8960023          LDRB     r0,[r6,#0x23]         ;399  ; spc_stat
000134  2801              CMP      r0,#1                 ;399
000136  d103              BNE      |L1.320|
000138  f8960024          LDRB     r0,[r6,#0x24]         ;399  ; spc_bat
00013c  2800              CMP      r0,#0                 ;399
00013e  d03a              BEQ      |L1.438|
                  |L1.320|
000140  8820              LDRH     r0,[r4,#0]            ;410  ; snmp_bat_flag
000142  f0200010          BIC      r0,r0,#0x10           ;410
000146  8020              STRH     r0,[r4,#0]            ;410
000148  8828              LDRH     r0,[r5,#0]            ;411  ; snmp_bat_flag_puts
00014a  06c0              LSLS     r0,r0,#27             ;411
00014c  d509              BPL      |L1.354|
00014e  2307              MOVS     r3,#7                 ;413
000150  2208              MOVS     r2,#8                 ;413
000152  2105              MOVS     r1,#5                 ;413
000154  a0c4              ADR      r0,|L1.1128|
000156  f7fffffe          BL       snmp_trap_send
00015a  8828              LDRH     r0,[r5,#0]            ;414  ; snmp_bat_flag_puts
00015c  f0200010          BIC      r0,r0,#0x10           ;414
000160  8028              STRH     r0,[r5,#0]            ;414
                  |L1.354|
000162  f8960023          LDRB     r0,[r6,#0x23]         ;418  ; spc_stat
000166  2802              CMP      r0,#2                 ;418
000168  d037              BEQ      |L1.474|
00016a  8820              LDRH     r0,[r4,#0]            ;429  ; snmp_bat_flag
00016c  f0200020          BIC      r0,r0,#0x20           ;429
000170  8020              STRH     r0,[r4,#0]            ;429
000172  8828              LDRH     r0,[r5,#0]            ;430  ; snmp_bat_flag_puts
000174  0680              LSLS     r0,r0,#26             ;430
000176  d509              BPL      |L1.396|
000178  2309              MOVS     r3,#9                 ;432
00017a  2208              MOVS     r2,#8                 ;432
00017c  2105              MOVS     r1,#5                 ;432
00017e  a0c2              ADR      r0,|L1.1160|
000180  f7fffffe          BL       snmp_trap_send
000184  8828              LDRH     r0,[r5,#0]            ;433  ; snmp_bat_flag_puts
000186  f0200020          BIC      r0,r0,#0x20           ;433
00018a  8028              STRH     r0,[r5,#0]            ;433
                  |L1.396|
00018c  7870              LDRB     r0,[r6,#1]            ;437  ; vz_error
00018e  2800              CMP      r0,#0                 ;437
000190  d035              BEQ      |L1.510|
000192  8820              LDRH     r0,[r4,#0]            ;439  ; snmp_bat_flag
000194  f0400040          ORR      r0,r0,#0x40           ;439
000198  8020              STRH     r0,[r4,#0]            ;439
00019a  8828              LDRH     r0,[r5,#0]            ;440  ; snmp_bat_flag_puts
00019c  0640              LSLS     r0,r0,#25             ;440
00019e  d43f              BMI      |L1.544|
0001a0  230a              MOVS     r3,#0xa               ;442
0001a2  2208              MOVS     r2,#8                 ;442
0001a4  2105              MOVS     r1,#5                 ;442
0001a6  a0c1              ADR      r0,|L1.1196|
0001a8  f7fffffe          BL       snmp_trap_send
0001ac  8828              LDRH     r0,[r5,#0]            ;443  ; snmp_bat_flag_puts
0001ae  f0400040          ORR      r0,r0,#0x40           ;443
0001b2  8028              STRH     r0,[r5,#0]            ;443
0001b4  e034              B        |L1.544|
                  |L1.438|
0001b6  8820              LDRH     r0,[r4,#0]            ;401  ; snmp_bat_flag
0001b8  f0400010          ORR      r0,r0,#0x10           ;401
0001bc  8020              STRH     r0,[r4,#0]            ;401
0001be  8828              LDRH     r0,[r5,#0]            ;402  ; snmp_bat_flag_puts
0001c0  06c0              LSLS     r0,r0,#27             ;402
0001c2  d4ce              BMI      |L1.354|
0001c4  2306              MOVS     r3,#6                 ;404
0001c6  2208              MOVS     r2,#8                 ;404
0001c8  2105              MOVS     r1,#5                 ;404
0001ca  a0c1              ADR      r0,|L1.1232|
0001cc  f7fffffe          BL       snmp_trap_send
0001d0  8828              LDRH     r0,[r5,#0]            ;405  ; snmp_bat_flag_puts
0001d2  f0400010          ORR      r0,r0,#0x10           ;405
0001d6  8028              STRH     r0,[r5,#0]            ;405
0001d8  e7c3              B        |L1.354|
                  |L1.474|
0001da  8820              LDRH     r0,[r4,#0]            ;420  ; snmp_bat_flag
0001dc  f0400020          ORR      r0,r0,#0x20           ;420
0001e0  8020              STRH     r0,[r4,#0]            ;420
0001e2  8828              LDRH     r0,[r5,#0]            ;421  ; snmp_bat_flag_puts
0001e4  0680              LSLS     r0,r0,#26             ;421
0001e6  d4d1              BMI      |L1.396|
0001e8  2308              MOVS     r3,#8                 ;423
0001ea  461a              MOV      r2,r3                 ;423
0001ec  2105              MOVS     r1,#5                 ;423
0001ee  a0c0              ADR      r0,|L1.1264|
0001f0  f7fffffe          BL       snmp_trap_send
0001f4  8828              LDRH     r0,[r5,#0]            ;424  ; snmp_bat_flag_puts
0001f6  f0400020          ORR      r0,r0,#0x20           ;424
0001fa  8028              STRH     r0,[r5,#0]            ;424
0001fc  e7c6              B        |L1.396|
                  |L1.510|
0001fe  8820              LDRH     r0,[r4,#0]            ;448  ; snmp_bat_flag
000200  f0200040          BIC      r0,r0,#0x40           ;448
000204  8020              STRH     r0,[r4,#0]            ;448
000206  8828              LDRH     r0,[r5,#0]            ;449  ; snmp_bat_flag_puts
000208  0640              LSLS     r0,r0,#25             ;449
00020a  d509              BPL      |L1.544|
00020c  230b              MOVS     r3,#0xb               ;451
00020e  2208              MOVS     r2,#8                 ;451
000210  2105              MOVS     r1,#5                 ;451
000212  a0c0              ADR      r0,|L1.1300|
000214  f7fffffe          BL       snmp_trap_send
000218  8828              LDRH     r0,[r5,#0]            ;452  ; snmp_bat_flag_puts
00021a  f0200040          BIC      r0,r0,#0x40           ;452
00021e  8028              STRH     r0,[r5,#0]            ;452
                  |L1.544|
000220  48c5              LDR      r0,|L1.1336|
000222  7800              LDRB     r0,[r0,#0]            ;456  ; sp_ch_stat
000224  2802              CMP      r0,#2                 ;456
000226  d024              BEQ      |L1.626|
000228  8820              LDRH     r0,[r4,#0]            ;467  ; snmp_bat_flag
00022a  f0200080          BIC      r0,r0,#0x80           ;467
00022e  8020              STRH     r0,[r4,#0]            ;467
000230  8828              LDRH     r0,[r5,#0]            ;468  ; snmp_bat_flag_puts
000232  0600              LSLS     r0,r0,#24             ;468
000234  d509              BPL      |L1.586|
000236  230b              MOVS     r3,#0xb               ;470
000238  2208              MOVS     r2,#8                 ;470
00023a  2105              MOVS     r1,#5                 ;470
00023c  a0bf              ADR      r0,|L1.1340|
00023e  f7fffffe          BL       snmp_trap_send
000242  8828              LDRH     r0,[r5,#0]            ;471  ; snmp_bat_flag_puts
000244  f0200080          BIC      r0,r0,#0x80           ;471
000248  8028              STRH     r0,[r5,#0]            ;471
                  |L1.586|
00024a  78b0              LDRB     r0,[r6,#2]            ;475  ; sp_ch_error
00024c  b318              CBZ      r0,|L1.662|
00024e  8820              LDRH     r0,[r4,#0]            ;477  ; snmp_bat_flag
000250  f4407080          ORR      r0,r0,#0x100          ;477
000254  8020              STRH     r0,[r4,#0]            ;477
000256  8828              LDRH     r0,[r5,#0]            ;478  ; snmp_bat_flag_puts
000258  05c0              LSLS     r0,r0,#23             ;478
00025a  d42d              BMI      |L1.696|
00025c  230c              MOVS     r3,#0xc               ;480
00025e  2208              MOVS     r2,#8                 ;480
000260  2105              MOVS     r1,#5                 ;480
000262  a0be              ADR      r0,|L1.1372|
000264  f7fffffe          BL       snmp_trap_send
000268  8828              LDRH     r0,[r5,#0]            ;481  ; snmp_bat_flag_puts
00026a  f4407080          ORR      r0,r0,#0x100          ;481
00026e  8028              STRH     r0,[r5,#0]            ;481
000270  e022              B        |L1.696|
                  |L1.626|
000272  8820              LDRH     r0,[r4,#0]            ;458  ; snmp_bat_flag
000274  f0400080          ORR      r0,r0,#0x80           ;458
000278  8020              STRH     r0,[r4,#0]            ;458
00027a  8828              LDRH     r0,[r5,#0]            ;459  ; snmp_bat_flag_puts
00027c  0600              LSLS     r0,r0,#24             ;459
00027e  d4e4              BMI      |L1.586|
000280  230a              MOVS     r3,#0xa               ;461
000282  2208              MOVS     r2,#8                 ;461
000284  2105              MOVS     r1,#5                 ;461
000286  a0bd              ADR      r0,|L1.1404|
000288  f7fffffe          BL       snmp_trap_send
00028c  8828              LDRH     r0,[r5,#0]            ;462  ; snmp_bat_flag_puts
00028e  f0400080          ORR      r0,r0,#0x80           ;462
000292  8028              STRH     r0,[r5,#0]            ;462
000294  e7d9              B        |L1.586|
                  |L1.662|
000296  8820              LDRH     r0,[r4,#0]            ;486  ; snmp_bat_flag
000298  f4207080          BIC      r0,r0,#0x100          ;486
00029c  8020              STRH     r0,[r4,#0]            ;486
00029e  8828              LDRH     r0,[r5,#0]            ;487  ; snmp_bat_flag_puts
0002a0  05c0              LSLS     r0,r0,#23             ;487
0002a2  d509              BPL      |L1.696|
0002a4  230d              MOVS     r3,#0xd               ;489
0002a6  2208              MOVS     r2,#8                 ;489
0002a8  2105              MOVS     r1,#5                 ;489
0002aa  a0bc              ADR      r0,|L1.1436|
0002ac  f7fffffe          BL       snmp_trap_send
0002b0  8828              LDRH     r0,[r5,#0]            ;490  ; snmp_bat_flag_puts
0002b2  f4207080          BIC      r0,r0,#0x100          ;490
0002b6  8028              STRH     r0,[r5,#0]            ;490
                  |L1.696|
0002b8  7970              LDRB     r0,[r6,#5]            ;494  ; vz1_stat
0002ba  b188              CBZ      r0,|L1.736|
0002bc  8820              LDRH     r0,[r4,#0]            ;496  ; snmp_bat_flag
0002be  f4407000          ORR      r0,r0,#0x200          ;496
0002c2  8020              STRH     r0,[r4,#0]            ;496
0002c4  8828              LDRH     r0,[r5,#0]            ;497  ; snmp_bat_flag_puts
0002c6  0580              LSLS     r0,r0,#22             ;497
0002c8  d41b              BMI      |L1.770|
0002ca  230e              MOVS     r3,#0xe               ;499
0002cc  2208              MOVS     r2,#8                 ;499
0002ce  2105              MOVS     r1,#5                 ;499
0002d0  a0bb              ADR      r0,|L1.1472|
0002d2  f7fffffe          BL       snmp_trap_send
0002d6  8828              LDRH     r0,[r5,#0]            ;500  ; snmp_bat_flag_puts
0002d8  f4407000          ORR      r0,r0,#0x200          ;500
0002dc  8028              STRH     r0,[r5,#0]            ;500
0002de  e010              B        |L1.770|
                  |L1.736|
0002e0  8820              LDRH     r0,[r4,#0]            ;505  ; snmp_bat_flag
0002e2  f4207000          BIC      r0,r0,#0x200          ;505
0002e6  8020              STRH     r0,[r4,#0]            ;505
0002e8  8828              LDRH     r0,[r5,#0]            ;506  ; snmp_bat_flag_puts
0002ea  0580              LSLS     r0,r0,#22             ;506
0002ec  d509              BPL      |L1.770|
0002ee  230f              MOVS     r3,#0xf               ;508
0002f0  2208              MOVS     r2,#8                 ;508
0002f2  2105              MOVS     r1,#5                 ;508
0002f4  a0ba              ADR      r0,|L1.1504|
0002f6  f7fffffe          BL       snmp_trap_send
0002fa  8828              LDRH     r0,[r5,#0]            ;509  ; snmp_bat_flag_puts
0002fc  f4207000          BIC      r0,r0,#0x200          ;509
000300  8028              STRH     r0,[r5,#0]            ;509
                  |L1.770|
000302  78f0              LDRB     r0,[r6,#3]            ;513  ; vz1_error
000304  b188              CBZ      r0,|L1.810|
000306  8820              LDRH     r0,[r4,#0]            ;515  ; snmp_bat_flag
000308  f4406080          ORR      r0,r0,#0x400          ;515
00030c  8020              STRH     r0,[r4,#0]            ;515
00030e  8828              LDRH     r0,[r5,#0]            ;516  ; snmp_bat_flag_puts
000310  0540              LSLS     r0,r0,#21             ;516
000312  d41b              BMI      |L1.844|
000314  2310              MOVS     r3,#0x10              ;518
000316  2208              MOVS     r2,#8                 ;518
000318  2105              MOVS     r1,#5                 ;518
00031a  a0b9              ADR      r0,|L1.1536|
00031c  f7fffffe          BL       snmp_trap_send
000320  8828              LDRH     r0,[r5,#0]            ;519  ; snmp_bat_flag_puts
000322  f4406080          ORR      r0,r0,#0x400          ;519
000326  8028              STRH     r0,[r5,#0]            ;519
000328  e010              B        |L1.844|
                  |L1.810|
00032a  8820              LDRH     r0,[r4,#0]            ;524  ; snmp_bat_flag
00032c  f4206080          BIC      r0,r0,#0x400          ;524
000330  8020              STRH     r0,[r4,#0]            ;524
000332  8828              LDRH     r0,[r5,#0]            ;525  ; snmp_bat_flag_puts
000334  0540              LSLS     r0,r0,#21             ;525
000336  d509              BPL      |L1.844|
000338  2311              MOVS     r3,#0x11              ;527
00033a  2208              MOVS     r2,#8                 ;527
00033c  2105              MOVS     r1,#5                 ;527
00033e  a0b9              ADR      r0,|L1.1572|
000340  f7fffffe          BL       snmp_trap_send
000344  8828              LDRH     r0,[r5,#0]            ;528  ; snmp_bat_flag_puts
000346  f4206080          BIC      r0,r0,#0x400          ;528
00034a  8028              STRH     r0,[r5,#0]            ;528
                  |L1.844|
00034c  79f0              LDRB     r0,[r6,#7]            ;532  ; vz2_stat
00034e  b188              CBZ      r0,|L1.884|
000350  8820              LDRH     r0,[r4,#0]            ;534  ; snmp_bat_flag
000352  f4406000          ORR      r0,r0,#0x800          ;534
000356  8020              STRH     r0,[r4,#0]            ;534
000358  8828              LDRH     r0,[r5,#0]            ;535  ; snmp_bat_flag_puts
00035a  0500              LSLS     r0,r0,#20             ;535
00035c  d41b              BMI      |L1.918|
00035e  2312              MOVS     r3,#0x12              ;537
000360  2208              MOVS     r2,#8                 ;537
000362  2105              MOVS     r1,#5                 ;537
000364  a0b9              ADR      r0,|L1.1612|
000366  f7fffffe          BL       snmp_trap_send
00036a  8828              LDRH     r0,[r5,#0]            ;538  ; snmp_bat_flag_puts
00036c  f4406000          ORR      r0,r0,#0x800          ;538
000370  8028              STRH     r0,[r5,#0]            ;538
000372  e010              B        |L1.918|
                  |L1.884|
000374  8820              LDRH     r0,[r4,#0]            ;543  ; snmp_bat_flag
000376  f4206000          BIC      r0,r0,#0x800          ;543
00037a  8020              STRH     r0,[r4,#0]            ;543
00037c  8828              LDRH     r0,[r5,#0]            ;544  ; snmp_bat_flag_puts
00037e  0500              LSLS     r0,r0,#20             ;544
000380  d509              BPL      |L1.918|
000382  2313              MOVS     r3,#0x13              ;546
000384  2208              MOVS     r2,#8                 ;546
000386  2105              MOVS     r1,#5                 ;546
000388  a0b7              ADR      r0,|L1.1640|
00038a  f7fffffe          BL       snmp_trap_send
00038e  8828              LDRH     r0,[r5,#0]            ;547  ; snmp_bat_flag_puts
000390  f4206000          BIC      r0,r0,#0x800          ;547
000394  8028              STRH     r0,[r5,#0]            ;547
                  |L1.918|
000396  7930              LDRB     r0,[r6,#4]            ;551  ; vz2_error
000398  b190              CBZ      r0,|L1.960|
00039a  8820              LDRH     r0,[r4,#0]            ;553  ; snmp_bat_flag
00039c  f4405080          ORR      r0,r0,#0x1000         ;553
0003a0  8020              STRH     r0,[r4,#0]            ;553
0003a2  8828              LDRH     r0,[r5,#0]            ;554  ; snmp_bat_flag_puts
0003a4  04c0              LSLS     r0,r0,#19             ;554
0003a6  f53fae46          BMI      |L1.54|
0003aa  2314              MOVS     r3,#0x14              ;556
0003ac  2208              MOVS     r2,#8                 ;556
0003ae  2105              MOVS     r1,#5                 ;556
0003b0  a0b5              ADR      r0,|L1.1672|
0003b2  f7fffffe          BL       snmp_trap_send
0003b6  8828              LDRH     r0,[r5,#0]            ;557  ; snmp_bat_flag_puts
0003b8  f4405080          ORR      r0,r0,#0x1000         ;557
0003bc  8028              STRH     r0,[r5,#0]            ;557
                  |L1.958|
0003be  e63a              B        |L1.54|
                  |L1.960|
0003c0  8820              LDRH     r0,[r4,#0]            ;562  ; snmp_bat_flag
0003c2  f4205080          BIC      r0,r0,#0x1000         ;562
0003c6  8020              STRH     r0,[r4,#0]            ;562
0003c8  8828              LDRH     r0,[r5,#0]            ;563  ; snmp_bat_flag_puts
0003ca  04c0              LSLS     r0,r0,#19             ;563
0003cc  d5f7              BPL      |L1.958|
0003ce  2315              MOVS     r3,#0x15              ;565
0003d0  2208              MOVS     r2,#8                 ;565
0003d2  2105              MOVS     r1,#5                 ;565
0003d4  a0b5              ADR      r0,|L1.1708|
0003d6  f7fffffe          BL       snmp_trap_send
0003da  8828              LDRH     r0,[r5,#0]            ;566  ; snmp_bat_flag_puts
0003dc  f4205080          BIC      r0,r0,#0x1000         ;566
0003e0  8028              STRH     r0,[r5,#0]            ;566
0003e2  e628              B        |L1.54|
                  |L1.996|
0003e4  f9bb0000          LDRSH    r0,[r11,#0]           ;578  ; USIGN
0003e8  f9b8104e          LDRSH    r1,[r8,#0x4e]         ;578  ; bat
0003ec  eb000080          ADD      r0,r0,r0,LSL #2       ;578
0003f0  ebb10f40          CMP      r1,r0,LSL #1          ;578
0003f4  da05              BGE      |L1.1026|
0003f6  8860              LDRH     r0,[r4,#2]            ;580  ; snmp_bat_flag
0003f8  f0400001          ORR      r0,r0,#1              ;580
0003fc  8060              STRH     r0,[r4,#2]            ;580
0003fe  8868              LDRH     r0,[r5,#2]            ;581  ; snmp_bat_flag_puts
000400  e166              B        |L1.1744|
                  |L1.1026|
000402  e172              B        |L1.1770|
                  |L1.1028|
                          DCD      ||area_number.25||
                  |L1.1032|
                          DCD      snmp_bat_status
                  |L1.1036|
                          DCD      USIGN
                  |L1.1040|
                          DCD      bat
                  |L1.1044|
                          DCD      IKB
                  |L1.1048|
                          DCD      snmp_bat_flag
                  |L1.1052|
                          DCD      snmp_bat_flag_puts
                  |L1.1056|
000420  42415420          DCB      "BAT #1 Alarm, battery is low",0
000424  23312041
000428  6c61726d
00042c  2c206261
000430  74746572
000434  79206973
000438  206c6f77
00043c  00      
00043d  00                DCB      0
00043e  00                DCB      0
00043f  00                DCB      0
                  |L1.1088|
000440  42415420          DCB      "BAT #1 Alarm clear, battery is not low",0
000444  23312041
000448  6c61726d
00044c  20636c65
000450  61722c20
000454  62617474
000458  65727920
00045c  6973206e
000460  6f74206c
000464  6f7700  
000467  00                DCB      0
                  |L1.1128|
000468  42415420          DCB      "BAT #1, capacity test stopped",0
00046c  23312c20
000470  63617061
000474  63697479
000478  20746573
00047c  74207374
000480  6f707065
000484  6400    
000486  00                DCB      0
000487  00                DCB      0
                  |L1.1160|
000488  42415420          DCB      "BAT #1,leveling charge is stopped",0
00048c  23312c6c
000490  6576656c
000494  696e6720
000498  63686172
00049c  67652069
0004a0  73207374
0004a4  6f707065
0004a8  6400    
0004aa  00                DCB      0
0004ab  00                DCB      0
                  |L1.1196|
0004ac  42415420          DCB      "BAT #1,leveling charge is blocked",0
0004b0  23312c6c
0004b4  6576656c
0004b8  696e6720
0004bc  63686172
0004c0  67652069
0004c4  7320626c
0004c8  6f636b65
0004cc  6400    
0004ce  00                DCB      0
0004cf  00                DCB      0
                  |L1.1232|
0004d0  42415420          DCB      "BAT #1, capacity test started",0
0004d4  23312c20
0004d8  63617061
0004dc  63697479
0004e0  20746573
0004e4  74207374
0004e8  61727465
0004ec  6400    
0004ee  00                DCB      0
0004ef  00                DCB      0
                  |L1.1264|
0004f0  42415420          DCB      "BAT #1,leveling charge is started",0
0004f4  23312c6c
0004f8  6576656c
0004fc  696e6720
000500  63686172
000504  67652069
000508  73207374
00050c  61727465
000510  6400    
000512  00                DCB      0
000513  00                DCB      0
                  |L1.1300|
000514  42415420          DCB      "BAT #1,leveling charge is unblocked",0
000518  23312c6c
00051c  6576656c
000520  696e6720
000524  63686172
000528  67652069
00052c  7320756e
000530  626c6f63
000534  6b656400
                  |L1.1336|
                          DCD      sp_ch_stat
                  |L1.1340|
00053c  42415420          DCB      "BAT #1,speed charge is stopped",0
000540  23312c73
000544  70656564
000548  20636861
00054c  72676520
000550  69732073
000554  746f7070
000558  656400  
00055b  00                DCB      0
                  |L1.1372|
00055c  42415420          DCB      "BAT #1,speed charge is blocked",0
000560  23312c73
000564  70656564
000568  20636861
00056c  72676520
000570  69732062
000574  6c6f636b
000578  656400  
00057b  00                DCB      0
                  |L1.1404|
00057c  42415420          DCB      "BAT #1,speed charge is started",0
000580  23312c73
000584  70656564
000588  20636861
00058c  72676520
000590  69732073
000594  74617274
000598  656400  
00059b  00                DCB      0
                  |L1.1436|
00059c  42415420          DCB      "BAT #1,speed charge is unblocked",0
0005a0  23312c73
0005a4  70656564
0005a8  20636861
0005ac  72676520
0005b0  69732075
0005b4  6e626c6f
0005b8  636b6564
0005bc  00      
0005bd  00                DCB      0
0005be  00                DCB      0
0005bf  00                DCB      0
                  |L1.1472|
0005c0  42415420          DCB      "BAT #1,equalising charge is on",0
0005c4  23312c65
0005c8  7175616c
0005cc  6973696e
0005d0  67206368
0005d4  61726765
0005d8  20697320
0005dc  6f6e00  
0005df  00                DCB      0
                  |L1.1504|
0005e0  42415420          DCB      "BAT #1,equalising charge is off",0
0005e4  23312c65
0005e8  7175616c
0005ec  6973696e
0005f0  67206368
0005f4  61726765
0005f8  20697320
0005fc  6f666600
                  |L1.1536|
000600  42415420          DCB      "BAT #1,equalising charge is blocked",0
000604  23312c65
000608  7175616c
00060c  6973696e
000610  67206368
000614  61726765
000618  20697320
00061c  626c6f63
000620  6b656400
                  |L1.1572|
000624  42415420          DCB      "BAT #1,equalising charge is unblocked",0
000628  23312c65
00062c  7175616c
000630  6973696e
000634  67206368
000638  61726765
00063c  20697320
000640  756e626c
000644  6f636b65
000648  6400    
00064a  00                DCB      0
00064b  00                DCB      0
                  |L1.1612|
00064c  42415420          DCB      "BAT #1,molding charge is on",0
000650  23312c6d
000654  6f6c6469
000658  6e672063
00065c  68617267
000660  65206973
000664  206f6e00
                  |L1.1640|
000668  42415420          DCB      "BAT #1,molding charge is off",0
00066c  23312c6d
000670  6f6c6469
000674  6e672063
000678  68617267
00067c  65206973
000680  206f6666
000684  00      
000685  00                DCB      0
000686  00                DCB      0
000687  00                DCB      0
                  |L1.1672|
000688  42415420          DCB      "BAT #1,molding charge is blocked",0
00068c  23312c6d
000690  6f6c6469
000694  6e672063
000698  68617267
00069c  65206973
0006a0  20626c6f
0006a4  636b6564
0006a8  00      
0006a9  00                DCB      0
0006aa  00                DCB      0
0006ab  00                DCB      0
                  |L1.1708|
0006ac  42415420          DCB      "BAT #1,molding charge is unblocked",0
0006b0  23312c6d
0006b4  6f6c6469
0006b8  6e672063
0006bc  68617267
0006c0  65206973
0006c4  20756e62
0006c8  6c6f636b
0006cc  656400  
0006cf  00                DCB      0
                  |L1.1744|
0006d0  07c0              LSLS     r0,r0,#31             ;581
0006d2  d11b              BNE      |L1.1804|
0006d4  2316              MOVS     r3,#0x16              ;583
0006d6  2208              MOVS     r2,#8                 ;583
0006d8  2105              MOVS     r1,#5                 ;583
0006da  a0ff              ADR      r0,|L1.2776|
0006dc  f7fffffe          BL       snmp_trap_send
0006e0  8868              LDRH     r0,[r5,#2]            ;584  ; snmp_bat_flag_puts
0006e2  f0400001          ORR      r0,r0,#1              ;584
0006e6  8068              STRH     r0,[r5,#2]            ;584
0006e8  e010              B        |L1.1804|
                  |L1.1770|
0006ea  8860              LDRH     r0,[r4,#2]            ;589  ; snmp_bat_flag
0006ec  f0200001          BIC      r0,r0,#1              ;589
0006f0  8060              STRH     r0,[r4,#2]            ;589
0006f2  8868              LDRH     r0,[r5,#2]            ;590  ; snmp_bat_flag_puts
0006f4  07c0              LSLS     r0,r0,#31             ;590
0006f6  d009              BEQ      |L1.1804|
0006f8  2317              MOVS     r3,#0x17              ;592
0006fa  2208              MOVS     r2,#8                 ;592
0006fc  2105              MOVS     r1,#5                 ;592
0006fe  a0fe              ADR      r0,|L1.2808|
000700  f7fffffe          BL       snmp_trap_send
000704  8868              LDRH     r0,[r5,#2]            ;593  ; snmp_bat_flag_puts
000706  f0200001          BIC      r0,r0,#1              ;593
00070a  8068              STRH     r0,[r5,#2]            ;593
                  |L1.1804|
00070c  f898008b          LDRB     r0,[r8,#0x8b]         ;597  ; bat
000710  07c1              LSLS     r1,r0,#31             ;597
000712  d00b              BEQ      |L1.1836|
000714  8861              LDRH     r1,[r4,#2]            ;599  ; snmp_bat_flag
000716  f0410102          ORR      r1,r1,#2              ;599
00071a  8061              STRH     r1,[r4,#2]            ;599
00071c  8829              LDRH     r1,[r5,#0]            ;600  ; snmp_bat_flag_puts
00071e  0789              LSLS     r1,r1,#30             ;600
000720  d40f              BMI      |L1.1858|
000722  8869              LDRH     r1,[r5,#2]            ;603  ; snmp_bat_flag_puts
000724  f0410102          ORR      r1,r1,#2              ;603
000728  8069              STRH     r1,[r5,#2]            ;603
00072a  e00a              B        |L1.1858|
                  |L1.1836|
00072c  8861              LDRH     r1,[r4,#2]            ;608  ; snmp_bat_flag
00072e  f0210102          BIC      r1,r1,#2              ;608
000732  8061              STRH     r1,[r4,#2]            ;608
000734  f9b51002          LDRSH    r1,[r5,#2]            ;609  ; snmp_bat_flag_puts
000738  078a              LSLS     r2,r1,#30             ;609
00073a  d502              BPL      |L1.1858|
00073c  f0210102          BIC      r1,r1,#2              ;612
000740  8069              STRH     r1,[r5,#2]            ;612
                  |L1.1858|
000742  0780              LSLS     r0,r0,#30             ;616
000744  d50b              BPL      |L1.1886|
000746  8860              LDRH     r0,[r4,#2]            ;618  ; snmp_bat_flag
000748  f0400004          ORR      r0,r0,#4              ;618
00074c  8060              STRH     r0,[r4,#2]            ;618
00074e  f9b50002          LDRSH    r0,[r5,#2]            ;619  ; snmp_bat_flag_puts
000752  0741              LSLS     r1,r0,#29             ;619
000754  d40e              BMI      |L1.1908|
000756  f0400004          ORR      r0,r0,#4              ;622
00075a  8068              STRH     r0,[r5,#2]            ;622
00075c  e00a              B        |L1.1908|
                  |L1.1886|
00075e  8860              LDRH     r0,[r4,#2]            ;627  ; snmp_bat_flag
000760  f0200004          BIC      r0,r0,#4              ;627
000764  8060              STRH     r0,[r4,#2]            ;627
000766  f9b50002          LDRSH    r0,[r5,#2]            ;628  ; snmp_bat_flag_puts
00076a  0741              LSLS     r1,r0,#29             ;628
00076c  d502              BPL      |L1.1908|
00076e  f0200004          BIC      r0,r0,#4              ;631
000772  8068              STRH     r0,[r5,#2]            ;631
                  |L1.1908|
000774  f9b91000          LDRSH    r1,[r9,#0]            ;635  ; IKB
000778  f9b80054          LDRSH    r0,[r8,#0x54]         ;635  ; bat
00077c  424a              RSBS     r2,r1,#0              ;635
00077e  4290              CMP      r0,r2                 ;635
000780  da04              BGE      |L1.1932|
000782  8860              LDRH     r0,[r4,#2]            ;635  ; snmp_bat_flag
000784  f0400008          ORR      r0,r0,#8              ;635
000788  8060              STRH     r0,[r4,#2]            ;635
00078a  e005              B        |L1.1944|
                  |L1.1932|
00078c  4288              CMP      r0,r1                 ;636
00078e  dd03              BLE      |L1.1944|
000790  8860              LDRH     r0,[r4,#2]            ;636  ; snmp_bat_flag
000792  f0200008          BIC      r0,r0,#8              ;636
000796  8060              STRH     r0,[r4,#2]            ;636
                  |L1.1944|
000798  f8960023          LDRB     r0,[r6,#0x23]         ;638  ; spc_stat
00079c  2801              CMP      r0,#1                 ;638
00079e  d102              BNE      |L1.1958|
0007a0  f8960024          LDRB     r0,[r6,#0x24]         ;638  ; spc_bat
0007a4  b3c8              CBZ      r0,|L1.2074|
                  |L1.1958|
0007a6  8860              LDRH     r0,[r4,#2]            ;649  ; snmp_bat_flag
0007a8  f0200010          BIC      r0,r0,#0x10           ;649
0007ac  8060              STRH     r0,[r4,#2]            ;649
0007ae  8868              LDRH     r0,[r5,#2]            ;650  ; snmp_bat_flag_puts
0007b0  06c0              LSLS     r0,r0,#27             ;650
0007b2  d509              BPL      |L1.1992|
0007b4  231d              MOVS     r3,#0x1d              ;652
0007b6  2208              MOVS     r2,#8                 ;652
0007b8  2105              MOVS     r1,#5                 ;652
0007ba  a0d9              ADR      r0,|L1.2848|
0007bc  f7fffffe          BL       snmp_trap_send
0007c0  8868              LDRH     r0,[r5,#2]            ;653  ; snmp_bat_flag_puts
0007c2  f0200010          BIC      r0,r0,#0x10           ;653
0007c6  8068              STRH     r0,[r5,#2]            ;653
                  |L1.1992|
0007c8  f8960023          LDRB     r0,[r6,#0x23]         ;657  ; spc_stat
0007cc  2802              CMP      r0,#2                 ;657
0007ce  d037              BEQ      |L1.2112|
0007d0  8860              LDRH     r0,[r4,#2]            ;668  ; snmp_bat_flag
0007d2  f0200020          BIC      r0,r0,#0x20           ;668
0007d6  8060              STRH     r0,[r4,#2]            ;668
0007d8  8868              LDRH     r0,[r5,#2]            ;669  ; snmp_bat_flag_puts
0007da  0680              LSLS     r0,r0,#26             ;669
0007dc  d509              BPL      |L1.2034|
0007de  231f              MOVS     r3,#0x1f              ;671
0007e0  2208              MOVS     r2,#8                 ;671
0007e2  2105              MOVS     r1,#5                 ;671
0007e4  a0d6              ADR      r0,|L1.2880|
0007e6  f7fffffe          BL       snmp_trap_send
0007ea  8868              LDRH     r0,[r5,#2]            ;672  ; snmp_bat_flag_puts
0007ec  f0200020          BIC      r0,r0,#0x20           ;672
0007f0  8068              STRH     r0,[r5,#2]            ;672
                  |L1.2034|
0007f2  7870              LDRB     r0,[r6,#1]            ;676  ; vz_error
0007f4  b3b0              CBZ      r0,|L1.2148|
0007f6  8860              LDRH     r0,[r4,#2]            ;678  ; snmp_bat_flag
0007f8  f0400040          ORR      r0,r0,#0x40           ;678
0007fc  8060              STRH     r0,[r4,#2]            ;678
0007fe  8868              LDRH     r0,[r5,#2]            ;679  ; snmp_bat_flag_puts
000800  0640              LSLS     r0,r0,#25             ;679
000802  d441              BMI      |L1.2184|
000804  2320              MOVS     r3,#0x20              ;681
000806  2208              MOVS     r2,#8                 ;681
000808  2105              MOVS     r1,#5                 ;681
00080a  a0d6              ADR      r0,|L1.2916|
00080c  f7fffffe          BL       snmp_trap_send
000810  8868              LDRH     r0,[r5,#2]            ;682  ; snmp_bat_flag_puts
000812  f0400040          ORR      r0,r0,#0x40           ;682
000816  8068              STRH     r0,[r5,#2]            ;682
000818  e036              B        |L1.2184|
                  |L1.2074|
00081a  e7ff              B        |L1.2076|
                  |L1.2076|
00081c  8860              LDRH     r0,[r4,#2]            ;640  ; snmp_bat_flag
00081e  f0400010          ORR      r0,r0,#0x10           ;640
000822  8060              STRH     r0,[r4,#2]            ;640
000824  8868              LDRH     r0,[r5,#2]            ;641  ; snmp_bat_flag_puts
000826  06c0              LSLS     r0,r0,#27             ;641
000828  d4ce              BMI      |L1.1992|
00082a  231c              MOVS     r3,#0x1c              ;643
00082c  2208              MOVS     r2,#8                 ;643
00082e  2105              MOVS     r1,#5                 ;643
000830  a0d5              ADR      r0,|L1.2952|
000832  f7fffffe          BL       snmp_trap_send
000836  8868              LDRH     r0,[r5,#2]            ;644  ; snmp_bat_flag_puts
000838  f0400010          ORR      r0,r0,#0x10           ;644
00083c  8068              STRH     r0,[r5,#2]            ;644
00083e  e7c3              B        |L1.1992|
                  |L1.2112|
000840  8860              LDRH     r0,[r4,#2]            ;659  ; snmp_bat_flag
000842  f0400020          ORR      r0,r0,#0x20           ;659
000846  8060              STRH     r0,[r4,#2]            ;659
000848  8868              LDRH     r0,[r5,#2]            ;660  ; snmp_bat_flag_puts
00084a  0680              LSLS     r0,r0,#26             ;660
00084c  d4d1              BMI      |L1.2034|
00084e  231e              MOVS     r3,#0x1e              ;662
000850  2208              MOVS     r2,#8                 ;662
000852  2105              MOVS     r1,#5                 ;662
000854  a0d4              ADR      r0,|L1.2984|
000856  f7fffffe          BL       snmp_trap_send
00085a  8868              LDRH     r0,[r5,#2]            ;663  ; snmp_bat_flag_puts
00085c  f0400020          ORR      r0,r0,#0x20           ;663
000860  8068              STRH     r0,[r5,#2]            ;663
000862  e7c6              B        |L1.2034|
                  |L1.2148|
000864  e7ff              B        |L1.2150|
                  |L1.2150|
000866  8860              LDRH     r0,[r4,#2]            ;687  ; snmp_bat_flag
000868  f0200040          BIC      r0,r0,#0x40           ;687
00086c  8060              STRH     r0,[r4,#2]            ;687
00086e  8868              LDRH     r0,[r5,#2]            ;688  ; snmp_bat_flag_puts
000870  0640              LSLS     r0,r0,#25             ;688
000872  d509              BPL      |L1.2184|
000874  2321              MOVS     r3,#0x21              ;690
000876  2208              MOVS     r2,#8                 ;690
000878  2105              MOVS     r1,#5                 ;690
00087a  a0d4              ADR      r0,|L1.3020|
00087c  f7fffffe          BL       snmp_trap_send
000880  8868              LDRH     r0,[r5,#2]            ;691  ; snmp_bat_flag_puts
000882  f0200040          BIC      r0,r0,#0x40           ;691
000886  8068              STRH     r0,[r5,#2]            ;691
                  |L1.2184|
000888  48d9              LDR      r0,|L1.3056|
00088a  7800              LDRB     r0,[r0,#0]            ;695  ; sp_ch_stat
00088c  2802              CMP      r0,#2                 ;695
00088e  d024              BEQ      |L1.2266|
000890  8860              LDRH     r0,[r4,#2]            ;706  ; snmp_bat_flag
000892  f0200080          BIC      r0,r0,#0x80           ;706
000896  8060              STRH     r0,[r4,#2]            ;706
000898  8868              LDRH     r0,[r5,#2]            ;707  ; snmp_bat_flag_puts
00089a  0600              LSLS     r0,r0,#24             ;707
00089c  d509              BPL      |L1.2226|
00089e  2323              MOVS     r3,#0x23              ;709
0008a0  2208              MOVS     r2,#8                 ;709
0008a2  2105              MOVS     r1,#5                 ;709
0008a4  a0d3              ADR      r0,|L1.3060|
0008a6  f7fffffe          BL       snmp_trap_send
0008aa  8868              LDRH     r0,[r5,#2]            ;710  ; snmp_bat_flag_puts
0008ac  f0200080          BIC      r0,r0,#0x80           ;710
0008b0  8068              STRH     r0,[r5,#2]            ;710
                  |L1.2226|
0008b2  78b0              LDRB     r0,[r6,#2]            ;714  ; sp_ch_error
0008b4  b318              CBZ      r0,|L1.2302|
0008b6  8860              LDRH     r0,[r4,#2]            ;716  ; snmp_bat_flag
0008b8  f4407080          ORR      r0,r0,#0x100          ;716
0008bc  8060              STRH     r0,[r4,#2]            ;716
0008be  8868              LDRH     r0,[r5,#2]            ;717  ; snmp_bat_flag_puts
0008c0  05c0              LSLS     r0,r0,#23             ;717
0008c2  d42d              BMI      |L1.2336|
0008c4  2324              MOVS     r3,#0x24              ;719
0008c6  2208              MOVS     r2,#8                 ;719
0008c8  2105              MOVS     r1,#5                 ;719
0008ca  a0d2              ADR      r0,|L1.3092|
0008cc  f7fffffe          BL       snmp_trap_send
0008d0  8868              LDRH     r0,[r5,#2]            ;720  ; snmp_bat_flag_puts
0008d2  f4407080          ORR      r0,r0,#0x100          ;720
0008d6  8068              STRH     r0,[r5,#2]            ;720
0008d8  e022              B        |L1.2336|
                  |L1.2266|
0008da  8860              LDRH     r0,[r4,#2]            ;697  ; snmp_bat_flag
0008dc  f0400080          ORR      r0,r0,#0x80           ;697
0008e0  8060              STRH     r0,[r4,#2]            ;697
0008e2  8868              LDRH     r0,[r5,#2]            ;698  ; snmp_bat_flag_puts
0008e4  0600              LSLS     r0,r0,#24             ;698
0008e6  d4e4              BMI      |L1.2226|
0008e8  2322              MOVS     r3,#0x22              ;700
0008ea  2208              MOVS     r2,#8                 ;700
0008ec  2105              MOVS     r1,#5                 ;700
0008ee  a0d1              ADR      r0,|L1.3124|
0008f0  f7fffffe          BL       snmp_trap_send
0008f4  8868              LDRH     r0,[r5,#2]            ;701  ; snmp_bat_flag_puts
0008f6  f0400080          ORR      r0,r0,#0x80           ;701
0008fa  8068              STRH     r0,[r5,#2]            ;701
0008fc  e7d9              B        |L1.2226|
                  |L1.2302|
0008fe  8860              LDRH     r0,[r4,#2]            ;725  ; snmp_bat_flag
000900  f4207080          BIC      r0,r0,#0x100          ;725
000904  8060              STRH     r0,[r4,#2]            ;725
000906  8868              LDRH     r0,[r5,#2]            ;726  ; snmp_bat_flag_puts
000908  05c0              LSLS     r0,r0,#23             ;726
00090a  d509              BPL      |L1.2336|
00090c  2325              MOVS     r3,#0x25              ;728
00090e  2208              MOVS     r2,#8                 ;728
000910  2105              MOVS     r1,#5                 ;728
000912  a0d0              ADR      r0,|L1.3156|
000914  f7fffffe          BL       snmp_trap_send
000918  8868              LDRH     r0,[r5,#2]            ;729  ; snmp_bat_flag_puts
00091a  f4207080          BIC      r0,r0,#0x100          ;729
00091e  8068              STRH     r0,[r5,#2]            ;729
                  |L1.2336|
000920  7970              LDRB     r0,[r6,#5]            ;733  ; vz1_stat
000922  b188              CBZ      r0,|L1.2376|
000924  8860              LDRH     r0,[r4,#2]            ;735  ; snmp_bat_flag
000926  f4407000          ORR      r0,r0,#0x200          ;735
00092a  8060              STRH     r0,[r4,#2]            ;735
00092c  8868              LDRH     r0,[r5,#2]            ;736  ; snmp_bat_flag_puts
00092e  0580              LSLS     r0,r0,#22             ;736
000930  d41b              BMI      |L1.2410|
000932  2326              MOVS     r3,#0x26              ;738
000934  2208              MOVS     r2,#8                 ;738
000936  2105              MOVS     r1,#5                 ;738
000938  a0cf              ADR      r0,|L1.3192|
00093a  f7fffffe          BL       snmp_trap_send
00093e  8868              LDRH     r0,[r5,#2]            ;739  ; snmp_bat_flag_puts
000940  f4407000          ORR      r0,r0,#0x200          ;739
000944  8068              STRH     r0,[r5,#2]            ;739
000946  e010              B        |L1.2410|
                  |L1.2376|
000948  8860              LDRH     r0,[r4,#2]            ;744  ; snmp_bat_flag
00094a  f4207000          BIC      r0,r0,#0x200          ;744
00094e  8060              STRH     r0,[r4,#2]            ;744
000950  8868              LDRH     r0,[r5,#2]            ;745  ; snmp_bat_flag_puts
000952  0580              LSLS     r0,r0,#22             ;745
000954  d509              BPL      |L1.2410|
000956  2327              MOVS     r3,#0x27              ;747
000958  2208              MOVS     r2,#8                 ;747
00095a  2105              MOVS     r1,#5                 ;747
00095c  a0ce              ADR      r0,|L1.3224|
00095e  f7fffffe          BL       snmp_trap_send
000962  8868              LDRH     r0,[r5,#2]            ;748  ; snmp_bat_flag_puts
000964  f4207000          BIC      r0,r0,#0x200          ;748
000968  8068              STRH     r0,[r5,#2]            ;748
                  |L1.2410|
00096a  78f0              LDRB     r0,[r6,#3]            ;752  ; vz1_error
00096c  b188              CBZ      r0,|L1.2450|
00096e  8860              LDRH     r0,[r4,#2]            ;754  ; snmp_bat_flag
000970  f4406080          ORR      r0,r0,#0x400          ;754
000974  8060              STRH     r0,[r4,#2]            ;754
000976  8868              LDRH     r0,[r5,#2]            ;755  ; snmp_bat_flag_puts
000978  0540              LSLS     r0,r0,#21             ;755
00097a  d41b              BMI      |L1.2484|
00097c  2328              MOVS     r3,#0x28              ;757
00097e  2208              MOVS     r2,#8                 ;757
000980  2105              MOVS     r1,#5                 ;757
000982  a0cd              ADR      r0,|L1.3256|
000984  f7fffffe          BL       snmp_trap_send
000988  8868              LDRH     r0,[r5,#2]            ;758  ; snmp_bat_flag_puts
00098a  f4406080          ORR      r0,r0,#0x400          ;758
00098e  8068              STRH     r0,[r5,#2]            ;758
000990  e010              B        |L1.2484|
                  |L1.2450|
000992  8860              LDRH     r0,[r4,#2]            ;763  ; snmp_bat_flag
000994  f4206080          BIC      r0,r0,#0x400          ;763
000998  8060              STRH     r0,[r4,#2]            ;763
00099a  8868              LDRH     r0,[r5,#2]            ;764  ; snmp_bat_flag_puts
00099c  0540              LSLS     r0,r0,#21             ;764
00099e  d509              BPL      |L1.2484|
0009a0  2329              MOVS     r3,#0x29              ;766
0009a2  2208              MOVS     r2,#8                 ;766
0009a4  2105              MOVS     r1,#5                 ;766
0009a6  a0cd              ADR      r0,|L1.3292|
0009a8  f7fffffe          BL       snmp_trap_send
0009ac  8868              LDRH     r0,[r5,#2]            ;767  ; snmp_bat_flag_puts
0009ae  f4206080          BIC      r0,r0,#0x400          ;767
0009b2  8068              STRH     r0,[r5,#2]            ;767
                  |L1.2484|
0009b4  79f0              LDRB     r0,[r6,#7]            ;771  ; vz2_stat
0009b6  b188              CBZ      r0,|L1.2524|
0009b8  8860              LDRH     r0,[r4,#2]            ;773  ; snmp_bat_flag
0009ba  f4406000          ORR      r0,r0,#0x800          ;773
0009be  8060              STRH     r0,[r4,#2]            ;773
0009c0  8868              LDRH     r0,[r5,#2]            ;774  ; snmp_bat_flag_puts
0009c2  0500              LSLS     r0,r0,#20             ;774
0009c4  d41b              BMI      |L1.2558|
0009c6  232a              MOVS     r3,#0x2a              ;776
0009c8  2208              MOVS     r2,#8                 ;776
0009ca  2105              MOVS     r1,#5                 ;776
0009cc  a0cd              ADR      r0,|L1.3332|
0009ce  f7fffffe          BL       snmp_trap_send
0009d2  8868              LDRH     r0,[r5,#2]            ;777  ; snmp_bat_flag_puts
0009d4  f4406000          ORR      r0,r0,#0x800          ;777
0009d8  8068              STRH     r0,[r5,#2]            ;777
0009da  e010              B        |L1.2558|
                  |L1.2524|
0009dc  8860              LDRH     r0,[r4,#2]            ;782  ; snmp_bat_flag
0009de  f4206000          BIC      r0,r0,#0x800          ;782
0009e2  8060              STRH     r0,[r4,#2]            ;782
0009e4  8868              LDRH     r0,[r5,#2]            ;783  ; snmp_bat_flag_puts
0009e6  0500              LSLS     r0,r0,#20             ;783
0009e8  d509              BPL      |L1.2558|
0009ea  232b              MOVS     r3,#0x2b              ;785
0009ec  2208              MOVS     r2,#8                 ;785
0009ee  2105              MOVS     r1,#5                 ;785
0009f0  a0cb              ADR      r0,|L1.3360|
0009f2  f7fffffe          BL       snmp_trap_send
0009f6  8868              LDRH     r0,[r5,#2]            ;786  ; snmp_bat_flag_puts
0009f8  f4206000          BIC      r0,r0,#0x800          ;786
0009fc  8068              STRH     r0,[r5,#2]            ;786
                  |L1.2558|
0009fe  7930              LDRB     r0,[r6,#4]            ;790  ; vz2_error
000a00  b198              CBZ      r0,|L1.2602|
000a02  8860              LDRH     r0,[r4,#2]            ;792  ; snmp_bat_flag
000a04  f4405080          ORR      r0,r0,#0x1000         ;792
000a08  8060              STRH     r0,[r4,#2]            ;792
000a0a  8868              LDRH     r0,[r5,#2]            ;793  ; snmp_bat_flag_puts
000a0c  04c0              LSLS     r0,r0,#19             ;793
000a0e  f53fab18          BMI      |L1.66|
000a12  232c              MOVS     r3,#0x2c              ;795
000a14  2208              MOVS     r2,#8                 ;795
000a16  2105              MOVS     r1,#5                 ;795
000a18  a0c9              ADR      r0,|L1.3392|
000a1a  f7fffffe          BL       snmp_trap_send
000a1e  8868              LDRH     r0,[r5,#2]            ;796  ; snmp_bat_flag_puts
000a20  f4405080          ORR      r0,r0,#0x1000         ;796
000a24  8068              STRH     r0,[r5,#2]            ;796
                  |L1.2598|
000a26  e8bd9ff0          POP      {r4-r12,pc}
                  |L1.2602|
000a2a  8860              LDRH     r0,[r4,#2]            ;801  ; snmp_bat_flag
000a2c  f4205080          BIC      r0,r0,#0x1000         ;801
000a30  8060              STRH     r0,[r4,#2]            ;801
000a32  8868              LDRH     r0,[r5,#2]            ;802  ; snmp_bat_flag_puts
000a34  04c0              LSLS     r0,r0,#19             ;802
000a36  d5f6              BPL      |L1.2598|
000a38  232d              MOVS     r3,#0x2d              ;804
000a3a  2208              MOVS     r2,#8                 ;804
000a3c  2105              MOVS     r1,#5                 ;804
000a3e  a0c9              ADR      r0,|L1.3428|
000a40  f7fffffe          BL       snmp_trap_send
000a44  8868              LDRH     r0,[r5,#2]            ;805  ; snmp_bat_flag_puts
000a46  f4205080          BIC      r0,r0,#0x1000         ;805
000a4a  8068              STRH     r0,[r5,#2]            ;805
000a4c  e7eb              B        |L1.2598|
;;;938    
                          ENDP

                  ke_start PROC
;;;941    //-----------------------------------------------
;;;942    void ke_start(char in)
000a4e  e92d41fc          PUSH     {r2-r8,lr}
;;;943    {          
000a52  4606              MOV      r6,r0
;;;944    ke_start_stat=(enum_ke_start_stat)0;		 
000a54  4dcc              LDR      r5,|L1.3464|
000a56  f04f0400          MOV      r4,#0
;;;945    /*
;;;946    if(spc_stat==spcVZ)ke_start_stat=kssNOT_VZ;
;;;947    #ifndef UKU_220_IPS_TERMOKOMPENSAT
;;;948    else if(BAT_IS_ON[in]!=bisON)ke_start_stat=kssNOT_BAT;
;;;949    #endif
;;;950    else if(bat[in]._av&(1<<0))ke_start_stat=kssNOT_BAT_AV;
;;;951    else if(bat[in]._temper_stat&(1<<1))ke_start_stat=kssNOT_BAT_AV_T;
;;;952    else if(bat[in]._av&(1<<1))ke_start_stat=kssNOT_BAT_AV_ASS;
;;;953    else if(bat[in]._Ib>IKB)ke_start_stat=kssNOT_BAT_ZAR;
;;;954    else if(bat[in]._Ib<-IKB)ke_start_stat=kssNOT_BAT_RAZR;
;;;955    else if((spc_stat==spcKE)&&(spc_bat==0))ke_start_stat=kssNOT_KE1;
;;;956    else if((spc_stat==spcKE)&&(spc_bat==1))ke_start_stat=kssNOT_KE2;
;;;957    else */
;;;958    	{
;;;959    
;;;960    	ke_start_stat=kssYES;
000a5a  f105050a          ADD      r5,r5,#0xa
000a5e  f04f0064          MOV      r0,#0x64
000a62  7768              STRB     r0,[r5,#0x1d]
;;;961    
;;;962    	spc_stat=spcKE;
000a64  f04f0701          MOV      r7,#1
000a68  766f              STRB     r7,[r5,#0x19]
;;;963    	__ee_spc_stat=spcKE;
000a6a  f8a57060          STRH     r7,[r5,#0x60]
;;;964    	lc640_write_int(EE_SPC_STAT,__ee_spc_stat);
000a6e  4639              MOV      r1,r7
000a70  f240209a          MOV      r0,#0x29a
000a74  f7fffffe          BL       lc640_write_int
;;;965    	
;;;966    	spc_bat=0;
000a78  76ac              STRB     r4,[r5,#0x1a]
;;;967    	__ee_spc_bat=0;
000a7a  f8a54062          STRH     r4,[r5,#0x62]
;;;968    	lc640_write_int(EE_SPC_BAT,__ee_spc_bat);
000a7e  4621              MOV      r1,r4
000a80  f240209e          MOV      r0,#0x29e
000a84  f7fffffe          BL       lc640_write_int
;;;969    
;;;970    	bat[0]._zar_cnt_ke=0;
000a88  f8df8300          LDR      r8,|L1.3468|
000a8c  f8c84018          STR      r4,[r8,#0x18]  ; bat
;;;971    	lc640_write_int(ADR_EE_BAT_ZAR_CNT_KE[0],0);
000a90  48bf              LDR      r0,|L1.3472|
000a92  2100              MOVS     r1,#0
000a94  f9b00000          LDRSH    r0,[r0,#0]  ; ADR_EE_BAT_ZAR_CNT_KE
000a98  f7fffffe          BL       lc640_write_int
;;;972    
;;;973    	bat[0]._time_min_cnt_ke=0;
000a9c  f8a8404a          STRH     r4,[r8,#0x4a]
;;;974    	lc640_write_int(EE_ZVU_BAT_MIN_CNT_KE,0);
000aa0  2100              MOVS     r1,#0
000aa2  f44f70e3          MOV      r0,#0x1c6
000aa6  f7fffffe          BL       lc640_write_int
;;;975    
;;;976    	
;;;977    	spc_phase=0;
000aaa  76ec              STRB     r4,[r5,#0x1b]
;;;978    	__ee_spc_phase=0;
000aac  f8a54064          STRH     r4,[r5,#0x64]
;;;979    	lc640_write_int(EE_SPC_PHASE,__ee_spc_phase);
000ab0  4621              MOV      r1,r4
000ab2  f44f7028          MOV      r0,#0x2a0
000ab6  f7fffffe          BL       lc640_write_int
;;;980    
;;;981    	//ke_mem_hndl(in,lc640_read_int(ADR_EE_BAT_ZAR_CNT_KE[spc_bat]));
;;;982    
;;;983    		{					
;;;984    		signed short temp_temp;
;;;985    		signed char temp;
;;;986    		temp_temp=bat[in]._u_old[((bat_u_old_cnt+1)&0x07)]; 
000aba  eb060046          ADD      r0,r6,r6,LSL #1
000abe  eb001006          ADD      r0,r0,r6,LSL #4
000ac2  eb080180          ADD      r1,r8,r0,LSL #2
000ac6  48b3              LDR      r0,|L1.3476|
000ac8  8800              LDRH     r0,[r0,#0]  ; bat_u_old_cnt
000aca  f1000001          ADD      r0,r0,#1
000ace  f0000007          AND      r0,r0,#7
000ad2  eb010040          ADD      r0,r1,r0,LSL #1
000ad6  e15f              B        |L1.3480|
                  |L1.2776|
000ad8  42415420          DCB      "BAT #2 Alarm, battery is low",0
000adc  23322041
000ae0  6c61726d
000ae4  2c206261
000ae8  74746572
000aec  79206973
000af0  206c6f77
000af4  00      
000af5  00                DCB      0
000af6  00                DCB      0
000af7  00                DCB      0
                  |L1.2808|
000af8  42415420          DCB      "BAT #2 Alarm clear, battery is not low",0
000afc  23322041
000b00  6c61726d
000b04  20636c65
000b08  61722c20
000b0c  62617474
000b10  65727920
000b14  6973206e
000b18  6f74206c
000b1c  6f7700  
000b1f  00                DCB      0
                  |L1.2848|
000b20  42415420          DCB      "BAT #2, capacity test stopped",0
000b24  23322c20
000b28  63617061
000b2c  63697479
000b30  20746573
000b34  74207374
000b38  6f707065
000b3c  6400    
000b3e  00                DCB      0
000b3f  00                DCB      0
                  |L1.2880|
000b40  42415420          DCB      "BAT #2,leveling charge is stopped",0
000b44  23322c6c
000b48  6576656c
000b4c  696e6720
000b50  63686172
000b54  67652069
000b58  73207374
000b5c  6f707065
000b60  6400    
000b62  00                DCB      0
000b63  00                DCB      0
                  |L1.2916|
000b64  42415420          DCB      "BAT #2,leveling charge is blocked",0
000b68  23322c6c
000b6c  6576656c
000b70  696e6720
000b74  63686172
000b78  67652069
000b7c  7320626c
000b80  6f636b65
000b84  6400    
000b86  00                DCB      0
000b87  00                DCB      0
                  |L1.2952|
000b88  42415420          DCB      "BAT #2, capacity test started",0
000b8c  23322c20
000b90  63617061
000b94  63697479
000b98  20746573
000b9c  74207374
000ba0  61727465
000ba4  6400    
000ba6  00                DCB      0
000ba7  00                DCB      0
                  |L1.2984|
000ba8  42415420          DCB      "BAT #2,leveling charge is started",0
000bac  23322c6c
000bb0  6576656c
000bb4  696e6720
000bb8  63686172
000bbc  67652069
000bc0  73207374
000bc4  61727465
000bc8  6400    
000bca  00                DCB      0
000bcb  00                DCB      0
                  |L1.3020|
000bcc  42415420          DCB      "BAT #2,leveling charge is unblocked",0
000bd0  23322c6c
000bd4  6576656c
000bd8  696e6720
000bdc  63686172
000be0  67652069
000be4  7320756e
000be8  626c6f63
000bec  6b656400
                  |L1.3056|
                          DCD      sp_ch_stat
                  |L1.3060|
000bf4  42415420          DCB      "BAT #2,speed charge is stopped",0
000bf8  23322c73
000bfc  70656564
000c00  20636861
000c04  72676520
000c08  69732073
000c0c  746f7070
000c10  656400  
000c13  00                DCB      0
                  |L1.3092|
000c14  42415420          DCB      "BAT #2,speed charge is blocked",0
000c18  23322c73
000c1c  70656564
000c20  20636861
000c24  72676520
000c28  69732062
000c2c  6c6f636b
000c30  656400  
000c33  00                DCB      0
                  |L1.3124|
000c34  42415420          DCB      "BAT #2,speed charge is started",0
000c38  23322c73
000c3c  70656564
000c40  20636861
000c44  72676520
000c48  69732073
000c4c  74617274
000c50  656400  
000c53  00                DCB      0
                  |L1.3156|
000c54  42415420          DCB      "BAT #2,speed charge is unblocked",0
000c58  23322c73
000c5c  70656564
000c60  20636861
000c64  72676520
000c68  69732075
000c6c  6e626c6f
000c70  636b6564
000c74  00      
000c75  00                DCB      0
000c76  00                DCB      0
000c77  00                DCB      0
                  |L1.3192|
000c78  42415420          DCB      "BAT #2,equalising charge is on",0
000c7c  23322c65
000c80  7175616c
000c84  6973696e
000c88  67206368
000c8c  61726765
000c90  20697320
000c94  6f6e00  
000c97  00                DCB      0
                  |L1.3224|
000c98  42415420          DCB      "BAT #2,equalising charge is off",0
000c9c  23322c65
000ca0  7175616c
000ca4  6973696e
000ca8  67206368
000cac  61726765
000cb0  20697320
000cb4  6f666600
                  |L1.3256|
000cb8  42415420          DCB      "BAT #2,equalising charge is blocked",0
000cbc  23322c65
000cc0  7175616c
000cc4  6973696e
000cc8  67206368
000ccc  61726765
000cd0  20697320
000cd4  626c6f63
000cd8  6b656400
                  |L1.3292|
000cdc  42415420          DCB      "BAT #2,equalising charge is unblocked",0
000ce0  23322c65
000ce4  7175616c
000ce8  6973696e
000cec  67206368
000cf0  61726765
000cf4  20697320
000cf8  756e626c
000cfc  6f636b65
000d00  6400    
000d02  00                DCB      0
000d03  00                DCB      0
                  |L1.3332|
000d04  42415420          DCB      "BAT #2,molding charge is on",0
000d08  23322c6d
000d0c  6f6c6469
000d10  6e672063
000d14  68617267
000d18  65206973
000d1c  206f6e00
                  |L1.3360|
000d20  42415420          DCB      "BAT #2,molding charge is off",0
000d24  23322c6d
000d28  6f6c6469
000d2c  6e672063
000d30  68617267
000d34  65206973
000d38  206f6666
000d3c  00      
000d3d  00                DCB      0
000d3e  00                DCB      0
000d3f  00                DCB      0
                  |L1.3392|
000d40  42415420          DCB      "BAT #2,molding charge is blocked",0
000d44  23322c6d
000d48  6f6c6469
000d4c  6e672063
000d50  68617267
000d54  65206973
000d58  20626c6f
000d5c  636b6564
000d60  00      
000d61  00                DCB      0
000d62  00                DCB      0
000d63  00                DCB      0
                  |L1.3428|
000d64  42415420          DCB      "BAT #2,molding charge is unblocked",0
000d68  23322c6d
000d6c  6f6c6469
000d70  6e672063
000d74  68617267
000d78  65206973
000d7c  20756e62
000d80  6c6f636b
000d84  656400  
000d87  00                DCB      0
                  |L1.3464|
                          DCD      ||area_number.25||
                  |L1.3468|
                          DCD      bat
                  |L1.3472|
                          DCD      ADR_EE_BAT_ZAR_CNT_KE
                  |L1.3476|
                          DCD      bat_u_old_cnt
                  |L1.3480|
000d98  8c00              LDRH     r0,[r0,#0x20]
000d9a  9001              STR      r0,[sp,#4]
;;;987    		    
;;;988    		temp=LPC_RTC->YEAR;
000d9c  4eff              LDR      r6,|L1.4508|
000d9e  8bb0              LDRH     r0,[r6,#0x1c]
000da0  9000              STR      r0,[sp,#0]
;;;989    		gran_char(&temp,1,99);
000da2  f04f0263          MOV      r2,#0x63
000da6  f04f0101          MOV      r1,#1
000daa  4668              MOV      r0,sp
000dac  f7fffffe          BL       gran_char
;;;990    		*((char*)(&(ke_date[0])))=temp;
000db0  4cfb              LDR      r4,|L1.4512|
000db2  f89d0000          LDRB     r0,[sp,#0]
000db6  7020              STRB     r0,[r4,#0]
;;;991    			
;;;992    		temp=LPC_RTC->MONTH;
000db8  7e30              LDRB     r0,[r6,#0x18]
000dba  9000              STR      r0,[sp,#0]
;;;993    		gran_char(&temp,1,12);
000dbc  220c              MOVS     r2,#0xc
000dbe  2101              MOVS     r1,#1
000dc0  4668              MOV      r0,sp
000dc2  f7fffffe          BL       gran_char
;;;994    		*(((char*)(&(ke_date[0])))+1)=temp;
000dc6  f89d0000          LDRB     r0,[sp,#0]
000dca  7060              STRB     r0,[r4,#1]
;;;995    		
;;;996    		temp=LPC_RTC->DOM;
000dcc  7b30              LDRB     r0,[r6,#0xc]
000dce  9000              STR      r0,[sp,#0]
;;;997    		gran_char(&temp,1,31);
000dd0  221f              MOVS     r2,#0x1f
000dd2  2101              MOVS     r1,#1
000dd4  4668              MOV      r0,sp
000dd6  f7fffffe          BL       gran_char
;;;998    		*(((char*)(&(ke_date[0])))+2)=temp;			
000dda  f89d0000          LDRB     r0,[sp,#0]
000dde  70a0              STRB     r0,[r4,#2]
;;;999    				
;;;1000   		*(((char*)(&(ke_date[0])))+3)=*((char*)&temp_temp);
000de0  f89d0004          LDRB     r0,[sp,#4]
000de4  70e0              STRB     r0,[r4,#3]
;;;1001   		lc640_write_long(EE_SPC_KE_DATE0,ke_date[0]);
000de6  f24020a2          MOV      r0,#0x2a2
000dea  6821              LDR      r1,[r4,#0]  ; ke_date
000dec  f7fffffe          BL       lc640_write_long
;;;1002   
;;;1003   		temp=LPC_RTC->HOUR;
000df0  7a30              LDRB     r0,[r6,#8]
000df2  9000              STR      r0,[sp,#0]
;;;1004   		gran_char(&temp,0,23);
000df4  2217              MOVS     r2,#0x17
000df6  2100              MOVS     r1,#0
000df8  4668              MOV      r0,sp
000dfa  f7fffffe          BL       gran_char
;;;1005   		*((char*)(&(ke_date[1])))=temp;
000dfe  f89d0000          LDRB     r0,[sp,#0]
000e02  7120              STRB     r0,[r4,#4]
;;;1006                  
;;;1007   		temp=LPC_RTC->MIN;
000e04  7930              LDRB     r0,[r6,#4]
000e06  9000              STR      r0,[sp,#0]
;;;1008   		gran_char(&temp,0,59);
000e08  223b              MOVS     r2,#0x3b
000e0a  2100              MOVS     r1,#0
000e0c  4668              MOV      r0,sp
000e0e  f7fffffe          BL       gran_char
;;;1009   		*(((char*)(&(ke_date[1])))+1)=temp;
000e12  f89d0000          LDRB     r0,[sp,#0]
000e16  7160              STRB     r0,[r4,#5]
;;;1010   	          
;;;1011   		temp=LPC_RTC->SEC;
000e18  7830              LDRB     r0,[r6,#0]
000e1a  9000              STR      r0,[sp,#0]
;;;1012   		gran_char(&temp,0,59);
000e1c  223b              MOVS     r2,#0x3b
000e1e  2100              MOVS     r1,#0
000e20  4668              MOV      r0,sp
000e22  f7fffffe          BL       gran_char
;;;1013   		*(((char*)(&(ke_date[1])))+2)=temp;
000e26  f89d0000          LDRB     r0,[sp,#0]
000e2a  71a0              STRB     r0,[r4,#6]
;;;1014   			
;;;1015   		*(((char*)(&(ke_date[1])))+3)=*(((char*)&temp_temp)+1);
000e2c  f89d0005          LDRB     r0,[sp,#5]
000e30  71e0              STRB     r0,[r4,#7]
;;;1016   		lc640_write_long(EE_SPC_KE_DATE1,ke_date[1]);
000e32  f24020a6          MOV      r0,#0x2a6
000e36  6861              LDR      r1,[r4,#4]  ; ke_date
000e38  f7fffffe          BL       lc640_write_long
;;;1017   		}
;;;1018   	bat_hndl_zvu_ke_init=1;
000e3c  702f              STRB     r7,[r5,#0]
;;;1019   	}
;;;1020   }
000e3e  e8bd81fc          POP      {r2-r8,pc}
;;;1021   #endif
                          ENDP

                  ke_drv PROC
;;;1103   //-----------------------------------------------
;;;1104   void ke_drv(void)
000e42  e92d47f0          PUSH     {r4-r10,lr}
;;;1105   {
000e46  b088              SUB      sp,sp,#0x20
;;;1106   static char ke_drv_cnt_10s;
;;;1107   static short i_bat_buff[6];
;;;1108   static char i_bat_buff_cnt;
;;;1109   short ke_drv_i_temp;
;;;1110   short ke_drv_i_avg;
;;;1111   char i;
;;;1112   short ke_drv_i_temp_temp;
;;;1113   const long bat_hndl_t_razr_const[7]={600L,1800L,3600L,10800L,18000L,36000L,72000L};
000e48  f04f021c          MOV      r2,#0x1c
000e4c  49d5              LDR      r1,|L1.4516|
000e4e  a801              ADD      r0,sp,#4
000e50  f7fffffe          BL       __aeabi_memcpy4
;;;1114   
;;;1115   if(bat_hndl_zvu_ke_init==1)	  //Инициализация при включении контроля емкости 
000e54  4ed4              LDR      r6,|L1.4520|
;;;1116   	{
;;;1117   	
;;;1118   	i_bat_buff[0]=0;
000e56  4bd5              LDR      r3,|L1.4524|
000e58  2500              MOVS     r5,#0
000e5a  7ab0              LDRB     r0,[r6,#0xa]          ;1115  ; bat_hndl_zvu_ke_init
000e5c  2801              CMP      r0,#1                 ;1115
000e5e  d102              BNE      |L1.3686|
000e60  801d              STRH     r5,[r3,#0]
;;;1119   	i_bat_buff[0]=0;
;;;1120   	i_bat_buff[0]=0;
;;;1121   	i_bat_buff[0]=0;
;;;1122   	i_bat_buff[0]=0;
;;;1123   	i_bat_buff[0]=0;
;;;1124   	i_bat_buff_cnt=0;
000e62  73b5              STRB     r5,[r6,#0xe]
;;;1125   
;;;1126   	bat_hndl_zvu_ke_init=0;
000e64  72b5              STRB     r5,[r6,#0xa]
                  |L1.3686|
;;;1127   	}
;;;1128   
;;;1129   
;;;1130   
;;;1131   
;;;1132   if(spc_stat==spcKE)
000e66  f8960023          LDRB     r0,[r6,#0x23]  ; spc_stat
000e6a  2801              CMP      r0,#1
000e6c  d17e              BNE      |L1.3948|
;;;1133   	{
;;;1134   	ke_drv_i_temp=-Ib_ips_termokompensat/10;
000e6e  48d0              LDR      r0,|L1.4528|
000e70  f04f070a          MOV      r7,#0xa
000e74  f9b00000          LDRSH    r0,[r0,#0]  ; Ib_ips_termokompensat
000e78  f1c00000          RSB      r0,r0,#0
000e7c  fb90f0f7          SDIV     r0,r0,r7
000e80  b200              SXTH     r0,r0
;;;1135   	if(ke_drv_i_temp<0)ke_drv_i_temp=0;
000e82  2800              CMP      r0,#0
000e84  da01              BGE      |L1.3722|
000e86  f04f0000          MOV      r0,#0
                  |L1.3722|
;;;1136   
;;;1137   	bat_hndl_plazma[3]=ke_drv_cnt_10s;
000e8a  4aca              LDR      r2,|L1.4532|
000e8c  7b71              LDRB     r1,[r6,#0xd]  ; ke_drv_cnt_10s
000e8e  60d1              STR      r1,[r2,#0xc]  ; bat_hndl_plazma
;;;1138   	if(++ke_drv_cnt_10s>10)
000e90  1c49              ADDS     r1,r1,#1
;;;1139   		{
;;;1140   		ke_drv_cnt_10s=0;
;;;1141   
;;;1142   		i_bat_buff_cnt++;
;;;1143   		if(i_bat_buff_cnt>=6)i_bat_buff_cnt=0;
;;;1144   		bat_hndl_plazma[2]=i_bat_buff_cnt;
;;;1145   		i_bat_buff[i_bat_buff_cnt]=ke_drv_i_temp;
;;;1146   		ke_drv_i_temp_temp=0;
;;;1147   		for(i=0;i<6;i++)
;;;1148   			{
;;;1149   			ke_drv_i_temp_temp+=i_bat_buff[i];
;;;1150   			}
;;;1151   		ke_drv_i_avg=ke_drv_i_temp_temp/6;
;;;1152   
;;;1153   		I_from_t_table[0]=BAT_C_POINT_1_6*6; 	//Ток при котором батарея разрядится за 1/6 часа (0.1А)
;;;1154   		I_from_t_table[1]=BAT_C_POINT_1_2*2; 	//Ток при котором батарея разрядится за 1/2 часа (0.1А)
;;;1155   		I_from_t_table[2]=BAT_C_POINT_1; 		//Ток при котором батарея разрядится за 1 час (0.1А)
;;;1156   		I_from_t_table[3]=BAT_C_POINT_3/3; 		//Ток при котором батарея разрядится за 3 часа (0.1А)
;;;1157   		I_from_t_table[4]=BAT_C_POINT_5/5; 		//Ток при котором батарея разрядится за 5 часов (0.1А)
;;;1158   		I_from_t_table[5]=BAT_C_POINT_10/10; 	//Ток при котором батарея разрядится за 10 часов (0.1А)
;;;1159   		I_from_t_table[6]=BAT_C_POINT_20/20; 	//Ток при котором батарея разрядится за 20 часов (0.1А)
;;;1160   		
;;;1161   		U_end_from_i_table[0]=BAT_U_END_1_6;	//Конечное напряжение контроля емкости при разряде за 1/6 часа
;;;1162   		U_end_from_i_table[1]=BAT_U_END_1_2;	//Конечное напряжение контроля емкости при разряде за 1/2 часа
;;;1163   		U_end_from_i_table[2]=BAT_U_END_1;		//Конечное напряжение контроля емкости при разряде за 1 час
;;;1164   		U_end_from_i_table[3]=BAT_U_END_3;		//Конечное напряжение контроля емкости при разряде за 3 часа
;;;1165   		U_end_from_i_table[4]=BAT_U_END_5;		//Конечное напряжение контроля емкости при разряде за 5 часов
;;;1166   		U_end_from_i_table[5]=BAT_U_END_10;		//Конечное напряжение контроля емкости при разряде за 10 часов
;;;1167   		U_end_from_i_table[6]=BAT_U_END_20;		//Конечное напряжение контроля емкости при разряде за 20 часов		
;;;1168   
;;;1169   		bat_hndl_plazma[1]=ke_drv_i_avg;
;;;1170   		bat_hndl_i_temp=ke_drv_i_avg;
000e92  4cc3              LDR      r4,|L1.4512|
000e94  b2c9              UXTB     r1,r1                 ;1138
000e96  3c80              SUBS     r4,r4,#0x80
000e98  7371              STRB     r1,[r6,#0xd]          ;1138
000e9a  290a              CMP      r1,#0xa               ;1138
000e9c  d967              BLS      |L1.3950|
000e9e  7375              STRB     r5,[r6,#0xd]          ;1140
000ea0  7bb1              LDRB     r1,[r6,#0xe]          ;1142  ; i_bat_buff_cnt
000ea2  f1010101          ADD      r1,r1,#1              ;1142
000ea6  b2c9              UXTB     r1,r1                 ;1142
000ea8  73b1              STRB     r1,[r6,#0xe]          ;1142
000eaa  2906              CMP      r1,#6                 ;1143
000eac  d300              BCC      |L1.3760|
000eae  73b5              STRB     r5,[r6,#0xe]          ;1143
                  |L1.3760|
000eb0  7bb1              LDRB     r1,[r6,#0xe]          ;1144  ; i_bat_buff_cnt
000eb2  6091              STR      r1,[r2,#8]            ;1144  ; bat_hndl_plazma
000eb4  f8230011          STRH     r0,[r3,r1,LSL #1]     ;1145
000eb8  f04f0100          MOV      r1,#0                 ;1146
000ebc  4608              MOV      r0,r1                 ;1147
                  |L1.3774|
000ebe  f833c010          LDRH     r12,[r3,r0,LSL #1]    ;1149
000ec2  4461              ADD      r1,r1,r12             ;1149
000ec4  b209              SXTH     r1,r1                 ;1149
000ec6  f1000001          ADD      r0,r0,#1              ;1147
000eca  b2c0              UXTB     r0,r0                 ;1147
000ecc  2806              CMP      r0,#6                 ;1147
000ece  d3f6              BCC      |L1.3774|
000ed0  f04f0006          MOV      r0,#6                 ;1151
000ed4  fb91f0f0          SDIV     r0,r1,r0              ;1151
000ed8  b201              SXTH     r1,r0                 ;1151
000eda  48b7              LDR      r0,|L1.4536|
000edc  f8df82d4          LDR      r8,|L1.4532|
000ee0  8800              LDRH     r0,[r0,#0]            ;1153  ; BAT_C_POINT_1_6
000ee2  f1a8081c          SUB      r8,r8,#0x1c           ;1153
000ee6  eb000040          ADD      r0,r0,r0,LSL #1       ;1153
000eea  ea4f0040          LSL      r0,r0,#1              ;1153
000eee  f8a80000          STRH     r0,[r8,#0]            ;1153
000ef2  48b2              LDR      r0,|L1.4540|
000ef4  8800              LDRH     r0,[r0,#0]            ;1154  ; BAT_C_POINT_1_2
000ef6  ea4f0040          LSL      r0,r0,#1              ;1154
000efa  f8a80002          STRH     r0,[r8,#2]            ;1154
000efe  48b0              LDR      r0,|L1.4544|
000f00  8800              LDRH     r0,[r0,#0]            ;1155  ; BAT_C_POINT_1
000f02  f8a80004          STRH     r0,[r8,#4]            ;1155
000f06  48af              LDR      r0,|L1.4548|
000f08  f04f0303          MOV      r3,#3                 ;1156
000f0c  f9b00000          LDRSH    r0,[r0,#0]            ;1156  ; BAT_C_POINT_3
000f10  fb90f0f3          SDIV     r0,r0,r3              ;1156
000f14  f8a80006          STRH     r0,[r8,#6]            ;1156
000f18  48ab              LDR      r0,|L1.4552|
000f1a  f04f0305          MOV      r3,#5                 ;1157
000f1e  f9b00000          LDRSH    r0,[r0,#0]            ;1157  ; BAT_C_POINT_5
000f22  fb90f0f3          SDIV     r0,r0,r3              ;1157
000f26  f8a80008          STRH     r0,[r8,#8]            ;1157
000f2a  48a8              LDR      r0,|L1.4556|
000f2c  f9b00000          LDRSH    r0,[r0,#0]            ;1158  ; BAT_C_POINT_10
000f30  fb90f0f7          SDIV     r0,r0,r7              ;1158
000f34  f8a8000a          STRH     r0,[r8,#0xa]          ;1158
000f38  48a5              LDR      r0,|L1.4560|
000f3a  f04f0314          MOV      r3,#0x14              ;1159
000f3e  f9b00000          LDRSH    r0,[r0,#0]            ;1159  ; BAT_C_POINT_20
000f42  fb90f0f3          SDIV     r0,r0,r3              ;1159
000f46  f8a8000c          STRH     r0,[r8,#0xc]          ;1159
000f4a  48a2              LDR      r0,|L1.4564|
000f4c  f108090e          ADD      r9,r8,#0xe            ;1161
000f50  f9b07000          LDRSH    r7,[r0,#0]            ;1161  ; BAT_U_END_1_6
000f54  f8a97000          STRH     r7,[r9,#0]            ;1161
000f58  489f              LDR      r0,|L1.4568|
000f5a  8800              LDRH     r0,[r0,#0]            ;1162  ; BAT_U_END_1_2
000f5c  f8a90002          STRH     r0,[r9,#2]            ;1162
000f60  489e              LDR      r0,|L1.4572|
000f62  8800              LDRH     r0,[r0,#0]            ;1163  ; BAT_U_END_1
000f64  f8a90004          STRH     r0,[r9,#4]            ;1163
000f68  489d              LDR      r0,|L1.4576|
000f6a  e001              B        |L1.3952|
                  |L1.3948|
000f6c  e0ea              B        |L1.4420|
                  |L1.3950|
000f6e  e061              B        |L1.4148|
                  |L1.3952|
000f70  8800              LDRH     r0,[r0,#0]            ;1164  ; BAT_U_END_3
000f72  f8a90006          STRH     r0,[r9,#6]            ;1164
000f76  489b              LDR      r0,|L1.4580|
000f78  8800              LDRH     r0,[r0,#0]            ;1165  ; BAT_U_END_5
000f7a  f8a90008          STRH     r0,[r9,#8]            ;1165
000f7e  489a              LDR      r0,|L1.4584|
000f80  8800              LDRH     r0,[r0,#0]            ;1166  ; BAT_U_END_10
000f82  f8a9000a          STRH     r0,[r9,#0xa]          ;1166
000f86  4899              LDR      r0,|L1.4588|
000f88  f9b0c000          LDRSH    r12,[r0,#0]           ;1167  ; BAT_U_END_20
000f8c  f8a9c00c          STRH     r12,[r9,#0xc]         ;1167
000f90  6051              STR      r1,[r2,#4]            ;1169  ; bat_hndl_plazma
000f92  8121              STRH     r1,[r4,#8]
;;;1171   		
;;;1172   		for(i=0;i<7;i++)
000f94  f04f0000          MOV      r0,#0
                  |L1.3992|
;;;1173   			{
;;;1174   			if(bat_hndl_i_temp>=I_from_t_table[i])
000f98  f9383010          LDRSH    r3,[r8,r0,LSL #1]
000f9c  428b              CMP      r3,r1
000f9e  dd04              BLE      |L1.4010|
000fa0  f1000001          ADD      r0,r0,#1              ;1172
000fa4  b2c0              UXTB     r0,r0                 ;1172
000fa6  2807              CMP      r0,#7                 ;1172
000fa8  d3f6              BCC      |L1.3992|
                  |L1.4010|
;;;1175   				{
;;;1176   				break;
;;;1177   				}
;;;1178   			}
;;;1179   
;;;1180   		bat_hndl_plazma[0]=i;
000faa  6010              STR      r0,[r2,#0]  ; bat_hndl_plazma
000fac  f10d0a04          ADD      r10,sp,#4             ;1113
;;;1181   
;;;1182   		 if(i==0) bat_hndl_t_razr_ke=bat_hndl_t_razr_const[0];
000fb0  b1c8              CBZ      r0,|L1.4070|
;;;1183   		 else if((i>=1)&&(i<7))
000fb2  1e42              SUBS     r2,r0,#1
000fb4  2a06              CMP      r2,#6
000fb6  d219              BCS      |L1.4076|
;;;1184   		 	{
;;;1185   			short i1,i2;
;;;1186   			i1=I_from_t_table[i-1]-bat_hndl_i_temp;
000fb8  f8383012          LDRH     r3,[r8,r2,LSL #1]
000fbc  eba30101          SUB      r1,r3,r1
000fc0  b209              SXTH     r1,r1
;;;1187   			i2=I_from_t_table[i-1]-I_from_t_table[i];
000fc2  f8388010          LDRH     r8,[r8,r0,LSL #1]
000fc6  eba30308          SUB      r3,r3,r8
000fca  b21b              SXTH     r3,r3
;;;1188   			bat_hndl_t_razr_ke=bat_hndl_t_razr_const[i]-bat_hndl_t_razr_const[i-1];
000fcc  f85a8020          LDR      r8,[r10,r0,LSL #2]
000fd0  f85a2022          LDR      r2,[r10,r2,LSL #2]
000fd4  eba80802          SUB      r8,r8,r2
;;;1189   			bat_hndl_t_razr_ke*=(long)i1;
000fd8  fb08f801          MUL      r8,r8,r1
;;;1190   			bat_hndl_t_razr_ke/=(long)i2;
000fdc  fb98f1f3          SDIV     r1,r8,r3
;;;1191   			bat_hndl_t_razr_ke+=bat_hndl_t_razr_const[i-1];
000fe0  4411              ADD      r1,r1,r2
000fe2  6561              STR      r1,[r4,#0x54]  ; bat_hndl_t_razr_ke
;;;1192   			}
000fe4  e006              B        |L1.4084|
                  |L1.4070|
000fe6  9901              LDR      r1,[sp,#4]            ;1182
000fe8  6561              STR      r1,[r4,#0x54]         ;1182  ; bat_hndl_t_razr_ke
000fea  e003              B        |L1.4084|
                  |L1.4076|
;;;1193   		else if(i>=7)
000fec  2807              CMP      r0,#7
000fee  d301              BCC      |L1.4084|
;;;1194   			{
;;;1195   			bat_hndl_t_razr_ke=bat_hndl_t_razr_const[6];
000ff0  9907              LDR      r1,[sp,#0x1c]
000ff2  6561              STR      r1,[r4,#0x54]  ; bat_hndl_t_razr_ke
                  |L1.4084|
;;;1196   			}
;;;1197   
;;;1198   		 if(i==0) bat_hndl_u_end=U_end_from_i_table[0];
000ff4  b1c0              CBZ      r0,|L1.4136|
;;;1199   		 else if((i>=1)&&(i<7))
000ff6  1e41              SUBS     r1,r0,#1
000ff8  2906              CMP      r1,#6
000ffa  d217              BCS      |L1.4140|
;;;1200   		 	{
;;;1201   			long u1,tempL;
;;;1202   
;;;1203   			tempL=(long)U_end_from_i_table[i]-(long)U_end_from_i_table[i-1];
000ffc  f9393010          LDRSH    r3,[r9,r0,LSL #1]
001000  f9392011          LDRSH    r2,[r9,r1,LSL #1]
001004  eba30302          SUB      r3,r3,r2
;;;1204   			u1=bat_hndl_t_razr_ke-bat_hndl_t_razr_const[i-1];
001008  f85a1021          LDR      r1,[r10,r1,LSL #2]
00100c  6d67              LDR      r7,[r4,#0x54]  ; bat_hndl_t_razr_ke
00100e  eba70701          SUB      r7,r7,r1
;;;1205   			tempL*=u1;
001012  fb03f307          MUL      r3,r3,r7
;;;1206   			u1=bat_hndl_t_razr_const[i]-bat_hndl_t_razr_const[i-1];
001016  f85a0020          LDR      r0,[r10,r0,LSL #2]
00101a  eba00001          SUB      r0,r0,r1
;;;1207   			tempL/=u1;
00101e  fb93f0f0          SDIV     r0,r3,r0
;;;1208   			tempL+=(long)U_end_from_i_table[i-1];
001022  4410              ADD      r0,r0,r2
;;;1209   			bat_hndl_u_end=(short)tempL;
001024  8160              STRH     r0,[r4,#0xa]
;;;1210   			}
001026  e005              B        |L1.4148|
                  |L1.4136|
001028  8167              STRH     r7,[r4,#0xa]          ;1198
00102a  e003              B        |L1.4148|
                  |L1.4140|
;;;1211   		else if(i>=7)
00102c  2807              CMP      r0,#7
00102e  d301              BCC      |L1.4148|
;;;1212   			{
;;;1213   			bat_hndl_u_end=U_end_from_i_table[6];
001030  f8a4c00a          STRH     r12,[r4,#0xa]
                  |L1.4148|
;;;1214   			}
;;;1215   
;;;1216   		}
;;;1217   
;;;1218   
;;;1219   
;;;1220   	if(spc_phase==0)
001034  f8960025          LDRB     r0,[r6,#0x25]  ; spc_phase
;;;1221   		{
;;;1222   		//mess_send(MESS2BAT_HNDL,PARAM_BAT_MASK_OFF_AFTER_2SEC,(1<<(1-spc_bat)),20);
;;;1223   		mess_send(MESS2BPS_HNDL,PARAM_BPS_ALL_OFF_AFTER_2SEC,0xffff,20);
;;;1224   
;;;1225   		bat[0]._zar_cnt_ke+=abs(bat[spc_bat]._Ib);
;;;1226   	    	
;;;1227   		if(bat[0]._zar_cnt_ke>=AH_CONSTANT)
;;;1228   			{
;;;1229   			bat[0]._zar_cnt_ke-=AH_CONSTANT;
;;;1230   			lc640_write_int(ADR_EE_BAT_ZAR_CNT_KE[0],lc640_read_int(ADR_EE_BAT_ZAR_CNT_KE[0])+1);
001038  4f6d              LDR      r7,|L1.4592|
;;;1231   			}
;;;1232   
;;;1233   		bat[0]._time_min_cnt_ke++;
;;;1234   		if(bat[0]._time_min_cnt_ke>=60)
;;;1235   			{
;;;1236   			lc640_write_int(EE_ZVU_BAT_MIN_CNT_KE,lc640_read_int(EE_ZVU_BAT_MIN_CNT_KE)+1);
00103a  f44f78e3          MOV      r8,#0x1c6
00103e  bbe8              CBNZ     r0,|L1.4284|
001040  2314              MOVS     r3,#0x14              ;1223
001042  f04f32ff          MOV      r2,#0xffffffff        ;1223
001046  21ce              MOVS     r1,#0xce              ;1223
001048  20cd              MOVS     r0,#0xcd              ;1223
00104a  f7fffffe          BL       mess_send
00104e  f8961024          LDRB     r1,[r6,#0x24]         ;1225  ; spc_bat
001052  f8df91a0          LDR      r9,|L1.4596|
001056  eb010041          ADD      r0,r1,r1,LSL #1       ;1225
00105a  eb001001          ADD      r0,r0,r1,LSL #4       ;1225
00105e  eb090080          ADD      r0,r9,r0,LSL #2       ;1225
001062  f9b00008          LDRSH    r0,[r0,#8]            ;1225
001066  f7fffffe          BL       abs
00106a  f8d91018          LDR      r1,[r9,#0x18]         ;1225  ; bat
00106e  4401              ADD      r1,r1,r0              ;1225
001070  f8c91018          STR      r1,[r9,#0x18]         ;1225  ; bat
001074  f64840a0          MOV      r0,#0x8ca0            ;1227
001078  4281              CMP      r1,r0                 ;1227
00107a  db0c              BLT      |L1.4246|
00107c  eba10100          SUB      r1,r1,r0              ;1229
001080  f8c91018          STR      r1,[r9,#0x18]         ;1229  ; bat
001084  8838              LDRH     r0,[r7,#0]            ;1230  ; ADR_EE_BAT_ZAR_CNT_KE
001086  f7fffffe          BL       lc640_read_int
00108a  1c40              ADDS     r0,r0,#1              ;1230
00108c  b201              SXTH     r1,r0                 ;1230
00108e  f9b70000          LDRSH    r0,[r7,#0]            ;1230  ; ADR_EE_BAT_ZAR_CNT_KE
001092  f7fffffe          BL       lc640_write_int
                  |L1.4246|
001096  f8b9004a          LDRH     r0,[r9,#0x4a]         ;1233  ; bat
00109a  f1000001          ADD      r0,r0,#1              ;1233
00109e  b281              UXTH     r1,r0                 ;1233
0010a0  f8a9104a          STRH     r1,[r9,#0x4a]         ;1233
0010a4  293c              CMP      r1,#0x3c              ;1234
0010a6  d309              BCC      |L1.4284|
0010a8  4640              MOV      r0,r8
0010aa  f7fffffe          BL       lc640_read_int
0010ae  1c40              ADDS     r0,r0,#1
0010b0  b201              SXTH     r1,r0
0010b2  4640              MOV      r0,r8
0010b4  f7fffffe          BL       lc640_write_int
;;;1237   			bat[0]._time_min_cnt_ke=0;
0010b8  f8a9504a          STRH     r5,[r9,#0x4a]
                  |L1.4284|
;;;1238   			}
;;;1239   		}
;;;1240   
;;;1241   	else if(spc_phase==1)
;;;1242   		{
;;;1243   		//mess_send(MESS2BAT_HNDL,PARAM_BAT_MASK_OFF_AFTER_2SEC,(1<<(1-spc_bat)),20);
;;;1244   		}
;;;1245   
;;;1246   	if(out_U<bat_hndl_u_end)
0010bc  484e              LDR      r0,|L1.4600|
0010be  f9b4100a          LDRSH    r1,[r4,#0xa]  ; bat_hndl_u_end
0010c2  f9b00000          LDRSH    r0,[r0,#0]  ; out_U
0010c6  4288              CMP      r0,r1
0010c8  da3a              BGE      |L1.4416|
;;;1247   		{
;;;1248   		cnt_end_ke++;
0010ca  f8b60066          LDRH     r0,[r6,#0x66]  ; cnt_end_ke
0010ce  f1000001          ADD      r0,r0,#1
0010d2  b200              SXTH     r0,r0
0010d4  f8a60066          STRH     r0,[r6,#0x66]
;;;1249   		if(cnt_end_ke>=30)
0010d8  281e              CMP      r0,#0x1e
0010da  db33              BLT      |L1.4420|
;;;1250   			{
;;;1251   			
;;;1252   			if((spc_stat==spcKE)&&(spc_phase==0))
0010dc  f8960023          LDRB     r0,[r6,#0x23]  ; spc_stat
0010e0  2801              CMP      r0,#1
0010e2  d121              BNE      |L1.4392|
0010e4  f8960025          LDRB     r0,[r6,#0x25]  ; spc_phase
0010e8  b9f0              CBNZ     r0,|L1.4392|
;;;1253   				{
;;;1254   				lc640_write_int(ADR_EE_BAT_C_REAL[0],lc640_read_int(ADR_EE_BAT_ZAR_CNT_KE[0]));
0010ea  8838              LDRH     r0,[r7,#0]  ; ADR_EE_BAT_ZAR_CNT_KE
0010ec  f7fffffe          BL       lc640_read_int
0010f0  b201              SXTH     r1,r0
0010f2  4842              LDR      r0,|L1.4604|
0010f4  f9b00000          LDRSH    r0,[r0,#0]  ; ADR_EE_BAT_C_REAL
0010f8  f7fffffe          BL       lc640_write_int
;;;1255   				ke_zvu_mem_hndl(0,lc640_read_int(ADR_EE_BAT_ZAR_CNT_KE[0]),lc640_read_int(EE_ZVU_BAT_MIN_CNT_KE));
0010fc  4640              MOV      r0,r8
0010fe  f7fffffe          BL       lc640_read_int
001102  b284              UXTH     r4,r0
001104  8838              LDRH     r0,[r7,#0]  ; ADR_EE_BAT_ZAR_CNT_KE
001106  f7fffffe          BL       lc640_read_int
00110a  b281              UXTH     r1,r0
00110c  4622              MOV      r2,r4
00110e  2000              MOVS     r0,#0
001110  f7fffffe          BL       ke_zvu_mem_hndl
;;;1256   				lc640_write_int(ADR_EE_BAT_ZAR_CNT[0],0);
001114  483a              LDR      r0,|L1.4608|
001116  2100              MOVS     r1,#0
001118  f9b00000          LDRSH    r0,[r0,#0]  ; ADR_EE_BAT_ZAR_CNT
00111c  f7fffffe          BL       lc640_write_int
;;;1257   				cntrl_stat=50;
001120  f04f0032          MOV      r0,#0x32
001124  8670              STRH     r0,[r6,#0x32]
;;;1258   				cntrl_stat_old=50;
001126  86b0              STRH     r0,[r6,#0x34]
                  |L1.4392|
;;;1259   				}
;;;1260   
;;;1261   			spc_stat=spcOFF;
001128  f8865023          STRB     r5,[r6,#0x23]
;;;1262   			__ee_spc_stat=spcOFF;
00112c  f8a6506a          STRH     r5,[r6,#0x6a]
;;;1263   			lc640_write_int(EE_SPC_STAT,spcOFF);
001130  b008              ADD      sp,sp,#0x20
001132  2100              MOVS     r1,#0
001134  e8bd47f0          POP      {r4-r10,lr}
001138  f240209a          MOV      r0,#0x29a
00113c  f7ffbffe          B.W      lc640_write_int
                  |L1.4416|
;;;1264   
;;;1265   			}
;;;1266   		}
;;;1267   	else cnt_end_ke=0;
001140  f8a65066          STRH     r5,[r6,#0x66]
                  |L1.4420|
;;;1268   
;;;1269   	}
;;;1270   			
;;;1271   }
001144  b008              ADD      sp,sp,#0x20
001146  e8bd87f0          POP      {r4-r10,pc}
;;;1272   #endif
                          ENDP

                  vz_start PROC
;;;1342   //-----------------------------------------------
;;;1343   char vz_start(char hour)
00114a  b570              PUSH     {r4-r6,lr}
;;;1344   {          
00114c  4605              MOV      r5,r0
;;;1345   char out;
;;;1346   out=0;
00114e  f04f0600          MOV      r6,#0
;;;1347   if((spc_stat==spcOFF)&&(speedChrgBlckStat!=1))
001152  4c15              LDR      r4,|L1.4520|
001154  f8940023          LDRB     r0,[r4,#0x23]  ; spc_stat
001158  b9f0              CBNZ     r0,|L1.4504|
00115a  482a              LDR      r0,|L1.4612|
00115c  8800              LDRH     r0,[r0,#0]  ; speedChrgBlckStat
00115e  2801              CMP      r0,#1
001160  d069              BEQ      |L1.4662|
;;;1348   	{
;;;1349   	spc_stat=spcVZ;
001162  f104042c          ADD      r4,r4,#0x2c
001166  f04f0102          MOV      r1,#2
00116a  f8041c09          STRB     r1,[r4,#-9]
;;;1350   	__ee_spc_stat=spcVZ; 
00116e  87e1              STRH     r1,[r4,#0x3e]
;;;1351   	lc640_write_int(EE_SPC_STAT,__ee_spc_stat);   
001170  f240209a          MOV      r0,#0x29a
001174  f7fffffe          BL       lc640_write_int
;;;1352   	vz_cnt_h=hour;
001178  86e5              STRH     r5,[r4,#0x36]
;;;1353   	__ee_vz_cnt=hour*60;
00117a  ebc51005          RSB      r0,r5,r5,LSL #4
00117e  ea4f0080          LSL      r0,r0,#2
001182  87a0              STRH     r0,[r4,#0x3c]
001184  f1a4042c          SUB      r4,r4,#0x2c
;;;1354   	if(hour==0)__ee_vz_cnt=30;
001188  b91d              CBNZ     r5,|L1.4498|
00118a  f04f001e          MOV      r0,#0x1e
00118e  f8a40068          STRH     r0,[r4,#0x68]
                  |L1.4498|
;;;1355   	lc640_write_int(EE_VZ_CNT,__ee_vz_cnt);
001192  f104045e          ADD      r4,r4,#0x5e
001196  e037              B        |L1.4616|
                  |L1.4504|
001198  e04d              B        |L1.4662|
00119a  0000              DCW      0x0000
                  |L1.4508|
                          DCD      0x40024020
                  |L1.4512|
                          DCD      ||area_number.25||+0x100
                  |L1.4516|
                          DCD      ||area_number.19||+0x4
                  |L1.4520|
                          DCD      ||area_number.25||
                  |L1.4524|
                          DCD      ||.bss||
                  |L1.4528|
                          DCD      Ib_ips_termokompensat
                  |L1.4532|
                          DCD      ||.bss||+0x468
                  |L1.4536|
                          DCD      BAT_C_POINT_1_6
                  |L1.4540|
                          DCD      BAT_C_POINT_1_2
                  |L1.4544|
                          DCD      BAT_C_POINT_1
                  |L1.4548|
                          DCD      BAT_C_POINT_3
                  |L1.4552|
                          DCD      BAT_C_POINT_5
                  |L1.4556|
                          DCD      BAT_C_POINT_10
                  |L1.4560|
                          DCD      BAT_C_POINT_20
                  |L1.4564|
                          DCD      BAT_U_END_1_6
                  |L1.4568|
                          DCD      BAT_U_END_1_2
                  |L1.4572|
                          DCD      BAT_U_END_1
                  |L1.4576|
                          DCD      BAT_U_END_3
                  |L1.4580|
                          DCD      BAT_U_END_5
                  |L1.4584|
                          DCD      BAT_U_END_10
                  |L1.4588|
                          DCD      BAT_U_END_20
                  |L1.4592|
                          DCD      ADR_EE_BAT_ZAR_CNT_KE
                  |L1.4596|
                          DCD      bat
                  |L1.4600|
                          DCD      out_U
                  |L1.4604|
                          DCD      ADR_EE_BAT_C_REAL
                  |L1.4608|
                          DCD      ADR_EE_BAT_ZAR_CNT
                  |L1.4612|
                          DCD      speedChrgBlckStat
                  |L1.4616|
001208  f9b4100a          LDRSH    r1,[r4,#0xa]  ; __ee_vz_cnt
00120c  f44f7027          MOV      r0,#0x29c
001210  f7fffffe          BL       lc640_write_int
;;;1356   	lc640_write_int(EE_SPC_VZ_LENGT,__ee_vz_cnt);	
001214  f9b4100a          LDRSH    r1,[r4,#0xa]  ; __ee_vz_cnt
001218  f44f702a          MOV      r0,#0x2a8
00121c  f7fffffe          BL       lc640_write_int
;;;1357   	vz_cnt_h_=0;
001220  f04f0000          MOV      r0,#0
001224  80e0              STRH     r0,[r4,#6]
;;;1358   	vz_cnt_s=0;
001226  8020              STRH     r0,[r4,#0]
;;;1359   	vz_cnt_s_=0;
001228  8060              STRH     r0,[r4,#2]
;;;1360   	out=1;
00122a  f04f0601          MOV      r6,#1
;;;1361   	vz_mem_hndl(1);
00122e  f04f0001          MOV      r0,#1
001232  f7fffffe          BL       vz_mem_hndl
                  |L1.4662|
;;;1362   	}
;;;1363   //else if((spc_stat==spc_KE1p1)||(spc_stat==spc_KE1p2)) out=22; 
;;;1364   //else if((spc_stat==spc_KE2p1)||(spc_stat==spc_KE2p2)) out=33;
;;;1365   //plazma=out;	
;;;1366   return out;
001236  4630              MOV      r0,r6
;;;1367   }
001238  bd70              POP      {r4-r6,pc}
;;;1368   
                          ENDP

                  vz_stop PROC
;;;1369   //-----------------------------------------------
;;;1370   void vz_stop(void)
00123a  b510              PUSH     {r4,lr}
;;;1371   {
;;;1372   if(spc_stat==spcVZ)
00123c  4cff              LDR      r4,|L1.5692|
00123e  f8940023          LDRB     r0,[r4,#0x23]  ; spc_stat
001242  2802              CMP      r0,#2
001244  d113              BNE      |L1.4718|
;;;1373        {
;;;1374   vz_mem_hndl(vz_cnt_h);          
001246  f104042c          ADD      r4,r4,#0x2c
00124a  8ee0              LDRH     r0,[r4,#0x36]  ; vz_cnt_h
00124c  f7fffffe          BL       vz_mem_hndl
;;;1375   vz_cnt_s=0;
001250  f04f0000          MOV      r0,#0
001254  8660              STRH     r0,[r4,#0x32]
;;;1376   vz_cnt_h=0;
001256  86e0              STRH     r0,[r4,#0x36]
;;;1377   vz_cnt_h_=0;
001258  8720              STRH     r0,[r4,#0x38]
;;;1378   spc_stat=spcOFF;
00125a  f8040c09          STRB     r0,[r4,#-9]
;;;1379   
;;;1380   		__ee_spc_stat=spcOFF;
00125e  87e0              STRH     r0,[r4,#0x3e]
;;;1381   		lc640_write_int(EE_SPC_STAT,spcOFF);
001260  4601              MOV      r1,r0
001262  e8bd4010          POP      {r4,lr}
001266  f240209a          MOV      r0,#0x29a
00126a  f7ffbffe          B.W      lc640_write_int
                  |L1.4718|
;;;1382        }
;;;1383   
;;;1384   }
00126e  bd10              POP      {r4,pc}
;;;1385   
                          ENDP

                  amper_chas_cnt_drv PROC
;;;1387   //-----------------------------------------------
;;;1388   void amper_chas_cnt_drv(void)
001270  b510              PUSH     {r4,lr}
;;;1389   {
;;;1390   
;;;1391   amper_chas_cnt_drv_summ+=(long)Ib_ips_termokompensat;
001272  4af2              LDR      r2,|L1.5692|
001274  49f2              LDR      r1,|L1.5696|
001276  3280              ADDS     r2,r2,#0x80
001278  f9b11000          LDRSH    r1,[r1,#0]  ; Ib_ips_termokompensat
00127c  6e50              LDR      r0,[r2,#0x64]  ; amper_chas_cnt_drv_summ
00127e  4401              ADD      r1,r1,r0
001280  6651              STR      r1,[r2,#0x64]  ; amper_chas_cnt_drv_summ
;;;1392   
;;;1393   if(amper_chas_cnt_drv_summ>=36000L)
001282  f64843a0          MOV      r3,#0x8ca0
;;;1394   	{
;;;1395   	amper_chas_cnt_drv_summ-=36000L;
;;;1396   	lc640_write_int(EE_AMPER_CHAS_CNT,lc640_read_int(EE_AMPER_CHAS_CNT)+1);
001286  f44f74e4          MOV      r4,#0x1c8
00128a  4299              CMP      r1,r3                 ;1393
00128c  db0c              BLT      |L1.4776|
00128e  eba10103          SUB      r1,r1,r3              ;1395
001292  6651              STR      r1,[r2,#0x64]         ;1395  ; amper_chas_cnt_drv_summ
001294  4620              MOV      r0,r4
001296  f7fffffe          BL       lc640_read_int
00129a  1c40              ADDS     r0,r0,#1
00129c  b201              SXTH     r1,r0
00129e  4620              MOV      r0,r4
0012a0  e8bd4010          POP      {r4,lr}
0012a4  f7ffbffe          B.W      lc640_write_int
                  |L1.4776|
;;;1397   	}
;;;1398   else if(amper_chas_cnt_drv_summ<=-36000L)
0012a8  48e6              LDR      r0,|L1.5700|
0012aa  4281              CMP      r1,r0
0012ac  dc0c              BGT      |L1.4808|
;;;1399   	{
;;;1400   	amper_chas_cnt_drv_summ+=36000L;
0012ae  eb010003          ADD      r0,r1,r3
0012b2  6650              STR      r0,[r2,#0x64]  ; amper_chas_cnt_drv_summ
;;;1401   	lc640_write_int(EE_AMPER_CHAS_CNT,lc640_read_int(EE_AMPER_CHAS_CNT)-1);
0012b4  4620              MOV      r0,r4
0012b6  f7fffffe          BL       lc640_read_int
0012ba  1e40              SUBS     r0,r0,#1
0012bc  b201              SXTH     r1,r0
0012be  4620              MOV      r0,r4
0012c0  e8bd4010          POP      {r4,lr}
0012c4  f7ffbffe          B.W      lc640_write_int
                  |L1.4808|
;;;1402   	}
;;;1403   }
0012c8  bd10              POP      {r4,pc}
;;;1404   #endif
                          ENDP

                  avz_next_date_hndl PROC
;;;1406   //-----------------------------------------------
;;;1407   void avz_next_date_hndl(void)
0012ca  b570              PUSH     {r4-r6,lr}
;;;1408   {
;;;1409   if((LPC_RTC->MONTH+AVZ)>12)lc640_write_int(EE_YEAR_AVZ,LPC_RTC->YEAR+1);
0012cc  4cde              LDR      r4,|L1.5704|
0012ce  f8940038          LDRB     r0,[r4,#0x38]
0012d2  4dde              LDR      r5,|L1.5708|
0012d4  7829              LDRB     r1,[r5,#0]  ; AVZ
0012d6  4408              ADD      r0,r0,r1
0012d8  280c              CMP      r0,#0xc
0012da  d906              BLS      |L1.4842|
0012dc  8fa0              LDRH     r0,[r4,#0x3c]
0012de  1c40              ADDS     r0,r0,#1
0012e0  b201              SXTH     r1,r0
0012e2  20b8              MOVS     r0,#0xb8
0012e4  f7fffffe          BL       lc640_write_int
0012e8  e004              B        |L1.4852|
                  |L1.4842|
;;;1410   else lc640_write_int(EE_YEAR_AVZ,LPC_RTC->YEAR);
0012ea  f9b4103c          LDRSH    r1,[r4,#0x3c]
0012ee  20b8              MOVS     r0,#0xb8
0012f0  f7fffffe          BL       lc640_write_int
                  |L1.4852|
;;;1411   
;;;1412   //lc640_write_int(EE_YEAR_AVZ,6);
;;;1413   
;;;1414   if((LPC_RTC->MONTH+AVZ)>12)lc640_write_int(EE_MONTH_AVZ,(LPC_RTC->MONTH+AVZ)-12);
0012f4  f8941038          LDRB     r1,[r4,#0x38]
0012f8  7828              LDRB     r0,[r5,#0]  ; AVZ
0012fa  4401              ADD      r1,r1,r0
0012fc  290c              CMP      r1,#0xc
0012fe  d907              BLS      |L1.4880|
001300  f8941038          LDRB     r1,[r4,#0x38]
001304  380c              SUBS     r0,r0,#0xc
001306  4401              ADD      r1,r1,r0
001308  20b6              MOVS     r0,#0xb6
00130a  f7fffffe          BL       lc640_write_int
00130e  e005              B        |L1.4892|
                  |L1.4880|
;;;1415   else lc640_write_int(EE_MONTH_AVZ,LPC_RTC->MONTH+AVZ);                                                 
001310  f8941038          LDRB     r1,[r4,#0x38]
001314  4401              ADD      r1,r1,r0
001316  20b6              MOVS     r0,#0xb6
001318  f7fffffe          BL       lc640_write_int
                  |L1.4892|
;;;1416   
;;;1417   //lc640_write_int(EE_MONTH_AVZ,5);
;;;1418   
;;;1419   if(LPC_RTC->DOM>28) lc640_write_int(EE_DATE_AVZ,28);
00131c  f894002c          LDRB     r0,[r4,#0x2c]
001320  281c              CMP      r0,#0x1c
001322  d904              BLS      |L1.4910|
001324  211c              MOVS     r1,#0x1c
001326  20b4              MOVS     r0,#0xb4
001328  f7fffffe          BL       lc640_write_int
00132c  e004              B        |L1.4920|
                  |L1.4910|
;;;1420   else lc640_write_int(EE_DATE_AVZ,LPC_RTC->DOM);
00132e  f894102c          LDRB     r1,[r4,#0x2c]
001332  20b4              MOVS     r0,#0xb4
001334  f7fffffe          BL       lc640_write_int
                  |L1.4920|
;;;1421   
;;;1422   //lc640_write_int(EE_DATE_AVZ,4);
;;;1423   
;;;1424   lc640_write_int(EE_HOUR_AVZ,LPC_RTC->HOUR);
001338  f1040420          ADD      r4,r4,#0x20
00133c  7a21              LDRB     r1,[r4,#8]
00133e  f04f00ae          MOV      r0,#0xae
001342  f7fffffe          BL       lc640_write_int
;;;1425   lc640_write_int(EE_MIN_AVZ,LPC_RTC->MIN);
001346  7921              LDRB     r1,[r4,#4]
001348  20b0              MOVS     r0,#0xb0
00134a  f7fffffe          BL       lc640_write_int
;;;1426   lc640_write_int(EE_SEC_AVZ,LPC_RTC->SEC);
00134e  7821              LDRB     r1,[r4,#0]
001350  e8bd4070          POP      {r4-r6,lr}
001354  20b2              MOVS     r0,#0xb2
001356  f7ffbffe          B.W      lc640_write_int
;;;1427   
;;;1428   }
;;;1429   
                          ENDP

                  avz_drv PROC
;;;1430   //-----------------------------------------------
;;;1431   void avz_drv(void)                               
00135a  b510              PUSH     {r4,lr}
;;;1432   {                
;;;1433   if(AVZ!=AVZ_OFF)
00135c  48bb              LDR      r0,|L1.5708|
;;;1434   	{
;;;1435   	if((LPC_RTC->YEAR==YEAR_AVZ)&&(LPC_RTC->MONTH==MONTH_AVZ)&&(LPC_RTC->DOM==DATE_AVZ)&&(LPC_RTC->HOUR==HOUR_AVZ)&&(LPC_RTC->MIN==MIN_AVZ)&&(LPC_RTC->SEC==SEC_AVZ))
;;;1436   		{
;;;1437   		bAVZ=1;
00135e  4cb7              LDR      r4,|L1.5692|
001360  7800              LDRB     r0,[r0,#0]            ;1433  ; AVZ
001362  b338              CBZ      r0,|L1.5044|
001364  48b8              LDR      r0,|L1.5704|
001366  8f82              LDRH     r2,[r0,#0x3c]         ;1435
001368  49b9              LDR      r1,|L1.5712|
00136a  8809              LDRH     r1,[r1,#0]            ;1435  ; YEAR_AVZ
00136c  428a              CMP      r2,r1                 ;1435
00136e  d121              BNE      |L1.5044|
001370  f8902038          LDRB     r2,[r0,#0x38]         ;1435
001374  49b7              LDR      r1,|L1.5716|
001376  8809              LDRH     r1,[r1,#0]            ;1435  ; MONTH_AVZ
001378  428a              CMP      r2,r1                 ;1435
00137a  d11b              BNE      |L1.5044|
00137c  f890102c          LDRB     r1,[r0,#0x2c]         ;1435
001380  4ab5              LDR      r2,|L1.5720|
001382  8812              LDRH     r2,[r2,#0]            ;1435  ; DATE_AVZ
001384  4291              CMP      r1,r2                 ;1435
001386  d115              BNE      |L1.5044|
001388  f8901028          LDRB     r1,[r0,#0x28]         ;1435
00138c  4ab3              LDR      r2,|L1.5724|
00138e  8812              LDRH     r2,[r2,#0]            ;1435  ; HOUR_AVZ
001390  4291              CMP      r1,r2                 ;1435
001392  d10f              BNE      |L1.5044|
001394  f8901024          LDRB     r1,[r0,#0x24]         ;1435
001398  4ab1              LDR      r2,|L1.5728|
00139a  8812              LDRH     r2,[r2,#0]            ;1435  ; MIN_AVZ
00139c  4291              CMP      r1,r2                 ;1435
00139e  d109              BNE      |L1.5044|
0013a0  f8900020          LDRB     r0,[r0,#0x20]         ;1435
0013a4  49af              LDR      r1,|L1.5732|
0013a6  8809              LDRH     r1,[r1,#0]            ;1435  ; SEC_AVZ
0013a8  4288              CMP      r0,r1                 ;1435
0013aa  d103              BNE      |L1.5044|
0013ac  f04f0001          MOV      r0,#1
0013b0  f8840026          STRB     r0,[r4,#0x26]
                  |L1.5044|
;;;1438   		}
;;;1439   	}
;;;1440   if(bAVZ)
0013b4  f8940026          LDRB     r0,[r4,#0x26]  ; bAVZ
0013b8  2800              CMP      r0,#0
0013ba  d00d              BEQ      |L1.5080|
;;;1441   	{
;;;1442   	if(vz_start(AVZ_TIME))
0013bc  48aa              LDR      r0,|L1.5736|
0013be  8800              LDRH     r0,[r0,#0]  ; AVZ_TIME
0013c0  b2c0              UXTB     r0,r0
0013c2  f7fffffe          BL       vz_start
0013c6  2800              CMP      r0,#0
0013c8  d006              BEQ      |L1.5080|
;;;1443   		{
;;;1444   		bAVZ=0;
0013ca  f04f0000          MOV      r0,#0
0013ce  f8840026          STRB     r0,[r4,#0x26]
;;;1445   		avz_next_date_hndl();
0013d2  e8bd4010          POP      {r4,lr}
0013d6  e7fe              B        avz_next_date_hndl
                  |L1.5080|
;;;1446   		}
;;;1447   	}	
;;;1448   
;;;1449   }
0013d8  bd10              POP      {r4,pc}
;;;1450   
                          ENDP

                  vz_drv PROC
;;;1451   //-----------------------------------------------
;;;1452   void vz_drv(void)
0013da  b538              PUSH     {r3-r5,lr}
;;;1453   { 
;;;1454   if(spc_stat==spcVZ)
0013dc  4c97              LDR      r4,|L1.5692|
0013de  f8940023          LDRB     r0,[r4,#0x23]  ; spc_stat
0013e2  2802              CMP      r0,#2
0013e4  d11d              BNE      |L1.5154|
;;;1455   	{
;;;1456   	if((sk_stat[0]==1)||(VZ_CH_VENT_BLOK==0))
0013e6  48a1              LDR      r0,|L1.5740|
0013e8  7800              LDRB     r0,[r0,#0]  ; sk_stat
0013ea  2801              CMP      r0,#1
0013ec  d01a              BEQ      |L1.5156|
0013ee  48a0              LDR      r0,|L1.5744|
0013f0  8800              LDRH     r0,[r0,#0]  ; VZ_CH_VENT_BLOK
0013f2  2800              CMP      r0,#0
0013f4  d016              BEQ      |L1.5156|
;;;1457   		{
;;;1458   
;;;1459   	if(vz_cnt_s_<3600)
;;;1460   		{
;;;1461   		vz_cnt_s_++;
;;;1462   		if(vz_cnt_s_>=3600)
;;;1463   			{
;;;1464   			vz_cnt_s_=0;
;;;1465   			if(vz_cnt_h)
;;;1466   				{
;;;1467   				vz_cnt_h--;
;;;1468   				vz_cnt_h_++;
;;;1469   				}
;;;1470   			}
;;;1471   		}
;;;1472   
;;;1473   
;;;1474   	if(vz_cnt_s<60)
;;;1475   		{
;;;1476   		vz_cnt_s++;
;;;1477   		if(vz_cnt_s>=60)
;;;1478   			{
;;;1479   			vz_cnt_s=0;
;;;1480   			
;;;1481   			__ee_vz_cnt--;
;;;1482   			lc640_write_int(EE_VZ_CNT,__ee_vz_cnt);
;;;1483   			if((!__ee_vz_cnt)||(speedChrgBlckStat==1))
;;;1484   				{
;;;1485   				spc_stat=spcOFF;
;;;1486   						__ee_spc_stat=spcOFF;
;;;1487   		lc640_write_int(EE_SPC_STAT,spcOFF);
;;;1488   
;;;1489   //				hv_vz_stat=hvsOFF;
;;;1490   //		lc640_write(EE_HV_VZ_STAT,hvsOFF);
;;;1491   				vz_mem_hndl(0);
;;;1492   				}
;;;1493   			}
;;;1494   		}
;;;1495   		vz_error=0; 
;;;1496   		}
;;;1497   	else 
;;;1498   		{
;;;1499   		vz_error=1; 
0013f6  f04f0001          MOV      r0,#1
0013fa  7060              STRB     r0,[r4,#1]
;;;1500   		if(((LPC_RTC->SEC)%10)==0)
0013fc  489d              LDR      r0,|L1.5748|
0013fe  7800              LDRB     r0,[r0,#0]
001400  f04f010a          MOV      r1,#0xa
001404  fbb0f2f1          UDIV     r2,r0,r1
001408  fb010012          MLS      r0,r1,r2,r0
00140c  2800              CMP      r0,#0
00140e  d108              BNE      |L1.5154|
;;;1501   			{
;;;1502   			show_mess(	"ВЫРАВНИВАЮЩИЙ ЗАРЯД ",
001410  f2413088          MOV      r0,#0x1388
001414  9000              STR      r0,[sp,#0]
001416  a398              ADR      r3,|L1.5752|
001418  a29d              ADR      r2,|L1.5776|
00141a  a1a3              ADR      r1,|L1.5800|
00141c  a0a8              ADR      r0,|L1.5824|
00141e  f7fffffe          BL       show_mess
                  |L1.5154|
;;;1503   						"    ЗАБЛОКИРОВАН    ",
;;;1504   						"     НЕИСПРАВНА     ",
;;;1505   						"    ВЕНТИЛЯЦИЯ!!!   ",
;;;1506   						5000);			
;;;1507   			}
;;;1508   		}
;;;1509   /*	if(vz_cnt_s_>=3)
;;;1510   		{
;;;1511   		if(sk_stat[0]==0)
;;;1512   		} */
;;;1513   
;;;1514   	}
;;;1515   
;;;1516   
;;;1517   } 
001422  bd38              POP      {r3-r5,pc}
                  |L1.5156|
001424  f8b40060          LDRH     r0,[r4,#0x60]         ;1459  ; vz_cnt_s_
001428  f44f6161          MOV      r1,#0xe10             ;1459
00142c  2500              MOVS     r5,#0                 ;1456
00142e  4288              CMP      r0,r1                 ;1459
001430  d215              BCS      |L1.5214|
001432  f1000001          ADD      r0,r0,#1              ;1461
001436  b280              UXTH     r0,r0                 ;1461
001438  f8a40060          STRH     r0,[r4,#0x60]         ;1461
00143c  4288              CMP      r0,r1                 ;1462
00143e  d30e              BCC      |L1.5214|
001440  f8a45060          STRH     r5,[r4,#0x60]         ;1464
001444  f8b40062          LDRH     r0,[r4,#0x62]         ;1465  ; vz_cnt_h
001448  b148              CBZ      r0,|L1.5214|
00144a  f1a00001          SUB      r0,r0,#1              ;1467
00144e  f8240f62          STRH     r0,[r4,#0x62]!        ;1467
001452  8860              LDRH     r0,[r4,#2]            ;1468  ; vz_cnt_h_
001454  f1000001          ADD      r0,r0,#1              ;1468
001458  8060              STRH     r0,[r4,#2]            ;1468
00145a  f1a40462          SUB      r4,r4,#0x62           ;1468
                  |L1.5214|
00145e  f8b4005e          LDRH     r0,[r4,#0x5e]         ;1474  ; vz_cnt_s
001462  283c              CMP      r0,#0x3c              ;1474
001464  d225              BCS      |L1.5298|
001466  f1000001          ADD      r0,r0,#1              ;1476
00146a  b280              UXTH     r0,r0                 ;1476
00146c  f8a4005e          STRH     r0,[r4,#0x5e]         ;1476
001470  283c              CMP      r0,#0x3c              ;1477
001472  d31e              BCC      |L1.5298|
001474  f8245f5e          STRH     r5,[r4,#0x5e]!        ;1479
001478  8960              LDRH     r0,[r4,#0xa]          ;1481  ; __ee_vz_cnt
00147a  f1a00001          SUB      r0,r0,#1              ;1481
00147e  b201              SXTH     r1,r0                 ;1481
001480  8161              STRH     r1,[r4,#0xa]          ;1481
001482  f44f7027          MOV      r0,#0x29c             ;1482
001486  f7fffffe          BL       lc640_write_int
00148a  8960              LDRH     r0,[r4,#0xa]          ;1483  ; __ee_vz_cnt
00148c  f1a4045e          SUB      r4,r4,#0x5e           ;1483
001490  b118              CBZ      r0,|L1.5274|
001492  4891              LDR      r0,|L1.5848|
001494  8800              LDRH     r0,[r0,#0]            ;1483  ; speedChrgBlckStat
001496  2801              CMP      r0,#1                 ;1483
001498  d10b              BNE      |L1.5298|
                  |L1.5274|
00149a  f8845023          STRB     r5,[r4,#0x23]         ;1485
00149e  f8a4506a          STRH     r5,[r4,#0x6a]         ;1486
0014a2  2100              MOVS     r1,#0                 ;1487
0014a4  f240209a          MOV      r0,#0x29a             ;1487
0014a8  f7fffffe          BL       lc640_write_int
0014ac  2000              MOVS     r0,#0                 ;1491
0014ae  f7fffffe          BL       vz_mem_hndl
                  |L1.5298|
0014b2  7065              STRB     r5,[r4,#1]            ;1495
0014b4  bd38              POP      {r3-r5,pc}
;;;1518   
                          ENDP

                  vz1_drv PROC
;;;1520   //драйвер уравнительного заряда
;;;1521   void vz1_drv(void)
0014b6  e92d4ff8          PUSH     {r3-r11,lr}
;;;1522   {
;;;1523   if(volt_region_cnt)volt_region_cnt--;
0014ba  f8df8180          LDR      r8,|L1.5692|
0014be  f9b80078          LDRSH    r0,[r8,#0x78]  ; volt_region_cnt
0014c2  b118              CBZ      r0,|L1.5324|
0014c4  f1a00001          SUB      r0,r0,#1
0014c8  f8a80078          STRH     r0,[r8,#0x78]
                  |L1.5324|
;;;1524   if(vz1_stat==vz1sOFF)
0014cc  f8980005          LDRB     r0,[r8,#5]  ; vz1_stat
0014d0  b928              CBNZ     r0,|L1.5342|
;;;1525   	{
;;;1526   	mess_send(MESS2RELE_HNDL,PARAM_RELE_SAMOKALIBR,0,20);
0014d2  2314              MOVS     r3,#0x14
0014d4  2200              MOVS     r2,#0
0014d6  2164              MOVS     r1,#0x64
0014d8  20d2              MOVS     r0,#0xd2
0014da  f7fffffe          BL       mess_send
                  |L1.5342|
;;;1527   	}
;;;1528   if(vz1_stat==vz1sSTEP1)
0014de  f8980005          LDRB     r0,[r8,#5]  ; vz1_stat
;;;1529   	{
;;;1530   	if(vz1_stat_old!=vz1_stat)
;;;1531   		{
;;;1532   		vz1_stat_cnt=5;
;;;1533   		}
;;;1534   	if(vz1_stat_cnt)
;;;1535   		{
;;;1536   		vz1_stat_cnt--;
;;;1537   		if(vz1_stat_cnt==0)
;;;1538   			{
;;;1539   			vz1_stat=vz1sERR1; 	//Не включилась вентиляция;
;;;1540   			lc640_write(EE_VZ1_STAT,vz1sERR1);
;;;1541   			}
;;;1542   		}
;;;1543   	if(sk_stat[0]==1)
0014e2  4d62              LDR      r5,|L1.5740|
0014e4  f44f7bc9          MOV      r11,#0x192            ;1540
0014e8  2801              CMP      r0,#1                 ;1528
0014ea  d139              BNE      |L1.5472|
0014ec  f8980006          LDRB     r0,[r8,#6]            ;1530  ; vz1_stat_old
0014f0  2801              CMP      r0,#1                 ;1530
0014f2  d003              BEQ      |L1.5372|
0014f4  f04f0005          MOV      r0,#5                 ;1532
0014f8  f8a80076          STRH     r0,[r8,#0x76]         ;1532
                  |L1.5372|
0014fc  f9b80076          LDRSH    r0,[r8,#0x76]         ;1534  ; vz1_stat_cnt
001500  b168              CBZ      r0,|L1.5406|
001502  f1a00001          SUB      r0,r0,#1              ;1536
001506  b200              SXTH     r0,r0                 ;1536
001508  f8a80076          STRH     r0,[r8,#0x76]         ;1536
00150c  b938              CBNZ     r0,|L1.5406|
00150e  f04f000b          MOV      r0,#0xb               ;1539
001512  f8880005          STRB     r0,[r8,#5]            ;1539
001516  4601              MOV      r1,r0                 ;1540
001518  4658              MOV      r0,r11                ;1540
00151a  f7fffffe          BL       lc640_write
                  |L1.5406|
00151e  7828              LDRB     r0,[r5,#0]  ; sk_stat
001520  2801              CMP      r0,#1
001522  d117              BNE      |L1.5460|
;;;1544   		{
;;;1545   		vz1_stat=vz1sSTEP2;
001524  f04f0002          MOV      r0,#2
001528  f8880005          STRB     r0,[r8,#5]
;;;1546   		lc640_write(EE_VZ1_STAT,vz1sSTEP2);
00152c  4601              MOV      r1,r0
00152e  4658              MOV      r0,r11
001530  f7fffffe          BL       lc640_write
;;;1547   		tree_up(iVZ1_STEP2_2,1,0,0);
001534  2300              MOVS     r3,#0
001536  461a              MOV      r2,r3
001538  2101              MOVS     r1,#1
00153a  20e1              MOVS     r0,#0xe1
00153c  f7fffffe          BL       tree_up
;;;1548   		tree_up(iVZ1_STEP2_1,0,0,0);
001540  2300              MOVS     r3,#0
001542  461a              MOV      r2,r3
001544  4619              MOV      r1,r3
001546  20e0              MOVS     r0,#0xe0
001548  f7fffffe          BL       tree_up
;;;1549   		ret(1200);
00154c  f44f6096          MOV      r0,#0x4b0
001550  f7fffffe          BL       ||ret||
                  |L1.5460|
;;;1550   		}
;;;1551   	mess_send(MESS2RELE_HNDL,PARAM_RELE_SAMOKALIBR,0,20);
001554  2314              MOVS     r3,#0x14
001556  2200              MOVS     r2,#0
001558  2164              MOVS     r1,#0x64
00155a  20d2              MOVS     r0,#0xd2
00155c  f7fffffe          BL       mess_send
                  |L1.5472|
;;;1552   	}
;;;1553   
;;;1554   if(vz1_stat==vz1sSTEP2)
001560  f8980005          LDRB     r0,[r8,#5]  ; vz1_stat
;;;1555   	{
;;;1556   	if((vz1_stat_old!=vz1_stat)||(vz1_stat_cnt==0))
;;;1557   		{
;;;1558   		vz1_stat_cnt=15;
001564  f04f090f          MOV      r9,#0xf
001568  2802              CMP      r0,#2                 ;1554
00156a  d118              BNE      |L1.5534|
00156c  f8980006          LDRB     r0,[r8,#6]            ;1556  ; vz1_stat_old
001570  2802              CMP      r0,#2                 ;1556
001572  d102              BNE      |L1.5498|
001574  f8b80076          LDRH     r0,[r8,#0x76]         ;1556  ; vz1_stat_cnt
001578  b908              CBNZ     r0,|L1.5502|
                  |L1.5498|
00157a  f8a89076          STRH     r9,[r8,#0x76]
                  |L1.5502|
;;;1559   		}
;;;1560   	vz1_stat_cnt--;
00157e  f8b80076          LDRH     r0,[r8,#0x76]  ; vz1_stat_cnt
001582  f1a00001          SUB      r0,r0,#1
001586  f8a80076          STRH     r0,[r8,#0x76]
;;;1561   	mess_send(MESS2RELE_HNDL,PARAM_RELE_SAMOKALIBR,0,20);
00158a  f04f0314          MOV      r3,#0x14
00158e  f04f0200          MOV      r2,#0
001592  f04f0164          MOV      r1,#0x64
001596  f04f00d2          MOV      r0,#0xd2
00159a  f7fffffe          BL       mess_send
                  |L1.5534|
;;;1562   	}
;;;1563   
;;;1564   if(vz1_stat==vz1sSTEP3)
00159e  f8980005          LDRB     r0,[r8,#5]  ; vz1_stat
;;;1565   	{
;;;1566   	if((vz1_stat_old!=vz1_stat)||(vz1_stat_cnt==0))
;;;1567   		{
;;;1568   		vz1_stat_cnt=10;
0015a2  240a              MOVS     r4,#0xa
0015a4  2600              MOVS     r6,#0                 ;1523
0015a6  f04f0a01          MOV      r10,#1                ;1524
;;;1569   
;;;1570   		}
;;;1571   	vz1_stat_cnt--;
;;;1572   	if((vz1_stat_cnt==10)||(vz1_stat_cnt==9))
;;;1573   		{
;;;1574   		show_mess(	"     ВКЛЮЧИТЕ       ",
0015aa  f2413788          MOV      r7,#0x1388
0015ae  2803              CMP      r0,#3                 ;1564
0015b0  d131              BNE      |L1.5654|
0015b2  f8980006          LDRB     r0,[r8,#6]            ;1566  ; vz1_stat_old
0015b6  2803              CMP      r0,#3                 ;1566
0015b8  d102              BNE      |L1.5568|
0015ba  f8b80076          LDRH     r0,[r8,#0x76]         ;1566  ; vz1_stat_cnt
0015be  b908              CBNZ     r0,|L1.5572|
                  |L1.5568|
0015c0  f8a84076          STRH     r4,[r8,#0x76]         ;1568
                  |L1.5572|
0015c4  f8b80076          LDRH     r0,[r8,#0x76]         ;1571  ; vz1_stat_cnt
0015c8  f1a00001          SUB      r0,r0,#1              ;1571
0015cc  b200              SXTH     r0,r0                 ;1571
0015ce  f8a80076          STRH     r0,[r8,#0x76]         ;1571
0015d2  280a              CMP      r0,#0xa               ;1572
0015d4  d001              BEQ      |L1.5594|
0015d6  2809              CMP      r0,#9                 ;1572
0015d8  d106              BNE      |L1.5608|
                  |L1.5594|
0015da  a340              ADR      r3,|L1.5852|
0015dc  a245              ADR      r2,|L1.5876|
0015de  a14b              ADR      r1,|L1.5900|
0015e0  a050              ADR      r0,|L1.5924|
0015e2  9700              STR      r7,[sp,#0]
0015e4  f7fffffe          BL       show_mess
                  |L1.5608|
;;;1575   					"      ТУМБЛЕР       ",
;;;1576   					"     ВЫСОКОГО       ",
;;;1577   					"    НАПРЯЖЕНИЯ      ",
;;;1578   					5000);
;;;1579   		}
;;;1580   	if(sk_stat[1]==1)
0015e8  7868              LDRB     r0,[r5,#1]  ; sk_stat
0015ea  2801              CMP      r0,#1
0015ec  d10d              BNE      |L1.5642|
;;;1581   		{
;;;1582   		vz1_stat=vz1sWRK;
0015ee  f8884005          STRB     r4,[r8,#5]
;;;1583   		lc640_write(EE_VZ1_STAT,vz1sWRK);
0015f2  210a              MOVS     r1,#0xa
0015f4  4658              MOV      r0,r11
0015f6  f7fffffe          BL       lc640_write
;;;1584   		volt_region=1;
0015fa  f888a02f          STRB     r10,[r8,#0x2f]
;;;1585   		cntrl_stat=0;
0015fe  f8a86032          STRH     r6,[r8,#0x32]
;;;1586   		cntrl_stat_new=0;
001602  f8a86048          STRH     r6,[r8,#0x48]
;;;1587   		cntrl_stat_old=0;
001606  f8a86034          STRH     r6,[r8,#0x34]
                  |L1.5642|
;;;1588   		}
;;;1589   	mess_send(MESS2RELE_HNDL,PARAM_RELE_SAMOKALIBR,0,20);
00160a  2314              MOVS     r3,#0x14
00160c  2200              MOVS     r2,#0
00160e  2164              MOVS     r1,#0x64
001610  20d2              MOVS     r0,#0xd2
001612  f7fffffe          BL       mess_send
                  |L1.5654|
;;;1590   	}
;;;1591   
;;;1592   if(vz1_stat==vz1sWRK)
001616  f8980005          LDRB     r0,[r8,#5]  ; vz1_stat
00161a  280a              CMP      r0,#0xa
00161c  d10b              BNE      |L1.5686|
;;;1593   	{
;;;1594   	if(vz1_stat_old!=vz1_stat)
;;;1595   		{
;;;1596   		vz1_wrk_cnt=3600L/*100L*/*((long)UZ_T);
00161e  4907              LDR      r1,|L1.5692|
001620  f8980006          LDRB     r0,[r8,#6]            ;1594  ; vz1_stat_old
001624  3180              ADDS     r1,r1,#0x80
001626  280a              CMP      r0,#0xa               ;1594
001628  d006              BEQ      |L1.5688|
00162a  4844              LDR      r0,|L1.5948|
00162c  f44f6261          MOV      r2,#0xe10
001630  f9b00000          LDRSH    r0,[r0,#0]  ; UZ_T
001634  e084              B        |L1.5952|
                  |L1.5686|
001636  e0f7              B        |L1.6184|
                  |L1.5688|
001638  e086              B        |L1.5960|
00163a  0000              DCW      0x0000
                  |L1.5692|
                          DCD      ||area_number.25||
                  |L1.5696|
                          DCD      Ib_ips_termokompensat
                  |L1.5700|
                          DCD      0xffff7360
                  |L1.5704|
                          DCD      0x40024000
                  |L1.5708|
                          DCD      AVZ
                  |L1.5712|
                          DCD      YEAR_AVZ
                  |L1.5716|
                          DCD      MONTH_AVZ
                  |L1.5720|
                          DCD      DATE_AVZ
                  |L1.5724|
                          DCD      HOUR_AVZ
                  |L1.5728|
                          DCD      MIN_AVZ
                  |L1.5732|
                          DCD      SEC_AVZ
                  |L1.5736|
                          DCD      AVZ_TIME
                  |L1.5740|
                          DCD      sk_stat
                  |L1.5744|
                          DCD      VZ_CH_VENT_BLOK
                  |L1.5748|
                          DCD      0x40024020
                  |L1.5752|
001678  20202020          DCB      "    ",194,197,205,210,200,203,223,214,200,223,"!!!   ",0
00167c  c2c5cdd2
001680  c8cbdfd6
001684  c8df2121
001688  21202020
00168c  00      
00168d  00                DCB      0
00168e  00                DCB      0
00168f  00                DCB      0
                  |L1.5776|
001690  20202020          DCB      "     ",205,197,200,209,207,208,192,194,205,192,"     ",0
001694  20cdc5c8
001698  d1cfd0c0
00169c  c2cdc020
0016a0  20202020
0016a4  00      
0016a5  00                DCB      0
0016a6  00                DCB      0
0016a7  00                DCB      0
                  |L1.5800|
0016a8  20202020          DCB      "    ",199,192,193,203,206,202,200,208,206,194,192,205," "
0016ac  c7c0c1cb
0016b0  cecac8d0
0016b4  cec2c0cd
0016b8  20      
0016b9  20202000          DCB      "   ",0
0016bd  00                DCB      0
0016be  00                DCB      0
0016bf  00                DCB      0
                  |L1.5824|
0016c0  c2dbd0c0          DCB      194,219,208,192,194,205,200,194,192,222,217,200,201," ",199
0016c4  c2cdc8c2
0016c8  c0ded9c8
0016cc  c920c7  
0016cf  c0d0dfc4          DCB      192,208,223,196," ",0
0016d3  2000    
0016d5  00                DCB      0
0016d6  00                DCB      0
0016d7  00                DCB      0
                  |L1.5848|
                          DCD      speedChrgBlckStat
                  |L1.5852|
0016dc  20202020          DCB      "    ",205,192,207,208,223,198,197,205,200,223,"      ",0
0016e0  cdc0cfd0
0016e4  dfc6c5cd
0016e8  c8df2020
0016ec  20202020
0016f0  00      
0016f1  00                DCB      0
0016f2  00                DCB      0
0016f3  00                DCB      0
                  |L1.5876|
0016f4  20202020          DCB      "     ",194,219,209,206,202,206,195,206,"       ",0
0016f8  20c2dbd1
0016fc  cecacec3
001700  ce202020
001704  20202020
001708  00      
001709  00                DCB      0
00170a  00                DCB      0
00170b  00                DCB      0
                  |L1.5900|
00170c  20202020          DCB      "      ",210,211,204,193,203,197,208,"       ",0
001710  2020d2d3
001714  ccc1cbc5
001718  d0202020
00171c  20202020
001720  00      
001721  00                DCB      0
001722  00                DCB      0
001723  00                DCB      0
                  |L1.5924|
001724  20202020          DCB      "     ",194,202,203,222,215,200,210,197,"       ",0
001728  20c2cacb
00172c  ded7c8d2
001730  c5202020
001734  20202020
001738  00      
001739  00                DCB      0
00173a  00                DCB      0
00173b  00                DCB      0
                  |L1.5948|
                          DCD      UZ_T
                  |L1.5952|
001740  fb00f002          MUL      r0,r0,r2
001744  6408              STR      r0,[r1,#0x40]  ; vz1_wrk_cnt
;;;1597   		//if(VZ_HR==0)  	hv_vz_wrk_cnt=1800L;
;;;1598   		vz1_up_cnt=0L;
001746  644e              STR      r6,[r1,#0x44]  ; vz1_up_cnt
                  |L1.5960|
;;;1599   
;;;1600   		}
;;;1601   	vz1_wrk_cnt--;
001748  6c08              LDR      r0,[r1,#0x40]  ; vz1_wrk_cnt
00174a  f1a00001          SUB      r0,r0,#1
00174e  6408              STR      r0,[r1,#0x40]  ; vz1_wrk_cnt
;;;1602   	vz1_up_cnt++;
001750  6c4a              LDR      r2,[r1,#0x44]  ; vz1_up_cnt
001752  f1020201          ADD      r2,r2,#1
001756  644a              STR      r2,[r1,#0x44]  ; vz1_up_cnt
;;;1603   
;;;1604   	if(vz1_wrk_cnt==0)
001758  b940              CBNZ     r0,|L1.5996|
;;;1605   		{
;;;1606   		vz1_stat=vz1sFINE;
00175a  f8889005          STRB     r9,[r8,#5]
;;;1607   		lc640_write(EE_VZ1_STAT,vz1sFINE);
00175e  210f              MOVS     r1,#0xf
001760  4658              MOV      r0,r11
001762  f7fffffe          BL       lc640_write
;;;1608   		uz_mem_hndl(0);
001766  2000              MOVS     r0,#0
001768  f7fffffe          BL       uz_mem_hndl
                  |L1.5996|
;;;1609   		}
;;;1610   	if(sk_stat[0]==0)
00176c  7828              LDRB     r0,[r5,#0]  ; sk_stat
00176e  b938              CBNZ     r0,|L1.6016|
;;;1611   		{
;;;1612   		vz1_stat=vz1sERR2;
001770  f04f000c          MOV      r0,#0xc
001774  f8880005          STRB     r0,[r8,#5]
;;;1613   		lc640_write(EE_VZ1_STAT,vz1sERR2);
001778  4601              MOV      r1,r0
00177a  4658              MOV      r0,r11
00177c  f7fffffe          BL       lc640_write
                  |L1.6016|
;;;1614   		}
;;;1615   	if(sk_stat[1]==0)
001780  7868              LDRB     r0,[r5,#1]  ; sk_stat
001782  b938              CBNZ     r0,|L1.6036|
;;;1616   		{
;;;1617   		vz1_stat=vz1sERR3;
001784  f04f000d          MOV      r0,#0xd
001788  f8880005          STRB     r0,[r8,#5]
;;;1618   		lc640_write(EE_VZ1_STAT,vz1sERR3);
00178c  4601              MOV      r1,r0
00178e  4658              MOV      r0,r11
001790  f7fffffe          BL       lc640_write
                  |L1.6036|
;;;1619   		}
;;;1620   	if(((Ibmax/10)>IZMAX_)&&(cntrl_stat<=20)&&(volt_region==1)&&(volt_region_cnt==0))
001794  f9b8004a          LDRSH    r0,[r8,#0x4a]  ; Ibmax
001798  f8b8104c          LDRH     r1,[r8,#0x4c]  ; IZMAX_
00179c  fb90f0f4          SDIV     r0,r0,r4
;;;1621   		{
;;;1622   		volt_region=0;
;;;1623   		cntrl_stat=1000;
0017a0  f44f727a          MOV      r2,#0x3e8
0017a4  4288              CMP      r0,r1                 ;1620
0017a6  dd16              BLE      |L1.6102|
0017a8  f9b83032          LDRSH    r3,[r8,#0x32]         ;1620  ; cntrl_stat
0017ac  2b14              CMP      r3,#0x14              ;1620
0017ae  dc12              BGT      |L1.6102|
0017b0  f898302f          LDRB     r3,[r8,#0x2f]         ;1620  ; volt_region
0017b4  2b01              CMP      r3,#1                 ;1620
0017b6  d10e              BNE      |L1.6102|
0017b8  f8b83078          LDRH     r3,[r8,#0x78]         ;1620  ; volt_region_cnt
0017bc  b95b              CBNZ     r3,|L1.6102|
0017be  f888602f          STRB     r6,[r8,#0x2f]         ;1622
0017c2  f8a82032          STRH     r2,[r8,#0x32]
;;;1624   		cntrl_stat_new=1000;
0017c6  f8a82048          STRH     r2,[r8,#0x48]
;;;1625   		cntrl_stat_old=1000;
0017ca  f8a82034          STRH     r2,[r8,#0x34]
;;;1626   		volt_region_cnt=110;
0017ce  f04f036e          MOV      r3,#0x6e
0017d2  f8a83078          STRH     r3,[r8,#0x78]
                  |L1.6102|
;;;1627   		}
;;;1628   	if(((Ibmax/10)<IZMAX_)&&(cntrl_stat>=1000)&&(volt_region==0)&&(volt_region_cnt==0))
0017d6  4288              CMP      r0,r1
0017d8  da13              BGE      |L1.6146|
0017da  f9b80032          LDRSH    r0,[r8,#0x32]  ; cntrl_stat
0017de  4290              CMP      r0,r2
0017e0  db0f              BLT      |L1.6146|
0017e2  f898002f          LDRB     r0,[r8,#0x2f]  ; volt_region
0017e6  b960              CBNZ     r0,|L1.6146|
0017e8  f8b80078          LDRH     r0,[r8,#0x78]  ; volt_region_cnt
0017ec  b948              CBNZ     r0,|L1.6146|
;;;1629   		{
;;;1630   		volt_region=1;
0017ee  f888a02f          STRB     r10,[r8,#0x2f]
;;;1631   		cntrl_stat=10;
0017f2  f8a84032          STRH     r4,[r8,#0x32]
;;;1632   		cntrl_stat_new=10;
0017f6  f8a84048          STRH     r4,[r8,#0x48]
;;;1633   		cntrl_stat_old=10;
0017fa  f8a84034          STRH     r4,[r8,#0x34]
;;;1634   		volt_region_cnt=10;
0017fe  f8a84078          STRH     r4,[r8,#0x78]
                  |L1.6146|
;;;1635   		}
;;;1636   	if(volt_region==0) 		mess_send(MESS2RELE_HNDL,PARAM_RELE_SAMOKALIBR,0,20);
001802  f898002f          LDRB     r0,[r8,#0x2f]  ; volt_region
001806  b110              CBZ      r0,|L1.6158|
;;;1637   	else if(volt_region==1) mess_send(MESS2RELE_HNDL,PARAM_RELE_SAMOKALIBR,1,20);
001808  2801              CMP      r0,#1
00180a  d007              BEQ      |L1.6172|
00180c  e00c              B        |L1.6184|
                  |L1.6158|
00180e  2314              MOVS     r3,#0x14              ;1636
001810  2200              MOVS     r2,#0                 ;1636
001812  2164              MOVS     r1,#0x64              ;1636
001814  20d2              MOVS     r0,#0xd2              ;1636
001816  f7fffffe          BL       mess_send
00181a  e005              B        |L1.6184|
                  |L1.6172|
00181c  2314              MOVS     r3,#0x14
00181e  2201              MOVS     r2,#1
001820  2164              MOVS     r1,#0x64
001822  20d2              MOVS     r0,#0xd2
001824  f7fffffe          BL       mess_send
                  |L1.6184|
;;;1638   	}
;;;1639   
;;;1640   if(vz1_stat==vz1sERR1)		//Отсутствует вентиляция при включении
001828  f8980005          LDRB     r0,[r8,#5]  ; vz1_stat
00182c  280b              CMP      r0,#0xb
00182e  d120              BNE      |L1.6258|
;;;1641   	{
;;;1642   	if((vz1_stat_old!=vz1_stat)||(vz1_stat_cnt==0))
001830  f8980006          LDRB     r0,[r8,#6]  ; vz1_stat_old
001834  280b              CMP      r0,#0xb
001836  d102              BNE      |L1.6206|
001838  f8b80076          LDRH     r0,[r8,#0x76]  ; vz1_stat_cnt
00183c  b908              CBNZ     r0,|L1.6210|
                  |L1.6206|
;;;1643   		{
;;;1644   		vz1_stat_cnt=10;
00183e  f8a84076          STRH     r4,[r8,#0x76]
                  |L1.6210|
;;;1645   		}
;;;1646   	vz1_stat_cnt--;
001842  f8b80076          LDRH     r0,[r8,#0x76]  ; vz1_stat_cnt
001846  f1a00001          SUB      r0,r0,#1
00184a  b200              SXTH     r0,r0
00184c  f8a80076          STRH     r0,[r8,#0x76]
;;;1647   	if((vz1_stat_cnt==10)||(vz1_stat_cnt==9))
001850  280a              CMP      r0,#0xa
001852  d001              BEQ      |L1.6232|
001854  2809              CMP      r0,#9
001856  d106              BNE      |L1.6246|
                  |L1.6232|
;;;1648   		{
;;;1649   		show_mess(	"УРАВНИТЕЛЬНЫЙ ЗАРЯД ",
001858  a3ee              ADR      r3,|L1.7188|
00185a  a2f4              ADR      r2,|L1.7212|
00185c  a1f9              ADR      r1,|L1.7236|
00185e  a0ff              ADR      r0,|L1.7260|
001860  9700              STR      r7,[sp,#0]
001862  f7fffffe          BL       show_mess
                  |L1.6246|
;;;1650   					"   НЕ МОЖЕТ БЫТЬ    ",
;;;1651   					"      ВКЛЮЧЕН       ",
;;;1652   					"  БЕЗ ВЕНТИЛЯЦИИ!!  ",
;;;1653   					5000);
;;;1654   		}
;;;1655   	mess_send(MESS2RELE_HNDL,PARAM_RELE_SAMOKALIBR,0,20);
001866  2314              MOVS     r3,#0x14
001868  2200              MOVS     r2,#0
00186a  2164              MOVS     r1,#0x64
00186c  20d2              MOVS     r0,#0xd2
00186e  f7fffffe          BL       mess_send
                  |L1.6258|
;;;1656   	}
;;;1657   if(vz1_stat==vz1sERR2)		//Пропала вентиляция при работе
001872  f8980005          LDRB     r0,[r8,#5]  ; vz1_stat
001876  280c              CMP      r0,#0xc
001878  d12c              BNE      |L1.6356|
;;;1658   	{
;;;1659   	if((vz1_stat_old!=vz1_stat)||(vz1_stat_cnt==0))
00187a  f8980006          LDRB     r0,[r8,#6]  ; vz1_stat_old
00187e  280c              CMP      r0,#0xc
001880  d102              BNE      |L1.6280|
001882  f8b80076          LDRH     r0,[r8,#0x76]  ; vz1_stat_cnt
001886  b908              CBNZ     r0,|L1.6284|
                  |L1.6280|
;;;1660   		{
;;;1661   		vz1_stat_cnt=10;
001888  f8a84076          STRH     r4,[r8,#0x76]
                  |L1.6284|
;;;1662   		}
;;;1663   	vz1_stat_cnt--;
00188c  f8b80076          LDRH     r0,[r8,#0x76]  ; vz1_stat_cnt
001890  f1a00001          SUB      r0,r0,#1
001894  b200              SXTH     r0,r0
001896  f8a80076          STRH     r0,[r8,#0x76]
;;;1664   	if((vz1_stat_cnt==10)||(vz1_stat_cnt==9))
00189a  280a              CMP      r0,#0xa
00189c  d001              BEQ      |L1.6306|
00189e  2809              CMP      r0,#9
0018a0  d109              BNE      |L1.6326|
                  |L1.6306|
;;;1665   		{
;;;1666   		show_mess(	"УРАВНИТЕЛЬНЫЙ ЗАРЯД ",
0018a2  f2af232c          ADR      r3,|L1.5752|
0018a6  f2af2218          ADR      r2,|L1.5776|
0018aa  f2af2104          ADR      r1,|L1.5800|
0018ae  a0eb              ADR      r0,|L1.7260|
0018b0  9700              STR      r7,[sp,#0]
0018b2  f7fffffe          BL       show_mess
                  |L1.6326|
;;;1667   					"    ЗАБЛОКИРОВАН    ",
;;;1668   					"     НЕИСПРАВНА     ",
;;;1669   					"    ВЕНТИЛЯЦИЯ!!!   ",
;;;1670   					5000);
;;;1671   		}
;;;1672   	if(sk_stat[0]==1)
0018b6  7828              LDRB     r0,[r5,#0]  ; sk_stat
0018b8  2801              CMP      r0,#1
0018ba  d105              BNE      |L1.6344|
;;;1673   		{
;;;1674   		vz1_stat=vz1sWRK;
0018bc  f8884005          STRB     r4,[r8,#5]
;;;1675   		lc640_write(EE_VZ1_STAT,vz1sWRK);
0018c0  210a              MOVS     r1,#0xa
0018c2  4658              MOV      r0,r11
0018c4  f7fffffe          BL       lc640_write
                  |L1.6344|
;;;1676   		}
;;;1677   	mess_send(MESS2RELE_HNDL,PARAM_RELE_SAMOKALIBR,0,20);
0018c8  2314              MOVS     r3,#0x14
0018ca  2200              MOVS     r2,#0
0018cc  2164              MOVS     r1,#0x64
0018ce  20d2              MOVS     r0,#0xd2
0018d0  f7fffffe          BL       mess_send
                  |L1.6356|
;;;1678   	}
;;;1679   
;;;1680   if(vz1_stat==vz1sERR3)		//Отключен тумблер "Высокое напряжение"
0018d4  f8980005          LDRB     r0,[r8,#5]  ; vz1_stat
0018d8  280d              CMP      r0,#0xd
0018da  d129              BNE      |L1.6448|
;;;1681   	{
;;;1682   	if((vz1_stat_old!=vz1_stat)||(vz1_stat_cnt==0))
0018dc  f8980006          LDRB     r0,[r8,#6]  ; vz1_stat_old
0018e0  280d              CMP      r0,#0xd
0018e2  d102              BNE      |L1.6378|
0018e4  f8b80076          LDRH     r0,[r8,#0x76]  ; vz1_stat_cnt
0018e8  b908              CBNZ     r0,|L1.6382|
                  |L1.6378|
;;;1683   		{
;;;1684   		vz1_stat_cnt=10;
0018ea  f8a84076          STRH     r4,[r8,#0x76]
                  |L1.6382|
;;;1685   		}
;;;1686   	vz1_stat_cnt--;
0018ee  f8b80076          LDRH     r0,[r8,#0x76]  ; vz1_stat_cnt
0018f2  f1a00001          SUB      r0,r0,#1
0018f6  b200              SXTH     r0,r0
0018f8  f8a80076          STRH     r0,[r8,#0x76]
;;;1687   	if((vz1_stat_cnt==10)||(vz1_stat_cnt==9))
0018fc  280a              CMP      r0,#0xa
0018fe  d001              BEQ      |L1.6404|
001900  2809              CMP      r0,#9
001902  d106              BNE      |L1.6418|
                  |L1.6404|
;;;1688   		{
;;;1689   		show_mess(	"УРАВНИТЕЛЬНЫЙ ЗАРЯД ",
001904  a3db              ADR      r3,|L1.7284|
001906  a2e1              ADR      r2,|L1.7308|
001908  a1e6              ADR      r1,|L1.7332|
00190a  a0d4              ADR      r0,|L1.7260|
00190c  9700              STR      r7,[sp,#0]
00190e  f7fffffe          BL       show_mess
                  |L1.6418|
;;;1690   					"  БУДЕТ ПРОДОЛЖЕН   ",
;;;1691   					"  ПОСЛЕ ВКЛЮЧЕНИЯ   ",
;;;1692   					"*   ТУМБЛЕРА!!!     ",
;;;1693   					5000);
;;;1694   		}
;;;1695   	if(sk_stat[1]==1)
001912  7868              LDRB     r0,[r5,#1]  ; sk_stat
001914  2801              CMP      r0,#1
001916  d105              BNE      |L1.6436|
;;;1696   		{
;;;1697   		vz1_stat=vz1sWRK;
001918  f8884005          STRB     r4,[r8,#5]
;;;1698   		lc640_write(EE_VZ1_STAT,vz1sWRK);
00191c  210a              MOVS     r1,#0xa
00191e  4658              MOV      r0,r11
001920  f7fffffe          BL       lc640_write
                  |L1.6436|
;;;1699   		}
;;;1700   	mess_send(MESS2RELE_HNDL,PARAM_RELE_SAMOKALIBR,0,20);
001924  2314              MOVS     r3,#0x14
001926  2200              MOVS     r2,#0
001928  2164              MOVS     r1,#0x64
00192a  20d2              MOVS     r0,#0xd2
00192c  f7fffffe          BL       mess_send
                  |L1.6448|
;;;1701   	}
;;;1702   if(vz1_stat==vz1sERR4)		//ВЗ закончился а тумблер включен
001930  f8980005          LDRB     r0,[r8,#5]  ; vz1_stat
001934  280e              CMP      r0,#0xe
001936  d12d              BNE      |L1.6548|
;;;1703   	{
;;;1704   	if((vz1_stat_old!=vz1_stat)||(vz1_stat_cnt==0))
001938  f8980006          LDRB     r0,[r8,#6]  ; vz1_stat_old
00193c  280e              CMP      r0,#0xe
00193e  d102              BNE      |L1.6470|
001940  f8b80076          LDRH     r0,[r8,#0x76]  ; vz1_stat_cnt
001944  b908              CBNZ     r0,|L1.6474|
                  |L1.6470|
;;;1705   		{
;;;1706   		vz1_stat_cnt=10;
001946  f8a84076          STRH     r4,[r8,#0x76]
                  |L1.6474|
;;;1707   		}
;;;1708   	vz1_stat_cnt--;
00194a  f8b80076          LDRH     r0,[r8,#0x76]  ; vz1_stat_cnt
00194e  f1a00001          SUB      r0,r0,#1
001952  b200              SXTH     r0,r0
001954  f8a80076          STRH     r0,[r8,#0x76]
;;;1709   	if((vz1_stat_cnt==10)||(vz1_stat_cnt==9))
001958  280a              CMP      r0,#0xa
00195a  d001              BEQ      |L1.6496|
00195c  2809              CMP      r0,#9
00195e  d109              BNE      |L1.6516|
                  |L1.6496|
;;;1710   		{
;;;1711   		show_mess(	"*    ВЫКЛЮЧИТЕ      ",
001960  f2af2388          ADR      r3,|L1.5852|
001964  f2af2274          ADR      r2,|L1.5876|
001968  f2af2160          ADR      r1,|L1.5900|
00196c  a0d3              ADR      r0,|L1.7356|
00196e  9700              STR      r7,[sp,#0]
001970  f7fffffe          BL       show_mess
                  |L1.6516|
;;;1712   					"      ТУМБЛЕР       ",
;;;1713   					"     ВЫСОКОГО       ",
;;;1714   					"    НАПРЯЖЕНИЯ      ",
;;;1715   					5000);
;;;1716   		}
;;;1717   	if(sk_stat[1]==0)
001974  7868              LDRB     r0,[r5,#1]  ; sk_stat
001976  b938              CBNZ     r0,|L1.6536|
;;;1718   		{
;;;1719   		vz1_stat=vz1sOFF;
001978  f8886005          STRB     r6,[r8,#5]
;;;1720   		lc640_write(EE_VZ1_STAT,vz1sOFF);
00197c  2100              MOVS     r1,#0
00197e  4658              MOV      r0,r11
001980  f7fffffe          BL       lc640_write
;;;1721   		vz_stop();
001984  f7fffffe          BL       vz_stop
                  |L1.6536|
;;;1722   
;;;1723   		}
;;;1724   	mess_send(MESS2RELE_HNDL,PARAM_RELE_SAMOKALIBR,1,20);
001988  2314              MOVS     r3,#0x14
00198a  2201              MOVS     r2,#1
00198c  2164              MOVS     r1,#0x64
00198e  20d2              MOVS     r0,#0xd2
001990  f7fffffe          BL       mess_send
                  |L1.6548|
;;;1725   	}
;;;1726   if(vz1_stat==vz1sFINE)		//УЗ закончился, напоминание
001994  f8980005          LDRB     r0,[r8,#5]  ; vz1_stat
;;;1727   	{
;;;1728   	if((vz1_stat_old!=vz1_stat)||(vz1_stat_cnt==0))
;;;1729   		{
;;;1730   		vz1_stat_cnt=10;
;;;1731   		}
;;;1732   	vz1_stat_cnt--;
;;;1733   	if((vz1_stat_cnt==10)||(vz1_stat_cnt==9))
;;;1734   		{
;;;1735   		show_mess(	"   УРАВНИТЕЛЬНЫЙ    ",
001998  f64037b8          MOV      r7,#0xbb8
00199c  280f              CMP      r0,#0xf               ;1726
00199e  d138              BNE      |L1.6674|
0019a0  f8980006          LDRB     r0,[r8,#6]            ;1728  ; vz1_stat_old
0019a4  280f              CMP      r0,#0xf               ;1728
0019a6  d102              BNE      |L1.6574|
0019a8  f8b80076          LDRH     r0,[r8,#0x76]         ;1728  ; vz1_stat_cnt
0019ac  b908              CBNZ     r0,|L1.6578|
                  |L1.6574|
0019ae  f8a84076          STRH     r4,[r8,#0x76]         ;1730
                  |L1.6578|
0019b2  f8b80076          LDRH     r0,[r8,#0x76]         ;1732  ; vz1_stat_cnt
0019b6  f1a00001          SUB      r0,r0,#1              ;1732
0019ba  b200              SXTH     r0,r0                 ;1732
0019bc  f8a80076          STRH     r0,[r8,#0x76]         ;1732
0019c0  280a              CMP      r0,#0xa               ;1733
0019c2  d001              BEQ      |L1.6600|
0019c4  2809              CMP      r0,#9                 ;1733
0019c6  d106              BNE      |L1.6614|
                  |L1.6600|
0019c8  a3c2              ADR      r3,|L1.7380|
0019ca  a2c8              ADR      r2,|L1.7404|
0019cc  a1cd              ADR      r1,|L1.7428|
0019ce  a0d3              ADR      r0,|L1.7452|
0019d0  9700              STR      r7,[sp,#0]
0019d2  f7fffffe          BL       show_mess
                  |L1.6614|
;;;1736   					"       ЗАРЯД        ",
;;;1737   					"      УСПЕШНО       ",
;;;1738   					"     ЗАВЕРШЕН       ",
;;;1739   					3000);
;;;1740   		}
;;;1741   	if((vz1_stat_cnt==6)||(vz1_stat_cnt==5))
0019d6  f9b80076          LDRSH    r0,[r8,#0x76]  ; vz1_stat_cnt
0019da  2806              CMP      r0,#6
0019dc  d001              BEQ      |L1.6626|
0019de  2805              CMP      r0,#5
0019e0  d109              BNE      |L1.6646|
                  |L1.6626|
;;;1742   		{
;;;1743   		show_mess(	"     ВЫКЛЮЧИТЕ      ",
0019e2  f2af3308          ADR      r3,|L1.5852|
0019e6  f2af22f4          ADR      r2,|L1.5876|
0019ea  f2af21e0          ADR      r1,|L1.5900|
0019ee  a0d1              ADR      r0,|L1.7476|
0019f0  9700              STR      r7,[sp,#0]
0019f2  f7fffffe          BL       show_mess
                  |L1.6646|
;;;1744   					"      ТУМБЛЕР       ",
;;;1745   					"     ВЫСОКОГО       ",
;;;1746   					"    НАПРЯЖЕНИЯ      ",
;;;1747   					3000);
;;;1748   		}
;;;1749   	if(sk_stat[1]==0)
0019f6  7868              LDRB     r0,[r5,#1]  ; sk_stat
0019f8  b928              CBNZ     r0,|L1.6662|
;;;1750   		{
;;;1751   		vz1_stat=vz1sOFF;
0019fa  f8886005          STRB     r6,[r8,#5]
;;;1752   		lc640_write(EE_VZ1_STAT,vz1sOFF);
0019fe  2100              MOVS     r1,#0
001a00  4658              MOV      r0,r11
001a02  f7fffffe          BL       lc640_write
                  |L1.6662|
;;;1753   		}
;;;1754   	mess_send(MESS2RELE_HNDL,PARAM_RELE_SAMOKALIBR,0,20);
001a06  2314              MOVS     r3,#0x14
001a08  2200              MOVS     r2,#0
001a0a  2164              MOVS     r1,#0x64
001a0c  20d2              MOVS     r0,#0xd2
001a0e  f7fffffe          BL       mess_send
                  |L1.6674|
;;;1755   	}
;;;1756   
;;;1757   if(vz1_stat==vz1sSTOP)		//УЗ прекращен, напоминание
001a12  f8980005          LDRB     r0,[r8,#5]  ; vz1_stat
001a16  2810              CMP      r0,#0x10
001a18  d138              BNE      |L1.6796|
;;;1758   	{
;;;1759   	if((vz1_stat_old!=vz1_stat)||(vz1_stat_cnt==0))
001a1a  f8980006          LDRB     r0,[r8,#6]  ; vz1_stat_old
001a1e  2810              CMP      r0,#0x10
001a20  d102              BNE      |L1.6696|
001a22  f8b80076          LDRH     r0,[r8,#0x76]  ; vz1_stat_cnt
001a26  b908              CBNZ     r0,|L1.6700|
                  |L1.6696|
;;;1760   		{
;;;1761   		vz1_stat_cnt=10;
001a28  f8a84076          STRH     r4,[r8,#0x76]
                  |L1.6700|
;;;1762   		}
;;;1763   	vz1_stat_cnt--;
001a2c  f8b80076          LDRH     r0,[r8,#0x76]  ; vz1_stat_cnt
001a30  f1a00001          SUB      r0,r0,#1
001a34  b200              SXTH     r0,r0
001a36  f8a80076          STRH     r0,[r8,#0x76]
;;;1764   	if((vz1_stat_cnt==10)||(vz1_stat_cnt==9))
001a3a  280a              CMP      r0,#0xa
001a3c  d001              BEQ      |L1.6722|
001a3e  2809              CMP      r0,#9
001a40  d106              BNE      |L1.6736|
                  |L1.6722|
;;;1765   		{
;;;1766   		show_mess(	"   УРАВНИТЕЛЬНЫЙ    ",
001a42  a3c2              ADR      r3,|L1.7500|
001a44  a2c7              ADR      r2,|L1.7524|
001a46  a1af              ADR      r1,|L1.7428|
001a48  a0b4              ADR      r0,|L1.7452|
001a4a  9700              STR      r7,[sp,#0]
001a4c  f7fffffe          BL       show_mess
                  |L1.6736|
;;;1767   					"       ЗАРЯД        ",
;;;1768   					"     ПРЕКРАЩЕН      ",
;;;1769   					"                    ",
;;;1770   					3000);
;;;1771   		}
;;;1772   	if((vz1_stat_cnt==6)||(vz1_stat_cnt==5))
001a50  f9b80076          LDRSH    r0,[r8,#0x76]  ; vz1_stat_cnt
001a54  2806              CMP      r0,#6
001a56  d001              BEQ      |L1.6748|
001a58  2805              CMP      r0,#5
001a5a  d109              BNE      |L1.6768|
                  |L1.6748|
;;;1773   		{
;;;1774   		show_mess(	"     ВЫКЛЮЧИТЕ      ",
001a5c  f2af3384          ADR      r3,|L1.5852|
001a60  f2af3270          ADR      r2,|L1.5876|
001a64  f2af315c          ADR      r1,|L1.5900|
001a68  a0b2              ADR      r0,|L1.7476|
001a6a  9700              STR      r7,[sp,#0]
001a6c  f7fffffe          BL       show_mess
                  |L1.6768|
;;;1775   					"      ТУМБЛЕР       ",
;;;1776   					"     ВЫСОКОГО       ",
;;;1777   					"    НАПРЯЖЕНИЯ      ",
;;;1778   					3000);
;;;1779   		}
;;;1780   	if(sk_stat[1]==0)
001a70  7868              LDRB     r0,[r5,#1]  ; sk_stat
001a72  b928              CBNZ     r0,|L1.6784|
;;;1781   		{
;;;1782   		vz1_stat=vz1sOFF;
001a74  f8886005          STRB     r6,[r8,#5]
;;;1783   		lc640_write(EE_VZ1_STAT,vz1sOFF);
001a78  2100              MOVS     r1,#0
001a7a  4658              MOV      r0,r11
001a7c  f7fffffe          BL       lc640_write
                  |L1.6784|
;;;1784   		}
;;;1785   	mess_send(MESS2RELE_HNDL,PARAM_RELE_SAMOKALIBR,0,20);
001a80  2314              MOVS     r3,#0x14
001a82  2200              MOVS     r2,#0
001a84  2164              MOVS     r1,#0x64
001a86  20d2              MOVS     r0,#0xd2
001a88  f7fffffe          BL       mess_send
                  |L1.6796|
;;;1786   	}
;;;1787   
;;;1788   vz1_stat_old=vz1_stat;
001a8c  f8980005          LDRB     r0,[r8,#5]  ; vz1_stat
001a90  f8880006          STRB     r0,[r8,#6]
;;;1789   
;;;1790   
;;;1791   
;;;1792   }
001a94  e8bd8ff8          POP      {r3-r11,pc}
;;;1793   
                          ENDP

                  vz1_start PROC
;;;1795   //старт уравнительног заряда
;;;1796   char vz1_start(char hour)
001a98  b510              PUSH     {r4,lr}
;;;1797   {          
;;;1798   char out;
;;;1799   out=0;
001a9a  f04f0000          MOV      r0,#0
;;;1800   if((spc_stat==spcOFF)&&(speedChrgBlckStat!=1)&&(vz1_stat==vz1sOFF))
001a9e  49b7              LDR      r1,|L1.7548|
001aa0  f8912023          LDRB     r2,[r1,#0x23]  ; spc_stat
001aa4  2a00              CMP      r2,#0
001aa6  d110              BNE      |L1.6858|
001aa8  4ab5              LDR      r2,|L1.7552|
001aaa  8812              LDRH     r2,[r2,#0]  ; speedChrgBlckStat
001aac  2a01              CMP      r2,#1
001aae  d00c              BEQ      |L1.6858|
001ab0  794a              LDRB     r2,[r1,#5]  ; vz1_stat
001ab2  2a00              CMP      r2,#0
001ab4  d109              BNE      |L1.6858|
;;;1801   	{
;;;1802   	if(vz1_stat==vz1sOFF)
;;;1803   		{
;;;1804   		vz1_stat=vz1sSTEP1;
001ab6  f04f0001          MOV      r0,#1
001aba  7148              STRB     r0,[r1,#5]
;;;1805   		lc640_write(EE_VZ1_STAT,vz1sSTEP1);
001abc  4601              MOV      r1,r0
001abe  f44f70c9          MOV      r0,#0x192
001ac2  f7fffffe          BL       lc640_write
;;;1806   		out=1;
001ac6  f04f0001          MOV      r0,#1
                  |L1.6858|
;;;1807   		
;;;1808   		}
;;;1809   /*	spc_stat=spcVZ;
;;;1810   	__ee_spc_stat=spcVZ; 
;;;1811   	lc640_write_int(EE_SPC_STAT,__ee_spc_stat);   
;;;1812   	vz_cnt_h=hour;
;;;1813   	__ee_vz_cnt=hour*60;
;;;1814   	if(hour==0)__ee_vz_cnt=30;
;;;1815   	lc640_write_int(EE_VZ_CNT,__ee_vz_cnt);
;;;1816   	lc640_write_int(EE_SPC_VZ_LENGT,__ee_vz_cnt);	
;;;1817   	vz_cnt_h_=0;
;;;1818   	vz_cnt_s=0;
;;;1819   	vz_cnt_s_=0;
;;;1820   	
;;;1821   		*/
;;;1822   	}
;;;1823   //else if((spc_stat==spc_KE1p1)||(spc_stat==spc_KE1p2)) out=22; 
;;;1824   //else if((spc_stat==spc_KE2p1)||(spc_stat==spc_KE2p2)) out=33;
;;;1825   //plazma=out;	
;;;1826   return out;
;;;1827   }
001aca  bd10              POP      {r4,pc}
;;;1828   
                          ENDP

                  vz1_stop PROC
;;;1830   //стоп уравнительног заряда
;;;1831   void vz1_stop(void)
001acc  48ab              LDR      r0,|L1.7548|
;;;1832   {
;;;1833   if(vz1_stat!=vz1sOFF)
001ace  7941              LDRB     r1,[r0,#5]  ; vz1_stat
001ad0  2900              CMP      r1,#0
001ad2  d006              BEQ      |L1.6882|
;;;1834   	{
;;;1835   	vz1_stat=vz1sSTOP;
001ad4  f04f0110          MOV      r1,#0x10
001ad8  7141              STRB     r1,[r0,#5]
;;;1836   	lc640_write(EE_VZ1_STAT,vz1sSTOP);
001ada  f44f70c9          MOV      r0,#0x192
001ade  f7ffbffe          B.W      lc640_write
                  |L1.6882|
;;;1837   	}
;;;1838   }
001ae2  4770              BX       lr
;;;1839   
                          ENDP

                  vz2_drv PROC
;;;1841   //драйвер формовочного заряда
;;;1842   void vz2_drv(void)
001ae4  e92d4ff8          PUSH     {r3-r11,lr}
;;;1843   {
;;;1844   
;;;1845   if(vz2_stat==vz2sSTEP1)
001ae8  4ea4              LDR      r6,|L1.7548|
;;;1846   	{
;;;1847   	if(vz2_stat_old!=vz2_stat)
;;;1848   		{
;;;1849   		vz2_stat_cnt=5;
;;;1850   		}
;;;1851   	if(vz2_stat_cnt)
;;;1852   		{
;;;1853   		vz2_stat_cnt--;
;;;1854   		if(vz2_stat_cnt==0)
;;;1855   			{
;;;1856   			vz2_stat=vz2sERR1; 	//Не включилась вентиляция;
;;;1857   			lc640_write(EE_VZ2_STAT,vz2sERR1);
;;;1858   			}
;;;1859   		}
;;;1860   	if(sk_stat[0]==1)
001aea  4da6              LDR      r5,|L1.7556|
001aec  79f0              LDRB     r0,[r6,#7]            ;1845  ; vz2_stat
001aee  2801              CMP      r0,#1                 ;1845
001af0  d138              BNE      |L1.7012|
001af2  7a30              LDRB     r0,[r6,#8]            ;1847  ; vz2_stat_old
001af4  2801              CMP      r0,#1                 ;1847
001af6  d003              BEQ      |L1.6912|
001af8  f04f0005          MOV      r0,#5                 ;1849
001afc  f8a6007a          STRH     r0,[r6,#0x7a]         ;1849
                  |L1.6912|
001b00  f9b6007a          LDRSH    r0,[r6,#0x7a]         ;1851  ; vz2_stat_cnt
001b04  b168              CBZ      r0,|L1.6946|
001b06  f1a00001          SUB      r0,r0,#1              ;1853
001b0a  b200              SXTH     r0,r0                 ;1853
001b0c  f8a6007a          STRH     r0,[r6,#0x7a]         ;1853
001b10  b938              CBNZ     r0,|L1.6946|
001b12  f04f000c          MOV      r0,#0xc               ;1856
001b16  71f0              STRB     r0,[r6,#7]            ;1856
001b18  4601              MOV      r1,r0                 ;1857
001b1a  f44f70ca          MOV      r0,#0x194             ;1857
001b1e  f7fffffe          BL       lc640_write
                  |L1.6946|
001b22  7828              LDRB     r0,[r5,#0]  ; sk_stat
001b24  2801              CMP      r0,#1
001b26  d117              BNE      |L1.7000|
;;;1861   		{
;;;1862   		vz2_stat=vz2sSTEP2;
001b28  f04f0002          MOV      r0,#2
001b2c  71f0              STRB     r0,[r6,#7]
;;;1863   		lc640_write(EE_VZ2_STAT,vz2sSTEP2);
001b2e  4601              MOV      r1,r0
001b30  f44f70ca          MOV      r0,#0x194
001b34  f7fffffe          BL       lc640_write
;;;1864   		tree_up(iVZ2_STEP2_2,1,0,0);
001b38  2300              MOVS     r3,#0
001b3a  461a              MOV      r2,r3
001b3c  2101              MOVS     r1,#1
001b3e  20e3              MOVS     r0,#0xe3
001b40  f7fffffe          BL       tree_up
;;;1865   		tree_up(iVZ2_STEP2_1,0,0,0);
001b44  2300              MOVS     r3,#0
001b46  461a              MOV      r2,r3
001b48  4619              MOV      r1,r3
001b4a  20e2              MOVS     r0,#0xe2
001b4c  f7fffffe          BL       tree_up
;;;1866   		ret(1200);
001b50  f44f6096          MOV      r0,#0x4b0
001b54  f7fffffe          BL       ||ret||
                  |L1.7000|
;;;1867   		}
;;;1868   	mess_send(MESS2RELE_HNDL,PARAM_RELE_SAMOKALIBR,0,20);
001b58  2314              MOVS     r3,#0x14
001b5a  2200              MOVS     r2,#0
001b5c  2164              MOVS     r1,#0x64
001b5e  20d2              MOVS     r0,#0xd2
001b60  f7fffffe          BL       mess_send
                  |L1.7012|
;;;1869   	}
;;;1870   
;;;1871   if(vz2_stat==vz2sSTEP2)
001b64  79f0              LDRB     r0,[r6,#7]  ; vz2_stat
001b66  2802              CMP      r0,#2
001b68  d119              BNE      |L1.7070|
;;;1872   	{
;;;1873   	if((vz2_stat_old!=vz2_stat)||(vz2_stat_cnt==0))
001b6a  7a30              LDRB     r0,[r6,#8]  ; vz2_stat_old
001b6c  2802              CMP      r0,#2
001b6e  d102              BNE      |L1.7030|
001b70  f8b6007a          LDRH     r0,[r6,#0x7a]  ; vz2_stat_cnt
001b74  b918              CBNZ     r0,|L1.7038|
                  |L1.7030|
;;;1874   		{
;;;1875   		vz2_stat_cnt=15;
001b76  f04f000f          MOV      r0,#0xf
001b7a  f8a6007a          STRH     r0,[r6,#0x7a]
                  |L1.7038|
;;;1876   		}
;;;1877   	vz2_stat_cnt--;
001b7e  f8b6007a          LDRH     r0,[r6,#0x7a]  ; vz2_stat_cnt
001b82  f1a00001          SUB      r0,r0,#1
001b86  f8a6007a          STRH     r0,[r6,#0x7a]
;;;1878   	mess_send(MESS2RELE_HNDL,PARAM_RELE_SAMOKALIBR,0,20);
001b8a  f04f0314          MOV      r3,#0x14
001b8e  f04f0200          MOV      r2,#0
001b92  f04f0164          MOV      r1,#0x64
001b96  f04f00d2          MOV      r0,#0xd2
001b9a  f7fffffe          BL       mess_send
                  |L1.7070|
;;;1879   	}
;;;1880   
;;;1881   if(vz2_stat==vz2sSTEP3)
001b9e  79f0              LDRB     r0,[r6,#7]  ; vz2_stat
;;;1882   	{
;;;1883   	if((vz2_stat_old!=vz2_stat)||(vz2_stat_cnt==0))
;;;1884   		{
;;;1885   		vz2_stat_cnt=10;
001ba0  240a              MOVS     r4,#0xa
001ba2  2700              MOVS     r7,#0
;;;1886   		cntrl_stat=0;
;;;1887   		cntrl_stat_new=0;
;;;1888   		cntrl_stat_old=0;
;;;1889   		}
;;;1890   	vz2_stat_cnt--;
;;;1891   	if((vz2_stat_cnt==10)||(vz2_stat_cnt==9))
;;;1892   		{
;;;1893   		show_mess(	"     ВКЛЮЧИТЕ       ",
001ba4  f2413888          MOV      r8,#0x1388
001ba8  2803              CMP      r0,#3                 ;1881
001baa  d131              BNE      |L1.7184|
001bac  7a30              LDRB     r0,[r6,#8]            ;1883  ; vz2_stat_old
001bae  2803              CMP      r0,#3                 ;1883
001bb0  d102              BNE      |L1.7096|
001bb2  f8b6007a          LDRH     r0,[r6,#0x7a]         ;1883  ; vz2_stat_cnt
001bb6  b928              CBNZ     r0,|L1.7108|
                  |L1.7096|
001bb8  f8a6407a          STRH     r4,[r6,#0x7a]         ;1885
001bbc  8677              STRH     r7,[r6,#0x32]         ;1886
001bbe  f8a67048          STRH     r7,[r6,#0x48]         ;1887
001bc2  86b7              STRH     r7,[r6,#0x34]         ;1888
                  |L1.7108|
001bc4  f8b6007a          LDRH     r0,[r6,#0x7a]         ;1890  ; vz2_stat_cnt
001bc8  f1a00001          SUB      r0,r0,#1              ;1890
001bcc  b200              SXTH     r0,r0                 ;1890
001bce  f8a6007a          STRH     r0,[r6,#0x7a]         ;1890
001bd2  280a              CMP      r0,#0xa               ;1891
001bd4  d001              BEQ      |L1.7130|
001bd6  2809              CMP      r0,#9                 ;1891
001bd8  d10b              BNE      |L1.7154|
                  |L1.7130|
001bda  f2af5300          ADR      r3,|L1.5852|
001bde  f2af42ec          ADR      r2,|L1.5876|
001be2  f2af41d8          ADR      r1,|L1.5900|
001be6  f2af40c4          ADR      r0,|L1.5924|
001bea  f8cd8000          STR      r8,[sp,#0]
001bee  f7fffffe          BL       show_mess
                  |L1.7154|
;;;1894   					"      ТУМБЛЕР       ",
;;;1895   					"     ВЫСОКОГО       ",
;;;1896   					"    НАПРЯЖЕНИЯ      ",
;;;1897   					5000);
;;;1898   		}
;;;1899   	if(sk_stat[1]==1)
001bf2  7868              LDRB     r0,[r5,#1]  ; sk_stat
001bf4  2801              CMP      r0,#1
001bf6  d10c              BNE      |L1.7186|
;;;1900   		{
;;;1901   		vz2_stat=vz2sWRK1;
001bf8  71f4              STRB     r4,[r6,#7]
;;;1902   		lc640_write(EE_VZ2_STAT,vz2sWRK1);
001bfa  210a              MOVS     r1,#0xa
001bfc  f44f70ca          MOV      r0,#0x194
001c00  f7fffffe          BL       lc640_write
;;;1903   		volt_region=1;
001c04  f04f0001          MOV      r0,#1
001c08  f886002f          STRB     r0,[r6,#0x2f]
;;;1904   		cntrl_stat=0;
001c0c  8677              STRH     r7,[r6,#0x32]
;;;1905   		cntrl_stat_new=0;
001c0e  e0bb              B        |L1.7560|
                  |L1.7184|
001c10  e0c3              B        |L1.7578|
                  |L1.7186|
001c12  e0bc              B        |L1.7566|
                  |L1.7188|
001c14  2020c1c5          DCB      "  ",193,197,199," ",194,197,205,210,200,203,223,214,200
001c18  c720c2c5
001c1c  cdd2c8cb
001c20  dfd6c8  
001c23  c8212120          DCB      200,"!!  ",0
001c27  2000    
001c29  00                DCB      0
001c2a  00                DCB      0
001c2b  00                DCB      0
                  |L1.7212|
001c2c  20202020          DCB      "      ",194,202,203,222,215,197,205,"       ",0
001c30  2020c2ca
001c34  cbded7c5
001c38  cd202020
001c3c  20202020
001c40  00      
001c41  00                DCB      0
001c42  00                DCB      0
001c43  00                DCB      0
                  |L1.7236|
001c44  202020cd          DCB      "   ",205,197," ",204,206,198,197,210," ",193,219,210,220
001c48  c520ccce
001c4c  c6c5d220
001c50  c1dbd2dc
001c54  20202020          DCB      "    ",0
001c58  00      
001c59  00                DCB      0
001c5a  00                DCB      0
001c5b  00                DCB      0
                  |L1.7260|
001c5c  d3d0c0c2          DCB      211,208,192,194,205,200,210,197,203,220,205,219,201," ",199
001c60  cdc8d2c5
001c64  cbdccddb
001c68  c920c7  
001c6b  c0d0dfc4          DCB      192,208,223,196," ",0
001c6f  2000    
001c71  00                DCB      0
001c72  00                DCB      0
001c73  00                DCB      0
                  |L1.7284|
001c74  2a202020          DCB      "*   ",210,211,204,193,203,197,208,192,"!!!     ",0
001c78  d2d3ccc1
001c7c  cbc5d0c0
001c80  21212120
001c84  20202020
001c88  00      
001c89  00                DCB      0
001c8a  00                DCB      0
001c8b  00                DCB      0
                  |L1.7308|
001c8c  2020cfce          DCB      "  ",207,206,209,203,197," ",194,202,203,222,215,197,205
001c90  d1cbc520
001c94  c2cacbde
001c98  d7c5cd  
001c9b  c8df2020          DCB      200,223,"   ",0
001c9f  2000    
001ca1  00                DCB      0
001ca2  00                DCB      0
001ca3  00                DCB      0
                  |L1.7332|
001ca4  2020c1d3          DCB      "  ",193,211,196,197,210," ",207,208,206,196,206,203,198
001ca8  c4c5d220
001cac  cfd0cec4
001cb0  cecbc6  
001cb3  c5cd2020          DCB      197,205,"   ",0
001cb7  2000    
001cb9  00                DCB      0
001cba  00                DCB      0
001cbb  00                DCB      0
                  |L1.7356|
001cbc  2a202020          DCB      "*    ",194,219,202,203,222,215,200,210,197,"      ",0
001cc0  20c2dbca
001cc4  cbded7c8
001cc8  d2c52020
001ccc  20202020
001cd0  00      
001cd1  00                DCB      0
001cd2  00                DCB      0
001cd3  00                DCB      0
                  |L1.7380|
001cd4  20202020          DCB      "     ",199,192,194,197,208,216,197,205,"       ",0
001cd8  20c7c0c2
001cdc  c5d0d8c5
001ce0  cd202020
001ce4  20202020
001ce8  00      
001ce9  00                DCB      0
001cea  00                DCB      0
001ceb  00                DCB      0
                  |L1.7404|
001cec  20202020          DCB      "      ",211,209,207,197,216,205,206,"       ",0
001cf0  2020d3d1
001cf4  cfc5d8cd
001cf8  ce202020
001cfc  20202020
001d00  00      
001d01  00                DCB      0
001d02  00                DCB      0
001d03  00                DCB      0
                  |L1.7428|
001d04  20202020          DCB      "       ",199,192,208,223,196,"        ",0
001d08  202020c7
001d0c  c0d0dfc4
001d10  20202020
001d14  20202020
001d18  00      
001d19  00                DCB      0
001d1a  00                DCB      0
001d1b  00                DCB      0
                  |L1.7452|
001d1c  202020d3          DCB      "   ",211,208,192,194,205,200,210,197,203,220,205,219,201
001d20  d0c0c2cd
001d24  c8d2c5cb
001d28  dccddbc9
001d2c  20202020          DCB      "    ",0
001d30  00      
001d31  00                DCB      0
001d32  00                DCB      0
001d33  00                DCB      0
                  |L1.7476|
001d34  20202020          DCB      "     ",194,219,202,203,222,215,200,210,197,"      ",0
001d38  20c2dbca
001d3c  cbded7c8
001d40  d2c52020
001d44  20202020
001d48  00      
001d49  00                DCB      0
001d4a  00                DCB      0
001d4b  00                DCB      0
                  |L1.7500|
001d4c  20202020          DCB      "                    ",0
001d50  20202020
001d54  20202020
001d58  20202020
001d5c  20202020
001d60  00      
001d61  00                DCB      0
001d62  00                DCB      0
001d63  00                DCB      0
                  |L1.7524|
001d64  20202020          DCB      "     ",207,208,197,202,208,192,217,197,205,"      ",0
001d68  20cfd0c5
001d6c  cad0c0d9
001d70  c5cd2020
001d74  20202020
001d78  00      
001d79  00                DCB      0
001d7a  00                DCB      0
001d7b  00                DCB      0
                  |L1.7548|
                          DCD      ||area_number.25||
                  |L1.7552|
                          DCD      speedChrgBlckStat
                  |L1.7556|
                          DCD      sk_stat
                  |L1.7560|
001d88  f8a67048          STRH     r7,[r6,#0x48]
;;;1906   		cntrl_stat_old=0;
001d8c  86b7              STRH     r7,[r6,#0x34]
                  |L1.7566|
;;;1907   		}
;;;1908   	mess_send(MESS2RELE_HNDL,PARAM_RELE_SAMOKALIBR,0,20);
001d8e  2314              MOVS     r3,#0x14
001d90  2200              MOVS     r2,#0
001d92  2164              MOVS     r1,#0x64
001d94  20d2              MOVS     r0,#0xd2
001d96  f7fffffe          BL       mess_send
                  |L1.7578|
;;;1909   	}
;;;1910   
;;;1911   if(vz2_stat==vz2sWRK1)
001d9a  79f0              LDRB     r0,[r6,#7]  ; vz2_stat
;;;1912   	{
;;;1913   
;;;1914   	if(vz2_stat_old!=vz2_stat)
;;;1915   		{
;;;1916   		vz2_wrk_cnt=3600L/*100L*/*((long)FZ_T1);
001d9c  f8df940c          LDR      r9,|L1.8620|
;;;1917   		//if(VZ_HR==0)  	hv_vz_wrk_cnt=1800L;
;;;1918   		vz2_up_cnt=0L;
;;;1919   
;;;1920   		}
;;;1921   	vz2_wrk_cnt--;
;;;1922   	vz2_up_cnt++;
;;;1923   
;;;1924   	if(vz2_wrk_cnt==0)
;;;1925   		{
;;;1926   		vz2_stat=vz2sWRK2;
;;;1927   		lc640_write(EE_VZ2_STAT,vz2sWRK2);
;;;1928   		}
;;;1929   	if(sk_stat[0]==0)
;;;1930   		{
;;;1931   		vz2_stat=vz2sERR2;
;;;1932   		lc640_write(EE_VZ2_STAT,vz2sERR2);
;;;1933   		}
;;;1934   	if(sk_stat[1]==0)
;;;1935   		{
;;;1936   		vz2_stat=vz2sERR3;
;;;1937   		lc640_write(EE_VZ2_STAT,vz2sERR3);
;;;1938   		}
;;;1939   	//if(abs(out_U-FZ_U1)<10)
;;;1940   	if((out_U<(FZ_U1+30))&&(out_U>(FZ_U1-10)))
;;;1941   		{
;;;1942   		if((Ib_ips_termokompensat/10)<FZ_ISW12)
;;;1943   			{
;;;1944   			if(vz2_stat_ph2_cnt)
;;;1945   				{
;;;1946   				vz2_stat_ph2_cnt--;
;;;1947   				if(vz2_stat_ph2_cnt==0)
;;;1948   					{
;;;1949   					vz2_stat=vz2sWRK2;
;;;1950   					lc640_write(EE_VZ2_STAT,vz2sWRK2);
;;;1951   					}
;;;1952   				}
;;;1953   			}
;;;1954   		else
;;;1955   			{
;;;1956   			vz2_stat_ph2_cnt=60;
;;;1957   			}
;;;1958   		}
;;;1959   	else
;;;1960   		{
;;;1961   		vz2_stat_ph2_cnt=60;
;;;1962   		}
;;;1963   	if(((Ibmax/10)>IZMAX_)&&(cntrl_stat<=20)&&(volt_region==1)&&(volt_region_cnt==0))
;;;1964   		{
;;;1965   		volt_region=0;
;;;1966   		cntrl_stat=1000;
001da0  f44f7b7a          MOV      r11,#0x3e8
001da4  f04f0a0b          MOV      r10,#0xb              ;1926
001da8  280a              CMP      r0,#0xa               ;1911
001daa  d17d              BNE      |L1.7848|
001dac  7a30              LDRB     r0,[r6,#8]            ;1914  ; vz2_stat_old
001dae  280a              CMP      r0,#0xa               ;1914
001db0  d00a              BEQ      |L1.7624|
001db2  48ff              LDR      r0,|L1.8624|
001db4  f44f6161          MOV      r1,#0xe10             ;1916
001db8  f9b00000          LDRSH    r0,[r0,#0]            ;1916  ; FZ_T1
001dbc  fb00f001          MUL      r0,r0,r1              ;1916
001dc0  f8c90048          STR      r0,[r9,#0x48]         ;1916  ; vz2_wrk_cnt
001dc4  f8c9704c          STR      r7,[r9,#0x4c]         ;1918  ; vz2_up_cnt
                  |L1.7624|
001dc8  f8d90048          LDR      r0,[r9,#0x48]         ;1921  ; vz2_wrk_cnt
001dcc  f1a00001          SUB      r0,r0,#1              ;1921
001dd0  f8c90048          STR      r0,[r9,#0x48]         ;1921  ; vz2_wrk_cnt
001dd4  f8d9104c          LDR      r1,[r9,#0x4c]         ;1922  ; vz2_up_cnt
001dd8  f1010101          ADD      r1,r1,#1              ;1922
001ddc  f8c9104c          STR      r1,[r9,#0x4c]         ;1922  ; vz2_up_cnt
001de0  b930              CBNZ     r0,|L1.7664|
001de2  f886a007          STRB     r10,[r6,#7]           ;1926
001de6  210b              MOVS     r1,#0xb               ;1927
001de8  f44f70ca          MOV      r0,#0x194             ;1927
001dec  f7fffffe          BL       lc640_write
                  |L1.7664|
001df0  7828              LDRB     r0,[r5,#0]            ;1929  ; sk_stat
001df2  b938              CBNZ     r0,|L1.7684|
001df4  f04f000d          MOV      r0,#0xd               ;1931
001df8  71f0              STRB     r0,[r6,#7]            ;1931
001dfa  4601              MOV      r1,r0                 ;1932
001dfc  f44f70ca          MOV      r0,#0x194             ;1932
001e00  f7fffffe          BL       lc640_write
                  |L1.7684|
001e04  7868              LDRB     r0,[r5,#1]            ;1934  ; sk_stat
001e06  b938              CBNZ     r0,|L1.7704|
001e08  f04f000e          MOV      r0,#0xe               ;1936
001e0c  71f0              STRB     r0,[r6,#7]            ;1936
001e0e  4601              MOV      r1,r0                 ;1937
001e10  f44f70ca          MOV      r0,#0x194             ;1937
001e14  f7fffffe          BL       lc640_write
                  |L1.7704|
001e18  48e6              LDR      r0,|L1.8628|
001e1a  223c              MOVS     r2,#0x3c              ;1956
001e1c  f9b01000          LDRSH    r1,[r0,#0]            ;1940  ; out_U
001e20  48e5              LDR      r0,|L1.8632|
001e22  f9b00000          LDRSH    r0,[r0,#0]            ;1940  ; FZ_U1
001e26  f100031e          ADD      r3,r0,#0x1e           ;1940
001e2a  4299              CMP      r1,r3                 ;1940
001e2c  da20              BGE      |L1.7792|
001e2e  380a              SUBS     r0,r0,#0xa            ;1940
001e30  4281              CMP      r1,r0                 ;1940
001e32  dd1d              BLE      |L1.7792|
001e34  48e1              LDR      r0,|L1.8636|
001e36  49e2              LDR      r1,|L1.8640|
001e38  f9b00000          LDRSH    r0,[r0,#0]            ;1942  ; Ib_ips_termokompensat
001e3c  f9b11000          LDRSH    r1,[r1,#0]            ;1942  ; FZ_ISW12
001e40  fb90f0f4          SDIV     r0,r0,r4              ;1942
001e44  4288              CMP      r0,r1                 ;1942
001e46  da10              BGE      |L1.7786|
001e48  f9b6007c          LDRSH    r0,[r6,#0x7c]         ;1944  ; vz2_stat_ph2_cnt
001e4c  b190              CBZ      r0,|L1.7796|
001e4e  f1a00001          SUB      r0,r0,#1              ;1946
001e52  b200              SXTH     r0,r0                 ;1946
001e54  f8a6007c          STRH     r0,[r6,#0x7c]         ;1946
001e58  b960              CBNZ     r0,|L1.7796|
001e5a  f886a007          STRB     r10,[r6,#7]           ;1949
001e5e  210b              MOVS     r1,#0xb               ;1950
001e60  f44f70ca          MOV      r0,#0x194             ;1950
001e64  f7fffffe          BL       lc640_write
001e68  e004              B        |L1.7796|
                  |L1.7786|
001e6a  f8a6207c          STRH     r2,[r6,#0x7c]         ;1956
001e6e  e001              B        |L1.7796|
                  |L1.7792|
001e70  f8a6207c          STRH     r2,[r6,#0x7c]         ;1961
                  |L1.7796|
001e74  f9b6004a          LDRSH    r0,[r6,#0x4a]         ;1963  ; Ibmax
001e78  f8b6104c          LDRH     r1,[r6,#0x4c]         ;1963  ; IZMAX_
001e7c  fb90f0f4          SDIV     r0,r0,r4              ;1963
001e80  4288              CMP      r0,r1                 ;1963
001e82  dd18              BLE      |L1.7862|
001e84  f9b62032          LDRSH    r2,[r6,#0x32]         ;1963  ; cntrl_stat
001e88  2a14              CMP      r2,#0x14              ;1963
001e8a  dc14              BGT      |L1.7862|
001e8c  f896202f          LDRB     r2,[r6,#0x2f]         ;1963  ; volt_region
001e90  2a01              CMP      r2,#1                 ;1963
001e92  d110              BNE      |L1.7862|
001e94  f8b62078          LDRH     r2,[r6,#0x78]         ;1963  ; volt_region_cnt
001e98  b96a              CBNZ     r2,|L1.7862|
001e9a  f886702f          STRB     r7,[r6,#0x2f]         ;1965
001e9e  f8a6b032          STRH     r11,[r6,#0x32]
;;;1967   		cntrl_stat_new=1000;
001ea2  f8a6b048          STRH     r11,[r6,#0x48]
;;;1968   		cntrl_stat_old=1000;
001ea6  e000              B        |L1.7850|
                  |L1.7848|
001ea8  e02e              B        |L1.7944|
                  |L1.7850|
001eaa  f8a6b034          STRH     r11,[r6,#0x34]
;;;1969   		volt_region_cnt=110;
001eae  f04f026e          MOV      r2,#0x6e
001eb2  f8a62078          STRH     r2,[r6,#0x78]
                  |L1.7862|
;;;1970   		}
;;;1971   	if(((Ibmax/10)<IZMAX_)&&(cntrl_stat>=1000)&&(volt_region==0)&&(volt_region_cnt==0))
001eb6  4288              CMP      r0,r1
001eb8  da13              BGE      |L1.7906|
001eba  f9b60032          LDRSH    r0,[r6,#0x32]  ; cntrl_stat
001ebe  4558              CMP      r0,r11
001ec0  db0f              BLT      |L1.7906|
001ec2  f896002f          LDRB     r0,[r6,#0x2f]  ; volt_region
001ec6  b960              CBNZ     r0,|L1.7906|
001ec8  f8b60078          LDRH     r0,[r6,#0x78]  ; volt_region_cnt
001ecc  b948              CBNZ     r0,|L1.7906|
;;;1972   		{
;;;1973   		volt_region=1;
001ece  f04f0001          MOV      r0,#1
001ed2  f886002f          STRB     r0,[r6,#0x2f]
;;;1974   		cntrl_stat=10;
001ed6  8674              STRH     r4,[r6,#0x32]
;;;1975   		cntrl_stat_new=10;
001ed8  f8a64048          STRH     r4,[r6,#0x48]
;;;1976   		cntrl_stat_old=10;
001edc  86b4              STRH     r4,[r6,#0x34]
;;;1977   		volt_region_cnt=10;
001ede  f8a64078          STRH     r4,[r6,#0x78]
                  |L1.7906|
;;;1978   		}
;;;1979   	if(volt_region==0) 		mess_send(MESS2RELE_HNDL,PARAM_RELE_SAMOKALIBR,0,20);
001ee2  f896002f          LDRB     r0,[r6,#0x2f]  ; volt_region
001ee6  b110              CBZ      r0,|L1.7918|
;;;1980   	else if(volt_region==1) mess_send(MESS2RELE_HNDL,PARAM_RELE_SAMOKALIBR,1,20);
001ee8  2801              CMP      r0,#1
001eea  d007              BEQ      |L1.7932|
001eec  e00c              B        |L1.7944|
                  |L1.7918|
001eee  2314              MOVS     r3,#0x14              ;1979
001ef0  2200              MOVS     r2,#0                 ;1979
001ef2  2164              MOVS     r1,#0x64              ;1979
001ef4  20d2              MOVS     r0,#0xd2              ;1979
001ef6  f7fffffe          BL       mess_send
001efa  e005              B        |L1.7944|
                  |L1.7932|
001efc  2314              MOVS     r3,#0x14
001efe  2201              MOVS     r2,#1
001f00  2164              MOVS     r1,#0x64
001f02  20d2              MOVS     r0,#0xd2
001f04  f7fffffe          BL       mess_send
                  |L1.7944|
;;;1981   	}
;;;1982   
;;;1983   if(vz2_stat==vz2sWRK2)
001f08  79f0              LDRB     r0,[r6,#7]  ; vz2_stat
001f0a  280b              CMP      r0,#0xb
001f0c  d17f              BNE      |L1.8206|
;;;1984   	{
;;;1985   	if(vz2_stat_old!=vz2_stat)
001f0e  7a30              LDRB     r0,[r6,#8]  ; vz2_stat_old
001f10  280b              CMP      r0,#0xb
001f12  d008              BEQ      |L1.7974|
;;;1986   		{
;;;1987   		vz2_wrk_cnt=3600L/*100L*/*((long)FZ_T2);
001f14  48ab              LDR      r0,|L1.8644|
001f16  f44f6161          MOV      r1,#0xe10
001f1a  f9b00000          LDRSH    r0,[r0,#0]  ; FZ_T2
001f1e  fb00f001          MUL      r0,r0,r1
001f22  f8c90048          STR      r0,[r9,#0x48]  ; vz2_wrk_cnt
                  |L1.7974|
;;;1988   		//if(VZ_HR==0)  	hv_vz_wrk_cnt=1800L;
;;;1989   		//vz2_up_cnt=0L;
;;;1990   		}
;;;1991   	vz2_wrk_cnt--;
001f26  f8d90048          LDR      r0,[r9,#0x48]  ; vz2_wrk_cnt
001f2a  f1a00001          SUB      r0,r0,#1
001f2e  f8c90048          STR      r0,[r9,#0x48]  ; vz2_wrk_cnt
;;;1992   	vz2_up_cnt++;
001f32  f8d9104c          LDR      r1,[r9,#0x4c]  ; vz2_up_cnt
001f36  f1010101          ADD      r1,r1,#1
001f3a  f8c9104c          STR      r1,[r9,#0x4c]  ; vz2_up_cnt
;;;1993   
;;;1994   	if(vz2_wrk_cnt==0)
001f3e  b950              CBNZ     r0,|L1.8022|
;;;1995   		{
;;;1996   		vz2_stat=vz2sFINE;
001f40  f04f0012          MOV      r0,#0x12
001f44  71f0              STRB     r0,[r6,#7]
;;;1997   		lc640_write(EE_VZ2_STAT,vz2sFINE);
001f46  4601              MOV      r1,r0
001f48  f44f70ca          MOV      r0,#0x194
001f4c  f7fffffe          BL       lc640_write
;;;1998   		fz_mem_hndl(0);
001f50  2000              MOVS     r0,#0
001f52  f7fffffe          BL       fz_mem_hndl
                  |L1.8022|
;;;1999   		}
;;;2000   	if(sk_stat[0]==0)
001f56  7828              LDRB     r0,[r5,#0]  ; sk_stat
001f58  b938              CBNZ     r0,|L1.8042|
;;;2001   		{
;;;2002   		vz2_stat=vz2sERR5;
001f5a  f04f0010          MOV      r0,#0x10
001f5e  71f0              STRB     r0,[r6,#7]
;;;2003   		lc640_write(EE_VZ2_STAT,vz2sERR5);
001f60  4601              MOV      r1,r0
001f62  f44f70ca          MOV      r0,#0x194
001f66  f7fffffe          BL       lc640_write
                  |L1.8042|
;;;2004   		}
;;;2005   	if(sk_stat[1]==0)
001f6a  7868              LDRB     r0,[r5,#1]  ; sk_stat
001f6c  b938              CBNZ     r0,|L1.8062|
;;;2006   		{
;;;2007   		vz2_stat=vz2sERR6;
001f6e  f04f0011          MOV      r0,#0x11
001f72  71f0              STRB     r0,[r6,#7]
;;;2008   		lc640_write(EE_VZ2_STAT,vz2sERR6);
001f74  4601              MOV      r1,r0
001f76  f44f70ca          MOV      r0,#0x194
001f7a  f7fffffe          BL       lc640_write
                  |L1.8062|
;;;2009   		}
;;;2010   	if(((Ibmax/10)>IZMAX_)&&(cntrl_stat<=20)&&(volt_region==1)&&(volt_region_cnt==0))
001f7e  f9b6004a          LDRSH    r0,[r6,#0x4a]  ; Ibmax
001f82  f8b6104c          LDRH     r1,[r6,#0x4c]  ; IZMAX_
001f86  fb90f0f4          SDIV     r0,r0,r4
001f8a  4288              CMP      r0,r1
001f8c  dd16              BLE      |L1.8124|
001f8e  f9b62032          LDRSH    r2,[r6,#0x32]  ; cntrl_stat
001f92  2a14              CMP      r2,#0x14
001f94  dc12              BGT      |L1.8124|
001f96  f896202f          LDRB     r2,[r6,#0x2f]  ; volt_region
001f9a  2a01              CMP      r2,#1
001f9c  d10e              BNE      |L1.8124|
001f9e  f8b62078          LDRH     r2,[r6,#0x78]  ; volt_region_cnt
001fa2  b95a              CBNZ     r2,|L1.8124|
;;;2011   		{
;;;2012   		volt_region=0;
001fa4  f886702f          STRB     r7,[r6,#0x2f]
;;;2013   		cntrl_stat=1000;
001fa8  f8a6b032          STRH     r11,[r6,#0x32]
;;;2014   		cntrl_stat_new=1000;
001fac  f8a6b048          STRH     r11,[r6,#0x48]
;;;2015   		cntrl_stat_old=1000;
001fb0  f8a6b034          STRH     r11,[r6,#0x34]
;;;2016   		volt_region_cnt=110;
001fb4  f04f026e          MOV      r2,#0x6e
001fb8  f8a62078          STRH     r2,[r6,#0x78]
                  |L1.8124|
;;;2017   		}
;;;2018   	if(((Ibmax/10)<IZMAX_)&&(cntrl_stat>=1000)&&(volt_region==0)&&(volt_region_cnt==0))
001fbc  4288              CMP      r0,r1
001fbe  da13              BGE      |L1.8168|
001fc0  f9b60032          LDRSH    r0,[r6,#0x32]  ; cntrl_stat
001fc4  4558              CMP      r0,r11
001fc6  db0f              BLT      |L1.8168|
001fc8  f896002f          LDRB     r0,[r6,#0x2f]  ; volt_region
001fcc  b960              CBNZ     r0,|L1.8168|
001fce  f8b60078          LDRH     r0,[r6,#0x78]  ; volt_region_cnt
001fd2  b948              CBNZ     r0,|L1.8168|
;;;2019   		{
;;;2020   		volt_region=1;
001fd4  f04f0001          MOV      r0,#1
001fd8  f886002f          STRB     r0,[r6,#0x2f]
;;;2021   		cntrl_stat=10;
001fdc  8674              STRH     r4,[r6,#0x32]
;;;2022   		cntrl_stat_new=10;
001fde  f8a64048          STRH     r4,[r6,#0x48]
;;;2023   		cntrl_stat_old=10;
001fe2  86b4              STRH     r4,[r6,#0x34]
;;;2024   		volt_region_cnt=10;
001fe4  f8a64078          STRH     r4,[r6,#0x78]
                  |L1.8168|
;;;2025   		}
;;;2026   	if(volt_region==0) 		mess_send(MESS2RELE_HNDL,PARAM_RELE_SAMOKALIBR,0,20);
001fe8  f896002f          LDRB     r0,[r6,#0x2f]  ; volt_region
001fec  b110              CBZ      r0,|L1.8180|
;;;2027   	else if(volt_region==1) mess_send(MESS2RELE_HNDL,PARAM_RELE_SAMOKALIBR,1,20);
001fee  2801              CMP      r0,#1
001ff0  d007              BEQ      |L1.8194|
001ff2  e00c              B        |L1.8206|
                  |L1.8180|
001ff4  2314              MOVS     r3,#0x14              ;2026
001ff6  2200              MOVS     r2,#0                 ;2026
001ff8  2164              MOVS     r1,#0x64              ;2026
001ffa  20d2              MOVS     r0,#0xd2              ;2026
001ffc  f7fffffe          BL       mess_send
002000  e005              B        |L1.8206|
                  |L1.8194|
002002  2314              MOVS     r3,#0x14
002004  2201              MOVS     r2,#1
002006  2164              MOVS     r1,#0x64
002008  20d2              MOVS     r0,#0xd2
00200a  f7fffffe          BL       mess_send
                  |L1.8206|
;;;2028   	}
;;;2029   
;;;2030   if(vz2_stat==vz2sERR1)		//Отсутствует вентиляция при включении
00200e  79f0              LDRB     r0,[r6,#7]  ; vz2_stat
002010  280c              CMP      r0,#0xc
002012  d123              BNE      |L1.8284|
;;;2031   	{
;;;2032   	if((vz2_stat_old!=vz2_stat)||(vz2_stat_cnt==0))
002014  7a30              LDRB     r0,[r6,#8]  ; vz2_stat_old
002016  280c              CMP      r0,#0xc
002018  d102              BNE      |L1.8224|
00201a  f8b6007a          LDRH     r0,[r6,#0x7a]  ; vz2_stat_cnt
00201e  b908              CBNZ     r0,|L1.8228|
                  |L1.8224|
;;;2033   		{
;;;2034   		vz2_stat_cnt=10;
002020  f8a6407a          STRH     r4,[r6,#0x7a]
                  |L1.8228|
;;;2035   		}
;;;2036   	vz2_stat_cnt--;
002024  f8b6007a          LDRH     r0,[r6,#0x7a]  ; vz2_stat_cnt
002028  f1a00001          SUB      r0,r0,#1
00202c  b200              SXTH     r0,r0
00202e  f8a6007a          STRH     r0,[r6,#0x7a]
;;;2037   	if((vz2_stat_cnt==10)||(vz2_stat_cnt==9))
002032  280a              CMP      r0,#0xa
002034  d001              BEQ      |L1.8250|
002036  2809              CMP      r0,#9
002038  d10a              BNE      |L1.8272|
                  |L1.8250|
;;;2038   		{
;;;2039   		show_mess(	" ФОРМОВОЧНЫЙ ЗАРЯД  ",
00203a  f2af4328          ADR      r3,|L1.7188|
00203e  f2af4214          ADR      r2,|L1.7212|
002042  f2af4100          ADR      r1,|L1.7236|
002046  a060              ADR      r0,|L1.8648|
002048  f8cd8000          STR      r8,[sp,#0]
00204c  f7fffffe          BL       show_mess
                  |L1.8272|
;;;2040   					"   НЕ МОЖЕТ БЫТЬ    ",
;;;2041   					"      ВКЛЮЧЕН       ",
;;;2042   					"  БЕЗ ВЕНТИЛЯЦИИ!!  ",
;;;2043   					5000);
;;;2044   		}
;;;2045   	mess_send(MESS2RELE_HNDL,PARAM_RELE_SAMOKALIBR,0,20);
002050  2314              MOVS     r3,#0x14
002052  2200              MOVS     r2,#0
002054  2164              MOVS     r1,#0x64
002056  20d2              MOVS     r0,#0xd2
002058  f7fffffe          BL       mess_send
                  |L1.8284|
;;;2046   	}
;;;2047   if(vz2_stat==vz2sERR2)		//Пропала вентиляция при работе в первой фазе ФЗ
00205c  79f0              LDRB     r0,[r6,#7]  ; vz2_stat
00205e  280d              CMP      r0,#0xd
002060  d12c              BNE      |L1.8380|
;;;2048   	{
;;;2049   	if((vz2_stat_old!=vz2_stat)||(vz2_stat_cnt==0))
002062  7a30              LDRB     r0,[r6,#8]  ; vz2_stat_old
002064  280d              CMP      r0,#0xd
002066  d102              BNE      |L1.8302|
002068  f8b6007a          LDRH     r0,[r6,#0x7a]  ; vz2_stat_cnt
00206c  b908              CBNZ     r0,|L1.8306|
                  |L1.8302|
;;;2050   		{
;;;2051   		vz2_stat_cnt=10;
00206e  f8a6407a          STRH     r4,[r6,#0x7a]
                  |L1.8306|
;;;2052   		}
;;;2053   	vz2_stat_cnt--;
002072  f8b6007a          LDRH     r0,[r6,#0x7a]  ; vz2_stat_cnt
002076  f1a00001          SUB      r0,r0,#1
00207a  b200              SXTH     r0,r0
00207c  f8a6007a          STRH     r0,[r6,#0x7a]
;;;2054   	if((vz2_stat_cnt==10)||(vz2_stat_cnt==9))
002080  280a              CMP      r0,#0xa
002082  d001              BEQ      |L1.8328|
002084  2809              CMP      r0,#9
002086  d10a              BNE      |L1.8350|
                  |L1.8328|
;;;2055   		{
;;;2056   		show_mess(	" ФОРМОВОЧНЫЙ ЗАРЯД  ",
002088  f6af2314          ADR      r3,|L1.5752|
00208c  f6af2200          ADR      r2,|L1.5776|
002090  f6af11ec          ADR      r1,|L1.5800|
002094  a04c              ADR      r0,|L1.8648|
002096  f8cd8000          STR      r8,[sp,#0]
00209a  f7fffffe          BL       show_mess
                  |L1.8350|
;;;2057   					"    ЗАБЛОКИРОВАН    ",
;;;2058   					"     НЕИСПРАВНА     ",
;;;2059   					"    ВЕНТИЛЯЦИЯ!!!   ",
;;;2060   					5000);
;;;2061   		}
;;;2062   	if(sk_stat[0]==1)
00209e  7828              LDRB     r0,[r5,#0]  ; sk_stat
0020a0  2801              CMP      r0,#1
0020a2  d105              BNE      |L1.8368|
;;;2063   		{
;;;2064   		vz2_stat=vz2sWRK1;
0020a4  71f4              STRB     r4,[r6,#7]
;;;2065   		lc640_write(EE_VZ2_STAT,vz2sWRK1);
0020a6  210a              MOVS     r1,#0xa
0020a8  f44f70ca          MOV      r0,#0x194
0020ac  f7fffffe          BL       lc640_write
                  |L1.8368|
;;;2066   		}
;;;2067   	mess_send(MESS2RELE_HNDL,PARAM_RELE_SAMOKALIBR,0,20);
0020b0  2314              MOVS     r3,#0x14
0020b2  2200              MOVS     r2,#0
0020b4  2164              MOVS     r1,#0x64
0020b6  20d2              MOVS     r0,#0xd2
0020b8  f7fffffe          BL       mess_send
                  |L1.8380|
;;;2068   	}
;;;2069   
;;;2070   if(vz2_stat==vz2sERR3)		//Отключен тумблер "Выравнивающий заряд" при работе в первой фазе ФЗ
0020bc  79f0              LDRB     r0,[r6,#7]  ; vz2_stat
0020be  280e              CMP      r0,#0xe
0020c0  d12b              BNE      |L1.8474|
;;;2071   	{
;;;2072   	if((vz2_stat_old!=vz2_stat)||(vz2_stat_cnt==0))
0020c2  7a30              LDRB     r0,[r6,#8]  ; vz2_stat_old
0020c4  280e              CMP      r0,#0xe
0020c6  d102              BNE      |L1.8398|
0020c8  f8b6007a          LDRH     r0,[r6,#0x7a]  ; vz2_stat_cnt
0020cc  b908              CBNZ     r0,|L1.8402|
                  |L1.8398|
;;;2073   		{
;;;2074   		vz2_stat_cnt=10;
0020ce  f8a6407a          STRH     r4,[r6,#0x7a]
                  |L1.8402|
;;;2075   		}
;;;2076   	vz2_stat_cnt--;
0020d2  f8b6007a          LDRH     r0,[r6,#0x7a]  ; vz2_stat_cnt
0020d6  f1a00001          SUB      r0,r0,#1
0020da  b200              SXTH     r0,r0
0020dc  f8a6007a          STRH     r0,[r6,#0x7a]
;;;2077   	if((vz2_stat_cnt==10)||(vz2_stat_cnt==9))
0020e0  280a              CMP      r0,#0xa
0020e2  d001              BEQ      |L1.8424|
0020e4  2809              CMP      r0,#9
0020e6  d109              BNE      |L1.8444|
                  |L1.8424|
;;;2078   		{
;;;2079   		show_mess(	" ФОРМОВОЧНЫЙ ЗАРЯД  ",
0020e8  a33d              ADR      r3,|L1.8672|
0020ea  f2af4260          ADR      r2,|L1.7308|
0020ee  f2af414c          ADR      r1,|L1.7332|
0020f2  a035              ADR      r0,|L1.8648|
0020f4  f8cd8000          STR      r8,[sp,#0]
0020f8  f7fffffe          BL       show_mess
                  |L1.8444|
;;;2080   					"  БУДЕТ ПРОДОЛЖЕН   ",
;;;2081   					"  ПОСЛЕ ВКЛЮЧЕНИЯ   ",
;;;2082   					"    ТУМБЛЕРА!!!     ",
;;;2083   					5000);
;;;2084   		}
;;;2085   	if(sk_stat[1]==1)
0020fc  7868              LDRB     r0,[r5,#1]  ; sk_stat
0020fe  2801              CMP      r0,#1
002100  d105              BNE      |L1.8462|
;;;2086   		{
;;;2087   		vz2_stat=vz2sWRK1;
002102  71f4              STRB     r4,[r6,#7]
;;;2088   		lc640_write(EE_VZ2_STAT,vz2sWRK1);
002104  210a              MOVS     r1,#0xa
002106  f44f70ca          MOV      r0,#0x194
00210a  f7fffffe          BL       lc640_write
                  |L1.8462|
;;;2089   		}
;;;2090   	mess_send(MESS2RELE_HNDL,PARAM_RELE_SAMOKALIBR,0,20);
00210e  2314              MOVS     r3,#0x14
002110  2200              MOVS     r2,#0
002112  2164              MOVS     r1,#0x64
002114  20d2              MOVS     r0,#0xd2
002116  f7fffffe          BL       mess_send
                  |L1.8474|
;;;2091   	}
;;;2092   if(vz2_stat==vz2sERR5)		//Пропала вентиляция при работе
00211a  79f0              LDRB     r0,[r6,#7]  ; vz2_stat
00211c  2810              CMP      r0,#0x10
00211e  d12d              BNE      |L1.8572|
;;;2093   	{
;;;2094   	if((vz2_stat_old!=vz2_stat)||(vz2_stat_cnt==0))
002120  7a30              LDRB     r0,[r6,#8]  ; vz2_stat_old
002122  2810              CMP      r0,#0x10
002124  d102              BNE      |L1.8492|
002126  f8b6007a          LDRH     r0,[r6,#0x7a]  ; vz2_stat_cnt
00212a  b908              CBNZ     r0,|L1.8496|
                  |L1.8492|
;;;2095   		{
;;;2096   		vz2_stat_cnt=10;
00212c  f8a6407a          STRH     r4,[r6,#0x7a]
                  |L1.8496|
;;;2097   		}
;;;2098   	vz2_stat_cnt--;
002130  f8b6007a          LDRH     r0,[r6,#0x7a]  ; vz2_stat_cnt
002134  f1a00001          SUB      r0,r0,#1
002138  b200              SXTH     r0,r0
00213a  f8a6007a          STRH     r0,[r6,#0x7a]
;;;2099   	if((vz2_stat_cnt==10)||(vz2_stat_cnt==9))
00213e  280a              CMP      r0,#0xa
002140  d001              BEQ      |L1.8518|
002142  2809              CMP      r0,#9
002144  d10a              BNE      |L1.8540|
                  |L1.8518|
;;;2100   		{
;;;2101   		show_mess(	" ФОРМОВОЧНЫЙ ЗАРЯД  ",
002146  f6af23d0          ADR      r3,|L1.5752|
00214a  f6af22bc          ADR      r2,|L1.5776|
00214e  f6af21a8          ADR      r1,|L1.5800|
002152  a01d              ADR      r0,|L1.8648|
002154  f8cd8000          STR      r8,[sp,#0]
002158  f7fffffe          BL       show_mess
                  |L1.8540|
;;;2102   					"    ЗАБЛОКИРОВАН    ",
;;;2103   					"     НЕИСПРАВНА     ",
;;;2104   					"    ВЕНТИЛЯЦИЯ!!!   ",
;;;2105   					5000);
;;;2106   		}
;;;2107   	if(sk_stat[0]==1)
00215c  7828              LDRB     r0,[r5,#0]  ; sk_stat
00215e  2801              CMP      r0,#1
002160  d106              BNE      |L1.8560|
;;;2108   		{
;;;2109   		vz2_stat=vz2sWRK2;
002162  f886a007          STRB     r10,[r6,#7]
;;;2110   		lc640_write(EE_VZ2_STAT,vz2sWRK2);
002166  210b              MOVS     r1,#0xb
002168  f44f70ca          MOV      r0,#0x194
00216c  f7fffffe          BL       lc640_write
                  |L1.8560|
;;;2111   		}
;;;2112   	mess_send(MESS2RELE_HNDL,PARAM_RELE_SAMOKALIBR,0,20);
002170  2314              MOVS     r3,#0x14
002172  2200              MOVS     r2,#0
002174  2164              MOVS     r1,#0x64
002176  20d2              MOVS     r0,#0xd2
002178  f7fffffe          BL       mess_send
                  |L1.8572|
;;;2113   	}
;;;2114   
;;;2115   if(vz2_stat==vz2sERR6)		//Отключен тумблер "Выравнивающий заряд"
00217c  79f0              LDRB     r0,[r6,#7]  ; vz2_stat
00217e  2811              CMP      r0,#0x11
002180  d154              BNE      |L1.8748|
;;;2116   	{
;;;2117   	if((vz2_stat_old!=vz2_stat)||(vz2_stat_cnt==0))
002182  7a30              LDRB     r0,[r6,#8]  ; vz2_stat_old
002184  2811              CMP      r0,#0x11
002186  d102              BNE      |L1.8590|
002188  f8b6007a          LDRH     r0,[r6,#0x7a]  ; vz2_stat_cnt
00218c  b908              CBNZ     r0,|L1.8594|
                  |L1.8590|
;;;2118   		{
;;;2119   		vz2_stat_cnt=10;
00218e  f8a6407a          STRH     r4,[r6,#0x7a]
                  |L1.8594|
;;;2120   		}
;;;2121   	vz2_stat_cnt--;
002192  f8b6007a          LDRH     r0,[r6,#0x7a]  ; vz2_stat_cnt
002196  f1a00001          SUB      r0,r0,#1
00219a  b200              SXTH     r0,r0
00219c  f8a6007a          STRH     r0,[r6,#0x7a]
;;;2122   	if((vz2_stat_cnt==10)||(vz2_stat_cnt==9))
0021a0  280a              CMP      r0,#0xa
0021a2  d001              BEQ      |L1.8616|
0021a4  2809              CMP      r0,#9
0021a6  d131              BNE      |L1.8716|
                  |L1.8616|
;;;2123   		{
;;;2124   		show_mess(	" ФОРМОВОЧНЫЙ ЗАРЯД  ",
0021a8  a30d              ADR      r3,|L1.8672|
0021aa  e025              B        |L1.8696|
                  |L1.8620|
                          DCD      ||area_number.25||+0x80
                  |L1.8624|
                          DCD      FZ_T1
                  |L1.8628|
                          DCD      out_U
                  |L1.8632|
                          DCD      FZ_U1
                  |L1.8636|
                          DCD      Ib_ips_termokompensat
                  |L1.8640|
                          DCD      FZ_ISW12
                  |L1.8644|
                          DCD      FZ_T2
                  |L1.8648|
0021c8  20d4ced0          DCB      " ",212,206,208,204,206,194,206,215,205,219,201," ",199,192
0021cc  cccec2ce
0021d0  d7cddbc9
0021d4  20c7c0  
0021d7  d0dfc420          DCB      208,223,196,"  ",0
0021db  2000    
0021dd  00                DCB      0
0021de  00                DCB      0
0021df  00                DCB      0
                  |L1.8672|
0021e0  20202020          DCB      "    ",210,211,204,193,203,197,208,192,"!!!     ",0
0021e4  d2d3ccc1
0021e8  cbc5d0c0
0021ec  21212120
0021f0  20202020
0021f4  00      
0021f5  00                DCB      0
0021f6  00                DCB      0
0021f7  00                DCB      0
                  |L1.8696|
0021f8  f2af5270          ADR      r2,|L1.7308|
0021fc  f2af515c          ADR      r1,|L1.7332|
002200  f2af003c          ADR      r0,|L1.8648|
002204  f8cd8000          STR      r8,[sp,#0]
002208  f7fffffe          BL       show_mess
                  |L1.8716|
;;;2125   					"  БУДЕТ ПРОДОЛЖЕН   ",
;;;2126   					"  ПОСЛЕ ВКЛЮЧЕНИЯ   ",
;;;2127   					"    ТУМБЛЕРА!!!     ",
;;;2128   					5000);
;;;2129   		}
;;;2130   	if(sk_stat[1]==1)
00220c  7868              LDRB     r0,[r5,#1]  ; sk_stat
00220e  2801              CMP      r0,#1
002210  d106              BNE      |L1.8736|
;;;2131   		{
;;;2132   		vz2_stat=vz2sWRK2;
002212  f886a007          STRB     r10,[r6,#7]
;;;2133   		lc640_write(EE_VZ2_STAT,vz2sWRK2);
002216  210b              MOVS     r1,#0xb
002218  f44f70ca          MOV      r0,#0x194
00221c  f7fffffe          BL       lc640_write
                  |L1.8736|
;;;2134   		}
;;;2135   	mess_send(MESS2RELE_HNDL,PARAM_RELE_SAMOKALIBR,0,20);
002220  2314              MOVS     r3,#0x14
002222  2200              MOVS     r2,#0
002224  2164              MOVS     r1,#0x64
002226  20d2              MOVS     r0,#0xd2
002228  f7fffffe          BL       mess_send
                  |L1.8748|
;;;2136   	}
;;;2137   if(vz2_stat==vz2sERR4)		//ВЗ закончился а тумблер включен
00222c  79f0              LDRB     r0,[r6,#7]  ; vz2_stat
00222e  280f              CMP      r0,#0xf
002230  d12e              BNE      |L1.8848|
;;;2138   	{
;;;2139   	if((vz2_stat_old!=vz2_stat)||(vz2_stat_cnt==0))
002232  7a30              LDRB     r0,[r6,#8]  ; vz2_stat_old
002234  280f              CMP      r0,#0xf
002236  d102              BNE      |L1.8766|
002238  f8b6007a          LDRH     r0,[r6,#0x7a]  ; vz2_stat_cnt
00223c  b908              CBNZ     r0,|L1.8770|
                  |L1.8766|
;;;2140   		{
;;;2141   		vz2_stat_cnt=10;
00223e  f8a6407a          STRH     r4,[r6,#0x7a]
                  |L1.8770|
;;;2142   		}
;;;2143   	vz2_stat_cnt--;
002242  f8b6007a          LDRH     r0,[r6,#0x7a]  ; vz2_stat_cnt
002246  f1a00001          SUB      r0,r0,#1
00224a  b200              SXTH     r0,r0
00224c  f8a6007a          STRH     r0,[r6,#0x7a]
;;;2144   	if((vz2_stat_cnt==10)||(vz2_stat_cnt==9))
002250  280a              CMP      r0,#0xa
002252  d001              BEQ      |L1.8792|
002254  2809              CMP      r0,#9
002256  d10b              BNE      |L1.8816|
                  |L1.8792|
;;;2145   		{
;;;2146   		show_mess(	"     ВЫКЛЮЧИТЕ      ",
002258  f6af3380          ADR      r3,|L1.5852|
00225c  f6af326c          ADR      r2,|L1.5876|
002260  f6af3158          ADR      r1,|L1.5900|
002264  f2af5034          ADR      r0,|L1.7476|
002268  f8cd8000          STR      r8,[sp,#0]
00226c  f7fffffe          BL       show_mess
                  |L1.8816|
;;;2147   					"      ТУМБЛЕР       ",
;;;2148   					"     ВЫСОКОГО       ",
;;;2149   					"    НАПРЯЖЕНИЯ      ",
;;;2150   					5000);
;;;2151   		}
;;;2152   	if(sk_stat[1]==0)
002270  7868              LDRB     r0,[r5,#1]  ; sk_stat
002272  b938              CBNZ     r0,|L1.8836|
;;;2153   		{
;;;2154   		vz2_stat=vz2sOFF;
002274  71f7              STRB     r7,[r6,#7]
;;;2155   		lc640_write(EE_VZ2_STAT,vz2sOFF);
002276  2100              MOVS     r1,#0
002278  f44f70ca          MOV      r0,#0x194
00227c  f7fffffe          BL       lc640_write
;;;2156   		vz_stop();
002280  f7fffffe          BL       vz_stop
                  |L1.8836|
;;;2157   
;;;2158   		}
;;;2159   	mess_send(MESS2RELE_HNDL,PARAM_RELE_SAMOKALIBR,0,20);
002284  2314              MOVS     r3,#0x14
002286  2200              MOVS     r2,#0
002288  2164              MOVS     r1,#0x64
00228a  20d2              MOVS     r0,#0xd2
00228c  f7fffffe          BL       mess_send
                  |L1.8848|
;;;2160   	}
;;;2161   if(vz2_stat==vz2sFINE)		//ФЗ закончился, напоминание
002290  79f0              LDRB     r0,[r6,#7]  ; vz2_stat
;;;2162   	{
;;;2163   	if((vz2_stat_old!=vz2_stat)||(vz2_stat_cnt==0))
;;;2164   		{
;;;2165   		vz2_stat_cnt=10;
;;;2166   		}
;;;2167   	vz2_stat_cnt--;
;;;2168   	if((vz2_stat_cnt==10)||(vz2_stat_cnt==9))
;;;2169   		{
;;;2170   		show_mess(	"    ФОРМОВОЧНЫЙ     ",
002292  f64038b8          MOV      r8,#0xbb8
002296  2812              CMP      r0,#0x12              ;2161
002298  d13d              BNE      |L1.8982|
00229a  7a30              LDRB     r0,[r6,#8]            ;2163  ; vz2_stat_old
00229c  2812              CMP      r0,#0x12              ;2163
00229e  d102              BNE      |L1.8870|
0022a0  f8b6007a          LDRH     r0,[r6,#0x7a]         ;2163  ; vz2_stat_cnt
0022a4  b908              CBNZ     r0,|L1.8874|
                  |L1.8870|
0022a6  f8a6407a          STRH     r4,[r6,#0x7a]         ;2165
                  |L1.8874|
0022aa  f8b6007a          LDRH     r0,[r6,#0x7a]         ;2167  ; vz2_stat_cnt
0022ae  f1a00001          SUB      r0,r0,#1              ;2167
0022b2  b200              SXTH     r0,r0                 ;2167
0022b4  f8a6007a          STRH     r0,[r6,#0x7a]         ;2167
0022b8  280a              CMP      r0,#0xa               ;2168
0022ba  d001              BEQ      |L1.8896|
0022bc  2809              CMP      r0,#9                 ;2168
0022be  d10a              BNE      |L1.8918|
                  |L1.8896|
0022c0  f2af53f0          ADR      r3,|L1.7380|
0022c4  f2af52dc          ADR      r2,|L1.7404|
0022c8  f2af51c8          ADR      r1,|L1.7428|
0022cc  a0ff              ADR      r0,|L1.9932|
0022ce  f8cd8000          STR      r8,[sp,#0]
0022d2  f7fffffe          BL       show_mess
                  |L1.8918|
;;;2171   					"       ЗАРЯД        ",
;;;2172   					"      УСПЕШНО       ",
;;;2173   					"     ЗАВЕРШЕН       ",
;;;2174   					3000);
;;;2175   		}
;;;2176   	if((vz2_stat_cnt==6)||(vz2_stat_cnt==5))
0022d6  f9b6007a          LDRSH    r0,[r6,#0x7a]  ; vz2_stat_cnt
0022da  2806              CMP      r0,#6
0022dc  d001              BEQ      |L1.8930|
0022de  2805              CMP      r0,#5
0022e0  d10b              BNE      |L1.8954|
                  |L1.8930|
;;;2177   		{
;;;2178   		show_mess(	"     ВЫКЛЮЧИТЕ      ",
0022e2  f6af4308          ADR      r3,|L1.5852|
0022e6  f6af32f4          ADR      r2,|L1.5876|
0022ea  f6af31e0          ADR      r1,|L1.5900|
0022ee  f2af50bc          ADR      r0,|L1.7476|
0022f2  f8cd8000          STR      r8,[sp,#0]
0022f6  f7fffffe          BL       show_mess
                  |L1.8954|
;;;2179   					"      ТУМБЛЕР       ",
;;;2180   					"     ВЫСОКОГО       ",
;;;2181   					"    НАПРЯЖЕНИЯ      ",
;;;2182   					3000);
;;;2183   		}
;;;2184   	if(sk_stat[1]==0)
0022fa  7868              LDRB     r0,[r5,#1]  ; sk_stat
0022fc  b928              CBNZ     r0,|L1.8970|
;;;2185   		{
;;;2186   		vz2_stat=vz2sOFF;
0022fe  71f7              STRB     r7,[r6,#7]
;;;2187   		lc640_write(EE_VZ2_STAT,vz2sOFF);
002300  2100              MOVS     r1,#0
002302  f44f70ca          MOV      r0,#0x194
002306  f7fffffe          BL       lc640_write
                  |L1.8970|
;;;2188   		}
;;;2189   	mess_send(MESS2RELE_HNDL,PARAM_RELE_SAMOKALIBR,0,20);
00230a  2314              MOVS     r3,#0x14
00230c  2200              MOVS     r2,#0
00230e  2164              MOVS     r1,#0x64
002310  20d2              MOVS     r0,#0xd2
002312  f7fffffe          BL       mess_send
                  |L1.8982|
;;;2190   	}
;;;2191   if(vz2_stat==vz2sSTOP)		//ФЗ прекращен, напоминание
002316  79f0              LDRB     r0,[r6,#7]  ; vz2_stat
002318  2813              CMP      r0,#0x13
00231a  d13d              BNE      |L1.9112|
;;;2192   	{
;;;2193   	if((vz2_stat_old!=vz2_stat)||(vz2_stat_cnt==0))
00231c  7a30              LDRB     r0,[r6,#8]  ; vz2_stat_old
00231e  2813              CMP      r0,#0x13
002320  d102              BNE      |L1.9000|
002322  f8b6007a          LDRH     r0,[r6,#0x7a]  ; vz2_stat_cnt
002326  b908              CBNZ     r0,|L1.9004|
                  |L1.9000|
;;;2194   		{
;;;2195   		vz2_stat_cnt=10;
002328  f8a6407a          STRH     r4,[r6,#0x7a]
                  |L1.9004|
;;;2196   		}
;;;2197   	vz2_stat_cnt--;
00232c  f8b6007a          LDRH     r0,[r6,#0x7a]  ; vz2_stat_cnt
002330  f1a00001          SUB      r0,r0,#1
002334  b200              SXTH     r0,r0
002336  f8a6007a          STRH     r0,[r6,#0x7a]
;;;2198   	if((vz2_stat_cnt==10)||(vz2_stat_cnt==9))
00233a  280a              CMP      r0,#0xa
00233c  d001              BEQ      |L1.9026|
00233e  2809              CMP      r0,#9
002340  d10a              BNE      |L1.9048|
                  |L1.9026|
;;;2199   		{
;;;2200   		show_mess(	"    ФОРМОВОЧНЫЙ     ",
002342  f2af53f8          ADR      r3,|L1.7500|
002346  f2af52e4          ADR      r2,|L1.7524|
00234a  f2af6148          ADR      r1,|L1.7428|
00234e  a0df              ADR      r0,|L1.9932|
002350  f8cd8000          STR      r8,[sp,#0]
002354  f7fffffe          BL       show_mess
                  |L1.9048|
;;;2201   					"       ЗАРЯД        ",
;;;2202   					"     ПРЕКРАЩЕН      ",
;;;2203   					"                    ",
;;;2204   					3000);
;;;2205   		}
;;;2206   	if((vz2_stat_cnt==6)||(vz2_stat_cnt==5))
002358  f9b6007a          LDRSH    r0,[r6,#0x7a]  ; vz2_stat_cnt
00235c  2806              CMP      r0,#6
00235e  d001              BEQ      |L1.9060|
002360  2805              CMP      r0,#5
002362  d10b              BNE      |L1.9084|
                  |L1.9060|
;;;2207   		{
;;;2208   		show_mess(	"     ВЫКЛЮЧИТЕ      ",
002364  f6af438c          ADR      r3,|L1.5852|
002368  f6af4278          ADR      r2,|L1.5876|
00236c  f6af4164          ADR      r1,|L1.5900|
002370  f2af6040          ADR      r0,|L1.7476|
002374  f8cd8000          STR      r8,[sp,#0]
002378  f7fffffe          BL       show_mess
                  |L1.9084|
;;;2209   					"      ТУМБЛЕР       ",
;;;2210   					"     ВЫСОКОГО       ",
;;;2211   					"    НАПРЯЖЕНИЯ      ",
;;;2212   					3000);
;;;2213   		}
;;;2214   	if(sk_stat[1]==0)
00237c  7868              LDRB     r0,[r5,#1]  ; sk_stat
00237e  b928              CBNZ     r0,|L1.9100|
;;;2215   		{
;;;2216   		vz2_stat=vz2sOFF;
002380  71f7              STRB     r7,[r6,#7]
;;;2217   		lc640_write(EE_VZ2_STAT,vz2sOFF);
002382  2100              MOVS     r1,#0
002384  f44f70ca          MOV      r0,#0x194
002388  f7fffffe          BL       lc640_write
                  |L1.9100|
;;;2218   		}
;;;2219   	mess_send(MESS2RELE_HNDL,PARAM_RELE_SAMOKALIBR,0,20);
00238c  2314              MOVS     r3,#0x14
00238e  2200              MOVS     r2,#0
002390  2164              MOVS     r1,#0x64
002392  20d2              MOVS     r0,#0xd2
002394  f7fffffe          BL       mess_send
                  |L1.9112|
;;;2220   	}
;;;2221   vz2_stat_old=vz2_stat;
002398  79f0              LDRB     r0,[r6,#7]  ; vz2_stat
00239a  7230              STRB     r0,[r6,#8]
;;;2222   
;;;2223   }
00239c  e8bd8ff8          POP      {r3-r11,pc}
;;;2224   
                          ENDP

                  vz2_start PROC
;;;2226   //старт уравнительног заряда
;;;2227   char vz2_start(char hour)
0023a0  b510              PUSH     {r4,lr}
;;;2228   {          
;;;2229   char out;
;;;2230   out=0;
0023a2  f04f0000          MOV      r0,#0
;;;2231   if((spc_stat==spcOFF)&&(speedChrgBlckStat!=1)&&(vz1_stat==vz1sOFF))
0023a6  49cf              LDR      r1,|L1.9956|
0023a8  f8912023          LDRB     r2,[r1,#0x23]  ; spc_stat
0023ac  2a00              CMP      r2,#0
0023ae  d110              BNE      |L1.9170|
0023b0  4acd              LDR      r2,|L1.9960|
0023b2  8812              LDRH     r2,[r2,#0]  ; speedChrgBlckStat
0023b4  2a01              CMP      r2,#1
0023b6  d00c              BEQ      |L1.9170|
0023b8  794a              LDRB     r2,[r1,#5]  ; vz1_stat
0023ba  2a00              CMP      r2,#0
0023bc  d109              BNE      |L1.9170|
;;;2232   	{
;;;2233   	if(vz1_stat==vz1sOFF)
;;;2234   		{
;;;2235   		vz2_stat=vz2sSTEP1;
0023be  f04f0001          MOV      r0,#1
0023c2  71c8              STRB     r0,[r1,#7]
;;;2236   		lc640_write(EE_VZ2_STAT,vz2sSTEP1);
0023c4  4601              MOV      r1,r0
0023c6  f44f70ca          MOV      r0,#0x194
0023ca  f7fffffe          BL       lc640_write
;;;2237   		out=1;
0023ce  f04f0001          MOV      r0,#1
                  |L1.9170|
;;;2238   		
;;;2239   		}
;;;2240   /*	spc_stat=spcVZ;
;;;2241   	__ee_spc_stat=spcVZ; 
;;;2242   	lc640_write_int(EE_SPC_STAT,__ee_spc_stat);   
;;;2243   	vz_cnt_h=hour;
;;;2244   	__ee_vz_cnt=hour*60;
;;;2245   	if(hour==0)__ee_vz_cnt=30;
;;;2246   	lc640_write_int(EE_VZ_CNT,__ee_vz_cnt);
;;;2247   	lc640_write_int(EE_SPC_VZ_LENGT,__ee_vz_cnt);	
;;;2248   	vz_cnt_h_=0;
;;;2249   	vz_cnt_s=0;
;;;2250   	vz_cnt_s_=0;
;;;2251   	
;;;2252   		*/
;;;2253   	}
;;;2254   //else if((spc_stat==spc_KE1p1)||(spc_stat==spc_KE1p2)) out=22; 
;;;2255   //else if((spc_stat==spc_KE2p1)||(spc_stat==spc_KE2p2)) out=33;
;;;2256   //plazma=out;	
;;;2257   return out;
;;;2258   }
0023d2  bd10              POP      {r4,pc}
;;;2259   //-----------------------------------------------
                          ENDP

                  vz2_stop PROC
;;;2260   //стоп формовочного заряда
;;;2261   void vz2_stop(void)
0023d4  48c3              LDR      r0,|L1.9956|
;;;2262   {
;;;2263   if(vz2_stat!=vz2sOFF)
0023d6  79c1              LDRB     r1,[r0,#7]  ; vz2_stat
0023d8  2900              CMP      r1,#0
0023da  d006              BEQ      |L1.9194|
;;;2264   	{
;;;2265   	vz2_stat=vz2sSTOP;
0023dc  f04f0113          MOV      r1,#0x13
0023e0  71c1              STRB     r1,[r0,#7]
;;;2266   	lc640_write(EE_VZ2_STAT,vz2sSTOP);
0023e2  f44f70ca          MOV      r0,#0x194
0023e6  f7ffbffe          B.W      lc640_write
                  |L1.9194|
;;;2267   	}
;;;2268   }
0023ea  4770              BX       lr
;;;2269   
                          ENDP

                  kb_init PROC
;;;2270   //-----------------------------------------------
;;;2271   void kb_init(void)
0023ec  48bf              LDR      r0,|L1.9964|
;;;2272   {
;;;2273   main_kb_cnt=(TBAT*60)-60/*120*/;
0023ee  f06f013b          MVN      r1,#0x3b
0023f2  8800              LDRH     r0,[r0,#0]  ; TBAT
0023f4  ebc01000          RSB      r0,r0,r0,LSL #4
0023f8  eb010080          ADD      r0,r1,r0,LSL #2
0023fc  49b9              LDR      r1,|L1.9956|
0023fe  f8a10052          STRH     r0,[r1,#0x52]
;;;2274   }
002402  4770              BX       lr
;;;2275   
                          ENDP

                  kb_hndl PROC
;;;2276   //-----------------------------------------------
;;;2277   void kb_hndl(void)
002404  e92d5ff0          PUSH     {r4-r12,lr}
;;;2278   {
;;;2279   
;;;2280   static signed short ibat[2],ibat_[2];
;;;2281   #ifdef UKU_TELECORE2015
;;;2282   if(((++main_kb_cnt>=TBAT*60)&&(TBAT))&&(BAT_TYPE==0 ))
;;;2283   #else 
;;;2284   if(((++main_kb_cnt>=TBAT*60)&&(TBAT)))
002408  f8df82d8          LDR      r8,|L1.9956|
;;;2285   #endif
;;;2286   	{
;;;2287   	main_kb_cnt=0;
;;;2288   	
;;;2289   	kb_start[0]=0;
;;;2290   	kb_start[1]=0;
;;;2291   	kb_start_ips=0;
;;;2292   
;;;2293   	if( (BAT_IS_ON[0]==bisON) && (bat[0]._Ub>80) && ( (abs(bat[0]._Ib)<IKB) || (bat[0]._av&1) ) ) kb_start[0]=1;
;;;2294   	if( (BAT_IS_ON[1]==bisON) && (bat[1]._Ub>80) && ( (abs(bat[1]._Ib)<IKB) || (bat[1]._av&1) ) ) kb_start[1]=1;
;;;2295   #ifdef UKU_220_IPS_TERMOKOMPENSAT
;;;2296   	if( (!ips_bat_av_vzvod)                      && ((abs(Ib_ips_termokompensat)<IKB) || (bat_ips._av&1) ) ) kb_start_ips=1;
00240c  f8dfa2e0          LDR      r10,|L1.9968|
002410  2500              MOVS     r5,#0                 ;2284
002412  f8b80052          LDRH     r0,[r8,#0x52]         ;2284  ; main_kb_cnt
002416  4eb7              LDR      r6,|L1.9972|
002418  1c40              ADDS     r0,r0,#1              ;2284
00241a  b201              SXTH     r1,r0                 ;2284
00241c  48b3              LDR      r0,|L1.9964|
00241e  f8a81052          STRH     r1,[r8,#0x52]         ;2284
002422  f8df92d4          LDR      r9,|L1.9976|
002426  f9b00000          LDRSH    r0,[r0,#0]            ;2284  ; TBAT
;;;2297   #endif	
;;;2298   	if( (net_av) || (num_of_wrks_bps==0) || ( (spc_stat!=spcOFF) && (spc_stat!=spcVZ) ) 
;;;2299   #ifdef UKU_220_IPS_TERMOKOMPENSAT
;;;2300   	  ||(((vz1_stat!=vz1sOFF)||(vz2_stat!=vz2sOFF))&&SMART_SPC)
;;;2301   #endif
;;;2302   	  ||(sp_ch_stat!=scsOFF) 	)
;;;2303    
;;;2304   		{
;;;2305   		kb_start[0]=0;
;;;2306   		kb_start[1]=0;
;;;2307   		kb_start_ips=0;
;;;2308   		}
;;;2309   
;;;2310   	if((kb_start[0]==1)||(kb_start[1]==1)||(kb_start_ips==1))
;;;2311   		{
;;;2312   		kb_cnt_1lev=10;
00242a  270a              MOVS     r7,#0xa
00242c  ebc01200          RSB      r2,r0,r0,LSL #4       ;2284
002430  f04f0b01          MOV      r11,#1                ;2293
002434  f1080458          ADD      r4,r8,#0x58           ;2289
002438  ebb10f82          CMP      r1,r2,LSL #2          ;2284
00243c  db6c              BLT      |L1.9496|
00243e  2800              CMP      r0,#0                 ;2284
002440  d06a              BEQ      |L1.9496|
002442  f8a85052          STRH     r5,[r8,#0x52]         ;2287
002446  7025              STRB     r5,[r4,#0]            ;2289
002448  7065              STRB     r5,[r4,#1]            ;2290
00244a  f888501d          STRB     r5,[r8,#0x1d]         ;2291
00244e  48ab              LDR      r0,|L1.9980|
002450  7800              LDRB     r0,[r0,#0]            ;2293  ; BAT_IS_ON
002452  2855              CMP      r0,#0x55              ;2293
002454  d111              BNE      |L1.9338|
002456  f9b60002          LDRSH    r0,[r6,#2]            ;2293  ; bat
00245a  2850              CMP      r0,#0x50              ;2293
00245c  dd0d              BLE      |L1.9338|
00245e  f9b60008          LDRSH    r0,[r6,#8]            ;2293  ; bat
002462  f7fffffe          BL       abs
002466  f9b91000          LDRSH    r1,[r9,#0]            ;2293  ; IKB
00246a  4288              CMP      r0,r1                 ;2293
00246c  db03              BLT      |L1.9334|
00246e  f896003d          LDRB     r0,[r6,#0x3d]         ;2293  ; bat
002472  07c0              LSLS     r0,r0,#31             ;2293
002474  d001              BEQ      |L1.9338|
                  |L1.9334|
002476  f884b000          STRB     r11,[r4,#0]           ;2293
                  |L1.9338|
00247a  48a0              LDR      r0,|L1.9980|
00247c  7840              LDRB     r0,[r0,#1]            ;2294  ; BAT_IS_ON
00247e  2855              CMP      r0,#0x55              ;2294
002480  d111              BNE      |L1.9382|
002482  f9b6004e          LDRSH    r0,[r6,#0x4e]         ;2294  ; bat
002486  2850              CMP      r0,#0x50              ;2294
002488  dd0d              BLE      |L1.9382|
00248a  f9b60054          LDRSH    r0,[r6,#0x54]         ;2294  ; bat
00248e  f7fffffe          BL       abs
002492  f9b91000          LDRSH    r1,[r9,#0]            ;2294  ; IKB
002496  4288              CMP      r0,r1                 ;2294
002498  db03              BLT      |L1.9378|
00249a  f8960089          LDRB     r0,[r6,#0x89]         ;2294  ; bat
00249e  07c0              LSLS     r0,r0,#31             ;2294
0024a0  d001              BEQ      |L1.9382|
                  |L1.9378|
0024a2  f884b001          STRB     r11,[r4,#1]           ;2294
                  |L1.9382|
0024a6  4896              LDR      r0,|L1.9984|
0024a8  7800              LDRB     r0,[r0,#0]            ;2296  ; ips_bat_av_vzvod
0024aa  b970              CBNZ     r0,|L1.9418|
0024ac  f9ba0000          LDRSH    r0,[r10,#0]           ;2296  ; Ib_ips_termokompensat
0024b0  f7fffffe          BL       abs
0024b4  f9b91000          LDRSH    r1,[r9,#0]            ;2296  ; IKB
0024b8  4288              CMP      r0,r1                 ;2296
0024ba  db04              BLT      |L1.9414|
0024bc  4891              LDR      r0,|L1.9988|
0024be  f890003d          LDRB     r0,[r0,#0x3d]         ;2296  ; bat_ips
0024c2  07c0              LSLS     r0,r0,#31             ;2296
0024c4  d001              BEQ      |L1.9418|
                  |L1.9414|
0024c6  f888b01d          STRB     r11,[r8,#0x1d]        ;2296
                  |L1.9418|
0024ca  488f              LDR      r0,|L1.9992|
0024cc  7800              LDRB     r0,[r0,#0]            ;2298  ; net_av
0024ce  b998              CBNZ     r0,|L1.9464|
0024d0  f898001e          LDRB     r0,[r8,#0x1e]         ;2298  ; num_of_wrks_bps
0024d4  b180              CBZ      r0,|L1.9464|
0024d6  f8980023          LDRB     r0,[r8,#0x23]         ;2298  ; spc_stat
0024da  b108              CBZ      r0,|L1.9440|
0024dc  2802              CMP      r0,#2                 ;2298
0024de  d10b              BNE      |L1.9464|
                  |L1.9440|
0024e0  f8980005          LDRB     r0,[r8,#5]            ;2300  ; vz1_stat
0024e4  f8981007          LDRB     r1,[r8,#7]            ;2300  ; vz2_stat
0024e8  4308              ORRS     r0,r0,r1              ;2300
0024ea  d002              BEQ      |L1.9458|
0024ec  4887              LDR      r0,|L1.9996|
0024ee  8800              LDRH     r0,[r0,#0]            ;2300  ; SMART_SPC
0024f0  b910              CBNZ     r0,|L1.9464|
                  |L1.9458|
0024f2  4887              LDR      r0,|L1.10000|
0024f4  7800              LDRB     r0,[r0,#0]            ;2302  ; sp_ch_stat
0024f6  b118              CBZ      r0,|L1.9472|
                  |L1.9464|
0024f8  7025              STRB     r5,[r4,#0]            ;2305
0024fa  7065              STRB     r5,[r4,#1]            ;2306
0024fc  f888501d          STRB     r5,[r8,#0x1d]         ;2307
                  |L1.9472|
002500  7820              LDRB     r0,[r4,#0]            ;2310  ; kb_start
002502  2801              CMP      r0,#1                 ;2310
002504  d020              BEQ      |L1.9544|
002506  7860              LDRB     r0,[r4,#1]            ;2310  ; kb_start
002508  2801              CMP      r0,#1                 ;2310
00250a  d01d              BEQ      |L1.9544|
00250c  f898001d          LDRB     r0,[r8,#0x1d]         ;2310  ; kb_start_ips
002510  2801              CMP      r0,#1                 ;2310
002512  d019              BEQ      |L1.9544|
;;;2313   		}
;;;2314   	else kb_cnt_1lev=0;
002514  f8a85054          STRH     r5,[r8,#0x54]
                  |L1.9496|
;;;2315   	}
;;;2316   
;;;2317   if(kb_cnt_1lev)
002518  4641              MOV      r1,r8
00251a  f9b80054          LDRSH    r0,[r8,#0x54]  ; kb_cnt_1lev
;;;2318   	{
;;;2319   	kb_cnt_1lev--;
;;;2320   
;;;2321   	if(kb_cnt_1lev>5)mess_send(MESS2CNTRL_HNDL,PARAM_CNTRL_STAT_PLUS,30,15);
;;;2322   	else if(kb_cnt_1lev>0) mess_send(MESS2CNTRL_HNDL,PARAM_CNTRL_STAT_MINUS,30,15);
;;;2323   
;;;2324   
;;;2325   	if(kb_cnt_1lev==5)
;;;2326   		{
;;;2327   		ibat[0]=abs(bat[0]._Ib);
00251e  f8df81c4          LDR      r8,|L1.9956|
002522  2800              CMP      r0,#0                 ;2317
002524  f1080890          ADD      r8,r8,#0x90
002528  d07e              BEQ      |L1.9768|
00252a  f1a00001          SUB      r0,r0,#1              ;2319
00252e  b200              SXTH     r0,r0                 ;2319
002530  468b              MOV      r11,r1                ;2319
002532  f8a10054          STRH     r0,[r1,#0x54]         ;2319
002536  2805              CMP      r0,#5                 ;2321
002538  dd09              BLE      |L1.9550|
00253a  230f              MOVS     r3,#0xf               ;2321
00253c  221e              MOVS     r2,#0x1e              ;2321
00253e  2164              MOVS     r1,#0x64              ;2321
002540  20e1              MOVS     r0,#0xe1              ;2321
002542  f7fffffe          BL       mess_send
002546  e00a              B        |L1.9566|
                  |L1.9544|
002548  f8a87054          STRH     r7,[r8,#0x54]         ;2312
00254c  e7e4              B        |L1.9496|
                  |L1.9550|
00254e  2800              CMP      r0,#0                 ;2322
002550  dd05              BLE      |L1.9566|
002552  230f              MOVS     r3,#0xf               ;2322
002554  221e              MOVS     r2,#0x1e              ;2322
002556  2169              MOVS     r1,#0x69              ;2322
002558  20e1              MOVS     r0,#0xe1              ;2322
00255a  f7fffffe          BL       mess_send
                  |L1.9566|
00255e  f8bb0054          LDRH     r0,[r11,#0x54]        ;2325  ; kb_cnt_1lev
002562  2805              CMP      r0,#5                 ;2325
002564  d111              BNE      |L1.9610|
002566  f9b60008          LDRSH    r0,[r6,#8]  ; bat
00256a  f7fffffe          BL       abs
00256e  f8a80000          STRH     r0,[r8,#0]
;;;2328   		ibat[1]=abs(bat[1]._Ib);
002572  f9b60054          LDRSH    r0,[r6,#0x54]  ; bat
002576  f7fffffe          BL       abs
00257a  f8a80002          STRH     r0,[r8,#2]
;;;2329   		ibat_ips=abs(Ib_ips_termokompensat);
00257e  f9ba0000          LDRSH    r0,[r10,#0]  ; Ib_ips_termokompensat
002582  f7fffffe          BL       abs
002586  f8ab005a          STRH     r0,[r11,#0x5a]
                  |L1.9610|
;;;2330   		}
;;;2331   	
;;;2332   	if(kb_cnt_1lev==0)
00258a  4856              LDR      r0,|L1.9956|
00258c  f8b00054          LDRH     r0,[r0,#0x54]  ; kb_cnt_1lev
002590  2800              CMP      r0,#0
002592  d158              BNE      |L1.9798|
;;;2333   		{
;;;2334   		ibat_[0]=abs(bat[0]._Ib);
002594  f9b60008          LDRSH    r0,[r6,#8]  ; bat
002598  f7fffffe          BL       abs
00259c  f8dfb144          LDR      r11,|L1.9956|
0025a0  f10b0b94          ADD      r11,r11,#0x94
0025a4  f8ab0000          STRH     r0,[r11,#0]
;;;2335   		ibat_[1]=abs(bat[1]._Ib);
0025a8  f9b60054          LDRSH    r0,[r6,#0x54]  ; bat
0025ac  f7fffffe          BL       abs
0025b0  f8ab0002          STRH     r0,[r11,#2]
;;;2336   		ibat_ips_=abs(Ib_ips_termokompensat);
0025b4  f9ba0000          LDRSH    r0,[r10,#0]  ; Ib_ips_termokompensat
0025b8  f7fffffe          BL       abs
0025bc  f8dfa124          LDR      r10,|L1.9956|
0025c0  f8aa005c          STRH     r0,[r10,#0x5c]
;;;2337   
;;;2338   		kb_cnt_2lev=0;
0025c4  f8aa5056          STRH     r5,[r10,#0x56]
;;;2339   
;;;2340   
;;;2341   		if(( (ibat[0]+ibat_[0]) < IKB )&& (kb_start[0]==1))
0025c8  f9b80000          LDRSH    r0,[r8,#0]  ; ibat
0025cc  f9bb1000          LDRSH    r1,[r11,#0]  ; ibat_
0025d0  4408              ADD      r0,r0,r1
0025d2  f9b91000          LDRSH    r1,[r9,#0]  ; IKB
0025d6  4288              CMP      r0,r1
0025d8  da02              BGE      |L1.9696|
0025da  7820              LDRB     r0,[r4,#0]  ; kb_start
0025dc  2801              CMP      r0,#1
0025de  d034              BEQ      |L1.9802|
                  |L1.9696|
;;;2342   			{
;;;2343   			kb_cnt_2lev=10;  
;;;2344   			}
;;;2345   		else if(bat[0]._Ub>200)
0025e0  f9b60002          LDRSH    r0,[r6,#2]  ; bat
0025e4  28c8              CMP      r0,#0xc8
0025e6  dd04              BLE      |L1.9714|
;;;2346   			{
;;;2347   			kb_start[0]=0;
0025e8  7025              STRB     r5,[r4,#0]
;;;2348   			avar_bat_hndl(0,0);
0025ea  2100              MOVS     r1,#0
0025ec  4608              MOV      r0,r1
0025ee  f7fffffe          BL       avar_bat_hndl
                  |L1.9714|
;;;2349   			}
;;;2350   		
;;;2351   		if(( (ibat[1]+ibat_[1]) < IKB ) && (kb_start[1]==1))
0025f2  f9b80002          LDRSH    r0,[r8,#2]  ; ibat
0025f6  f9bb1002          LDRSH    r1,[r11,#2]  ; ibat_
0025fa  4408              ADD      r0,r0,r1
0025fc  f9b91000          LDRSH    r1,[r9,#0]  ; IKB
002600  4288              CMP      r0,r1
002602  da02              BGE      |L1.9738|
002604  7860              LDRB     r0,[r4,#1]  ; kb_start
002606  2801              CMP      r0,#1
002608  d022              BEQ      |L1.9808|
                  |L1.9738|
;;;2352   			{
;;;2353   			kb_cnt_2lev=10;     
;;;2354   			}
;;;2355   		else  if(bat[1]._Ub>200)
00260a  f9b6004e          LDRSH    r0,[r6,#0x4e]  ; bat
00260e  28c8              CMP      r0,#0xc8
002610  dd04              BLE      |L1.9756|
;;;2356   			{
;;;2357   			kb_start[1]=0;
002612  7065              STRB     r5,[r4,#1]
;;;2358   			avar_bat_hndl(1,0);
002614  2100              MOVS     r1,#0
002616  2001              MOVS     r0,#1
002618  f7fffffe          BL       avar_bat_hndl
                  |L1.9756|
;;;2359   			}
;;;2360   #ifdef UKU_220_IPS_TERMOKOMPENSAT
;;;2361   		if(( (ibat_ips+ibat_ips_) < IKB ) && (kb_start_ips==1))
00261c  f9ba005a          LDRSH    r0,[r10,#0x5a]  ; ibat_ips
002620  f9ba105c          LDRSH    r1,[r10,#0x5c]  ; ibat_ips_
002624  4408              ADD      r0,r0,r1
002626  e000              B        |L1.9770|
                  |L1.9768|
002628  e01b              B        |L1.9826|
                  |L1.9770|
00262a  f9b91000          LDRSH    r1,[r9,#0]  ; IKB
00262e  4288              CMP      r0,r1
002630  da09              BGE      |L1.9798|
002632  f89a001d          LDRB     r0,[r10,#0x1d]  ; kb_start_ips
002636  2801              CMP      r0,#1
002638  d105              BNE      |L1.9798|
;;;2362   			{
;;;2363   			if(KB_ALGORITM==1)
00263a  4836              LDR      r0,|L1.10004|
00263c  8800              LDRH     r0,[r0,#0]  ; KB_ALGORITM
00263e  2801              CMP      r0,#1
002640  d009              BEQ      |L1.9814|
;;;2364   				{
;;;2365   				avar_bat_ips_hndl(1);
;;;2366   				kb_start_ips=0;
;;;2367   				}
;;;2368   			else
;;;2369   				{
;;;2370   				kb_cnt_2lev=10;     
002642  f8aa7056          STRH     r7,[r10,#0x56]
                  |L1.9798|
;;;2371   				}
;;;2372   			}
;;;2373   #endif
;;;2374   		}	
;;;2375   
;;;2376   
;;;2377   	}
;;;2378   else if(kb_cnt_2lev)
;;;2379   	{
;;;2380   	kb_cnt_2lev--;
;;;2381   
;;;2382   	if(kb_cnt_2lev>5)mess_send(MESS2CNTRL_HNDL,PARAM_CNTRL_STAT_PLUS,200,15);
;;;2383   	else if(kb_cnt_2lev>0) mess_send(MESS2CNTRL_HNDL,PARAM_CNTRL_STAT_MINUS,200,15);
;;;2384   
;;;2385   
;;;2386   	if(kb_cnt_2lev==5)
;;;2387   		{
;;;2388   		ibat[0]=abs(bat[0]._Ib);
;;;2389   		ibat[1]=abs(bat[1]._Ib);
;;;2390   		ibat_ips=abs(Ib_ips_termokompensat);
;;;2391   		}
;;;2392   	
;;;2393   	if(kb_cnt_2lev==0)
;;;2394   		{
;;;2395   		ibat_[0]=abs(bat[0]._Ib);
;;;2396   		ibat_[1]=abs(bat[1]._Ib);
;;;2397   		ibat_ips_=abs(Ib_ips_termokompensat);
;;;2398   
;;;2399   		kb_full_ver=0;
;;;2400   
;;;2401   		if(( (ibat[0]+ibat_[0]) < IKB ) && (kb_start[0]==1))
;;;2402   			{
;;;2403   			kb_full_ver=1;  
;;;2404   			}
;;;2405   		else if(bat[0]._Ub>200)			
;;;2406   			{
;;;2407   			kb_start[0]=0;
;;;2408   			avar_bat_hndl(0,0);
;;;2409   			}
;;;2410   
;;;2411   		if(( (ibat[1]+ibat_[1]) < IKB ) && (kb_start[1]==1))
;;;2412   			{
;;;2413   			kb_full_ver=1;     
;;;2414   			}
;;;2415   		else	if(bat[1]._Ub>200)		
;;;2416   			{
;;;2417   			kb_start[1]=0;
;;;2418   			avar_bat_hndl(1,0);
;;;2419   			}
;;;2420   #ifdef UKU_220_IPS_TERMOKOMPENSAT
;;;2421   		if(( (ibat_ips+ibat_ips_) < IKB )  && (kb_start_ips==1))
;;;2422   			{
;;;2423   			if(KB_ALGORITM==2)
;;;2424   				{
;;;2425   				avar_bat_ips_hndl(1);
;;;2426   				kb_start_ips=0;
;;;2427   				}
;;;2428   			else
;;;2429   				{
;;;2430   				kb_full_ver=1;     
;;;2431   				}
;;;2432   			}
;;;2433   #endif
;;;2434   		}	
;;;2435   	}
;;;2436   
;;;2437   else if(kb_full_ver)
;;;2438   	{
;;;2439   	
;;;2440   	mess_send(MESS2CNTRL_HNDL,PARAM_CNTRL_STAT_STEP_DOWN,0,15);
;;;2441   
;;;2442   	if( abs(bat[0]._Ib) > IKB ) 
;;;2443   		{
;;;2444   		if(kb_start[0]==1)
;;;2445   			{
;;;2446   			kb_start[0]=0;
;;;2447   			avar_bat_hndl(0,0);
;;;2448   			}
;;;2449   		}
;;;2450   
;;;2451   	if( abs(bat[1]._Ib) > IKB ) 
;;;2452   		{
;;;2453   		if(kb_start[1]==1)
;;;2454   			{
;;;2455   			kb_start[1]=0;
;;;2456   			avar_bat_hndl(1,0);
;;;2457   			}
;;;2458   		}
;;;2459   #ifdef UKU_220_IPS_TERMOKOMPENSAT
;;;2460   	if( abs(Ib_ips_termokompensat) > IKB ) 
;;;2461   		{
;;;2462   		if(kb_start_ips==1)
;;;2463   			{
;;;2464   			kb_start_ips=0;
;;;2465   			avar_bat_ips_hndl(0);
;;;2466   			}
;;;2467   		}
;;;2468   #endif
;;;2469   
;;;2470   	if ((kb_start[0]==0) && (kb_start[1]==0) && (kb_start_ips==0)) 
;;;2471   		{
;;;2472   		kb_full_ver=0;
;;;2473   		}
;;;2474   
;;;2475   	if(( (mess_find(MESS2KB_HNDL))	&& (mess_data[0]==PARAM_CNTRL_IS_DOWN) ) || (load_U<(USIGN*10)) )
;;;2476   		{
;;;2477   		kb_full_ver=0;
;;;2478   		if((kb_start[0]==1)&&((load_I>(2*IKB)/10))&&(!(bat[0]._av&0x01))) avar_bat_hndl(0,1);
;;;2479   		if((kb_start[1]==1)&&((load_I>(2*IKB)/10))&&(!(bat[1]._av&0x01))) avar_bat_hndl(1,1);
;;;2480   #ifdef UKU_220_IPS_TERMOKOMPENSAT
;;;2481   		if((kb_start_ips==1)&&((load_I>(2*IKB)/10))&&(!(bat_ips._av&0x01))) avar_bat_ips_hndl(1);
;;;2482   #endif
;;;2483   		}
;;;2484   	}
;;;2485   
;;;2486   }
002646  e8bd9ff0          POP      {r4-r12,pc}
                  |L1.9802|
00264a  f8aa7056          STRH     r7,[r10,#0x56]        ;2343
00264e  e7d0              B        |L1.9714|
                  |L1.9808|
002650  f8aa7056          STRH     r7,[r10,#0x56]        ;2353
002654  e7e2              B        |L1.9756|
                  |L1.9814|
002656  2001              MOVS     r0,#1                 ;2365
002658  f7fffffe          BL       avar_bat_ips_hndl
00265c  f88a501d          STRB     r5,[r10,#0x1d]        ;2366
                  |L1.9824|
002660  e7f1              B        |L1.9798|
                  |L1.9826|
002662  f9b10056          LDRSH    r0,[r1,#0x56]         ;2378  ; kb_cnt_2lev
002666  b380              CBZ      r0,|L1.9930|
002668  f1a00001          SUB      r0,r0,#1              ;2380
00266c  b200              SXTH     r0,r0                 ;2380
00266e  460f              MOV      r7,r1                 ;2380
002670  f8a10056          STRH     r0,[r1,#0x56]         ;2380
002674  2805              CMP      r0,#5                 ;2382
002676  dd06              BLE      |L1.9862|
002678  230f              MOVS     r3,#0xf               ;2382
00267a  22c8              MOVS     r2,#0xc8              ;2382
00267c  2164              MOVS     r1,#0x64              ;2382
00267e  20e1              MOVS     r0,#0xe1              ;2382
002680  f7fffffe          BL       mess_send
002684  e007              B        |L1.9878|
                  |L1.9862|
002686  2800              CMP      r0,#0                 ;2383
002688  dd05              BLE      |L1.9878|
00268a  230f              MOVS     r3,#0xf               ;2383
00268c  22c8              MOVS     r2,#0xc8              ;2383
00268e  2169              MOVS     r1,#0x69              ;2383
002690  20e1              MOVS     r0,#0xe1              ;2383
002692  f7fffffe          BL       mess_send
                  |L1.9878|
002696  f8b70056          LDRH     r0,[r7,#0x56]         ;2386  ; kb_cnt_2lev
00269a  2805              CMP      r0,#5                 ;2386
00269c  d111              BNE      |L1.9922|
00269e  f9b60008          LDRSH    r0,[r6,#8]            ;2388  ; bat
0026a2  f7fffffe          BL       abs
0026a6  f8a80000          STRH     r0,[r8,#0]            ;2388
0026aa  f9b60054          LDRSH    r0,[r6,#0x54]         ;2389  ; bat
0026ae  f7fffffe          BL       abs
0026b2  f8a80002          STRH     r0,[r8,#2]            ;2389
0026b6  f9ba0000          LDRSH    r0,[r10,#0]           ;2390  ; Ib_ips_termokompensat
0026ba  f7fffffe          BL       abs
0026be  f8a7005a          STRH     r0,[r7,#0x5a]         ;2390
                  |L1.9922|
0026c2  4808              LDR      r0,|L1.9956|
0026c4  f8b00056          LDRH     r0,[r0,#0x56]         ;2393  ; kb_cnt_2lev
0026c8  e026              B        |L1.10008|
                  |L1.9930|
0026ca  e087              B        |L1.10204|
                  |L1.9932|
0026cc  20202020          DCB      "    ",212,206,208,204,206,194,206,215,205,219,201,"    "
0026d0  d4ced0cc
0026d4  cec2ced7
0026d8  cddbc920
0026dc  202020  
0026df  2000              DCB      " ",0
0026e1  00                DCB      0
0026e2  00                DCB      0
0026e3  00                DCB      0
                  |L1.9956|
                          DCD      ||area_number.25||
                  |L1.9960|
                          DCD      speedChrgBlckStat
                  |L1.9964|
                          DCD      TBAT
                  |L1.9968|
                          DCD      Ib_ips_termokompensat
                  |L1.9972|
                          DCD      bat
                  |L1.9976|
                          DCD      IKB
                  |L1.9980|
                          DCD      BAT_IS_ON
                  |L1.9984|
                          DCD      ips_bat_av_vzvod
                  |L1.9988|
                          DCD      bat_ips
                  |L1.9992|
                          DCD      net_av
                  |L1.9996|
                          DCD      SMART_SPC
                  |L1.10000|
                          DCD      sp_ch_stat
                  |L1.10004|
                          DCD      KB_ALGORITM
                  |L1.10008|
002718  2800              CMP      r0,#0                 ;2393
                  |L1.10010|
00271a  d194              BNE      |L1.9798|
00271c  f9b60008          LDRSH    r0,[r6,#8]            ;2395  ; bat
002720  f7fffffe          BL       abs
002724  4fff              LDR      r7,|L1.11044|
002726  8038              STRH     r0,[r7,#0]            ;2395
002728  f9b60054          LDRSH    r0,[r6,#0x54]         ;2396  ; bat
00272c  f7fffffe          BL       abs
002730  8078              STRH     r0,[r7,#2]            ;2396
002732  f9ba0000          LDRSH    r0,[r10,#0]           ;2397  ; Ib_ips_termokompensat
002736  f7fffffe          BL       abs
00273a  f1a70a94          SUB      r10,r7,#0x94          ;2397
00273e  f8aa005c          STRH     r0,[r10,#0x5c]        ;2397
002742  f88a501c          STRB     r5,[r10,#0x1c]        ;2399
002746  f9b80000          LDRSH    r0,[r8,#0]            ;2401  ; ibat
00274a  f9b71000          LDRSH    r1,[r7,#0]            ;2401  ; ibat_
00274e  4408              ADD      r0,r0,r1              ;2401
002750  f9b91000          LDRSH    r1,[r9,#0]            ;2401  ; IKB
002754  4288              CMP      r0,r1                 ;2401
002756  da02              BGE      |L1.10078|
002758  7820              LDRB     r0,[r4,#0]            ;2401  ; kb_start
00275a  2801              CMP      r0,#1                 ;2401
00275c  d032              BEQ      |L1.10180|
                  |L1.10078|
00275e  f9b60002          LDRSH    r0,[r6,#2]            ;2405  ; bat
002762  28c8              CMP      r0,#0xc8              ;2405
002764  dd04              BLE      |L1.10096|
002766  7025              STRB     r5,[r4,#0]            ;2407
002768  2100              MOVS     r1,#0                 ;2408
00276a  4608              MOV      r0,r1                 ;2408
00276c  f7fffffe          BL       avar_bat_hndl
                  |L1.10096|
002770  f9b80002          LDRSH    r0,[r8,#2]            ;2411  ; ibat
002774  f9b71002          LDRSH    r1,[r7,#2]            ;2411  ; ibat_
002778  4408              ADD      r0,r0,r1              ;2411
00277a  f9b91000          LDRSH    r1,[r9,#0]            ;2411  ; IKB
00277e  4288              CMP      r0,r1                 ;2411
002780  da02              BGE      |L1.10120|
002782  7860              LDRB     r0,[r4,#1]            ;2411  ; kb_start
002784  2801              CMP      r0,#1                 ;2411
002786  d020              BEQ      |L1.10186|
                  |L1.10120|
002788  f9b6004e          LDRSH    r0,[r6,#0x4e]         ;2415  ; bat
00278c  28c8              CMP      r0,#0xc8              ;2415
00278e  dd04              BLE      |L1.10138|
002790  7065              STRB     r5,[r4,#1]            ;2417
002792  2100              MOVS     r1,#0                 ;2418
002794  2001              MOVS     r0,#1                 ;2418
002796  f7fffffe          BL       avar_bat_hndl
                  |L1.10138|
00279a  f9ba005a          LDRSH    r0,[r10,#0x5a]        ;2421  ; ibat_ips
00279e  f9ba105c          LDRSH    r1,[r10,#0x5c]        ;2421  ; ibat_ips_
0027a2  4408              ADD      r0,r0,r1              ;2421
0027a4  f9b91000          LDRSH    r1,[r9,#0]            ;2421  ; IKB
0027a8  4288              CMP      r0,r1                 ;2421
0027aa  f6bfaf59          BGE      |L1.9824|
0027ae  f89a001d          LDRB     r0,[r10,#0x1d]        ;2421  ; kb_start_ips
0027b2  2801              CMP      r0,#1                 ;2421
0027b4  d1b1              BNE      |L1.10010|
0027b6  48dc              LDR      r0,|L1.11048|
0027b8  8800              LDRH     r0,[r0,#0]            ;2423  ; KB_ALGORITM
0027ba  2802              CMP      r0,#2                 ;2423
0027bc  d008              BEQ      |L1.10192|
0027be  f88ab01c          STRB     r11,[r10,#0x1c]       ;2430
                  |L1.10178|
0027c2  e740              B        |L1.9798|
                  |L1.10180|
0027c4  f88ab01c          STRB     r11,[r10,#0x1c]       ;2403
0027c8  e7d2              B        |L1.10096|
                  |L1.10186|
0027ca  f88ab01c          STRB     r11,[r10,#0x1c]       ;2413
0027ce  e7e4              B        |L1.10138|
                  |L1.10192|
0027d0  2001              MOVS     r0,#1                 ;2425
0027d2  f7fffffe          BL       avar_bat_ips_hndl
0027d6  f88a501d          STRB     r5,[r10,#0x1d]        ;2426
0027da  e734              B        |L1.9798|
                  |L1.10204|
0027dc  7f08              LDRB     r0,[r1,#0x1c]         ;2437  ; kb_full_ver
0027de  4688              MOV      r8,r1                 ;2437
0027e0  2800              CMP      r0,#0                 ;2437
0027e2  d0ee              BEQ      |L1.10178|
0027e4  230f              MOVS     r3,#0xf               ;2440
0027e6  2200              MOVS     r2,#0                 ;2440
0027e8  216e              MOVS     r1,#0x6e              ;2440
0027ea  20e1              MOVS     r0,#0xe1              ;2440
0027ec  f7fffffe          BL       mess_send
0027f0  f9b60008          LDRSH    r0,[r6,#8]            ;2442  ; bat
0027f4  f7fffffe          BL       abs
0027f8  f9b91000          LDRSH    r1,[r9,#0]            ;2442  ; IKB
0027fc  4288              CMP      r0,r1                 ;2442
0027fe  dd07              BLE      |L1.10256|
002800  7820              LDRB     r0,[r4,#0]            ;2444  ; kb_start
002802  2801              CMP      r0,#1                 ;2444
002804  d104              BNE      |L1.10256|
002806  7025              STRB     r5,[r4,#0]            ;2446
002808  2100              MOVS     r1,#0                 ;2447
00280a  4608              MOV      r0,r1                 ;2447
00280c  f7fffffe          BL       avar_bat_hndl
                  |L1.10256|
002810  f9b60054          LDRSH    r0,[r6,#0x54]         ;2451  ; bat
002814  f7fffffe          BL       abs
002818  f9b91000          LDRSH    r1,[r9,#0]            ;2451  ; IKB
00281c  4288              CMP      r0,r1                 ;2451
00281e  dd06              BLE      |L1.10286|
002820  7860              LDRB     r0,[r4,#1]            ;2453  ; kb_start
002822  2801              CMP      r0,#1                 ;2453
002824  d103              BNE      |L1.10286|
002826  7065              STRB     r5,[r4,#1]            ;2455
002828  2100              MOVS     r1,#0                 ;2456
00282a  f7fffffe          BL       avar_bat_hndl
                  |L1.10286|
00282e  f9ba0000          LDRSH    r0,[r10,#0]           ;2460  ; Ib_ips_termokompensat
002832  f7fffffe          BL       abs
002836  f9b91000          LDRSH    r1,[r9,#0]            ;2460  ; IKB
00283a  4288              CMP      r0,r1                 ;2460
00283c  dd08              BLE      |L1.10320|
00283e  f898001d          LDRB     r0,[r8,#0x1d]         ;2462  ; kb_start_ips
002842  2801              CMP      r0,#1                 ;2462
002844  d104              BNE      |L1.10320|
002846  f888501d          STRB     r5,[r8,#0x1d]         ;2464
00284a  2000              MOVS     r0,#0                 ;2465
00284c  f7fffffe          BL       avar_bat_ips_hndl
                  |L1.10320|
002850  7820              LDRB     r0,[r4,#0]            ;2470  ; kb_start
002852  b930              CBNZ     r0,|L1.10338|
002854  7860              LDRB     r0,[r4,#1]            ;2470  ; kb_start
002856  b920              CBNZ     r0,|L1.10338|
002858  f898001d          LDRB     r0,[r8,#0x1d]         ;2470  ; kb_start_ips
00285c  b908              CBNZ     r0,|L1.10338|
00285e  f888501c          STRB     r5,[r8,#0x1c]         ;2472
                  |L1.10338|
002862  20e6              MOVS     r0,#0xe6              ;2475
002864  f7fffffe          BL       mess_find
002868  b118              CBZ      r0,|L1.10354|
00286a  48b0              LDR      r0,|L1.11052|
00286c  6800              LDR      r0,[r0,#0]            ;2475  ; mess_data
00286e  28e7              CMP      r0,#0xe7              ;2475
002870  d00a              BEQ      |L1.10376|
                  |L1.10354|
002872  48af              LDR      r0,|L1.11056|
002874  49af              LDR      r1,|L1.11060|
002876  f9b00000          LDRSH    r0,[r0,#0]            ;2475  ; USIGN
00287a  f9b11000          LDRSH    r1,[r1,#0]            ;2475  ; load_U
00287e  eb000080          ADD      r0,r0,r0,LSL #2       ;2475
002882  ebb10f40          CMP      r1,r0,LSL #1          ;2475
                  |L1.10374|
002886  da9c              BGE      |L1.10178|
                  |L1.10376|
002888  f888501c          STRB     r5,[r8,#0x1c]         ;2477
00288c  7820              LDRB     r0,[r4,#0]            ;2478  ; kb_start
00288e  4daa              LDR      r5,|L1.11064|
002890  2801              CMP      r0,#1                 ;2478
002892  d10f              BNE      |L1.10420|
002894  f9b90000          LDRSH    r0,[r9,#0]            ;2478  ; IKB
002898  f9b51000          LDRSH    r1,[r5,#0]            ;2478  ; load_I
00289c  0040              LSLS     r0,r0,#1              ;2478
00289e  fb90f0f7          SDIV     r0,r0,r7              ;2478
0028a2  4288              CMP      r0,r1                 ;2478
0028a4  da06              BGE      |L1.10420|
0028a6  f896003d          LDRB     r0,[r6,#0x3d]         ;2478  ; bat
0028aa  07c0              LSLS     r0,r0,#31             ;2478
0028ac  d102              BNE      |L1.10420|
0028ae  2101              MOVS     r1,#1                 ;2478
0028b0  f7fffffe          BL       avar_bat_hndl
                  |L1.10420|
0028b4  7860              LDRB     r0,[r4,#1]            ;2479  ; kb_start
0028b6  2801              CMP      r0,#1                 ;2479
0028b8  d110              BNE      |L1.10460|
0028ba  f9b90000          LDRSH    r0,[r9,#0]            ;2479  ; IKB
0028be  f9b51000          LDRSH    r1,[r5,#0]            ;2479  ; load_I
0028c2  0040              LSLS     r0,r0,#1              ;2479
0028c4  fb90f0f7          SDIV     r0,r0,r7              ;2479
0028c8  4288              CMP      r0,r1                 ;2479
0028ca  da07              BGE      |L1.10460|
0028cc  f8960089          LDRB     r0,[r6,#0x89]         ;2479  ; bat
0028d0  07c0              LSLS     r0,r0,#31             ;2479
0028d2  d103              BNE      |L1.10460|
0028d4  2101              MOVS     r1,#1                 ;2479
0028d6  4608              MOV      r0,r1                 ;2479
0028d8  f7fffffe          BL       avar_bat_hndl
                  |L1.10460|
0028dc  f898001d          LDRB     r0,[r8,#0x1d]         ;2481  ; kb_start_ips
0028e0  2801              CMP      r0,#1                 ;2481
                  |L1.10466|
0028e2  f47faebd          BNE      |L1.9824|
0028e6  f9b90000          LDRSH    r0,[r9,#0]            ;2481  ; IKB
0028ea  f9b51000          LDRSH    r1,[r5,#0]            ;2481  ; load_I
0028ee  0040              LSLS     r0,r0,#1              ;2481
0028f0  fb90f0f7          SDIV     r0,r0,r7              ;2481
0028f4  4288              CMP      r0,r1                 ;2481
0028f6  dac6              BGE      |L1.10374|
0028f8  4890              LDR      r0,|L1.11068|
0028fa  f890003d          LDRB     r0,[r0,#0x3d]         ;2481  ; bat_ips
0028fe  07c0              LSLS     r0,r0,#31             ;2481
002900  d1ef              BNE      |L1.10466|
002902  e8bd5ff0          POP      {r4-r12,lr}           ;2481
002906  2001              MOVS     r0,#1                 ;2481
002908  f7ffbffe          B.W      avar_bat_ips_hndl
;;;2487   
                          ENDP

                  samokalibr_hndl PROC
;;;2496   //-----------------------------------------------
;;;2497   void samokalibr_hndl(void)
00290c  4770              BX       lr
;;;2498   {
;;;2499   #ifndef UKU_220_IPS_TERMOKOMPENSAT
;;;2500   if(++samokalibr_cnt>=1800)samokalibr_cnt=0;
;;;2501   
;;;2502   if((samokalibr_cnt>=1785U)&&(vz2_stat==vz2sOFF))
;;;2503   	{
;;;2504   	mess_send(MESS2RELE_HNDL,PARAM_RELE_SAMOKALIBR,1,15);
;;;2505   	mess_send(MESS2IND_HNDL,PARAM_SAMOKALIBR,0,15);
;;;2506   	mess_send(MESS2MATEMAT,PARAM_SAMOKALIBR,0,15);
;;;2507   	} 
;;;2508   
;;;2509   if((samokalibr_cnt==1799U)&&(vz2_stat==vz2sOFF))
;;;2510   	{
;;;2511   	if((Kibat0[0]!=ad7705_buff_[0])&&(abs(bat[0]._Ib/10)<IZMAX)) lc640_write_int(ADR_KI0BAT[0],ad7705_buff_[0]);
;;;2512   	if((Kibat0[1]!=ad7705_buff_[1])&&(abs(bat[0]._Ib/10)<IZMAX)) lc640_write_int(ADR_KI0BAT[1],ad7705_buff_[1]);
;;;2513   	
;;;2514   	}
;;;2515   #endif	 	
;;;2516   }
;;;2517   
                          ENDP

                  ubat_old_drv PROC
;;;2520   //-----------------------------------------------
;;;2521   void ubat_old_drv(void)
00290e  b510              PUSH     {r4,lr}
;;;2522   {        
;;;2523   bat_u_old_cnt++;
002910  4c8b              LDR      r4,|L1.11072|
002912  8820              LDRH     r0,[r4,#0]  ; bat_u_old_cnt
002914  f1000001          ADD      r0,r0,#1
002918  8020              STRH     r0,[r4,#0]
;;;2524   gran_ring(&bat_u_old_cnt,0,8);
00291a  f04f0208          MOV      r2,#8
00291e  f04f0100          MOV      r1,#0
002922  4620              MOV      r0,r4
002924  f7fffffe          BL       gran_ring
;;;2525   
;;;2526   bat[0]._u_old[bat_u_old_cnt]=bat[0]._Ub;
002928  4986              LDR      r1,|L1.11076|
00292a  f9b40000          LDRSH    r0,[r4,#0]  ; bat_u_old_cnt
00292e  eb010040          ADD      r0,r1,r0,LSL #1
002932  884a              LDRH     r2,[r1,#2]  ; bat
002934  8402              STRH     r2,[r0,#0x20]
;;;2527   bat[1]._u_old[bat_u_old_cnt]=bat[1]._Ub;
002936  f8b1104e          LDRH     r1,[r1,#0x4e]  ; bat
00293a  f8a0106c          STRH     r1,[r0,#0x6c]
;;;2528   }
00293e  bd10              POP      {r4,pc}
;;;2529   
                          ENDP

                  unet_drv PROC
;;;2530   //-----------------------------------------------
;;;2531   void unet_drv(void)
002940  e92d41f0          PUSH     {r4-r8,lr}
;;;2532   {
;;;2533   if(net_av_2min_timer)net_av_2min_timer--;
002944  4980              LDR      r1,|L1.11080|
002946  f9b10000          LDRSH    r0,[r1,#0]  ; net_av_2min_timer
00294a  b110              CBZ      r0,|L1.10578|
00294c  f1a00001          SUB      r0,r0,#1
002950  8008              STRH     r0,[r1,#0]
                  |L1.10578|
;;;2534   
;;;2535   if(net_U<UMN)
002952  4e7e              LDR      r6,|L1.11084|
002954  487e              LDR      r0,|L1.11088|
;;;2536   	{
;;;2537   	if((unet_drv_cnt<10)&&(main_1Hz_cnt>15))
002956  4a7f              LDR      r2,|L1.11092|
;;;2538   		{
;;;2539   		unet_drv_cnt++;
;;;2540   		if(unet_drv_cnt>=10)
;;;2541   			{
;;;2542   			net_Ustore=net_U;
;;;2543   		 	avar_unet_hndl(1);
;;;2544   			
;;;2545   			}
;;;2546   		}
;;;2547   	else if(unet_drv_cnt>=10)unet_drv_cnt=10;
;;;2548   
;;;2549   	if(net_U<net_Ustore) net_Ustore=net_U;	
;;;2550   	}
;;;2551   
;;;2552   else if(net_U>UMN)
;;;2553   	{                 
;;;2554   	if(unet_drv_cnt)
;;;2555   		{
;;;2556   		unet_drv_cnt--;
;;;2557   		if(unet_drv_cnt<=0)
;;;2558   			{
;;;2559   			avar_unet_hndl(0);
;;;2560   			avar_bps_reset_cnt=10;
002958  4c72              LDR      r4,|L1.11044|
00295a  f9b61000          LDRSH    r1,[r6,#0]            ;2535  ; net_U
00295e  f9b03000          LDRSH    r3,[r0,#0]            ;2535  ; UMN
002962  270a              MOVS     r7,#0xa               ;2547
002964  f9920000          LDRSB    r0,[r2,#0]            ;2537
002968  3c94              SUBS     r4,r4,#0x94
00296a  4299              CMP      r1,r3                 ;2535
00296c  da1d              BGE      |L1.10666|
00296e  4d7a              LDR      r5,|L1.11096|
002970  280a              CMP      r0,#0xa               ;2537
002972  da0f              BGE      |L1.10644|
002974  4b79              LDR      r3,|L1.11100|
002976  f9b33000          LDRSH    r3,[r3,#0]            ;2537  ; main_1Hz_cnt
00297a  2b0f              CMP      r3,#0xf               ;2537
00297c  dd0a              BLE      |L1.10644|
00297e  f1000001          ADD      r0,r0,#1              ;2539
002982  b240              SXTB     r0,r0                 ;2539
002984  7010              STRB     r0,[r2,#0]            ;2539
002986  280a              CMP      r0,#0xa               ;2540
002988  db07              BLT      |L1.10650|
00298a  8029              STRH     r1,[r5,#0]            ;2542
00298c  2001              MOVS     r0,#1                 ;2543
00298e  f7fffffe          BL       avar_unet_hndl
002992  e002              B        |L1.10650|
                  |L1.10644|
002994  280a              CMP      r0,#0xa               ;2547
002996  db00              BLT      |L1.10650|
002998  7017              STRB     r7,[r2,#0]            ;2547
                  |L1.10650|
00299a  f9b60000          LDRSH    r0,[r6,#0]            ;2549  ; net_U
00299e  f9b51000          LDRSH    r1,[r5,#0]            ;2549  ; net_Ustore
0029a2  4288              CMP      r0,r1                 ;2549
0029a4  da0e              BGE      |L1.10692|
0029a6  8028              STRH     r0,[r5,#0]            ;2549
0029a8  e00c              B        |L1.10692|
                  |L1.10666|
0029aa  dd0b              BLE      |L1.10692|
0029ac  b150              CBZ      r0,|L1.10692|
0029ae  f1a00001          SUB      r0,r0,#1              ;2556
0029b2  b240              SXTB     r0,r0                 ;2556
0029b4  7010              STRB     r0,[r2,#0]            ;2556
0029b6  2800              CMP      r0,#0                 ;2557
0029b8  dc04              BGT      |L1.10692|
0029ba  2000              MOVS     r0,#0                 ;2559
0029bc  f7fffffe          BL       avar_unet_hndl
0029c0  f8847031          STRB     r7,[r4,#0x31]
                  |L1.10692|
;;;2561   			}
;;;2562   		}
;;;2563   	else if(unet_drv_cnt<0)unet_drv_cnt=0;
;;;2564   	
;;;2565   	}
;;;2566   #ifdef UKU_6U || UKU_ZVU
;;;2567   if(net_U>UMAXN)
;;;2568   	{
;;;2569   	if((unet_max_drv_cnt<10)&&(main_1Hz_cnt>15))
;;;2570   		{
;;;2571   		unet_max_drv_cnt++;
;;;2572   		if(unet_max_drv_cnt>=10)
;;;2573   			{
;;;2574   			net_Ustore=net_U;
;;;2575   		 	avar_unet_hndl(2);
;;;2576   			
;;;2577   			}
;;;2578   		}
;;;2579   	else if(unet_max_drv_cnt>=10)unet_max_drv_cnt=10;
;;;2580   
;;;2581   	if(net_U>net_Ustore) net_Ustore=net_U;	
;;;2582   	}
;;;2583   
;;;2584   else if(net_U<UMAXN)
;;;2585   	{                 
;;;2586   	if(unet_max_drv_cnt)
;;;2587   		{
;;;2588   		unet_max_drv_cnt--;
;;;2589   		if(unet_max_drv_cnt<=0)
;;;2590   			{
;;;2591   			avar_unet_hndl(0);
;;;2592   			avar_bps_reset_cnt=10;
;;;2593   			}
;;;2594   		}
;;;2595   	else if(unet_max_drv_cnt<0)unet_max_drv_cnt=0;
;;;2596   	
;;;2597   	}
;;;2598   #endif /*UKU_6U*/
;;;2599   if(avar_bps_reset_cnt)	avar_bps_reset_cnt--;
0029c4  f8940031          LDRB     r0,[r4,#0x31]  ; avar_bps_reset_cnt
0029c8  2800              CMP      r0,#0
0029ca  d003              BEQ      |L1.10708|
0029cc  f1a00001          SUB      r0,r0,#1
0029d0  f8840031          STRB     r0,[r4,#0x31]
                  |L1.10708|
;;;2600   }
0029d4  e8bd81f0          POP      {r4-r8,pc}
;;;2601   
                          ENDP

                  matemat PROC
;;;2603   //-----------------------------------------------
;;;2604   void matemat(void)
0029d8  e92d4ff0          PUSH     {r4-r11,lr}
;;;2605   {
0029dc  b087              SUB      sp,sp,#0x1c
;;;2606   //signed short temp_SS;
;;;2607   signed long temp_SL/*,temp_SL_*/;
;;;2608   char /*temp,*/i;
;;;2609   //signed short temp_SS;
;;;2610   
;;;2611   #ifdef UKU_MGTS
;;;2612   //напряжение сети
;;;2613   temp_SL=(signed long)net_buff_;
;;;2614   temp_SL*=Kunet;
;;;2615   temp_SL/=110000L;
;;;2616   net_U=(signed short)temp_SL;
;;;2617   #endif
;;;2618   
;;;2619   #ifdef UKU_RSTKM
;;;2620   //напряжение сети
;;;2621   temp_SL=(signed long)net_buff_;
;;;2622   temp_SL*=Kunet;
;;;2623   temp_SL/=110000L;
;;;2624   net_U=(signed short)temp_SL;
;;;2625   #endif
;;;2626   
;;;2627   #ifdef UKU_3U
;;;2628   //напряжение сети
;;;2629   temp_SL=(signed long)net_buff_;
;;;2630   temp_SL*=Kunet;
;;;2631   temp_SL/=36000L;
;;;2632   net_U=(signed short)temp_SL;
;;;2633   #endif
;;;2634   
;;;2635   #ifdef UKU_6U
;;;2636   //напряжение сети
;;;2637   
;;;2638   if((AUSW_MAIN%10)||(AUSW_MAIN==2400)||(AUSW_MAIN==4800)||(AUSW_MAIN==6000))
;;;2639   	{
;;;2640   
;;;2641   	if(bps[11]._device==dNET_METR)
;;;2642   		{
;;;2643   		net_metr_buff_[0]=((signed short)bps[11]._buff[0])+(((signed short)bps[11]._buff[1])<<8);
;;;2644   		net_metr_buff_[1]=((signed short)bps[11]._buff[2])+(((signed short)bps[11]._buff[3])<<8);
;;;2645   		net_metr_buff_[2]=((signed short)bps[11]._buff[4])+(((signed short)bps[11]._buff[5])<<8);
;;;2646   
;;;2647   		temp_SL=(signed long)net_metr_buff_[0];
;;;2648   		temp_SL*=KunetA;
;;;2649   		temp_SL/=6000L;
;;;2650   		net_Ua=(signed short)temp_SL;
;;;2651   	
;;;2652   		temp_SL=(signed long)net_metr_buff_[1];
;;;2653   		temp_SL*=KunetB;
;;;2654   		temp_SL/=6000L;
;;;2655   		net_Ub=(signed short)temp_SL;
;;;2656   	
;;;2657   		temp_SL=(signed long)net_metr_buff_[2];
;;;2658   		temp_SL*=KunetC;
;;;2659   		temp_SL/=6000L;
;;;2660   		net_Uc=(signed short)temp_SL;
;;;2661   		}
;;;2662   	else
;;;2663   		{
;;;2664   		temp_SL=(signed long)net_buff_;
;;;2665   		temp_SL*=KunetA;
;;;2666   		temp_SL/=110000L;
;;;2667   		net_Ua=(signed short)temp_SL;
;;;2668   	
;;;2669   		temp_SL=(signed long)adc_buff_[3];
;;;2670   		temp_SL*=KunetB;
;;;2671   		temp_SL/=6000L;
;;;2672   		net_Ub=(signed short)temp_SL;
;;;2673   	
;;;2674   		temp_SL=(signed long)adc_buff_[10];
;;;2675   		temp_SL*=KunetC;
;;;2676   		temp_SL/=6000L;
;;;2677   		net_Uc=(signed short)temp_SL;
;;;2678   		}
;;;2679   
;;;2680   	net_U=net_Ua;
;;;2681   	if(net_Ub<net_U)net_U=net_Ub;
;;;2682   	if(net_Uc<net_U)net_U=net_Uc;
;;;2683   	}
;;;2684   else 
;;;2685   	{
;;;2686   	temp_SL=(signed long)net_buff_;
;;;2687   	temp_SL*=Kunet;
;;;2688   	temp_SL/=110000L;
;;;2689   	net_U=(signed short)temp_SL;
;;;2690   	}
;;;2691   
;;;2692   
;;;2693   
;;;2694   
;;;2695   #endif
;;;2696   
;;;2697   #ifdef UKU_GLONASS
;;;2698   //напряжение сети
;;;2699   temp_SL=(signed long)net_buff_;
;;;2700   temp_SL*=Kunet;
;;;2701   temp_SL/=110000L;
;;;2702   net_U=(signed short)temp_SL;
;;;2703   #endif
;;;2704   
;;;2705   #ifdef UKU_KONTUR
;;;2706   //напряжение сети
;;;2707   temp_SL=(signed long)net_buff_;
;;;2708   temp_SL*=Kunet;
;;;2709   temp_SL/=110000L;
;;;2710   net_U=(signed short)temp_SL;
;;;2711   #endif
;;;2712   
;;;2713   #ifdef IPS_SGEP_GAZPROM
;;;2714   //напряжение сети
;;;2715   temp_SL=(signed long)net_buff_;
;;;2716   temp_SL*=Kunet;
;;;2717   temp_SL/=110000L;
;;;2718   net_U=(signed short)temp_SL;
;;;2719   #endif
;;;2720   
;;;2721   #ifdef UKU_220_V2
;;;2722   //напряжение сети
;;;2723   
;;;2724   if(AUSW_MAIN==22033)
;;;2725   	{
;;;2726   	temp_SL=(signed long)net_buff_;
;;;2727   	temp_SL*=KunetA;
;;;2728   	temp_SL/=6000L;
;;;2729   	net_Ua=(signed short)temp_SL;
;;;2730   
;;;2731   	temp_SL=(signed long)adc_buff_[3];
;;;2732   	temp_SL*=KunetB;
;;;2733   	temp_SL/=6000L;
;;;2734   	net_Ub=(signed short)temp_SL;
;;;2735   
;;;2736   	temp_SL=(signed long)adc_buff_[10];
;;;2737   	temp_SL*=KunetC;
;;;2738   	temp_SL/=6000L;
;;;2739   	net_Uc=(signed short)temp_SL;
;;;2740   
;;;2741   	net_U=net_Ua;
;;;2742   	if(net_Ub<net_U)net_U=net_Ub;
;;;2743   	if(net_Uc<net_U)net_U=net_Uc;
;;;2744   	}
;;;2745   else
;;;2746   	{
;;;2747   	temp_SL=(signed long)net_buff_;
;;;2748   	temp_SL*=Kunet;
;;;2749   	temp_SL/=5000L;
;;;2750   	net_U=(signed short)temp_SL;
;;;2751   	}
;;;2752   #endif
;;;2753   
;;;2754   
;;;2755   #ifdef UKU_220
;;;2756   //напряжение сети
;;;2757   
;;;2758   if(AUSW_MAIN==22035)
;;;2759   	{
;;;2760   	temp_SL=(signed long)net_buff_;
;;;2761   	temp_SL*=KunetA;
;;;2762   	temp_SL/=6000L;
;;;2763   	net_Ua=(signed short)temp_SL;
;;;2764   
;;;2765   	temp_SL=(signed long)adc_buff_[3];
;;;2766   	temp_SL*=KunetB;
;;;2767   	temp_SL/=6000L;
;;;2768   	net_Ub=(signed short)temp_SL;
;;;2769   
;;;2770   	temp_SL=(signed long)adc_buff_[10];
;;;2771   	temp_SL*=KunetC;
;;;2772   	temp_SL/=6000L;
;;;2773   	net_Uc=(signed short)temp_SL;
;;;2774   
;;;2775   	net_U=net_Ua;
;;;2776   	if(net_Ub<net_U)net_U=net_Ub;
;;;2777   	if(net_Uc<net_U)net_U=net_Uc;
;;;2778   	}
;;;2779   else
;;;2780   	{
;;;2781   	temp_SL=(signed long)net_buff_;
;;;2782   	temp_SL*=Kunet;
;;;2783   	#ifdef _ACDC_
;;;2784   	temp_SL/=500L;
;;;2785   	#else
;;;2786   	temp_SL/=5000L;
;;;2787   	#endif
;;;2788   	net_U=(signed short)temp_SL;
;;;2789   	
;;;2790   	}
;;;2791   #endif
;;;2792   
;;;2793   #ifdef UKU_220_IPS_TERMOKOMPENSAT
;;;2794   //напряжение сети
;;;2795   
;;;2796   
;;;2797   	if(bps[11]._device==dNET_METR)
0029de  4860              LDR      r0,|L1.11104|
;;;2798   		{
;;;2799   		net_metr_buff_[0]=((signed short)bps[11]._buff[0])+(((signed short)bps[11]._buff[1])<<8);
;;;2800   		net_metr_buff_[1]=((signed short)bps[11]._buff[2])+(((signed short)bps[11]._buff[3])<<8);
;;;2801   		net_metr_buff_[2]=((signed short)bps[11]._buff[4])+(((signed short)bps[11]._buff[5])<<8);
;;;2802   
;;;2803   		temp_SL=(signed long)net_metr_buff_[2];
;;;2804   		temp_SL*=KunetA;
0029e0  4b60              LDR      r3,|L1.11108|
;;;2805   		temp_SL/=6000L;
;;;2806   		net_Ua=(signed short)temp_SL;
;;;2807   	
;;;2808   		temp_SL=(signed long)net_metr_buff_[1];
;;;2809   		temp_SL*=KunetB;
0029e2  4962              LDR      r1,|L1.11116|
0029e4  f890044c          LDRB     r0,[r0,#0x44c]        ;2797  ; bps
;;;2810   		temp_SL/=6000L;
;;;2811   		net_Ub=(signed short)temp_SL;
;;;2812   	
;;;2813   		temp_SL=(signed long)net_metr_buff_[0];
;;;2814   		temp_SL*=KunetC;
0029e8  4a61              LDR      r2,|L1.11120|
0029ea  9006              STR      r0,[sp,#0x18]         ;2804
;;;2815   		temp_SL/=6000L;
;;;2816   		net_Uc=(signed short)temp_SL;
;;;2817   
;;;2818   		net_F3=((signed short)bps[11]._buff[6])+(((signed short)bps[11]._buff[7])<<8);
;;;2819   
;;;2820   		net_U=net_Ua;
;;;2821   		if(net_Ub<net_U)net_U=net_Ub;
;;;2822   		if(net_Uc<net_U)net_U=net_Uc;
;;;2823   		}
;;;2824   	  else if(AUSW_MAIN==22033)
;;;2825   	{
;;;2826   	temp_SL=(signed long)net_buff_;
0029ec  4e4d              LDR      r6,|L1.11044|
0029ee  f8dfc178          LDR      r12,|L1.11112|
0029f2  f9b39000          LDRSH    r9,[r3,#0]            ;2804
0029f6  f9b1b000          LDRSH    r11,[r1,#0]           ;2809
0029fa  f9b2a000          LDRSH    r10,[r2,#0]           ;2814
0029fe  4f5d              LDR      r7,|L1.11124|
002a00  4c5d              LDR      r4,|L1.11128|
002a02  3e94              SUBS     r6,r6,#0x94
002a04  f2456511          MOV      r5,#0x5611            ;2824
002a08  2807              CMP      r0,#7                 ;2797
002a0a  d036              BEQ      |L1.10874|
002a0c  4631              MOV      r1,r6
002a0e  f8df815c          LDR      r8,|L1.11116|
002a12  8f4a              LDRH     r2,[r1,#0x3a]
002a14  4619              MOV      r1,r3                 ;2804
;;;2827   	temp_SL*=KunetA;
;;;2828   	temp_SL/=4000L;
;;;2829   	net_Ua=(signed short)temp_SL;
;;;2830   
;;;2831   	temp_SL=(signed long)adc_buff_[3];
002a16  4b5a              LDR      r3,|L1.11136|
002a18  f9b11000          LDRSH    r1,[r1,#0]            ;2804
002a1c  f9b88000          LDRSH    r8,[r8,#0]            ;2809
002a20  434a              MULS     r2,r1,r2              ;2827
002a22  f9b31006          LDRSH    r1,[r3,#6]
002a26  f8df9148          LDR      r9,|L1.11120|
;;;2832   	temp_SL*=KunetB;
002a2a  fb01f108          MUL      r1,r1,r8
002a2e  f2417870          MOV      r8,#0x1770            ;2805
;;;2833   	temp_SL/=6000L;
;;;2834   	net_Ub=(signed short)temp_SL;
;;;2835   
;;;2836   	temp_SL=(signed long)adc_buff_[10];
002a32  f9b33014          LDRSH    r3,[r3,#0x14]
002a36  f9b99000          LDRSH    r9,[r9,#0]            ;2814
002a3a  fb91f1f8          SDIV     r1,r1,r8              ;2833
;;;2837   	temp_SL*=KunetC;
002a3e  fb03f309          MUL      r3,r3,r9
;;;2838   	temp_SL/=6000L;
002a42  fb93f3f8          SDIV     r3,r3,r8
002a46  484d              LDR      r0,|L1.11132|
002a48  b209              SXTH     r1,r1                 ;2834
;;;2839   	net_Uc=(signed short)temp_SL;
002a4a  b21b              SXTH     r3,r3
002a4c  8800              LDRH     r0,[r0,#0]            ;2824  ; AUSW_MAIN
002a4e  42a8              CMP      r0,r5                 ;2824
002a50  d154              BNE      |L1.11004|
002a52  f44f607a          MOV      r0,#0xfa0             ;2828
002a56  fb92f0f0          SDIV     r0,r2,r0              ;2828
002a5a  b200              SXTH     r0,r0                 ;2829
002a5c  f8ac0000          STRH     r0,[r12,#0]           ;2829
002a60  8039              STRH     r1,[r7,#0]            ;2834
002a62  8023              STRH     r3,[r4,#0]
;;;2840   
;;;2841   	net_U=net_Ua;
002a64  4a39              LDR      r2,|L1.11084|
002a66  8010              STRH     r0,[r2,#0]
;;;2842   	if(net_Ub<net_U)net_U=net_Ub;
002a68  4281              CMP      r1,r0
002a6a  da00              BGE      |L1.10862|
002a6c  8011              STRH     r1,[r2,#0]
                  |L1.10862|
;;;2843   	if(net_Uc<net_U)net_U=net_Uc;
002a6e  f9b20000          LDRSH    r0,[r2,#0]  ; net_U
002a72  4283              CMP      r3,r0
002a74  da00              BGE      |L1.10872|
002a76  8013              STRH     r3,[r2,#0]
                  |L1.10872|
002a78  e0b3              B        |L1.11234|
                  |L1.10874|
002a7a  4842              LDR      r0,|L1.11140|
002a7c  4b29              LDR      r3,|L1.11044|
002a7e  7801              LDRB     r1,[r0,#0]            ;2799  ; bps
002a80  7842              LDRB     r2,[r0,#1]            ;2799  ; bps
002a82  f1030358          ADD      r3,r3,#0x58           ;2799
002a86  eb012102          ADD      r1,r1,r2,LSL #8       ;2799
002a8a  fa1ff881          UXTH     r8,r1                 ;2799
002a8e  f8a38000          STRH     r8,[r3,#0]            ;2799
002a92  7881              LDRB     r1,[r0,#2]            ;2800  ; bps
002a94  78c2              LDRB     r2,[r0,#3]            ;2800  ; bps
002a96  eb012102          ADD      r1,r1,r2,LSL #8       ;2800
002a9a  b289              UXTH     r1,r1                 ;2800
002a9c  8059              STRH     r1,[r3,#2]            ;2800
002a9e  7902              LDRB     r2,[r0,#4]            ;2801  ; bps
002aa0  f890e005          LDRB     lr,[r0,#5]            ;2801  ; bps
002aa4  eb02220e          ADD      r2,r2,lr,LSL #8       ;2801
002aa8  b292              UXTH     r2,r2                 ;2801
002aaa  809a              STRH     r2,[r3,#4]            ;2801
002aac  fb02f209          MUL      r2,r2,r9              ;2804
002ab0  f2417370          MOV      r3,#0x1770            ;2805
002ab4  fb92f2f3          SDIV     r2,r2,r3              ;2805
002ab8  fa0ff982          SXTH     r9,r2                 ;2806
002abc  f8ac9000          STRH     r9,[r12,#0]           ;2806
002ac0  fb01f10b          MUL      r1,r1,r11             ;2809
002ac4  fb91f1f3          SDIV     r1,r1,r3              ;2810
002ac8  b209              SXTH     r1,r1                 ;2811
002aca  8039              STRH     r1,[r7,#0]            ;2811
002acc  fb08f80a          MUL      r8,r8,r10             ;2814
002ad0  fb98f2f3          SDIV     r2,r8,r3              ;2815
002ad4  b212              SXTH     r2,r2                 ;2816
002ad6  8022              STRH     r2,[r4,#0]            ;2816
002ad8  7983              LDRB     r3,[r0,#6]            ;2818  ; bps
002ada  79c0              LDRB     r0,[r0,#7]            ;2818  ; bps
002adc  eb032000          ADD      r0,r3,r0,LSL #8       ;2818
002ae0  4b29              LDR      r3,|L1.11144|
002ae2  8018              STRH     r0,[r3,#0]            ;2818
002ae4  4819              LDR      r0,|L1.11084|
002ae6  f8a09000          STRH     r9,[r0,#0]            ;2820
002aea  4549              CMP      r1,r9                 ;2821
002aec  da00              BGE      |L1.10992|
002aee  8001              STRH     r1,[r0,#0]            ;2821
                  |L1.10992|
002af0  f9b01000          LDRSH    r1,[r0,#0]            ;2822  ; net_U
002af4  428a              CMP      r2,r1                 ;2822
002af6  da74              BGE      |L1.11234|
002af8  8002              STRH     r2,[r0,#0]            ;2822
002afa  e072              B        |L1.11234|
                  |L1.11004|
;;;2844   	}
;;;2845   else if((AUSW_MAIN==22063)||(AUSW_MAIN==22023)||(AUSW_MAIN==22043)||(AUSW_MAIN==22044)||(AUSW_MAIN==22018))
002afc  f5a048ac          SUB      r8,r0,#0x5600
002b00  f1b8082f          SUBS     r8,r8,#0x2f
002b04  d00b              BEQ      |L1.11038|
002b06  f1180828          ADDS     r8,r8,#0x28
002b0a  d008              BEQ      |L1.11038|
002b0c  f1b80814          SUBS     r8,r8,#0x14
002b10  d005              BEQ      |L1.11038|
002b12  f1b80801          SUBS     r8,r8,#1
002b16  d002              BEQ      |L1.11038|
002b18  f118081a          ADDS     r8,r8,#0x1a
002b1c  d148              BNE      |L1.11184|
                  |L1.11038|
;;;2846   	{
;;;2847   	temp_SL=(signed long)net_buff_;
;;;2848   	temp_SL*=KunetA;
;;;2849   	temp_SL/=40000L;
002b1e  f6494040          MOV      r0,#0x9c40
002b22  e033              B        |L1.11148|
                  |L1.11044|
                          DCD      ||area_number.25||+0x94
                  |L1.11048|
                          DCD      KB_ALGORITM
                  |L1.11052|
                          DCD      mess_data
                  |L1.11056|
                          DCD      USIGN
                  |L1.11060|
                          DCD      load_U
                  |L1.11064|
                          DCD      load_I
                  |L1.11068|
                          DCD      bat_ips
                  |L1.11072|
                          DCD      bat_u_old_cnt
                  |L1.11076|
                          DCD      bat
                  |L1.11080|
                          DCD      net_av_2min_timer
                  |L1.11084|
                          DCD      net_U
                  |L1.11088|
                          DCD      UMN
                  |L1.11092|
                          DCD      unet_drv_cnt
                  |L1.11096|
                          DCD      net_Ustore
                  |L1.11100|
                          DCD      main_1Hz_cnt
                  |L1.11104|
                          DCD      bps
                  |L1.11108|
                          DCD      KunetA
                  |L1.11112|
                          DCD      net_Ua
                  |L1.11116|
                          DCD      KunetB
                  |L1.11120|
                          DCD      KunetC
                  |L1.11124|
                          DCD      net_Ub
                  |L1.11128|
                          DCD      net_Uc
                  |L1.11132|
                          DCD      AUSW_MAIN
                  |L1.11136|
                          DCD      ||.bss||+0x40c
                  |L1.11140|
                          DCD      bps+0x452
                  |L1.11144|
                          DCD      net_F3
                  |L1.11148|
002b8c  fb92f0f0          SDIV     r0,r2,r0
;;;2850   	net_Ua=(signed short)temp_SL;
002b90  b200              SXTH     r0,r0
002b92  f8ac0000          STRH     r0,[r12,#0]
;;;2851   
;;;2852   	temp_SL=(signed long)adc_buff_[3];
;;;2853   	temp_SL*=KunetB;
;;;2854   	temp_SL/=6000L;
;;;2855   	net_Ub=(signed short)temp_SL;
002b96  8039              STRH     r1,[r7,#0]
;;;2856   
;;;2857   	temp_SL=(signed long)adc_buff_[10];
;;;2858   	temp_SL*=KunetC;
;;;2859   	temp_SL/=6000L;
;;;2860   	net_Uc=(signed short)temp_SL;
002b98  8023              STRH     r3,[r4,#0]
;;;2861   
;;;2862   	net_U=net_Ua;
002b9a  4aff              LDR      r2,|L1.12184|
002b9c  8010              STRH     r0,[r2,#0]
;;;2863   	if(net_Ub<net_U)net_U=net_Ub;
002b9e  4281              CMP      r1,r0
002ba0  da00              BGE      |L1.11172|
002ba2  8011              STRH     r1,[r2,#0]
                  |L1.11172|
;;;2864   	if(net_Uc<net_U)net_U=net_Uc;
002ba4  f9b20000          LDRSH    r0,[r2,#0]  ; net_U
002ba8  4283              CMP      r3,r0
002baa  da1a              BGE      |L1.11234|
002bac  8013              STRH     r3,[r2,#0]
002bae  e018              B        |L1.11234|
                  |L1.11184|
;;;2865   	}
;;;2866   else	if((AUSW_MAIN==22010)||(AUSW_MAIN==22011) )
;;;2867   	{
;;;2868   	temp_SL=(signed long)net_buff_;
;;;2869   	temp_SL*=Kunet;
002bb0  49fa              LDR      r1,|L1.12188|
002bb2  f5a043aa          SUB      r3,r0,#0x5500         ;2866
002bb6  f9b12000          LDRSH    r2,[r1,#0]
002bba  49f9              LDR      r1,|L1.12192|
002bbc  8f49              LDRH     r1,[r1,#0x3a]         ;2826
002bbe  4351              MULS     r1,r2,r1
002bc0  3bfa              SUBS     r3,r3,#0xfa           ;2866
002bc2  d001              BEQ      |L1.11208|
002bc4  1e5a              SUBS     r2,r3,#1              ;2866
002bc6  d106              BNE      |L1.11222|
                  |L1.11208|
;;;2870   	temp_SL/=35000L;
002bc8  f64800b8          MOV      r0,#0x88b8
002bcc  fb91f0f0          SDIV     r0,r1,r0
;;;2871   	net_U=(signed short)temp_SL;
002bd0  49f1              LDR      r1,|L1.12184|
002bd2  8008              STRH     r0,[r1,#0]
002bd4  e005              B        |L1.11234|
                  |L1.11222|
;;;2872   	
;;;2873   	}
;;;2874   else
;;;2875   	{
;;;2876   	temp_SL=(signed long)net_buff_;
;;;2877   	temp_SL*=Kunet;
;;;2878   	#ifdef _ACDC_
;;;2879   	temp_SL/=500L;
002bd6  f44f70fa          MOV      r0,#0x1f4
002bda  fb91f0f0          SDIV     r0,r1,r0
;;;2880   	#else
;;;2881   	temp_SL/=5000L;
;;;2882   	#endif
;;;2883   	net_U=(signed short)temp_SL;
002bde  49ee              LDR      r1,|L1.12184|
002be0  8008              STRH     r0,[r1,#0]
                  |L1.11234|
;;;2884   	
;;;2885   	}
;;;2886   if(bps[11]._device!=dNET_METR) net_F3=net_F;
002be2  9806              LDR      r0,[sp,#0x18]
002be4  2807              CMP      r0,#7
002be6  d003              BEQ      |L1.11248|
002be8  48ee              LDR      r0,|L1.12196|
002bea  8801              LDRH     r1,[r0,#0]  ; net_F
002bec  48ee              LDR      r0,|L1.12200|
002bee  8001              STRH     r1,[r0,#0]
                  |L1.11248|
;;;2887   #endif
;;;2888   
;;;2889   #ifdef UKU_TELECORE2015
;;;2890   //напряжение сети
;;;2891   temp_SL=(signed long)net_buff_;
;;;2892   temp_SL*=Kunet;
;;;2893   temp_SL/=110000L;
;;;2894   net_U=(signed short)temp_SL;
;;;2895   #endif
;;;2896   
;;;2897   #ifdef UKU_TELECORE2017
;;;2898   //напряжение сети
;;;2899   temp_SL=(signed long)net_buff_;
;;;2900   temp_SL*=Kunet;
;;;2901   temp_SL/=110000L;
;;;2902   net_U=(signed short)temp_SL;
;;;2903   #endif
;;;2904   
;;;2905   //Напряжения батарей
;;;2906   temp_SL=(signed long)adc_buff_[0];
002bf0  4fee              LDR      r7,|L1.12204|
002bf2  f9b72000          LDRSH    r2,[r7,#0]  ; adc_buff_
;;;2907   temp_SL*=Kubat[0];
002bf6  49ee              LDR      r1,|L1.12208|
002bf8  f9b10000          LDRSH    r0,[r1,#0]  ; Kubat
002bfc  4350              MULS     r0,r2,r0
;;;2908   temp_SL/=2000L;
002bfe  f44f68fa          MOV      r8,#0x7d0
002c02  fb90f0f8          SDIV     r0,r0,r8
;;;2909   bat[0]._Ub=(signed short)temp_SL;
002c06  4ceb              LDR      r4,|L1.12212|
002c08  8060              STRH     r0,[r4,#2]
;;;2910   
;;;2911   #ifdef UKU_220
;;;2912   //Напряжения батарей
;;;2913   temp_SL=(signed long)adc_buff_[0];
;;;2914   temp_SL*=Kubat[0];
;;;2915   temp_SL/=400L;
;;;2916   bat[0]._Ub=(signed short)temp_SL;
;;;2917   #endif
;;;2918   
;;;2919   #ifdef UKU_220_V2
;;;2920   //Напряжения батарей
;;;2921   temp_SL=(signed long)adc_buff_[0];
;;;2922   temp_SL*=Kubat[0];
;;;2923   temp_SL/=400L;
;;;2924   bat[0]._Ub=(signed short)temp_SL;
;;;2925   #endif
;;;2926   
;;;2927   //adc_buff_[4]=300;
;;;2928   
;;;2929   temp_SL=(signed long)adc_buff_[4];
002c0a  f9b73008          LDRSH    r3,[r7,#8]  ; adc_buff_
;;;2930   temp_SL*=Kubatm[0];
002c0e  4aea              LDR      r2,|L1.12216|
002c10  f9b20000          LDRSH    r0,[r2,#0]  ; Kubatm
002c14  fb00f003          MUL      r0,r0,r3
;;;2931   temp_SL/=700L;
002c18  f44f732f          MOV      r3,#0x2bc
002c1c  fb90f0f3          SDIV     r0,r0,r3
;;;2932   bat[0]._Ubm=(signed short)temp_SL;
002c20  80a0              STRH     r0,[r4,#4]
;;;2933   
;;;2934   #ifdef UKU_KONTUR
;;;2935   temp_SL=(signed long)adc_buff_[4];
;;;2936   temp_SL*=Kubatm[0];
;;;2937   temp_SL/=2000L;
;;;2938   bat[0]._Ubm=(signed short)temp_SL;
;;;2939   #endif
;;;2940   
;;;2941   #ifdef UKU_6U
;;;2942   temp_SL=(signed long)adc_buff_[4];
;;;2943   temp_SL*=Kubatm[0];
;;;2944   temp_SL/=2000L;
;;;2945   bat[0]._Ubm=(signed short)temp_SL;
;;;2946   #endif
;;;2947   
;;;2948   temp_SL=(signed long)adc_buff_[12];
002c22  f9b70018          LDRSH    r0,[r7,#0x18]  ; adc_buff_
;;;2949   temp_SL*=Kubat[1];
002c26  f9b11002          LDRSH    r1,[r1,#2]  ; Kubat
002c2a  fb01f100          MUL      r1,r1,r0
;;;2950   temp_SL/=2000L;
002c2e  fb91f0f8          SDIV     r0,r1,r8
;;;2951   bat[1]._Ub=(signed short)temp_SL;
002c32  f8a4004e          STRH     r0,[r4,#0x4e]
;;;2952   
;;;2953   #ifdef UKU_220
;;;2954   temp_SL=(signed long)adc_buff_[12];
;;;2955   temp_SL*=Kubat[1];
;;;2956   temp_SL/=400L;
;;;2957   bat[1]._Ub=(signed short)temp_SL;
;;;2958   #endif
;;;2959   
;;;2960   #ifdef UKU_220_V2
;;;2961   temp_SL=(signed long)adc_buff_[12];
;;;2962   temp_SL*=Kubat[1];
;;;2963   temp_SL/=400L;
;;;2964   bat[1]._Ub=(signed short)temp_SL;
;;;2965   #endif
;;;2966   
;;;2967   //adc_buff_[1]=300;
;;;2968   
;;;2969   temp_SL=(signed long)adc_buff_[1];
002c36  f9b71002          LDRSH    r1,[r7,#2]  ; adc_buff_
;;;2970   temp_SL*=Kubatm[1];
002c3a  f9b20002          LDRSH    r0,[r2,#2]  ; Kubatm
002c3e  fb00f001          MUL      r0,r0,r1
;;;2971   temp_SL/=700L;
002c42  fb90f0f3          SDIV     r0,r0,r3
;;;2972   bat[1]._Ubm=(signed short)temp_SL;
002c46  f8a40050          STRH     r0,[r4,#0x50]
;;;2973   #ifdef UKU_KONTUR
;;;2974   temp_SL=(signed long)adc_buff_[1];
;;;2975   temp_SL*=Kubatm[1];
;;;2976   temp_SL/=2000L;
;;;2977   bat[1]._Ubm=(signed short)temp_SL;
;;;2978   #endif
;;;2979   #ifdef UKU_6U
;;;2980   temp_SL=(signed long)adc_buff_[1];
;;;2981   temp_SL*=Kubatm[1];
;;;2982   temp_SL/=2000L;
;;;2983   bat[1]._Ubm=(signed short)temp_SL;
;;;2984   #endif
;;;2985   
;;;2986   #ifdef UKU_TELECORE2015
;;;2987   temp_SL=(signed long)adc_buff_[2];
;;;2988   temp_SL*=Kubat[0];
;;;2989   temp_SL/=2000L;
;;;2990   bat[0]._Ub=(signed short)temp_SL;
;;;2991   #endif
;;;2992   
;;;2993   /*
;;;2994   //Токи батарей
;;;2995   if(!mess_find_unvol(MESS2MATEMAT))
;;;2996   	{
;;;2997   	temp_SL=(signed long)ad7705_buff_[0];
;;;2998   	temp_SL-=(signed long)Kibat0[0];
;;;2999   	temp_SL*=(signed long)Kibat1[0];
;;;3000   	if((AUSW_MAIN==24120)||(AUSW_MAIN==24210))temp_SL/=300L;
;;;3001   	else temp_SL/=1000L;
;;;3002   	bat[0]._Ib=(signed short)temp_SL;
;;;3003   
;;;3004   	temp_SL=(signed long)ad7705_buff_[1];
;;;3005   	temp_SL-=(signed long)Kibat0[1];
;;;3006   	temp_SL*=(signed long)Kibat1[1];
;;;3007   	if((AUSW_MAIN==24120)||(AUSW_MAIN==24210))temp_SL/=300L;
;;;3008   	else temp_SL/=1000L;
;;;3009   	bat[1]._Ib=(signed short)temp_SL;
;;;3010   	}
;;;3011   */
;;;3012   
;;;3013   
;;;3014   //Токи батарей
;;;3015   if(!mess_find_unvol(MESS2MATEMAT))
002c4a  f04f00dc          MOV      r0,#0xdc
002c4e  f7fffffe          BL       mess_find_unvol
;;;3016   	{
;;;3017   	temp_SL=(signed long)ad7705_buff_[0];
;;;3018   	temp_SL-=(signed long)Kibat0[0];
;;;3019   	temp_SL*=(signed long)Kibat1[0];
;;;3020   	if((AUSW_MAIN==24120)||(AUSW_MAIN==24210))temp_SL/=300L;
;;;3021   	else if((AUSW_MAIN==22010)||(AUSW_MAIN==22035)||(AUSW_MAIN==22033))temp_SL/=2000L;
002c52  f2456c13          MOV      r12,#0x5613
002c56  bbe8              CBNZ     r0,|L1.11476|
002c58  f8dfa360          LDR      r10,|L1.12220|
002c5c  f8ba0000          LDRH     r0,[r10,#0]           ;3017  ; ad7705_buff_
002c60  f8dfb35c          LDR      r11,|L1.12224|
002c64  f8bb1000          LDRH     r1,[r11,#0]           ;3018  ; Kibat0
002c68  eba00001          SUB      r0,r0,r1              ;3018
002c6c  4ad5              LDR      r2,|L1.12228|
002c6e  f9b21000          LDRSH    r1,[r2,#0]            ;3019  ; Kibat1
002c72  fb01f100          MUL      r1,r1,r0              ;3019
002c76  48d4              LDR      r0,|L1.12232|
002c78  f6456338          MOV      r3,#0x5e38            ;3020
002c7c  f6456992          MOV      r9,#0x5e92            ;3020
002c80  8800              LDRH     r0,[r0,#0]            ;3020  ; AUSW_MAIN
002c82  4298              CMP      r0,r3                 ;3020
002c84  d001              BEQ      |L1.11402|
002c86  4548              CMP      r0,r9                 ;3020
002c88  d104              BNE      |L1.11412|
                  |L1.11402|
002c8a  f44f7e96          MOV      lr,#0x12c             ;3020
002c8e  fb91f1fe          SDIV     r1,r1,lr              ;3020
002c92  e00f              B        |L1.11444|
                  |L1.11412|
002c94  f5a04ea8          SUB      lr,r0,#0x5400
002c98  f5be7efd          SUBS     lr,lr,#0x1fa
002c9c  d003              BEQ      |L1.11430|
002c9e  4560              CMP      r0,r12
002ca0  d001              BEQ      |L1.11430|
002ca2  42a8              CMP      r0,r5
002ca4  d102              BNE      |L1.11436|
                  |L1.11430|
002ca6  fb91f1f8          SDIV     r1,r1,r8
002caa  e003              B        |L1.11444|
                  |L1.11436|
;;;3022   	else temp_SL/=1000L;
002cac  f44f7e7a          MOV      lr,#0x3e8
002cb0  fb91f1fe          SDIV     r1,r1,lr
                  |L1.11444|
;;;3023   	#ifdef UKU_TELECORE2015
;;;3024   	temp_SL/=2L;
;;;3025   	//temp_SL=-temp_SL;
;;;3026   	#endif
;;;3027   	//#ifdef UKU_TELECORE2017
;;;3028   	//temp_SL/=-2L;
;;;3029   	//temp_SL=-temp_SL;
;;;3030   	//#endif
;;;3031   	bat[0]._Ib=(signed short)temp_SL;
002cb4  8121              STRH     r1,[r4,#8]
;;;3032   
;;;3033   	temp_SL=(signed long)ad7705_buff_[1];
002cb6  f8ba1002          LDRH     r1,[r10,#2]  ; ad7705_buff_
;;;3034   	temp_SL-=(signed long)Kibat0[1];
002cba  f8bba002          LDRH     r10,[r11,#2]  ; Kibat0
002cbe  eba10a0a          SUB      r10,r1,r10
;;;3035   	temp_SL*=(signed long)Kibat1[1];
002cc2  f9b21002          LDRSH    r1,[r2,#2]  ; Kibat1
002cc6  fb01f10a          MUL      r1,r1,r10
;;;3036   	if((AUSW_MAIN==24120)||(AUSW_MAIN==24210))temp_SL/=300L;
002cca  4298              CMP      r0,r3
002ccc  d001              BEQ      |L1.11474|
002cce  4548              CMP      r0,r9
002cd0  d106              BNE      |L1.11488|
                  |L1.11474|
002cd2  e000              B        |L1.11478|
                  |L1.11476|
002cd4  e015              B        |L1.11522|
                  |L1.11478|
002cd6  f44f7096          MOV      r0,#0x12c
002cda  fb91f0f0          SDIV     r0,r1,r0
002cde  e00e              B        |L1.11518|
                  |L1.11488|
;;;3037   	else if((AUSW_MAIN==22010)||(AUSW_MAIN==22035)||(AUSW_MAIN==22033))temp_SL/=2000L;
002ce0  f5a042aa          SUB      r2,r0,#0x5500
002ce4  3afa              SUBS     r2,r2,#0xfa
002ce6  d003              BEQ      |L1.11504|
002ce8  4560              CMP      r0,r12
002cea  d001              BEQ      |L1.11504|
002cec  42a8              CMP      r0,r5
002cee  d102              BNE      |L1.11510|
                  |L1.11504|
002cf0  fb91f0f8          SDIV     r0,r1,r8
002cf4  e003              B        |L1.11518|
                  |L1.11510|
;;;3038   	else temp_SL/=1000L;
002cf6  f44f707a          MOV      r0,#0x3e8
002cfa  fb91f0f0          SDIV     r0,r1,r0
                  |L1.11518|
;;;3039   	bat[1]._Ib=(signed short)temp_SL;
002cfe  f8a40054          STRH     r0,[r4,#0x54]
                  |L1.11522|
;;;3040   	}
;;;3041   
;;;3042   
;;;3043   
;;;3044   
;;;3045   
;;;3046   //Температуры батарей
;;;3047   
;;;3048   #ifdef UKU_KONTUR
;;;3049   if((adc_buff_[6]>800)&&(adc_buff_[6]<3800))bat[0]._nd=0;
;;;3050   else bat[0]._nd=1;
;;;3051   temp_SL=(signed long)adc_buff_[6];
;;;3052   temp_SL*=Ktbat[0];
;;;3053   temp_SL/=20000L;
;;;3054   temp_SL-=273L;
;;;3055   bat[0]._Tb=(signed short)temp_SL;
;;;3056   #else
;;;3057   if((adc_buff_[6]>800)&&(adc_buff_[6]<3800))bat[0]._nd=0;
002d02  f9b7000c          LDRSH    r0,[r7,#0xc]  ; adc_buff_
002d06  f6403ab7          MOV      r10,#0xbb7
002d0a  4681              MOV      r9,r0
002d0c  f2a03021          SUB      r0,r0,#0x321
;;;3058   else bat[0]._nd=1;
002d10  2201              MOVS     r2,#1
002d12  2300              MOVS     r3,#0                 ;3057
002d14  9005              STR      r0,[sp,#0x14]         ;3057
002d16  4550              CMP      r0,r10                ;3057
002d18  d201              BCS      |L1.11550|
002d1a  7323              STRB     r3,[r4,#0xc]          ;3057
002d1c  e000              B        |L1.11552|
                  |L1.11550|
002d1e  7322              STRB     r2,[r4,#0xc]
                  |L1.11552|
;;;3059   temp_SL=(signed long)adc_buff_[6];
;;;3060   temp_SL*=Ktbat[0];
002d20  49aa              LDR      r1,|L1.12236|
002d22  f9b10000          LDRSH    r0,[r1,#0]  ; Ktbat
002d26  fb00f009          MUL      r0,r0,r9
;;;3061   temp_SL/=20000L;
002d2a  f6446e20          MOV      lr,#0x4e20
002d2e  fb90f0fe          SDIV     r0,r0,lr
;;;3062   temp_SL-=273L;
002d32  f2a01011          SUB      r0,r0,#0x111
;;;3063   bat[0]._Tb=(signed short)temp_SL;
002d36  8160              STRH     r0,[r4,#0xa]
;;;3064   #endif
;;;3065   
;;;3066   #ifdef UKU_KONTUR
;;;3067   if((adc_buff_[7]>800)&&(adc_buff_[7]<3800))bat[1]._nd=0;
;;;3068   else bat[1]._nd=1;
;;;3069   temp_SL=(signed long)adc_buff_[7];
;;;3070   temp_SL*=Ktbat[1];
;;;3071   temp_SL/=20000L;
;;;3072   temp_SL-=273L;
;;;3073   bat[1]._Tb=(signed short)temp_SL;
;;;3074   #else
;;;3075   if((adc_buff_[7]>800)&&(adc_buff_[7]<3800))bat[1]._nd=0;
002d38  f9b7000e          LDRSH    r0,[r7,#0xe]  ; adc_buff_
002d3c  f2a03b21          SUB      r11,r0,#0x321
002d40  45d3              CMP      r11,r10
002d42  d202              BCS      |L1.11594|
002d44  f8843058          STRB     r3,[r4,#0x58]
002d48  e001              B        |L1.11598|
                  |L1.11594|
;;;3076   else bat[1]._nd=1;
002d4a  f8842058          STRB     r2,[r4,#0x58]
                  |L1.11598|
;;;3077   temp_SL=(signed long)adc_buff_[7];
;;;3078   temp_SL*=Ktbat[1];
002d4e  f9b11002          LDRSH    r1,[r1,#2]  ; Ktbat
002d52  4341              MULS     r1,r0,r1
;;;3079   temp_SL/=20000L;
002d54  f6446020          MOV      r0,#0x4e20
002d58  fb91f0f0          SDIV     r0,r1,r0
;;;3080   temp_SL-=273L;
002d5c  f2a01011          SUB      r0,r0,#0x111
;;;3081   bat[1]._Tb=(signed short)temp_SL;
002d60  4994              LDR      r1,|L1.12212|
002d62  f8a10056          STRH     r0,[r1,#0x56]
;;;3082   #endif
;;;3083   
;;;3084   #ifdef UKU_6U
;;;3085   
;;;3086   if(NUMMAKB==2)
;;;3087   	{
;;;3088   	if(makb[0]._cnt<5)
;;;3089   		{
;;;3090   		if(makb[0]._T_nd[0]==0)
;;;3091   			{
;;;3092   			bat[0]._Tb=makb[0]._T[0];
;;;3093   			bat[0]._nd=0;
;;;3094   			}
;;;3095   		}
;;;3096   
;;;3097   	if(makb[1]._cnt<5)
;;;3098   		{
;;;3099   		if(makb[1]._T_nd[0]==0)
;;;3100   			{
;;;3101   			bat[1]._Tb=makb[1]._T[0];
;;;3102   			bat[1]._nd=0;
;;;3103   			}
;;;3104   		}
;;;3105   
;;;3106   	}
;;;3107   else if(NUMMAKB==4)
;;;3108   	{
;;;3109   	signed short temp_t;
;;;3110   	temp_t=-20;
;;;3111   	if(makb[0]._cnt<5)
;;;3112   		{
;;;3113   		if(makb[0]._T_nd[0]==0)
;;;3114   			{
;;;3115   			temp_t=makb[0]._T[0];
;;;3116   			bat[0]._nd=0;
;;;3117   			}
;;;3118   		}
;;;3119   	if(makb[1]._cnt<5)
;;;3120   		{
;;;3121   		if(makb[1]._T_nd[0]==0)
;;;3122   			{
;;;3123   			if(temp_t<makb[1]._T[0])
;;;3124   				{
;;;3125   				bat[0]._nd=0;
;;;3126   				temp_t=makb[1]._T[0];
;;;3127   				}
;;;3128   			}
;;;3129   		}
;;;3130   	if(temp_t!=-20)bat[0]._Tb = temp_t;
;;;3131   
;;;3132    	temp_t=-20;
;;;3133   	if(makb[2]._cnt<5)
;;;3134   		{
;;;3135   		if(makb[2]._T_nd[0]==0)
;;;3136   			{
;;;3137   			temp_t=makb[2]._T[0];
;;;3138   			bat[1]._nd=0;
;;;3139   			}
;;;3140   		}
;;;3141   	if(makb[3]._cnt<5)
;;;3142   		{
;;;3143   		if(makb[3]._T_nd[0]==0)
;;;3144   			{
;;;3145   			if(temp_t<makb[3]._T[0])
;;;3146   				{
;;;3147   				bat[1]._nd=0;
;;;3148   				temp_t=makb[3]._T[0];
;;;3149   				}
;;;3150   			}
;;;3151   		}
;;;3152   	if(temp_t!=-20)bat[1]._Tb = temp_t;
;;;3153   	}
;;;3154   
;;;3155   #endif
;;;3156   
;;;3157   
;;;3158   //Напряжение нагрузки
;;;3159   temp_SL=(signed long)adc_buff_[2];
002d66  f9b71004          LDRSH    r1,[r7,#4]  ; adc_buff_
;;;3160   temp_SL*=Kuload;
002d6a  4899              LDR      r0,|L1.12240|
002d6c  f9b00000          LDRSH    r0,[r0,#0]  ; Kuload
002d70  fb01f000          MUL      r0,r1,r0
;;;3161   temp_SL/=2000L;
002d74  f44f64fa          MOV      r4,#0x7d0
002d78  fb90f0f4          SDIV     r0,r0,r4
;;;3162   load_U=(signed short)temp_SL;
002d7c  4c95              LDR      r4,|L1.12244|
002d7e  8020              STRH     r0,[r4,#0]
;;;3163   
;;;3164   #ifdef UKU_220 
;;;3165   //Напряжение нагрузки
;;;3166   temp_SL=(signed long)adc_buff_[2];
;;;3167   temp_SL*=Kuload;
;;;3168   temp_SL/=350L;
;;;3169   load_U=(signed short)temp_SL;
;;;3170   #endif
;;;3171   
;;;3172   #ifdef UKU_220_V2 
;;;3173   //Напряжение нагрузки
;;;3174   temp_SL=(signed long)adc_buff_[2];
;;;3175   temp_SL*=Kuload;
;;;3176   temp_SL/=350L;
;;;3177   load_U=(signed short)temp_SL;
;;;3178   #endif
;;;3179   
;;;3180   #ifdef UKU_220_IPS_TERMOKOMPENSAT
;;;3181   //Напряжение шины
;;;3182   temp_SL=(signed long)adc_buff_[1];
002d80  f9b78002          LDRSH    r8,[r7,#2]  ; adc_buff_
;;;3183   temp_SL*=Kuout;
002d84  4894              LDR      r0,|L1.12248|
002d86  f9b00000          LDRSH    r0,[r0,#0]  ; Kuout
002d8a  fb08f800          MUL      r8,r8,r0
;;;3184   if(AUSW_MAIN==22010)temp_SL/=400L;
002d8e  488e              LDR      r0,|L1.12232|
002d90  f24554fa          MOV      r4,#0x55fa
002d94  f44f7bc8          MOV      r11,#0x190
002d98  8800              LDRH     r0,[r0,#0]  ; AUSW_MAIN
002d9a  42a0              CMP      r0,r4
002d9c  d102              BNE      |L1.11684|
002d9e  fb98f8fb          SDIV     r8,r8,r11
002da2  e003              B        |L1.11692|
                  |L1.11684|
;;;3185   else temp_SL/=500L;
002da4  f44f7efa          MOV      lr,#0x1f4
002da8  fb98f8fe          SDIV     r8,r8,lr
                  |L1.11692|
;;;3186   out_U=(signed short)temp_SL;
002dac  f8dfe22c          LDR      lr,|L1.12252|
002db0  fa0ff888          SXTH     r8,r8
002db4  f8ae8000          STRH     r8,[lr,#0]
;;;3187   load_U=out_U;
002db8  f8dfe218          LDR      lr,|L1.12244|
002dbc  f8ae8000          STRH     r8,[lr,#0]
;;;3188   
;;;3189   //Напряжение выпрямителей
;;;3190   temp_SL=(signed long)adc_buff_[2];
;;;3191   temp_SL*=Kubps;
002dc0  4f87              LDR      r7,|L1.12256|
002dc2  f9b77000          LDRSH    r7,[r7,#0]  ; Kubps
002dc6  fb01f107          MUL      r1,r1,r7
;;;3192   if(AUSW_MAIN==22010)temp_SL/=400L;
002dca  d102              BNE      |L1.11730|
002dcc  fb91f1fb          SDIV     r1,r1,r11
002dd0  e003              B        |L1.11738|
                  |L1.11730|
;;;3193   else temp_SL/=500L;
002dd2  f44f74fa          MOV      r4,#0x1f4
002dd6  fb91f1f4          SDIV     r1,r1,r4
                  |L1.11738|
;;;3194   bps_U=(signed short)temp_SL;
002dda  4c82              LDR      r4,|L1.12260|
002ddc  b209              SXTH     r1,r1
002dde  8021              STRH     r1,[r4,#0]
;;;3195   
;;;3196   if(bps_U<100)
002de0  2964              CMP      r1,#0x64
002de2  da19              BGE      |L1.11800|
;;;3197   	{
;;;3198   	char i;
;;;3199   	for(i=0;i<NUMIST;i++)
002de4  f04f0100          MOV      r1,#0
002de8  46a6              MOV      lr,r4                 ;3194
002dea  4c7f              LDR      r4,|L1.12264|
002dec  f9b4b000          LDRSH    r11,[r4,#0]
002df0  e010              B        |L1.11796|
                  |L1.11762|
;;;3200   		{
;;;3201   		if(bps[i]._Uin>bps_U)bps_U=bps[i]._Uin;
002df2  eb0104c1          ADD      r4,r1,r1,LSL #3
002df6  eb041701          ADD      r7,r4,r1,LSL #4
002dfa  4c7c              LDR      r4,|L1.12268|
002dfc  eb040487          ADD      r4,r4,r7,LSL #2
002e00  f9be7000          LDRSH    r7,[lr,#0]  ; bps_U
002e04  6a24              LDR      r4,[r4,#0x20]
002e06  42bc              CMP      r4,r7
002e08  dd01              BLE      |L1.11790|
002e0a  f8ae4000          STRH     r4,[lr,#0]
                  |L1.11790|
002e0e  f1010101          ADD      r1,r1,#1              ;3199
002e12  b2c9              UXTB     r1,r1                 ;3199
                  |L1.11796|
002e14  4559              CMP      r1,r11                ;3199
002e16  dbec              BLT      |L1.11762|
                  |L1.11800|
;;;3202   		}
;;;3203   	}
;;;3204   
;;;3205   //Суммарный ток выпрямителей
;;;3206   temp_SL=0;
002e18  f04f0b00          MOV      r11,#0
;;;3207   for (i=0;i<NUMIST;i++)
002e1c  4659              MOV      r1,r11
002e1e  4c72              LDR      r4,|L1.12264|
002e20  f9b47000          LDRSH    r7,[r4,#0]            ;3199
002e24  4c71              LDR      r4,|L1.12268|
002e26  e00b              B        |L1.11840|
                  |L1.11816|
;;;3208   	{
;;;3209   	temp_SL+=((signed long)bps[i]._Ii);
002e28  eb010ec1          ADD      lr,r1,r1,LSL #3
002e2c  eb0e1e01          ADD      lr,lr,r1,LSL #4
002e30  eb040e8e          ADD      lr,r4,lr,LSL #2
002e34  f8dee024          LDR      lr,[lr,#0x24]
002e38  44f3              ADD      r11,r11,lr
002e3a  f1010101          ADD      r1,r1,#1              ;3207
002e3e  b2c9              UXTB     r1,r1                 ;3207
                  |L1.11840|
002e40  42b9              CMP      r1,r7                 ;3207
002e42  dbf1              BLT      |L1.11816|
;;;3210   	}
;;;3211   bps_I=(signed short)temp_SL;
002e44  496a              LDR      r1,|L1.12272|
002e46  f8a1b000          STRH     r11,[r1,#0]
;;;3212   
;;;3213   
;;;3214   #endif
;;;3215   
;;;3216   
;;;3217   #ifdef UKU_KONTUR
;;;3218   //Внешний датчик температуры №1(температура внешнего воздуха)
;;;3219   if((adc_buff_[5]>800)&&(adc_buff_[5]<3800))ND_EXT[0]=0;
;;;3220   else ND_EXT[0]=1;
;;;3221   temp_SL=(signed long)adc_buff_[5];
;;;3222   temp_SL*=Ktext[0];
;;;3223   temp_SL/=20000L;
;;;3224   temp_SL-=273L;
;;;3225   t_ext[0]=(signed short)temp_SL;
;;;3226   #else 
;;;3227   //Внешний датчик температуры №1(температура внешнего воздуха)
;;;3228   if((adc_buff_[5]>800)&&(adc_buff_[5]<3800))ND_EXT[0]=0;
002e4a  4958              LDR      r1,|L1.12204|
002e4c  f6403ab7          MOV      r10,#0xbb7
002e50  f9b1b00a          LDRSH    r11,[r1,#0xa]  ; adc_buff_
002e54  4967              LDR      r1,|L1.12276|
002e56  f2ab3e21          SUB      lr,r11,#0x321
002e5a  f8cde010          STR      lr,[sp,#0x10]
002e5e  45d6              CMP      lr,r10
002e60  d201              BCS      |L1.11878|
002e62  700b              STRB     r3,[r1,#0]
002e64  e000              B        |L1.11880|
                  |L1.11878|
;;;3229   else ND_EXT[0]=1;
002e66  700a              STRB     r2,[r1,#0]
                  |L1.11880|
;;;3230   temp_SL=(signed long)adc_buff_[5];
;;;3231   temp_SL*=Ktext[0];
002e68  f8dfa18c          LDR      r10,|L1.12280|
002e6c  f9baa000          LDRSH    r10,[r10,#0]  ; Ktext
002e70  f8cda00c          STR      r10,[sp,#0xc]
002e74  fb0afa0b          MUL      r10,r10,r11
;;;3232   temp_SL/=20000L;
002e78  f6446e20          MOV      lr,#0x4e20
002e7c  fb9afafe          SDIV     r10,r10,lr
;;;3233   temp_SL-=273L;
002e80  f2aa1a11          SUB      r10,r10,#0x111
;;;3234   t_ext[0]=(signed short)temp_SL;
002e84  f8dfe174          LDR      lr,|L1.12284|
002e88  f8aea000          STRH     r10,[lr,#0]
;;;3235   /*
;;;3236   if((adc_buff_[6]>800)&&(adc_buff_[6]<3800))ND_EXT[1]=0;
;;;3237   else ND_EXT[1]=1;
;;;3238   temp_SL=(signed long)adc_buff_[6];
;;;3239   temp_SL*=Ktext[1];
;;;3240   temp_SL/=20000L;
;;;3241   temp_SL-=273L;
;;;3242   t_ext[1]=(signed short)temp_SL;	*/
;;;3243   #endif
;;;3244   
;;;3245   #ifdef UKU_220
;;;3246   
;;;3247   //Внешний датчик температуры №2(температура отсека ЭПУ)
;;;3248   if((adc_buff_[3]>800)&&(adc_buff_[3]<3800))ND_EXT[1]=0;
;;;3249   else ND_EXT[1]=1;
;;;3250   temp_SL=(signed long)adc_buff_[3];
;;;3251   temp_SL*=Ktext[1];
;;;3252   temp_SL/=20000L;
;;;3253   temp_SL-=273L;
;;;3254   t_ext[1]=(signed short)temp_SL;
;;;3255   
;;;3256   //Внешний датчик температуры №3(температура отсека MSAN)
;;;3257   if((adc_buff_[10]>800)&&(adc_buff_[10]<3800))ND_EXT[2]=0;
;;;3258   else ND_EXT[2]=1;
;;;3259   temp_SL=(signed long)adc_buff_[10];
;;;3260   temp_SL*=Ktext[2];
;;;3261   temp_SL/=20000L;
;;;3262   temp_SL-=273L;
;;;3263   t_ext[2]=(signed short)temp_SL;
;;;3264   
;;;3265   #else
;;;3266   
;;;3267   
;;;3268   #ifdef UKU_220_IPS_TERMOKOMPENSAT
;;;3269   
;;;3270   //Внешний датчик температуры 
;;;3271   if((adc_buff_[6]>800)&&(adc_buff_[6]<3800))ND_EXT[0]=0;
002e8c  f8dda014          LDR      r10,[sp,#0x14]
002e90  f6403eb7          MOV      lr,#0xbb7
002e94  45f2              CMP      r10,lr
002e96  d201              BCS      |L1.11932|
002e98  700b              STRB     r3,[r1,#0]
002e9a  e000              B        |L1.11934|
                  |L1.11932|
;;;3272   else ND_EXT[0]=1;
002e9c  700a              STRB     r2,[r1,#0]
                  |L1.11934|
;;;3273   temp_SL=(signed long)adc_buff_[6];
;;;3274   temp_SL*=Ktext[0];
002e9e  f8dda00c          LDR      r10,[sp,#0xc]
002ea2  fb0afa09          MUL      r10,r10,r9
;;;3275   temp_SL/=20000L;
002ea6  f6446920          MOV      r9,#0x4e20
002eaa  fb9af9f9          SDIV     r9,r10,r9
;;;3276   temp_SL-=273L;
002eae  f2a91911          SUB      r9,r9,#0x111
;;;3277   t_ext[0]=(signed short)temp_SL;
002eb2  f8dfe148          LDR      lr,|L1.12284|
002eb6  f8ae9000          STRH     r9,[lr,#0]
;;;3278   
;;;3279   //Внешний датчик температуры №2
;;;3280   if((adc_buff_[5]>800)&&(adc_buff_[5]<3800))ND_EXT[1]=0;
002eba  f8dd9010          LDR      r9,[sp,#0x10]
002ebe  f6403ab7          MOV      r10,#0xbb7
002ec2  45d1              CMP      r9,r10
002ec4  d201              BCS      |L1.11978|
002ec6  704b              STRB     r3,[r1,#1]
002ec8  e000              B        |L1.11980|
                  |L1.11978|
;;;3281   else ND_EXT[1]=1;
002eca  704a              STRB     r2,[r1,#1]
                  |L1.11980|
;;;3282   temp_SL=(signed long)adc_buff_[5];
;;;3283   temp_SL*=Ktext[1];
002ecc  4a4a              LDR      r2,|L1.12280|
002ece  f9b22002          LDRSH    r2,[r2,#2]  ; Ktext
002ed2  fb02f20b          MUL      r2,r2,r11
;;;3284   temp_SL/=20000L;
002ed6  f6446920          MOV      r9,#0x4e20
002eda  fb92f2f9          SDIV     r2,r2,r9
;;;3285   temp_SL-=273L;
002ede  f2a21211          SUB      r2,r2,#0x111
;;;3286   t_ext[1]=(signed short)temp_SL;
002ee2  fa0ffa82          SXTH     r10,r2
002ee6  4a45              LDR      r2,|L1.12284|
002ee8  f8a2a002          STRH     r10,[r2,#2]
;;;3287   #else
;;;3288   
;;;3289   
;;;3290   
;;;3291   //Внешний датчик температуры №2(температура отсека ЭПУ)
;;;3292   if((adc_buff_[6]>800)&&(adc_buff_[6]<3800))ND_EXT[1]=0;
;;;3293   else ND_EXT[1]=1;
;;;3294   temp_SL=(signed long)adc_buff_[6];
;;;3295   temp_SL*=Ktext[1];
;;;3296   temp_SL/=20000L;
;;;3297   temp_SL-=273L;
;;;3298   t_ext[1]=(signed short)temp_SL;
;;;3299   
;;;3300   //Внешний датчик температуры №3(температура отсека MSAN)
;;;3301   if((adc_buff_[3]>800)&&(adc_buff_[3]<3800))ND_EXT[2]=0;
;;;3302   else ND_EXT[2]=1;
;;;3303   temp_SL=(signed long)adc_buff_[3];
;;;3304   temp_SL*=Ktext[2];
;;;3305   temp_SL/=20000L;
;;;3306   temp_SL-=273L;
;;;3307   t_ext[2]=(signed short)temp_SL;
;;;3308   
;;;3309   #endif
;;;3310   #endif
;;;3311   
;;;3312   #ifdef UKU_220_V2
;;;3313   
;;;3314   //Внешний датчик температуры №2(температура отсека ЭПУ)
;;;3315   if((adc_buff_[3]>800)&&(adc_buff_[3]<3800))ND_EXT[1]=0;
;;;3316   else ND_EXT[1]=1;
;;;3317   temp_SL=(signed long)adc_buff_[3];
;;;3318   temp_SL*=Ktext[1];
;;;3319   temp_SL/=20000L;
;;;3320   temp_SL-=273L;
;;;3321   t_ext[1]=(signed short)temp_SL;
;;;3322   
;;;3323   //Внешний датчик температуры №3(температура отсека MSAN)
;;;3324   if((adc_buff_[10]>800)&&(adc_buff_[10]<3800))ND_EXT[2]=0;
;;;3325   else ND_EXT[2]=1;
;;;3326   temp_SL=(signed long)adc_buff_[10];
;;;3327   temp_SL*=Ktext[2];
;;;3328   temp_SL/=20000L;
;;;3329   temp_SL-=273L;
;;;3330   t_ext[2]=(signed short)temp_SL;
;;;3331   
;;;3332   #else
;;;3333   
;;;3334   #ifdef UKU_220_IPS_TERMOKOMPENSAT
;;;3335   //Ток батареи
;;;3336   if(bps[8]._device==dIBAT_METR)
002eec  f8942320          LDRB     r2,[r4,#0x320]  ; bps
;;;3337   	{
;;;3338   	ibat_metr_buff_[0]=((signed long)bps[8]._buff[0])+(((signed long)bps[8]._buff[1])<<8);
;;;3339   	ibat_metr_buff_[1]=((signed long)bps[8]._buff[2])+(((signed long)bps[8]._buff[3])<<8);
;;;3340   	bIBAT_SMKLBR=((signed short)bps[8]._buff[4])+(((signed short)bps[8]._buff[5])<<8);
;;;3341   	if(bIBAT_SMKLBR) bIBAT_SMKLBR_cnt=50;
;;;3342   	if(!bIBAT_SMKLBR)
;;;3343   		{
;;;3344   		signed long temp_SL;
;;;3345   		temp_SL=(signed long)ibat_metr_buff_[0];
;;;3346   		temp_SL-=(signed long)ibat_metr_buff_[1];
;;;3347   		temp_SL*=(signed long)Kibat1[0];
;;;3348   		if((AUSW_MAIN==22010)||(AUSW_MAIN==22011)||(AUSW_MAIN==22035)||(AUSW_MAIN==22033)||(AUSW_MAIN==22063)||(AUSW_MAIN==22023)||(AUSW_MAIN==22043)||(AUSW_MAIN==22044))temp_SL/=2000L;
;;;3349   	
;;;3350   		Ib_ips_termokompensat =(signed short)temp_SL;
002ef0  f8df910c          LDR      r9,|L1.12288|
002ef4  2a09              CMP      r2,#9                 ;3336
002ef6  d14e              BNE      |L1.12182|
002ef8  f8942326          LDRB     r2,[r4,#0x326]        ;3338  ; bps
002efc  f894b327          LDRB     r11,[r4,#0x327]       ;3338  ; bps
002f00  f8dfe100          LDR      lr,|L1.12292|
002f04  eb02220b          ADD      r2,r2,r11,LSL #8      ;3338
002f08  f8ce2000          STR      r2,[lr,#0]            ;3338  ; ibat_metr_buff_
002f0c  9202              STR      r2,[sp,#8]            ;3338
002f0e  f8942328          LDRB     r2,[r4,#0x328]        ;3339  ; bps
002f12  f894b329          LDRB     r11,[r4,#0x329]       ;3339  ; bps
002f16  eb02220b          ADD      r2,r2,r11,LSL #8      ;3339
002f1a  f8ce2004          STR      r2,[lr,#4]            ;3339  ; ibat_metr_buff_
002f1e  f894b32a          LDRB     r11,[r4,#0x32a]       ;3340  ; bps
002f22  f894e32b          LDRB     lr,[r4,#0x32b]        ;3340  ; bps
002f26  eb0b2b0e          ADD      r11,r11,lr,LSL #8     ;3340
002f2a  f8dfe0dc          LDR      lr,|L1.12296|
002f2e  fa0ffb8b          SXTH     r11,r11               ;3340
002f32  f8aeb000          STRH     r11,[lr,#0]           ;3340
002f36  f1bb0f00          CMP      r11,#0                ;3341
002f3a  d005              BEQ      |L1.12104|
002f3c  f8dfb0cc          LDR      r11,|L1.12300|
002f40  f04f0e32          MOV      lr,#0x32              ;3341
002f44  f8abe000          STRH     lr,[r11,#0]           ;3341
                  |L1.12104|
002f48  d174              BNE      |L1.12340|
002f4a  f8ddb008          LDR      r11,[sp,#8]           ;3345
002f4e  ebab0b02          SUB      r11,r11,r2            ;3346
002f52  4a1c              LDR      r2,|L1.12228|
002f54  f9b22000          LDRSH    r2,[r2,#0]            ;3347  ; Kibat1
002f58  fb02f20b          MUL      r2,r2,r11             ;3347
002f5c  f5a04ba8          SUB      r11,r0,#0x5400        ;3348
002f60  f5bb7bfd          SUBS     r11,r11,#0x1fa        ;3348
002f64  d00f              BEQ      |L1.12166|
002f66  f1bb0b01          SUBS     r11,r11,#1            ;3348
002f6a  d00c              BEQ      |L1.12166|
002f6c  4560              CMP      r0,r12                ;3348
002f6e  d00a              BEQ      |L1.12166|
002f70  42a8              CMP      r0,r5                 ;3348
002f72  d008              BEQ      |L1.12166|
002f74  f1bb0534          SUBS     r5,r11,#0x34          ;3348
002f78  d005              BEQ      |L1.12166|
002f7a  3528              ADDS     r5,r5,#0x28           ;3348
002f7c  d003              BEQ      |L1.12166|
002f7e  3d14              SUBS     r5,r5,#0x14           ;3348
002f80  d001              BEQ      |L1.12166|
002f82  1e6d              SUBS     r5,r5,#1              ;3348
002f84  d103              BNE      |L1.12174|
                  |L1.12166|
002f86  f44f65fa          MOV      r5,#0x7d0             ;3348
002f8a  fb92f2f5          SDIV     r2,r2,r5              ;3348
                  |L1.12174|
002f8e  b215              SXTH     r5,r2
002f90  f8a95000          STRH     r5,[r9,#0]
;;;3351   		if(bIBAT_SMKLBR_cnt)
002f94  e03c              B        |L1.12304|
                  |L1.12182|
002f96  e04d              B        |L1.12340|
                  |L1.12184|
                          DCD      net_U
                  |L1.12188|
                          DCD      Kunet
                  |L1.12192|
                          DCD      ||area_number.25||
                  |L1.12196|
                          DCD      net_F
                  |L1.12200|
                          DCD      net_F3
                  |L1.12204|
                          DCD      ||.bss||+0x40c
                  |L1.12208|
                          DCD      Kubat
                  |L1.12212|
                          DCD      bat
                  |L1.12216|
                          DCD      Kubatm
                  |L1.12220|
                          DCD      ad7705_buff_
                  |L1.12224|
                          DCD      Kibat0
                  |L1.12228|
                          DCD      Kibat1
                  |L1.12232|
                          DCD      AUSW_MAIN
                  |L1.12236|
                          DCD      Ktbat
                  |L1.12240|
                          DCD      Kuload
                  |L1.12244|
                          DCD      load_U
                  |L1.12248|
                          DCD      Kuout
                  |L1.12252|
                          DCD      out_U
                  |L1.12256|
                          DCD      Kubps
                  |L1.12260|
                          DCD      bps_U
                  |L1.12264|
                          DCD      NUMIST
                  |L1.12268|
                          DCD      bps
                  |L1.12272|
                          DCD      bps_I
                  |L1.12276|
                          DCD      ND_EXT
                  |L1.12280|
                          DCD      Ktext
                  |L1.12284|
                          DCD      t_ext
                  |L1.12288|
                          DCD      Ib_ips_termokompensat
                  |L1.12292|
                          DCD      ibat_metr_buff_
                  |L1.12296|
                          DCD      bIBAT_SMKLBR
                  |L1.12300|
                          DCD      bIBAT_SMKLBR_cnt
                  |L1.12304|
003010  f8dfc418          LDR      r12,|L1.13356|
;;;3352   			{
;;;3353   			bIBAT_SMKLBR_cnt--;
;;;3354   			Ib_ips_termokompensat=Ib_ips_termokompensat_temp;
003014  f8dfb418          LDR      r11,|L1.13360|
003018  f9bc2000          LDRSH    r2,[r12,#0]           ;3351  ; bIBAT_SMKLBR_cnt
00301c  b142              CBZ      r2,|L1.12336|
00301e  f1a20201          SUB      r2,r2,#1              ;3353
003022  f8ac2000          STRH     r2,[r12,#0]           ;3353
003026  f8bb2000          LDRH     r2,[r11,#0]  ; Ib_ips_termokompensat_temp
00302a  f8a92000          STRH     r2,[r9,#0]
00302e  e001              B        |L1.12340|
                  |L1.12336|
;;;3355   			}
;;;3356   		else 
;;;3357   			{
;;;3358   			Ib_ips_termokompensat_temp=Ib_ips_termokompensat;
003030  f8ab5000          STRH     r5,[r11,#0]
                  |L1.12340|
;;;3359   			}
;;;3360   		}
;;;3361   	}
;;;3362   
;;;3363   bat[0]._Ub=load_U;
003034  4aff              LDR      r2,|L1.13364|
003036  f8a28002          STRH     r8,[r2,#2]
00303a  f8cd8004          STR      r8,[sp,#4]
;;;3364   if(AUSW_MAIN==22018) Ib_ips_termokompensat=bat[0]._Ib;
00303e  f5a045ac          SUB      r5,r0,#0x5600
003042  3d02              SUBS     r5,#2
003044  d103              BNE      |L1.12366|
003046  8910              LDRH     r0,[r2,#8]  ; bat
003048  f8a90000          STRH     r0,[r9,#0]
00304c  e002              B        |L1.12372|
                  |L1.12366|
;;;3365   else bat[0]._Ib=Ib_ips_termokompensat;
00304e  f8b90000          LDRH     r0,[r9,#0]  ; Ib_ips_termokompensat
003052  8110              STRH     r0,[r2,#8]
                  |L1.12372|
;;;3366   
;;;3367   #endif
;;;3368   #endif
;;;3369   
;;;3370   
;;;3371   #ifdef UKU_TELECORE2015
;;;3372   
;;;3373   //Внешний датчик температуры №1
;;;3374   if((adc_buff_[7]>800)&&(adc_buff_[7]<3800))ND_EXT[0]=0;
;;;3375   else ND_EXT[0]=1;
;;;3376   temp_SL=(signed long)adc_buff_[7];
;;;3377   temp_SL*=Ktext[0];
;;;3378   temp_SL/=20000L;
;;;3379   temp_SL-=273L;
;;;3380   t_ext[0]=(signed short)temp_SL;
;;;3381   
;;;3382   
;;;3383   //Внешний датчик температуры №2
;;;3384   if((adc_buff_[6]>800)&&(adc_buff_[6]<3800))ND_EXT[1]=0;
;;;3385   else ND_EXT[1]=1;
;;;3386   temp_SL=(signed long)adc_buff_[6];
;;;3387   temp_SL*=Ktext[1];
;;;3388   temp_SL/=20000L;
;;;3389   temp_SL-=273L;
;;;3390   t_ext[1]=(signed short)temp_SL;
;;;3391   
;;;3392   #endif
;;;3393   
;;;3394   #ifdef UKU_TELECORE2017
;;;3395   
;;;3396   //Внешний датчик температуры №1
;;;3397   if((adc_buff_[7]>800)&&(adc_buff_[7]<3800))ND_EXT[0]=0;
;;;3398   else ND_EXT[0]=1;
;;;3399   temp_SL=(signed long)adc_buff_[7];
;;;3400   temp_SL*=Ktext[0];
;;;3401   temp_SL/=20000L;
;;;3402   temp_SL-=273L;
;;;3403   t_ext[0]=(signed short)temp_SL;
;;;3404   
;;;3405   
;;;3406   //Внешний датчик температуры №2
;;;3407   if((adc_buff_[6]>800)&&(adc_buff_[6]<3800))ND_EXT[1]=0;
;;;3408   else ND_EXT[1]=1;
;;;3409   temp_SL=(signed long)adc_buff_[6];
;;;3410   temp_SL*=Ktext[1];
;;;3411   temp_SL/=20000L;
;;;3412   temp_SL-=273L;
;;;3413   t_ext[1]=(signed short)temp_SL;
;;;3414   
;;;3415   #endif
;;;3416   
;;;3417   //напряжение ввода
;;;3418   temp_SL=(signed long)adc_buff_ext_[0];
003054  f8dfc3e0          LDR      r12,|L1.13368|
003058  f8bc5000          LDRH     r5,[r12,#0]  ; adc_buff_ext_
;;;3419   temp_SL*=Kunet_ext[0];
00305c  f8df83dc          LDR      r8,|L1.13372|
003060  f9b80000          LDRSH    r0,[r8,#0]  ; Kunet_ext
003064  4368              MULS     r0,r5,r0
;;;3420   temp_SL/=4000L;
003066  f44f6b7a          MOV      r11,#0xfa0
00306a  fb90f0fb          SDIV     r0,r0,r11
;;;3421   Uvv[0]=(signed short)temp_SL;
00306e  4df4              LDR      r5,|L1.13376|
003070  b280              UXTH     r0,r0
003072  8028              STRH     r0,[r5,#0]
;;;3422   if(Uvv[0]<100) Uvv0=Uvv[0];
003074  f8dfe3cc          LDR      lr,|L1.13380|
003078  2864              CMP      r0,#0x64
00307a  d202              BCS      |L1.12418|
00307c  f8ae0000          STRH     r0,[lr,#0]
003080  e003              B        |L1.12426|
                  |L1.12418|
;;;3423   else Uvv0=net_U;
003082  48f1              LDR      r0,|L1.13384|
003084  8800              LDRH     r0,[r0,#0]  ; net_U
003086  f8ae0000          STRH     r0,[lr,#0]
                  |L1.12426|
;;;3424   
;;;3425   //напряжение пэс
;;;3426   temp_SL=(signed long)adc_buff_ext_[1];
00308a  f8bcc002          LDRH     r12,[r12,#2]  ; adc_buff_ext_
;;;3427   temp_SL*=Kunet_ext[1];
00308e  f9b80002          LDRSH    r0,[r8,#2]  ; Kunet_ext
003092  fb00f00c          MUL      r0,r0,r12
;;;3428   temp_SL/=4000L;
003096  fb90f0fb          SDIV     r0,r0,r11
;;;3429   Uvv[1]=(signed short)temp_SL;
00309a  8068              STRH     r0,[r5,#2]
;;;3430   
;;;3431   
;;;3432   //напряжение ввода трехфазное
;;;3433   temp_SL=(signed long)eb2_data_short[0];
00309c  4deb              LDR      r5,|L1.13388|
00309e  f9b50000          LDRSH    r0,[r5,#0]  ; eb2_data_short
;;;3434   temp_SL*=Kvv_eb2[0];
0030a2  f8dfc3ac          LDR      r12,|L1.13392|
0030a6  f9bc8000          LDRSH    r8,[r12,#0]  ; Kvv_eb2
0030aa  fb08f800          MUL      r8,r8,r0
;;;3435   temp_SL/=6000L;
0030ae  f2417070          MOV      r0,#0x1770
0030b2  fb98fbf0          SDIV     r11,r8,r0
;;;3436   Uvv_eb2[0]=(signed short)temp_SL;
0030b6  f8df839c          LDR      r8,|L1.13396|
0030ba  f8a8b000          STRH     r11,[r8,#0]
;;;3437   
;;;3438   temp_SL=(signed long)eb2_data_short[1];
0030be  f9b5b002          LDRSH    r11,[r5,#2]  ; eb2_data_short
;;;3439   temp_SL*=Kvv_eb2[1];
0030c2  f9bce002          LDRSH    lr,[r12,#2]  ; Kvv_eb2
0030c6  fb0efe0b          MUL      lr,lr,r11
;;;3440   temp_SL/=6000L;
0030ca  fb9efbf0          SDIV     r11,lr,r0
;;;3441   Uvv_eb2[1]=(signed short)temp_SL;
0030ce  f8a8b002          STRH     r11,[r8,#2]
;;;3442   
;;;3443   temp_SL=(signed long)eb2_data_short[2];
0030d2  f9b5b004          LDRSH    r11,[r5,#4]  ; eb2_data_short
;;;3444   temp_SL*=Kvv_eb2[2];
0030d6  f9bcc004          LDRSH    r12,[r12,#4]  ; Kvv_eb2
0030da  fb0cfc0b          MUL      r12,r12,r11
;;;3445   temp_SL/=6000L;
0030de  fb9cfcf0          SDIV     r12,r12,r0
;;;3446   Uvv_eb2[2]=(signed short)temp_SL;
0030e2  f8a8c004          STRH     r12,[r8,#4]
;;;3447   
;;;3448   //напряжение пэс трехфазное
;;;3449   temp_SL=(signed long)eb2_data_short[3];
0030e6  f9b5b006          LDRSH    r11,[r5,#6]  ; eb2_data_short
;;;3450   temp_SL*=Kpes_eb2[0];
0030ea  f8dfc36c          LDR      r12,|L1.13400|
0030ee  f9bc8000          LDRSH    r8,[r12,#0]  ; Kpes_eb2
0030f2  fb08f80b          MUL      r8,r8,r11
;;;3451   temp_SL/=6000L;
0030f6  fb98fbf0          SDIV     r11,r8,r0
;;;3452   Upes_eb2[0]=(signed short)temp_SL;
0030fa  f8df8360          LDR      r8,|L1.13404|
0030fe  f8a8b000          STRH     r11,[r8,#0]
;;;3453   
;;;3454   temp_SL=(signed long)eb2_data_short[4];
003102  f9b5b008          LDRSH    r11,[r5,#8]  ; eb2_data_short
;;;3455   temp_SL*=Kpes_eb2[1];
003106  f9bce002          LDRSH    lr,[r12,#2]  ; Kpes_eb2
00310a  fb0efe0b          MUL      lr,lr,r11
;;;3456   temp_SL/=6000L;
00310e  fb9efbf0          SDIV     r11,lr,r0
;;;3457   Upes_eb2[1]=(signed short)temp_SL;
003112  f8a8b002          STRH     r11,[r8,#2]
;;;3458   
;;;3459   temp_SL=(signed long)eb2_data_short[5];
003116  f9b5b00a          LDRSH    r11,[r5,#0xa]  ; eb2_data_short
;;;3460   temp_SL*=Kpes_eb2[2];
00311a  f9bc5004          LDRSH    r5,[r12,#4]  ; Kpes_eb2
00311e  fb05f50b          MUL      r5,r5,r11
;;;3461   temp_SL/=6000L;
003122  fb95f0f0          SDIV     r0,r5,r0
;;;3462   Upes_eb2[2]=(signed short)temp_SL;
003126  f8a80004          STRH     r0,[r8,#4]
;;;3463   
;;;3464   //Вычисление температуры шкафа
;;;3465   
;;;3466   ibt._T[0]=t_ext[1]+273;
00312a  f20a1a11          ADD      r10,r10,#0x111
00312e  fa0ffc8a          SXTH     r12,r10
003132  f8dfa330          LDR      r10,|L1.13412|
003136  48ca              LDR      r0,|L1.13408|
003138  f8aac000          STRH     r12,[r10,#0]
;;;3467   ibt._T[1]=t_ext[2]+273;
00313c  8880              LDRH     r0,[r0,#4]  ; t_ext
00313e  f2001011          ADD      r0,r0,#0x111
003142  fa0ff880          SXTH     r8,r0
003146  f8aa8002          STRH     r8,[r10,#2]
;;;3468   
;;;3469   ibt._nd[0]=ND_EXT[1];
00314a  784d              LDRB     r5,[r1,#1]  ; ND_EXT
00314c  f88a5008          STRB     r5,[r10,#8]
;;;3470   ibt._nd[1]=ND_EXT[2];
003150  7888              LDRB     r0,[r1,#2]  ; ND_EXT
003152  f88a0009          STRB     r0,[r10,#9]
;;;3471   
;;;3472   #ifndef UKU_TELECORE2015
;;;3473   if((ibt._nd[0]==0) &&  (ibt._nd[1]==0))
;;;3474   	{
;;;3475   	t_box=((ibt._T[0]+ibt._T[1])/2)-273;
003156  49c4              LDR      r1,|L1.13416|
003158  b905              CBNZ     r5,|L1.12636|
00315a  b110              CBZ      r0,|L1.12642|
                  |L1.12636|
;;;3476   	}
;;;3477   else if((ibt._nd[0]==1) &&  (ibt._nd[1]==0))
00315c  2d01              CMP      r5,#1
00315e  d00a              BEQ      |L1.12662|
003160  e00a              B        |L1.12664|
                  |L1.12642|
003162  eb0c0008          ADD      r0,r12,r8             ;3475
003166  eb0075d0          ADD      r5,r0,r0,LSR #31      ;3475
00316a  f46f7088          MVN      r0,#0x110             ;3475
00316e  eb000065          ADD      r0,r0,r5,ASR #1       ;3475
003172  8008              STRH     r0,[r1,#0]            ;3475
003174  e01e              B        |L1.12724|
                  |L1.12662|
003176  b108              CBZ      r0,|L1.12668|
                  |L1.12664|
;;;3478   	{
;;;3479   	t_box=ibt._T[1]-273;
;;;3480   	}
;;;3481   else if((ibt._nd[0]==0) &&  (ibt._nd[1]==1))
003178  b12d              CBZ      r5,|L1.12678|
00317a  e006              B        |L1.12682|
                  |L1.12668|
00317c  f2a81811          SUB      r8,r8,#0x111          ;3479
003180  f8a18000          STRH     r8,[r1,#0]            ;3479
003184  e016              B        |L1.12724|
                  |L1.12678|
003186  2801              CMP      r0,#1
003188  d002              BEQ      |L1.12688|
                  |L1.12682|
;;;3482   	{
;;;3483   	t_box=ibt._T[0]-273;
;;;3484   	}
;;;3485   else if((ibt._nd[0]==1) &&  (ibt._nd[1]==1))
00318a  2d01              CMP      r5,#1
00318c  d005              BEQ      |L1.12698|
00318e  e011              B        |L1.12724|
                  |L1.12688|
003190  f2ac1c11          SUB      r12,r12,#0x111        ;3483
003194  f8a1c000          STRH     r12,[r1,#0]           ;3483
003198  e00c              B        |L1.12724|
                  |L1.12698|
00319a  2801              CMP      r0,#1
00319c  d10a              BNE      |L1.12724|
;;;3486   	{
;;;3487   	if(t_ext_can_nd<5)t_box= t_ext_can;
00319e  48b3              LDR      r0,|L1.13420|
0031a0  7800              LDRB     r0,[r0,#0]  ; t_ext_can_nd
0031a2  2805              CMP      r0,#5
0031a4  d203              BCS      |L1.12718|
0031a6  48b2              LDR      r0,|L1.13424|
0031a8  8800              LDRH     r0,[r0,#0]  ; t_ext_can
0031aa  8008              STRH     r0,[r1,#0]
0031ac  e002              B        |L1.12724|
                  |L1.12718|
;;;3488   	else t_box=20;
0031ae  f04f0014          MOV      r0,#0x14
0031b2  8008              STRH     r0,[r1,#0]
                  |L1.12724|
;;;3489   	}
;;;3490   #endif
;;;3491   /*
;;;3492   //Вычисление температуры шкафа
;;;3493   
;;;3494   ibt._T[0]=bat[0]._Tb+273;
;;;3495   ibt._T[1]=bat[1]._Tb+273;
;;;3496   ibt._T[2]=t_ext[1]+273;
;;;3497   ibt._T[3]=t_ext[2]+273;
;;;3498   
;;;3499   ibt._nd[0]=bat[0]._nd;
;;;3500   ibt._nd[1]=bat[1]._nd;
;;;3501   ibt._nd[2]=ND_EXT[1];
;;;3502   ibt._nd[3]=ND_EXT[2];
;;;3503   
;;;3504   ibt._avg1=0;
;;;3505   ibt._avg_cnt=4;
;;;3506   
;;;3507   if(ibt._nd[0]==0)
;;;3508   	{
;;;3509   	ibt._avg1+=ibt._T[0];
;;;3510   	}
;;;3511   else 
;;;3512   	{
;;;3513   	ibt._avg_cnt--;
;;;3514   	}
;;;3515   
;;;3516   if(ibt._nd[1]==0)
;;;3517   	{
;;;3518   	ibt._avg1+=ibt._T[1];
;;;3519   	}
;;;3520   else 
;;;3521   	{
;;;3522   	ibt._avg_cnt--;
;;;3523   	}
;;;3524   
;;;3525   if(ibt._nd[2]==0)
;;;3526   	{
;;;3527   	ibt._avg1+=ibt._T[2];
;;;3528   	}
;;;3529   else 
;;;3530   	{
;;;3531   	ibt._avg_cnt--;
;;;3532   	}
;;;3533   
;;;3534   if(ibt._nd[3]==0)
;;;3535   	{
;;;3536   	ibt._avg1+=ibt._T[3];
;;;3537   	}
;;;3538   else 
;;;3539   	{
;;;3540   	ibt._avg_cnt--;
;;;3541   	}
;;;3542   
;;;3543   if(ibt._avg_cnt==0)
;;;3544   	{
;;;3545   	}
;;;3546   else
;;;3547   	{
;;;3548   	ibt._avg1/=ibt._avg_cnt;
;;;3549   	}
;;;3550   
;;;3551   
;;;3552   if(ibt._nd[0]!=0)
;;;3553   	{
;;;3554   	ibt._T_dispers[0]=0;
;;;3555   	}
;;;3556   else 
;;;3557   	{
;;;3558   	ibt._T_dispers[0]=abs(ibt._T[0]-ibt._avg1);
;;;3559   	}
;;;3560   
;;;3561   if(ibt._nd[1]!=0)
;;;3562   	{
;;;3563   	ibt._T_dispers[1]=0;
;;;3564   	}
;;;3565   else 
;;;3566   	{
;;;3567   	ibt._T_dispers[1]=abs(ibt._T[1]-ibt._avg1);
;;;3568   	}
;;;3569   
;;;3570   if(ibt._nd[2]!=0)
;;;3571   	{
;;;3572   	ibt._T_dispers[2]=0;
;;;3573   	}
;;;3574   else 
;;;3575   	{
;;;3576   	ibt._T_dispers[2]=abs(ibt._T[2]-ibt._avg1);
;;;3577   	}
;;;3578   
;;;3579   if(ibt._nd[3]!=0)
;;;3580   	{
;;;3581   	ibt._T_dispers[3]=0;
;;;3582   	}
;;;3583   else 
;;;3584   	{
;;;3585   	ibt._T_dispers[3]=abs(ibt._T[3]-ibt._avg1);
;;;3586   	}
;;;3587   
;;;3588   if(	ibt._nd[0]&&
;;;3589   	ibt._nd[1]&&
;;;3590   	ibt._nd[2]&&
;;;3591   	ibt._nd[3]
;;;3592   	)
;;;3593   	{
;;;3594   	t_box=(bps[0]._Ti);
;;;3595   	}
;;;3596   
;;;3597   else if(	ibt._nd[0]||
;;;3598   	ibt._nd[1]||
;;;3599   	ibt._nd[2]||
;;;3600   	ibt._nd[3]
;;;3601   	)
;;;3602   	{
;;;3603   	t_box=(ibt._avg1-273);
;;;3604   	}
;;;3605   else 
;;;3606   	{
;;;3607   	ibt._max_dispers_num=0;
;;;3608   	ibt._max_dispers=ibt._T_dispers[0];
;;;3609   
;;;3610   	if(ibt._T_dispers[1]>ibt._max_dispers)
;;;3611   		{
;;;3612   		ibt._max_dispers_num=1;
;;;3613   		ibt._max_dispers=ibt._T_dispers[1];
;;;3614   		}
;;;3615   	if(ibt._T_dispers[2]>ibt._max_dispers)
;;;3616   		{
;;;3617   		ibt._max_dispers_num=2;
;;;3618   		ibt._max_dispers=ibt._T_dispers[2];
;;;3619   		}
;;;3620   	if(ibt._T_dispers[3]>ibt._max_dispers)
;;;3621   		{
;;;3622   		ibt._max_dispers_num=3;
;;;3623   		ibt._max_dispers=ibt._T_dispers[3];
;;;3624   		}
;;;3625   
;;;3626   	ibt._avg2=0;
;;;3627   
;;;3628   	if(ibt._max_dispers_num!=0)
;;;3629   		{
;;;3630   		ibt._avg2+=ibt._T[0];
;;;3631   		}
;;;3632   	if(ibt._max_dispers_num!=1)
;;;3633   		{
;;;3634   		ibt._avg2+=ibt._T[1];
;;;3635   		}
;;;3636   	if(ibt._max_dispers_num!=2)
;;;3637   		{
;;;3638   		ibt._avg2+=ibt._T[2];
;;;3639   		}
;;;3640   	if(ibt._max_dispers_num!=3)
;;;3641   		{
;;;3642   		ibt._avg2+=ibt._T[3];
;;;3643   		}
;;;3644   
;;;3645   	t_box=(ibt._avg2/3)-273;
;;;3646   
;;;3647   	}*/
;;;3648   
;;;3649   
;;;3650   //*********************************************
;;;3651   
;;;3652   #ifndef TELECORE
;;;3653   if((BAT_IS_ON[0]==bisON)&&(bat[0]._Ub>200)) Ibmax=bat[0]._Ib;
0031b4  49af              LDR      r1,|L1.13428|
0031b6  7808              LDRB     r0,[r1,#0]  ; BAT_IS_ON
0031b8  2855              CMP      r0,#0x55
0031ba  d105              BNE      |L1.12744|
0031bc  9801              LDR      r0,[sp,#4]
0031be  28c8              CMP      r0,#0xc8
0031c0  dd02              BLE      |L1.12744|
0031c2  8910              LDRH     r0,[r2,#8]  ; bat
0031c4  f8a6004a          STRH     r0,[r6,#0x4a]
                  |L1.12744|
;;;3654   if((BAT_IS_ON[1]==bisON)&&(bat[1]._Ub>200)&&(bat[1]._Ib>bat[0]._Ib)) Ibmax=bat[1]._Ib;
0031c8  7848              LDRB     r0,[r1,#1]  ; BAT_IS_ON
0031ca  2855              CMP      r0,#0x55
0031cc  d10b              BNE      |L1.12774|
0031ce  f9b2004e          LDRSH    r0,[r2,#0x4e]  ; bat
0031d2  28c8              CMP      r0,#0xc8
0031d4  dd07              BLE      |L1.12774|
0031d6  f9b20054          LDRSH    r0,[r2,#0x54]  ; bat
0031da  f9b21008          LDRSH    r1,[r2,#8]  ; bat
0031de  4288              CMP      r0,r1
0031e0  dd01              BLE      |L1.12774|
0031e2  f8a6004a          STRH     r0,[r6,#0x4a]
                  |L1.12774|
;;;3655   #endif
;;;3656   
;;;3657   #ifdef TELECORE
;;;3658   Ibmax=0;
;;;3659   /*
;;;3660   if((NUMBAT_TELECORE>0)&&(lakb[0]._communicationFullErrorStat==0)&&(lakb[0]._ch_curr/10>Ibmax))Ibmax=lakb[0]._ch_curr/10;
;;;3661   if((NUMBAT_TELECORE>1)&&(lakb[1]._communicationFullErrorStat==0)&&(lakb[1]._ch_curr/10>Ibmax))Ibmax=lakb[1]._ch_curr/10;
;;;3662   if((NUMBAT_TELECORE>2)&&(lakb[2]._communicationFullErrorStat==0)&&(lakb[2]._ch_curr/10>Ibmax))Ibmax=lakb[2]._ch_curr/10;
;;;3663   */
;;;3664   if((NUMBAT_TELECORE>0)&&(bat[0]._Ib/10>Ibmax))Ibmax=bat[0]._Ib/10;
;;;3665   if((NUMBAT_TELECORE>1)&&(bat[1]._Ib/10>Ibmax))Ibmax=bat[1]._Ib/10;
;;;3666   //if((BAT_IS_ON[0]==bisON)&&(bat[0]._Ub>200)) Ibmax=bat[0]._Ib/1;
;;;3667   //if((BAT_IS_ON[1]==bisON)&&(bat[1]._Ub>200)&&(bat[1]._Ib>bat[0]._Ib)) Ibmax=bat[1]._Ib;
;;;3668   #endif
;;;3669   //Ibmax=bat[0]._Ib;
;;;3670   //if((AUSW_MAIN==22063)||(AUSW_MAIN==22023)||(AUSW_MAIN==22043))Ibmax=Ib_ips_termokompensat;
;;;3671   
;;;3672   #ifdef UKU_TELECORE2017
;;;3673   Ibmax=0;
;;;3674   if((NUMBAT_TELECORE>0)&&(bat[0]._Ib/10>Ibmax))Ibmax=bat[0]._Ib/10;
;;;3675   if((NUMBAT_TELECORE>1)&&(bat[1]._Ib/10>Ibmax))Ibmax=bat[1]._Ib/10;
;;;3676   #endif
;;;3677   
;;;3678   #ifdef UKU_220_IPS_TERMOKOMPENSAT
;;;3679   Ibmax=Ib_ips_termokompensat;
0031e6  f8b90000          LDRH     r0,[r9,#0]  ; Ib_ips_termokompensat
0031ea  f8a6004a          STRH     r0,[r6,#0x4a]
;;;3680   #endif
;;;3681   for(i=0;i<NUMIST;i++)
0031ee  f04f0100          MOV      r1,#0
0031f2  e02f              B        |L1.12884|
                  |L1.12788|
;;;3682   	{
;;;3683   	if(bps[i]._cnt<25)
0031f4  eb0100c1          ADD      r0,r1,r1,LSL #3
0031f8  eb001001          ADD      r0,r0,r1,LSL #4
0031fc  eb040080          ADD      r0,r4,r0,LSL #2
003200  78c5              LDRB     r5,[r0,#3]
003202  2d19              CMP      r5,#0x19
003204  d21c              BCS      |L1.12864|
;;;3684        	{
;;;3685        	bps[i]._Ii=bps[i]._buff[0]+(bps[i]._buff[1]*256);
003206  7985              LDRB     r5,[r0,#6]
003208  79c6              LDRB     r6,[r0,#7]
00320a  eb052506          ADD      r5,r5,r6,LSL #8
00320e  6245              STR      r5,[r0,#0x24]
;;;3686        	bps[i]._Uin=bps[i]._buff[2]+(bps[i]._buff[3]*256);
003210  7a05              LDRB     r5,[r0,#8]
003212  7a46              LDRB     r6,[r0,#9]
003214  eb052506          ADD      r5,r5,r6,LSL #8
003218  6205              STR      r5,[r0,#0x20]
;;;3687        	bps[i]._Uii=bps[i]._buff[4]+(bps[i]._buff[5]*256);
00321a  7a85              LDRB     r5,[r0,#0xa]
00321c  7ac6              LDRB     r6,[r0,#0xb]
00321e  eb052506          ADD      r5,r5,r6,LSL #8
003222  61c5              STR      r5,[r0,#0x1c]
;;;3688        	bps[i]._Ti=(signed)(bps[i]._buff[6]);
003224  7b05              LDRB     r5,[r0,#0xc]
003226  6285              STR      r5,[r0,#0x28]
;;;3689        	bps[i]._adr_ee=bps[i]._buff[7];
003228  7b45              LDRB     r5,[r0,#0xd]
00322a  f8805056          STRB     r5,[r0,#0x56]
;;;3690        	bps[i]._flags_tm=bps[i]._buff[8];
00322e  7b85              LDRB     r5,[r0,#0xe]
003230  f8805042          STRB     r5,[r0,#0x42]
;;;3691   	    bps[i]._rotor=bps[i]._buff[10]+(bps[i]._buff[11]*256);    
003234  7c05              LDRB     r5,[r0,#0x10]
003236  7c46              LDRB     r6,[r0,#0x11]
003238  eb052506          ADD      r5,r5,r6,LSL #8
00323c  6505              STR      r5,[r0,#0x50]
00323e  e006              B        |L1.12878|
                  |L1.12864|
;;;3692        	} 
;;;3693   	else 
;;;3694        	{
;;;3695        	bps[i]._Uii=0; 
003240  61c3              STR      r3,[r0,#0x1c]
;;;3696        	bps[i]._Ii=0;
003242  6243              STR      r3,[r0,#0x24]
;;;3697        	bps[i]._Uin=0;
003244  6203              STR      r3,[r0,#0x20]
;;;3698        	bps[i]._Ti=0;
003246  6283              STR      r3,[r0,#0x28]
;;;3699        	bps[i]._flags_tm=0; 
003248  f8803042          STRB     r3,[r0,#0x42]
;;;3700   	     bps[i]._rotor=0;    
00324c  6503              STR      r3,[r0,#0x50]
                  |L1.12878|
00324e  f1010101          ADD      r1,r1,#1              ;3681
003252  b2c9              UXTB     r1,r1                 ;3681
                  |L1.12884|
003254  42b9              CMP      r1,r7                 ;3681
003256  dbcd              BLT      |L1.12788|
;;;3701        	}
;;;3702        
;;;3703        }
;;;3704   
;;;3705   load_I=0;
003258  4d87              LDR      r5,|L1.13432|
;;;3706   #ifdef TELECORE
;;;3707   
;;;3708   /*for(i=0;i<NUMBAT_TELECORE;i++)
;;;3709   	{
;;;3710   	load_I-=lakb[i]._ch_curr/10;
;;;3711   	}*/
;;;3712   load_I=-(bat[0]._Ib/10)-(bat[1]._Ib/10);
;;;3713   #elif UKU_TELECORE2017
;;;3714   load_I=-(bat[0]._Ib/10)-(bat[1]._Ib/10);
;;;3715   #else
;;;3716   load_I=-(bat[0]._Ib/10)-(bat[1]._Ib/10);
00325a  f9b21008          LDRSH    r1,[r2,#8]  ; bat
00325e  f04f000a          MOV      r0,#0xa
003262  fb91f1f0          SDIV     r1,r1,r0
003266  f9b22054          LDRSH    r2,[r2,#0x54]  ; bat
00326a  fb92f0f0          SDIV     r0,r2,r0
00326e  4408              ADD      r0,r0,r1
003270  f1c00000          RSB      r0,r0,#0
003274  b206              SXTH     r6,r0
003276  802e              STRH     r6,[r5,#0]
;;;3717   #endif
;;;3718   Isumm=0;
003278  4a80              LDR      r2,|L1.13436|
00327a  8013              STRH     r3,[r2,#0]
;;;3719   
;;;3720   for(i=0;i<NUMIST;i++)
00327c  f04f0000          MOV      r0,#0
003280  e012              B        |L1.12968|
                  |L1.12930|
;;;3721        {
;;;3722        if(bps[i]._cnt<5)Isumm+=bps[i]._Ii;
003282  eb0001c0          ADD      r1,r0,r0,LSL #3
003286  eb011100          ADD      r1,r1,r0,LSL #4
00328a  eb040181          ADD      r1,r4,r1,LSL #2
00328e  f891c003          LDRB     r12,[r1,#3]
003292  f1bc0f05          CMP      r12,#5
003296  d204              BCS      |L1.12962|
003298  6a49              LDR      r1,[r1,#0x24]
00329a  f8b2c000          LDRH     r12,[r2,#0]  ; Isumm
00329e  4461              ADD      r1,r1,r12
0032a0  8011              STRH     r1,[r2,#0]
                  |L1.12962|
0032a2  f1000001          ADD      r0,r0,#1              ;3720
0032a6  b2c0              UXTB     r0,r0                 ;3720
                  |L1.12968|
0032a8  42b8              CMP      r0,r7                 ;3720
0032aa  dbea              BLT      |L1.12930|
;;;3723        }  
;;;3724        
;;;3725   load_I=load_I+Isumm;
0032ac  8810              LDRH     r0,[r2,#0]  ; Isumm
0032ae  4430              ADD      r0,r0,r6
0032b0  b200              SXTH     r0,r0
0032b2  8028              STRH     r0,[r5,#0]
;;;3726   if(load_I<0)load_I=0;
0032b4  2800              CMP      r0,#0
0032b6  da00              BGE      |L1.12986|
0032b8  802b              STRH     r3,[r5,#0]
                  |L1.12986|
;;;3727   
;;;3728   #ifdef UKU_220_IPS_TERMOKOMPENSAT
;;;3729   load_I=0;
0032ba  802b              STRH     r3,[r5,#0]
;;;3730   
;;;3731   Isumm=0;
0032bc  8013              STRH     r3,[r2,#0]
;;;3732   
;;;3733   for(i=0;i<NUMIST;i++)
0032be  f04f0000          MOV      r0,#0
0032c2  e00f              B        |L1.13028|
                  |L1.12996|
;;;3734        {
;;;3735        if(bps[i]._cnt<5)Isumm+=bps[i]._Ii;
0032c4  eb0001c0          ADD      r1,r0,r0,LSL #3
0032c8  eb011100          ADD      r1,r1,r0,LSL #4
0032cc  eb040181          ADD      r1,r4,r1,LSL #2
0032d0  78ce              LDRB     r6,[r1,#3]
0032d2  2e05              CMP      r6,#5
0032d4  d203              BCS      |L1.13022|
0032d6  6a49              LDR      r1,[r1,#0x24]
0032d8  8816              LDRH     r6,[r2,#0]  ; Isumm
0032da  4431              ADD      r1,r1,r6
0032dc  8011              STRH     r1,[r2,#0]
                  |L1.13022|
0032de  f1000001          ADD      r0,r0,#1              ;3733
0032e2  b2c0              UXTB     r0,r0                 ;3733
                  |L1.13028|
0032e4  42b8              CMP      r0,r7                 ;3733
0032e6  dbed              BLT      |L1.12996|
;;;3736        }  
;;;3737        
;;;3738   load_I=load_I+Isumm;
0032e8  8811              LDRH     r1,[r2,#0]  ; Isumm
0032ea  eb030001          ADD      r0,r3,r1
0032ee  b200              SXTH     r0,r0
0032f0  8028              STRH     r0,[r5,#0]
;;;3739   if(load_I<0)load_I=0;
0032f2  2800              CMP      r0,#0
0032f4  da00              BGE      |L1.13048|
0032f6  802b              STRH     r3,[r5,#0]
                  |L1.13048|
;;;3740   
;;;3741   #endif
;;;3742   #ifdef IPS_SGEP_GAZPROM
;;;3743   load_I=Isumm;
;;;3744   #endif
;;;3745   
;;;3746   
;;;3747   #ifdef UKU_GLONASS
;;;3748   inv[0]._Uio=6;
;;;3749   if (NUMINV)
;;;3750   	{
;;;3751   	for(i=0;i<NUMINV;i++)
;;;3752   		{
;;;3753   		if(bps[i+first_inv_slot]._cnt<25)
;;;3754        		{
;;;3755        		inv[i]._Ii=bps[i+first_inv_slot]._buff[0]+(bps[i+first_inv_slot]._buff[1]*256);
;;;3756        		inv[i]._Uin=bps[i+first_inv_slot]._buff[2]+(bps[i+first_inv_slot]._buff[3]*256);
;;;3757        		inv[i]._Uio=bps[i+first_inv_slot]._buff[4]+(bps[i+first_inv_slot]._buff[5]*256);
;;;3758        		inv[i]._Ti=(signed)(bps[i+first_inv_slot]._buff[6]);
;;;3759        		inv[i]._flags_tm=bps[i+first_inv_slot]._buff[8];
;;;3760   	    	//	inv[i]._rotor=bps[i+first_inv_slot]._buff[10]+(bps[i+first_inv_slot]._buff[11]*256);
;;;3761   			inv[i]._cnt=0;    
;;;3762        		} 
;;;3763   		else 
;;;3764        		{
;;;3765        		inv[i]._Uio=0; 
;;;3766        		inv[i]._Ii=0;
;;;3767        		inv[i]._Uin=0;
;;;3768        		inv[i]._Ti=0;
;;;3769        		inv[i]._flags_tm=0; 
;;;3770   //	     	inv[i]._rotor0;
;;;3771   			inv[i]._cnt=25;    
;;;3772        		}
;;;3773        	}
;;;3774      	}
;;;3775   #endif
;;;3776   
;;;3777   #ifndef UKU_GLONASS
;;;3778   if (NUMINV)
0032f8  4861              LDR      r0,|L1.13440|
0032fa  f9b05000          LDRSH    r5,[r0,#0]  ; NUMINV
0032fe  2d00              CMP      r5,#0
003300  d066              BEQ      |L1.13264|
;;;3779   	{
;;;3780   	for(i=0;i<NUMINV;i++)
003302  f04f0200          MOV      r2,#0
;;;3781   		{
;;;3782   		if(bps[i+20]._cnt<25)
;;;3783        		{
;;;3784        		inv[i]._Ii=bps[i+20]._buff[0]+(bps[i+20]._buff[1]*256);
003306  4e5f              LDR      r6,|L1.13444|
003308  e060              B        |L1.13260|
                  |L1.13066|
00330a  f1020014          ADD      r0,r2,#0x14           ;3782
00330e  eb0001c0          ADD      r1,r0,r0,LSL #3       ;3782
003312  eb011000          ADD      r0,r1,r0,LSL #4       ;3782
003316  eb040080          ADD      r0,r4,r0,LSL #2       ;3782
00331a  78c1              LDRB     r1,[r0,#3]            ;3782
00331c  2919              CMP      r1,#0x19              ;3782
00331e  d239              BCS      |L1.13204|
003320  7981              LDRB     r1,[r0,#6]
003322  79c7              LDRB     r7,[r0,#7]
003324  eb012707          ADD      r7,r1,r7,LSL #8
003328  eb020142          ADD      r1,r2,r2,LSL #1
00332c  eb061141          ADD      r1,r6,r1,LSL #5
003330  61cf              STR      r7,[r1,#0x1c]
;;;3785        		inv[i]._Pio=bps[i+20]._buff[2]+(bps[i+20]._buff[3]*256);
003332  7a07              LDRB     r7,[r0,#8]
003334  f890c009          LDRB     r12,[r0,#9]
003338  eb07270c          ADD      r7,r7,r12,LSL #8
00333c  62cf              STR      r7,[r1,#0x2c]
;;;3786        		inv[i]._Uio=bps[i+20]._buff[4]+(bps[i+20]._buff[5]*256);
00333e  7a87              LDRB     r7,[r0,#0xa]
003340  f890c00b          LDRB     r12,[r0,#0xb]
003344  eb07270c          ADD      r7,r7,r12,LSL #8
003348  618f              STR      r7,[r1,#0x18]
;;;3787        		inv[i]._Ti=(signed)(bps[i+20]._buff[6]);
00334a  7b07              LDRB     r7,[r0,#0xc]
00334c  620f              STR      r7,[r1,#0x20]
;;;3788        		inv[i]._flags_tm=bps[i+20]._buff[7];
00334e  7b47              LDRB     r7,[r0,#0xd]
003350  f8817046          STRB     r7,[r1,#0x46]
;;;3789        		inv[i]._Uin=bps[i+20]._buff[8]+(bps[i+20]._buff[9]*256);
003354  7b87              LDRB     r7,[r0,#0xe]
003356  f890c00f          LDRB     r12,[r0,#0xf]
00335a  eb07270c          ADD      r7,r7,r12,LSL #8
00335e  628f              STR      r7,[r1,#0x28]
;;;3790        		inv[i]._Uil=bps[i+20]._buff[10]+(bps[i+20]._buff[11]*256);
003360  7c07              LDRB     r7,[r0,#0x10]
003362  f890c011          LDRB     r12,[r0,#0x11]
003366  eb07270c          ADD      r7,r7,r12,LSL #8
00336a  624f              STR      r7,[r1,#0x24]
;;;3791   			inv[i]._cnt=0;
00336c  708b              STRB     r3,[r1,#2]
;;;3792   			inv[i]._Uoutmin=bps[i+20]._buff[12]; 
00336e  7c87              LDRB     r7,[r0,#0x12]
003370  f8817059          STRB     r7,[r1,#0x59]
;;;3793   			inv[i]._Uoutmax=bps[i+20]._buff[13]; 
003374  7cc7              LDRB     r7,[r0,#0x13]
003376  f881705a          STRB     r7,[r1,#0x5a]
;;;3794   			inv[i]._Pnom=bps[i+20]._buff[14]; 
00337a  7d07              LDRB     r7,[r0,#0x14]
00337c  f8817058          STRB     r7,[r1,#0x58]
;;;3795   			inv[i]._net_contr_en=bps[i+20]._buff[15];
003380  7d47              LDRB     r7,[r0,#0x15]
003382  f881705b          STRB     r7,[r1,#0x5b]
;;;3796   			inv[i]._pwm_en=bps[i+20]._buff[16];  
003386  7d87              LDRB     r7,[r0,#0x16]
003388  f881705c          STRB     r7,[r1,#0x5c]
;;;3797   			inv[i]._phase_mode=bps[i+20]._buff[17];  
00338c  7dc0              LDRB     r0,[r0,#0x17]
00338e  f881005d          STRB     r0,[r1,#0x5d]
003392  e018              B        |L1.13254|
                  |L1.13204|
;;;3798        		} 
;;;3799   		else 
;;;3800        		{
;;;3801         		inv[i]._Ii=0;
003394  eb020042          ADD      r0,r2,r2,LSL #1
003398  eb061040          ADD      r0,r6,r0,LSL #5
00339c  61c3              STR      r3,[r0,#0x1c]
;;;3802   			inv[i]._Pio=0;
00339e  62c3              STR      r3,[r0,#0x2c]
;;;3803   			inv[i]._Uio=0;
0033a0  6183              STR      r3,[r0,#0x18]
;;;3804        		inv[i]._Ti=0;
0033a2  6203              STR      r3,[r0,#0x20]
;;;3805        		inv[i]._flags_tm=0; 
0033a4  f8803046          STRB     r3,[r0,#0x46]
;;;3806        		inv[i]._Uil=0;
0033a8  6243              STR      r3,[r0,#0x24]
;;;3807        		inv[i]._Uin=0;
0033aa  6283              STR      r3,[r0,#0x28]
;;;3808   			inv[i]._cnt=25; 
0033ac  f04f0119          MOV      r1,#0x19
0033b0  7081              STRB     r1,[r0,#2]
;;;3809   			inv[i]._Uoutmin=0; 
0033b2  f8803059          STRB     r3,[r0,#0x59]
;;;3810   			inv[i]._Uoutmax=0; 
0033b6  f880305a          STRB     r3,[r0,#0x5a]
;;;3811   			inv[i]._Pnom=0; 
0033ba  f8803058          STRB     r3,[r0,#0x58]
;;;3812   			inv[i]._net_contr_en=0;
0033be  f880305b          STRB     r3,[r0,#0x5b]
;;;3813   			inv[i]._pwm_en=0;   
0033c2  f880305c          STRB     r3,[r0,#0x5c]
                  |L1.13254|
0033c6  f1020201          ADD      r2,r2,#1              ;3780
0033ca  b2d2              UXTB     r2,r2                 ;3780
                  |L1.13260|
0033cc  42aa              CMP      r2,r5                 ;3780
0033ce  db9c              BLT      |L1.13066|
                  |L1.13264|
;;;3814   			   
;;;3815        		}
;;;3816        	}
;;;3817      	}
;;;3818   #endif
;;;3819   
;;;3820   #ifdef GLADKOV
;;;3821   inv[0]._Ii=bps[4]._buff[0]+(bps[4]._buff[1]*256);
;;;3822   inv[0]._Pio=bps[4]._buff[2]+(bps[4]._buff[3]*256);
;;;3823   inv[0]._Uio=bps[4]._buff[4]+(bps[4]._buff[5]*256);
;;;3824   inv[0]._Ti=(signed)(bps[4]._buff[6]);
;;;3825   inv[0]._flags_tm=bps[4]._buff[7];
;;;3826   inv[0]._Uin=bps[4]._buff[8]+(bps[4]._buff[9]*256);
;;;3827   inv[0]._Uil=bps[4]._buff[10]+(bps[4]._buff[11]*256);
;;;3828   inv[0]._cnt=0;    
;;;3829   
;;;3830   inv[1]._Ii=bps[21]._buff[0]+(bps[21]._buff[1]*256);
;;;3831   inv[1]._Pio=bps[21]._buff[2]+(bps[21]._buff[3]*256);
;;;3832   inv[1]._Uio=bps[21]._buff[4]+(bps[21]._buff[5]*256);
;;;3833   inv[1]._Ti=(signed)(bps[21]._buff[6]);
;;;3834   inv[1]._flags_tm=bps[21]._buff[7];
;;;3835   inv[1]._Uin=bps[21]._buff[8]+(bps[21]._buff[9]*256);
;;;3836   inv[1]._Uil=bps[21]._buff[10]+(bps[21]._buff[11]*256);
;;;3837   inv[1]._cnt=0;    
;;;3838   #endif
;;;3839   
;;;3840   /*
;;;3841   if((BAT_IS_ON[0]==bisON)&&(BAT_TYPE==1))
;;;3842   	{
;;;3843   	lakb[0]._battCommState=0;
;;;3844   	if(lakb[0]._cnt>10)lakb[0]._battCommState=2;
;;;3845   	else if(lakb[0]._bRS485ERR==1)lakb[0]._battCommState=1;
;;;3846   	
;;;3847   	if(lakb[0]._battCommState==0)
;;;3848   		{	
;;;3849   		bat[0]._Ub=(signed short)((lakb[0]._tot_bat_volt+5)/10);
;;;3850   		bat[0]._Ib=(signed short)lakb[0]._ch_curr;
;;;3851   		if(lakb[0]._dsch_curr) bat[0]._Ib=(signed short) (-lakb[0]._dsch_curr);
;;;3852   		bat[0]._Tb=(signed short)lakb[0]._max_cell_temp;
;;;3853   		}
;;;3854   	}
;;;3855   */
;;;3856   
;;;3857   #ifdef UKU_TELECORE2015
;;;3858   
;;;3859   	if(BAT_TYPE==2)
;;;3860   		{
;;;3861   		lakb[0]._ch_curr/*temp_SS*/=((ascii2halFhex(liBatteryInBuff[113]))<<12)+
;;;3862   					 		((ascii2halFhex(liBatteryInBuff[114]))<<8)+
;;;3863   							((ascii2halFhex(liBatteryInBuff[115]))<<4)+
;;;3864   							((ascii2halFhex(liBatteryInBuff[116])));
;;;3865   		
;;;3866   		/*if(temp_SS&0x8000)		lakb[0]._ch_curr=~temp_SS;
;;;3867   		else 				lakb[0]._ch_curr=temp_SS;*/
;;;3868   	
;;;3869   		lakb[0]._tot_bat_volt=	(unsigned short)(((ascii2halFhex(liBatteryInBuff[117]))<<12)+
;;;3870   							((ascii2halFhex(liBatteryInBuff[118]))<<8)+
;;;3871   							((ascii2halFhex(liBatteryInBuff[119]))<<4)+
;;;3872   							((ascii2halFhex(liBatteryInBuff[120]))))/100;
;;;3873   	
;;;3874   		lakb[0]._max_cell_temp= 	(((ascii2halFhex(liBatteryInBuff[93]))<<12)+
;;;3875   							((ascii2halFhex(liBatteryInBuff[94]))<<8)+
;;;3876   							((ascii2halFhex(liBatteryInBuff[95]))<<4)+
;;;3877   							((ascii2halFhex(liBatteryInBuff[96]))))/10-273;
;;;3878   	
;;;3879   		lakb[0]._s_o_c_abs=		(unsigned short)((ascii2halFhex(liBatteryInBuff[121]))<<12)+
;;;3880   							((ascii2halFhex(liBatteryInBuff[122]))<<8)+
;;;3881   							((ascii2halFhex(liBatteryInBuff[123]))<<4)+
;;;3882   							((ascii2halFhex(liBatteryInBuff[124])));
;;;3883   	
;;;3884   		lakb[0]._rat_cap=		(unsigned short)((ascii2halFhex(liBatteryInBuff[127]))<<12)+
;;;3885   							((ascii2halFhex(liBatteryInBuff[128]))<<8)+
;;;3886   							((ascii2halFhex(liBatteryInBuff[129]))<<4)+
;;;3887   							((ascii2halFhex(liBatteryInBuff[130])));
;;;3888   	
;;;3889   		lakb[0]._s_o_c=		lakb[0]._s_o_c_abs/(lakb[0]._rat_cap/100);
;;;3890   	
;;;3891   	
;;;3892   	/*	lakb[0]._rat_cap= (lakb_damp[i][13]*256)+ lakb_damp[i][14];
;;;3893   		lakb[0]._max_cell_volt= (lakb_damp[i][0]*256)+ lakb_damp[i][1];
;;;3894   		lakb[0]._min_cell_volt= (lakb_damp[i][2]*256)+ lakb_damp[i][3];
;;;3895   		lakb[0]._max_cell_temp= lakb_damp[i][4];
;;;3896   		lakb[0]._min_cell_temp= lakb_damp[i][5];
;;;3897   		lakb[0]._tot_bat_volt= (lakb_damp[i][6]*256)+ lakb_damp[i][7];
;;;3898   		lakb[0]._ch_curr= (lakb_damp[i][8]*256)+ lakb_damp[i][8];
;;;3899   		lakb[0]._dsch_curr= (lakb_damp[i][10]*256)+ lakb_damp[i][11];
;;;3900   		lakb[0]._s_o_c= lakb_damp[i][12];
;;;3901   		lakb[0]._r_b_t= lakb_damp[i][15];
;;;3902   		lakb[0]._c_c_l_v= (lakb_damp[i][16]*256)+ lakb_damp[i][17];
;;;3903   		lakb[0]._s_o_h= lakb_damp[i][18];
;;;3904   	
;;;3905   		if(lakb[i]._rat_cap==0)
;;;3906   			{
;;;3907   			if(lakb[i]._isOnCnt)
;;;3908   				{
;;;3909   				lakb[i]._isOnCnt--;
;;;3910   				if(lakb[i]._isOnCnt==0)
;;;3911   					{
;;;3912   					if(lakb[i]._battIsOn!=0) bLAKB_KONF_CH=1;
;;;3913   					}
;;;3914   				}
;;;3915   			}
;;;3916   		else 
;;;3917   			{
;;;3918   			if(lakb[i]._isOnCnt<50)
;;;3919   				{
;;;3920   				lakb[i]._isOnCnt++;
;;;3921   				if(lakb[i]._isOnCnt==50)
;;;3922   					{
;;;3923   					if(lakb[i]._battIsOn!=1) bLAKB_KONF_CH=1;
;;;3924   					}
;;;3925   				}
;;;3926   			}
;;;3927   		gran(&lakb[i]._isOnCnt,0,50);*/
;;;3928   		}
;;;3929   	else if(BAT_TYPE==3)
;;;3930   		{
;;;3931   		//short numOfPacks;
;;;3932   		//short numOfCells, numOfTemperCells, baseOfData;
;;;3933   		
;;;3934   		#ifndef UKU_TELECORE2016
;;;3935   		numOfCells=((ascii2halFhex(liBatteryInBuff[17]))<<4)+((ascii2halFhex(liBatteryInBuff[18])));
;;;3936   		numOfTemperCells=((ascii2halFhex(liBatteryInBuff[17+(numOfCells*4)+2]))<<4)+((ascii2halFhex(liBatteryInBuff[18+(numOfCells*4)+2])));
;;;3937   		numOfPacks=((ascii2halFhex(liBatteryInBuff[15]))<<4)+((ascii2halFhex(liBatteryInBuff[16])));
;;;3938   		if(numOfPacks)numOfPacks-=1;
;;;3939   		if((numOfPacks<0)||(numOfPacks>NUMBAT_TELECORE))numOfPacks=0;
;;;3940   		plazma_numOfCells=numOfCells;
;;;3941   		plazma_numOfTemperCells=numOfTemperCells;
;;;3942   		plazma_numOfPacks=numOfPacks;
;;;3943   
;;;3944   
;;;3945   		baseOfData=16+(numOfCells*4)+2+(numOfTemperCells*4)+2;
;;;3946   
;;;3947   		lakb[numOfPacks]._ch_curr=(signed short)(
;;;3948   							((ascii2halFhex(liBatteryInBuff[1+baseOfData]))<<12)+
;;;3949   							((ascii2halFhex(liBatteryInBuff[2+baseOfData]))<<8)+
;;;3950   							((ascii2halFhex(liBatteryInBuff[3+baseOfData]))<<4)+
;;;3951   							((ascii2halFhex(liBatteryInBuff[4+baseOfData])))
;;;3952   							);	  
;;;3953   
;;;3954   		lakb[numOfPacks]._tot_bat_volt=(signed short)(
;;;3955   							((ascii2halFhex(liBatteryInBuff[1+baseOfData+4]))<<12)+
;;;3956   							((ascii2halFhex(liBatteryInBuff[2+baseOfData+4]))<<8)+
;;;3957   							((ascii2halFhex(liBatteryInBuff[3+baseOfData+4]))<<4)+
;;;3958   							((ascii2halFhex(liBatteryInBuff[4+baseOfData+4])))
;;;3959   							)/10;
;;;3960   
;;;3961   		lakb[numOfPacks]._max_cell_temp=(signed short)(
;;;3962   							((ascii2halFhex(liBatteryInBuff[1+baseOfData-4]))<<12)+
;;;3963   							((ascii2halFhex(liBatteryInBuff[2+baseOfData-4]))<<8)+
;;;3964   							((ascii2halFhex(liBatteryInBuff[3+baseOfData-4]))<<4)+
;;;3965   							((ascii2halFhex(liBatteryInBuff[4+baseOfData-4])))
;;;3966   							)-2730;
;;;3967   
;;;3968   		lakb[numOfPacks]._s_o_c=(signed short)(
;;;3969   							((ascii2halFhex(liBatteryInBuff[1+baseOfData+8]))<<12)+
;;;3970   							((ascii2halFhex(liBatteryInBuff[2+baseOfData+8]))<<8)+
;;;3971   							((ascii2halFhex(liBatteryInBuff[3+baseOfData+8]))<<4)+
;;;3972   							((ascii2halFhex(liBatteryInBuff[4+baseOfData+8])))
;;;3973   							)/10;
;;;3974   
;;;3975   		lakb[numOfPacks]._s_o_h=(signed short)(
;;;3976   							((ascii2halFhex(liBatteryInBuff[1+baseOfData+14]))<<12)+
;;;3977   							((ascii2halFhex(liBatteryInBuff[2+baseOfData+14]))<<8)+
;;;3978   							((ascii2halFhex(liBatteryInBuff[3+baseOfData+14]))<<4)+
;;;3979   							((ascii2halFhex(liBatteryInBuff[4+baseOfData+14])))
;;;3980   							)/10;
;;;3981   		#endif
;;;3982   		
;;;3983   		#ifdef UKU_TELECORE2016
;;;3984   		{
;;;3985   		char i;
;;;3986   		
;;;3987   		for(i=0;i<NUMBAT_TELECORE;i++)
;;;3988   			{
;;;3989   			lakb[i]._s_o_c_percent= (signed short)(((unsigned long)lakb[i]._s_o_c*100UL)/(unsigned long)lakb[i]._s_o_h);
;;;3990   			}
;;;3991   		}
;;;3992   		#endif
;;;3993   		
;;;3994   										  
;;;3995   		}
;;;3996   	
;;;3997   if(sacredSunSilentCnt<3) 
;;;3998   	{
;;;3999       	bat[0]._Ub=lakb[0]._tot_bat_volt;
;;;4000       	bat[0]._Tb=lakb[0]._max_cell_temp;
;;;4001      	//bat[0]._Ib=lakb[0]._ch_curr/10;
;;;4002   	}
;;;4003   else 
;;;4004   	{
;;;4005       	//bat[0]._Ub=0;
;;;4006       	//bat[0]._Tb=0;
;;;4007      	//bat[0]._Ib=0;
;;;4008   	}
;;;4009   
;;;4010   if(BAT_TYPE==1)
;;;4011   	{
;;;4012   	char i;
;;;4013   	for(i=0;i<1;i++)
;;;4014   		{
;;;4015   		lakb[i]._rat_cap= (lakb_damp[i][13]*256)+ lakb_damp[i][14];
;;;4016   		lakb[i]._max_cell_volt= (lakb_damp[i][0]*256)+ lakb_damp[i][1];
;;;4017   		lakb[i]._min_cell_volt= (lakb_damp[i][2]*256)+ lakb_damp[i][3];
;;;4018   		lakb[i]._max_cell_temp= lakb_damp[i][4];
;;;4019   		lakb[i]._min_cell_temp= lakb_damp[i][5];
;;;4020   		lakb[i]._tot_bat_volt= (lakb_damp[i][6]*256)+ lakb_damp[i][7];
;;;4021   		lakb[i]._ch_curr= (lakb_damp[i][8]*256)+ lakb_damp[i][9];
;;;4022   		lakb[i]._dsch_curr= (lakb_damp[i][10]*256)+ lakb_damp[i][11];
;;;4023   		lakb[i]._s_o_c= lakb_damp[i][12];
;;;4024   		lakb[i]._r_b_t= lakb_damp[i][15];
;;;4025   		lakb[i]._c_c_l_v= (lakb_damp[i][16]*256)+ lakb_damp[i][17];
;;;4026   		lakb[i]._s_o_h= lakb_damp[i][18];
;;;4027   		lakb[i]._flags1= lakb_damp[i][34];
;;;4028   		lakb[i]._flags2= lakb_damp[i][35];
;;;4029   		lakb[i]._b_p_ser_num= lakb_damp[i][36];
;;;4030   
;;;4031   /*		if(lakb[i]._rat_cap==0)
;;;4032   			{
;;;4033   			if(lakb[i]._isOnCnt)
;;;4034   				{
;;;4035   				lakb[i]._isOnCnt--;
;;;4036   				if(lakb[i]._isOnCnt==0)
;;;4037   					{
;;;4038   					if(lakb[i]._battIsOn!=0) bLAKB_KONF_CH=1;
;;;4039   					}
;;;4040   				}
;;;4041   			}
;;;4042   		else 
;;;4043   			{
;;;4044   			if(lakb[i]._isOnCnt<50)
;;;4045   				{
;;;4046   				lakb[i]._isOnCnt++;
;;;4047   				if(lakb[i]._isOnCnt==50)
;;;4048   					{
;;;4049   					if(lakb[i]._battIsOn!=1) bLAKB_KONF_CH=1;
;;;4050   					}
;;;4051   				}
;;;4052   			} */
;;;4053   		gran(&lakb[i]._isOnCnt,0,50);
;;;4054   	 	}
;;;4055   
;;;4056   	if(lakb_damp[0][41]==100)
;;;4057   		{
;;;4058   		li_bat._485Error=1;
;;;4059   		}
;;;4060   	if(lakb_damp[0][41]==0)
;;;4061   		{
;;;4062   		//if(bRS485ERR)bLAKB_KONF_CH=1;
;;;4063   		li_bat._485Error=0;
;;;4064   		}
;;;4065   	li_bat._485ErrorCnt=lakb_damp[0][41];
;;;4066   
;;;4067   
;;;4068   	}
;;;4069   
;;;4070   
;;;4071   #endif
;;;4072   
;;;4073   		#ifdef UKU_TELECORE2017
;;;4074   		{
;;;4075   		char i;
;;;4076   		
;;;4077   		for(i=0;i<NUMBAT_TELECORE;i++)
;;;4078   			{
;;;4079   			lakb[i]._s_o_c_percent= (signed short)(((unsigned long)lakb[i]._s_o_c*100UL)/(unsigned long)lakb[i]._s_o_h);
;;;4080   			}
;;;4081   		}
;;;4082   		#endif
;;;4083   #ifdef UKU_TELECORE2015
;;;4084   //вычисление параметров работы батареи
;;;4085   //TODO дописать для всех батарей все параметры и при отцепке батарей
;;;4086   li_bat._batStat=bsOK;
;;;4087   if(BAT_TYPE==1) //COSLIGHT
;;;4088   	{
;;;4089   	if(li_bat._batStat==bsOK)
;;;4090   		{
;;;4091   		li_bat._Ub=lakb[0]._tot_bat_volt/10;
;;;4092   
;;;4093   		if(lakb[0]._ch_curr)li_bat._Ib=lakb[0]._ch_curr/10;
;;;4094   		else if(lakb[0]._dsch_curr) li_bat._Ib=bat[0]._Ib/10;//lakb[0]._dsch_curr/10;
;;;4095   	
;;;4096   		li_bat._ratCap=lakb[0]._rat_cap/100;
;;;4097   		li_bat._soc=lakb[0]._s_o_c;
;;;4098   		li_bat._soh=lakb[0]._s_o_h;
;;;4099   		li_bat._cclv=lakb[0]._c_c_l_v/10;
;;;4100   		li_bat._Tb=lakb[0]._max_cell_temp;
;;;4101   		li_bat._rbt=lakb[0]._r_b_t;
;;;4102   		}
;;;4103   	else 
;;;4104   		{
;;;4105   		li_bat._Ub=bat[0]._Ub;
;;;4106   		li_bat._Ib=bat[0]._Ib/10;
;;;4107   		li_bat._Tb=bat[0]._Tb;
;;;4108   		}
;;;4109   
;;;4110   	if((li_bat._485Error)||(li_bat._canError))
;;;4111   		{
;;;4112   		li_bat._batStat=bsOFF;
;;;4113   		}
;;;4114   	else li_bat._batStat=bsOK;
;;;4115   	}
;;;4116   else if(BAT_TYPE==2) //SACRED SUN
;;;4117   	{
;;;4118   	}
;;;4119   else if(BAT_TYPE==3) //ZTT
;;;4120   	{
;;;4121   	if(li_bat._batStat==bsOK)
;;;4122   		{
;;;4123   
;;;4124   		}
;;;4125   	}
;;;4126   #endif
;;;4127   
;;;4128   
;;;4129   /*
;;;4130   if((BAT_IS_ON[0]==bisON)&&(BAT_TYPE[0]==1)&&(BAT_LINK==0))
;;;4131   	{
;;;4132   
;;;4133   
;;;4134   	if(bat_drv_rx_buff[13]<=0x39)bbb[0]=bat_drv_rx_buff[13]-0x30;
;;;4135   	else bbb[0]=bat_drv_rx_buff[13]-55;
;;;4136   	if(bat_drv_rx_buff[14]<=0x39)bbb[1]=bat_drv_rx_buff[14]-0x30;
;;;4137   	else bbb[1]=bat_drv_rx_buff[14]-55;
;;;4138   	if(bat_drv_rx_buff[15]<=0x39)bbb[2]=bat_drv_rx_buff[15]-0x30;
;;;4139   	else bbb[2]=bat_drv_rx_buff[15]-55;
;;;4140   	if(bat_drv_rx_buff[16]<=0x39)bbb[3]=bat_drv_rx_buff[16]-0x30;
;;;4141   	else bbb[3]=bat_drv_rx_buff[16]-55;
;;;4142   
;;;4143   	tempSS=0;
;;;4144   	tempSS=((bbb[0]*4096)+(bbb[1]*256)+(bbb[2]*16)+bbb[3]);
;;;4145   
;;;4146   	bat[0]._max_cell_volt=(tempSS+5)/10;
;;;4147   
;;;4148   	if(bat_drv_rx_buff[17]<=0x39)bbb[0]=bat_drv_rx_buff[17]-0x30;
;;;4149   	else bbb[0]=bat_drv_rx_buff[17]-55;
;;;4150   	if(bat_drv_rx_buff[18]<=0x39)bbb[1]=bat_drv_rx_buff[18]-0x30;
;;;4151   	else bbb[1]=bat_drv_rx_buff[18]-55;
;;;4152   	if(bat_drv_rx_buff[19]<=0x39)bbb[2]=bat_drv_rx_buff[19]-0x30;
;;;4153   	else bbb[2]=bat_drv_rx_buff[19]-55;
;;;4154   	if(bat_drv_rx_buff[20]<=0x39)bbb[3]=bat_drv_rx_buff[20]-0x30;
;;;4155   	else bbb[3]=bat_drv_rx_buff[20]-55;
;;;4156   
;;;4157   	tempSS=0;
;;;4158   	tempSS=((bbb[0]*4096)+(bbb[1]*256)+(bbb[2]*16)+bbb[3]);
;;;4159   
;;;4160   	bat[0]._min_cell_volt=(tempSS+5)/10;
;;;4161   
;;;4162   
;;;4163   	}*/
;;;4164   }
0033d0  b007              ADD      sp,sp,#0x1c
0033d2  e8bd8ff0          POP      {r4-r11,pc}
;;;4165   #endif	//UKU_6U_WEB
                          ENDP

                  mnemo_hndl PROC
;;;4225   //-----------------------------------------------
;;;4226   void mnemo_hndl(void)
0033d6  4a2c              LDR      r2,|L1.13448|
;;;4227   {
;;;4228   if(((ind==iMn_220)||(ind==iMn))&&(sub_ind==0)&&(MNEMO_ON==mnON))
;;;4229   	{
;;;4230   	if(mnemo_cnt)mnemo_cnt--;
0033d8  492c              LDR      r1,|L1.13452|
0033da  7810              LDRB     r0,[r2,#0]            ;4228  ; a_ind
0033dc  2804              CMP      r0,#4                 ;4228
0033de  d001              BEQ      |L1.13284|
0033e0  2801              CMP      r0,#1                 ;4228
0033e2  d105              BNE      |L1.13296|
                  |L1.13284|
0033e4  7850              LDRB     r0,[r2,#1]            ;4228  ; a_ind
0033e6  b918              CBNZ     r0,|L1.13296|
0033e8  4829              LDR      r0,|L1.13456|
0033ea  7800              LDRB     r0,[r0,#0]            ;4228  ; MNEMO_ON
0033ec  2855              CMP      r0,#0x55              ;4228
0033ee  d003              BEQ      |L1.13304|
                  |L1.13296|
;;;4231   	}
;;;4232   else mnemo_cnt=MNEMO_TIME;
0033f0  4828              LDR      r0,|L1.13460|
0033f2  8800              LDRH     r0,[r0,#0]  ; MNEMO_TIME
0033f4  7008              STRB     r0,[r1,#0]
                  |L1.13302|
;;;4233   }
0033f6  4770              BX       lr
                  |L1.13304|
0033f8  7808              LDRB     r0,[r1,#0]            ;4230  ; mnemo_cnt
0033fa  2800              CMP      r0,#0                 ;4230
0033fc  d0fb              BEQ      |L1.13302|
0033fe  f1a00001          SUB      r0,r0,#1              ;4230
003402  7008              STRB     r0,[r1,#0]            ;4230
003404  4770              BX       lr
;;;4234   
                          ENDP

                  apv_start PROC
;;;4235   //-----------------------------------------------
;;;4236   void apv_start(char in)
003406  eb0001c0          ADD      r1,r0,r0,LSL #3
;;;4237   {
;;;4238   if(	(bps[in]._apv_timer_1_lev==0)&&
00340a  eb011100          ADD      r1,r1,r0,LSL #4
00340e  4822              LDR      r0,|L1.13464|
003410  eb000081          ADD      r0,r0,r1,LSL #2
003414  f890105e          LDRB     r1,[r0,#0x5e]
003418  2900              CMP      r1,#0
00341a  d14e              BNE      |L1.13498|
;;;4239   	(bps[in]._apv_cnt_1_lev==0)&&
00341c  f890105f          LDRB     r1,[r0,#0x5f]
003420  2900              CMP      r1,#0
003422  d14a              BNE      |L1.13498|
;;;4240   	(bps[in]._apv_timer_2_lev==0) )
003424  f8b01060          LDRH     r1,[r0,#0x60]
003428  2900              CMP      r1,#0
00342a  e037              B        |L1.13468|
                  |L1.13356|
                          DCD      bIBAT_SMKLBR_cnt
                  |L1.13360|
                          DCD      Ib_ips_termokompensat_temp
                  |L1.13364|
                          DCD      bat
                  |L1.13368|
                          DCD      adc_buff_ext_
                  |L1.13372|
                          DCD      Kunet_ext
                  |L1.13376|
                          DCD      Uvv
                  |L1.13380|
                          DCD      Uvv0
                  |L1.13384|
                          DCD      net_U
                  |L1.13388|
                          DCD      eb2_data_short
                  |L1.13392|
                          DCD      Kvv_eb2
                  |L1.13396|
                          DCD      Uvv_eb2
                  |L1.13400|
                          DCD      Kpes_eb2
                  |L1.13404|
                          DCD      Upes_eb2
                  |L1.13408|
                          DCD      t_ext
                  |L1.13412|
                          DCD      ibt
                  |L1.13416|
                          DCD      t_box
                  |L1.13420|
                          DCD      t_ext_can_nd
                  |L1.13424|
                          DCD      t_ext_can
                  |L1.13428|
                          DCD      BAT_IS_ON
                  |L1.13432|
                          DCD      load_I
                  |L1.13436|
                          DCD      Isumm
                  |L1.13440|
                          DCD      NUMINV
                  |L1.13444|
                          DCD      inv
                  |L1.13448|
                          DCD      a_ind
                  |L1.13452|
                          DCD      mnemo_cnt
                  |L1.13456|
                          DCD      MNEMO_ON
                  |L1.13460|
                          DCD      MNEMO_TIME
                  |L1.13464|
                          DCD      bps
                  |L1.13468|
00349c  d10d              BNE      |L1.13498|
;;;4241   		{
;;;4242    		bps[in]._apv_timer_1_lev=60;
00349e  f04f013c          MOV      r1,#0x3c
0034a2  f8001f5e          STRB     r1,[r0,#0x5e]!
;;;4243   		bps[in]._apv_cnt_1_lev=3;
0034a6  f04f0103          MOV      r1,#3
0034aa  7041              STRB     r1,[r0,#1]
;;;4244   		bps[in]._apv_timer_2_lev=(short)(APV_ON2_TIME*3600);
0034ac  49fe              LDR      r1,|L1.14504|
0034ae  f44f6261          MOV      r2,#0xe10
0034b2  8809              LDRH     r1,[r1,#0]  ; APV_ON2_TIME
0034b4  fb01f102          MUL      r1,r1,r2
0034b8  8041              STRH     r1,[r0,#2]
                  |L1.13498|
;;;4245   		}
;;;4246   }
0034ba  4770              BX       lr
;;;4247   
                          ENDP

                  apv_stop PROC
;;;4248   //-----------------------------------------------
;;;4249   void apv_stop(char in)
0034bc  eb0002c0          ADD      r2,r0,r0,LSL #3
;;;4250   {
;;;4251   bps[in]._apv_timer_1_lev=0;
0034c0  eb021200          ADD      r2,r2,r0,LSL #4
0034c4  48f9              LDR      r0,|L1.14508|
0034c6  f04f0100          MOV      r1,#0
0034ca  eb000082          ADD      r0,r0,r2,LSL #2
0034ce  f8001f5e          STRB     r1,[r0,#0x5e]!
;;;4252   bps[in]._apv_cnt_1_lev=0;
0034d2  7041              STRB     r1,[r0,#1]
;;;4253   bps[in]._apv_timer_2_lev=0;
0034d4  8041              STRH     r1,[r0,#2]
;;;4254   }
0034d6  4770              BX       lr
;;;4255   
                          ENDP

                  apv_drv PROC
;;;4256   //-----------------------------------------------
;;;4257   void apv_drv(void)		//1 Гц
0034d8  e92d43f0          PUSH     {r4-r9,lr}
;;;4258   {
;;;4259   for(i=0;i<NUMIST;i++)
0034dc  4ef4              LDR      r6,|L1.14512|
0034de  f04f0300          MOV      r3,#0
0034e2  75f3              STRB     r3,[r6,#0x17]
;;;4260   	{
;;;4261   	if(APV_ON1==apvOFF)		//если выключен первый уровень АПВ
;;;4262   		{
;;;4263   		bps[i]._apv_timer_1_lev=0;
;;;4264   		bps[i]._apv_cnt_1_lev=0;
;;;4265   		bps[i]._apv_timer_2_lev=0;
;;;4266   		}
;;;4267   	if(APV_ON2==apvOFF)	   //если выключен второй уровень АПВ
0034e4  4cf3              LDR      r4,|L1.14516|
;;;4268   		{
;;;4269   		bps[i]._apv_timer_2_lev=0;
;;;4270   		}
;;;4271   
;;;4272   	if(	(bps[i]._apv_timer_1_lev!=0)||	//если работает АПВ-1 или
;;;4273   		(bps[i]._apv_cnt_1_lev!=0)||	//работает АПВ-1 или
;;;4274   		(bps[i]._apv_timer_2_lev!=0) )		 //работает АПВ-2
;;;4275   			{
;;;4276   			if(bps[i]._state==bsWRK)
;;;4277   				{
;;;4278   				if(bps[i]._apv_succes_timer<60)
;;;4279   					{
;;;4280   					bps[i]._apv_succes_timer++;
;;;4281   					if(bps[i]._apv_succes_timer>=60)
;;;4282   						{
;;;4283   						apv_stop(i);
;;;4284   						}
;;;4285   					}
;;;4286   				}
;;;4287   			else bps[i]._apv_succes_timer=0;
;;;4288   			}
;;;4289   
;;;4290   	if(bps[i]._apv_timer_1_lev)
;;;4291   		{
;;;4292   		bps[i]._apv_timer_2_lev=0;
;;;4293   		bps[i]._apv_timer_1_lev--;
;;;4294   		if(bps[i]._apv_timer_1_lev==0)
;;;4295   			{
;;;4296   			if(bps[i]._apv_cnt_1_lev)
;;;4297   				{
;;;4298   				bps[i]._apv_cnt_1_lev--;
;;;4299   				bps[i]._apv_timer_1_lev=60;
0034e6  f04f073c          MOV      r7,#0x3c
;;;4300   				bps[i]._apv_reset_av_timer=2;
0034ea  f04f0802          MOV      r8,#2
0034ee  4def              LDR      r5,|L1.14508|
0034f0  f8df93c4          LDR      r9,|L1.14520|
0034f4  e079              B        |L1.13802|
                  |L1.13558|
0034f6  49f1              LDR      r1,|L1.14524|
0034f8  7809              LDRB     r1,[r1,#0]            ;4261  ; APV_ON1
0034fa  b949              CBNZ     r1,|L1.13584|
0034fc  eb0001c0          ADD      r1,r0,r0,LSL #3       ;4263
003500  eb011100          ADD      r1,r1,r0,LSL #4       ;4263
003504  eb050181          ADD      r1,r5,r1,LSL #2       ;4263
003508  f8013f5e          STRB     r3,[r1,#0x5e]!        ;4263
00350c  704b              STRB     r3,[r1,#1]            ;4264
00350e  804b              STRH     r3,[r1,#2]            ;4265
                  |L1.13584|
003510  7821              LDRB     r1,[r4,#0]            ;4267  ; APV_ON2
003512  b939              CBNZ     r1,|L1.13604|
003514  eb0001c0          ADD      r1,r0,r0,LSL #3       ;4269
003518  eb011100          ADD      r1,r1,r0,LSL #4       ;4269
00351c  eb050181          ADD      r1,r5,r1,LSL #2       ;4269
003520  f8a13060          STRH     r3,[r1,#0x60]         ;4269
                  |L1.13604|
003524  eb0001c0          ADD      r1,r0,r0,LSL #3       ;4272
003528  eb011100          ADD      r1,r1,r0,LSL #4       ;4272
00352c  eb050181          ADD      r1,r5,r1,LSL #2       ;4272
003530  f891205e          LDRB     r2,[r1,#0x5e]         ;4272
003534  b92a              CBNZ     r2,|L1.13634|
003536  f891205f          LDRB     r2,[r1,#0x5f]         ;4273
00353a  b912              CBNZ     r2,|L1.13634|
00353c  f8b12060          LDRH     r2,[r1,#0x60]         ;4274
003540  b122              CBZ      r2,|L1.13644|
                  |L1.13634|
003542  788a              LDRB     r2,[r1,#2]            ;4276
003544  2a01              CMP      r2,#1                 ;4276
003546  d014              BEQ      |L1.13682|
003548  f8813063          STRB     r3,[r1,#0x63]         ;4287
                  |L1.13644|
00354c  7df1              LDRB     r1,[r6,#0x17]         ;4290  ; i
00354e  eb0100c1          ADD      r0,r1,r1,LSL #3       ;4290
003552  eb001001          ADD      r0,r0,r1,LSL #4       ;4290
003556  eb050080          ADD      r0,r5,r0,LSL #2       ;4290
00355a  f890205e          LDRB     r2,[r0,#0x5e]         ;4290
00355e  b30a              CBZ      r2,|L1.13732|
003560  f8a03060          STRH     r3,[r0,#0x60]         ;4292
003564  f1a20201          SUB      r2,r2,#1              ;4293
003568  b2d2              UXTB     r2,r2                 ;4293
00356a  f880205e          STRB     r2,[r0,#0x5e]         ;4293
00356e  b172              CBZ      r2,|L1.13710|
003570  e024              B        |L1.13756|
                  |L1.13682|
003572  f8912063          LDRB     r2,[r1,#0x63]         ;4278
003576  2a3c              CMP      r2,#0x3c              ;4278
003578  d2e8              BCS      |L1.13644|
00357a  f1020201          ADD      r2,r2,#1              ;4280
00357e  b2d2              UXTB     r2,r2                 ;4280
003580  f8812063          STRB     r2,[r1,#0x63]         ;4280
003584  2a3c              CMP      r2,#0x3c              ;4281
003586  d3e1              BCC      |L1.13644|
003588  f7fffffe          BL       apv_stop
00358c  e7de              B        |L1.13644|
                  |L1.13710|
00358e  f890205f          LDRB     r2,[r0,#0x5f]         ;4296
003592  b142              CBZ      r2,|L1.13734|
003594  f1a20201          SUB      r2,r2,#1              ;4298
003598  f880205f          STRB     r2,[r0,#0x5f]         ;4298
00359c  f880705e          STRB     r7,[r0,#0x5e]         ;4299
0035a0  f8808062          STRB     r8,[r0,#0x62]
                  |L1.13732|
0035a4  e00a              B        |L1.13756|
                  |L1.13734|
;;;4301   				}
;;;4302   			else
;;;4303   				{
;;;4304   				if(APV_ON2==apvON)
0035a6  7822              LDRB     r2,[r4,#0]  ; APV_ON2
0035a8  2a01              CMP      r2,#1
0035aa  d107              BNE      |L1.13756|
;;;4305   					{
;;;4306   					bps[i]._apv_timer_1_lev=0;
;;;4307   					bps[i]._apv_cnt_1_lev=0;
;;;4308   					bps[i]._apv_timer_2_lev=(short)(APV_ON2_TIME*3600);
0035ac  4abe              LDR      r2,|L1.14504|
0035ae  f44f6c61          MOV      r12,#0xe10
0035b2  8812              LDRH     r2,[r2,#0]  ; APV_ON2_TIME
0035b4  fb02f20c          MUL      r2,r2,r12
0035b8  f8a02060          STRH     r2,[r0,#0x60]
                  |L1.13756|
;;;4309   					}
;;;4310   				}
;;;4311   			
;;;4312   			}
;;;4313   		}
;;;4314   	if(bps[i]._apv_timer_2_lev)
0035bc  f8b02060          LDRH     r2,[r0,#0x60]
0035c0  b14a              CBZ      r2,|L1.13782|
;;;4315   		{
;;;4316   		bps[i]._apv_timer_2_lev--;
0035c2  f1a20201          SUB      r2,r2,#1
0035c6  b292              UXTH     r2,r2
0035c8  f8a02060          STRH     r2,[r0,#0x60]
;;;4317   		if(bps[i]._apv_timer_2_lev==0)
0035cc  b91a              CBNZ     r2,|L1.13782|
;;;4318   			{
;;;4319   			bps[i]._apv_cnt_1_lev=2;
0035ce  f880805f          STRB     r8,[r0,#0x5f]
;;;4320   			bps[i]._apv_timer_1_lev=60;
0035d2  f880705e          STRB     r7,[r0,#0x5e]
                  |L1.13782|
;;;4321   			}
;;;4322   		}
;;;4323   
;;;4324   	if(bps[i]._apv_reset_av_timer)bps[i]._apv_reset_av_timer--;
0035d6  f8902062          LDRB     r2,[r0,#0x62]
0035da  b11a              CBZ      r2,|L1.13796|
0035dc  f1a20201          SUB      r2,r2,#1
0035e0  f8802062          STRB     r2,[r0,#0x62]
                  |L1.13796|
0035e4  f1010101          ADD      r1,r1,#1              ;4259
0035e8  75f1              STRB     r1,[r6,#0x17]         ;4259
                  |L1.13802|
0035ea  7df0              LDRB     r0,[r6,#0x17]         ;4259  ; i
0035ec  f9b91000          LDRSH    r1,[r9,#0]            ;4259  ; NUMIST
0035f0  4288              CMP      r0,r1                 ;4259
0035f2  db80              BLT      |L1.13558|
;;;4325   	} 
;;;4326   /*char i;
;;;4327   for(i=0;i<2;i++) 
;;;4328   	{
;;;4329   	if(apv_cnt_sec[i])
;;;4330   		{
;;;4331   		apv_cnt_sec[i]--;
;;;4332   		if(apv_cnt_sec[i]==0)
;;;4333   			{
;;;4334   			cnt_av_umax[i]=0;
;;;4335   			cnt_av_umin[i]=0;
;;;4336   			reset_apv_cnt[i]=600;
;;;4337   			}
;;;4338   		}
;;;4339   	
;;;4340   	if(reset_apv_cnt[i])
;;;4341   		{
;;;4342   		reset_apv_cnt[i]--;
;;;4343   		if(reset_apv_cnt[i]==0)
;;;4344   			{
;;;4345   			apv_cnt[i]=0;
;;;4346   			}
;;;4347   		}	
;;;4348   		
;;;4349   	if(hour_apv_cnt[i])
;;;4350   		{
;;;4351   		hour_apv_cnt[i]--;
;;;4352   		if(hour_apv_cnt[i]==0)
;;;4353   			{
;;;4354   			apv_cnt[i]=0;
;;;4355   			avar_src_reset(i);
;;;4356   			}
;;;4357   		}			
;;;4358   	}
;;;4359   
;;;4360   
;;;4361   
;;;4362   
;;;4363   if(apv_cnt_1)
;;;4364   	{
;;;4365   	apv_cnt_1--;
;;;4366   	if(!apv_cnt_1) 
;;;4367   		{
;;;4368   		avar_src_reset(0);
;;;4369   		avar_src_reset(1);
;;;4370   		//cntrl_stat=0;
;;;4371   		}
;;;4372   	}*/		
;;;4373   }
0035f4  e8bd83f0          POP      {r4-r9,pc}
;;;4374   
                          ENDP

                  adc_init PROC
;;;4375   //-----------------------------------------------
;;;4376   void adc_init(void)
0035f8  48b1              LDR      r0,|L1.14528|
;;;4377   {
;;;4378   
;;;4379   SET_REG(LPC_PINCON->PINSEL1,1,(25-16)*2,2);
0035fa  6841              LDR      r1,[r0,#4]
0035fc  f4212140          BIC      r1,r1,#0xc0000
003600  f4412180          ORR      r1,r1,#0x40000
003604  6041              STR      r1,[r0,#4]
;;;4380   SET_REG(LPC_PINCON->PINSEL1,1,(24-16)*2,2);
003606  6841              LDR      r1,[r0,#4]
003608  f4213140          BIC      r1,r1,#0x30000
00360c  f4413180          ORR      r1,r1,#0x10000
003610  6041              STR      r1,[r0,#4]
;;;4381   SET_REG(LPC_PINCON->PINSEL1,1,(23-16)*2,2);
003612  6841              LDR      r1,[r0,#4]
003614  f4214140          BIC      r1,r1,#0xc000
003618  f4414180          ORR      r1,r1,#0x4000
00361c  6041              STR      r1,[r0,#4]
;;;4382   
;;;4383   
;;;4384   SET_REG(LPC_PINCON->PINMODE1,2,(25-16)*2,2);
00361e  6c41              LDR      r1,[r0,#0x44]
003620  f4212140          BIC      r1,r1,#0xc0000
003624  f4412100          ORR      r1,r1,#0x80000
003628  6441              STR      r1,[r0,#0x44]
;;;4385   SET_REG(LPC_PINCON->PINMODE1,2,(24-16)*2,2);
00362a  6c41              LDR      r1,[r0,#0x44]
00362c  f4213140          BIC      r1,r1,#0x30000
003630  f4413100          ORR      r1,r1,#0x20000
003634  6441              STR      r1,[r0,#0x44]
;;;4386   SET_REG(LPC_PINCON->PINMODE1,2,(23-16)*2,2);
003636  6c41              LDR      r1,[r0,#0x44]
003638  f4214140          BIC      r1,r1,#0xc000
00363c  f4414100          ORR      r1,r1,#0x8000
003640  6441              STR      r1,[r0,#0x44]
;;;4387   
;;;4388   SET_REG(LPC_ADC->ADCR,0,24,3);
003642  48a0              LDR      r0,|L1.14532|
003644  6801              LDR      r1,[r0,#0]
003646  f02161e0          BIC      r1,r1,#0x7000000
00364a  6001              STR      r1,[r0,#0]
;;;4389   
;;;4390   SET_REG(LPC_ADC->ADCR,1,21,1);
00364c  6801              LDR      r1,[r0,#0]
00364e  f4411100          ORR      r1,r1,#0x200000
003652  6001              STR      r1,[r0,#0]
;;;4391   SET_REG(LPC_ADC->ADCR,0,16,1);
003654  6801              LDR      r1,[r0,#0]
003656  f4213180          BIC      r1,r1,#0x10000
00365a  6001              STR      r1,[r0,#0]
;;;4392   SET_REG(LPC_ADC->ADCR,1,8,8);
00365c  6801              LDR      r1,[r0,#0]
00365e  f421417f          BIC      r1,r1,#0xff00
003662  f4417180          ORR      r1,r1,#0x100
003666  6001              STR      r1,[r0,#0]
;;;4393   
;;;4394   //SET_REG(LPC_GPIO0->FIODIR,7,5,3);
;;;4395   //SET_REG(LPC_GPIO0->FIOPIN,4,5,3);
;;;4396   	
;;;4397   	/*if(adc_ch<=7)*///SET_REG(LPC_ADC->ADCR,1<<5,0,8);
;;;4398        /*else if(adc_ch==8) SET_REG(LPC_ADC->ADCR,1<<2,0,8);
;;;4399        else SET_REG(LPC_ADC->ADCR,1<<4,0,8);*/
;;;4400   
;;;4401   LPC_ADC->ADINTEN     =  (1<< 8);      /* global enable interrupt            */
003668  f44f7180          MOV      r1,#0x100
00366c  60c1              STR      r1,[r0,#0xc]
00366e  4896              LDR      r0,|L1.14536|
003670  f44f0180          MOV      r1,#0x400000
003674  6001              STR      r1,[r0,#0]
;;;4402   
;;;4403   NVIC_EnableIRQ(ADC_IRQn);             /* enable ADC Interrupt               */
;;;4404   
;;;4405   
;;;4406   }
003676  4770              BX       lr
;;;4407   
                          ENDP

                  adc_drv7 PROC
;;;4408   //-----------------------------------------------
;;;4409   void adc_drv7(void) //(Uсети - постоянка)
003678  e92d41f0          PUSH     {r4-r8,lr}
;;;4410   {
;;;4411   //int temp_S;
;;;4412   //char i;
;;;4413   //signed short temp_SS;
;;;4414   
;;;4415   adc_self_ch_disp[0]=abs_pal(adc_self_ch_buff[1]-adc_self_ch_buff[0]);//adc_self_ch_buff[0]&0x0f80;
00367c  4c8c              LDR      r4,|L1.14512|
00367e  34f2              ADDS     r4,r4,#0xf2
003680  8860              LDRH     r0,[r4,#2]  ; adc_self_ch_buff
003682  8821              LDRH     r1,[r4,#0]  ; adc_self_ch_buff
003684  1a40              SUBS     r0,r0,r1
003686  b200              SXTH     r0,r0
003688  f7fffffe          BL       abs_pal
00368c  1da6              ADDS     r6,r4,#6
00368e  8030              STRH     r0,[r6,#0]
;;;4416   adc_self_ch_disp[1]=abs_pal(adc_self_ch_buff[2]-adc_self_ch_buff[1]);//adc_self_ch_buff[1]&0x0f80;
003690  88a0              LDRH     r0,[r4,#4]  ; adc_self_ch_buff
003692  8861              LDRH     r1,[r4,#2]  ; adc_self_ch_buff
003694  1a40              SUBS     r0,r0,r1
003696  b200              SXTH     r0,r0
003698  f7fffffe          BL       abs_pal
00369c  8070              STRH     r0,[r6,#2]
;;;4417   adc_self_ch_disp[2]=abs_pal(adc_self_ch_buff[2]-adc_self_ch_buff[0]);//adc_self_ch_buff[2]&0x0f80;
00369e  88a0              LDRH     r0,[r4,#4]  ; adc_self_ch_buff
0036a0  8821              LDRH     r1,[r4,#0]  ; adc_self_ch_buff
0036a2  1a40              SUBS     r0,r0,r1
0036a4  b200              SXTH     r0,r0
0036a6  f7fffffe          BL       abs_pal
0036aa  80b0              STRH     r0,[r6,#4]
;;;4418   
;;;4419   //adc_self_ch_disp[0]=adc_self_ch_buff[0]&0x0ff0;
;;;4420   //adc_self_ch_disp[1]=adc_self_ch_buff[1]&0x0ff0;
;;;4421   //adc_self_ch_disp[2]=adc_self_ch_buff[2]&0x0ff0;
;;;4422   
;;;4423   
;;;4424   if(adc_self_ch_disp[2]<300)//==adc_self_ch_disp[2])
0036ac  f44f7196          MOV      r1,#0x12c
;;;4425   	{
;;;4426   	adc_result=adc_self_ch_buff[2];
0036b0  4d7f              LDR      r5,|L1.14512|
0036b2  4288              CMP      r0,r1                 ;4424
0036b4  da02              BGE      |L1.14012|
0036b6  88a0              LDRH     r0,[r4,#4]  ; adc_self_ch_buff
0036b8  87a8              STRH     r0,[r5,#0x3c]
0036ba  e00c              B        |L1.14038|
                  |L1.14012|
;;;4427   	} 
;;;4428   else if(adc_self_ch_disp[1]<300)//==adc_self_ch_disp[2])
0036bc  f9b60002          LDRSH    r0,[r6,#2]  ; adc_self_ch_disp
0036c0  4288              CMP      r0,r1
0036c2  da02              BGE      |L1.14026|
;;;4429   	{
;;;4430   	adc_result=adc_self_ch_buff[1];
0036c4  8860              LDRH     r0,[r4,#2]  ; adc_self_ch_buff
0036c6  87a8              STRH     r0,[r5,#0x3c]
0036c8  e005              B        |L1.14038|
                  |L1.14026|
;;;4431   	}
;;;4432   else if(adc_self_ch_disp[0]<300)//==adc_self_ch_disp[1])
0036ca  f9b60000          LDRSH    r0,[r6,#0]  ; adc_self_ch_disp
0036ce  4288              CMP      r0,r1
0036d0  da01              BGE      |L1.14038|
;;;4433   	{
;;;4434   	adc_result=adc_self_ch_buff[0];
0036d2  8820              LDRH     r0,[r4,#0]  ; adc_self_ch_buff
0036d4  87a8              STRH     r0,[r5,#0x3c]
                  |L1.14038|
;;;4435   	}
;;;4436       //adc_result=92;
;;;4437   
;;;4438   if(adc_ch_net)
0036d6  7c6f              LDRB     r7,[r5,#0x11]  ; adc_ch_net
0036d8  2600              MOVS     r6,#0
0036da  b347              CBZ      r7,|L1.14126|
;;;4439   	{
;;;4440   
;;;4441   	main_power_buffer[0]+=(long)(adc_result);
0036dc  487b              LDR      r0,|L1.14540|
0036de  f9b5103c          LDRSH    r1,[r5,#0x3c]  ; adc_result
0036e2  6802              LDR      r2,[r0,#0]  ; main_power_buffer
0036e4  440a              ADD      r2,r2,r1
0036e6  6002              STR      r2,[r0,#0]  ; main_power_buffer
;;;4442   	main_power_buffer[1]+=(long)(adc_result);
0036e8  6842              LDR      r2,[r0,#4]  ; main_power_buffer
0036ea  440a              ADD      r2,r2,r1
0036ec  6042              STR      r2,[r0,#4]  ; main_power_buffer
;;;4443   	main_power_buffer[2]+=(long)(adc_result);
0036ee  6882              LDR      r2,[r0,#8]  ; main_power_buffer
0036f0  440a              ADD      r2,r2,r1
0036f2  6082              STR      r2,[r0,#8]  ; main_power_buffer
;;;4444   	main_power_buffer[3]+=(long)(adc_result);
0036f4  68c2              LDR      r2,[r0,#0xc]  ; main_power_buffer
0036f6  4411              ADD      r1,r1,r2
0036f8  60c1              STR      r1,[r0,#0xc]  ; main_power_buffer
;;;4445   
;;;4446   	adc_net_buff_cnt++;
0036fa  f8b51044          LDRH     r1,[r5,#0x44]  ; adc_net_buff_cnt
0036fe  f1010101          ADD      r1,r1,#1
003702  b209              SXTH     r1,r1
003704  f8a51044          STRH     r1,[r5,#0x44]
;;;4447   	if(adc_net_buff_cnt>=0x1000)
003708  f5b15f80          CMP      r1,#0x1000
00370c  db01              BLT      |L1.14098|
;;;4448   		{
;;;4449   		adc_net_buff_cnt=0;
00370e  f8a56044          STRH     r6,[r5,#0x44]
                  |L1.14098|
;;;4450   		}
;;;4451   	if((adc_net_buff_cnt&0x03ff)==0)
003712  f9b51044          LDRSH    r1,[r5,#0x44]  ; adc_net_buff_cnt
003716  058a              LSLS     r2,r1,#22
003718  d131              BNE      |L1.14206|
;;;4452   		{
;;;4453   		#ifdef UKU_220
;;;4454   		net_buff_=(short)((main_power_buffer[adc_net_buff_cnt>>10])>>11);
;;;4455   		#else
;;;4456   		#ifdef UKU_220_V2
;;;4457   		net_buff_=(short)((main_power_buffer[adc_net_buff_cnt>>10])>>11);
;;;4458   		#else
;;;4459   		net_buff_=(short)((main_power_buffer[adc_net_buff_cnt>>10])>>8);
00371a  ea4f21a1          ASR      r1,r1,#10
00371e  f8502021          LDR      r2,[r0,r1,LSL #2]
003722  ea4f2222          ASR      r2,r2,#8
003726  876a              STRH     r2,[r5,#0x3a]
;;;4460   		#endif
;;;4461   		#endif
;;;4462   		main_power_buffer[adc_net_buff_cnt>>10]=0;
003728  f8406021          STR      r6,[r0,r1,LSL #2]
00372c  e027              B        |L1.14206|
                  |L1.14126|
;;;4463   		}
;;;4464   
;;;4465   
;;;4466   	} 
;;;4467   else if(!adc_ch_net)
;;;4468   	{
;;;4469   	adc_buff[adc_ch][adc_ch_cnt]=(long)adc_result;
00372e  4868              LDR      r0,|L1.14544|
003730  7cac              LDRB     r4,[r5,#0x12]  ; adc_ch
003732  7cea              LDRB     r2,[r5,#0x13]  ; adc_ch_cnt
003734  eb001384          ADD      r3,r0,r4,LSL #6
003738  f9b5103c          LDRSH    r1,[r5,#0x3c]  ; adc_result
00373c  f8431022          STR      r1,[r3,r2,LSL #2]
;;;4470   	
;;;4471   	if((adc_ch_cnt&0x03)==0)
003740  0790              LSLS     r0,r2,#30
003742  d10f              BNE      |L1.14180|
;;;4472   		{
;;;4473   		long temp_L;
;;;4474   		char i;
;;;4475   		temp_L=0;
003744  4601              MOV      r1,r0
                  |L1.14150|
;;;4476   		for(i=0;i<16;i++)
;;;4477   			{
;;;4478   			temp_L+=adc_buff[adc_ch][i];
003746  f853c020          LDR      r12,[r3,r0,LSL #2]
00374a  4461              ADD      r1,r1,r12
00374c  f1000001          ADD      r0,r0,#1              ;4476
003750  b2c0              UXTB     r0,r0                 ;4476
003752  2810              CMP      r0,#0x10              ;4476
003754  d3f7              BCC      |L1.14150|
;;;4479   			}
;;;4480   		adc_buff_[adc_ch]= (short)(temp_L>>4);
003756  ea4f1021          ASR      r0,r1,#4
00375a  495c              LDR      r1,|L1.14540|
00375c  f1a10120          SUB      r1,r1,#0x20
003760  f8210014          STRH     r0,[r1,r4,LSL #1]
                  |L1.14180|
;;;4481   
;;;4482   		//adc_buff_[3]=346;
;;;4483   		}
;;;4484   	if(++adc_ch>=16) 
003764  1c64              ADDS     r4,r4,#1
003766  b2e0              UXTB     r0,r4
003768  74a8              STRB     r0,[r5,#0x12]
00376a  2810              CMP      r0,#0x10
00376c  d307              BCC      |L1.14206|
;;;4485   		{
;;;4486   		adc_ch=0;
00376e  74ae              STRB     r6,[r5,#0x12]
;;;4487   		adc_ch_cnt++;
003770  f1020201          ADD      r2,r2,#1
003774  b2d0              UXTB     r0,r2
003776  74e8              STRB     r0,[r5,#0x13]
;;;4488   		if(adc_ch_cnt>=16)adc_ch_cnt=0;
003778  2810              CMP      r0,#0x10
00377a  d300              BCC      |L1.14206|
00377c  74ee              STRB     r6,[r5,#0x13]
                  |L1.14206|
;;;4489   		}
;;;4490   	}
;;;4491   
;;;4492   //adc_buff[adc_ch][adc_cnt1]=(adc_self_ch_buff[2]+adc_self_ch_buff[1])/2;
;;;4493   
;;;4494   //if(adc_buff[adc_ch][adc_cnt1]<adc_buff_min[adc_ch])adc_buff_min[adc_ch]=adc_buff[adc_ch][adc_cnt1];
;;;4495   //if(adc_buff[adc_ch][adc_cnt1]>adc_buff_max[adc_ch])adc_buff_max[adc_ch]=adc_buff[adc_ch][adc_cnt1];
;;;4496   /*
;;;4497   	{
;;;4498   	if((adc_cnt1&0x03)==0)
;;;4499   		{
;;;4500   		temp_S=0;
;;;4501   		for(i=0;i<16;i++)
;;;4502   			{
;;;4503   			temp_S+=adc_buff[adc_ch][i];
;;;4504   			} 
;;;4505            	adc_buff_[adc_ch]=temp_S>>4;
;;;4506             }
;;;4507   	}*/
;;;4508   
;;;4509   
;;;4510   		  
;;;4511   
;;;4512   adc_self_ch_cnt=0;
00377e  742e              STRB     r6,[r5,#0x10]
;;;4513   
;;;4514   adc_ch_net++;
003780  f1070701          ADD      r7,r7,#1
;;;4515   adc_ch_net&=1;
003784  f0070001          AND      r0,r7,#1
003788  7468              STRB     r0,[r5,#0x11]
;;;4516   
;;;4517   //SET_REG(LPC_GPIO0->FIODIR,7,5,3);
;;;4518   //SET_REG(LPC_GPIO0->FIOPIN,adc_ch,5,3);
;;;4519   
;;;4520   if(adc_ch_net)
;;;4521   	{
;;;4522   	//LPC_GPIO2->FIODIR|=(1<<7);
;;;4523   	//LPC_GPIO2->FIOPIN|=(1<<7);
;;;4524   	SET_REG(LPC_ADC->ADCR,1<<2,0,8);
00378a  4a4e              LDR      r2,|L1.14532|
00378c  b130              CBZ      r0,|L1.14236|
00378e  6810              LDR      r0,[r2,#0]
003790  f02000ff          BIC      r0,r0,#0xff
003794  f1000004          ADD      r0,r0,#4
003798  6010              STR      r0,[r2,#0]
00379a  e03d              B        |L1.14360|
                  |L1.14236|
;;;4525   	}
;;;4526   else
;;;4527   	{
;;;4528   	//LPC_GPIO2->FIODIR|=(1<<7);
;;;4529   	//LPC_GPIO2->FIOPIN&=~(1<<7);
;;;4530   	if(!(adc_ch&(1<<3)))SET_REG(LPC_ADC->ADCR,1<<0,0,8);
00379c  7ca9              LDRB     r1,[r5,#0x12]  ; adc_ch
00379e  0708              LSLS     r0,r1,#28
0037a0  d406              BMI      |L1.14256|
0037a2  6810              LDR      r0,[r2,#0]
0037a4  f02000ff          BIC      r0,r0,#0xff
0037a8  f1000001          ADD      r0,r0,#1
0037ac  6010              STR      r0,[r2,#0]
0037ae  e005              B        |L1.14268|
                  |L1.14256|
;;;4531   	else 			SET_REG(LPC_ADC->ADCR,1<<1,0,8);
0037b0  6810              LDR      r0,[r2,#0]
0037b2  f02000ff          BIC      r0,r0,#0xff
0037b6  f1000002          ADD      r0,r0,#2
0037ba  6010              STR      r0,[r2,#0]
                  |L1.14268|
;;;4532   
;;;4533   
;;;4534   	SET_REG(LPC_GPIO0->FIODIR,1,28,1);
0037bc  4845              LDR      r0,|L1.14548|
0037be  6803              LDR      r3,[r0,#0]
0037c0  f0435380          ORR      r3,r3,#0x10000000
0037c4  6003              STR      r3,[r0,#0]
;;;4535   	SET_REG(LPC_GPIO1->FIODIR,1,30,1);
0037c6  6a03              LDR      r3,[r0,#0x20]
0037c8  f0434380          ORR      r3,r3,#0x40000000
0037cc  6203              STR      r3,[r0,#0x20]
;;;4536   	SET_REG(LPC_GPIO3->FIODIR,1,26,1);
0037ce  6e03              LDR      r3,[r0,#0x60]
0037d0  f0436380          ORR      r3,r3,#0x4000000
0037d4  6603              STR      r3,[r0,#0x60]
;;;4537   
;;;4538   	if(!(adc_ch&(1<<0)))SET_REG(LPC_GPIO0->FIOPIN,0,28,1);
0037d6  07cb              LSLS     r3,r1,#31
0037d8  d00a              BEQ      |L1.14320|
;;;4539   	else 			SET_REG(LPC_GPIO0->FIOPIN,1,28,1);
0037da  6943              LDR      r3,[r0,#0x14]
0037dc  f0435380          ORR      r3,r3,#0x10000000
0037e0  6143              STR      r3,[r0,#0x14]
                  |L1.14306|
;;;4540   
;;;4541   	if(!(adc_ch&(1<<1)))SET_REG(LPC_GPIO1->FIOPIN,0,30,1);
0037e2  078b              LSLS     r3,r1,#30
0037e4  d409              BMI      |L1.14330|
0037e6  6b43              LDR      r3,[r0,#0x34]
0037e8  f0234380          BIC      r3,r3,#0x40000000
0037ec  6343              STR      r3,[r0,#0x34]
0037ee  e008              B        |L1.14338|
                  |L1.14320|
0037f0  6943              LDR      r3,[r0,#0x14]         ;4538
0037f2  f0235380          BIC      r3,r3,#0x10000000     ;4538
0037f6  6143              STR      r3,[r0,#0x14]         ;4538
0037f8  e7f3              B        |L1.14306|
                  |L1.14330|
;;;4542   	else 			SET_REG(LPC_GPIO1->FIOPIN,1,30,1);
0037fa  6b43              LDR      r3,[r0,#0x34]
0037fc  f0434380          ORR      r3,r3,#0x40000000
003800  6343              STR      r3,[r0,#0x34]
                  |L1.14338|
;;;4543   
;;;4544   	if(!(adc_ch&(1<<2)))SET_REG(LPC_GPIO3->FIOPIN,0,26,1);
003802  0749              LSLS     r1,r1,#29
003804  d404              BMI      |L1.14352|
003806  6f41              LDR      r1,[r0,#0x74]
003808  f0216180          BIC      r1,r1,#0x4000000
00380c  6741              STR      r1,[r0,#0x74]
00380e  e003              B        |L1.14360|
                  |L1.14352|
;;;4545   	else 			SET_REG(LPC_GPIO3->FIOPIN,1,26,1);
003810  6f41              LDR      r1,[r0,#0x74]
003812  f0416180          ORR      r1,r1,#0x4000000
003816  6741              STR      r1,[r0,#0x74]
                  |L1.14360|
;;;4546   	}
;;;4547   	
;;;4548   
;;;4549   
;;;4550   
;;;4551   LPC_ADC->ADCR |=  (1<<24);
003818  6810              LDR      r0,[r2,#0]
00381a  f0407080          ORR      r0,r0,#0x1000000
00381e  6010              STR      r0,[r2,#0]
                  |L1.14368|
;;;4552   
;;;4553   }
003820  e8bd81f0          POP      {r4-r8,pc}
;;;4554   
                          ENDP

                  avg_hndl PROC
;;;4811   //-----------------------------------------------
;;;4812   void avg_hndl(void)
003824  e92d41f0          PUSH     {r4-r8,lr}
;;;4813   { 
;;;4814   char i;
;;;4815   
;;;4816   //#define AVGCNTMAX	5
;;;4817   if(avg_main_cnt)
003828  4d21              LDR      r5,|L1.14512|
00382a  f9b50036          LDRSH    r0,[r5,#0x36]  ; avg_main_cnt
00382e  b118              CBZ      r0,|L1.14392|
;;;4818   	{
;;;4819   	avg_main_cnt--;
003830  f1a00001          SUB      r0,r0,#1
003834  86e8              STRH     r0,[r5,#0x36]
;;;4820   	//goto avg_hndl_end;
;;;4821   	return;
;;;4822   	}                 
;;;4823   
;;;4824   avg_main_cnt=5;
;;;4825   avg_num=0;
;;;4826   
;;;4827   for(i=0;i<NUMIST;i++)
;;;4828   	{
;;;4829   	if((bps[i]._state==bsWRK)&&(bps[i]._cnt<20))avg_num++;
;;;4830   	}
;;;4831   
;;;4832   /*if((K[NUMI]>=1)&&(bps_state[0]==ssWRK))	avg_num++;
;;;4833   if((K[NUMI]>=2)&&(bps_state[1]==ssWRK))	avg_num++;
;;;4834   if((K[NUMI]>=3)&&(bps_state[2]==ssWRK))	avg_num++;*/
;;;4835   
;;;4836   if(avg_vektor) avg_vektor=0;
;;;4837   else avg_vektor=1;
;;;4838   	
;;;4839   if(avg_num<2)
;;;4840   	{
;;;4841   	//goto avg_hndl_end;
;;;4842   	return;
;;;4843   	}
;;;4844   	
;;;4845   else
;;;4846   	{
;;;4847   	i_avg_min=5000;
;;;4848   	i_avg_max=0;
;;;4849   	i_avg_summ=0;
;;;4850   	for(i=0;i<NUMIST;i++)
;;;4851   		{
;;;4852   		if(bps[i]._state==bsWRK)
;;;4853   			{
;;;4854   			if(bps[i]._Ii>i_avg_max)i_avg_max=bps[i]._Ii;
;;;4855   			if(bps[i]._Ii<i_avg_min)i_avg_min=bps[i]._Ii;
;;;4856   			
;;;4857   			i_avg_summ+=bps[i]._Ii;
;;;4858   			}
;;;4859   		}
;;;4860   	i_avg=i_avg_summ/avg_num;	
;;;4861   	
;;;4862   	if(i_avg_min==0)i_avg_min=1;
;;;4863   
;;;4864   	avg=i_avg_max;
;;;4865   	avg*=100;
;;;4866   	avg/=i_avg_min;
;;;4867   
;;;4868   	if(avg>130) bAVG=1;
;;;4869   	if(avg<110) bAVG=0;
;;;4870   
;;;4871   	if(bAVG==1)
;;;4872   		{
;;;4873   		for(i=0;i<NUMIST;i++)
;;;4874   			{
;;;4875   			if(bps[i]._state==bsWRK)
;;;4876   				{
;;;4877   				if((bps[i]._Ii>i_avg)&&(!avg_vektor))bps[i]._x_--;
;;;4878   				if((bps[i]._Ii<i_avg)&&(avg_vektor))bps[i]._x_++;
;;;4879   			
;;;4880   				if(bps[i]._x_<-50)bps[i]._x_=-50;
;;;4881   				if(bps[i]._x_>50)bps[i]._x_=50;	
;;;4882   				}
;;;4883   			}		
;;;4884   		}			
;;;4885   	}   	 
;;;4886   
;;;4887   
;;;4888   avg_hndl_end:
;;;4889   __nop();  
;;;4890   }
003836  e7f3              B        |L1.14368|
                  |L1.14392|
003838  f04f0005          MOV      r0,#5                 ;4824
00383c  86e8              STRH     r0,[r5,#0x36]         ;4824
00383e  f04f0700          MOV      r7,#0                 ;4825
003842  76af              STRB     r7,[r5,#0x1a]         ;4825
003844  f04f0000          MOV      r0,#0                 ;4827
003848  491b              LDR      r1,|L1.14520|
00384a  4c18              LDR      r4,|L1.14508|
00384c  f9b12000          LDRSH    r2,[r1,#0]            ;4827
003850  e012              B        |L1.14456|
                  |L1.14418|
003852  eb0001c0          ADD      r1,r0,r0,LSL #3       ;4829
003856  eb011100          ADD      r1,r1,r0,LSL #4       ;4829
00385a  eb040181          ADD      r1,r4,r1,LSL #2       ;4829
00385e  788b              LDRB     r3,[r1,#2]            ;4829
003860  2b01              CMP      r3,#1                 ;4829
003862  d106              BNE      |L1.14450|
003864  78c9              LDRB     r1,[r1,#3]            ;4829
003866  2914              CMP      r1,#0x14              ;4829
003868  d203              BCS      |L1.14450|
00386a  7ea9              LDRB     r1,[r5,#0x1a]         ;4829  ; avg_num
00386c  f1010101          ADD      r1,r1,#1              ;4829
003870  76a9              STRB     r1,[r5,#0x1a]         ;4829
                  |L1.14450|
003872  f1000001          ADD      r0,r0,#1              ;4827
003876  b2c0              UXTB     r0,r0                 ;4827
                  |L1.14456|
003878  4290              CMP      r0,r2                 ;4827
00387a  dbea              BLT      |L1.14418|
00387c  7ee8              LDRB     r0,[r5,#0x1b]         ;4836  ; avg_vektor
00387e  f04f0c01          MOV      r12,#1                ;4829
003882  b108              CBZ      r0,|L1.14472|
003884  76ef              STRB     r7,[r5,#0x1b]         ;4836
003886  e001              B        |L1.14476|
                  |L1.14472|
003888  f885c01b          STRB     r12,[r5,#0x1b]        ;4837
                  |L1.14476|
00388c  7eae              LDRB     r6,[r5,#0x1a]         ;4839  ; avg_num
00388e  2e02              CMP      r6,#2                 ;4839
003890  d3c6              BCC      |L1.14368|
003892  4b07              LDR      r3,|L1.14512|
003894  f2413088          MOV      r0,#0x1388            ;4847
003898  f1030380          ADD      r3,r3,#0x80           ;4847
00389c  61d8              STR      r0,[r3,#0x1c]         ;4847  ; i_avg_min
00389e  619f              STR      r7,[r3,#0x18]         ;4848  ; i_avg_max
0038a0  621f              STR      r7,[r3,#0x20]         ;4849  ; i_avg_summ
0038a2  f04f0100          MOV      r1,#0                 ;4850
0038a6  e034              B        |L1.14610|
                  |L1.14504|
                          DCD      APV_ON2_TIME
                  |L1.14508|
                          DCD      bps
                  |L1.14512|
                          DCD      ||area_number.25||
                  |L1.14516|
                          DCD      APV_ON2
                  |L1.14520|
                          DCD      NUMIST
                  |L1.14524|
                          DCD      APV_ON1
                  |L1.14528|
                          DCD      0x4002c000
                  |L1.14532|
                          DCD      0x40034000
                  |L1.14536|
                          DCD      0xe000e100
                  |L1.14540|
                          DCD      ||.bss||+0x42c
                  |L1.14544|
                          DCD      ||.bss||+0xc
                  |L1.14548|
                          DCD      0x2009c000
                  |L1.14552|
0038d8  eb0100c1          ADD      r0,r1,r1,LSL #3       ;4852
0038dc  eb001001          ADD      r0,r0,r1,LSL #4       ;4852
0038e0  eb040080          ADD      r0,r4,r0,LSL #2       ;4852
0038e4  f8908002          LDRB     r8,[r0,#2]            ;4852
0038e8  f1b80f01          CMP      r8,#1                 ;4852
0038ec  d10e              BNE      |L1.14604|
0038ee  6a40              LDR      r0,[r0,#0x24]         ;4854
0038f0  f8d38018          LDR      r8,[r3,#0x18]         ;4854  ; i_avg_max
0038f4  4540              CMP      r0,r8                 ;4854
0038f6  dd00              BLE      |L1.14586|
0038f8  6198              STR      r0,[r3,#0x18]         ;4854  ; i_avg_max
                  |L1.14586|
0038fa  f8d3801c          LDR      r8,[r3,#0x1c]         ;4855  ; i_avg_min
0038fe  4540              CMP      r0,r8                 ;4855
003900  da00              BGE      |L1.14596|
003902  61d8              STR      r0,[r3,#0x1c]         ;4855  ; i_avg_min
                  |L1.14596|
003904  f8d38020          LDR      r8,[r3,#0x20]         ;4857  ; i_avg_summ
003908  4440              ADD      r0,r0,r8              ;4857
00390a  6218              STR      r0,[r3,#0x20]         ;4857  ; i_avg_summ
                  |L1.14604|
00390c  f1010101          ADD      r1,r1,#1              ;4850
003910  b2c9              UXTB     r1,r1                 ;4850
                  |L1.14610|
003912  4291              CMP      r1,r2                 ;4850
003914  dbe0              BLT      |L1.14552|
003916  6a18              LDR      r0,[r3,#0x20]         ;4860  ; i_avg_summ
003918  fb90f6f6          SDIV     r6,r0,r6              ;4860
00391c  625e              STR      r6,[r3,#0x24]         ;4860  ; i_avg
00391e  69d8              LDR      r0,[r3,#0x1c]         ;4862  ; i_avg_min
003920  b908              CBNZ     r0,|L1.14630|
003922  f8c3c01c          STR      r12,[r3,#0x1c]        ;4862  ; i_avg_min
                  |L1.14630|
003926  6998              LDR      r0,[r3,#0x18]         ;4864  ; i_avg_max
003928  f04f0164          MOV      r1,#0x64              ;4865
00392c  fb00f001          MUL      r0,r0,r1              ;4865
003930  69d9              LDR      r1,[r3,#0x1c]         ;4866  ; i_avg_min
003932  fb90f0f1          SDIV     r0,r0,r1              ;4866
003936  6298              STR      r0,[r3,#0x28]         ;4866  ; avg
003938  2882              CMP      r0,#0x82              ;4868
00393a  dd01              BLE      |L1.14656|
00393c  f885c019          STRB     r12,[r5,#0x19]        ;4868
                  |L1.14656|
003940  286e              CMP      r0,#0x6e              ;4869
003942  da00              BGE      |L1.14662|
003944  766f              STRB     r7,[r5,#0x19]         ;4869
                  |L1.14662|
003946  7e68              LDRB     r0,[r5,#0x19]         ;4871  ; bAVG
003948  2801              CMP      r0,#1                 ;4871
00394a  d138              BNE      |L1.14782|
00394c  f04f0100          MOV      r1,#0                 ;4873
003950  f06f0731          MVN      r7,#0x31              ;4880
003954  e031              B        |L1.14778|
                  |L1.14678|
003956  eb0100c1          ADD      r0,r1,r1,LSL #3       ;4875
00395a  eb001001          ADD      r0,r0,r1,LSL #4       ;4875
00395e  eb040080          ADD      r0,r4,r0,LSL #2       ;4875
003962  7883              LDRB     r3,[r0,#2]            ;4875
003964  2b01              CMP      r3,#1                 ;4875
003966  d125              BNE      |L1.14772|
003968  6a43              LDR      r3,[r0,#0x24]         ;4877
00396a  42b3              CMP      r3,r6                 ;4877
00396c  dd0a              BLE      |L1.14724|
00396e  f895c01b          LDRB     r12,[r5,#0x1b]        ;4877  ; avg_vektor
003972  f1bc0f00          CMP      r12,#0                ;4877
003976  d105              BNE      |L1.14724|
003978  f8b0c054          LDRH     r12,[r0,#0x54]        ;4877
00397c  f1ac0c01          SUB      r12,r12,#1            ;4877
003980  f8a0c054          STRH     r12,[r0,#0x54]        ;4877
                  |L1.14724|
003984  42b3              CMP      r3,r6                 ;4878
003986  da07              BGE      |L1.14744|
003988  7eeb              LDRB     r3,[r5,#0x1b]         ;4878  ; avg_vektor
00398a  b12b              CBZ      r3,|L1.14744|
00398c  f8b03054          LDRH     r3,[r0,#0x54]         ;4878
003990  f1030301          ADD      r3,r3,#1              ;4878
003994  f8a03054          STRH     r3,[r0,#0x54]         ;4878
                  |L1.14744|
003998  f9b03054          LDRSH    r3,[r0,#0x54]         ;4880
00399c  42bb              CMP      r3,r7                 ;4880
00399e  da01              BGE      |L1.14756|
0039a0  f8a07054          STRH     r7,[r0,#0x54]         ;4880
                  |L1.14756|
0039a4  f9b03054          LDRSH    r3,[r0,#0x54]         ;4881
0039a8  2b32              CMP      r3,#0x32              ;4881
0039aa  dd03              BLE      |L1.14772|
0039ac  f04f0332          MOV      r3,#0x32              ;4881
0039b0  f8a03054          STRH     r3,[r0,#0x54]         ;4881
                  |L1.14772|
0039b4  f1010101          ADD      r1,r1,#1              ;4873
0039b8  b2c9              UXTB     r1,r1                 ;4873
                  |L1.14778|
0039ba  4291              CMP      r1,r2                 ;4873
0039bc  dbcb              BLT      |L1.14678|
                  |L1.14782|
0039be  bf00              NOP                            ;4889
0039c0  e72e              B        |L1.14368|
;;;4891   
                          ENDP

                  rele_hndl PROC
;;;4904   //*************-----------------------------------------------
;;;4905   void rele_hndl(void)
0039c2  e92d5ff0          PUSH     {r4-r12,lr}
;;;4906   {
;;;4907   //static char cnt_rel_sam;
;;;4908   //char temp;
;;;4909   
;;;4910   //temp=0;
;;;4911   
;;;4912   
;;;4913   SET_REG(LPC_PINCON->PINSEL0,0,4*2,6*2);
0039c6  48ff              LDR      r0,|L1.15812|
0039c8  6801              LDR      r1,[r0,#0]
0039ca  4aff              LDR      r2,|L1.15816|
0039cc  ea010102          AND      r1,r1,r2
0039d0  6001              STR      r1,[r0,#0]
;;;4914   SET_REG(LPC_GPIO0->FIODIR,63,4,6);
0039d2  4cfe              LDR      r4,|L1.15820|
0039d4  6821              LDR      r1,[r4,#0]
0039d6  f441717c          ORR      r1,r1,#0x3f0
0039da  6021              STR      r1,[r4,#0]
;;;4915   SET_REG(LPC_PINCON->PINSEL7,0,(25-16)*2,2);
0039dc  69c1              LDR      r1,[r0,#0x1c]
0039de  f4212140          BIC      r1,r1,#0xc0000
0039e2  61c1              STR      r1,[r0,#0x1c]
;;;4916   SET_REG(LPC_GPIO3->FIODIR,1,25,1);
0039e4  6e21              LDR      r1,[r4,#0x60]
0039e6  f0417100          ORR      r1,r1,#0x2000000
0039ea  6621              STR      r1,[r4,#0x60]
;;;4917   SET_REG(LPC_PINCON->PINSEL1,0,(29-16)*2,2);
0039ec  6841              LDR      r1,[r0,#4]
0039ee  f0216140          BIC      r1,r1,#0xc000000
0039f2  6041              STR      r1,[r0,#4]
;;;4918   SET_REG(LPC_GPIO0->FIODIR,1,29,1);
0039f4  6820              LDR      r0,[r4,#0]
0039f6  f0405000          ORR      r0,r0,#0x20000000
0039fa  6020              STR      r0,[r4,#0]
;;;4919   
;;;4920   
;;;4921   
;;;4922   
;;;4923   
;;;4924   
;;;4925   if((((bat[0]._rel_stat)  || (tbatdisable_stat!=tbdsON))&&(tbatdisable_cmnd))	&& (main_1Hz_cnt>5))
0039fc  48f5              LDR      r0,|L1.15828|
0039fe  4df4              LDR      r5,|L1.15824|
003a00  49f6              LDR      r1,|L1.15836|
003a02  7802              LDRB     r2,[r0,#0]  ; tbatdisable_stat
003a04  48f4              LDR      r0,|L1.15832|
003a06  f895303c          LDRB     r3,[r5,#0x3c]  ; bat
003a0a  f9b11000          LDRSH    r1,[r1,#0]
003a0e  7800              LDRB     r0,[r0,#0]
003a10  4313              ORRS     r3,r3,r2
003a12  d007              BEQ      |L1.14884|
003a14  b130              CBZ      r0,|L1.14884|
003a16  2905              CMP      r1,#5
003a18  dd04              BLE      |L1.14884|
;;;4926   	{
;;;4927   	SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_BAT1,1);
003a1a  69a3              LDR      r3,[r4,#0x18]
003a1c  f4437380          ORR      r3,r3,#0x100
003a20  61a3              STR      r3,[r4,#0x18]
003a22  e003              B        |L1.14892|
                  |L1.14884|
;;;4928   	}
;;;4929   else SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_BAT1,1);	  	
003a24  69e3              LDR      r3,[r4,#0x1c]
003a26  f4437380          ORR      r3,r3,#0x100
003a2a  61e3              STR      r3,[r4,#0x1c]
                  |L1.14892|
;;;4930   
;;;4931   if((((bat[1]._rel_stat) || (tbatdisable_stat!=tbdsON))&&(tbatdisable_cmnd))	&& (main_1Hz_cnt>5))
003a2c  f8953088          LDRB     r3,[r5,#0x88]  ; bat
003a30  4313              ORRS     r3,r3,r2
003a32  d007              BEQ      |L1.14916|
003a34  b130              CBZ      r0,|L1.14916|
003a36  2905              CMP      r1,#5
003a38  dd04              BLE      |L1.14916|
;;;4932   	{
;;;4933   	SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_BAT2,1);
003a3a  69a0              LDR      r0,[r4,#0x18]
003a3c  f0400040          ORR      r0,r0,#0x40
003a40  61a0              STR      r0,[r4,#0x18]
003a42  e003              B        |L1.14924|
                  |L1.14916|
;;;4934   	}
;;;4935   else SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_BAT2,1);
003a44  69e0              LDR      r0,[r4,#0x1c]
003a46  f0400040          ORR      r0,r0,#0x40
003a4a  61e0              STR      r0,[r4,#0x1c]
                  |L1.14924|
;;;4936   
;;;4937   
;;;4938   if(mess_find_unvol((MESS2RELE_HNDL))&&(mess_data[0]==PARAM_RELE_SAMOKALIBR)) 
003a4c  20d2              MOVS     r0,#0xd2
003a4e  f7fffffe          BL       mess_find_unvol
003a52  4de3              LDR      r5,|L1.15840|
003a54  b110              CBZ      r0,|L1.14940|
003a56  6828              LDR      r0,[r5,#0]  ; mess_data
003a58  2864              CMP      r0,#0x64
003a5a  d048              BEQ      |L1.15086|
                  |L1.14940|
;;;4939   	{
;;;4940   	if(mess_data[1]==1)SET_REG(LPC_GPIO0->FIOSET,1,29,1);
;;;4941   	else if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,29,1);
;;;4942   	}
;;;4943   else SET_REG(LPC_GPIO0->FIOCLR,1,29,1);
003a5c  69e0              LDR      r0,[r4,#0x1c]
003a5e  f0405000          ORR      r0,r0,#0x20000000
003a62  61e0              STR      r0,[r4,#0x1c]
                  |L1.14948|
;;;4944   
;;;4945   
;;;4946   #ifndef UKU2071x
;;;4947   //Реле аварии сети
;;;4948   if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_AV_NET))
;;;4949   	{
;;;4950   	if(mess_data[1]==0) 			SET_REG(LPC_GPIO3->FIOSET,1,SHIFT_REL_AV_NET,1);
;;;4951   	else 						SET_REG(LPC_GPIO3->FIOCLR,1,SHIFT_REL_AV_NET,1);
;;;4952   	}
;;;4953   else	if(!(avar_ind_stat&0x00000001)) 	SET_REG(LPC_GPIO3->FIOSET,1,SHIFT_REL_AV_NET,1);
;;;4954   else 							SET_REG(LPC_GPIO3->FIOCLR,1,SHIFT_REL_AV_NET,1);
;;;4955   #endif
;;;4956   #ifdef UKU2071x
;;;4957   //Реле аварии сети
;;;4958   if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_AV_NET))
003a64  20d2              MOVS     r0,#0xd2
003a66  f7fffffe          BL       mess_find_unvol
;;;4959   	{
;;;4960   	if(mess_data[1]==0)				SET_REG(LPC_GPIO3->FIOCLR,1,SHIFT_REL_AV_NET,1); 
;;;4961   	else 						SET_REG(LPC_GPIO3->FIOSET,1,SHIFT_REL_AV_NET,1);
;;;4962   	}
;;;4963   else	if(!(avar_ind_stat&0x00000001))	SET_REG(LPC_GPIO3->FIOCLR,1,SHIFT_REL_AV_NET,1);
003a6a  4ede              LDR      r6,|L1.15844|
003a6c  b110              CBZ      r0,|L1.14964|
003a6e  6828              LDR      r0,[r5,#0]            ;4958  ; mess_data
003a70  2866              CMP      r0,#0x66              ;4958
003a72  d04b              BEQ      |L1.15116|
                  |L1.14964|
003a74  6830              LDR      r0,[r6,#0]  ; avar_ind_stat
003a76  07c0              LSLS     r0,r0,#31
003a78  d054              BEQ      |L1.15140|
;;;4964   else 					  		SET_REG(LPC_GPIO3->FIOSET,1,SHIFT_REL_AV_NET,1);
003a7a  6fa0              LDR      r0,[r4,#0x78]
003a7c  f0407000          ORR      r0,r0,#0x2000000
003a80  67a0              STR      r0,[r4,#0x78]
                  |L1.14978|
;;;4965   #endif
;;;4966   
;;;4967   #ifdef UKU_3U
;;;4968   //Реле аварий батарей
;;;4969   if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_AV_BAT1))
;;;4970   	{
;;;4971   	if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_BAT1,1);
;;;4972   	else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_BAT1,1);
;;;4973        }
;;;4974   else 
;;;4975   	{
;;;4976   	if(!(avar_ind_stat&0x00000002)) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_BAT1,1);
;;;4977        else SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_BAT1,1);
;;;4978   	} 
;;;4979   
;;;4980   if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_AV_BAT2))
;;;4981   	{
;;;4982   	if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_BAT2,1);
;;;4983   	else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_BAT2,1);
;;;4984        }
;;;4985   else 
;;;4986   	{
;;;4987   	if(!(avar_ind_stat&0x00000004)) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_BAT2,1);
;;;4988        else SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_BAT2,1);
;;;4989   	} 
;;;4990   
;;;4991   if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_AV_BPS))
;;;4992   	{
;;;4993   	if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_BPS,1);
;;;4994   	else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_BPS,1);
;;;4995        }
;;;4996   else 
;;;4997   	{
;;;4998   	if(!(avar_ind_stat&0x000007f8)) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_BPS,1);
;;;4999        else SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_BPS,1);
;;;5000   	} 
;;;5001   
;;;5002   #endif
;;;5003   
;;;5004   
;;;5005   #ifdef UKU_GLONASS
;;;5006   //Реле аварий батарей
;;;5007   if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_AV_BAT1))
;;;5008   	{
;;;5009   	if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_BAT1,1);
;;;5010   	else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_BAT1,1);
;;;5011        }
;;;5012   else 
;;;5013   	{
;;;5014   	if(!(avar_ind_stat&0x00000002)) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_BAT1,1);
;;;5015        else SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_BAT1,1);
;;;5016   	} 
;;;5017   
;;;5018   if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_AV_BAT2))
;;;5019   	{
;;;5020   	if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_BAT2,1);
;;;5021   	else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_BAT2,1);
;;;5022        }
;;;5023   else 
;;;5024   	{
;;;5025   	if(!(avar_ind_stat&0x00000004)) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_BAT2,1);
;;;5026        else SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_BAT2,1);
;;;5027   	} 
;;;5028   
;;;5029   if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_AV_BPS))
;;;5030   	{
;;;5031   	if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_BPS,1);
;;;5032   	else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_BPS,1);
;;;5033        }
;;;5034   else 
;;;5035   	{
;;;5036   	if(!(avar_ind_stat&0x000007f8)) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_BPS,1);
;;;5037        else SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_BPS,1);
;;;5038   	} 
;;;5039   
;;;5040   #endif
;;;5041   
;;;5042   #ifdef U 
;;;5043   
;;;5044   #endif
;;;5045   
;;;5046   #ifdef UKU_RSTKM
;;;5047   
;;;5048   //Реле общей аварии
;;;5049   if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_AV_COMM))
;;;5050   	{
;;;5051   	if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_COMM,1);
;;;5052   	else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_COMM,1);
;;;5053   	}
;;;5054   else 
;;;5055   	{
;;;5056        if(  (!(avar_ind_stat&0x00007fff))/* &&
;;;5057             ((!SK_REL_EN[0]) || (sk_av_stat[0]!=sasON))  &&
;;;5058             ((!SK_REL_EN[1]) || (sk_av_stat[1]!=sasON))  &&
;;;5059             ((!SK_REL_EN[2]) || (sk_av_stat[2]!=sasON))  &&
;;;5060             ((!SK_REL_EN[3]) || (sk_av_stat[3]!=sasON))*/  )SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_COMM,1);
;;;5061        else SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_COMM,1);
;;;5062   	}
;;;5063   	
;;;5064   
;;;5065   //Реле освещения
;;;5066   if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_LIGHT))
;;;5067   	{
;;;5068   	if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_LIGHT,1);
;;;5069   	else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_LIGHT,1);
;;;5070        }
;;;5071   else 
;;;5072   	{
;;;5073   	if(sk_av_stat[0]!=sasON) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_LIGHT,1);
;;;5074        else SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_LIGHT,1);
;;;5075   	}
;;;5076   
;;;5077   
;;;5078   //Реле выключения нагрузки
;;;5079   if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_LOAD_OFF))
;;;5080   	{
;;;5081   	if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_LOAD_OFF,1);
;;;5082   	else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_LOAD_OFF,1);
;;;5083        }
;;;5084   else if(tloaddisable_cmnd==0)
;;;5085   	{
;;;5086   	SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_LOAD_OFF,1);
;;;5087   	}
;;;5088   else if((tloaddisable_cmnd)&&(tloaddisable_cmnd<=11))
;;;5089   	{
;;;5090   	SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_LOAD_OFF,1);
;;;5091   	}
;;;5092   
;;;5093   else 
;;;5094   	{
;;;5095   	if(!(tloaddisable_stat==tldsON)) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_LOAD_OFF,1);
;;;5096        else SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_LOAD_OFF,1);
;;;5097   	} 
;;;5098   
;;;5099   //Реле осевого вентилятора
;;;5100   if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_VENT))
;;;5101   	{
;;;5102   	if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_VENT,1);
;;;5103   	else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_VENT,1);
;;;5104   	}
;;;5105   else 
;;;5106   	{
;;;5107   	if(mixer_vent_stat==mvsOFF) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_VENT,1);
;;;5108        else SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_VENT,1);
;;;5109   	} 
;;;5110   
;;;5111   #endif
;;;5112   
;;;5113   #ifdef UKU_KONTUR
;;;5114   
;;;5115   //Реле общей аварии
;;;5116   if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_AV_COMM))
;;;5117   	{
;;;5118   	if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_COMM,1);
;;;5119   	else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_COMM,1);
;;;5120   	}
;;;5121   else 
;;;5122   	{
;;;5123        if(  (!(avar_ind_stat&0x00007fff)) &&
;;;5124             ((!SK_REL_EN[0]) || (sk_av_stat[0]!=sasON))  &&
;;;5125             ((!SK_REL_EN[1]) || (sk_av_stat[1]!=sasON))  &&
;;;5126             ((!SK_REL_EN[2]) || (sk_av_stat[2]!=sasON))  /*&&
;;;5127             ((!SK_REL_EN[3]) || (sk_av_stat[3]!=sasON))*/  )SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_COMM,1);
;;;5128        else SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_COMM,1);
;;;5129   	}
;;;5130   
;;;5131   	
;;;5132   //rel_warm_plazma=0;
;;;5133   //Реле освещения   
;;;5134   /*
;;;5135   if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_WARM))
;;;5136   	{
;;;5137   	if(mess_data[1]==0)
;;;5138   		{
;;;5139   		SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_WARM,1);
;;;5140   		rel_warm_plazma=1;
;;;5141   		}
;;;5142   	else if(mess_data[1]==1) 
;;;5143   		{
;;;5144   		SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_WARM,1);
;;;5145   		rel_warm_plazma=2;
;;;5146   		}
;;;5147        }
;;;5148   else 
;;;5149   	{
;;;5150   	if(warm_stat_k==wsOFF) 
;;;5151   		{
;;;5152   		SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_WARM,1);
;;;5153   		rel_warm_plazma=3;
;;;5154   		}
;;;5155        else 
;;;5156   		{
;;;5157   		SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_WARM,1);
;;;5158   		rel_warm_plazma=4;
;;;5159   		}
;;;5160   	}
;;;5161   */
;;;5162   //Реле освещения
;;;5163   if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_LIGHT))
;;;5164   	{
;;;5165   	if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_LIGHT,1);
;;;5166   	else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_LIGHT,1);
;;;5167        }
;;;5168   else 
;;;5169   	{
;;;5170   	if(sk_av_stat[0]!=sasON) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_LIGHT,1);
;;;5171        else SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_LIGHT,1);
;;;5172   	}
;;;5173   
;;;5174   
;;;5175   
;;;5176   //Реле выключения нагрузки
;;;5177   if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_LOAD_OFF))
;;;5178   	{
;;;5179   	if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_LOAD_OFF,1);
;;;5180   	else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_LOAD_OFF,1);
;;;5181        }
;;;5182   else if(tloaddisable_cmnd==0)
;;;5183   	{
;;;5184   	SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_LOAD_OFF,1);
;;;5185   	}
;;;5186   else if((tloaddisable_cmnd)&&(tloaddisable_cmnd<=11))
;;;5187   	{
;;;5188   	SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_LOAD_OFF,1);
;;;5189   	}
;;;5190   
;;;5191   else 
;;;5192   	{
;;;5193   	if(!(tloaddisable_stat==tldsON)) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_LOAD_OFF,1);
;;;5194        else SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_LOAD_OFF,1);
;;;5195   	} 
;;;5196   
;;;5197   //Реле осевого вентилятора или отопителя
;;;5198   if(RELE_LOG)
;;;5199   	{
;;;5200   	if((mess_find_unvol(MESS2RELE_HNDL))&&(mess_data[0]==PARAM_RELE_VENT_WARM))
;;;5201   		{
;;;5202   		if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_VENT_WARM,1);
;;;5203   		else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_VENT_WARM,1);
;;;5204   		}
;;;5205   	else 
;;;5206   		{
;;;5207   		if(warm_stat_k==wsOFF) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_VENT_WARM,1);
;;;5208   	     else SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_VENT_WARM,1);
;;;5209   		} 
;;;5210   
;;;5211   	}
;;;5212   else 
;;;5213   	{
;;;5214   	if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_VENT_WARM))
;;;5215   		{
;;;5216   		if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_VENT_WARM,1);
;;;5217   		else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_VENT_WARM,1);
;;;5218   		}
;;;5219   	else 
;;;5220   		{
;;;5221   		if(vent_stat_k==vsOFF) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_VENT_WARM,1);
;;;5222   	     else SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_VENT_WARM,1);
;;;5223   		} 
;;;5224   	}
;;;5225   #endif
;;;5226   
;;;5227   #ifdef UKU_6U
;;;5228   //Реле аварий батарей
;;;5229   if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_AV_BAT1))
;;;5230   	{
;;;5231   	if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_BAT1,1);
;;;5232   	else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_BAT1,1);
;;;5233        }
;;;5234   else 
;;;5235   	{
;;;5236   	if(!(avar_ind_stat&0x00000002)) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_BAT1,1);
;;;5237        else SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_BAT1,1);
;;;5238   	} 
;;;5239   
;;;5240   if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_AV_BAT2))
;;;5241   	{
;;;5242   	if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_BAT2,1);
;;;5243   	else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_BAT2,1);
;;;5244       }
;;;5245   else if(NPN_OUT==npnoRELEAVBAT2)
;;;5246   	{
;;;5247   	if(npn_stat==npnsOFF)//&&(mess_find_unvol(MESS2RELE_HNDL))&&(mess_data[0]==PARAM_RELE_NPN))
;;;5248   		{
;;;5249   		/*if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_BAT2,1);
;;;5250   		else if(mess_data[1]==1)*/ SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_BAT2,1);
;;;5251        	}
;;;5252   	else SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_BAT2,1);
;;;5253   	}
;;;5254   else 
;;;5255   	{
;;;5256   	if(!(avar_ind_stat&0x00000004)) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_BAT2,1);
;;;5257       else SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_BAT2,1);
;;;5258   	} 
;;;5259   
;;;5260   if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_AV_BPS))
;;;5261   	{
;;;5262   	if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_BPS,1);
;;;5263   	else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_BPS,1);
;;;5264        }
;;;5265   else 
;;;5266   	{
;;;5267   	if(!(avar_ind_stat&0x000007f8)) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_BPS,1);
;;;5268        else SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_BPS,1);
;;;5269   	} 
;;;5270   
;;;5271   if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_VENT))
;;;5272   	{
;;;5273   	if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_VENT,1);
;;;5274   	else SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_VENT,1);
;;;5275   	}
;;;5276   else if((NPN_OUT==npnoRELEVENT))
;;;5277   	{
;;;5278   	if(npn_stat==npnsOFF)//&&(mess_find_unvol(MESS2RELE_HNDL))&&(mess_data[0]==PARAM_RELE_NPN))
;;;5279   		{
;;;5280   		/*if(mess_data[1]==0)*/ SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_VENT,1);
;;;5281   		//else SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_VENT,1);
;;;5282       	}
;;;5283   	else SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_VENT,1);
;;;5284   	}
;;;5285   else 
;;;5286   	{
;;;5287   	if(!vent_stat) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_VENT,1);
;;;5288   	else SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_VENT,1);
;;;5289   	}
;;;5290   
;;;5291   #endif
;;;5292   
;;;5293   #ifdef UKU_220
;;;5294   //Реле аварий батарей
;;;5295   if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_AV_BAT))
;;;5296   	{
;;;5297   	if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_BAT,1);
;;;5298   	else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_BAT,1);
;;;5299        }
;;;5300   else 
;;;5301   	{
;;;5302   	if(!(avar_ind_stat&0x00000002)) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_BAT,1);
;;;5303        else SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_BAT,1);
;;;5304   	} 
;;;5305   
;;;5306   if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_AV_BPS))
;;;5307   	{
;;;5308   	if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_BPS,1);
;;;5309   	else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_BPS,1);
;;;5310        }
;;;5311   else 
;;;5312   	{
;;;5313   	if(!(avar_ind_stat&0x000007f8)) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_BPS,1);
;;;5314        else SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_BPS,1);
;;;5315   	} 
;;;5316   
;;;5317   if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_VENT))
;;;5318   	{
;;;5319   	if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_VENT,1);
;;;5320   	else SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_VENT,1);
;;;5321   	}
;;;5322   else 
;;;5323   	{
;;;5324   	if((RELE_VENT_LOGIC==0)||(RELE_VENT_LOGIC==1))
;;;5325   		{
;;;5326   		if(vent_stat) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_VENT,1);
;;;5327   		else SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_VENT,1);
;;;5328   		}
;;;5329   	else 
;;;5330   		{
;;;5331   		if((avar_ind_stat&0x00000004)) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_VENT,1);
;;;5332        	else SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_VENT,1);
;;;5333   		}
;;;5334   	}
;;;5335   
;;;5336   #endif
;;;5337   
;;;5338   #ifdef UKU_220_V2
;;;5339   //Реле аварий батарей
;;;5340   if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_AV_BAT))
;;;5341   	{
;;;5342   	if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_BAT,1);
;;;5343   	else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_BAT,1);
;;;5344        }
;;;5345   else 
;;;5346   	{
;;;5347   	if(!(avar_ind_stat&0x00000002)) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_BAT,1);
;;;5348        else SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_BAT,1);
;;;5349   	} 
;;;5350   
;;;5351   if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_AV_BPS))
;;;5352   	{
;;;5353   	if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_BPS,1);
;;;5354   	else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_BPS,1);
;;;5355        }
;;;5356   else 
;;;5357   	{
;;;5358   	if(!(avar_ind_stat&0x000007f8)) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_BPS,1);
;;;5359        else SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_BPS,1);
;;;5360   	} 
;;;5361   
;;;5362   if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_VENT))
;;;5363   	{
;;;5364   	if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_VENT,1);
;;;5365   	else SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_VENT,1);
;;;5366   	}
;;;5367   else 
;;;5368   	{
;;;5369   	if((RELE_VENT_LOGIC==0)||(RELE_VENT_LOGIC==1))
;;;5370   		{
;;;5371   		if(vent_stat) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_VENT,1);
;;;5372   		else SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_VENT,1);
;;;5373   		}
;;;5374   	else 
;;;5375   		{
;;;5376   		if((avar_ind_stat&0x00000004)) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_VENT,1);
;;;5377        	else SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_VENT,1);
;;;5378   		}
;;;5379   	}
;;;5380   
;;;5381   #endif
;;;5382   
;;;5383   #ifdef UKU_220_IPS_TERMOKOMPENSAT
;;;5384   
;;;5385   if((AUSW_MAIN==22010)||(AUSW_MAIN==22011))
003a82  48d9              LDR      r0,|L1.15848|
;;;5386   	{
;;;5387   	#ifndef UKU2071x
;;;5388   	if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_AV_NET))
;;;5389   		{
;;;5390   		if(mess_data[1]==0) SET_REG(LPC_GPIO3->FIOSET,1,25,1);
;;;5391   		else SET_REG(LPC_GPIO3->FIOCLR,1,25,1);
;;;5392   		}
;;;5393   	else	if(!(avar_ind_stat&0x00000001)) SET_REG(LPC_GPIO3->FIOSET,1,25,1);
;;;5394   	else SET_REG(LPC_GPIO3->FIOCLR,1,25,1);
;;;5395   	#endif
;;;5396   
;;;5397   	#ifdef UKU2071x
;;;5398   		#ifndef APSENERGIA
;;;5399   		if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_AV_NET))
;;;5400   			{
;;;5401   			if(mess_data[1]==0) SET_REG(LPC_GPIO3->FIOCLR,1,25,1);
;;;5402   			else SET_REG(LPC_GPIO3->FIOSET,1,25,1);
;;;5403   			}
;;;5404   		else	if(!(avar_ind_stat&0x00000001)) SET_REG(LPC_GPIO3->FIOCLR,1,25,1);
;;;5405   		else SET_REG(LPC_GPIO3->FIOSET,1,25,1);
;;;5406   		#endif
;;;5407   
;;;5408   		#ifdef APSENERGIA
;;;5409   		if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_AV_NET))
;;;5410   			{
;;;5411   			if(mess_data[1]==0) SET_REG(LPC_GPIO3->FIOCLR,1,25,1);
;;;5412   			else SET_REG(LPC_GPIO3->FIOSET,1,25,1);
;;;5413   			}
;;;5414   		else if((mess_find_unvol(MESS2RELE_HNDL))&& (mess_data[0]==PARAM_RELE_BAT_IS_DISCHARGED))  SET_REG(LPC_GPIO3->FIOCLR,1,25,1);
;;;5415   		else SET_REG(LPC_GPIO3->FIOSET,1,25,1);
;;;5416   		#endif
;;;5417   
;;;5418   	#endif
;;;5419   	if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_AV_BPS))
;;;5420   		{
;;;5421   		if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,7,1);
;;;5422   		else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOSET,1,7,1);
;;;5423   	     }
;;;5424   	else 
;;;5425   		{
;;;5426   		if(!(avar_ind_stat&0x100007f8)) SET_REG(LPC_GPIO0->FIOCLR,1,7,1);
;;;5427   	     else SET_REG(LPC_GPIO0->FIOSET,1,7,1);
;;;5428   		} 
;;;5429   
;;;5430   	//Реле аварий батарей
;;;5431   	#ifndef APSENERGIA
;;;5432   	if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_AV_BAT))
;;;5433   		{
;;;5434   		if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,4,1);
;;;5435   		else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOSET,1,4,1);
;;;5436        	}
;;;5437   	else 
;;;5438   		{
;;;5439   		if(!(ips_bat_av_stat)) SET_REG(LPC_GPIO0->FIOCLR,1,4,1);
003a84  f8df8364          LDR      r8,|L1.15852|
003a88  4fd9              LDR      r7,|L1.15856|
003a8a  8800              LDRH     r0,[r0,#0]            ;5385  ; AUSW_MAIN
003a8c  f5a041aa          SUB      r1,r0,#0x5500         ;5385
003a90  39fa              SUBS     r1,r1,#0xfa           ;5385
003a92  d001              BEQ      |L1.15000|
003a94  1e49              SUBS     r1,r1,#1              ;5385
003a96  d16f              BNE      |L1.15224|
                  |L1.15000|
003a98  20d2              MOVS     r0,#0xd2              ;5399
003a9a  f7fffffe          BL       mess_find_unvol
003a9e  b110              CBZ      r0,|L1.15014|
003aa0  6828              LDR      r0,[r5,#0]            ;5399  ; mess_data
003aa2  2866              CMP      r0,#0x66              ;5399
003aa4  d043              BEQ      |L1.15150|
                  |L1.15014|
003aa6  6830              LDR      r0,[r6,#0]            ;5404  ; avar_ind_stat
003aa8  07c0              LSLS     r0,r0,#31             ;5404
003aaa  d04d              BEQ      |L1.15176|
003aac  6fa0              LDR      r0,[r4,#0x78]         ;5405
003aae  f0407000          ORR      r0,r0,#0x2000000      ;5405
003ab2  67a0              STR      r0,[r4,#0x78]         ;5405
                  |L1.15028|
003ab4  20d2              MOVS     r0,#0xd2              ;5419
003ab6  f7fffffe          BL       mess_find_unvol
003aba  b110              CBZ      r0,|L1.15042|
003abc  6828              LDR      r0,[r5,#0]            ;5419  ; mess_data
003abe  286a              CMP      r0,#0x6a              ;5419
003ac0  d047              BEQ      |L1.15186|
                  |L1.15042|
003ac2  6830              LDR      r0,[r6,#0]            ;5426  ; avar_ind_stat
003ac4  4238              TST      r0,r7                 ;5426
003ac6  d052              BEQ      |L1.15214|
003ac8  69a0              LDR      r0,[r4,#0x18]         ;5427
003aca  f0400080          ORR      r0,r0,#0x80           ;5427
003ace  61a0              STR      r0,[r4,#0x18]         ;5427
                  |L1.15056|
003ad0  20d2              MOVS     r0,#0xd2              ;5432
003ad2  f7fffffe          BL       mess_find_unvol
003ad6  b110              CBZ      r0,|L1.15070|
003ad8  6828              LDR      r0,[r5,#0]            ;5432  ; mess_data
003ada  2867              CMP      r0,#0x67              ;5432
003adc  d04d              BEQ      |L1.15226|
                  |L1.15070|
003ade  f8980000          LDRB     r0,[r8,#0]  ; ips_bat_av_stat
003ae2  b380              CBZ      r0,|L1.15174|
;;;5440        	else SET_REG(LPC_GPIO0->FIOSET,1,4,1);
003ae4  69a0              LDR      r0,[r4,#0x18]
003ae6  f0400010          ORR      r0,r0,#0x10
003aea  61a0              STR      r0,[r4,#0x18]
003aec  e1ec              B        |L1.16072|
                  |L1.15086|
003aee  6868              LDR      r0,[r5,#4]            ;4940  ; mess_data
003af0  2801              CMP      r0,#1                 ;4940
003af2  d006              BEQ      |L1.15106|
003af4  2800              CMP      r0,#0                 ;4941
003af6  d1b5              BNE      |L1.14948|
003af8  69e0              LDR      r0,[r4,#0x1c]         ;4941
003afa  f0405000          ORR      r0,r0,#0x20000000     ;4941
003afe  61e0              STR      r0,[r4,#0x1c]         ;4941
003b00  e7b0              B        |L1.14948|
                  |L1.15106|
003b02  69a0              LDR      r0,[r4,#0x18]         ;4940
003b04  f0405000          ORR      r0,r0,#0x20000000     ;4940
003b08  61a0              STR      r0,[r4,#0x18]         ;4940
003b0a  e7ab              B        |L1.14948|
                  |L1.15116|
003b0c  6868              LDR      r0,[r5,#4]            ;4960  ; mess_data
003b0e  b120              CBZ      r0,|L1.15130|
003b10  6fa0              LDR      r0,[r4,#0x78]         ;4961
003b12  f0407000          ORR      r0,r0,#0x2000000      ;4961
003b16  67a0              STR      r0,[r4,#0x78]         ;4961
003b18  e7b3              B        |L1.14978|
                  |L1.15130|
003b1a  6fe0              LDR      r0,[r4,#0x7c]         ;4960
003b1c  f0407000          ORR      r0,r0,#0x2000000      ;4960
003b20  67e0              STR      r0,[r4,#0x7c]         ;4960
003b22  e7ae              B        |L1.14978|
                  |L1.15140|
003b24  6fe0              LDR      r0,[r4,#0x7c]         ;4963
003b26  f0407000          ORR      r0,r0,#0x2000000      ;4963
003b2a  67e0              STR      r0,[r4,#0x7c]         ;4963
003b2c  e7a9              B        |L1.14978|
                  |L1.15150|
003b2e  6868              LDR      r0,[r5,#4]            ;5401  ; mess_data
003b30  b120              CBZ      r0,|L1.15164|
003b32  6fa0              LDR      r0,[r4,#0x78]         ;5402
003b34  f0407000          ORR      r0,r0,#0x2000000      ;5402
003b38  67a0              STR      r0,[r4,#0x78]         ;5402
003b3a  e7bb              B        |L1.15028|
                  |L1.15164|
003b3c  6fe0              LDR      r0,[r4,#0x7c]         ;5401
003b3e  f0407000          ORR      r0,r0,#0x2000000      ;5401
003b42  67e0              STR      r0,[r4,#0x7c]         ;5401
003b44  e7b6              B        |L1.15028|
                  |L1.15174|
003b46  e027              B        |L1.15256|
                  |L1.15176|
003b48  6fe0              LDR      r0,[r4,#0x7c]         ;5404
003b4a  f0407000          ORR      r0,r0,#0x2000000      ;5404
003b4e  67e0              STR      r0,[r4,#0x7c]         ;5404
003b50  e7b0              B        |L1.15028|
                  |L1.15186|
003b52  6868              LDR      r0,[r5,#4]            ;5421  ; mess_data
003b54  b130              CBZ      r0,|L1.15204|
003b56  2801              CMP      r0,#1                 ;5422
003b58  d1ba              BNE      |L1.15056|
003b5a  69a0              LDR      r0,[r4,#0x18]         ;5422
003b5c  f0400080          ORR      r0,r0,#0x80           ;5422
003b60  61a0              STR      r0,[r4,#0x18]         ;5422
003b62  e7b5              B        |L1.15056|
                  |L1.15204|
003b64  69e0              LDR      r0,[r4,#0x1c]         ;5421
003b66  f0400080          ORR      r0,r0,#0x80           ;5421
003b6a  61e0              STR      r0,[r4,#0x1c]         ;5421
003b6c  e7b0              B        |L1.15056|
                  |L1.15214|
003b6e  69e0              LDR      r0,[r4,#0x1c]         ;5426
003b70  f0400080          ORR      r0,r0,#0x80           ;5426
003b74  61e0              STR      r0,[r4,#0x1c]         ;5426
003b76  e7ab              B        |L1.15056|
                  |L1.15224|
003b78  e013              B        |L1.15266|
                  |L1.15226|
003b7a  6868              LDR      r0,[r5,#4]            ;5434  ; mess_data
003b7c  b110              CBZ      r0,|L1.15236|
003b7e  2801              CMP      r0,#1                 ;5435
003b80  d005              BEQ      |L1.15246|
003b82  e1a1              B        |L1.16072|
                  |L1.15236|
003b84  69e0              LDR      r0,[r4,#0x1c]         ;5434
003b86  f0400010          ORR      r0,r0,#0x10           ;5434
003b8a  61e0              STR      r0,[r4,#0x1c]         ;5434
003b8c  e19c              B        |L1.16072|
                  |L1.15246|
003b8e  69a0              LDR      r0,[r4,#0x18]         ;5435
003b90  f0400010          ORR      r0,r0,#0x10           ;5435
003b94  61a0              STR      r0,[r4,#0x18]         ;5435
003b96  e197              B        |L1.16072|
                  |L1.15256|
003b98  69e0              LDR      r0,[r4,#0x1c]         ;5439
003b9a  f0400010          ORR      r0,r0,#0x10           ;5439
003b9e  61e0              STR      r0,[r4,#0x1c]         ;5439
003ba0  e192              B        |L1.16072|
                  |L1.15266|
;;;5441   		}
;;;5442   	#endif
;;;5443   	#ifdef APSENERGIA
;;;5444   	if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_AV_BAT))
;;;5445   		{
;;;5446   		if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,4,1);
;;;5447   		else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOSET,1,4,1);
;;;5448        	}
;;;5449   	else 
;;;5450   		{
;;;5451   		if(!apsEnergiaStat)SET_REG(LPC_GPIO0->FIOSET,1,4,1);
;;;5452   		else SET_REG(LPC_GPIO0->FIOCLR,1,4,1);
;;;5453   		}
;;;5454   	#endif
;;;5455   	}
;;;5456   
;;;5457   else	if(AUSW_MAIN==22023)
003ba2  f5a041ac          SUB      r1,r0,#0x5600
003ba6  3907              SUBS     r1,#7
003ba8  d162              BNE      |L1.15472|
;;;5458   	{
;;;5459   
;;;5460   	//Реле аварий батарей
;;;5461   	if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_AV_BAT))
003baa  20d2              MOVS     r0,#0xd2
003bac  f7fffffe          BL       mess_find_unvol
003bb0  b110              CBZ      r0,|L1.15288|
003bb2  6828              LDR      r0,[r5,#0]  ; mess_data
003bb4  2867              CMP      r0,#0x67
003bb6  d023              BEQ      |L1.15360|
                  |L1.15288|
;;;5462   		{
;;;5463   		if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,4,1);
;;;5464   		else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOSET,1,4,1);
;;;5465        	}
;;;5466   	else 
;;;5467   		{
;;;5468   		if(!(ips_bat_av_stat)) SET_REG(LPC_GPIO0->FIOCLR,1,4,1);
003bb8  f8980000          LDRB     r0,[r8,#0]  ; ips_bat_av_stat
003bbc  b370              CBZ      r0,|L1.15388|
;;;5469        	else SET_REG(LPC_GPIO0->FIOSET,1,4,1);
003bbe  69a0              LDR      r0,[r4,#0x18]
003bc0  f0400010          ORR      r0,r0,#0x10
003bc4  61a0              STR      r0,[r4,#0x18]
                  |L1.15302|
;;;5470   		} 
;;;5471   
;;;5472   
;;;5473   	//Реле аварии сети ТУТ КАКАЯ то ЛАЖА с аварией сети. Обращение к разным портам
;;;5474   	#ifndef UKU2071x
;;;5475   	if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_AV_NET))
;;;5476   		{
;;;5477   		if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_NET,1);
;;;5478   		else SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_NET,1);
;;;5479   		}
;;;5480   	else	if(!(avar_ind_stat&0x00000001)) SET_REG(LPC_GPIO1->FIOCLR,1,SHIFT_REL_AV_NET,1);
;;;5481   	else SET_REG(LPC_GPIO3->FIOCLR,1,SHIFT_REL_AV_NET,1);
;;;5482   	#endif
;;;5483   	#ifdef UKU2071x
;;;5484   	if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_AV_NET))
003bc6  20d2              MOVS     r0,#0xd2
003bc8  f7fffffe          BL       mess_find_unvol
003bcc  b110              CBZ      r0,|L1.15316|
003bce  6828              LDR      r0,[r5,#0]  ; mess_data
003bd0  2866              CMP      r0,#0x66
003bd2  d028              BEQ      |L1.15398|
                  |L1.15316|
;;;5485   		{
;;;5486   		if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_NET,1);
;;;5487   		else SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_NET,1);
;;;5488   		}
;;;5489   	else	if(!(avar_ind_stat&0x00000001)) SET_REG(LPC_GPIO1->FIOSET,1,SHIFT_REL_AV_NET,1);
003bd4  6830              LDR      r0,[r6,#0]  ; avar_ind_stat
003bd6  07c0              LSLS     r0,r0,#31
003bd8  d031              BEQ      |L1.15422|
;;;5490   	else SET_REG(LPC_GPIO3->FIOSET,1,SHIFT_REL_AV_NET,1);
003bda  6fa0              LDR      r0,[r4,#0x78]
003bdc  f0407000          ORR      r0,r0,#0x2000000
003be0  67a0              STR      r0,[r4,#0x78]
                  |L1.15330|
;;;5491   	#endif
;;;5492   
;;;5493   	if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_AV_BPS))
003be2  20d2              MOVS     r0,#0xd2
003be4  f7fffffe          BL       mess_find_unvol
003be8  b110              CBZ      r0,|L1.15344|
003bea  6828              LDR      r0,[r5,#0]  ; mess_data
003bec  286a              CMP      r0,#0x6a
003bee  d02b              BEQ      |L1.15432|
                  |L1.15344|
;;;5494   		{
;;;5495   		if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,7,1);
;;;5496   		else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOSET,1,7,1);
;;;5497   	     }
;;;5498   	else 
;;;5499   		{
;;;5500   		if(!(avar_ind_stat&0x100007f8)) SET_REG(LPC_GPIO0->FIOCLR,1,7,1);
003bf0  6830              LDR      r0,[r6,#0]  ; avar_ind_stat
003bf2  4238              TST      r0,r7
003bf4  d037              BEQ      |L1.15462|
;;;5501   	     else SET_REG(LPC_GPIO0->FIOSET,1,7,1);
003bf6  69a0              LDR      r0,[r4,#0x18]
003bf8  f0400080          ORR      r0,r0,#0x80
003bfc  61a0              STR      r0,[r4,#0x18]
003bfe  e163              B        |L1.16072|
                  |L1.15360|
003c00  6868              LDR      r0,[r5,#4]            ;5463  ; mess_data
003c02  b130              CBZ      r0,|L1.15378|
003c04  2801              CMP      r0,#1                 ;5464
003c06  d1de              BNE      |L1.15302|
003c08  69a0              LDR      r0,[r4,#0x18]         ;5464
003c0a  f0400010          ORR      r0,r0,#0x10           ;5464
003c0e  61a0              STR      r0,[r4,#0x18]         ;5464
003c10  e7d9              B        |L1.15302|
                  |L1.15378|
003c12  69e0              LDR      r0,[r4,#0x1c]         ;5463
003c14  f0400010          ORR      r0,r0,#0x10           ;5463
003c18  61e0              STR      r0,[r4,#0x1c]         ;5463
003c1a  e7d4              B        |L1.15302|
                  |L1.15388|
003c1c  69e0              LDR      r0,[r4,#0x1c]         ;5468
003c1e  f0400010          ORR      r0,r0,#0x10           ;5468
003c22  61e0              STR      r0,[r4,#0x1c]         ;5468
003c24  e7cf              B        |L1.15302|
                  |L1.15398|
003c26  6868              LDR      r0,[r5,#4]            ;5486  ; mess_data
003c28  b120              CBZ      r0,|L1.15412|
003c2a  69e0              LDR      r0,[r4,#0x1c]         ;5487
003c2c  f0407000          ORR      r0,r0,#0x2000000      ;5487
003c30  61e0              STR      r0,[r4,#0x1c]         ;5487
003c32  e7d6              B        |L1.15330|
                  |L1.15412|
003c34  69a0              LDR      r0,[r4,#0x18]         ;5486
003c36  f0407000          ORR      r0,r0,#0x2000000      ;5486
003c3a  61a0              STR      r0,[r4,#0x18]         ;5486
003c3c  e7d1              B        |L1.15330|
                  |L1.15422|
003c3e  6ba0              LDR      r0,[r4,#0x38]         ;5489
003c40  f0407000          ORR      r0,r0,#0x2000000      ;5489
003c44  63a0              STR      r0,[r4,#0x38]         ;5489
003c46  e7cc              B        |L1.15330|
                  |L1.15432|
003c48  6868              LDR      r0,[r5,#4]            ;5495  ; mess_data
003c4a  b110              CBZ      r0,|L1.15442|
003c4c  2801              CMP      r0,#1                 ;5496
003c4e  d005              BEQ      |L1.15452|
003c50  e13a              B        |L1.16072|
                  |L1.15442|
003c52  69e0              LDR      r0,[r4,#0x1c]         ;5495
003c54  f0400080          ORR      r0,r0,#0x80           ;5495
003c58  61e0              STR      r0,[r4,#0x1c]         ;5495
003c5a  e135              B        |L1.16072|
                  |L1.15452|
003c5c  69a0              LDR      r0,[r4,#0x18]         ;5496
003c5e  f0400080          ORR      r0,r0,#0x80           ;5496
003c62  61a0              STR      r0,[r4,#0x18]         ;5496
003c64  e130              B        |L1.16072|
                  |L1.15462|
003c66  69e0              LDR      r0,[r4,#0x1c]         ;5500
003c68  f0400080          ORR      r0,r0,#0x80           ;5500
003c6c  61e0              STR      r0,[r4,#0x1c]         ;5500
003c6e  e12b              B        |L1.16072|
                  |L1.15472|
;;;5502   		} 
;;;5503   	}
;;;5504   else	if((AUSW_MAIN==22043)||(AUSW_MAIN==22044))
003c70  f5a041ac          SUB      r1,r0,#0x5600
003c74  391b              SUBS     r1,r1,#0x1b
003c76  d001              BEQ      |L1.15484|
003c78  1e49              SUBS     r1,r1,#1
003c7a  d170              BNE      |L1.15710|
                  |L1.15484|
;;;5505   	{
;;;5506   	//Реле аварий батарей
;;;5507   	if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_AV_BAT))
003c7c  20d2              MOVS     r0,#0xd2
003c7e  f7fffffe          BL       mess_find_unvol
003c82  b110              CBZ      r0,|L1.15498|
003c84  6828              LDR      r0,[r5,#0]  ; mess_data
003c86  2867              CMP      r0,#0x67
003c88  d031              BEQ      |L1.15598|
                  |L1.15498|
;;;5508   		{
;;;5509   		if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,4,1);
;;;5510   		else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOSET,1,4,1);
;;;5511        	}
;;;5512   	else 
;;;5513   		{
;;;5514   		if(!(ips_bat_av_stat)) SET_REG(LPC_GPIO0->FIOCLR,1,4,1);
003c8a  f8980000          LDRB     r0,[r8,#0]  ; ips_bat_av_stat
003c8e  b3b8              CBZ      r0,|L1.15616|
;;;5515        	else SET_REG(LPC_GPIO0->FIOSET,1,4,1);
003c90  69a0              LDR      r0,[r4,#0x18]
003c92  f0400010          ORR      r0,r0,#0x10
003c96  61a0              STR      r0,[r4,#0x18]
                  |L1.15512|
;;;5516   		} 
;;;5517   	//Реле аварии сети ТУТ КАКАЯ то ЛАЖА с аварией сети. Обращение к разным портам
;;;5518   	#ifndef UKU2071x 
;;;5519   	if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_AV_NET))
;;;5520   		{
;;;5521   		if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_NET,1);
;;;5522   		else SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_NET,1);
;;;5523   		}
;;;5524   	else	if(!(avar_ind_stat&0x00000001)) SET_REG(LPC_GPIO1->FIOCLR,1,SHIFT_REL_AV_NET,1);
;;;5525   	else SET_REG(LPC_GPIO3->FIOCLR,1,SHIFT_REL_AV_NET,1);
;;;5526   	#endif
;;;5527   	#ifdef UKU2071x 
;;;5528   	if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_AV_NET))
003c98  20d2              MOVS     r0,#0xd2
003c9a  f7fffffe          BL       mess_find_unvol
003c9e  b110              CBZ      r0,|L1.15526|
003ca0  6828              LDR      r0,[r5,#0]  ; mess_data
003ca2  2866              CMP      r0,#0x66
003ca4  d037              BEQ      |L1.15638|
                  |L1.15526|
;;;5529   		{
;;;5530   		if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_NET,1);
;;;5531   		else SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_NET,1);
;;;5532   		}
;;;5533   	else	if(!(avar_ind_stat&0x00000001)) SET_REG(LPC_GPIO1->FIOSET,1,SHIFT_REL_AV_NET,1);
003ca6  6830              LDR      r0,[r6,#0]  ; avar_ind_stat
003ca8  07c0              LSLS     r0,r0,#31
003caa  d040              BEQ      |L1.15662|
;;;5534   	else SET_REG(LPC_GPIO3->FIOSET,1,SHIFT_REL_AV_NET,1);
003cac  6fa0              LDR      r0,[r4,#0x78]
003cae  f0407000          ORR      r0,r0,#0x2000000
003cb2  67a0              STR      r0,[r4,#0x78]
                  |L1.15540|
;;;5535   	#endif
;;;5536   
;;;5537   	if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_AV_BPS))
003cb4  20d2              MOVS     r0,#0xd2
003cb6  f7fffffe          BL       mess_find_unvol
003cba  b110              CBZ      r0,|L1.15554|
003cbc  6828              LDR      r0,[r5,#0]  ; mess_data
003cbe  286a              CMP      r0,#0x6a
003cc0  d03a              BEQ      |L1.15672|
                  |L1.15554|
;;;5538   		{
;;;5539   		if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,7,1);
;;;5540   		else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOSET,1,7,1);
;;;5541   	     }
;;;5542   	else 
;;;5543   		{
;;;5544   		if(!(avar_ind_stat&0x100007f8)) SET_REG(LPC_GPIO0->FIOCLR,1,7,1);
003cc2  6830              LDR      r0,[r6,#0]  ; avar_ind_stat
003cc4  4238              TST      r0,r7
003cc6  d045              BEQ      |L1.15700|
;;;5545   	     else SET_REG(LPC_GPIO0->FIOSET,1,7,1);
003cc8  69a0              LDR      r0,[r4,#0x18]
003cca  f0400080          ORR      r0,r0,#0x80
003cce  61a0              STR      r0,[r4,#0x18]
                  |L1.15568|
;;;5546   		}
;;;5547   	//Реле аварии БПС
;;;5548   	if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_AV_BPS))
003cd0  20d2              MOVS     r0,#0xd2
003cd2  f7fffffe          BL       mess_find_unvol
003cd6  b110              CBZ      r0,|L1.15582|
003cd8  6828              LDR      r0,[r5,#0]  ; mess_data
003cda  286a              CMP      r0,#0x6a
003cdc  d040              BEQ      |L1.15712|
                  |L1.15582|
;;;5549   		{
;;;5550   		if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_BPS,1);
;;;5551   		else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_BPS,1);
;;;5552        	}
;;;5553   	else 
;;;5554   		{
;;;5555   		if(!(avar_ind_stat&0x100007f8)) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_BPS,1);
003cde  6830              LDR      r0,[r6,#0]  ; avar_ind_stat
003ce0  4238              TST      r0,r7
003ce2  d04c              BEQ      |L1.15742|
;;;5556        	else SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_BPS,1);
003ce4  69a0              LDR      r0,[r4,#0x18]
003ce6  f0400020          ORR      r0,r0,#0x20
003cea  61a0              STR      r0,[r4,#0x18]
003cec  e0ec              B        |L1.16072|
                  |L1.15598|
003cee  6868              LDR      r0,[r5,#4]            ;5509  ; mess_data
003cf0  b138              CBZ      r0,|L1.15618|
003cf2  2801              CMP      r0,#1                 ;5510
003cf4  d1d0              BNE      |L1.15512|
003cf6  69a0              LDR      r0,[r4,#0x18]         ;5510
003cf8  f0400010          ORR      r0,r0,#0x10           ;5510
003cfc  61a0              STR      r0,[r4,#0x18]         ;5510
003cfe  e7cb              B        |L1.15512|
                  |L1.15616|
003d00  e004              B        |L1.15628|
                  |L1.15618|
003d02  69e0              LDR      r0,[r4,#0x1c]         ;5509
003d04  f0400010          ORR      r0,r0,#0x10           ;5509
003d08  61e0              STR      r0,[r4,#0x1c]         ;5509
003d0a  e7c5              B        |L1.15512|
                  |L1.15628|
003d0c  69e0              LDR      r0,[r4,#0x1c]         ;5514
003d0e  f0400010          ORR      r0,r0,#0x10           ;5514
003d12  61e0              STR      r0,[r4,#0x1c]         ;5514
003d14  e7c0              B        |L1.15512|
                  |L1.15638|
003d16  6868              LDR      r0,[r5,#4]            ;5530  ; mess_data
003d18  b120              CBZ      r0,|L1.15652|
003d1a  69e0              LDR      r0,[r4,#0x1c]         ;5531
003d1c  f0407000          ORR      r0,r0,#0x2000000      ;5531
003d20  61e0              STR      r0,[r4,#0x1c]         ;5531
003d22  e7c7              B        |L1.15540|
                  |L1.15652|
003d24  69a0              LDR      r0,[r4,#0x18]         ;5530
003d26  f0407000          ORR      r0,r0,#0x2000000      ;5530
003d2a  61a0              STR      r0,[r4,#0x18]         ;5530
003d2c  e7c2              B        |L1.15540|
                  |L1.15662|
003d2e  6ba0              LDR      r0,[r4,#0x38]         ;5533
003d30  f0407000          ORR      r0,r0,#0x2000000      ;5533
003d34  63a0              STR      r0,[r4,#0x38]         ;5533
003d36  e7bd              B        |L1.15540|
                  |L1.15672|
003d38  6868              LDR      r0,[r5,#4]            ;5539  ; mess_data
003d3a  b130              CBZ      r0,|L1.15690|
003d3c  2801              CMP      r0,#1                 ;5540
003d3e  d1c7              BNE      |L1.15568|
003d40  69a0              LDR      r0,[r4,#0x18]         ;5540
003d42  f0400080          ORR      r0,r0,#0x80           ;5540
003d46  61a0              STR      r0,[r4,#0x18]         ;5540
003d48  e7c2              B        |L1.15568|
                  |L1.15690|
003d4a  69e0              LDR      r0,[r4,#0x1c]         ;5539
003d4c  f0400080          ORR      r0,r0,#0x80           ;5539
003d50  61e0              STR      r0,[r4,#0x1c]         ;5539
003d52  e7bd              B        |L1.15568|
                  |L1.15700|
003d54  69e0              LDR      r0,[r4,#0x1c]         ;5544
003d56  f0400080          ORR      r0,r0,#0x80           ;5544
003d5a  61e0              STR      r0,[r4,#0x1c]         ;5544
003d5c  e7b8              B        |L1.15568|
                  |L1.15710|
003d5e  e013              B        |L1.15752|
                  |L1.15712|
003d60  6868              LDR      r0,[r5,#4]            ;5550  ; mess_data
003d62  b110              CBZ      r0,|L1.15722|
003d64  2801              CMP      r0,#1                 ;5551
003d66  d005              BEQ      |L1.15732|
003d68  e0ae              B        |L1.16072|
                  |L1.15722|
003d6a  69e0              LDR      r0,[r4,#0x1c]         ;5550
003d6c  f0400020          ORR      r0,r0,#0x20           ;5550
003d70  61e0              STR      r0,[r4,#0x1c]         ;5550
003d72  e0a9              B        |L1.16072|
                  |L1.15732|
003d74  69a0              LDR      r0,[r4,#0x18]         ;5551
003d76  f0400020          ORR      r0,r0,#0x20           ;5551
003d7a  61a0              STR      r0,[r4,#0x18]         ;5551
003d7c  e0a4              B        |L1.16072|
                  |L1.15742|
003d7e  69e0              LDR      r0,[r4,#0x1c]         ;5555
003d80  f0400020          ORR      r0,r0,#0x20           ;5555
003d84  61e0              STR      r0,[r4,#0x1c]         ;5555
003d86  e09f              B        |L1.16072|
                  |L1.15752|
;;;5557   		} 
;;;5558   	}
;;;5559   else	if((AUSW_MAIN==22033)||(AUSW_MAIN==22018))
003d88  f5a041ac          SUB      r1,r0,#0x5600
003d8c  3911              SUBS     r1,r1,#0x11
003d8e  d001              BEQ      |L1.15764|
003d90  310f              ADDS     r1,r1,#0xf
003d92  d17d              BNE      |L1.16016|
                  |L1.15764|
;;;5560   	{
;;;5561   	#ifndef UKU2071x 
;;;5562   	if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_AV_NET))
;;;5563   		{
;;;5564   		if(mess_data[1]==0) SET_REG(LPC_GPIO3->FIOSET,1,25,1);
;;;5565   		else SET_REG(LPC_GPIO3->FIOCLR,1,25,1);
;;;5566   		}
;;;5567   	else	if(!(avar_ind_stat&0x00000001)) SET_REG(LPC_GPIO3->FIOSET,1,25,1);
;;;5568   	else SET_REG(LPC_GPIO3->FIOCLR,1,25,1);
;;;5569   	#endif
;;;5570   	#ifdef UKU2071x 
;;;5571   	if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_AV_NET))
003d94  20d2              MOVS     r0,#0xd2
003d96  f7fffffe          BL       mess_find_unvol
003d9a  b110              CBZ      r0,|L1.15778|
003d9c  6828              LDR      r0,[r5,#0]  ; mess_data
003d9e  2866              CMP      r0,#0x66
003da0  d03c              BEQ      |L1.15900|
                  |L1.15778|
;;;5572   		{
;;;5573   		if(mess_data[1]==0) SET_REG(LPC_GPIO3->FIOCLR,1,25,1);
;;;5574   		else SET_REG(LPC_GPIO3->FIOSET,1,25,1);
;;;5575   		}
;;;5576   	else	if(!(avar_ind_stat&0x00000001)) SET_REG(LPC_GPIO3->FIOCLR,1,25,1);
003da2  6830              LDR      r0,[r6,#0]  ; avar_ind_stat
003da4  07c0              LSLS     r0,r0,#31
003da6  d045              BEQ      |L1.15924|
;;;5577   	else SET_REG(LPC_GPIO3->FIOSET,1,25,1);
003da8  6fa0              LDR      r0,[r4,#0x78]
003daa  f0407000          ORR      r0,r0,#0x2000000
003dae  67a0              STR      r0,[r4,#0x78]
                  |L1.15792|
;;;5578   	#endif
;;;5579   	
;;;5580   	
;;;5581   	if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_AV_BPS))
003db0  20d2              MOVS     r0,#0xd2
003db2  f7fffffe          BL       mess_find_unvol
003db6  b110              CBZ      r0,|L1.15806|
003db8  6828              LDR      r0,[r5,#0]  ; mess_data
003dba  286a              CMP      r0,#0x6a
003dbc  d03f              BEQ      |L1.15934|
                  |L1.15806|
;;;5582   		{
;;;5583   		if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,7,1);
;;;5584   		else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOSET,1,7,1);
;;;5585   	     }
;;;5586   	else 
;;;5587   		{
;;;5588   		if(!(avar_ind_stat&0x100007f8)) SET_REG(LPC_GPIO0->FIOCLR,1,7,1);
003dbe  6830              LDR      r0,[r6,#0]  ; avar_ind_stat
003dc0  4238              TST      r0,r7
003dc2  e017              B        |L1.15860|
                  |L1.15812|
                          DCD      0x4002c000
                  |L1.15816|
                          DCD      0xfff000ff
                  |L1.15820|
                          DCD      0x2009c000
                  |L1.15824|
                          DCD      bat
                  |L1.15828|
                          DCD      tbatdisable_stat
                  |L1.15832|
                          DCD      tbatdisable_cmnd
                  |L1.15836|
                          DCD      main_1Hz_cnt
                  |L1.15840|
                          DCD      mess_data
                  |L1.15844|
                          DCD      avar_ind_stat
                  |L1.15848|
                          DCD      AUSW_MAIN
                  |L1.15852|
                          DCD      ips_bat_av_stat
                  |L1.15856|
                          DCD      0x100007f8
                  |L1.15860|
003df4  d031              BEQ      |L1.15962|
;;;5589   	     else SET_REG(LPC_GPIO0->FIOSET,1,7,1);
003df6  69a0              LDR      r0,[r4,#0x18]
003df8  f0400080          ORR      r0,r0,#0x80
003dfc  61a0              STR      r0,[r4,#0x18]
                  |L1.15870|
;;;5590   		} 
;;;5591   
;;;5592   	//Реле аварий батарей
;;;5593   	if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_AV_BAT))
003dfe  20d2              MOVS     r0,#0xd2
003e00  f7fffffe          BL       mess_find_unvol
003e04  b110              CBZ      r0,|L1.15884|
003e06  6828              LDR      r0,[r5,#0]  ; mess_data
003e08  2867              CMP      r0,#0x67
003e0a  d02b              BEQ      |L1.15972|
                  |L1.15884|
;;;5594   		{
;;;5595   		if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,4,1);
;;;5596   		else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOSET,1,4,1);
;;;5597        	}
;;;5598   	else 
;;;5599   		{
;;;5600   		if(!(ips_bat_av_stat)) SET_REG(LPC_GPIO0->FIOCLR,1,4,1);
003e0c  f8980000          LDRB     r0,[r8,#0]  ; ips_bat_av_stat
003e10  b390              CBZ      r0,|L1.15992|
;;;5601        	else SET_REG(LPC_GPIO0->FIOSET,1,4,1);
003e12  69a0              LDR      r0,[r4,#0x18]
003e14  f0400010          ORR      r0,r0,#0x10
003e18  61a0              STR      r0,[r4,#0x18]
003e1a  e055              B        |L1.16072|
                  |L1.15900|
003e1c  6868              LDR      r0,[r5,#4]            ;5573  ; mess_data
003e1e  b120              CBZ      r0,|L1.15914|
003e20  6fa0              LDR      r0,[r4,#0x78]         ;5574
003e22  f0407000          ORR      r0,r0,#0x2000000      ;5574
003e26  67a0              STR      r0,[r4,#0x78]         ;5574
003e28  e7c2              B        |L1.15792|
                  |L1.15914|
003e2a  6fe0              LDR      r0,[r4,#0x7c]         ;5573
003e2c  f0407000          ORR      r0,r0,#0x2000000      ;5573
003e30  67e0              STR      r0,[r4,#0x7c]         ;5573
003e32  e7bd              B        |L1.15792|
                  |L1.15924|
003e34  6fe0              LDR      r0,[r4,#0x7c]         ;5576
003e36  f0407000          ORR      r0,r0,#0x2000000      ;5576
003e3a  67e0              STR      r0,[r4,#0x7c]         ;5576
003e3c  e7b8              B        |L1.15792|
                  |L1.15934|
003e3e  6868              LDR      r0,[r5,#4]            ;5583  ; mess_data
003e40  b130              CBZ      r0,|L1.15952|
003e42  2801              CMP      r0,#1                 ;5584
003e44  d1db              BNE      |L1.15870|
003e46  69a0              LDR      r0,[r4,#0x18]         ;5584
003e48  f0400080          ORR      r0,r0,#0x80           ;5584
003e4c  61a0              STR      r0,[r4,#0x18]         ;5584
003e4e  e7d6              B        |L1.15870|
                  |L1.15952|
003e50  69e0              LDR      r0,[r4,#0x1c]         ;5583
003e52  f0400080          ORR      r0,r0,#0x80           ;5583
003e56  61e0              STR      r0,[r4,#0x1c]         ;5583
003e58  e7d1              B        |L1.15870|
                  |L1.15962|
003e5a  69e0              LDR      r0,[r4,#0x1c]         ;5588
003e5c  f0400080          ORR      r0,r0,#0x80           ;5588
003e60  61e0              STR      r0,[r4,#0x1c]         ;5588
003e62  e7cc              B        |L1.15870|
                  |L1.15972|
003e64  6868              LDR      r0,[r5,#4]            ;5595  ; mess_data
003e66  b110              CBZ      r0,|L1.15982|
003e68  2801              CMP      r0,#1                 ;5596
003e6a  d007              BEQ      |L1.15996|
003e6c  e02c              B        |L1.16072|
                  |L1.15982|
003e6e  69e0              LDR      r0,[r4,#0x1c]         ;5595
003e70  f0400010          ORR      r0,r0,#0x10           ;5595
003e74  61e0              STR      r0,[r4,#0x1c]         ;5595
003e76  e027              B        |L1.16072|
                  |L1.15992|
003e78  e005              B        |L1.16006|
003e7a  e009              B        |L1.16016|
                  |L1.15996|
003e7c  69a0              LDR      r0,[r4,#0x18]         ;5596
003e7e  f0400010          ORR      r0,r0,#0x10           ;5596
003e82  61a0              STR      r0,[r4,#0x18]         ;5596
003e84  e020              B        |L1.16072|
                  |L1.16006|
003e86  69e0              LDR      r0,[r4,#0x1c]         ;5600
003e88  f0400010          ORR      r0,r0,#0x10           ;5600
003e8c  61e0              STR      r0,[r4,#0x1c]         ;5600
003e8e  e01b              B        |L1.16072|
                  |L1.16016|
;;;5602   		} 
;;;5603   	} 	 
;;;5604   else	
;;;5605   	{
;;;5606   	//Реле аварии сети ТУТ КАКАЯ то ЛАЖА с аварией сети. Обращение к разным портам
;;;5607   	#ifndef UKU2071x 
;;;5608   	if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_AV_NET))
;;;5609   		{
;;;5610   		if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_NET,1);
;;;5611   		else SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_NET,1);
;;;5612   		}
;;;5613   	else	if(!(avar_ind_stat&0x00000001)) SET_REG(LPC_GPIO1->FIOCLR,1,SHIFT_REL_AV_NET,1);
;;;5614   	else SET_REG(LPC_GPIO3->FIOCLR,1,SHIFT_REL_AV_NET,1);
;;;5615   	#endif
;;;5616   	#ifdef UKU2071x 
;;;5617   	if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_AV_NET))
003e90  20d2              MOVS     r0,#0xd2
003e92  f7fffffe          BL       mess_find_unvol
003e96  b110              CBZ      r0,|L1.16030|
003e98  6828              LDR      r0,[r5,#0]  ; mess_data
003e9a  2866              CMP      r0,#0x66
003e9c  d026              BEQ      |L1.16108|
                  |L1.16030|
;;;5618   		{
;;;5619   		if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_NET,1);
;;;5620   		else SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_NET,1);
;;;5621   		}
;;;5622   	else	if(!(avar_ind_stat&0x00000001)) SET_REG(LPC_GPIO1->FIOSET,1,SHIFT_REL_AV_NET,1);
003e9e  6830              LDR      r0,[r6,#0]  ; avar_ind_stat
003ea0  07c0              LSLS     r0,r0,#31
003ea2  d02f              BEQ      |L1.16132|
;;;5623   	else SET_REG(LPC_GPIO3->FIOSET,1,SHIFT_REL_AV_NET,1);
003ea4  6fa0              LDR      r0,[r4,#0x78]
003ea6  f0407000          ORR      r0,r0,#0x2000000
003eaa  67a0              STR      r0,[r4,#0x78]
                  |L1.16044|
;;;5624   	#endif
;;;5625   
;;;5626   	if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_AV_BPS))
003eac  20d2              MOVS     r0,#0xd2
003eae  f7fffffe          BL       mess_find_unvol
003eb2  b110              CBZ      r0,|L1.16058|
003eb4  6828              LDR      r0,[r5,#0]  ; mess_data
003eb6  286a              CMP      r0,#0x6a
003eb8  d029              BEQ      |L1.16142|
                  |L1.16058|
;;;5627   		{
;;;5628   		if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_BPS,1);
;;;5629   		else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_BPS,1);
;;;5630        	}
;;;5631   	else 
;;;5632   		{
;;;5633   		if(!(avar_ind_stat&0x100007f8)) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_BPS,1);
003eba  6830              LDR      r0,[r6,#0]  ; avar_ind_stat
003ebc  4238              TST      r0,r7
003ebe  d034              BEQ      |L1.16170|
;;;5634        	else SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_BPS,1);
003ec0  69a0              LDR      r0,[r4,#0x18]
003ec2  f0400020          ORR      r0,r0,#0x20
003ec6  61a0              STR      r0,[r4,#0x18]
                  |L1.16072|
;;;5635   		}
;;;5636   	}
;;;5637   //Дополнительное реле УКУ 
;;;5638   if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_EXT))	 
003ec8  20d2              MOVS     r0,#0xd2
003eca  f7fffffe          BL       mess_find_unvol
;;;5639   	{
;;;5640   	if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,9,1);
;;;5641   	else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOSET,1,9,1);
;;;5642   	}
;;;5643   else if(DOP_RELE_FUNC==0)	//если допреле подключено к ускоренному заряду
;;;5644   	{
;;;5645   	if((!speedChIsOn)&&(spc_stat!=spcVZ)&&(hv_vz_stat==hvsOFF)&&(sp_ch_stat==scsOFF)&&(vz1_stat==vz1sOFF)&&(vz2_stat==vz2sOFF)&&(load_U/10<UVENTOFF))   SET_REG(LPC_GPIO0->FIOCLR,1,9,1);
003ece  f8df83fc          LDR      r8,|L1.17100|
003ed2  4fff              LDR      r7,|L1.17104|
003ed4  4eff              LDR      r6,|L1.17108|
003ed6  b110              CBZ      r0,|L1.16094|
003ed8  6828              LDR      r0,[r5,#0]            ;5638  ; mess_data
003eda  2871              CMP      r0,#0x71              ;5638
003edc  d02a              BEQ      |L1.16180|
                  |L1.16094|
003ede  48fe              LDR      r0,|L1.17112|
003ee0  f9b00000          LDRSH    r0,[r0,#0]            ;5643  ; DOP_RELE_FUNC
003ee4  b380              CBZ      r0,|L1.16200|
;;;5646   	else if((speedChIsOn)||(spc_stat==spcVZ)||(hv_vz_stat!=hvsOFF)||(sp_ch_stat!=scsOFF)||(vz1_stat!=vz1sOFF)||(vz2_stat!=vz2sOFF)) SET_REG(LPC_GPIO0->FIOSET,1,9,1);
;;;5647   	}
;;;5648   else if(DOP_RELE_FUNC==1)  //если допреле подключено к индикации разряженной батареи
003ee6  2801              CMP      r0,#1
003ee8  d066              BEQ      |L1.16312|
003eea  e070              B        |L1.16334|
                  |L1.16108|
003eec  6868              LDR      r0,[r5,#4]            ;5619  ; mess_data
003eee  b120              CBZ      r0,|L1.16122|
003ef0  69e0              LDR      r0,[r4,#0x1c]         ;5620
003ef2  f0407000          ORR      r0,r0,#0x2000000      ;5620
003ef6  61e0              STR      r0,[r4,#0x1c]         ;5620
003ef8  e7d8              B        |L1.16044|
                  |L1.16122|
003efa  69a0              LDR      r0,[r4,#0x18]         ;5619
003efc  f0407000          ORR      r0,r0,#0x2000000      ;5619
003f00  61a0              STR      r0,[r4,#0x18]         ;5619
003f02  e7d3              B        |L1.16044|
                  |L1.16132|
003f04  6ba0              LDR      r0,[r4,#0x38]         ;5622
003f06  f0407000          ORR      r0,r0,#0x2000000      ;5622
003f0a  63a0              STR      r0,[r4,#0x38]         ;5622
003f0c  e7ce              B        |L1.16044|
                  |L1.16142|
003f0e  6868              LDR      r0,[r5,#4]            ;5628  ; mess_data
003f10  b130              CBZ      r0,|L1.16160|
003f12  2801              CMP      r0,#1                 ;5629
003f14  d1d8              BNE      |L1.16072|
003f16  69a0              LDR      r0,[r4,#0x18]         ;5629
003f18  f0400020          ORR      r0,r0,#0x20           ;5629
003f1c  61a0              STR      r0,[r4,#0x18]         ;5629
003f1e  e7d3              B        |L1.16072|
                  |L1.16160|
003f20  69e0              LDR      r0,[r4,#0x1c]         ;5628
003f22  f0400020          ORR      r0,r0,#0x20           ;5628
003f26  61e0              STR      r0,[r4,#0x1c]         ;5628
003f28  e7ce              B        |L1.16072|
                  |L1.16170|
003f2a  69e0              LDR      r0,[r4,#0x1c]         ;5633
003f2c  f0400020          ORR      r0,r0,#0x20           ;5633
003f30  61e0              STR      r0,[r4,#0x1c]         ;5633
003f32  e7c9              B        |L1.16072|
                  |L1.16180|
003f34  6868              LDR      r0,[r5,#4]            ;5640  ; mess_data
003f36  b110              CBZ      r0,|L1.16190|
003f38  2801              CMP      r0,#1                 ;5641
003f3a  d006              BEQ      |L1.16202|
003f3c  e047              B        |L1.16334|
                  |L1.16190|
003f3e  69e0              LDR      r0,[r4,#0x1c]         ;5640
003f40  f4407000          ORR      r0,r0,#0x200          ;5640
003f44  61e0              STR      r0,[r4,#0x1c]         ;5640
003f46  e042              B        |L1.16334|
                  |L1.16200|
003f48  e004              B        |L1.16212|
                  |L1.16202|
003f4a  69a0              LDR      r0,[r4,#0x18]         ;5641
003f4c  f4407000          ORR      r0,r0,#0x200          ;5641
003f50  61a0              STR      r0,[r4,#0x18]         ;5641
003f52  e03c              B        |L1.16334|
                  |L1.16212|
003f54  48e1              LDR      r0,|L1.17116|
003f56  49e2              LDR      r1,|L1.17120|
003f58  f9b00000          LDRSH    r0,[r0,#0]            ;5645  ; speedChIsOn
003f5c  b9d0              CBNZ     r0,|L1.16276|
003f5e  f8962023          LDRB     r2,[r6,#0x23]         ;5645  ; spc_stat
003f62  2a02              CMP      r2,#2                 ;5645
003f64  d016              BEQ      |L1.16276|
003f66  780a              LDRB     r2,[r1,#0]            ;5645  ; hv_vz_stat
003f68  b9a2              CBNZ     r2,|L1.16276|
003f6a  783a              LDRB     r2,[r7,#0]            ;5645  ; sp_ch_stat
003f6c  b992              CBNZ     r2,|L1.16276|
003f6e  7972              LDRB     r2,[r6,#5]            ;5645  ; vz1_stat
003f70  b982              CBNZ     r2,|L1.16276|
003f72  79f2              LDRB     r2,[r6,#7]            ;5645  ; vz2_stat
003f74  b972              CBNZ     r2,|L1.16276|
003f76  f9b82000          LDRSH    r2,[r8,#0]            ;5645  ; load_U
003f7a  230a              MOVS     r3,#0xa               ;5645
003f7c  fb92f2f3          SDIV     r2,r2,r3              ;5645
003f80  4bd8              LDR      r3,|L1.17124|
003f82  f9b33000          LDRSH    r3,[r3,#0]            ;5645  ; UVENTOFF
003f86  429a              CMP      r2,r3                 ;5645
003f88  da04              BGE      |L1.16276|
003f8a  69e0              LDR      r0,[r4,#0x1c]         ;5645
003f8c  f4407000          ORR      r0,r0,#0x200          ;5645
003f90  61e0              STR      r0,[r4,#0x1c]         ;5645
003f92  e01c              B        |L1.16334|
                  |L1.16276|
003f94  b958              CBNZ     r0,|L1.16302|
003f96  f8960023          LDRB     r0,[r6,#0x23]         ;5646  ; spc_stat
003f9a  2802              CMP      r0,#2                 ;5646
003f9c  d007              BEQ      |L1.16302|
003f9e  7808              LDRB     r0,[r1,#0]            ;5646  ; hv_vz_stat
003fa0  b928              CBNZ     r0,|L1.16302|
003fa2  7838              LDRB     r0,[r7,#0]            ;5646  ; sp_ch_stat
003fa4  b918              CBNZ     r0,|L1.16302|
003fa6  7970              LDRB     r0,[r6,#5]            ;5646  ; vz1_stat
003fa8  b908              CBNZ     r0,|L1.16302|
003faa  79f0              LDRB     r0,[r6,#7]            ;5646  ; vz2_stat
003fac  b178              CBZ      r0,|L1.16334|
                  |L1.16302|
003fae  69a0              LDR      r0,[r4,#0x18]         ;5646
003fb0  f4407000          ORR      r0,r0,#0x200          ;5646
003fb4  61a0              STR      r0,[r4,#0x18]         ;5646
003fb6  e00a              B        |L1.16334|
                  |L1.16312|
;;;5649   	{
;;;5650   	if((mess_find_unvol(MESS2RELE_HNDL))&& (mess_data[0]==PARAM_RELE_BAT_IS_DISCHARGED)) SET_REG(LPC_GPIO0->FIOCLR,1,9,1);
003fb8  20d2              MOVS     r0,#0xd2
003fba  f7fffffe          BL       mess_find_unvol
003fbe  b110              CBZ      r0,|L1.16326|
003fc0  6828              LDR      r0,[r5,#0]  ; mess_data
003fc2  2872              CMP      r0,#0x72
003fc4  d017              BEQ      |L1.16374|
                  |L1.16326|
;;;5651   	else SET_REG(LPC_GPIO0->FIOSET,1,9,1);
003fc6  69a0              LDR      r0,[r4,#0x18]
003fc8  f4407000          ORR      r0,r0,#0x200
003fcc  61a0              STR      r0,[r4,#0x18]
                  |L1.16334|
;;;5652   	}
;;;5653   
;;;5654   #endif //o_9
;;;5655   
;;;5656   #if defined UKU_6U || defined UKU_220_IPS_TERMOKOMPENSAT   //o_9	
;;;5657   //Блок выносной реле
;;;5658   if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_BDR1))
003fce  20d2              MOVS     r0,#0xd2
003fd0  f7fffffe          BL       mess_find_unvol
;;;5659   	{
;;;5660   	if(mess_data[1]==0) 		bdr_transmit_stat&=0xfe;
003fd4  f8df9310          LDR      r9,|L1.17128|
;;;5661   	else if(mess_data[1]==1) 	bdr_transmit_stat|=0x01;
;;;5662   	}
;;;5663   else 
;;;5664   	{
;;;5665   	if(bdr_avar_stat&0x01)  	bdr_transmit_stat|=0x01;
003fd8  4cc4              LDR      r4,|L1.17132|
003fda  b110              CBZ      r0,|L1.16354|
003fdc  6828              LDR      r0,[r5,#0]            ;5658  ; mess_data
003fde  2875              CMP      r0,#0x75              ;5658
003fe0  d00e              BEQ      |L1.16384|
                  |L1.16354|
003fe2  7820              LDRB     r0,[r4,#0]  ; bdr_avar_stat
003fe4  07c0              LSLS     r0,r0,#31
003fe6  d01e              BEQ      |L1.16422|
003fe8  f8990000          LDRB     r0,[r9,#0]  ; bdr_transmit_stat
003fec  f0400001          ORR      r0,r0,#1
003ff0  f8890000          STRB     r0,[r9,#0]
003ff4  e01d              B        |L1.16434|
                  |L1.16374|
003ff6  69e0              LDR      r0,[r4,#0x1c]         ;5650
003ff8  f4407000          ORR      r0,r0,#0x200          ;5650
003ffc  61e0              STR      r0,[r4,#0x1c]         ;5650
003ffe  e7e6              B        |L1.16334|
                  |L1.16384|
004000  6868              LDR      r0,[r5,#4]            ;5660  ; mess_data
004002  b110              CBZ      r0,|L1.16394|
004004  2801              CMP      r0,#1                 ;5661
004006  d007              BEQ      |L1.16408|
004008  e013              B        |L1.16434|
                  |L1.16394|
00400a  f8990000          LDRB     r0,[r9,#0]            ;5660  ; bdr_transmit_stat
00400e  f00000fe          AND      r0,r0,#0xfe           ;5660
004012  f8890000          STRB     r0,[r9,#0]            ;5660
004016  e00c              B        |L1.16434|
                  |L1.16408|
004018  f8990000          LDRB     r0,[r9,#0]            ;5661  ; bdr_transmit_stat
00401c  f0400001          ORR      r0,r0,#1              ;5661
004020  f8890000          STRB     r0,[r9,#0]            ;5661
004024  e005              B        |L1.16434|
                  |L1.16422|
;;;5666   	else 						bdr_transmit_stat&=0xfe;
004026  f8990000          LDRB     r0,[r9,#0]  ; bdr_transmit_stat
00402a  f00000fe          AND      r0,r0,#0xfe
00402e  f8890000          STRB     r0,[r9,#0]
                  |L1.16434|
;;;5667   	}	
;;;5668   
;;;5669   if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_BDR2))
004032  20d2              MOVS     r0,#0xd2
004034  f7fffffe          BL       mess_find_unvol
004038  b110              CBZ      r0,|L1.16448|
00403a  6828              LDR      r0,[r5,#0]  ; mess_data
00403c  2876              CMP      r0,#0x76
00403e  d009              BEQ      |L1.16468|
                  |L1.16448|
;;;5670   	{
;;;5671   	if(mess_data[1]==0) 		bdr_transmit_stat&=0xfd;
;;;5672   	else if(mess_data[1]==1) 	bdr_transmit_stat|=0x02;
;;;5673   	}
;;;5674   else 
;;;5675   	{
;;;5676   	if(bdr_avar_stat&0x02)  	bdr_transmit_stat|=0x02;	 //o_9
004040  7820              LDRB     r0,[r4,#0]  ; bdr_avar_stat
004042  0780              LSLS     r0,r0,#30
004044  d519              BPL      |L1.16506|
004046  f8990000          LDRB     r0,[r9,#0]  ; bdr_transmit_stat
00404a  f0400002          ORR      r0,r0,#2
00404e  f8890000          STRB     r0,[r9,#0]
004052  e018              B        |L1.16518|
                  |L1.16468|
004054  6868              LDR      r0,[r5,#4]            ;5671  ; mess_data
004056  b110              CBZ      r0,|L1.16478|
004058  2801              CMP      r0,#1                 ;5672
00405a  d007              BEQ      |L1.16492|
00405c  e013              B        |L1.16518|
                  |L1.16478|
00405e  f8990000          LDRB     r0,[r9,#0]            ;5671  ; bdr_transmit_stat
004062  f00000fd          AND      r0,r0,#0xfd           ;5671
004066  f8890000          STRB     r0,[r9,#0]            ;5671
00406a  e00c              B        |L1.16518|
                  |L1.16492|
00406c  f8990000          LDRB     r0,[r9,#0]            ;5672  ; bdr_transmit_stat
004070  f0400002          ORR      r0,r0,#2              ;5672
004074  f8890000          STRB     r0,[r9,#0]            ;5672
004078  e005              B        |L1.16518|
                  |L1.16506|
;;;5677   	else 						bdr_transmit_stat&=0xfd;
00407a  f8990000          LDRB     r0,[r9,#0]  ; bdr_transmit_stat
00407e  f00000fd          AND      r0,r0,#0xfd
004082  f8890000          STRB     r0,[r9,#0]
                  |L1.16518|
;;;5678   	}	
;;;5679   	
;;;5680   if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_BDR3))
004086  20d2              MOVS     r0,#0xd2
004088  f7fffffe          BL       mess_find_unvol
00408c  b110              CBZ      r0,|L1.16532|
00408e  6828              LDR      r0,[r5,#0]  ; mess_data
004090  2877              CMP      r0,#0x77
004092  d009              BEQ      |L1.16552|
                  |L1.16532|
;;;5681   	{
;;;5682   	if(mess_data[1]==0) 		bdr_transmit_stat&=0xfb;
;;;5683   	else if(mess_data[1]==1) 	bdr_transmit_stat|=0x04;
;;;5684   	}
;;;5685   else 
;;;5686   	{
;;;5687   	if(bdr_avar_stat&0x04)  	bdr_transmit_stat|=0x04;	//o_9
004094  7820              LDRB     r0,[r4,#0]  ; bdr_avar_stat
004096  0740              LSLS     r0,r0,#29
004098  d519              BPL      |L1.16590|
00409a  f8990000          LDRB     r0,[r9,#0]  ; bdr_transmit_stat
00409e  f0400004          ORR      r0,r0,#4
0040a2  f8890000          STRB     r0,[r9,#0]
0040a6  e018              B        |L1.16602|
                  |L1.16552|
0040a8  6868              LDR      r0,[r5,#4]            ;5682  ; mess_data
0040aa  b110              CBZ      r0,|L1.16562|
0040ac  2801              CMP      r0,#1                 ;5683
0040ae  d007              BEQ      |L1.16576|
0040b0  e013              B        |L1.16602|
                  |L1.16562|
0040b2  f8990000          LDRB     r0,[r9,#0]            ;5682  ; bdr_transmit_stat
0040b6  f00000fb          AND      r0,r0,#0xfb           ;5682
0040ba  f8890000          STRB     r0,[r9,#0]            ;5682
0040be  e00c              B        |L1.16602|
                  |L1.16576|
0040c0  f8990000          LDRB     r0,[r9,#0]            ;5683  ; bdr_transmit_stat
0040c4  f0400004          ORR      r0,r0,#4              ;5683
0040c8  f8890000          STRB     r0,[r9,#0]            ;5683
0040cc  e005              B        |L1.16602|
                  |L1.16590|
;;;5688   	else 						bdr_transmit_stat&=0xfb;
0040ce  f8990000          LDRB     r0,[r9,#0]  ; bdr_transmit_stat
0040d2  f00000fb          AND      r0,r0,#0xfb
0040d6  f8890000          STRB     r0,[r9,#0]
                  |L1.16602|
;;;5689   	}	
;;;5690   	
;;;5691   if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_BDR4))
0040da  20d2              MOVS     r0,#0xd2
0040dc  f7fffffe          BL       mess_find_unvol
0040e0  b110              CBZ      r0,|L1.16616|
0040e2  6828              LDR      r0,[r5,#0]  ; mess_data
0040e4  2878              CMP      r0,#0x78
0040e6  d009              BEQ      |L1.16636|
                  |L1.16616|
;;;5692   	{
;;;5693   	if(mess_data[1]==0) 		bdr_transmit_stat&=0xf7;
;;;5694   	else if(mess_data[1]==1) 	bdr_transmit_stat|=0x08;
;;;5695   	}
;;;5696   else 
;;;5697   	{
;;;5698   	if(bdr_avar_stat&0x08)  	bdr_transmit_stat|=0x08;	 //o_9
0040e8  7820              LDRB     r0,[r4,#0]  ; bdr_avar_stat
0040ea  0700              LSLS     r0,r0,#28
0040ec  d519              BPL      |L1.16674|
0040ee  f8990000          LDRB     r0,[r9,#0]  ; bdr_transmit_stat
0040f2  f0400008          ORR      r0,r0,#8
0040f6  f8890000          STRB     r0,[r9,#0]
0040fa  e018              B        |L1.16686|
                  |L1.16636|
0040fc  6868              LDR      r0,[r5,#4]            ;5693  ; mess_data
0040fe  b110              CBZ      r0,|L1.16646|
004100  2801              CMP      r0,#1                 ;5694
004102  d007              BEQ      |L1.16660|
004104  e013              B        |L1.16686|
                  |L1.16646|
004106  f8990000          LDRB     r0,[r9,#0]            ;5693  ; bdr_transmit_stat
00410a  f00000f7          AND      r0,r0,#0xf7           ;5693
00410e  f8890000          STRB     r0,[r9,#0]            ;5693
004112  e00c              B        |L1.16686|
                  |L1.16660|
004114  f8990000          LDRB     r0,[r9,#0]            ;5694  ; bdr_transmit_stat
004118  f0400008          ORR      r0,r0,#8              ;5694
00411c  f8890000          STRB     r0,[r9,#0]            ;5694
004120  e005              B        |L1.16686|
                  |L1.16674|
;;;5699   	else 						bdr_transmit_stat&=0xf7;
004122  f8990000          LDRB     r0,[r9,#0]  ; bdr_transmit_stat
004126  f00000f7          AND      r0,r0,#0xf7
00412a  f8890000          STRB     r0,[r9,#0]
                  |L1.16686|
;;;5700   	}	
;;;5701   					 	
;;;5702   #endif
;;;5703   
;;;5704   #ifdef UKU_KONTUR
;;;5705   
;;;5706   //Реле общей аварии
;;;5707   if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_AV_COMM))
;;;5708   	{
;;;5709   	if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_COMM,1);
;;;5710   	else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_COMM,1);
;;;5711   	}
;;;5712   else 
;;;5713   	{
;;;5714        if(  (!(avar_ind_stat&0x00007fff)) &&
;;;5715             ((!SK_REL_EN[0]) || (sk_av_stat[0]!=sasON))  &&
;;;5716             ((!SK_REL_EN[1]) || (sk_av_stat[1]!=sasON))  &&
;;;5717             ((!SK_REL_EN[2]) || (sk_av_stat[2]!=sasON))  /*&&
;;;5718             ((!SK_REL_EN[3]) || (sk_av_stat[3]!=sasON))*/  )SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_COMM,1);
;;;5719        else SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_COMM,1);
;;;5720   	}
;;;5721   
;;;5722   	
;;;5723   //rel_warm_plazma=0;
;;;5724   //Реле освещения   
;;;5725   /*
;;;5726   if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_WARM))
;;;5727   	{
;;;5728   	if(mess_data[1]==0)
;;;5729   		{
;;;5730   		SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_WARM,1);
;;;5731   		rel_warm_plazma=1;
;;;5732   		}
;;;5733   	else if(mess_data[1]==1) 
;;;5734   		{
;;;5735   		SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_WARM,1);
;;;5736   		rel_warm_plazma=2;
;;;5737   		}
;;;5738        }
;;;5739   else 
;;;5740   	{
;;;5741   	if(warm_stat_k==wsOFF) 
;;;5742   		{
;;;5743   		SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_WARM,1);
;;;5744   		rel_warm_plazma=3;
;;;5745   		}
;;;5746        else 
;;;5747   		{
;;;5748   		SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_WARM,1);
;;;5749   		rel_warm_plazma=4;
;;;5750   		}
;;;5751   	}
;;;5752   */
;;;5753   //Реле освещения
;;;5754   if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_LIGHT))
;;;5755   	{
;;;5756   	if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_LIGHT,1);
;;;5757   	else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_LIGHT,1);
;;;5758        }
;;;5759   else 
;;;5760   	{
;;;5761   	if(sk_av_stat[0]!=sasON) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_LIGHT,1);
;;;5762        else SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_LIGHT,1);
;;;5763   	}
;;;5764   
;;;5765   
;;;5766   
;;;5767   //Реле выключения нагрузки
;;;5768   if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_LOAD_OFF))
;;;5769   	{
;;;5770   	if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_LOAD_OFF,1);
;;;5771   	else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_LOAD_OFF,1);
;;;5772        }
;;;5773   else if(tloaddisable_cmnd==0)
;;;5774   	{
;;;5775   	SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_LOAD_OFF,1);
;;;5776   	}
;;;5777   else if((tloaddisable_cmnd)&&(tloaddisable_cmnd<=11))
;;;5778   	{
;;;5779   	SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_LOAD_OFF,1);
;;;5780   	}
;;;5781   
;;;5782   else 
;;;5783   	{
;;;5784   	if(!(tloaddisable_stat==tldsON)) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_LOAD_OFF,1);
;;;5785        else SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_LOAD_OFF,1);
;;;5786   	} 
;;;5787   
;;;5788   //Реле осевого вентилятора или отопителя
;;;5789   if(RELE_LOG)
;;;5790   	{
;;;5791   	if((mess_find_unvol(MESS2RELE_HNDL))&&(mess_data[0]==PARAM_RELE_VENT_WARM))
;;;5792   		{
;;;5793   		if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_VENT_WARM,1);
;;;5794   		else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_VENT_WARM,1);
;;;5795   		}
;;;5796   	else 
;;;5797   		{
;;;5798   		if(warm_stat_k==wsOFF) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_VENT_WARM,1);
;;;5799   	     else SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_VENT_WARM,1);
;;;5800   		} 
;;;5801   
;;;5802   	}
;;;5803   else 
;;;5804   	{
;;;5805   	if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_VENT_WARM))
;;;5806   		{
;;;5807   		if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_VENT_WARM,1);
;;;5808   		else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_VENT_WARM,1);
;;;5809   		}
;;;5810   	else 
;;;5811   		{
;;;5812   		if(vent_stat_k==vsOFF) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_VENT_WARM,1);
;;;5813   	     else SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_VENT_WARM,1);
;;;5814   		} 
;;;5815   	}
;;;5816   #endif
;;;5817   
;;;5818   
;;;5819   #ifdef UKU_TELECORE2015
;;;5820   //Реле аварии сети
;;;5821   if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_AV_NET))
;;;5822   	{
;;;5823   	if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_NET,1);
;;;5824   	else SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_NET,1);
;;;5825   	}
;;;5826   else	if(!(avar_ind_stat&0x00000001)) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_NET,1);
;;;5827   else SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_NET,1);
;;;5828   
;;;5829   
;;;5830   //Реле освещения
;;;5831   if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_LIGHT))
;;;5832   	{
;;;5833   	if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_LIGHT,1);
;;;5834   	else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_LIGHT,1);
;;;5835        }
;;;5836   else 
;;;5837   	{
;;;5838   	if(sk_av_stat[0]!=sasON) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_LIGHT,1);
;;;5839        else SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_LIGHT,1);
;;;5840   	}
;;;5841   
;;;5842   //Реле отопителя
;;;5843   if((mess_find_unvol(MESS2RELE_HNDL))&&(mess_data[0]==PARAM_RELE_WARM))
;;;5844   	{
;;;5845   	if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_WARM,1);
;;;5846   	else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_WARM,1);
;;;5847   	}
;;;5848   else 
;;;5849   	{
;;;5850   	if(warm_stat_k==wsOFF) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_WARM,1);
;;;5851        else SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_WARM,1);
;;;5852   	} 
;;;5853   //Реле вентилятора
;;;5854   if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_VENT))
;;;5855   	{
;;;5856   	if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_VENT,1);
;;;5857   	else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_VENT,1);
;;;5858   	}
;;;5859   else 
;;;5860   	{
;;;5861   	if(vent_stat_k==vsOFF) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_VENT,1);
;;;5862        else SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_VENT,1);
;;;5863   	} 
;;;5864   
;;;5865   //Реле внутреннего вентилятора
;;;5866   if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_VVENT))
;;;5867   	{
;;;5868   	if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_VVENT,1);
;;;5869   	else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_VVENT,1);
;;;5870   	}
;;;5871   else 
;;;5872   	{
;;;5873   	if(vvent_stat_k==vsOFF) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_VVENT,1);
;;;5874        else SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_VVENT,1);
;;;5875   	} 
;;;5876   
;;;5877   #endif
;;;5878   
;;;5879   #ifdef UKU_TELECORE2017
;;;5880   //Реле аварии сети
;;;5881   if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_AV_NET))
;;;5882   	{
;;;5883   	if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_NET,1);
;;;5884   	else SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_NET,1);
;;;5885   	}
;;;5886   else	if(!(avar_ind_stat&0x00000001)) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_NET,1);
;;;5887   else SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_NET,1);
;;;5888   
;;;5889   
;;;5890   //Реле освещения
;;;5891   if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_LIGHT))
;;;5892   	{
;;;5893   	if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_LIGHT,1);
;;;5894   	else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_LIGHT,1);
;;;5895        }
;;;5896   else 
;;;5897   	{
;;;5898   	if(sk_av_stat[0]!=sasON) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_LIGHT,1);
;;;5899        else SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_LIGHT,1);
;;;5900   	}
;;;5901   
;;;5902   //Реле отопителя
;;;5903   if((mess_find_unvol(MESS2RELE_HNDL))&&(mess_data[0]==PARAM_RELE_WARM))
;;;5904   	{
;;;5905   	if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_WARM,1);
;;;5906   	else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_WARM,1);
;;;5907   	}
;;;5908   else 
;;;5909   	{
;;;5910   	if(warm_stat_k==wsOFF) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_WARM,1);
;;;5911        else SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_WARM,1);
;;;5912   	} 
;;;5913   //Реле вентилятора
;;;5914   if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_VENT))
;;;5915   	{
;;;5916   	if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_VENT,1);
;;;5917   	else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_VENT,1);
;;;5918   	}
;;;5919   else 
;;;5920   	{
;;;5921   	if(vent_stat_k==vsOFF) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_VENT,1);
;;;5922        else SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_VENT,1);
;;;5923   	} 
;;;5924   
;;;5925   //Реле внутреннего вентилятора
;;;5926   if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_VVENT))
;;;5927   	{
;;;5928   	if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_VVENT,1);
;;;5929   	else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_VVENT,1);
;;;5930   	}
;;;5931   else 
;;;5932   	{
;;;5933   	if(vvent_stat_k==vsOFF) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_VVENT,1);
;;;5934        else SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_VVENT,1);
;;;5935   	} 
;;;5936   
;;;5937   //Реле выключения нагрузки
;;;5938   if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_LOAD_OFF))
;;;5939   	{
;;;5940   	if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_LOAD_OFF,1);
;;;5941   	else if(mess_data[1]==1) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_LOAD_OFF,1);
;;;5942        }
;;;5943   else if(tloaddisable_cmnd==0)
;;;5944   	{
;;;5945   	SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_LOAD_OFF,1);
;;;5946   	}
;;;5947   else if((tloaddisable_cmnd)&&(tloaddisable_cmnd<=11))
;;;5948   	{
;;;5949   	SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_LOAD_OFF,1);
;;;5950   	}
;;;5951   
;;;5952   else 
;;;5953   	{
;;;5954   	if(!(tloaddisable_stat==tldsON)) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_LOAD_OFF,1);
;;;5955        else SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_LOAD_OFF,1);
;;;5956   	} 
;;;5957   
;;;5958   
;;;5959   #endif
;;;5960   
;;;5961   #ifdef IPS_SGEP_GAZPROM
;;;5962   rele_hndl_plazma[0]++;
;;;5963   if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_AV_BPS))
;;;5964   	{
;;;5965   	rele_hndl_plazma[1]++;
;;;5966   	if(mess_data[1]==0) SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_BPS,1);
;;;5967   	else/* if(mess_data[1]==1)*/ SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_BPS,1);
;;;5968        }
;;;5969   else 
;;;5970   	{
;;;5971   	if(!(avar_ind_stat&0x000007f8)) SET_REG(LPC_GPIO0->FIOCLR,1,SHIFT_REL_AV_BPS,1);
;;;5972        else SET_REG(LPC_GPIO0->FIOSET,1,SHIFT_REL_AV_BPS,1);
;;;5973   	} 
;;;5974   
;;;5975   if((mess_find_unvol(MESS2RELE_HNDL))&&	(mess_data[0]==PARAM_RELE_AV_NET))
;;;5976   	{
;;;5977   	rele_hndl_plazma[2]++;
;;;5978   	if(mess_data[1]==0) SET_REG(LPC_GPIO3->FIOSET,1,25,1);
;;;5979   	else SET_REG(LPC_GPIO3->FIOCLR,1,25,1);
;;;5980   	}
;;;5981   else	if(!(avar_ind_stat&0x00000001)) SET_REG(LPC_GPIO3->FIOCLR,1,25,1);
;;;5982   else SET_REG(LPC_GPIO3->FIOSET,1,25,1);
;;;5983   #endif
;;;5984   
;;;5985   if(NUMBDR==1)
00412e  4870              LDR      r0,|L1.17136|
004130  8800              LDRH     r0,[r0,#0]  ; NUMBDR
004132  2801              CMP      r0,#1
004134  d17e              BNE      |L1.16948|
;;;5986   	{
;;;5987   	char ii_;
;;;5988   	char bdr_avar_stat_temp=0;
004136  f04f0000          MOV      r0,#0
;;;5989   	for	(ii_=0;ii_<4;ii_++)
00413a  4601              MOV      r1,r0
;;;5990   		{
;;;5991   	//o_9_s
;;;5992   	#ifdef UKU_6U
;;;5993   		 //АБ разряжена
;;;5994   		if((RELE_SET_MASK[ii_]&0x01)&&
;;;5995   			( (bat[0]._Ub<(USIGN*10)) || (bat[1]._Ub<(USIGN*10)) ) )			bdr_avar_stat_temp|=(1<<ii_);
;;;5996   		//Выравнивающий заряд
;;;5997   		if((RELE_SET_MASK[ii_]&0x02)&&
;;;5998   			(spc_stat==spcVZ))				bdr_avar_stat_temp|=(1<<ii_);
;;;5999   	   	//Общая авария ИБЭП
;;;6000   		if((RELE_SET_MASK[ii_]&0x04)&& 		
;;;6001   			(avar_stat&0x7FF)!=0 )		   	bdr_avar_stat_temp|=(1<<ii_);
;;;6002   		//Ток АКБ<-0,5А
;;;6003   		if((RELE_SET_MASK[ii_]&0x08)&&
;;;6004   			(bat[0]._Ib<-50	|| bat[1]._Ib<-50 ) ) bdr_avar_stat_temp|=(1<<ii_);
;;;6005   	   	//отключение НПН
;;;6006   	    if((RELE_SET_MASK[ii_]&0x10)&& 
;;;6007   			NPN_OUT==npnoBDR && npn_stat==npnsOFF) bdr_avar_stat_temp|=(1<<ii_);
;;;6008   		//контроль емкости АКБ1
;;;6009   		if((RELE_SET_MASK[ii_]&0x20)&&
;;;6010   			(spc_stat==spcKE)&&(spc_bat==0))	bdr_avar_stat_temp|=(1<<ii_); 
;;;6011   		//контроль емкости АКБ2
;;;6012   		if((RELE_SET_MASK[ii_]&0x40)&&
;;;6013   			(spc_stat==spcKE)&&(spc_bat==1))	bdr_avar_stat_temp|=(1<<ii_); 
;;;6014   	#else
;;;6015   	//o_9_e		//АБ разряжена
;;;6016   		if((RELE_SET_MASK[ii_]&0x01)&&
;;;6017   			(load_U<(USIGN*10)))			bdr_avar_stat_temp|=(1<<ii_);
;;;6018   		//Ускоренный заряд
;;;6019   		if((RELE_SET_MASK[ii_]&0x02)&&
;;;6020   			(sp_ch_stat==scsWRK))			bdr_avar_stat_temp|=(1<<ii_);
;;;6021   		//Выравнивающий заряд
;;;6022   		if((RELE_SET_MASK[ii_]&0x04)&&
;;;6023   			(spc_stat==spcVZ))			bdr_avar_stat_temp|=(1<<ii_);
;;;6024   		//Общая авария ЗВУ
;;;6025   		if((RELE_SET_MASK[ii_]&0x08)&&
;;;6026   			(avar_stat))					bdr_avar_stat_temp|=(1<<ii_);
;;;6027   		//Uвых завышено
;;;6028   		if((RELE_SET_MASK[ii_]&0x10)&&
;;;6029   			(uout_av==1))					bdr_avar_stat_temp|=(1<<ii_);
00413c  f8dfa1b4          LDR      r10,|L1.17140|
;;;6030   		//Uвых занижено
;;;6031   		if((RELE_SET_MASK[ii_]&0x20)&&
;;;6032   			(uout_av==2))					bdr_avar_stat_temp|=(1<<ii_);
;;;6033   		if((RELE_SET_MASK[ii_]&0x40)&&
;;;6034   			(
;;;6035   			((bps[0]._av&(1<<4))&&(NUMIST>=1))||
004140  f8df91b4          LDR      r9,|L1.17144|
004144  4d6d              LDR      r5,|L1.17148|
004146  f8dfb1b8          LDR      r11,|L1.17152|
00414a  f04f0301          MOV      r3,#1                 ;4940
                  |L1.16718|
00414e  f93b2011          LDRSH    r2,[r11,r1,LSL #1]    ;6016
004152  ea5f7cc2          LSLS     r12,r2,#31            ;6016
004156  d010              BEQ      |L1.16762|
004158  f8dfc1a8          LDR      r12,|L1.17156|
00415c  f9b8e000          LDRSH    lr,[r8,#0]            ;6017  ; load_U
004160  f9bcc000          LDRSH    r12,[r12,#0]          ;6017  ; USIGN
004164  eb0c0c8c          ADD      r12,r12,r12,LSL #2    ;6017
004168  ebbe0f4c          CMP      lr,r12,LSL #1         ;6017
00416c  da05              BGE      |L1.16762|
00416e  fa03fc01          LSL      r12,r3,r1             ;6017
004172  ea4c0c00          ORR      r12,r12,r0            ;6017
004176  f00c00ff          AND      r0,r12,#0xff          ;6017
                  |L1.16762|
00417a  ea5f7c82          LSLS     r12,r2,#30            ;6019
00417e  d50a              BPL      |L1.16790|
004180  f897c000          LDRB     r12,[r7,#0]           ;6020  ; sp_ch_stat
004184  f1bc0f02          CMP      r12,#2                ;6020
004188  d105              BNE      |L1.16790|
00418a  fa03fc01          LSL      r12,r3,r1             ;6020
00418e  ea4c0c00          ORR      r12,r12,r0            ;6020
004192  f00c00ff          AND      r0,r12,#0xff          ;6020
                  |L1.16790|
004196  ea5f7c42          LSLS     r12,r2,#29            ;6022
00419a  d50a              BPL      |L1.16818|
00419c  f896c023          LDRB     r12,[r6,#0x23]        ;6023  ; spc_stat
0041a0  f1bc0f02          CMP      r12,#2                ;6023
0041a4  d105              BNE      |L1.16818|
0041a6  fa03fc01          LSL      r12,r3,r1             ;6023
0041aa  ea4c0c00          ORR      r12,r12,r0            ;6023
0041ae  f00c00ff          AND      r0,r12,#0xff          ;6023
                  |L1.16818|
0041b2  ea5f7c02          LSLS     r12,r2,#28            ;6025
0041b6  d50c              BPL      |L1.16850|
0041b8  f8dfc14c          LDR      r12,|L1.17160|
0041bc  f8dcc000          LDR      r12,[r12,#0]          ;6026  ; avar_stat
0041c0  f1bc0f00          CMP      r12,#0                ;6026
0041c4  d005              BEQ      |L1.16850|
0041c6  fa03fc01          LSL      r12,r3,r1             ;6026
0041ca  ea4c0c00          ORR      r12,r12,r0            ;6026
0041ce  f00c00ff          AND      r0,r12,#0xff          ;6026
                  |L1.16850|
0041d2  ea5f6cc2          LSLS     r12,r2,#27            ;6028
0041d6  d50a              BPL      |L1.16878|
0041d8  f89ac000          LDRB     r12,[r10,#0]          ;6029  ; uout_av
0041dc  f1bc0f01          CMP      r12,#1                ;6029
0041e0  d105              BNE      |L1.16878|
0041e2  fa03fc01          LSL      r12,r3,r1             ;6029
0041e6  ea4c0c00          ORR      r12,r12,r0            ;6029
0041ea  f00c00ff          AND      r0,r12,#0xff          ;6029
                  |L1.16878|
0041ee  ea5f6c82          LSLS     r12,r2,#26            ;6031
0041f2  d50a              BPL      |L1.16906|
0041f4  f89ac000          LDRB     r12,[r10,#0]          ;6032  ; uout_av
0041f8  f1bc0f02          CMP      r12,#2                ;6032
0041fc  d105              BNE      |L1.16906|
0041fe  fa03fc01          LSL      r12,r3,r1             ;6032
004202  ea4c0c00          ORR      r12,r12,r0            ;6032
004206  f00c00ff          AND      r0,r12,#0xff          ;6032
                  |L1.16906|
00420a  ea5f6c42          LSLS     r12,r2,#25            ;6033
00420e  d525              BPL      |L1.16988|
004210  f899c001          LDRB     r12,[r9,#1]  ; bps
004214  ea5f6ccc          LSLS     r12,r12,#27
004218  d504              BPL      |L1.16932|
00421a  f9b5c000          LDRSH    r12,[r5,#0]  ; NUMIST
00421e  f1bc0f01          CMP      r12,#1
004222  da15              BGE      |L1.16976|
                  |L1.16932|
;;;6036   			((bps[1]._av&(1<<4))&&(NUMIST>=2))||
004224  f899c065          LDRB     r12,[r9,#0x65]  ; bps
004228  ea5f6ccc          LSLS     r12,r12,#27
00422c  d506              BPL      |L1.16956|
00422e  f9b5c000          LDRSH    r12,[r5,#0]  ; NUMIST
004232  e000              B        |L1.16950|
                  |L1.16948|
004234  e047              B        |L1.17094|
                  |L1.16950|
004236  f1bc0f02          CMP      r12,#2
00423a  da09              BGE      |L1.16976|
                  |L1.16956|
;;;6037   			((bps[2]._av&(1<<4))&&(NUMIST>=3))
00423c  f899c0c9          LDRB     r12,[r9,#0xc9]  ; bps
004240  ea5f6ccc          LSLS     r12,r12,#27
004244  d50a              BPL      |L1.16988|
004246  f9b5c000          LDRSH    r12,[r5,#0]  ; NUMIST
00424a  f1bc0f03          CMP      r12,#3
00424e  db05              BLT      |L1.16988|
                  |L1.16976|
;;;6038   			))bdr_avar_stat_temp|=(1<<ii_);
004250  fa03fc01          LSL      r12,r3,r1
004254  ea4c0c00          ORR      r12,r12,r0
004258  f00c00ff          AND      r0,r12,#0xff
                  |L1.16988|
;;;6039   		if((RELE_SET_MASK[ii_]&0x80)&&
00425c  ea5f6c02          LSLS     r12,r2,#24
004260  d523              BPL      |L1.17066|
;;;6040   			(
;;;6041   			((bps[0]._av&(0x0f))&&(NUMIST>=1))||
004262  f899c001          LDRB     r12,[r9,#1]  ; bps
004266  ea5f7c0c          LSLS     r12,r12,#28
00426a  d004              BEQ      |L1.17014|
00426c  f9b5c000          LDRSH    r12,[r5,#0]  ; NUMIST
004270  f1bc0f01          CMP      r12,#1
004274  da13              BGE      |L1.17054|
                  |L1.17014|
;;;6042   			((bps[1]._av&(0x0f))&&(NUMIST>=2))||
004276  f899c065          LDRB     r12,[r9,#0x65]  ; bps
00427a  ea5f7c0c          LSLS     r12,r12,#28
00427e  d004              BEQ      |L1.17034|
004280  f9b5c000          LDRSH    r12,[r5,#0]  ; NUMIST
004284  f1bc0f02          CMP      r12,#2
004288  da09              BGE      |L1.17054|
                  |L1.17034|
;;;6043   			((bps[2]._av&(0x0f))&&(NUMIST>=3))
00428a  f899c0c9          LDRB     r12,[r9,#0xc9]  ; bps
00428e  ea5f7c0c          LSLS     r12,r12,#28
004292  d00a              BEQ      |L1.17066|
004294  f9b5c000          LDRSH    r12,[r5,#0]  ; NUMIST
004298  f1bc0f03          CMP      r12,#3
00429c  db05              BLT      |L1.17066|
                  |L1.17054|
;;;6044   			))bdr_avar_stat_temp|=(1<<ii_);
00429e  fa03fc01          LSL      r12,r3,r1
0042a2  ea4c0c00          ORR      r12,r12,r0
0042a6  f00c00ff          AND      r0,r12,#0xff
                  |L1.17066|
;;;6045   	  #endif											 //o_9
;;;6046   		if(!(RELE_SET_MASK[ii_]&(1<<15))) bdr_avar_stat_temp^=(1<<ii_); 
0042aa  0412              LSLS     r2,r2,#16
0042ac  d404              BMI      |L1.17080|
0042ae  fa03f201          LSL      r2,r3,r1
0042b2  ea820200          EOR      r2,r2,r0
0042b6  b2d0              UXTB     r0,r2
                  |L1.17080|
0042b8  f1010101          ADD      r1,r1,#1              ;5989
0042bc  b2c9              UXTB     r1,r1                 ;5989
0042be  2904              CMP      r1,#4                 ;5989
0042c0  f4ffaf45          BCC      |L1.16718|
;;;6047   		}
;;;6048   	bdr_avar_stat=bdr_avar_stat_temp;
0042c4  7020              STRB     r0,[r4,#0]
                  |L1.17094|
;;;6049   	}
;;;6050   }
0042c6  e8bd9ff0          POP      {r4-r12,pc}
0042ca  0000              DCW      0x0000
                  |L1.17100|
                          DCD      load_U
                  |L1.17104|
                          DCD      sp_ch_stat
                  |L1.17108|
                          DCD      ||area_number.25||
                  |L1.17112|
                          DCD      DOP_RELE_FUNC
                  |L1.17116|
                          DCD      speedChIsOn
                  |L1.17120|
                          DCD      hv_vz_stat
                  |L1.17124|
                          DCD      UVENTOFF
                  |L1.17128|
                          DCD      bdr_transmit_stat
                  |L1.17132|
                          DCD      bdr_avar_stat
                  |L1.17136|
                          DCD      NUMBDR
                  |L1.17140|
                          DCD      uout_av
                  |L1.17144|
                          DCD      bps
                  |L1.17148|
                          DCD      NUMIST
                  |L1.17152|
                          DCD      RELE_SET_MASK
                  |L1.17156|
                          DCD      USIGN
                  |L1.17160|
                          DCD      avar_stat
                          ENDP

                  bps_hndl PROC
;;;6053   //-----------------------------------------------
;;;6054   void bps_hndl(void)
00430c  e92d5ff0          PUSH     {r4-r12,lr}
;;;6055   {
;;;6056   char ptr__,i;
;;;6057   unsigned short tempUS;
;;;6058   
;;;6059   if(sh_cnt0<10)
004310  f8dfb40c          LDR      r11,|L1.18208|
;;;6060   	{
;;;6061   	sh_cnt0++;
;;;6062   	if(sh_cnt0>=10)
;;;6063   		{
;;;6064   		sh_cnt0=0;
004314  2600              MOVS     r6,#0
;;;6065   		b1Hz_sh=1;
004316  f04f0a01          MOV      r10,#1
00431a  f89b0021          LDRB     r0,[r11,#0x21]        ;6059  ; sh_cnt0
00431e  280a              CMP      r0,#0xa               ;6059
004320  d20a              BCS      |L1.17208|
004322  f1000001          ADD      r0,r0,#1              ;6061
004326  b2c0              UXTB     r0,r0                 ;6061
004328  f88b0021          STRB     r0,[r11,#0x21]        ;6061
00432c  280a              CMP      r0,#0xa               ;6062
00432e  d303              BCC      |L1.17208|
004330  f88b6021          STRB     r6,[r11,#0x21]        ;6064
004334  f88ba022          STRB     r10,[r11,#0x22]
                  |L1.17208|
;;;6066   		}
;;;6067   	}
;;;6068   
;;;6069   /*if(sh_cnt1<5)
;;;6070   	{
;;;6071   	sh_cnt1++;
;;;6072   	if(sh_cnt1==5)
;;;6073   		{
;;;6074   		sh_cnt1=0;
;;;6075   		b2Hz_sh=1;
;;;6076   		}
;;;6077   	} */
;;;6078   
;;;6079   
;;;6080   /*
;;;6081   if(mess_find(MESS_SRC_ON_OFF))
;;;6082   	{
;;;6083   	if(mess_data[0]==_MESS_SRC_MASK_BLOK_2SEC)
;;;6084   		{
;;;6085   		char i;
;;;6086   		for(i=0;i<NUMIST;i++)
;;;6087   			{
;;;6088   			if(mess_data[1]&(1<<i))src[i]._ist_blok_cnt=20;
;;;6089   			}
;;;6090   		
;;;6091   		}
;;;6092   	else if(mess_data[0]==_MESS_SRC_MASK_UNBLOK)
;;;6093   		{
;;;6094   		char i;
;;;6095   		for(i=0;i<NUMIST;i++)
;;;6096   			{
;;;6097   			if(mess_data[1]&(1<<i))src[i]._ist_blok_cnt=0;
;;;6098   			}
;;;6099   		
;;;6100   		}
;;;6101   	}
;;;6102   	
;;;6103   else if(mess_find(_MESS_SRC_MASK_ON))
;;;6104   	{				
;;;6105   	if(mess_data[0]==_MESS_SRC_MASK_ON)
;;;6106   		{
;;;6107   		char i;
;;;6108   		for(i=0;i<NUMIST;i++)
;;;6109   			{
;;;6110   			if(mess_data[1]&(1<<i))
;;;6111   				{
;;;6112   				src[i]._ist_blok_cnt=0;
;;;6113   				src[i]._flags_tu=2;
;;;6114   				}
;;;6115   			}
;;;6116   		
;;;6117   		}				
;;;6118   	}*/
;;;6119   
;;;6120   
;;;6121   
;;;6122   /*else*/ 
;;;6123   bps_on_mask=0;
004338  4ff9              LDR      r7,|L1.18208|
00433a  3780              ADDS     r7,r7,#0x80
00433c  62fe              STR      r6,[r7,#0x2c]  ; bps_on_mask
;;;6124   bps_off_mask=0;
00433e  633e              STR      r6,[r7,#0x30]  ; bps_off_mask
;;;6125   
;;;6126   if(mess_find_unvol(MESS2BPS_HNDL))
004340  20cd              MOVS     r0,#0xcd
004342  f7fffffe          BL       mess_find_unvol
;;;6127   	{
;;;6128   	if(mess_data[0]==PARAM_BPS_ALL_OFF_AFTER_2SEC)
;;;6129   		{
;;;6130   		bps_off_mask=0xffff;
;;;6131   		}
;;;6132   
;;;6133   	if(mess_data[0]==PARAM_BPS_MASK_OFF_AFTER_2SEC)
;;;6134   		{
;;;6135   		bps_off_mask=mess_data[1];
;;;6136   		}
;;;6137   
;;;6138   	if(mess_data[0]==PARAM_BPS_MASK_ON)
;;;6139   		{
;;;6140   		bps_on_mask=mess_data[1];
;;;6141   		}
;;;6142   
;;;6143   	if(mess_data[0]==PARAM_BPS_ALL_ON)
;;;6144   		{
;;;6145   		bps_on_mask=0xffff;
;;;6146   		}
;;;6147   
;;;6148   	if(mess_data[0]==PARAM_BPS_MASK_ON_OFF_AFTER_2SEC)
;;;6149   		{
;;;6150   		bps_on_mask=(unsigned)mess_data[1];
;;;6151   		bps_off_mask=~((unsigned)mess_data[1]);
;;;6152   		}
;;;6153   
;;;6154    	if(mess_data[0]==PARAM_BPS_MASK_ON_OFF_AFTER_2SEC_FOR_NUMBER)
;;;6155   		{
;;;6156   		bps_on_mask=(unsigned)(1<<mess_data[1]);
;;;6157   		bps_off_mask=~((unsigned)(1<<mess_data[1]));
;;;6158   		}
;;;6159   
;;;6160   	for(i=0;i<=NUMIST;i++)
;;;6161   		{
;;;6162   		if(bps_off_mask&(1<<i)) bps[i]._blok_cnt++;
004346  f8df83dc          LDR      r8,|L1.18212|
00434a  b3b8              CBZ      r0,|L1.17340|
00434c  4af6              LDR      r2,|L1.18216|
00434e  f64f71ff          MOV      r1,#0xffff            ;6130
004352  6810              LDR      r0,[r2,#0]            ;6128  ; mess_data
004354  28ce              CMP      r0,#0xce              ;6128
004356  d100              BNE      |L1.17242|
004358  6339              STR      r1,[r7,#0x30]         ;6130  ; bps_off_mask
                  |L1.17242|
00435a  28cf              CMP      r0,#0xcf              ;6133
00435c  d101              BNE      |L1.17250|
00435e  6853              LDR      r3,[r2,#4]            ;6135  ; mess_data
004360  633b              STR      r3,[r7,#0x30]         ;6135  ; bps_off_mask
                  |L1.17250|
004362  28d1              CMP      r0,#0xd1              ;6138
004364  d101              BNE      |L1.17258|
004366  6853              LDR      r3,[r2,#4]            ;6140  ; mess_data
004368  62fb              STR      r3,[r7,#0x2c]         ;6140  ; bps_on_mask
                  |L1.17258|
00436a  28d2              CMP      r0,#0xd2              ;6143
00436c  d100              BNE      |L1.17264|
00436e  62f9              STR      r1,[r7,#0x2c]         ;6145  ; bps_on_mask
                  |L1.17264|
004370  28d0              CMP      r0,#0xd0              ;6148
004372  d104              BNE      |L1.17278|
004374  6851              LDR      r1,[r2,#4]            ;6150  ; mess_data
004376  62f9              STR      r1,[r7,#0x2c]         ;6150  ; bps_on_mask
004378  ea6f0101          MVN      r1,r1                 ;6151
00437c  6339              STR      r1,[r7,#0x30]         ;6151  ; bps_off_mask
                  |L1.17278|
00437e  f5b07f9a          CMP      r0,#0x134             ;6154
004382  d106              BNE      |L1.17298|
004384  6851              LDR      r1,[r2,#4]            ;6156  ; mess_data
004386  fa0af001          LSL      r0,r10,r1             ;6156
00438a  62f8              STR      r0,[r7,#0x2c]         ;6156  ; bps_on_mask
00438c  ea6f0000          MVN      r0,r0                 ;6157
004390  6338              STR      r0,[r7,#0x30]         ;6157  ; bps_off_mask
                  |L1.17298|
004392  f04f0400          MOV      r4,#0                 ;6160
004396  e035              B        |L1.17412|
                  |L1.17304|
004398  6b38              LDR      r0,[r7,#0x30]  ; bps_off_mask
00439a  fa0af904          LSL      r9,r10,r4
00439e  ea190f00          TST      r9,r0
0043a2  d00c              BEQ      |L1.17342|
0043a4  eb0400c4          ADD      r0,r4,r4,LSL #3
0043a8  eb001004          ADD      r0,r0,r4,LSL #4
0043ac  eb080080          ADD      r0,r8,r0,LSL #2
0043b0  f8301f40          LDRH     r1,[r0,#0x40]!
0043b4  f1010101          ADD      r1,r1,#1
0043b8  8001              STRH     r1,[r0,#0]
0043ba  e008              B        |L1.17358|
                  |L1.17340|
0043bc  e028              B        |L1.17424|
                  |L1.17342|
;;;6163   		else bps[i]._blok_cnt=0;
0043be  eb0400c4          ADD      r0,r4,r4,LSL #3
0043c2  eb001004          ADD      r0,r0,r4,LSL #4
0043c6  eb080080          ADD      r0,r8,r0,LSL #2
0043ca  f8a06040          STRH     r6,[r0,#0x40]
                  |L1.17358|
;;;6164   		gran(&bps[i]._blok_cnt,0,50);
0043ce  eb0400c4          ADD      r0,r4,r4,LSL #3
0043d2  eb001004          ADD      r0,r0,r4,LSL #4
0043d6  eb080580          ADD      r5,r8,r0,LSL #2
0043da  f1050040          ADD      r0,r5,#0x40
0043de  2232              MOVS     r2,#0x32
0043e0  2100              MOVS     r1,#0
0043e2  f7fffffe          BL       gran
;;;6165   		if(bps[i]._blok_cnt>20) bps[i]._flags_tu=1;
0043e6  f9b50040          LDRSH    r0,[r5,#0x40]
0043ea  2814              CMP      r0,#0x14
0043ec  dd01              BLE      |L1.17394|
0043ee  f885a02c          STRB     r10,[r5,#0x2c]
                  |L1.17394|
;;;6166   		if(bps_on_mask&(1<<i)) bps[i]._flags_tu=0;
0043f2  6af8              LDR      r0,[r7,#0x2c]  ; bps_on_mask
0043f4  ea190f00          TST      r9,r0
0043f8  d001              BEQ      |L1.17406|
0043fa  f885602c          STRB     r6,[r5,#0x2c]
                  |L1.17406|
0043fe  f1040401          ADD      r4,r4,#1              ;6160
004402  b2e4              UXTB     r4,r4                 ;6160
                  |L1.17412|
004404  48c9              LDR      r0,|L1.18220|
004406  f9b00000          LDRSH    r0,[r0,#0]            ;6160  ; NUMIST
00440a  4284              CMP      r4,r0                 ;6160
00440c  ddc4              BLE      |L1.17304|
00440e  e08e              B        |L1.17710|
                  |L1.17424|
;;;6167   	     }
;;;6168   
;;;6169   	
;;;6170   /*
;;;6171   
;;;6172   	if(bps_all_off_cnt>20)
;;;6173   		{
;;;6174   		for(i=0;i<=NUMIST;i++)
;;;6175   			{
;;;6176   	     	bps[i]._flags_tu=1;
;;;6177   	     	}
;;;6178   		}
;;;6179   	else if(bps_mask_off_cnt>20)
;;;6180   		{
;;;6181   		for(i=0;i<=NUMIST;i++)
;;;6182   			{
;;;6183   			if(mess_data[1]&(1<<i)) bps[i]._flags_tu=1;
;;;6184   	     	}
;;;6185   		}	
;;;6186   		
;;;6187   	else if(bps_mask_on_off_cnt>20)
;;;6188   		{
;;;6189   		for(i=0;i<=NUMIST;i++)
;;;6190   			{
;;;6191   			if(mess_data[1]&(1<<i)) bps[i]._flags_tu=1;
;;;6192   			else bps[i]._flags_tu=0;
;;;6193   	     	}
;;;6194   		}
;;;6195   		
;;;6196   	if(mess_data[0]==PARAM_BPS_MASK_ON)
;;;6197   		{
;;;6198   		for(i=0;i<=NUMIST;i++)
;;;6199   			{
;;;6200   			if(mess_data[1]&(1<<i)) bps[i]._flags_tu=0;
;;;6201   	     	}
;;;6202   		}
;;;6203   */										
;;;6204   	}
;;;6205   
;;;6206   
;;;6207   else if(b1Hz_sh)
004410  f89b0022          LDRB     r0,[r11,#0x22]  ; b1Hz_sh
004414  b3f0              CBZ      r0,|L1.17556|
;;;6208   	{
;;;6209   	ptr__=0;
004416  f04f0400          MOV      r4,#0
;;;6210        for(i=0;i<=NUMIST;i++)
00441a  4621              MOV      r1,r4
00441c  48c3              LDR      r0,|L1.18220|
00441e  f9b00000          LDRSH    r0,[r0,#0]            ;6160
004422  e00a              B        |L1.17466|
                  |L1.17444|
;;;6211   		{
;;;6212   	     bps[i]._flags_tu=1;
004424  eb0102c1          ADD      r2,r1,r1,LSL #3
004428  eb021201          ADD      r2,r2,r1,LSL #4
00442c  eb080282          ADD      r2,r8,r2,LSL #2
004430  f882a02c          STRB     r10,[r2,#0x2c]
004434  f1010101          ADD      r1,r1,#1              ;6210
004438  b2c9              UXTB     r1,r1                 ;6210
                  |L1.17466|
00443a  4281              CMP      r1,r0                 ;6210
00443c  ddf2              BLE      |L1.17444|
;;;6213   	     }	
;;;6214     	     
;;;6215     	for(i=0;(i<NUMIST)&&(ptr__<num_necc);i++)
00443e  f04f0100          MOV      r1,#0
004442  e023              B        |L1.17548|
                  |L1.17476|
;;;6216     		{
;;;6217   		char ii,iii;
;;;6218   
;;;6219   		ii=(char)NUMIST;
004444  b2c2              UXTB     r2,r0
;;;6220   		//if(ii<0)ii=0;
;;;6221   		if(ii>32)ii=32;
004446  2a20              CMP      r2,#0x20
004448  d901              BLS      |L1.17486|
00444a  f04f0220          MOV      r2,#0x20
                  |L1.17486|
;;;6222   		iii=numOfForvardBps;
00444e  f89b3028          LDRB     r3,[r11,#0x28]  ; numOfForvardBps
;;;6223   		//if(iii<0)iii=0;
;;;6224   		if(iii>=NUMIST)iii=0;
004452  4283              CMP      r3,r0
004454  db01              BLT      |L1.17498|
004456  f04f0300          MOV      r3,#0
                  |L1.17498|
;;;6225   		iii+=i;
00445a  440b              ADD      r3,r3,r1
00445c  b2db              UXTB     r3,r3
;;;6226   		iii=iii%ii;
00445e  fbb3f5f2          UDIV     r5,r3,r2
004462  fb023215          MLS      r2,r2,r5,r3
;;;6227   		
;;;6228     	     if((bps[iii]._state==bsRDY)||(bps[iii]._state==bsWRK))
004466  eb0203c2          ADD      r3,r2,r2,LSL #3
00446a  eb031202          ADD      r2,r3,r2,LSL #4
00446e  eb080282          ADD      r2,r8,r2,LSL #2
004472  7893              LDRB     r3,[r2,#2]
004474  2b02              CMP      r3,#2
004476  d001              BEQ      |L1.17532|
004478  2b01              CMP      r3,#1
00447a  d104              BNE      |L1.17542|
                  |L1.17532|
;;;6229     	         	{
;;;6230     	         	bps[iii]._flags_tu=0;
00447c  f882602c          STRB     r6,[r2,#0x2c]
;;;6231     	         	ptr__++;
004480  f1040401          ADD      r4,r4,#1
004484  b2e4              UXTB     r4,r4
                  |L1.17542|
004486  f1010101          ADD      r1,r1,#1              ;6215
00448a  b2c9              UXTB     r1,r1                 ;6215
                  |L1.17548|
00448c  4281              CMP      r1,r0                 ;6215
00448e  da06              BGE      |L1.17566|
004490  4aa7              LDR      r2,|L1.18224|
004492  e000              B        |L1.17558|
                  |L1.17556|
004494  e04b              B        |L1.17710|
                  |L1.17558|
004496  f9b22000          LDRSH    r2,[r2,#0]            ;6215  ; num_necc
00449a  4294              CMP      r4,r2                 ;6215
00449c  dbd2              BLT      |L1.17476|
                  |L1.17566|
;;;6232     	         	}
;;;6233   			
;;;6234     	     }
;;;6235   	bps[numOfForvardBps_old]._flags_tu=0;
00449e  f89b1029          LDRB     r1,[r11,#0x29]  ; numOfForvardBps_old
0044a2  eb0102c1          ADD      r2,r1,r1,LSL #3
0044a6  eb021101          ADD      r1,r2,r1,LSL #4
0044aa  eb080181          ADD      r1,r8,r1,LSL #2
0044ae  f881602c          STRB     r6,[r1,#0x2c]
;;;6236   
;;;6237   	if(main_1Hz_cnt<60)
0044b2  49a0              LDR      r1,|L1.18228|
0044b4  f9b11000          LDRSH    r1,[r1,#0]  ; main_1Hz_cnt
0044b8  293c              CMP      r1,#0x3c
0044ba  da0f              BGE      |L1.17628|
;;;6238   		{
;;;6239        	for(i=0;i<=NUMIST;i++)
0044bc  f04f0100          MOV      r1,#0
0044c0  e00a              B        |L1.17624|
                  |L1.17602|
;;;6240   			{
;;;6241   	     	bps[i]._flags_tu=0;
0044c2  eb0102c1          ADD      r2,r1,r1,LSL #3
0044c6  eb021201          ADD      r2,r2,r1,LSL #4
0044ca  eb080282          ADD      r2,r8,r2,LSL #2
0044ce  f882602c          STRB     r6,[r2,#0x2c]
0044d2  f1010101          ADD      r1,r1,#1              ;6239
0044d6  b2c9              UXTB     r1,r1                 ;6239
                  |L1.17624|
0044d8  4281              CMP      r1,r0                 ;6239
0044da  ddf2              BLE      |L1.17602|
                  |L1.17628|
;;;6242   	     	}	
;;;6243   		}
;;;6244   	if(ipsBlckStat)
0044dc  4996              LDR      r1,|L1.18232|
0044de  8809              LDRH     r1,[r1,#0]  ; ipsBlckStat
0044e0  b179              CBZ      r1,|L1.17666|
;;;6245   		{
;;;6246        	for(i=0;i<=NUMIST;i++)
0044e2  f04f0100          MOV      r1,#0
0044e6  e00a              B        |L1.17662|
                  |L1.17640|
;;;6247   			{
;;;6248   	     	bps[i]._flags_tu=1;
0044e8  eb0102c1          ADD      r2,r1,r1,LSL #3
0044ec  eb021201          ADD      r2,r2,r1,LSL #4
0044f0  eb080282          ADD      r2,r8,r2,LSL #2
0044f4  f882a02c          STRB     r10,[r2,#0x2c]
0044f8  f1010101          ADD      r1,r1,#1              ;6246
0044fc  b2c9              UXTB     r1,r1                 ;6246
                  |L1.17662|
0044fe  4281              CMP      r1,r0                 ;6246
004500  ddf2              BLE      |L1.17640|
                  |L1.17666|
;;;6249   	     	}
;;;6250   		}
;;;6251   
;;;6252        for(i=0;i<=NUMIST;i++)
004502  f04f0100          MOV      r1,#0
;;;6253   		{
;;;6254   	    if(bps[i]._flags_tu==1) 	bps[i]._x_=-50;
004506  f06f0331          MVN      r3,#0x31
00450a  e00e              B        |L1.17706|
                  |L1.17676|
00450c  eb0102c1          ADD      r2,r1,r1,LSL #3
004510  eb021201          ADD      r2,r2,r1,LSL #4
004514  eb080282          ADD      r2,r8,r2,LSL #2
004518  f892402c          LDRB     r4,[r2,#0x2c]
00451c  2c01              CMP      r4,#1
00451e  d101              BNE      |L1.17700|
004520  f8a23054          STRH     r3,[r2,#0x54]
                  |L1.17700|
004524  f1010101          ADD      r1,r1,#1              ;6252
004528  b2c9              UXTB     r1,r1                 ;6252
                  |L1.17706|
00452a  4281              CMP      r1,r0                 ;6252
00452c  ddee              BLE      |L1.17676|
                  |L1.17710|
;;;6255   	   	}	
;;;6256   		 
;;;6257     	}
;;;6258   
;;;6259   
;;;6260   for(i=0;i<NUMIST;i++)
00452e  f04f0000          MOV      r0,#0
004532  497e              LDR      r1,|L1.18220|
;;;6261        {
;;;6262        if(bps[i]._ist_blok_host_cnt!=0)
;;;6263             {
;;;6264             bps[i]._flags_tu=99;
004534  f04f0463          MOV      r4,#0x63
004538  f9b11000          LDRSH    r1,[r1,#0]            ;6160
00453c  e00f              B        |L1.17758|
                  |L1.17726|
00453e  eb0002c0          ADD      r2,r0,r0,LSL #3       ;6262
004542  eb021200          ADD      r2,r2,r0,LSL #4       ;6262
004546  eb080282          ADD      r2,r8,r2,LSL #2       ;6262
00454a  6bd3              LDR      r3,[r2,#0x3c]         ;6262
00454c  b123              CBZ      r3,|L1.17752|
00454e  f882402c          STRB     r4,[r2,#0x2c]
;;;6265   	     bps[i]._ist_blok_host_cnt--;
004552  f1a30301          SUB      r3,r3,#1
004556  63d3              STR      r3,[r2,#0x3c]
                  |L1.17752|
004558  f1000001          ADD      r0,r0,#1              ;6260
00455c  b2c0              UXTB     r0,r0                 ;6260
                  |L1.17758|
00455e  4288              CMP      r0,r1                 ;6260
004560  dbed              BLT      |L1.17726|
;;;6266             }
;;;6267        }
;;;6268   
;;;6269   
;;;6270   
;;;6271   
;;;6272   b1Hz_sh=0;
004562  f88b6022          STRB     r6,[r11,#0x22]
;;;6273   
;;;6274   
;;;6275   num_of_wrks_bps=0;
004566  f88b601e          STRB     r6,[r11,#0x1e]
;;;6276   tempUS=0;
00456a  f04f0200          MOV      r2,#0
;;;6277   for(i=0;i<NUMIST;i++)
00456e  4610              MOV      r0,r2
004570  e015              B        |L1.17822|
                  |L1.17778|
;;;6278   	{
;;;6279   	if(bps[i]._state==bsWRK)
004572  eb0003c0          ADD      r3,r0,r0,LSL #3
004576  eb031300          ADD      r3,r3,r0,LSL #4
00457a  eb080383          ADD      r3,r8,r3,LSL #2
00457e  789c              LDRB     r4,[r3,#2]
004580  2c01              CMP      r4,#1
004582  d109              BNE      |L1.17816|
;;;6280   		{
;;;6281   		num_of_wrks_bps++;
004584  f89b401e          LDRB     r4,[r11,#0x1e]  ; num_of_wrks_bps
004588  f1040401          ADD      r4,r4,#1
00458c  f88b401e          STRB     r4,[r11,#0x1e]
;;;6282   		if(bps[i]._Uii>tempUS)tempUS=bps[i]._Uii;
004590  69db              LDR      r3,[r3,#0x1c]
004592  4293              CMP      r3,r2
004594  dd00              BLE      |L1.17816|
004596  b29a              UXTH     r2,r3
                  |L1.17816|
004598  f1000001          ADD      r0,r0,#1              ;6277
00459c  b2c0              UXTB     r0,r0                 ;6277
                  |L1.17822|
00459e  4288              CMP      r0,r1                 ;6277
0045a0  dbe7              BLT      |L1.17778|
;;;6283   		}
;;;6284   	}
;;;6285   Ubpsmax=tempUS;
0045a2  f8ab204e          STRH     r2,[r11,#0x4e]
;;;6286   
;;;6287   bPARALLEL_ENOUG=0;
0045a6  f88b602c          STRB     r6,[r11,#0x2c]
;;;6288   bPARALLEL_NOT_ENOUG=1;
0045aa  f88ba02b          STRB     r10,[r11,#0x2b]
;;;6289   
;;;6290   for(i=0;i<NUMIST;i++)
0045ae  f04f0000          MOV      r0,#0
;;;6291   	{
;;;6292   	if(bps[i]._Ti>=TSIGN)
0045b2  4a62              LDR      r2,|L1.18236|
0045b4  f9b23000          LDRSH    r3,[r2,#0]
;;;6293   		{
;;;6294   		bPARALLEL_ENOUG=1;
;;;6295   		}
;;;6296   	if(bps[i]._Ti>=(TSIGN-5))
0045b8  f1a30405          SUB      r4,r3,#5
0045bc  e011              B        |L1.17890|
                  |L1.17854|
0045be  eb0002c0          ADD      r2,r0,r0,LSL #3       ;6292
0045c2  eb021200          ADD      r2,r2,r0,LSL #4       ;6292
0045c6  eb080282          ADD      r2,r8,r2,LSL #2       ;6292
0045ca  6a92              LDR      r2,[r2,#0x28]         ;6292
0045cc  429a              CMP      r2,r3                 ;6292
0045ce  db01              BLT      |L1.17876|
0045d0  f88ba02c          STRB     r10,[r11,#0x2c]       ;6294
                  |L1.17876|
0045d4  42a2              CMP      r2,r4
0045d6  db01              BLT      |L1.17884|
;;;6297   		{
;;;6298   		bPARALLEL_NOT_ENOUG=0;
0045d8  f88b602b          STRB     r6,[r11,#0x2b]
                  |L1.17884|
0045dc  f1000001          ADD      r0,r0,#1              ;6290
0045e0  b2c0              UXTB     r0,r0                 ;6290
                  |L1.17890|
0045e2  4288              CMP      r0,r1                 ;6290
0045e4  dbeb              BLT      |L1.17854|
;;;6299   		}
;;;6300   	}
;;;6301   
;;;6302   if(bPARALLEL_ENOUG==1)
0045e6  f89b002c          LDRB     r0,[r11,#0x2c]  ; bPARALLEL_ENOUG
0045ea  2801              CMP      r0,#1
0045ec  d00a              BEQ      |L1.17924|
;;;6303   	{
;;;6304   	bPARALLEL=1;
;;;6305   	}
;;;6306   else if(bPARALLEL && bPARALLEL_NOT_ENOUG)
0045ee  f89b002d          LDRB     r0,[r11,#0x2d]  ; bPARALLEL
0045f2  2800              CMP      r0,#0
0045f4  d005              BEQ      |L1.17922|
0045f6  f89b002b          LDRB     r0,[r11,#0x2b]  ; bPARALLEL_NOT_ENOUG
0045fa  2800              CMP      r0,#0
0045fc  d001              BEQ      |L1.17922|
;;;6307   	{
;;;6308   	bPARALLEL=0;
0045fe  f88b602d          STRB     r6,[r11,#0x2d]
                  |L1.17922|
;;;6309   	}
;;;6310   }
004602  e660              B        |L1.17094|
                  |L1.17924|
004604  f88ba02d          STRB     r10,[r11,#0x2d]       ;6304
004608  e65d              B        |L1.17094|
;;;6311   
                          ENDP

                  powerAntiAliasingHndl PROC
;;;6318   //-----------------------------------------------
;;;6319   void powerAntiAliasingHndl(void)
00460a  b570              PUSH     {r4-r6,lr}
;;;6320   {
;;;6321   if((power_summary_tempo/10UL)==(power_summary_tempo_old/10UL))
00460c  230a              MOVS     r3,#0xa
00460e  4c4d              LDR      r4,|L1.18244|
004610  484b              LDR      r0,|L1.18240|
;;;6322   	{
;;;6323   	if(powerSummaryCnt<15)powerSummaryCnt++;
;;;6324   	if(powerSummaryCnt>=10)
;;;6325   		{
;;;6326   		power_summary=power_summary_tempo;
;;;6327   		}
;;;6328   	}
;;;6329   else powerSummaryCnt=0;
004612  2500              MOVS     r5,#0
004614  6822              LDR      r2,[r4,#0]            ;6321  ; power_summary_tempo_old
004616  6800              LDR      r0,[r0,#0]            ;6321  ; power_summary_tempo
004618  fbb2f6f3          UDIV     r6,r2,r3              ;6321
00461c  fbb0f1f3          UDIV     r1,r0,r3              ;6321
004620  4a49              LDR      r2,|L1.18248|
004622  42b1              CMP      r1,r6                 ;6321
004624  d10b              BNE      |L1.17982|
004626  7811              LDRB     r1,[r2,#0]            ;6323  ; powerSummaryCnt
004628  290f              CMP      r1,#0xf               ;6323
00462a  d202              BCS      |L1.17970|
00462c  f1010101          ADD      r1,r1,#1              ;6323
004630  7011              STRB     r1,[r2,#0]            ;6323
                  |L1.17970|
004632  7811              LDRB     r1,[r2,#0]            ;6324  ; powerSummaryCnt
004634  290a              CMP      r1,#0xa               ;6324
004636  d303              BCC      |L1.17984|
004638  4944              LDR      r1,|L1.18252|
00463a  6008              STR      r0,[r1,#0]            ;6326  ; power_summary
00463c  e000              B        |L1.17984|
                  |L1.17982|
00463e  7015              STRB     r5,[r2,#0]
                  |L1.17984|
;;;6330   power_summary_tempo_old=power_summary_tempo;
004640  6020              STR      r0,[r4,#0]  ; power_summary_tempo_old
;;;6331   
;;;6332   if((power_current_tempo/10UL)==(power_current_tempo_old/10UL))
004642  4843              LDR      r0,|L1.18256|
004644  4c43              LDR      r4,|L1.18260|
004646  f9b00000          LDRSH    r0,[r0,#0]  ; power_current_tempo
00464a  f9b42000          LDRSH    r2,[r4,#0]  ; power_current_tempo_old
00464e  fbb0f1f3          UDIV     r1,r0,r3
004652  fbb2f3f3          UDIV     r3,r2,r3
;;;6333   	{
;;;6334   	if(powerCurrentCnt<15)powerCurrentCnt++;
004656  4a40              LDR      r2,|L1.18264|
004658  4299              CMP      r1,r3                 ;6332
00465a  d10b              BNE      |L1.18036|
00465c  7811              LDRB     r1,[r2,#0]  ; powerCurrentCnt
00465e  290f              CMP      r1,#0xf
004660  d202              BCS      |L1.18024|
004662  f1010101          ADD      r1,r1,#1
004666  7011              STRB     r1,[r2,#0]
                  |L1.18024|
;;;6335   	if(powerCurrentCnt>=10)
004668  7811              LDRB     r1,[r2,#0]  ; powerCurrentCnt
00466a  290a              CMP      r1,#0xa
00466c  d303              BCC      |L1.18038|
;;;6336   		{
;;;6337   		power_current=power_current_tempo;
00466e  493b              LDR      r1,|L1.18268|
004670  8008              STRH     r0,[r1,#0]
004672  e000              B        |L1.18038|
                  |L1.18036|
;;;6338   		}
;;;6339   	}
;;;6340   else powerCurrentCnt=0;
004674  7015              STRB     r5,[r2,#0]
                  |L1.18038|
;;;6341   power_current_tempo_old=power_current_tempo;
004676  8020              STRH     r0,[r4,#0]
;;;6342   }
004678  bd70              POP      {r4-r6,pc}
;;;6343   
                          ENDP

                  energometr_hndl PROC
;;;6453   //-----------------------------------------------
;;;6454   void energometr_hndl(void)
00467a  4770              BX       lr
;;;6455   {
;;;6456   //2F 3F 21 0D 0A 
;;;6457   //05 33 0A 2F 45 4B 54 35 43 45 31 30 32 4D 76 30 31 0D 0A 
;;;6458   //2F 3F 21 0D 0A 
;;;6459   //05 33 0A 2F 45 4B 54 35 43 45 31 30 32 4D 76 30 31 0D 0A 
;;;6460   //06 30 35 31 0D 0A 
;;;6461   //06 33 0A 01 50 30 02 28 31 31 38 36 35 32 39 32 32 29 03 2A 
;;;6462   
;;;6463   #ifdef CE102M_ENABLED
;;;6464   /*if
;;;6465   uart_out1 (5,0xaf,0x3f,0x21,0x8d,0x0a,0);*/
;;;6466   
;;;6467   if(read_power_cnt_main_cnt)
;;;6468   	{
;;;6469   	read_power_cnt_main_cnt--;
;;;6470   	if(read_power_cnt_main_cnt==0)
;;;6471   		{
;;;6472   		rx_read_power_cnt_phase=0;
;;;6473   		if(bENERGOMETR_UIP==0)bENERGOMETR_UIP=1;
;;;6474   		else if(bENERGOMETR_UIP==1)bENERGOMETR_UIP=2;
;;;6475   		else bENERGOMETR_UIP=0;
;;;6476   		//bENERGOMETR_UIP=2;
;;;6477   		}
;;;6478   	}
;;;6479   
;;;6480   if (rx_read_power_cnt_phase==0)
;;;6481   	{
;;;6482   	char command_with_crc[20];
;;;6483   	
;;;6484      	command_with_crc[0]=0xaf;  // /
;;;6485   	command_with_crc[1]=0x3f;  // ?
;;;6486   	command_with_crc[2]=0x21;  // !
;;;6487   	command_with_crc[3]=0x8d;  // CR
;;;6488   	command_with_crc[4]=0x0a;  // LF
;;;6489   
;;;6490   	uart_out__adr1(command_with_crc,5);
;;;6491   
;;;6492   	rx_wr_index1=0;
;;;6493   	rx_read_power_cnt_phase=1;
;;;6494   
;;;6495   	read_power_cnt_main_cnt=50;
;;;6496   	}
;;;6497   if ((rx_read_power_cnt_phase==2)&&(!ce102m_delayCnt))
;;;6498   	{
;;;6499   	char command_with_crc[20];
;;;6500   	
;;;6501   	command_with_crc[0]=0x06;  //  
;;;6502   	command_with_crc[1]=0x30;  // 0
;;;6503   	command_with_crc[2]=0x35;  // 5
;;;6504   	command_with_crc[3]=0xb1;  // 1
;;;6505   	command_with_crc[4]=0x8d;  // CR
;;;6506   	command_with_crc[5]=0x0a;  // LF
;;;6507   	
;;;6508   	uart_out__adr1(command_with_crc,6);
;;;6509   	
;;;6510   	rx_wr_index1=0;
;;;6511   	rx_read_power_cnt_phase=3;
;;;6512   
;;;6513   	read_power_cnt_main_cnt=50;
;;;6514   	}  
;;;6515   
;;;6516   if ((rx_read_power_cnt_phase==4)&&(!ce102m_delayCnt))
;;;6517   	{
;;;6518   	char command_with_crc[20];
;;;6519   	
;;;6520   	command_with_crc[0]=0x81;  //  
;;;6521   	command_with_crc[1]=0xd2;  // 0
;;;6522   	command_with_crc[2]=0xb1;  // 5
;;;6523   	command_with_crc[3]=0x82;  // 1
;;;6524   	command_with_crc[4]=0x56;  // CR
;;;6525   	command_with_crc[5]=0xcf;  // LF
;;;6526   	command_with_crc[6]=0xcc;  // 1
;;;6527   	command_with_crc[7]=0xd4;  // CR
;;;6528   	command_with_crc[8]=0x41;  // LF
;;;6529   	command_with_crc[9]=0x28;  // 1
;;;6530   	command_with_crc[10]=0xa9;  // CR
;;;6531   	command_with_crc[11]=0x03;  // LF
;;;6532   	command_with_crc[12]=0x5f;  // LF
;;;6533   		
;;;6534   	uart_out__adr1(command_with_crc,13);
;;;6535   	
;;;6536   	rx_wr_index1=0;
;;;6537   	rx_read_power_cnt_phase=5;
;;;6538   
;;;6539   	read_power_cnt_main_cnt=50;
;;;6540   	}  
;;;6541   
;;;6542   if ((rx_read_power_cnt_phase==8)&&(!ce102m_delayCnt))
;;;6543   	{
;;;6544   	char command_with_crc[20];
;;;6545   	
;;;6546   	command_with_crc[0]=0x81;  //  
;;;6547   	command_with_crc[1]=0xd2;  // 0
;;;6548   	command_with_crc[2]=0xb1;  // 5
;;;6549   	command_with_crc[3]=0x82;  // 1
;;;6550   	command_with_crc[4]=0xc3;  // CR
;;;6551   	command_with_crc[5]=0x55;  // LF
;;;6552   	command_with_crc[6]=0xd2;  // 1
;;;6553   	command_with_crc[7]=0xd2;  // CR
;;;6554   	command_with_crc[8]=0xc5;  // LF
;;;6555   	command_with_crc[9]=0x28;  // 1
;;;6556   	command_with_crc[10]=0xa9;  // CR
;;;6557   	command_with_crc[11]=0x03;  // LF
;;;6558   	command_with_crc[12]=0x5a;  // LF
;;;6559   		
;;;6560   	uart_out__adr1(command_with_crc,13);
;;;6561   	
;;;6562   	rx_wr_index1=0;
;;;6563   	rx_read_power_cnt_phase=9;
;;;6564   
;;;6565   	read_power_cnt_main_cnt=50;
;;;6566   	}  
;;;6567   
;;;6568   if ((rx_read_power_cnt_phase==20)&&(!ce102m_delayCnt))
;;;6569   	{
;;;6570   	char command_with_crc[20];
;;;6571   	
;;;6572   	command_with_crc[0]=0x81;  //  		01
;;;6573   	command_with_crc[1]=0xd2;  // R		52
;;;6574   	command_with_crc[2]=0xb1;  // 1		31
;;;6575   	command_with_crc[3]=0x82;  // 		02
;;;6576   	command_with_crc[4]=0x50;  // P		50
;;;6577   	command_with_crc[5]=0xcf;  // O	  	4f
;;;6578   	command_with_crc[6]=0xd7;  // W		57
;;;6579   	command_with_crc[7]=0xc5;  // E		45
;;;6580   	command_with_crc[8]=0x50;  // P		50
;;;6581   	command_with_crc[9]=0x28;  // (		28
;;;6582   	command_with_crc[10]=0xa9;  // )	29
;;;6583   	command_with_crc[11]=0x03;  // 		03
;;;6584   	command_with_crc[12]=0xe4;  // d	64
;;;6585   		
;;;6586   	uart_out__adr1(command_with_crc,13);
;;;6587   	
;;;6588   	rx_wr_index1=0;
;;;6589   	rx_read_power_cnt_phase=21;
;;;6590   
;;;6591   	read_power_cnt_main_cnt=50;
;;;6592   	}  
;;;6593   
;;;6594   
;;;6595   #endif
;;;6596   }
;;;6597   
                          ENDP

                  ips_current_average_hndl PROC
;;;6598   //-----------------------------------------------
;;;6599   void ips_current_average_hndl(void)		//процедура выравнивания токов между комплектами ЗВУ 1Гц
00467c  e92d4ff0          PUSH     {r4-r11,lr}
;;;6600   {
004680  b089              SUB      sp,sp,#0x24
;;;6601   
;;;6602   if(++ica_timer_cnt>=10) 
004682  4e37              LDR      r6,|L1.18272|
;;;6603   	{
;;;6604   	ica_timer_cnt=0;
004684  2400              MOVS     r4,#0
004686  7830              LDRB     r0,[r6,#0]            ;6602  ; ica_timer_cnt
004688  1c40              ADDS     r0,r0,#1              ;6602
00468a  b2c0              UXTB     r0,r0                 ;6602
00468c  7030              STRB     r0,[r6,#0]            ;6602
00468e  280a              CMP      r0,#0xa               ;6602
004690  d300              BCC      |L1.18068|
004692  7034              STRB     r4,[r6,#0]
                  |L1.18068|
;;;6605   	}
;;;6606   
;;;6607   if((ica_timer_cnt==0) && (num_of_wrks_bps)&&((spc_stat==spcOFF)&&(vz1_stat==vz1sOFF)&&(vz2_stat==vz2sOFF)&&(sp_ch_stat==scsOFF)))
004694  7830              LDRB     r0,[r6,#0]  ; ica_timer_cnt
004696  4f33              LDR      r7,|L1.18276|
;;;6608   	{
;;;6609   	
;;;6610   	ica_plazma[0]++;
;;;6611   
;;;6612   	ica_my_current=bps_I;
;;;6613   
;;;6614   	if((ica_my_current>ica_your_current)&&((ica_my_current-ica_your_current)>=5)&&((ICA_EN==1)||((ICA_EN==2)&&(ica_cntrl_hndl_cnt>5))))
004698  f8dfb0cc          LDR      r11,|L1.18280|
00469c  4d20              LDR      r5,|L1.18208|
00469e  bbe8              CBNZ     r0,|L1.18204|
0046a0  7fa8              LDRB     r0,[r5,#0x1e]         ;6607  ; num_of_wrks_bps
0046a2  b3d8              CBZ      r0,|L1.18204|
0046a4  f8950023          LDRB     r0,[r5,#0x23]         ;6607  ; spc_stat
0046a8  7969              LDRB     r1,[r5,#5]            ;6607  ; vz1_stat
0046aa  4308              ORRS     r0,r0,r1              ;6607
0046ac  79e9              LDRB     r1,[r5,#7]            ;6607  ; vz2_stat
0046ae  4308              ORRS     r0,r0,r1              ;6607
0046b0  7839              LDRB     r1,[r7,#0]            ;6607  ; sp_ch_stat
0046b2  4308              ORRS     r0,r0,r1              ;6607
0046b4  d17f              BNE      |L1.18358|
0046b6  f8df90b4          LDR      r9,|L1.18284|
0046ba  f8990000          LDRB     r0,[r9,#0]            ;6610  ; ica_plazma
0046be  f1000001          ADD      r0,r0,#1              ;6610
0046c2  f8890000          STRB     r0,[r9,#0]            ;6610
0046c6  482a              LDR      r0,|L1.18288|
0046c8  f9b01000          LDRSH    r1,[r0,#0]            ;6612  ; bps_I
0046cc  4829              LDR      r0,|L1.18292|
0046ce  8001              STRH     r1,[r0,#0]            ;6612
0046d0  4829              LDR      r0,|L1.18296|
;;;6615   		{
;;;6616   		ica_plazma[1]++;
;;;6617   		ica_u_necc--;
0046d2  f8dfa0a8          LDR      r10,|L1.18300|
0046d6  f9b02000          LDRSH    r2,[r0,#0]            ;6614  ; ica_your_current
0046da  4648              MOV      r0,r9                 ;6610
0046dc  f9bac000          LDRSH    r12,[r10,#0]
0046e0  7843              LDRB     r3,[r0,#1]            ;6616
0046e2  4827              LDR      r0,|L1.18304|
0046e4  4291              CMP      r1,r2                 ;6614
0046e6  f9b08000          LDRSH    r8,[r0,#0]            ;6614
0046ea  4658              MOV      r0,r11                ;6614
0046ec  f9b00000          LDRSH    r0,[r0,#0]            ;6614
0046f0  dd48              BLE      |L1.18308|
0046f2  eba10e02          SUB      lr,r1,r2              ;6614
0046f6  f1be0f05          CMP      lr,#5                 ;6614
0046fa  db43              BLT      |L1.18308|
0046fc  2801              CMP      r0,#1                 ;6614
0046fe  d004              BEQ      |L1.18186|
004700  2802              CMP      r0,#2                 ;6614
004702  d13f              BNE      |L1.18308|
004704  f1b80f05          CMP      r8,#5                 ;6614
004708  dd3c              BLE      |L1.18308|
                  |L1.18186|
00470a  f1030301          ADD      r3,r3,#1              ;6616
00470e  f8893001          STRB     r3,[r9,#1]            ;6616
004712  f1ac0c01          SUB      r12,r12,#1
004716  f8aac000          STRH     r12,[r10,#0]
00471a  e047              B        |L1.18348|
                  |L1.18204|
00471c  e04b              B        |L1.18358|
00471e  0000              DCW      0x0000
                  |L1.18208|
                          DCD      ||area_number.25||
                  |L1.18212|
                          DCD      bps
                  |L1.18216|
                          DCD      mess_data
                  |L1.18220|
                          DCD      NUMIST
                  |L1.18224|
                          DCD      num_necc
                  |L1.18228|
                          DCD      main_1Hz_cnt
                  |L1.18232|
                          DCD      ipsBlckStat
                  |L1.18236|
                          DCD      TSIGN
                  |L1.18240|
                          DCD      power_summary_tempo
                  |L1.18244|
                          DCD      power_summary_tempo_old
                  |L1.18248|
                          DCD      powerSummaryCnt
                  |L1.18252|
                          DCD      power_summary
                  |L1.18256|
                          DCD      power_current_tempo
                  |L1.18260|
                          DCD      power_current_tempo_old
                  |L1.18264|
                          DCD      powerCurrentCnt
                  |L1.18268|
                          DCD      power_current
                  |L1.18272|
                          DCD      ica_timer_cnt
                  |L1.18276|
                          DCD      sp_ch_stat
                  |L1.18280|
                          DCD      ICA_EN
                  |L1.18284|
                          DCD      ica_plazma
                  |L1.18288|
                          DCD      bps_I
                  |L1.18292|
                          DCD      ica_my_current
                  |L1.18296|
                          DCD      ica_your_current
                  |L1.18300|
                          DCD      ica_u_necc
                  |L1.18304|
                          DCD      ica_cntrl_hndl_cnt
                  |L1.18308|
;;;6618   		}
;;;6619   	else if((ica_my_current<ica_your_current)&&((ica_your_current-ica_my_current)>=5)&&((ICA_EN==1)||((ICA_EN==2)&&(ica_cntrl_hndl_cnt>5))))
004784  4291              CMP      r1,r2
004786  da11              BGE      |L1.18348|
004788  1a51              SUBS     r1,r2,r1
00478a  2905              CMP      r1,#5
00478c  db0e              BLT      |L1.18348|
00478e  2801              CMP      r0,#1
004790  d004              BEQ      |L1.18332|
004792  2802              CMP      r0,#2
004794  d10a              BNE      |L1.18348|
004796  f1b80f05          CMP      r8,#5
00479a  dd07              BLE      |L1.18348|
                  |L1.18332|
;;;6620   		{
;;;6621   		ica_plazma[1]--;
00479c  f1a30301          SUB      r3,r3,#1
0047a0  f8893001          STRB     r3,[r9,#1]
;;;6622   		ica_u_necc++;
0047a4  f10c0c01          ADD      r12,r12,#1
0047a8  f8aac000          STRH     r12,[r10,#0]
                  |L1.18348|
;;;6623   		}
;;;6624   	gran(&ica_u_necc,-100,100);
0047ac  2264              MOVS     r2,#0x64
0047ae  4251              RSBS     r1,r2,#0
0047b0  48fc              LDR      r0,|L1.19364|
0047b2  f7fffffe          BL       gran
                  |L1.18358|
;;;6625   	}
;;;6626   
;;;6627   
;;;6628   if((ICA_EN==1)&&((spc_stat==spcOFF)&&(vz1_stat==vz1sOFF)&&(vz2_stat==vz2sOFF)&&(sp_ch_stat==scsOFF)) && (num_of_wrks_bps))
0047b6  f8bb0000          LDRH     r0,[r11,#0]  ; ICA_EN
0047ba  2801              CMP      r0,#1
0047bc  d169              BNE      |L1.18578|
0047be  f8950023          LDRB     r0,[r5,#0x23]  ; spc_stat
0047c2  7969              LDRB     r1,[r5,#5]  ; vz1_stat
0047c4  4308              ORRS     r0,r0,r1
0047c6  79e9              LDRB     r1,[r5,#7]  ; vz2_stat
0047c8  4308              ORRS     r0,r0,r1
0047ca  7839              LDRB     r1,[r7,#0]  ; sp_ch_stat
0047cc  4308              ORRS     r0,r0,r1
0047ce  d160              BNE      |L1.18578|
0047d0  7fa8              LDRB     r0,[r5,#0x1e]  ; num_of_wrks_bps
0047d2  2800              CMP      r0,#0
0047d4  d05d              BEQ      |L1.18578|
;;;6629   	{
;;;6630   	
;;;6631   //	ica_connect_cnt++;
;;;6632   
;;;6633   	if(ica_timer_cnt==8)
0047d6  7830              LDRB     r0,[r6,#0]  ; ica_timer_cnt
;;;6634   		{
;;;6635   		char modbus_buff[20],i;
;;;6636   		short crc_temp;
;;;6637   	
;;;6638   		modbus_buff[0] = ICA_MODBUS_ADDRESS;
0047d8  4bf3              LDR      r3,|L1.19368|
;;;6639   		modbus_buff[1] = 4;
;;;6640   		modbus_buff[2] = 0;
;;;6641   		modbus_buff[3] = 2;
;;;6642   		modbus_buff[4] = 0;	
;;;6643   		modbus_buff[5] = 1;
;;;6644   	
;;;6645   		crc_temp= CRC16_2(modbus_buff,6);
;;;6646   	
;;;6647   		modbus_buff[6]= (char)crc_temp;
;;;6648   		modbus_buff[7]= (char)(crc_temp>>8);
;;;6649   	
;;;6650   		if(ICA_CH==0)
0047da  4ff4              LDR      r7,|L1.19372|
0047dc  2808              CMP      r0,#8                 ;6633
0047de  d05b              BEQ      |L1.18584|
;;;6651   			{
;;;6652   			for (i=0;i<8;i++)
;;;6653   				{
;;;6654   				putchar_sc16is700(modbus_buff[i]);
;;;6655   				}
;;;6656   			}
;;;6657   		else if(ICA_CH==2)
;;;6658   			{
;;;6659   			uart_out1 (5,4,0,2,0,1,0);
;;;6660   			}
;;;6661   		}
;;;6662   	else
;;;6663   		{
;;;6664   		char modbus_buff[20],i;
;;;6665   		short crc_temp, tempSSSS;
;;;6666   
;;;6667   		tempSSSS=cntrl_stat_old;
0047e0  f9b56034          LDRSH    r6,[r5,#0x34]  ; cntrl_stat_old
;;;6668   		if(	(main_kb_cnt==(TBAT*60)-21) || (main_kb_cnt==(TBAT*60)-20) || (main_kb_cnt==(TBAT*60)-19)) tempSSSS=((short)TBAT)|0x4000;
0047e4  48f2              LDR      r0,|L1.19376|
0047e6  f06f0214          MVN      r2,#0x14
0047ea  f9b00000          LDRSH    r0,[r0,#0]  ; TBAT
0047ee  ebc01100          RSB      r1,r0,r0,LSL #4
0047f2  eb020c81          ADD      r12,r2,r1,LSL #2
0047f6  f9b52052          LDRSH    r2,[r5,#0x52]  ; main_kb_cnt
0047fa  4594              CMP      r12,r2
0047fc  d00b              BEQ      |L1.18454|
0047fe  f06f0c13          MVN      r12,#0x13
004802  eb0c0c81          ADD      r12,r12,r1,LSL #2
004806  4594              CMP      r12,r2
004808  d005              BEQ      |L1.18454|
00480a  f06f0c12          MVN      r12,#0x12
00480e  eb0c0181          ADD      r1,r12,r1,LSL #2
004812  4291              CMP      r1,r2
004814  d101              BNE      |L1.18458|
                  |L1.18454|
004816  f4404680          ORR      r6,r0,#0x4000
                  |L1.18458|
;;;6669   
;;;6670   
;;;6671   		modbus_buff[0] = ICA_MODBUS_ADDRESS;
00481a  8818              LDRH     r0,[r3,#0]  ; ICA_MODBUS_ADDRESS
00481c  f88d0010          STRB     r0,[sp,#0x10]
;;;6672   		modbus_buff[1] = 6;
004820  f04f0006          MOV      r0,#6
004824  f88d0011          STRB     r0,[sp,#0x11]
;;;6673   		modbus_buff[2] = 0;
004828  f88d4012          STRB     r4,[sp,#0x12]
;;;6674   		modbus_buff[3] = 100;
00482c  f04f0064          MOV      r0,#0x64
004830  f88d0013          STRB     r0,[sp,#0x13]
;;;6675   		modbus_buff[4] = (char)(tempSSSS/256);	
004834  ea4f70e6          ASR      r0,r6,#31
004838  eb066010          ADD      r0,r6,r0,LSR #24
00483c  ea4f2120          ASR      r1,r0,#8
004840  f88d1014          STRB     r1,[sp,#0x14]
;;;6676   		modbus_buff[5] = (char)(tempSSSS%256);
004844  4630              MOV      r0,r6
004846  f88d0015          STRB     r0,[sp,#0x15]
;;;6677   	
;;;6678   		crc_temp= CRC16_2(modbus_buff,6);
00484a  f04f0106          MOV      r1,#6
00484e  a804              ADD      r0,sp,#0x10
004850  f7fffffe          BL       CRC16_2
;;;6679   	
;;;6680   		modbus_buff[6]= (char)crc_temp;
004854  f88d0016          STRB     r0,[sp,#0x16]
;;;6681   		modbus_buff[7]= (char)(crc_temp>>8);
004858  ea4f2020          ASR      r0,r0,#8
00485c  f88d0017          STRB     r0,[sp,#0x17]
;;;6682   	
;;;6683   		crc_temp= CRC16_2(modbus_buff,6);
004860  f04f0106          MOV      r1,#6
004864  a804              ADD      r0,sp,#0x10
004866  f7fffffe          BL       CRC16_2
;;;6684   	
;;;6685   		plazma_ica1=tempSSSS;
00486a  f8a5607e          STRH     r6,[r5,#0x7e]
;;;6686   		if(ICA_CH==0)
00486e  f9b70000          LDRSH    r0,[r7,#0]  ; ICA_CH
004872  b3f0              CBZ      r0,|L1.18674|
;;;6687   			{
;;;6688   			for (i=0;i<8;i++)
;;;6689   				{
;;;6690   				putchar_sc16is700(modbus_buff[i]);
;;;6691   				}
;;;6692   			}
;;;6693   		else if(ICA_CH==2)
004874  2802              CMP      r0,#2
004876  d10c              BNE      |L1.18578|
;;;6694   			{
;;;6695   			uart_out1 (5,6,0,100,modbus_buff[4],modbus_buff[5],0);
004878  f89d0015          LDRB     r0,[sp,#0x15]
00487c  f89d1014          LDRB     r1,[sp,#0x14]
004880  e9cd0401          STRD     r0,r4,[sp,#4]
004884  9100              STR      r1,[sp,#0]
004886  2364              MOVS     r3,#0x64
004888  2200              MOVS     r2,#0
00488a  2106              MOVS     r1,#6
00488c  2005              MOVS     r0,#5
00488e  f7fffffe          BL       uart_out1
                  |L1.18578|
;;;6696   			}
;;;6697   		}
;;;6698   	}
;;;6699   }
004892  b009              ADD      sp,sp,#0x24
004894  e8bd8ff0          POP      {r4-r11,pc}
                  |L1.18584|
004898  8818              LDRH     r0,[r3,#0]            ;6638  ; ICA_MODBUS_ADDRESS
00489a  f88d0010          STRB     r0,[sp,#0x10]         ;6638
00489e  f04f0004          MOV      r0,#4                 ;6639
0048a2  f88d0011          STRB     r0,[sp,#0x11]         ;6639
0048a6  f88d4012          STRB     r4,[sp,#0x12]         ;6640
0048aa  f04f0002          MOV      r0,#2                 ;6641
0048ae  f88d0013          STRB     r0,[sp,#0x13]         ;6641
0048b2  f88d4014          STRB     r4,[sp,#0x14]         ;6642
0048b6  f04f0501          MOV      r5,#1                 ;6643
0048ba  f88d5015          STRB     r5,[sp,#0x15]         ;6643
0048be  f04f0106          MOV      r1,#6                 ;6645
0048c2  a804              ADD      r0,sp,#0x10           ;6645
0048c4  f7fffffe          BL       CRC16_2
0048c8  f88d0016          STRB     r0,[sp,#0x16]         ;6647
0048cc  ea4f2020          ASR      r0,r0,#8              ;6648
0048d0  f88d0017          STRB     r0,[sp,#0x17]         ;6648
0048d4  f9b70000          LDRSH    r0,[r7,#0]            ;6650  ; ICA_CH
0048d8  b160              CBZ      r0,|L1.18676|
0048da  2802              CMP      r0,#2                 ;6657
0048dc  d1d9              BNE      |L1.18578|
0048de  e9cd4500          STRD     r4,r5,[sp,#0]         ;6659
0048e2  2302              MOVS     r3,#2                 ;6659
0048e4  2200              MOVS     r2,#0                 ;6659
0048e6  2104              MOVS     r1,#4                 ;6659
0048e8  2005              MOVS     r0,#5                 ;6659
0048ea  9402              STR      r4,[sp,#8]            ;6659
0048ec  f7fffffe          BL       uart_out1
0048f0  e7cf              B        |L1.18578|
                  |L1.18674|
0048f2  e00b              B        |L1.18700|
                  |L1.18676|
0048f4  f04f0400          MOV      r4,#0                 ;6652
0048f8  ad04              ADD      r5,sp,#0x10           ;6635
                  |L1.18682|
0048fa  5d28              LDRB     r0,[r5,r4]            ;6654
0048fc  f7fffffe          BL       putchar_sc16is700
004900  f1040401          ADD      r4,r4,#1              ;6652
004904  b2e4              UXTB     r4,r4                 ;6652
004906  2c08              CMP      r4,#8                 ;6652
004908  d3f7              BCC      |L1.18682|
00490a  e7c2              B        |L1.18578|
                  |L1.18700|
00490c  f04f0400          MOV      r4,#0                 ;6688
004910  ad04              ADD      r5,sp,#0x10           ;6664
                  |L1.18706|
004912  5d28              LDRB     r0,[r5,r4]            ;6690
004914  f7fffffe          BL       putchar_sc16is700
004918  f1040401          ADD      r4,r4,#1              ;6688
00491c  b2e4              UXTB     r4,r4                 ;6688
00491e  2c08              CMP      r4,#8                 ;6688
004920  d3f7              BCC      |L1.18706|
004922  e7b6              B        |L1.18578|
;;;6700   
                          ENDP

                  ipsBlckHndl PROC
;;;6783   //-----------------------------------------------
;;;6784   void ipsBlckHndl(char in)
004924  b510              PUSH     {r4,lr}
;;;6785   {
;;;6786   
;;;6787   ipsBlckStat=0;
004926  4ba3              LDR      r3,|L1.19380|
004928  f04f0000          MOV      r0,#0
00492c  8018              STRH     r0,[r3,#0]
;;;6788   if(ipsBlckSrc==1)
00492e  48a2              LDR      r0,|L1.19384|
004930  f04f0401          MOV      r4,#1
;;;6789   	{
;;;6790   	if(((ipsBlckLog==0)&&(adc_buff_[11]>2000)) || ((ipsBlckLog==1)&&(adc_buff_[11]<2000))) ipsBlckStat=1;
004934  f44f62fa          MOV      r2,#0x7d0
004938  f9b01000          LDRSH    r1,[r0,#0]            ;6788  ; ipsBlckSrc
00493c  489f              LDR      r0,|L1.19388|
00493e  2901              CMP      r1,#1                 ;6788
004940  f9b00000          LDRSH    r0,[r0,#0]
004944  d006              BEQ      |L1.18772|
;;;6791   	}
;;;6792   else if(ipsBlckSrc==2)
004946  2902              CMP      r1,#2
004948  d10f              BNE      |L1.18794|
00494a  499d              LDR      r1,|L1.19392|
;;;6793   	{
;;;6794   	if(((ipsBlckLog==0)&&(adc_buff_[13]>2000)) || ((ipsBlckLog==1)&&(adc_buff_[13]<2000))) ipsBlckStat=1;
00494c  f9b1101a          LDRSH    r1,[r1,#0x1a]
004950  b160              CBZ      r0,|L1.18796|
004952  e00d              B        |L1.18800|
                  |L1.18772|
004954  499a              LDR      r1,|L1.19392|
004956  f9b11016          LDRSH    r1,[r1,#0x16]         ;6790
00495a  b908              CBNZ     r0,|L1.18784|
00495c  4291              CMP      r1,r2                 ;6790
00495e  dc03              BGT      |L1.18792|
                  |L1.18784|
004960  2801              CMP      r0,#1                 ;6790
004962  d102              BNE      |L1.18794|
004964  4291              CMP      r1,r2                 ;6790
004966  da00              BGE      |L1.18794|
                  |L1.18792|
004968  801c              STRH     r4,[r3,#0]            ;6790
                  |L1.18794|
;;;6795   	}
;;;6796   }
00496a  bd10              POP      {r4,pc}
                  |L1.18796|
00496c  4291              CMP      r1,r2                 ;6794
00496e  dc03              BGT      |L1.18808|
                  |L1.18800|
004970  2801              CMP      r0,#1                 ;6794
004972  d1fa              BNE      |L1.18794|
004974  4291              CMP      r1,r2                 ;6794
004976  daf8              BGE      |L1.18794|
                  |L1.18808|
004978  801c              STRH     r4,[r3,#0]            ;6794
00497a  bd10              POP      {r4,pc}
;;;6797   
                          ENDP

                  bps_drv PROC
;;;6798   //-----------------------------------------------
;;;6799   void bps_drv(char in)
00497c  e92d41f0          PUSH     {r4-r8,lr}
;;;6800   {
004980  4606              MOV      r6,r0
;;;6801   char temp;
;;;6802   
;;;6803   if (bps[in]._device!=dSRC) return;
004982  eb0600c6          ADD      r0,r6,r6,LSL #3
004986  498f              LDR      r1,|L1.19396|
004988  eb001006          ADD      r0,r0,r6,LSL #4
00498c  f8112020          LDRB     r2,[r1,r0,LSL #2]
004990  2a03              CMP      r2,#3
004992  d17d              BNE      |L1.19088|
;;;6804   temp=bps[in]._flags_tm;
004994  eb010480          ADD      r4,r1,r0,LSL #2
004998  f8945042          LDRB     r5,[r4,#0x42]
;;;6805   if(temp&(1<<AV_T))
00499c  07a8              LSLS     r0,r5,#30
00499e  d517              BPL      |L1.18896|
;;;6806   	{
;;;6807   	if(bps[in]._temp_av_cnt<1200) 
0049a0  f9b41046          LDRSH    r1,[r4,#0x46]
0049a4  f44f6296          MOV      r2,#0x4b0
0049a8  4291              CMP      r1,r2
0049aa  da22              BGE      |L1.18930|
;;;6808   		{
;;;6809   		bps[in]._temp_av_cnt++;
0049ac  f1010101          ADD      r1,r1,#1
0049b0  b208              SXTH     r0,r1
0049b2  f8a40046          STRH     r0,[r4,#0x46]
;;;6810   		if(bps[in]._temp_av_cnt>=1200)
0049b6  4290              CMP      r0,r2
0049b8  db1b              BLT      |L1.18930|
;;;6811   			{
;;;6812   			bps[in]._temp_av_cnt=1200;
0049ba  f8a42046          STRH     r2,[r4,#0x46]
;;;6813   		   	if(!(bps[in]._av&(1<<0)))avar_bps_hndl(in,0,1);
0049be  7860              LDRB     r0,[r4,#1]
0049c0  07c0              LSLS     r0,r0,#31
0049c2  d116              BNE      |L1.18930|
0049c4  2201              MOVS     r2,#1
0049c6  2100              MOVS     r1,#0
0049c8  4630              MOV      r0,r6
0049ca  f7fffffe          BL       avar_bps_hndl
0049ce  e010              B        |L1.18930|
                  |L1.18896|
;;;6814   			}
;;;6815   		}
;;;6816   	}
;;;6817   
;;;6818   else if(!(temp&(1<<AV_T)))
;;;6819   	{
;;;6820   	if(bps[in]._temp_av_cnt) 
0049d0  f9b41046          LDRSH    r1,[r4,#0x46]
0049d4  b169              CBZ      r1,|L1.18930|
;;;6821   		{
;;;6822   		bps[in]._temp_av_cnt--;
0049d6  f1a10101          SUB      r1,r1,#1
0049da  b208              SXTH     r0,r1
0049dc  f8a40046          STRH     r0,[r4,#0x46]
;;;6823   		if(!bps[in]._temp_av_cnt)
0049e0  b938              CBNZ     r0,|L1.18930|
;;;6824   			{
;;;6825   			if(bps[in]._av&(1<<0))avar_bps_hndl(in,0,0);
0049e2  7860              LDRB     r0,[r4,#1]
0049e4  07c0              LSLS     r0,r0,#31
0049e6  d004              BEQ      |L1.18930|
0049e8  2200              MOVS     r2,#0
0049ea  4611              MOV      r1,r2
0049ec  4630              MOV      r0,r6
0049ee  f7fffffe          BL       avar_bps_hndl
                  |L1.18930|
;;;6826   			}
;;;6827   		} 	
;;;6828   
;;;6829   	}
;;;6830   
;;;6831   if((temp&(1<<AVUMAX)))
0049f2  0728              LSLS     r0,r5,#28
;;;6832   	{
;;;6833   	if(bps[in]._umax_av_cnt<10) 
;;;6834   		{
;;;6835   		bps[in]._umax_av_cnt++;
;;;6836   		if(bps[in]._umax_av_cnt>=10)
;;;6837   			{ 
;;;6838   			bps[in]._umax_av_cnt=10;
0049f4  f04f080a          MOV      r8,#0xa
0049f8  f04f0700          MOV      r7,#0                 ;6813
0049fc  d518              BPL      |L1.18992|
0049fe  f9b41048          LDRSH    r1,[r4,#0x48]         ;6833
004a02  290a              CMP      r1,#0xa               ;6833
004a04  da29              BGE      |L1.19034|
004a06  f1010101          ADD      r1,r1,#1              ;6835
004a0a  b208              SXTH     r0,r1                 ;6835
004a0c  f8a40048          STRH     r0,[r4,#0x48]         ;6835
004a10  280a              CMP      r0,#0xa               ;6836
004a12  db22              BLT      |L1.19034|
004a14  f8a48048          STRH     r8,[r4,#0x48]
;;;6839   			if(!(bps[in]._av&(1<<1)))avar_bps_hndl(in,1,1);
004a18  7860              LDRB     r0,[r4,#1]
004a1a  0780              LSLS     r0,r0,#30
004a1c  d404              BMI      |L1.18984|
004a1e  2201              MOVS     r2,#1
004a20  4611              MOV      r1,r2
004a22  4630              MOV      r0,r6
004a24  f7fffffe          BL       avar_bps_hndl
                  |L1.18984|
;;;6840   			apv_start(in);
004a28  4630              MOV      r0,r6
004a2a  f7fffffe          BL       apv_start
004a2e  e014              B        |L1.19034|
                  |L1.18992|
;;;6841   		  	/*if((K[APV]!=ON)||((apv_cnt[in,0]==0)&&(apv_cnt[in,1]==0)&&(apv_cnt[in,2]==0)&&(apv_flags[in]==afOFF)))avar_s_hndl(in,1,1);
;;;6842   			if((apv_cnt[in,0]==0)&&(apv_cnt[in,1]==0)&&(apv_cnt[in,2]==0)&&(apv_flags[in]==afON))
;;;6843   				{
;;;6844   				apv_cnt[in,0]=APV_INIT;
;;;6845   				apv_cnt[in,1]=APV_INIT;
;;;6846   				apv_cnt[in,2]=APV_INIT;
;;;6847   				apv_flags[in]=afOFF;
;;;6848   				}				*/
;;;6849   						
;;;6850   			}
;;;6851   		} 
;;;6852   	}		
;;;6853   else if(!(temp&(1<<AVUMAX)))
;;;6854   	{
;;;6855   	if(bps[in]._umax_av_cnt>0) 
004a30  f9b41048          LDRSH    r1,[r4,#0x48]
004a34  2900              CMP      r1,#0
004a36  dd0d              BLE      |L1.19028|
;;;6856   		{
;;;6857   		bps[in]._umax_av_cnt--;
004a38  f1a10101          SUB      r1,r1,#1
004a3c  b208              SXTH     r0,r1
004a3e  f8a40048          STRH     r0,[r4,#0x48]
;;;6858   		if(bps[in]._umax_av_cnt==0)
004a42  b950              CBNZ     r0,|L1.19034|
;;;6859   			{
;;;6860   			bps[in]._umax_av_cnt=0;
;;;6861   			avar_bps_hndl(in,1,0);
004a44  f04f0200          MOV      r2,#0
004a48  f04f0101          MOV      r1,#1
004a4c  4630              MOV      r0,r6
004a4e  f7fffffe          BL       avar_bps_hndl
004a52  e002              B        |L1.19034|
                  |L1.19028|
;;;6862   			//apv_stop(in);
;;;6863   	 //		apv_cnt[in,0]=0;
;;;6864   	//		apv_cnt[in,1]=0;
;;;6865   	 //		apv_cnt[in,2]=0;			
;;;6866   			}
;;;6867   		}
;;;6868   	else if(bps[in]._umax_av_cnt<0) bps[in]._umax_av_cnt=0;		 
004a54  da01              BGE      |L1.19034|
004a56  f8a47048          STRH     r7,[r4,#0x48]
                  |L1.19034|
;;;6869   	}
;;;6870   
;;;6871   if(temp&(1<<AVUMIN))
004a5a  06e8              LSLS     r0,r5,#27
004a5c  d519              BPL      |L1.19090|
;;;6872   	{
;;;6873   	if(bps[in]._umin_av_cnt<10) 
004a5e  f9b4104a          LDRSH    r1,[r4,#0x4a]
004a62  290a              CMP      r1,#0xa
004a64  da23              BGE      |L1.19118|
;;;6874   		{
;;;6875   		bps[in]._umin_av_cnt++;
004a66  f1010101          ADD      r1,r1,#1
004a6a  b208              SXTH     r0,r1
004a6c  f8a4004a          STRH     r0,[r4,#0x4a]
;;;6876   		if(bps[in]._umin_av_cnt>=10)
004a70  280a              CMP      r0,#0xa
004a72  db1c              BLT      |L1.19118|
;;;6877   			{ 
;;;6878   			bps[in]._umin_av_cnt=10;
004a74  f8a4804a          STRH     r8,[r4,#0x4a]
;;;6879   			if(!(bps[in]._av&(1<<2)))avar_bps_hndl(in,2,1);
004a78  7860              LDRB     r0,[r4,#1]
004a7a  0740              LSLS     r0,r0,#29
004a7c  d404              BMI      |L1.19080|
004a7e  2201              MOVS     r2,#1
004a80  2102              MOVS     r1,#2
004a82  4630              MOV      r0,r6
004a84  f7fffffe          BL       avar_bps_hndl
                  |L1.19080|
;;;6880   			apv_start(in);
004a88  4630              MOV      r0,r6
004a8a  f7fffffe          BL       apv_start
004a8e  e00e              B        |L1.19118|
                  |L1.19088|
004a90  e0b1              B        |L1.19446|
                  |L1.19090|
;;;6881   		  	/*	if((K[APV]!=ON)||((apv_cnt[in,0]==0)&&(apv_cnt[in,1]==0)&&(apv_cnt[in,2]==0)&&(apv_flags[in]==afOFF)))avar_s_hndl(in,2,1);
;;;6882   			if((apv_cnt[in,0]==0)&&(apv_cnt[in,1]==0)&&(apv_cnt[in,2]==0)&&(apv_flags[in]==afON))
;;;6883   				{
;;;6884   				apv_cnt[in,0]=APV_INIT;
;;;6885   				apv_cnt[in,1]=APV_INIT;
;;;6886   				apv_cnt[in,2]=APV_INIT;
;;;6887   				apv_flags[in]=afOFF;
;;;6888   				}*/				
;;;6889   			}
;;;6890   		} 
;;;6891   	}	
;;;6892   	
;;;6893   else if(!(temp&(1<<AVUMIN)))
;;;6894   	{
;;;6895   	if(bps[in]._umin_av_cnt) 
004a92  f9b4004a          LDRSH    r0,[r4,#0x4a]
004a96  b150              CBZ      r0,|L1.19118|
;;;6896   		{
;;;6897   		bps[in]._umin_av_cnt--;
004a98  f1a00001          SUB      r0,r0,#1
004a9c  b200              SXTH     r0,r0
004a9e  f8a4004a          STRH     r0,[r4,#0x4a]
;;;6898   		if(bps[in]._umin_av_cnt==0)
004aa2  b920              CBNZ     r0,|L1.19118|
;;;6899   			{
;;;6900   			bps[in]._umin_av_cnt=0;
;;;6901   			avar_bps_hndl(in,2,0);
004aa4  2200              MOVS     r2,#0
004aa6  2102              MOVS     r1,#2
004aa8  4630              MOV      r0,r6
004aaa  f7fffffe          BL       avar_bps_hndl
                  |L1.19118|
;;;6902   			//apv_stop(in);
;;;6903   		//	apv_cnt[in,0]=0;
;;;6904   		//	apv_cnt[in,1]=0;
;;;6905   		//	apv_cnt[in,2]=0;
;;;6906   			}
;;;6907   		}
;;;6908   	else if(bps[in]._umin_av_cnt>10)bps[in]._umin_av_cnt--;	 
;;;6909   	}
;;;6910   
;;;6911   if((bps[in]._Uii<(UB20-DU)))
004aae  4846              LDR      r0,|L1.19400|
004ab0  69e1              LDR      r1,[r4,#0x1c]
004ab2  f9b02000          LDRSH    r2,[r0,#0]  ; UB20
004ab6  4845              LDR      r0,|L1.19404|
004ab8  f9b00000          LDRSH    r0,[r0,#0]  ; DU
004abc  1a10              SUBS     r0,r2,r0
004abe  4281              CMP      r1,r0
004ac0  da1d              BGE      |L1.19198|
;;;6912   	{
;;;6913   	if(bps[in]._state==bsWRK)
004ac2  78a0              LDRB     r0,[r4,#2]
004ac4  2801              CMP      r0,#1
004ac6  d128              BNE      |L1.19226|
;;;6914   		{
;;;6915   		if(bps[in]._umin_av_cnt_uku<300) 
004ac8  f9b4004c          LDRSH    r0,[r4,#0x4c]
004acc  f44f7196          MOV      r1,#0x12c
004ad0  4288              CMP      r0,r1
004ad2  da11              BGE      |L1.19192|
;;;6916   			{
;;;6917   			bps[in]._umin_av_cnt_uku++;
004ad4  f1000001          ADD      r0,r0,#1
004ad8  b200              SXTH     r0,r0
004ada  f8a4004c          STRH     r0,[r4,#0x4c]
;;;6918   			if(bps[in]._umin_av_cnt_uku>=300)
004ade  4288              CMP      r0,r1
004ae0  db1b              BLT      |L1.19226|
;;;6919   				{ 
;;;6920   				bps[in]._umin_av_cnt_uku=300;
004ae2  f8a4104c          STRH     r1,[r4,#0x4c]
;;;6921   				if(!(bps[in]._av&(1<<2)))avar_bps_hndl(in,2,1);
004ae6  7860              LDRB     r0,[r4,#1]
004ae8  0740              LSLS     r0,r0,#29
004aea  d416              BMI      |L1.19226|
004aec  2201              MOVS     r2,#1
004aee  2102              MOVS     r1,#2
004af0  4630              MOV      r0,r6
004af2  f7fffffe          BL       avar_bps_hndl
004af6  e010              B        |L1.19226|
                  |L1.19192|
;;;6922   			  	/*	if((K[APV]!=ON)||((apv_cnt[in,0]==0)&&(apv_cnt[in,1]==0)&&(apv_cnt[in,2]==0)&&(apv_flags[in]==afOFF)))avar_s_hndl(in,2,1);
;;;6923   				if((apv_cnt[in,0]==0)&&(apv_cnt[in,1]==0)&&(apv_cnt[in,2]==0)&&(apv_flags[in]==afON))
;;;6924   					{
;;;6925   					apv_cnt[in,0]=APV_INIT;
;;;6926   					apv_cnt[in,1]=APV_INIT;
;;;6927   					apv_cnt[in,2]=APV_INIT;
;;;6928   					apv_flags[in]=afOFF;
;;;6929   					}*/				
;;;6930   				}
;;;6931   			}
;;;6932   		else
;;;6933   			{
;;;6934   			bps[in]._umin_av_cnt_uku=0;
004af8  f8a4704c          STRH     r7,[r4,#0x4c]
004afc  e00d              B        |L1.19226|
                  |L1.19198|
;;;6935   			} 
;;;6936   		}
;;;6937   	}	
;;;6938   	
;;;6939   else if(bps[in]._Uii>=(UB20-DU))
;;;6940   	{
;;;6941   	if(bps[in]._umin_av_cnt_uku) 
004afe  f9b4004c          LDRSH    r0,[r4,#0x4c]
004b02  b150              CBZ      r0,|L1.19226|
;;;6942   		{
;;;6943   		bps[in]._umin_av_cnt_uku--;
004b04  f1a00001          SUB      r0,r0,#1
004b08  b200              SXTH     r0,r0
004b0a  f8a4004c          STRH     r0,[r4,#0x4c]
;;;6944   		if(bps[in]._umin_av_cnt_uku==0)
004b0e  b920              CBNZ     r0,|L1.19226|
;;;6945   			{
;;;6946   			bps[in]._umin_av_cnt_uku=0;
;;;6947   			avar_bps_hndl(in,2,0);
004b10  2200              MOVS     r2,#0
004b12  2102              MOVS     r1,#2
004b14  4630              MOV      r0,r6
004b16  f7fffffe          BL       avar_bps_hndl
                  |L1.19226|
;;;6948   		//	apv_cnt[in,0]=0;
;;;6949   		//	apv_cnt[in,1]=0;
;;;6950   		//	apv_cnt[in,2]=0;
;;;6951   			}
;;;6952   		}
;;;6953   	else if(bps[in]._umin_av_cnt_uku>300)bps[in]._umin_av_cnt_uku=300;	 
;;;6954   	}
;;;6955   
;;;6956   //bps[in]._state=bsOFF;
;;;6957   
;;;6958   if (bps[in]._av&0x0f)					bps[in]._state=bsAV;
004b1a  7860              LDRB     r0,[r4,#1]
004b1c  0700              LSLS     r0,r0,#28
004b1e  d003              BEQ      |L1.19240|
004b20  f04f0004          MOV      r0,#4
004b24  70a0              STRB     r0,[r4,#2]
004b26  e017              B        |L1.19288|
                  |L1.19240|
;;;6959   else if ( (net_av) && (bps[in]._cnt>20)/*&& 
004b28  4829              LDR      r0,|L1.19408|
004b2a  7800              LDRB     r0,[r0,#0]  ; net_av
004b2c  b130              CBZ      r0,|L1.19260|
004b2e  78e0              LDRB     r0,[r4,#3]
004b30  2814              CMP      r0,#0x14
004b32  d903              BLS      |L1.19260|
;;;6960   		(bps[in]._Uii<200)*/)				bps[in]._state=bsOFF_AV_NET;
004b34  f04f0005          MOV      r0,#5
004b38  70a0              STRB     r0,[r4,#2]
004b3a  e00d              B        |L1.19288|
                  |L1.19260|
;;;6961   else if (bps[in]._flags_tm&BIN8(100000))	bps[in]._state=bsRDY;
004b3c  f8940042          LDRB     r0,[r4,#0x42]
004b40  0680              LSLS     r0,r0,#26
004b42  d503              BPL      |L1.19276|
004b44  f04f0002          MOV      r0,#2
004b48  70a0              STRB     r0,[r4,#2]
004b4a  e005              B        |L1.19288|
                  |L1.19276|
;;;6962   else if (bps[in]._cnt<20)				bps[in]._state=bsWRK;
004b4c  78e0              LDRB     r0,[r4,#3]
004b4e  2814              CMP      r0,#0x14
004b50  d202              BCS      |L1.19288|
004b52  f04f0001          MOV      r0,#1
004b56  70a0              STRB     r0,[r4,#2]
                  |L1.19288|
;;;6963   
;;;6964   
;;;6965   
;;;6966   //else if(bps[in]._flags_tm&BIN8(100000)) bps[in]._state=ssBL;
;;;6967   //else if((!(bps[in]._flags_tm&BIN8(100000)))&&(net_U>100))bps[in]._state=ssWRK;
;;;6968   //else bps[0]._state=ssNOT;
;;;6969   
;;;6970   //bps[in]._is_ready=0;
;;;6971   //bps[in]._is_wrk=0;
;;;6972   //if(bps[in]._av_net) bps[in]._flags_bp='N';// не подключен
;;;6973   //else if(bps[in]._av_u_max) bps[in]._flags_bp='P';// завышено напряжение(u_.av_.bAS1T)) bps_state[0]=ssAV;
;;;6974   //else if(bps[in]._av_u_min) bps[in]._flags_bp='M';// занижено напряжение
;;;6975   //else if(bps[in]._av_temper) bps[in]._flags_bp='T';// температура
;;;6976   //else if(bps[in]._flags_tm&BIN8(100000)) 
;;;6977   //	{
;;;6978   //	bps[in]._flags_bp='B';// заблокирован
;;;6979   //	bps[in]._is_ready=1;
;;;6980   //	}
;;;6981   //else if((!(bps[in]._flags_tm&BIN8(100000)))&&(net_U>100))
;;;6982   //     {
;;;6983   //     bps[in]._flags_bp='W';// работает
;;;6984   //     bps[in]._is_ready=1;
;;;6985   //     bps[in]._is_wrk=1;
;;;6986        
;;;6987   //     }
;;;6988   //else bps[in]._is_ready=1;     
;;;6989   
;;;6990   
;;;6991   
;;;6992   
;;;6993   
;;;6994   /*
;;;6995   bps[in]._flags_tu&=BIN8(11111110);
;;;6996   if(bps[in]._ist_blok_cnt)
;;;6997   	{
;;;6998   	bps[in]._ist_blok_cnt--;
;;;6999   	bps[in]._flags_tu|=BIN8(1);
;;;7000   	}
;;;7001   
;;;7002   	   */ 
;;;7003   
;;;7004   //Пересброс БПСа при потере связи
;;;7005   if(bps[in]._cnt>=10) bps[in]._flags_tu|=BIN8(10000000);
004b58  78e0              LDRB     r0,[r4,#3]
004b5a  280a              CMP      r0,#0xa
004b5c  d306              BCC      |L1.19308|
004b5e  f894002c          LDRB     r0,[r4,#0x2c]
004b62  f0400080          ORR      r0,r0,#0x80
004b66  f884002c          STRB     r0,[r4,#0x2c]
004b6a  e005              B        |L1.19320|
                  |L1.19308|
;;;7006   else bps[in]._flags_tu&=BIN8(1111111);
004b6c  f894002c          LDRB     r0,[r4,#0x2c]
004b70  f000007f          AND      r0,r0,#0x7f
004b74  f884002c          STRB     r0,[r4,#0x2c]
                  |L1.19320|
;;;7007   
;;;7008   if(avar_bps_reset_cnt) 
004b78  4816              LDR      r0,|L1.19412|
004b7a  f8901031          LDRB     r1,[r0,#0x31]  ; avar_bps_reset_cnt
004b7e  b139              CBZ      r1,|L1.19344|
;;;7009   	{
;;;7010   	bps[in]._flags_tu|=BIN8(10);
004b80  f894102c          LDRB     r1,[r4,#0x2c]
004b84  f0410102          ORR      r1,r1,#2
004b88  f884102c          STRB     r1,[r4,#0x2c]
;;;7011   	bps[in]._av=0;
004b8c  7067              STRB     r7,[r4,#1]
004b8e  e029              B        |L1.19428|
                  |L1.19344|
;;;7012   	}
;;;7013   else if(bps[in]._apv_reset_av_timer) bps[in]._flags_tu|=BIN8(10);
004b90  f8941062          LDRB     r1,[r4,#0x62]
004b94  b301              CBZ      r1,|L1.19416|
004b96  f894102c          LDRB     r1,[r4,#0x2c]
004b9a  f0410102          ORR      r1,r1,#2
004b9e  f884102c          STRB     r1,[r4,#0x2c]
004ba2  e01f              B        |L1.19428|
                  |L1.19364|
                          DCD      ica_u_necc
                  |L1.19368|
                          DCD      ICA_MODBUS_ADDRESS
                  |L1.19372|
                          DCD      ICA_CH
                  |L1.19376|
                          DCD      TBAT
                  |L1.19380|
                          DCD      ipsBlckStat
                  |L1.19384|
                          DCD      ipsBlckSrc
                  |L1.19388|
                          DCD      ipsBlckLog
                  |L1.19392|
                          DCD      ||.bss||+0x40c
                  |L1.19396|
                          DCD      bps
                  |L1.19400|
                          DCD      UB20
                  |L1.19404|
                          DCD      ||DU||
                  |L1.19408|
                          DCD      net_av
                  |L1.19412|
                          DCD      ||area_number.25||
                  |L1.19416|
;;;7014   else bps[in]._flags_tu&=BIN8(11111101);
004bd8  f894102c          LDRB     r1,[r4,#0x2c]
004bdc  f00101fd          AND      r1,r1,#0xfd
004be0  f884102c          STRB     r1,[r4,#0x2c]
                  |L1.19428|
;;;7015   	
;;;7016   bps[in]._vol_u=cntrl_stat+bps[in]._x_;	
004be4  f9b41054          LDRSH    r1,[r4,#0x54]
004be8  f9b00032          LDRSH    r0,[r0,#0x32]  ; cntrl_stat
004bec  4408              ADD      r0,r0,r1
004bee  6320              STR      r0,[r4,#0x30]
;;;7017   bps[in]._vol_i=1000;
004bf0  f44f707a          MOV      r0,#0x3e8
004bf4  6360              STR      r0,[r4,#0x34]
                  |L1.19446|
;;;7018   //bps[0]._vol_u=500;
;;;7019   //bps[1]._vol_u=cntrl_stat_pwm; 
;;;7020   }
004bf6  e8bd81f0          POP      {r4-r8,pc}
;;;7021   
                          ENDP

                  avt_hndl PROC
;;;7022   //-----------------------------------------------
;;;7023   void avt_hndl(void)
004bfa  b570              PUSH     {r4-r6,lr}
;;;7024   {
;;;7025   char i;
;;;7026   for(i=0;i<12;i++)
004bfc  f04f0000          MOV      r0,#0
;;;7027   	{
;;;7028   	if(eb2_data_short[6]&(1<<i))
004c00  49ff              LDR      r1,|L1.20480|
004c02  f04f0401          MOV      r4,#1
004c06  4603              MOV      r3,r0                 ;7026
004c08  f9b1200c          LDRSH    r2,[r1,#0xc]
;;;7029   		{
;;;7030   		avt_stat[i]=avtON;
004c0c  4dfd              LDR      r5,|L1.20484|
                  |L1.19470|
004c0e  fa04f100          LSL      r1,r4,r0              ;7028
004c12  420a              TST      r2,r1                 ;7028
004c14  d001              BEQ      |L1.19482|
004c16  542c              STRB     r4,[r5,r0]
004c18  e000              B        |L1.19484|
                  |L1.19482|
;;;7031   		}
;;;7032   	else avt_stat[i]=avtOFF;
004c1a  542b              STRB     r3,[r5,r0]
                  |L1.19484|
004c1c  f1000001          ADD      r0,r0,#1              ;7026
004c20  b2c0              UXTB     r0,r0                 ;7026
004c22  280c              CMP      r0,#0xc               ;7026
004c24  d3f3              BCC      |L1.19470|
;;;7033   	}
;;;7034   
;;;7035   if((avt_stat_old[0]!=avt_stat[0])&&(NUMAVT>=1))
004c26  4ef8              LDR      r6,|L1.20488|
004c28  7828              LDRB     r0,[r5,#0]  ; avt_stat
004c2a  4cf8              LDR      r4,|L1.20492|
004c2c  7831              LDRB     r1,[r6,#0]  ; avt_stat_old
004c2e  4281              CMP      r1,r0
004c30  d00b              BEQ      |L1.19530|
004c32  f9b41000          LDRSH    r1,[r4,#0]  ; NUMAVT
004c36  2901              CMP      r1,#1
004c38  db07              BLT      |L1.19530|
;;;7036   	{
;;;7037   	if(avt_stat[0]==avtON) 	snmp_trap_send("Avtomat #1 is ON ",11,1,1);
004c3a  2801              CMP      r0,#1
004c3c  d07e              BEQ      |L1.19772|
;;;7038   	else 				snmp_trap_send("Avtomat #1 is OFF",11,1,0);
004c3e  2300              MOVS     r3,#0
004c40  2201              MOVS     r2,#1
004c42  210b              MOVS     r1,#0xb
004c44  a0f2              ADR      r0,|L1.20496|
004c46  f7fffffe          BL       snmp_trap_send
                  |L1.19530|
;;;7039   	}
;;;7040   if((avt_stat_old[1]!=avt_stat[1])&&(NUMAVT>=2))
004c4a  7871              LDRB     r1,[r6,#1]  ; avt_stat_old
004c4c  7868              LDRB     r0,[r5,#1]  ; avt_stat
004c4e  4281              CMP      r1,r0
004c50  d00b              BEQ      |L1.19562|
004c52  f9b41000          LDRSH    r1,[r4,#0]  ; NUMAVT
004c56  2902              CMP      r1,#2
004c58  db07              BLT      |L1.19562|
;;;7041   	{
;;;7042   	if(avt_stat[1]==avtON) 	snmp_trap_send("Avtomat #2 is ON ",11,2,1);
004c5a  2801              CMP      r0,#1
004c5c  d06f              BEQ      |L1.19774|
;;;7043   	else 				snmp_trap_send("Avtomat #2 is OFF",11,2,0);
004c5e  2300              MOVS     r3,#0
004c60  2202              MOVS     r2,#2
004c62  210b              MOVS     r1,#0xb
004c64  a0ef              ADR      r0,|L1.20516|
004c66  f7fffffe          BL       snmp_trap_send
                  |L1.19562|
;;;7044   	}
;;;7045   if((avt_stat_old[2]!=avt_stat[2])&&(NUMAVT>=3))
004c6a  78b1              LDRB     r1,[r6,#2]  ; avt_stat_old
004c6c  78a8              LDRB     r0,[r5,#2]  ; avt_stat
004c6e  4281              CMP      r1,r0
004c70  d00b              BEQ      |L1.19594|
004c72  f9b41000          LDRSH    r1,[r4,#0]  ; NUMAVT
004c76  2903              CMP      r1,#3
004c78  db07              BLT      |L1.19594|
;;;7046   	{
;;;7047   	if(avt_stat[2]==avtON) 	snmp_trap_send("Avtomat #3 is ON ",11,3,1);
004c7a  2801              CMP      r0,#1
004c7c  d072              BEQ      |L1.19812|
;;;7048   	else 				snmp_trap_send("Avtomat #3 is OFF",11,3,0);
004c7e  2300              MOVS     r3,#0
004c80  2203              MOVS     r2,#3
004c82  210b              MOVS     r1,#0xb
004c84  a0ec              ADR      r0,|L1.20536|
004c86  f7fffffe          BL       snmp_trap_send
                  |L1.19594|
;;;7049   	}
;;;7050   if((avt_stat_old[3]!=avt_stat[3])&&(NUMAVT>=4))
004c8a  78f1              LDRB     r1,[r6,#3]  ; avt_stat_old
004c8c  78e8              LDRB     r0,[r5,#3]  ; avt_stat
004c8e  4281              CMP      r1,r0
004c90  d00b              BEQ      |L1.19626|
004c92  f9b41000          LDRSH    r1,[r4,#0]  ; NUMAVT
004c96  2904              CMP      r1,#4
004c98  db07              BLT      |L1.19626|
;;;7051   	{
;;;7052   	if(avt_stat[3]==avtON) 	snmp_trap_send("Avtomat #4 is ON ",11,4,1);
004c9a  2801              CMP      r0,#1
004c9c  d079              BEQ      |L1.19858|
;;;7053   	else 				snmp_trap_send("Avtomat #4 is OFF",11,4,0);
004c9e  2300              MOVS     r3,#0
004ca0  2204              MOVS     r2,#4
004ca2  210b              MOVS     r1,#0xb
004ca4  a0e9              ADR      r0,|L1.20556|
004ca6  f7fffffe          BL       snmp_trap_send
                  |L1.19626|
;;;7054   	}
;;;7055   if((avt_stat_old[4]!=avt_stat[4])&&(NUMAVT>=5))
004caa  7931              LDRB     r1,[r6,#4]  ; avt_stat_old
004cac  7928              LDRB     r0,[r5,#4]  ; avt_stat
004cae  4281              CMP      r1,r0
004cb0  d00b              BEQ      |L1.19658|
004cb2  f9b41000          LDRSH    r1,[r4,#0]  ; NUMAVT
004cb6  2905              CMP      r1,#5
004cb8  db07              BLT      |L1.19658|
;;;7056   	{
;;;7057   	if(avt_stat[4]==avtON) 	snmp_trap_send("Avtomat #5 is ON ",11,5,1);
004cba  2801              CMP      r0,#1
004cbc  d071              BEQ      |L1.19874|
;;;7058   	else 				snmp_trap_send("Avtomat #5 is OFF",11,5,0);
004cbe  2300              MOVS     r3,#0
004cc0  2205              MOVS     r2,#5
004cc2  210b              MOVS     r1,#0xb
004cc4  a0e6              ADR      r0,|L1.20576|
004cc6  f7fffffe          BL       snmp_trap_send
                  |L1.19658|
;;;7059   	}
;;;7060   if((avt_stat_old[5]!=avt_stat[5])&&(NUMAVT>=6))
004cca  7971              LDRB     r1,[r6,#5]  ; avt_stat_old
004ccc  7968              LDRB     r0,[r5,#5]  ; avt_stat
004cce  4281              CMP      r1,r0
004cd0  d00b              BEQ      |L1.19690|
004cd2  f9b41000          LDRSH    r1,[r4,#0]  ; NUMAVT
004cd6  2906              CMP      r1,#6
004cd8  db07              BLT      |L1.19690|
;;;7061   	{
;;;7062   	if(avt_stat[5]==avtON) 	snmp_trap_send("Avtomat #6 is ON ",11,6,1);
004cda  2801              CMP      r0,#1
004cdc  d068              BEQ      |L1.19888|
;;;7063   	else 				snmp_trap_send("Avtomat #6 is OFF",11,6,0);
004cde  2300              MOVS     r3,#0
004ce0  2206              MOVS     r2,#6
004ce2  210b              MOVS     r1,#0xb
004ce4  a0e3              ADR      r0,|L1.20596|
004ce6  f7fffffe          BL       snmp_trap_send
                  |L1.19690|
;;;7064   	}
;;;7065   if((avt_stat_old[6]!=avt_stat[6])&&(NUMAVT>=7))
004cea  79b1              LDRB     r1,[r6,#6]  ; avt_stat_old
004cec  79a8              LDRB     r0,[r5,#6]  ; avt_stat
004cee  4281              CMP      r1,r0
004cf0  d00b              BEQ      |L1.19722|
004cf2  f9b41000          LDRSH    r1,[r4,#0]  ; NUMAVT
004cf6  2907              CMP      r1,#7
004cf8  db07              BLT      |L1.19722|
;;;7066   	{
;;;7067   	if(avt_stat[6]==avtON) 	snmp_trap_send("Avtomat #7 is ON ",11,7,1);
004cfa  2801              CMP      r0,#1
004cfc  d05f              BEQ      |L1.19902|
;;;7068   	else 				snmp_trap_send("Avtomat #7 is OFF",11,7,0);
004cfe  2300              MOVS     r3,#0
004d00  2207              MOVS     r2,#7
004d02  210b              MOVS     r1,#0xb
004d04  a0e0              ADR      r0,|L1.20616|
004d06  f7fffffe          BL       snmp_trap_send
                  |L1.19722|
;;;7069   	}
;;;7070   if((avt_stat_old[7]!=avt_stat[7])&&(NUMAVT>=8))
004d0a  79f1              LDRB     r1,[r6,#7]  ; avt_stat_old
004d0c  79e8              LDRB     r0,[r5,#7]  ; avt_stat
004d0e  4281              CMP      r1,r0
004d10  d00b              BEQ      |L1.19754|
004d12  f9b41000          LDRSH    r1,[r4,#0]  ; NUMAVT
004d16  2908              CMP      r1,#8
004d18  db07              BLT      |L1.19754|
;;;7071   	{
;;;7072   	if(avt_stat[7]==avtON) 	snmp_trap_send("Avtomat #8 is ON ",11,8,1);
004d1a  2801              CMP      r0,#1
004d1c  d056              BEQ      |L1.19916|
;;;7073   	else 				snmp_trap_send("Avtomat #8 is OFF",11,8,0);
004d1e  2300              MOVS     r3,#0
004d20  2208              MOVS     r2,#8
004d22  210b              MOVS     r1,#0xb
004d24  a0dd              ADR      r0,|L1.20636|
004d26  f7fffffe          BL       snmp_trap_send
                  |L1.19754|
;;;7074   	}
;;;7075   if((avt_stat_old[8]!=avt_stat[8])&&(NUMAVT>=9))
004d2a  7a31              LDRB     r1,[r6,#8]  ; avt_stat_old
004d2c  7a28              LDRB     r0,[r5,#8]  ; avt_stat
004d2e  4281              CMP      r1,r0
004d30  d00e              BEQ      |L1.19792|
004d32  f9b41000          LDRSH    r1,[r4,#0]  ; NUMAVT
004d36  2909              CMP      r1,#9
004d38  db0a              BLT      |L1.19792|
;;;7076   	{
;;;7077   	if(avt_stat[8]==avtON) 	snmp_trap_send("Avtomat #9 is ON ",11,9,1);
004d3a  e001              B        |L1.19776|
                  |L1.19772|
004d3c  e013              B        |L1.19814|
                  |L1.19774|
004d3e  e019              B        |L1.19828|
                  |L1.19776|
004d40  2801              CMP      r0,#1
004d42  d04a              BEQ      |L1.19930|
;;;7078   	else 				snmp_trap_send("Avtomat #9 is OFF",11,9,0);
004d44  2300              MOVS     r3,#0
004d46  2209              MOVS     r2,#9
004d48  210b              MOVS     r1,#0xb
004d4a  a0d9              ADR      r0,|L1.20656|
004d4c  f7fffffe          BL       snmp_trap_send
                  |L1.19792|
;;;7079   	}
;;;7080   
;;;7081   for(i=0;i<12;i++)
004d50  f04f0000          MOV      r0,#0
                  |L1.19796|
;;;7082   	{
;;;7083   	avt_stat_old[i]=avt_stat[i];
004d54  5c29              LDRB     r1,[r5,r0]
004d56  5431              STRB     r1,[r6,r0]
004d58  f1000001          ADD      r0,r0,#1              ;7081
004d5c  b2c0              UXTB     r0,r0                 ;7081
004d5e  280c              CMP      r0,#0xc               ;7081
004d60  d3f8              BCC      |L1.19796|
                  |L1.19810|
;;;7084   	}
;;;7085   }
004d62  bd70              POP      {r4-r6,pc}
                  |L1.19812|
004d64  e00e              B        |L1.19844|
                  |L1.19814|
004d66  2301              MOVS     r3,#1                 ;7037
004d68  461a              MOV      r2,r3                 ;7037
004d6a  210b              MOVS     r1,#0xb               ;7037
004d6c  a0d5              ADR      r0,|L1.20676|
004d6e  f7fffffe          BL       snmp_trap_send
004d72  e76a              B        |L1.19530|
                  |L1.19828|
004d74  2301              MOVS     r3,#1                 ;7042
004d76  2202              MOVS     r2,#2                 ;7042
004d78  210b              MOVS     r1,#0xb               ;7042
004d7a  a0d7              ADR      r0,|L1.20696|
004d7c  f7fffffe          BL       snmp_trap_send
004d80  e773              B        |L1.19562|
004d82  e006              B        |L1.19858|
                  |L1.19844|
004d84  2301              MOVS     r3,#1                 ;7047
004d86  2203              MOVS     r2,#3                 ;7047
004d88  210b              MOVS     r1,#0xb               ;7047
004d8a  a0d8              ADR      r0,|L1.20716|
004d8c  f7fffffe          BL       snmp_trap_send
004d90  e77b              B        |L1.19594|
                  |L1.19858|
004d92  2301              MOVS     r3,#1                 ;7052
004d94  2204              MOVS     r2,#4                 ;7052
004d96  210b              MOVS     r1,#0xb               ;7052
004d98  a0d9              ADR      r0,|L1.20736|
004d9a  f7fffffe          BL       snmp_trap_send
004d9e  e784              B        |L1.19626|
004da0  e7ff              B        |L1.19874|
                  |L1.19874|
004da2  2301              MOVS     r3,#1                 ;7057
004da4  2205              MOVS     r2,#5                 ;7057
004da6  210b              MOVS     r1,#0xb               ;7057
004da8  a0da              ADR      r0,|L1.20756|
004daa  f7fffffe          BL       snmp_trap_send
004dae  e78c              B        |L1.19658|
                  |L1.19888|
004db0  2301              MOVS     r3,#1                 ;7062
004db2  2206              MOVS     r2,#6                 ;7062
004db4  210b              MOVS     r1,#0xb               ;7062
004db6  a0dc              ADR      r0,|L1.20776|
004db8  f7fffffe          BL       snmp_trap_send
004dbc  e795              B        |L1.19690|
                  |L1.19902|
004dbe  2301              MOVS     r3,#1                 ;7067
004dc0  2207              MOVS     r2,#7                 ;7067
004dc2  210b              MOVS     r1,#0xb               ;7067
004dc4  a0dd              ADR      r0,|L1.20796|
004dc6  f7fffffe          BL       snmp_trap_send
004dca  e79e              B        |L1.19722|
                  |L1.19916|
004dcc  2301              MOVS     r3,#1                 ;7072
004dce  2208              MOVS     r2,#8                 ;7072
004dd0  210b              MOVS     r1,#0xb               ;7072
004dd2  a0df              ADR      r0,|L1.20816|
004dd4  f7fffffe          BL       snmp_trap_send
004dd8  e7a7              B        |L1.19754|
                  |L1.19930|
004dda  2301              MOVS     r3,#1                 ;7077
004ddc  2209              MOVS     r2,#9                 ;7077
004dde  210b              MOVS     r1,#0xb               ;7077
004de0  a0e0              ADR      r0,|L1.20836|
004de2  f7fffffe          BL       snmp_trap_send
004de6  e7b3              B        |L1.19792|
;;;7086   
                          ENDP

                  bat_hndl PROC
;;;7087   //-----------------------------------------------
;;;7088   void bat_hndl(void)
004de8  b570              PUSH     {r4-r6,lr}
;;;7089   {
;;;7090   /*if(mess_find(_MESS_BAT_MASK_ON))
;;;7091   	{
;;;7092   	if(mess_data[0]==_MESS_BAT_MASK_ON)
;;;7093   		{
;;;7094   		char i;
;;;7095   		for(i=0;i<2;i++)
;;;7096   			{
;;;7097   			if(mess_data[1]&(1<<i))
;;;7098   				{
;;;7099   				bat[i]._cnt_to_block=0;
;;;7100        			bat[i]._rel_stat=0;
;;;7101        			}
;;;7102   			}
;;;7103   		}
;;;7104   	}
;;;7105   if(mess_find(_MESS_BAT_MASK_OFF))
;;;7106   	{		
;;;7107   	if(mess_data[0]==_MESS_BAT_MASK_OFF)
;;;7108   		{
;;;7109   		char i;
;;;7110   		for(i=0;i<2;i++)
;;;7111   			{
;;;7112   			if((mess_data[1]&(1<<i)) && (bat[i]._cnt_to_block==0) && (bat[i]._rel_stat==0))
;;;7113   				{
;;;7114   				bat[i]._cnt_to_block=20;
;;;7115   				bat[i]._rel_stat=1;
;;;7116        			}
;;;7117   			}
;;;7118   		
;;;7119   		}		
;;;7120   	}*/
;;;7121   
;;;7122   if(mess_find_unvol(MESS2BAT_HNDL))
004dea  20c8              MOVS     r0,#0xc8
004dec  f7fffffe          BL       mess_find_unvol
;;;7123   	{ 
;;;7124   	char i;
;;;7125   	
;;;7126   	if(mess_data[0]==PARAM_BAT_ALL_OFF_AFTER_2SEC)
;;;7127   		{
;;;7128   		for(i=0;i<MAX_NUM_OF_BAT;i++)
;;;7129   			{
;;;7130   			if(bat[i]._cnt_to_block<50)bat[i]._cnt_to_block++;
004df0  49e1              LDR      r1,|L1.20856|
004df2  2200              MOVS     r2,#0                 ;7128
004df4  b3a8              CBZ      r0,|L1.20066|
004df6  4be1              LDR      r3,|L1.20860|
;;;7131   			}
;;;7132   		}
;;;7133   
;;;7134   	else if(mess_data[0]==PARAM_BAT_MASK_OFF_AFTER_2SEC)
;;;7135   		{
;;;7136   		for(i=0;i<MAX_NUM_OF_BAT;i++)
;;;7137   			{
;;;7138   			if(mess_data[1]&(1<<i))
004df8  2401              MOVS     r4,#1
004dfa  6818              LDR      r0,[r3,#0]            ;7126  ; mess_data
004dfc  28c9              CMP      r0,#0xc9              ;7126
004dfe  d01c              BEQ      |L1.20026|
004e00  28ca              CMP      r0,#0xca              ;7134
004e02  d02f              BEQ      |L1.20068|
;;;7139   				{
;;;7140   				if(bat[i]._cnt_to_block<50) bat[i]._cnt_to_block++;
;;;7141   				}
;;;7142   			else bat[i]._cnt_to_block=0;
;;;7143   			}
;;;7144   		}
;;;7145   	else 
;;;7146   	 	{
;;;7147   		for(i=0;i<MAX_NUM_OF_BAT;i++)
004e04  4610              MOV      r0,r2
                  |L1.19974|
;;;7148   			{
;;;7149   			bat[i]._cnt_to_block=0;
004e06  eb000340          ADD      r3,r0,r0,LSL #1
004e0a  eb031300          ADD      r3,r3,r0,LSL #4
004e0e  f8012023          STRB     r2,[r1,r3,LSL #2]
004e12  f1000001          ADD      r0,r0,#1              ;7147
004e16  b2c0              UXTB     r0,r0                 ;7147
004e18  2802              CMP      r0,#2                 ;7147
004e1a  d3f4              BCC      |L1.19974|
                  |L1.19996|
;;;7150   			}
;;;7151   
;;;7152   		}
;;;7153   	for(i=0;i<MAX_NUM_OF_BAT;i++)
004e1c  f04f0000          MOV      r0,#0
                  |L1.20000|
;;;7154   		{
;;;7155   		if(bat[i]._cnt_to_block>20)bat[i]._rel_stat=1;
004e20  eb000340          ADD      r3,r0,r0,LSL #1
004e24  eb031300          ADD      r3,r3,r0,LSL #4
004e28  f8115023          LDRB     r5,[r1,r3,LSL #2]
004e2c  2d14              CMP      r5,#0x14
004e2e  d939              BLS      |L1.20132|
004e30  eb010383          ADD      r3,r1,r3,LSL #2
004e34  f883403c          STRB     r4,[r3,#0x3c]
004e38  e038              B        |L1.20140|
                  |L1.20026|
004e3a  f04f0000          MOV      r0,#0                 ;7128
                  |L1.20030|
004e3e  eb000340          ADD      r3,r0,r0,LSL #1       ;7130
004e42  eb031500          ADD      r5,r3,r0,LSL #4       ;7130
004e46  f8113025          LDRB     r3,[r1,r5,LSL #2]     ;7130
004e4a  2b32              CMP      r3,#0x32              ;7130
004e4c  d203              BCS      |L1.20054|
004e4e  f1030301          ADD      r3,r3,#1              ;7130
004e52  f8013025          STRB     r3,[r1,r5,LSL #2]     ;7130
                  |L1.20054|
004e56  f1000001          ADD      r0,r0,#1              ;7128
004e5a  b2c0              UXTB     r0,r0                 ;7128
004e5c  2802              CMP      r0,#2                 ;7128
004e5e  d3ee              BCC      |L1.20030|
004e60  e7dc              B        |L1.19996|
                  |L1.20066|
004e62  e029              B        |L1.20152|
                  |L1.20068|
004e64  f04f0000          MOV      r0,#0                 ;7136
004e68  685e              LDR      r6,[r3,#4]            ;7138
                  |L1.20074|
004e6a  fa04f300          LSL      r3,r4,r0              ;7138
004e6e  421e              TST      r6,r3                 ;7138
004e70  d00c              BEQ      |L1.20108|
004e72  eb000340          ADD      r3,r0,r0,LSL #1       ;7140
004e76  eb031500          ADD      r5,r3,r0,LSL #4       ;7140
004e7a  f8113025          LDRB     r3,[r1,r5,LSL #2]     ;7140
004e7e  2b32              CMP      r3,#0x32              ;7140
004e80  d20a              BCS      |L1.20120|
004e82  f1030301          ADD      r3,r3,#1              ;7140
004e86  f8013025          STRB     r3,[r1,r5,LSL #2]     ;7140
004e8a  e005              B        |L1.20120|
                  |L1.20108|
004e8c  eb000340          ADD      r3,r0,r0,LSL #1       ;7142
004e90  eb031300          ADD      r3,r3,r0,LSL #4       ;7142
004e94  f8012023          STRB     r2,[r1,r3,LSL #2]     ;7142
                  |L1.20120|
004e98  f1000001          ADD      r0,r0,#1              ;7136
004e9c  b2c0              UXTB     r0,r0                 ;7136
004e9e  2802              CMP      r0,#2                 ;7136
004ea0  d3e3              BCC      |L1.20074|
004ea2  e7bb              B        |L1.19996|
                  |L1.20132|
;;;7156   		else bat[i]._rel_stat=0;
004ea4  eb010383          ADD      r3,r1,r3,LSL #2
004ea8  f883203c          STRB     r2,[r3,#0x3c]
                  |L1.20140|
004eac  f1000001          ADD      r0,r0,#1              ;7153
004eb0  b2c0              UXTB     r0,r0                 ;7153
004eb2  2802              CMP      r0,#2                 ;7153
004eb4  d3b4              BCC      |L1.20000|
;;;7157   		}
;;;7158   
;;;7159   	}
;;;7160   
;;;7161   else 
;;;7162   	{
;;;7163   	char i;
;;;7164   	for(i=0;i<MAX_NUM_OF_BAT;i++)
;;;7165   		{
;;;7166   		bat[i]._cnt_to_block=0;
;;;7167   		bat[i]._rel_stat=0;
;;;7168   		}
;;;7169   
;;;7170   	}
;;;7171   
;;;7172   /*if(mess_find_unvol(MESS2BAT_HNDL1))
;;;7173   	{
;;;7174   	if(PARAM_BAT_ON)
;;;7175   		{
;;;7176   		char i;
;;;7177   		for(i=0;i<MAX_NUM_OF_BAT;i++)
;;;7178   			{
;;;7179   			if(mess_data[1]&(1<<i))
;;;7180   				{
;;;7181   				bat[i]._cnt_to_block=0;
;;;7182   				bat[i]._rel_stat=0;
;;;7183   				}
;;;7184   			}
;;;7185   		}
;;;7186   	} */
;;;7187   }
004eb6  e754              B        |L1.19810|
                  |L1.20152|
004eb8  f04f0000          MOV      r0,#0                 ;7164
                  |L1.20156|
004ebc  eb000340          ADD      r3,r0,r0,LSL #1       ;7166
004ec0  eb031300          ADD      r3,r3,r0,LSL #4       ;7166
004ec4  f8012023          STRB     r2,[r1,r3,LSL #2]     ;7166
004ec8  eb010383          ADD      r3,r1,r3,LSL #2       ;7167
004ecc  f883203c          STRB     r2,[r3,#0x3c]         ;7167
004ed0  f1000001          ADD      r0,r0,#1              ;7164
004ed4  b2c0              UXTB     r0,r0                 ;7164
004ed6  2802              CMP      r0,#2                 ;7164
004ed8  d3f0              BCC      |L1.20156|
004eda  e742              B        |L1.19810|
;;;7188   
                          ENDP

                  bat_drv PROC
;;;7826   //-----------------------------------------------
;;;7827   void bat_drv(char in)
004edc  e92d4ffe          PUSH     {r1-r11,lr}
;;;7828   {
004ee0  4605              MOV      r5,r0
;;;7829   unsigned short /*tempUS,*/tempUS_;
;;;7830   unsigned long tempUL,tempUL_;
;;;7831   unsigned short b_zar;
;;;7832   //static unsigned short time_cnt[2];
;;;7833   
;;;7834   
;;;7835   
;;;7836   if(cntrl_stat_blok_cnt_plus[in])cntrl_stat_blok_cnt_plus[in]--;
004ee2  49a7              LDR      r1,|L1.20864|
004ee4  f9310015          LDRSH    r0,[r1,r5,LSL #1]
004ee8  b118              CBZ      r0,|L1.20210|
004eea  f1a00001          SUB      r0,r0,#1
004eee  f8210015          STRH     r0,[r1,r5,LSL #1]
                  |L1.20210|
;;;7837   if(cntrl_stat_blok_cnt_minus[in])cntrl_stat_blok_cnt_minus[in]--;
004ef2  4aa3              LDR      r2,|L1.20864|
004ef4  1d12              ADDS     r2,r2,#4
004ef6  f9320015          LDRSH    r0,[r2,r5,LSL #1]
004efa  b118              CBZ      r0,|L1.20228|
004efc  f1a00001          SUB      r0,r0,#1
004f00  f8220015          STRH     r0,[r2,r5,LSL #1]
                  |L1.20228|
;;;7838   
;;;7839   
;;;7840   if(bat[in]._Ib>IZMAX) cntrl_stat_blok_cnt_plus[in]=100;
004f04  eb050045          ADD      r0,r5,r5,LSL #1
004f08  4b9b              LDR      r3,|L1.20856|
004f0a  eb001005          ADD      r0,r0,r5,LSL #4
004f0e  eb030480          ADD      r4,r3,r0,LSL #2
004f12  4b9c              LDR      r3,|L1.20868|
004f14  9002              STR      r0,[sp,#8]
004f16  f9b40008          LDRSH    r0,[r4,#8]
004f1a  f9b36000          LDRSH    r6,[r3,#0]  ; IZMAX
004f1e  2364              MOVS     r3,#0x64
004f20  42b0              CMP      r0,r6
004f22  dd01              BLE      |L1.20264|
004f24  f8213015          STRH     r3,[r1,r5,LSL #1]
                  |L1.20264|
;;;7841   if(bat[in]._Ib<0)     cntrl_stat_blok_cnt_minus[in]=100;
004f28  2800              CMP      r0,#0
004f2a  da01              BGE      |L1.20272|
004f2c  f8223015          STRH     r3,[r2,r5,LSL #1]
                  |L1.20272|
;;;7842   
;;;7843   if(cntrl_stat_blok_cnt_plus[in] && cntrl_stat_blok_cnt_minus[in])
;;;7844        {
;;;7845        if(!cntrl_stat_blok_cnt_)
004f30  4893              LDR      r0,|L1.20864|
004f32  f8313015          LDRH     r3,[r1,r5,LSL #1]     ;7843
004f36  38b4              SUBS     r0,r0,#0xb4
004f38  2700              MOVS     r7,#0
004f3a  b14b              CBZ      r3,|L1.20304|
004f3c  f8323015          LDRH     r3,[r2,r5,LSL #1]     ;7843
004f40  b133              CBZ      r3,|L1.20304|
004f42  f8b03072          LDRH     r3,[r0,#0x72]  ; cntrl_stat_blok_cnt_
004f46  b1a3              CBZ      r3,|L1.20338|
;;;7846             {
;;;7847             cntrl_stat_blok_cnt_=600; 
;;;7848             cntrl_stat_blok_cnt_plus[in]=0;
;;;7849             cntrl_stat_blok_cnt_minus[in]=0;
;;;7850             }
;;;7851        else cntrl_stat_blok_cnt=3000;
004f48  f64031b8          MOV      r1,#0xbb8
004f4c  f8a01070          STRH     r1,[r0,#0x70]
                  |L1.20304|
;;;7852        }
;;;7853   cntrl_stat_blok_cnt=0;
004f50  f8a07070          STRH     r7,[r0,#0x70]
;;;7854   
;;;7855   if(++(bat[in]._time_cnt)>=10)
004f54  f894003e          LDRB     r0,[r4,#0x3e]
004f58  1c40              ADDS     r0,r0,#1
004f5a  b2c0              UXTB     r0,r0
004f5c  f884003e          STRB     r0,[r4,#0x3e]
004f60  280a              CMP      r0,#0xa
004f62  d301              BCC      |L1.20328|
;;;7856   	{
;;;7857   	bat[in]._time_cnt=0;
004f64  f884703e          STRB     r7,[r4,#0x3e]
                  |L1.20328|
;;;7858   	//bat[in]._zar_cnt++;
;;;7859   	}
;;;7860   
;;;7861   if(main_10Hz_cnt==50)
004f68  4e87              LDR      r6,|L1.20872|
004f6a  8830              LDRH     r0,[r6,#0]  ; main_10Hz_cnt
004f6c  2832              CMP      r0,#0x32
004f6e  d009              BEQ      |L1.20356|
004f70  e017              B        |L1.20386|
                  |L1.20338|
004f72  f44f7316          MOV      r3,#0x258             ;7847
004f76  f8a03072          STRH     r3,[r0,#0x72]         ;7847
004f7a  f8217015          STRH     r7,[r1,r5,LSL #1]     ;7848
004f7e  f8227015          STRH     r7,[r2,r5,LSL #1]     ;7849
004f82  e7e5              B        |L1.20304|
                  |L1.20356|
;;;7862   	{
;;;7863   	if(!bat[in]._rel_stat)
004f84  f894003c          LDRB     r0,[r4,#0x3c]
004f88  b958              CBNZ     r0,|L1.20386|
;;;7864   		{
;;;7865   		
;;;7866   		if(bat[in]._Ub<80) 
004f8a  f9b40002          LDRSH    r0,[r4,#2]
004f8e  2850              CMP      r0,#0x50
004f90  da07              BGE      |L1.20386|
;;;7867   			{
;;;7868   			
;;;7869   			if(!(bat[in]._av&1))
004f92  f894003d          LDRB     r0,[r4,#0x3d]
004f96  07c0              LSLS     r0,r0,#31
004f98  d103              BNE      |L1.20386|
;;;7870   				{
;;;7871   				avar_bat_hndl(in,1);
004f9a  2101              MOVS     r1,#1
004f9c  4628              MOV      r0,r5
004f9e  f7fffffe          BL       avar_bat_hndl
                  |L1.20386|
;;;7872   				//if(in==0)plazma_bat++;
;;;7873   				}
;;;7874   			}				
;;;7875   
;;;7876   		}
;;;7877   	}
;;;7878   
;;;7879   if(main_10Hz_cnt>200)
004fa2  f9b60000          LDRSH    r0,[r6,#0]  ; main_10Hz_cnt
;;;7880   	{
;;;7881   	if(abs(bat[in]._Ib)>IKB) 
004fa6  4e79              LDR      r6,|L1.20876|
004fa8  28c8              CMP      r0,#0xc8              ;7879
004faa  dd0f              BLE      |L1.20428|
004fac  f9b40008          LDRSH    r0,[r4,#8]
004fb0  f7fffffe          BL       abs
004fb4  f9b61000          LDRSH    r1,[r6,#0]  ; IKB
004fb8  4288              CMP      r0,r1
004fba  dd07              BLE      |L1.20428|
;;;7882   		{
;;;7883   		if((bat[in]._av&1))avar_bat_hndl(in,0);
004fbc  f894003d          LDRB     r0,[r4,#0x3d]
004fc0  07c0              LSLS     r0,r0,#31
004fc2  d003              BEQ      |L1.20428|
004fc4  2100              MOVS     r1,#0
004fc6  4628              MOV      r0,r5
004fc8  f7fffffe          BL       avar_bat_hndl
                  |L1.20428|
;;;7884   		}
;;;7885   	}
;;;7886   
;;;7887   #ifdef APSENERGIA
;;;7888   //if(bat[in]._Ib>(-IKB))
;;;7889   
;;;7890   
;;;7891   #endif
;;;7892   
;;;7893   if(bat[in]._Ib>(-IKB))
004fcc  f9b61000          LDRSH    r1,[r6,#0]  ; IKB
004fd0  f9b40008          LDRSH    r0,[r4,#8]
004fd4  4249              RSBS     r1,r1,#0
004fd6  4288              CMP      r0,r1
004fd8  dd0e              BLE      |L1.20472|
;;;7894   	{
;;;7895   	if(bat[in]._cnt_wrk<10)
004fda  7b60              LDRB     r0,[r4,#0xd]
004fdc  280a              CMP      r0,#0xa
004fde  d20c              BCS      |L1.20474|
;;;7896   		{
;;;7897   		bat[in]._cnt_wrk++;
004fe0  f1000001          ADD      r0,r0,#1
004fe4  b2c0              UXTB     r0,r0
004fe6  7360              STRB     r0,[r4,#0xd]
;;;7898   		if((bat[in]._cnt_wrk>=10)&&(bat[in]._wrk)) 
004fe8  280a              CMP      r0,#0xa
004fea  d307              BCC      |L1.20476|
004fec  7ba0              LDRB     r0,[r4,#0xe]
004fee  2800              CMP      r0,#0
004ff0  d004              BEQ      |L1.20476|
;;;7899   			{
;;;7900   			bat[in]._wrk=0;
004ff2  73a7              STRB     r7,[r4,#0xe]
;;;7901   			//beep_init(0x7L,'O');
;;;7902   			//wrk_mem_hndl(0);
;;;7903   			wrk_mem_hndl(in);
004ff4  4628              MOV      r0,r5
004ff6  e0cb              B        |L1.20880|
                  |L1.20472|
004ff8  e0d1              B        |L1.20894|
                  |L1.20474|
004ffa  e0cc              B        |L1.20886|
                  |L1.20476|
004ffc  e111              B        |L1.21026|
004ffe  0000              DCW      0x0000
                  |L1.20480|
                          DCD      eb2_data_short
                  |L1.20484|
                          DCD      avt_stat
                  |L1.20488|
                          DCD      avt_stat_old
                  |L1.20492|
                          DCD      NUMAVT
                  |L1.20496|
005010  4176746f          DCB      "Avtomat #1 is OFF",0
005014  6d617420
005018  23312069
00501c  73204f46
005020  4600    
005022  00                DCB      0
005023  00                DCB      0
                  |L1.20516|
005024  4176746f          DCB      "Avtomat #2 is OFF",0
005028  6d617420
00502c  23322069
005030  73204f46
005034  4600    
005036  00                DCB      0
005037  00                DCB      0
                  |L1.20536|
005038  4176746f          DCB      "Avtomat #3 is OFF",0
00503c  6d617420
005040  23332069
005044  73204f46
005048  4600    
00504a  00                DCB      0
00504b  00                DCB      0
                  |L1.20556|
00504c  4176746f          DCB      "Avtomat #4 is OFF",0
005050  6d617420
005054  23342069
005058  73204f46
00505c  4600    
00505e  00                DCB      0
00505f  00                DCB      0
                  |L1.20576|
005060  4176746f          DCB      "Avtomat #5 is OFF",0
005064  6d617420
005068  23352069
00506c  73204f46
005070  4600    
005072  00                DCB      0
005073  00                DCB      0
                  |L1.20596|
005074  4176746f          DCB      "Avtomat #6 is OFF",0
005078  6d617420
00507c  23362069
005080  73204f46
005084  4600    
005086  00                DCB      0
005087  00                DCB      0
                  |L1.20616|
005088  4176746f          DCB      "Avtomat #7 is OFF",0
00508c  6d617420
005090  23372069
005094  73204f46
005098  4600    
00509a  00                DCB      0
00509b  00                DCB      0
                  |L1.20636|
00509c  4176746f          DCB      "Avtomat #8 is OFF",0
0050a0  6d617420
0050a4  23382069
0050a8  73204f46
0050ac  4600    
0050ae  00                DCB      0
0050af  00                DCB      0
                  |L1.20656|
0050b0  4176746f          DCB      "Avtomat #9 is OFF",0
0050b4  6d617420
0050b8  23392069
0050bc  73204f46
0050c0  4600    
0050c2  00                DCB      0
0050c3  00                DCB      0
                  |L1.20676|
0050c4  4176746f          DCB      "Avtomat #1 is ON ",0
0050c8  6d617420
0050cc  23312069
0050d0  73204f4e
0050d4  2000    
0050d6  00                DCB      0
0050d7  00                DCB      0
                  |L1.20696|
0050d8  4176746f          DCB      "Avtomat #2 is ON ",0
0050dc  6d617420
0050e0  23322069
0050e4  73204f4e
0050e8  2000    
0050ea  00                DCB      0
0050eb  00                DCB      0
                  |L1.20716|
0050ec  4176746f          DCB      "Avtomat #3 is ON ",0
0050f0  6d617420
0050f4  23332069
0050f8  73204f4e
0050fc  2000    
0050fe  00                DCB      0
0050ff  00                DCB      0
                  |L1.20736|
005100  4176746f          DCB      "Avtomat #4 is ON ",0
005104  6d617420
005108  23342069
00510c  73204f4e
005110  2000    
005112  00                DCB      0
005113  00                DCB      0
                  |L1.20756|
005114  4176746f          DCB      "Avtomat #5 is ON ",0
005118  6d617420
00511c  23352069
005120  73204f4e
005124  2000    
005126  00                DCB      0
005127  00                DCB      0
                  |L1.20776|
005128  4176746f          DCB      "Avtomat #6 is ON ",0
00512c  6d617420
005130  23362069
005134  73204f4e
005138  2000    
00513a  00                DCB      0
00513b  00                DCB      0
                  |L1.20796|
00513c  4176746f          DCB      "Avtomat #7 is ON ",0
005140  6d617420
005144  23372069
005148  73204f4e
00514c  2000    
00514e  00                DCB      0
00514f  00                DCB      0
                  |L1.20816|
005150  4176746f          DCB      "Avtomat #8 is ON ",0
005154  6d617420
005158  23382069
00515c  73204f4e
005160  2000    
005162  00                DCB      0
005163  00                DCB      0
                  |L1.20836|
005164  4176746f          DCB      "Avtomat #9 is ON ",0
005168  6d617420
00516c  23392069
005170  73204f4e
005174  2000    
005176  00                DCB      0
005177  00                DCB      0
                  |L1.20856|
                          DCD      bat
                  |L1.20860|
                          DCD      mess_data
                  |L1.20864|
                          DCD      ||area_number.25||+0xb4
                  |L1.20868|
                          DCD      IZMAX
                  |L1.20872|
                          DCD      main_10Hz_cnt
                  |L1.20876|
                          DCD      IKB
                  |L1.20880|
005190  f7fffffe          BL       wrk_mem_hndl
005194  e069              B        |L1.21098|
                  |L1.20886|
;;;7904   			//plazma++;
;;;7905   			}
;;;7906   		}
;;;7907   	else bat[in]._cnt_wrk=10;	
005196  f04f000a          MOV      r0,#0xa
00519a  7360              STRB     r0,[r4,#0xd]
00519c  e065              B        |L1.21098|
                  |L1.20894|
;;;7908   	}	
;;;7909   
;;;7910   else if(bat[in]._Ib<(-IKB))
00519e  da64              BGE      |L1.21098|
;;;7911   	{
;;;7912   	if(bat[in]._cnt_wrk)
0051a0  7b60              LDRB     r0,[r4,#0xd]
0051a2  b3f0              CBZ      r0,|L1.21026|
;;;7913   		{
;;;7914   		bat[in]._cnt_wrk--;
0051a4  f1a00001          SUB      r0,r0,#1
0051a8  b2c0              UXTB     r0,r0
0051aa  7360              STRB     r0,[r4,#0xd]
;;;7915   		if((bat[in]._cnt_wrk==0)&&(bat[in]._wrk==0)) 
0051ac  bbc8              CBNZ     r0,|L1.21026|
0051ae  7ba0              LDRB     r0,[r4,#0xe]
0051b0  bbb8              CBNZ     r0,|L1.21026|
;;;7916   			{
;;;7917   			bat[in]._wrk=1;
0051b2  f04f0001          MOV      r0,#1
0051b6  73a0              STRB     r0,[r4,#0xe]
;;;7918   
;;;7919   				{
;;;7920   				char temp;
;;;7921   				signed short temp_temp;
;;;7922   				temp_temp=bat[in]._u_old[((bat_u_old_cnt+1)&0x07)];
0051b8  48ff              LDR      r0,|L1.21944|
0051ba  8800              LDRH     r0,[r0,#0]  ; bat_u_old_cnt
0051bc  f1000001          ADD      r0,r0,#1
0051c0  f0000007          AND      r0,r0,#7
0051c4  eb040040          ADD      r0,r4,r0,LSL #1
0051c8  8c00              LDRH     r0,[r0,#0x20]
0051ca  9000              STR      r0,[sp,#0]
;;;7923   			 
;;;7924   				temp=LPC_RTC->YEAR;
0051cc  4efb              LDR      r6,|L1.21948|
0051ce  8bb0              LDRH     r0,[r6,#0x1c]
0051d0  9001              STR      r0,[sp,#4]
;;;7925   				gran_char((signed char*)&temp,1,99);
0051d2  f04f0263          MOV      r2,#0x63
0051d6  f04f0101          MOV      r1,#1
0051da  a801              ADD      r0,sp,#4
0051dc  f7fffffe          BL       gran_char
;;;7926   				*((char*)(&(bat[in]._wrk_date[0])))=temp;
0051e0  f104041c          ADD      r4,r4,#0x1c
0051e4  f89d0004          LDRB     r0,[sp,#4]
0051e8  7620              STRB     r0,[r4,#0x18]
;;;7927   			
;;;7928   				temp=LPC_RTC->MONTH;
0051ea  7e30              LDRB     r0,[r6,#0x18]
0051ec  9001              STR      r0,[sp,#4]
;;;7929   				gran_char((signed char*)&temp,1,12);
0051ee  f04f020c          MOV      r2,#0xc
0051f2  f04f0101          MOV      r1,#1
0051f6  a801              ADD      r0,sp,#4
0051f8  f7fffffe          BL       gran_char
;;;7930   				*(((char*)(&(bat[in]._wrk_date[0])))+1)=temp;
0051fc  f89d0004          LDRB     r0,[sp,#4]
005200  7660              STRB     r0,[r4,#0x19]
;;;7931   			
;;;7932   				temp=LPC_RTC->DOM;
005202  7b30              LDRB     r0,[r6,#0xc]
005204  9001              STR      r0,[sp,#4]
;;;7933   				gran_char((signed char*)&temp,1,31);
005206  221f              MOVS     r2,#0x1f
005208  2101              MOVS     r1,#1
00520a  a801              ADD      r0,sp,#4
00520c  f7fffffe          BL       gran_char
;;;7934   				*(((char*)(&(bat[in]._wrk_date[0])))+2)=temp;			
005210  f89d0004          LDRB     r0,[sp,#4]
005214  76a0              STRB     r0,[r4,#0x1a]
;;;7935   				
;;;7936   				*(((char*)(&(bat[in]._wrk_date[0])))+3)=*((char*)&temp_temp);
005216  f89d0000          LDRB     r0,[sp,#0]
00521a  76e0              STRB     r0,[r4,#0x1b]
;;;7937   
;;;7938   				temp=LPC_RTC->HOUR;
00521c  7a30              LDRB     r0,[r6,#8]
00521e  9001              STR      r0,[sp,#4]
;;;7939   				gran_char((signed char*)&temp,0,23);
005220  e000              B        |L1.21028|
                  |L1.21026|
005222  e022              B        |L1.21098|
                  |L1.21028|
005224  2217              MOVS     r2,#0x17
005226  2100              MOVS     r1,#0
005228  a801              ADD      r0,sp,#4
00522a  f7fffffe          BL       gran_char
;;;7940   				*((char*)(&(bat[in]._wrk_date[1])))=temp;
00522e  f89d0004          LDRB     r0,[sp,#4]
005232  7720              STRB     r0,[r4,#0x1c]
;;;7941                  	
;;;7942   				temp=LPC_RTC->MIN;
005234  7930              LDRB     r0,[r6,#4]
005236  9001              STR      r0,[sp,#4]
;;;7943   				gran_char((signed char*)&temp,0,59);
005238  223b              MOVS     r2,#0x3b
00523a  2100              MOVS     r1,#0
00523c  a801              ADD      r0,sp,#4
00523e  f7fffffe          BL       gran_char
;;;7944   				*(((char*)(&(bat[in]._wrk_date[1])))+1)=temp;
005242  f89d0004          LDRB     r0,[sp,#4]
005246  7760              STRB     r0,[r4,#0x1d]
;;;7945   	          
;;;7946   				temp=LPC_RTC->SEC;
005248  7830              LDRB     r0,[r6,#0]
00524a  9001              STR      r0,[sp,#4]
;;;7947   				gran_char((signed char*)&temp,0,59);
00524c  223b              MOVS     r2,#0x3b
00524e  2100              MOVS     r1,#0
005250  a801              ADD      r0,sp,#4
005252  f7fffffe          BL       gran_char
;;;7948   				*(((char*)(&(bat[in]._wrk_date[1])))+2)=temp;
005256  f89d0004          LDRB     r0,[sp,#4]
00525a  77a0              STRB     r0,[r4,#0x1e]
;;;7949   			
;;;7950   				*(((char*)(&(bat[in]._wrk_date[1])))+3)=*(((char*)&temp_temp)+1);
00525c  f89d0001          LDRB     r0,[sp,#1]
005260  77e0              STRB     r0,[r4,#0x1f]
;;;7951   				bat[in]._Iintegr=0;		//Счетчик десятков милиамперсекунд
005262  8027              STRH     r7,[r4,#0]
;;;7952   				bat[in]._Iintegr_=0;	//Счетчик сотен милиамперчасов
005264  8067              STRH     r7,[r4,#2]
005266  f1a4041c          SUB      r4,r4,#0x1c
                  |L1.21098|
;;;7953   				}
;;;7954   	
;;;7955   			}
;;;7956   
;;;7957   		}
;;;7958   	else bat[in]._cnt_wrk=0;	 
;;;7959   	
;;;7960   	}					
;;;7961   
;;;7962   /*
;;;7963   if(Ibat>=(-IKB))
;;;7964   	{
;;;7965   	if(cnt_wrk<10)
;;;7966   		{
;;;7967   		cnt_wrk++;
;;;7968   		if((cnt_wrk>=10)&&(wrk!=wrkOFF)) 
;;;7969   			{
;;;7970   			wrk=wrkOFF;
;;;7971   			//beep_init(0x7L,'O');
;;;7972   			wrk_mem_hndl(ibat_integr);
;;;7973   			}
;;;7974   		}
;;;7975   	else cnt_wrk=10;	
;;;7976   	}	
;;;7977   
;;;7978   else if((Ibat<(-IKB))&&(spc_stat!=spc_KE))
;;;7979   	{
;;;7980   	if(cnt_wrk)
;;;7981   		{
;;;7982   		cnt_wrk--;
;;;7983   		if((cnt_wrk==0)&&(wrk!=wrkON)) 
;;;7984   			{
;;;7985   			char temp;
;;;7986   			signed short temp_temp;
;;;7987   			temp_temp=ubat_old[((ubat_old_cnt+1)&0x07)];
;;;7988   			 
;;;7989   			wrk=wrkON;
;;;7990   			
;;;7991   			temp=_year;
;;;7992   			gran_char(&temp,1,99);
;;;7993   			*((char*)(&(wrk_date[0])))=temp;
;;;7994   			
;;;7995   			temp=_month;
;;;7996   			gran_char(&temp,1,12);
;;;7997   			*(((char*)(&(wrk_date[0])))+1)=temp;
;;;7998   			
;;;7999   			temp=_date;
;;;8000   			gran_char(&temp,1,31);
;;;8001   			*(((char*)(&(wrk_date[0])))+2)=temp;			
;;;8002   				
;;;8003   			*(((char*)(&(wrk_date[0])))+3)=*((char*)&temp_temp);
;;;8004   
;;;8005   			temp=_hour;
;;;8006   			gran_char(&temp,0,23);
;;;8007   			*((char*)(&(wrk_date[1])))=temp;
;;;8008                  
;;;8009   			temp=_min;
;;;8010   			gran_char(&temp,0,59);
;;;8011   			*(((char*)(&(wrk_date[1])))+1)=temp;
;;;8012   	          
;;;8013   			temp=_sec;
;;;8014   			gran_char(&temp,0,59);
;;;8015   			*(((char*)(&(wrk_date[1])))+2)=temp;
;;;8016   			
;;;8017   			*(((char*)(&(wrk_date[1])))+3)=*(((char*)&temp_temp)+1);
;;;8018   
;;;8019   			
;;;8020   			//beep_init(0xFL,'O'); 
;;;8021   			ibat_integr=0;
;;;8022   			ibat_integr_=0;
;;;8023   			}
;;;8024   		}
;;;8025   	else cnt_wrk=0;	 
;;;8026   	
;;;8027   	}
;;;8028   if(wrk==wrkON)
;;;8029   	{
;;;8030   	ibat_integr_+=-Ibat;
;;;8031   	if(ibat_integr_>=SEC_IN_HOUR*10L)
;;;8032   		{
;;;8033   		ibat_integr_-=SEC_IN_HOUR*10L;
;;;8034   		ibat_integr++;
;;;8035   		}
;;;8036   	}
;;;8037   
;;;8038   */
;;;8039   
;;;8040   
;;;8041   /*if(bat[in]._cnt_to_block)
;;;8042   	{
;;;8043   	bat[in]._cnt_to_block--;
;;;8044   	if(!(bat[in]._cnt_to_block))
;;;8045   		{
;;;8046   		//bat[in]._rel_stat=1;
;;;8047   		}
;;;8048   	}
;;;8049   */
;;;8050   
;;;8051   
;;;8052   
;;;8053   
;;;8054   //unsigned int tempUI,tempUI_;
;;;8055   //unsigned int b_zar; 
;;;8056   //char i;
;;;8057   //Ibat[0]=5000;                     
;;;8058   
;;;8059   
;;;8060                               
;;;8061   if(bat[in]._time_cnt==0)
;;;8062   	{
;;;8063   	bat[in]._zar_cnt+=(signed long)bat[in]._Ib;
;;;8064   	
;;;8065   	if(bat[in]._zar_cnt>=AH_CONSTANT)
00526a  f64848a0          MOV      r8,#0x8ca0
00526e  f894003e          LDRB     r0,[r4,#0x3e]         ;8061
005272  bba8              CBNZ     r0,|L1.21216|
005274  f9b41008          LDRSH    r1,[r4,#8]            ;8063
005278  6960              LDR      r0,[r4,#0x14]         ;8063
00527a  4408              ADD      r0,r0,r1              ;8063
00527c  6160              STR      r0,[r4,#0x14]         ;8063
;;;8066   		{
;;;8067   		if(BAT_C_REAL[in]==0x5555) tempUS_=BAT_C_NOM[in];
;;;8068   		else tempUS_=BAT_C_REAL[in];
;;;8069   		
;;;8070   		b_zar=lc640_read_int(ADR_EE_BAT_ZAR_CNT[in]);
00527e  f8df9340          LDR      r9,|L1.21952|
005282  f8dfa340          LDR      r10,|L1.21956|
005286  f2455b55          MOV      r11,#0x5555           ;8067
00528a  4540              CMP      r0,r8                 ;8065
00528c  db29              BLT      |L1.21218|
00528e  f93a0015          LDRSH    r0,[r10,r5,LSL #1]    ;8067
005292  4558              CMP      r0,r11                ;8067
005294  d103              BNE      |L1.21150|
005296  48cc              LDR      r0,|L1.21960|
005298  f8306015          LDRH     r6,[r0,r5,LSL #1]     ;8067
00529c  e001              B        |L1.21154|
                  |L1.21150|
00529e  f83a6015          LDRH     r6,[r10,r5,LSL #1]    ;8068
                  |L1.21154|
0052a2  f8390015          LDRH     r0,[r9,r5,LSL #1]
0052a6  f7fffffe          BL       lc640_read_int
0052aa  b280              UXTH     r0,r0
;;;8071   
;;;8072   		if(b_zar<(tempUS_/**10*/))
0052ac  42b0              CMP      r0,r6
0052ae  d20e              BCS      |L1.21198|
;;;8073   			{
;;;8074   			bat[in]._zar_cnt-=AH_CONSTANT;
0052b0  6961              LDR      r1,[r4,#0x14]
0052b2  f5a14100          SUB      r1,r1,#0x8000
0052b6  f5a1614a          SUB      r1,r1,#0xca0
0052ba  6161              STR      r1,[r4,#0x14]
;;;8075   
;;;8076   			lc640_write_int(ADR_EE_BAT_ZAR_CNT[in],b_zar+1);
0052bc  f9392015          LDRSH    r2,[r9,r5,LSL #1]
0052c0  f1000001          ADD      r0,r0,#1
0052c4  b201              SXTH     r1,r0
0052c6  4610              MOV      r0,r2
0052c8  f7fffffe          BL       lc640_write_int
0052cc  e032              B        |L1.21300|
                  |L1.21198|
;;;8077   			}
;;;8078   		else if(b_zar>(tempUS_/**10*/))  
0052ce  d931              BLS      |L1.21300|
;;;8079   			{
;;;8080   			lc640_write_int(ADR_EE_BAT_ZAR_CNT[in],tempUS_);
0052d0  f9390015          LDRSH    r0,[r9,r5,LSL #1]
0052d4  b231              SXTH     r1,r6
0052d6  f7fffffe          BL       lc640_write_int
;;;8081   			bat[in]._zar_cnt=AH_CONSTANT;
0052da  f8c48014          STR      r8,[r4,#0x14]
0052de  e029              B        |L1.21300|
                  |L1.21216|
0052e0  e054              B        |L1.21388|
                  |L1.21218|
;;;8082   
;;;8083   			}
;;;8084   
;;;8085   		}
;;;8086   
;;;8087   	else if(bat[in]._zar_cnt<=-AH_CONSTANT)
0052e2  49ba              LDR      r1,|L1.21964|
0052e4  4288              CMP      r0,r1
0052e6  dc25              BGT      |L1.21300|
;;;8088   		{
;;;8089   		if(BAT_C_REAL[in]==0x5555) tempUS_=BAT_C_NOM[in];
0052e8  f93a0015          LDRSH    r0,[r10,r5,LSL #1]
0052ec  4558              CMP      r0,r11
0052ee  d103              BNE      |L1.21240|
0052f0  48b5              LDR      r0,|L1.21960|
0052f2  f8306015          LDRH     r6,[r0,r5,LSL #1]
0052f6  e001              B        |L1.21244|
                  |L1.21240|
;;;8090   		else tempUS_=BAT_C_REAL[in];
0052f8  f83a6015          LDRH     r6,[r10,r5,LSL #1]
                  |L1.21244|
;;;8091   		
;;;8092   		b_zar=lc640_read_int(ADR_EE_BAT_ZAR_CNT[in]);
0052fc  f8390015          LDRH     r0,[r9,r5,LSL #1]
005300  f7fffffe          BL       lc640_read_int
005304  b280              UXTH     r0,r0
;;;8093   
;;;8094   		if(b_zar>tempUS_)
005306  42b0              CMP      r0,r6
005308  d905              BLS      |L1.21270|
;;;8095   			{
;;;8096   			lc640_write_int(ADR_EE_BAT_ZAR_CNT[in],tempUS_);
00530a  f9390015          LDRSH    r0,[r9,r5,LSL #1]
00530e  b231              SXTH     r1,r6
005310  f7fffffe          BL       lc640_write_int
;;;8097   			b_zar=tempUS_;
005314  4630              MOV      r0,r6
                  |L1.21270|
;;;8098   			}
;;;8099   		if(b_zar)
005316  b158              CBZ      r0,|L1.21296|
;;;8100   			{
;;;8101   			bat[in]._zar_cnt+=AH_CONSTANT;
005318  6961              LDR      r1,[r4,#0x14]
00531a  4441              ADD      r1,r1,r8
00531c  6161              STR      r1,[r4,#0x14]
;;;8102   
;;;8103   			lc640_write_int(ADR_EE_BAT_ZAR_CNT[in],b_zar-1);
00531e  f9392015          LDRSH    r2,[r9,r5,LSL #1]
005322  f1a00001          SUB      r0,r0,#1
005326  b201              SXTH     r1,r0
005328  4610              MOV      r0,r2
00532a  f7fffffe          BL       lc640_write_int
00532e  e001              B        |L1.21300|
                  |L1.21296|
;;;8104   			}
;;;8105   		else 
;;;8106   			{
;;;8107   			bat[in]._zar_cnt=-AH_CONSTANT;
005330  48a6              LDR      r0,|L1.21964|
005332  6160              STR      r0,[r4,#0x14]
                  |L1.21300|
;;;8108   			}
;;;8109   
;;;8110   		}
;;;8111   
;;;8112   			
;;;8113   	tempUL=(unsigned long)lc640_read_int(ADR_EE_BAT_ZAR_CNT[in]);
005334  f8390015          LDRH     r0,[r9,r5,LSL #1]
005338  f7fffffe          BL       lc640_read_int
00533c  4601              MOV      r1,r0
;;;8114   	
;;;8115   	if(BAT_C_REAL[in]==0x5555) tempUL_=(unsigned long)BAT_C_NOM[in];
00533e  f93a0015          LDRSH    r0,[r10,r5,LSL #1]
005342  4558              CMP      r0,r11
005344  d102              BNE      |L1.21324|
005346  48a0              LDR      r0,|L1.21960|
005348  f9300015          LDRSH    r0,[r0,r5,LSL #1]
                  |L1.21324|
;;;8116   	else tempUL_=(unsigned long)BAT_C_REAL[in];
;;;8117   		           	
;;;8118   	tempUL*=1000L;
00534c  f44f727a          MOV      r2,#0x3e8
005350  fb01f102          MUL      r1,r1,r2
;;;8119   
;;;8120   
;;;8121   	if(tempUL_==0) tempUL=0;
005354  b158              CBZ      r0,|L1.21358|
;;;8122   	else tempUL/=tempUL_;
005356  fbb1f0f0          UDIV     r0,r1,r0
                  |L1.21338|
;;;8123   
;;;8124   	tempUL/=10L;
00535a  f04f010a          MOV      r1,#0xa
00535e  fbb0f0f1          UDIV     r0,r0,r1
;;;8125   
;;;8126   	bat[in]._zar=(unsigned short)tempUL;
005362  8220              STRH     r0,[r4,#0x10]
;;;8127   
;;;8128   	if(BAT_TYPE==1)
005364  489a              LDR      r0,|L1.21968|
005366  8800              LDRH     r0,[r0,#0]  ; BAT_TYPE
005368  2801              CMP      r0,#1
00536a  d003              BEQ      |L1.21364|
00536c  e008              B        |L1.21376|
                  |L1.21358|
00536e  f04f0000          MOV      r0,#0                 ;8121
005372  e7f2              B        |L1.21338|
                  |L1.21364|
;;;8129   		{
;;;8130   		bat[in]._zar=lakb[in]._s_o_c;
005374  4997              LDR      r1,|L1.21972|
005376  9802              LDR      r0,[sp,#8]
005378  eb010080          ADD      r0,r1,r0,LSL #2
00537c  8a40              LDRH     r0,[r0,#0x12]
00537e  8220              STRH     r0,[r4,#0x10]
                  |L1.21376|
;;;8131   		}
;;;8132   	
;;;8133   	gran((signed short*)&bat[in]._zar,0,100);
005380  f1040010          ADD      r0,r4,#0x10
005384  2264              MOVS     r2,#0x64
005386  2100              MOVS     r1,#0
005388  f7fffffe          BL       gran
                  |L1.21388|
;;;8134        }
;;;8135   
;;;8136   
;;;8137   //Подсчет тока разряда батареи      
;;;8138   if(bat[in]._wrk==1)
00538c  7ba0              LDRB     r0,[r4,#0xe]
00538e  2801              CMP      r0,#1
005390  d113              BNE      |L1.21434|
;;;8139   	{
;;;8140   	if(bat[in]._Iintegr<36000)
005392  8ba0              LDRH     r0,[r4,#0x1c]
005394  4540              CMP      r0,r8
005396  d20f              BCS      |L1.21432|
;;;8141   		{          
;;;8142   		bat[in]._Iintegr+=abs(bat[in]._Ib);
005398  f9b40008          LDRSH    r0,[r4,#8]
00539c  f7fffffe          BL       abs
0053a0  8ba1              LDRH     r1,[r4,#0x1c]
0053a2  4408              ADD      r0,r0,r1
0053a4  b280              UXTH     r0,r0
0053a6  83a0              STRH     r0,[r4,#0x1c]
;;;8143   		if(bat[in]._Iintegr>=36000)
0053a8  4540              CMP      r0,r8
0053aa  d306              BCC      |L1.21434|
;;;8144   			{
;;;8145   			bat[in]._Iintegr=0;		//Счетчик десятков милиамперсекунд
0053ac  83a7              STRH     r7,[r4,#0x1c]
;;;8146   			bat[in]._Iintegr_++;	//Счетчик сотен милиамперчасов
0053ae  8be0              LDRH     r0,[r4,#0x1e]
0053b0  f1000001          ADD      r0,r0,#1
0053b4  83e0              STRH     r0,[r4,#0x1e]
0053b6  e000              B        |L1.21434|
                  |L1.21432|
;;;8147   			}
;;;8148   		}
;;;8149   	else 
;;;8150   		{
;;;8151   		bat[in]._Iintegr=0;
0053b8  83a7              STRH     r7,[r4,#0x1c]
                  |L1.21434|
;;;8152   		}	
;;;8153   	} 
;;;8154   	    
;;;8155   #ifdef UKU_220_IPS_TERMOKOMPENSAT
;;;8156   if((t_ext[0]>TBATSIGN)&&(!ND_EXT[0]))	
0053ba  4e87              LDR      r6,|L1.21976|
0053bc  4987              LDR      r1,|L1.21980|
0053be  f8df9220          LDR      r9,|L1.21984|
0053c2  f9b60000          LDRSH    r0,[r6,#0]  ; t_ext
0053c6  f9b11000          LDRSH    r1,[r1,#0]  ; TBATSIGN
0053ca  4288              CMP      r0,r1
0053cc  dd02              BLE      |L1.21460|
0053ce  f8990000          LDRB     r0,[r9,#0]  ; ND_EXT
0053d2  b380              CBZ      r0,|L1.21558|
                  |L1.21460|
;;;8157   	{
;;;8158   	bat[in]._sign_temper_cnt++;
;;;8159   	}
;;;8160   else 
;;;8161   	{
;;;8162   	bat[in]._sign_temper_cnt--;
0053d4  f8b40040          LDRH     r0,[r4,#0x40]
0053d8  f1a00001          SUB      r0,r0,#1
0053dc  f8a40040          STRH     r0,[r4,#0x40]
                  |L1.21472|
;;;8163   	}
;;;8164   #else
;;;8165   if((bat[in]._Tb>TBATSIGN)&&(!bat[in]._nd))	
;;;8166   	{
;;;8167   	bat[in]._sign_temper_cnt++;
;;;8168   	}
;;;8169   else 
;;;8170   	{
;;;8171   	bat[in]._sign_temper_cnt--;
;;;8172   	}
;;;8173   #endif
;;;8174   gran(&bat[in]._sign_temper_cnt,0,600);
0053e0  f44f7b16          MOV      r11,#0x258
0053e4  f1040040          ADD      r0,r4,#0x40
0053e8  465a              MOV      r2,r11
0053ea  2100              MOVS     r1,#0
0053ec  f7fffffe          BL       gran
;;;8175   if(bat[in]._sign_temper_cnt>=590)	bat[in]._temper_stat|=(1<<0);
0053f0  f9b40040          LDRSH    r0,[r4,#0x40]
0053f4  f2402a4e          MOV      r10,#0x24e
0053f8  4550              CMP      r0,r10
0053fa  db05              BLT      |L1.21512|
0053fc  f894103f          LDRB     r1,[r4,#0x3f]
005400  f0410101          ORR      r1,r1,#1
005404  f884103f          STRB     r1,[r4,#0x3f]
                  |L1.21512|
;;;8176   if(bat[in]._sign_temper_cnt<=10)	bat[in]._temper_stat&=~(1<<0);
005408  280a              CMP      r0,#0xa
00540a  dc05              BGT      |L1.21528|
00540c  f894003f          LDRB     r0,[r4,#0x3f]
005410  f0200001          BIC      r0,r0,#1
005414  f884003f          STRB     r0,[r4,#0x3f]
                  |L1.21528|
;;;8177   
;;;8178   if((bat[in]._temper_stat&(1<<0))&&(!(bat[in]._temper_stat&(1<<4))))	avar_bat_temper_hndl(in,1);
005418  f894003f          LDRB     r0,[r4,#0x3f]
00541c  07c1              LSLS     r1,r0,#31
00541e  d005              BEQ      |L1.21548|
005420  06c0              LSLS     r0,r0,#27
005422  d403              BMI      |L1.21548|
005424  2101              MOVS     r1,#1
005426  4628              MOV      r0,r5
005428  f7fffffe          BL       avar_bat_temper_hndl
                  |L1.21548|
;;;8179   if((!(bat[in]._temper_stat&(1<<0)))&&(bat[in]._temper_stat&(1<<4)))	avar_bat_temper_hndl(in,0);
00542c  f894003f          LDRB     r0,[r4,#0x3f]
005430  07c1              LSLS     r1,r0,#31
005432  d008              BEQ      |L1.21574|
005434  e00d              B        |L1.21586|
                  |L1.21558|
005436  e7ff              B        |L1.21560|
                  |L1.21560|
005438  f8b40040          LDRH     r0,[r4,#0x40]         ;8158
00543c  f1000001          ADD      r0,r0,#1              ;8158
005440  f8a40040          STRH     r0,[r4,#0x40]         ;8158
005444  e7cc              B        |L1.21472|
                  |L1.21574|
005446  06c0              LSLS     r0,r0,#27
005448  d503              BPL      |L1.21586|
00544a  2100              MOVS     r1,#0
00544c  4628              MOV      r0,r5
00544e  f7fffffe          BL       avar_bat_temper_hndl
                  |L1.21586|
;;;8180   
;;;8181   if(bat[in]._temper_stat&(1<<0))		bat[in]._temper_stat|=(1<<4);
005452  f894003f          LDRB     r0,[r4,#0x3f]
005456  07c1              LSLS     r1,r0,#31
005458  d004              BEQ      |L1.21604|
00545a  f0400010          ORR      r0,r0,#0x10
00545e  f884003f          STRB     r0,[r4,#0x3f]
005462  e003              B        |L1.21612|
                  |L1.21604|
;;;8182   else 								bat[in]._temper_stat&=~(1<<4);
005464  f0200010          BIC      r0,r0,#0x10
005468  f884003f          STRB     r0,[r4,#0x3f]
                  |L1.21612|
;;;8183   
;;;8184   #ifdef UKU_220_IPS_TERMOKOMPENSAT
;;;8185   if((t_ext[0]>TBATMAX)&&(!ND_EXT[0]))	
00546c  495d              LDR      r1,|L1.21988|
00546e  f9b60000          LDRSH    r0,[r6,#0]  ; t_ext
005472  f9b11000          LDRSH    r1,[r1,#0]  ; TBATMAX
005476  4288              CMP      r0,r1
005478  dd02              BLE      |L1.21632|
00547a  f8990000          LDRB     r0,[r9,#0]  ; ND_EXT
00547e  b3d0              CBZ      r0,|L1.21750|
                  |L1.21632|
;;;8186   	{
;;;8187   	bat[in]._max_temper_cnt++;
;;;8188   	}
;;;8189   else 
;;;8190   	{
;;;8191   	bat[in]._max_temper_cnt--;
005480  f8b40042          LDRH     r0,[r4,#0x42]
005484  f1a00001          SUB      r0,r0,#1
005488  f8a40042          STRH     r0,[r4,#0x42]
                  |L1.21644|
;;;8192   	}
;;;8193   #else
;;;8194   if((bat[in]._Tb>TBATMAX)&&(!bat[in]._nd))	
;;;8195   	{
;;;8196   	bat[in]._max_temper_cnt++;
;;;8197   	}
;;;8198   else 
;;;8199   	{
;;;8200   	bat[in]._max_temper_cnt--;
;;;8201   	}
;;;8202   #endif
;;;8203   
;;;8204   gran(&bat[in]._max_temper_cnt,0,600);
00548c  f1040042          ADD      r0,r4,#0x42
005490  465a              MOV      r2,r11
005492  2100              MOVS     r1,#0
005494  f7fffffe          BL       gran
;;;8205   if(bat[in]._max_temper_cnt>=590)	bat[in]._temper_stat|=(1<<1);
005498  f9b40042          LDRSH    r0,[r4,#0x42]
00549c  4550              CMP      r0,r10
00549e  db05              BLT      |L1.21676|
0054a0  f894103f          LDRB     r1,[r4,#0x3f]
0054a4  f0410102          ORR      r1,r1,#2
0054a8  f884103f          STRB     r1,[r4,#0x3f]
                  |L1.21676|
;;;8206   if(bat[in]._max_temper_cnt<=10)	bat[in]._temper_stat&=~(1<<1);
0054ac  280a              CMP      r0,#0xa
0054ae  dc05              BGT      |L1.21692|
0054b0  f894003f          LDRB     r0,[r4,#0x3f]
0054b4  f0200002          BIC      r0,r0,#2
0054b8  f884003f          STRB     r0,[r4,#0x3f]
                  |L1.21692|
;;;8207   
;;;8208   if((bat[in]._temper_stat&(1<<1))&&(!(bat[in]._temper_stat&(1<<5))))	avar_bat_temper_hndl(in,3);
0054bc  f894003f          LDRB     r0,[r4,#0x3f]
0054c0  0781              LSLS     r1,r0,#30
0054c2  d505              BPL      |L1.21712|
0054c4  0680              LSLS     r0,r0,#26
0054c6  d403              BMI      |L1.21712|
0054c8  2103              MOVS     r1,#3
0054ca  4628              MOV      r0,r5
0054cc  f7fffffe          BL       avar_bat_temper_hndl
                  |L1.21712|
;;;8209   if((!(bat[in]._temper_stat&(1<<1)))&&(bat[in]._temper_stat&(1<<5)))	avar_bat_temper_hndl(in,2);
0054d0  f894003f          LDRB     r0,[r4,#0x3f]
0054d4  0781              LSLS     r1,r0,#30
0054d6  d405              BMI      |L1.21732|
0054d8  0680              LSLS     r0,r0,#26
0054da  d503              BPL      |L1.21732|
0054dc  2102              MOVS     r1,#2
0054de  4628              MOV      r0,r5
0054e0  f7fffffe          BL       avar_bat_temper_hndl
                  |L1.21732|
;;;8210   
;;;8211   if(bat[in]._temper_stat&(1<<1))		bat[in]._temper_stat|=(1<<5);
0054e4  f894003f          LDRB     r0,[r4,#0x3f]
0054e8  0781              LSLS     r1,r0,#30
0054ea  d50c              BPL      |L1.21766|
0054ec  f0400020          ORR      r0,r0,#0x20
0054f0  f884003f          STRB     r0,[r4,#0x3f]
0054f4  e00b              B        |L1.21774|
                  |L1.21750|
0054f6  e7ff              B        |L1.21752|
                  |L1.21752|
0054f8  f8b40042          LDRH     r0,[r4,#0x42]         ;8187
0054fc  f1000001          ADD      r0,r0,#1              ;8187
005500  f8a40042          STRH     r0,[r4,#0x42]         ;8187
005504  e7c2              B        |L1.21644|
                  |L1.21766|
;;;8212   else 								bat[in]._temper_stat&=~(1<<5);
005506  f0200020          BIC      r0,r0,#0x20
00550a  f884003f          STRB     r0,[r4,#0x3f]
                  |L1.21774|
;;;8213   
;;;8214   //Подсчет наработки батареи
;;;8215   if(bat[in]._resurs_cnt<36000)
00550e  6c60              LDR      r0,[r4,#0x44]
005510  4540              CMP      r0,r8
005512  da13              BGE      |L1.21820|
;;;8216   	{               
;;;8217   	bat[in]._resurs_cnt++;
005514  f1000001          ADD      r0,r0,#1
005518  6460              STR      r0,[r4,#0x44]
;;;8218   	if(bat[in]._resurs_cnt>=36000)
00551a  4540              CMP      r0,r8
00551c  db0f              BLT      |L1.21822|
;;;8219   		{
;;;8220   		bat[in]._resurs_cnt=0;
00551e  6467              STR      r7,[r4,#0x44]
;;;8221   		lc640_write_int(ADR_EE_BAT_RESURS[in],lc640_read_int(ADR_EE_BAT_RESURS[in])+1);
005520  4c31              LDR      r4,|L1.21992|
005522  f8340015          LDRH     r0,[r4,r5,LSL #1]
005526  f7fffffe          BL       lc640_read_int
00552a  1c40              ADDS     r0,r0,#1
00552c  b201              SXTH     r1,r0
00552e  f9340015          LDRSH    r0,[r4,r5,LSL #1]
005532  b003              ADD      sp,sp,#0xc
005534  e8bd4ff0          POP      {r4-r11,lr}
005538  f7ffbffe          B.W      lc640_write_int
                  |L1.21820|
;;;8222   		}
;;;8223   	}
;;;8224   else bat[in]._resurs_cnt=0;
00553c  6467              STR      r7,[r4,#0x44]
                  |L1.21822|
;;;8225   
;;;8226   
;;;8227   #ifndef UKU_220_V2
;;;8228   #ifndef UKU_GLONASS
;;;8229   #ifndef UKU_220_IPS_TERMOKOMPENSAT
;;;8230   //#ifndef UKU_6U
;;;8231   //#ifndef UKU_220
;;;8232   if(UBM_AV)
;;;8233        {
;;;8234        signed short temp_SS;
;;;8235   #ifdef UKU_220
;;;8236   temp_SS=bat[in]._Ub/2;
;;;8237   #else
;;;8238        if(U0B<600)
;;;8239             {
;;;8240   
;;;8241             temp_SS=bat[in]._Ub/4;
;;;8242             }
;;;8243        else temp_SS=bat[in]._Ub/5;
;;;8244   	
;;;8245   	temp_SS+=temp_SS;     
;;;8246   #endif
;;;8247        temp_SS-=(bat[in]._Ubm);
;;;8248   
;;;8249        temp_SS=abs(temp_SS);
;;;8250   
;;;8251        temp_SS*=10;
;;;8252   
;;;8253        temp_SS/=12;
;;;8254   
;;;8255        bat[in]._dUbm=temp_SS;
;;;8256   
;;;8257   
;;;8258        if(	(bat[in]._dUbm>UBM_AV) &&
;;;8259   		(abs(bat[in]._Ib)<(5*IKB)) &&
;;;8260   		(bat[in]._Ub>((short)(((long)USIGN*115)/100))) &&
;;;8261   		(!(bat[in]._av & 2))  )
;;;8262   		{
;;;8263   		bat[in]._cnt_as++;
;;;8264   		if(bat[in]._cnt_as==3000)
;;;8265   			{
;;;8266   			avar_bat_as_hndl(in,1);
;;;8267   			}
;;;8268   		if(bat[in]._cnt_as>=3005) bat[in]._cnt_as=3005;
;;;8269   		}
;;;8270   	else 
;;;8271   		{
;;;8272   		if(bat[in]._cnt_as)
;;;8273   			{
;;;8274   			bat[in]._cnt_as--;
;;;8275   			if(bat[in]._cnt_as==0)avar_bat_as_hndl(in,0);
;;;8276   			}
;;;8277   		}
;;;8278        
;;;8279        }
;;;8280   //#endif 
;;;8281   #endif 
;;;8282   #endif
;;;8283   #endif
;;;8284   
;;;8285   }
00553e  e8bd8ffe          POP      {r1-r11,pc}
;;;8286   
                          ENDP

                  bat_hndl_zvu PROC
;;;8288   //-----------------------------------------------
;;;8289   void bat_hndl_zvu(void)
005542  e92d4ff0          PUSH     {r4-r11,lr}
;;;8290   {
005546  b089              SUB      sp,sp,#0x24
;;;8291   char i;
;;;8292   short bat_hndl_i_temp;
;;;8293   const long bat_hndl_t_razr_const[7]={600L,1800L,3600L,10800L,18000L,36000L,72000L};
005548  f04f021c          MOV      r2,#0x1c
00554c  4927              LDR      r1,|L1.21996|
00554e  4668              MOV      r0,sp
005550  f7fffffe          BL       __aeabi_memcpy4
;;;8294   
;;;8295   //Ib_ips_termokompensat=-17000;
;;;8296    
;;;8297   if(bat_hndl_zvu_init==0)
005554  4c26              LDR      r4,|L1.22000|
;;;8298   	{
;;;8299   	//Инициализация при включении системы
;;;8300   	bat_hndl_zvu_Q=(long)lc640_read_int(EE_BAT1_ZAR_CNT);
;;;8301   	if((bat_hndl_zvu_Q>100L)||(bat_hndl_zvu_Q<0L)) bat_hndl_zvu_Q=100L;
005556  2564              MOVS     r5,#0x64
;;;8302   	bat_hndl_zvu_Q*=10000L;
;;;8303   
;;;8304   	bat_hndl_zvu_init=1;
;;;8305   	}
;;;8306   else 
;;;8307   	{
;;;8308   	if(Ib_ips_termokompensat<-IKB)
;;;8309   		{
;;;8310   		bat_hndl_i_vector=0;
;;;8311   		bat_hndl_i_zar_price=0L;
;;;8312   			
;;;8313   		bat_hndl_i=-Ib_ips_termokompensat;
;;;8314   		I_from_t_table[0]=BAT_C_POINT_1_6*6; //Ток при котором батарея разрядится за 1/6 часа (0.1А)
;;;8315   		I_from_t_table[1]=BAT_C_POINT_1_2*2; //Ток при котором батарея разрядится за 1/2 часа (0.1А)
;;;8316   		I_from_t_table[2]=BAT_C_POINT_1; //Ток при котором батарея разрядится за 1 час (0.1А)
;;;8317   		I_from_t_table[3]=BAT_C_POINT_3/3; //Ток при котором батарея разрядится за 3 часа (0.1А)
;;;8318   		I_from_t_table[4]=BAT_C_POINT_5/5; //Ток при котором батарея разрядится за 5 часов (0.1А)
;;;8319   		I_from_t_table[5]=BAT_C_POINT_10/10; //Ток при котором батарея разрядится за 10 часов (0.1А)
;;;8320   		I_from_t_table[6]=BAT_C_POINT_20/20; //Ток при котором батарея разрядится за 20 часов (0.1А)
;;;8321   		
;;;8322   		I_from_t_table[0]=(short)((((long)I_from_t_table[0])*((long)BAT_K_OLD))/100L);
;;;8323   		I_from_t_table[1]=(short)((((long)I_from_t_table[1])*((long)BAT_K_OLD))/100L);
;;;8324   		I_from_t_table[2]=(short)((((long)I_from_t_table[2])*((long)BAT_K_OLD))/100L);
;;;8325   		I_from_t_table[3]=(short)((((long)I_from_t_table[3])*((long)BAT_K_OLD))/100L);
;;;8326   		I_from_t_table[4]=(short)((((long)I_from_t_table[4])*((long)BAT_K_OLD))/100L);
;;;8327   		I_from_t_table[5]=(short)((((long)I_from_t_table[5])*((long)BAT_K_OLD))/100L);
;;;8328   		I_from_t_table[6]=(short)((((long)I_from_t_table[6])*((long)BAT_K_OLD))/100L);
;;;8329   
;;;8330   		bat_hndl_i_temp=bat_hndl_i/10;
;;;8331   		for(i=0;i<7;i++)
;;;8332   			{
;;;8333   			if(bat_hndl_i_temp>=I_from_t_table[i])
;;;8334   				{
;;;8335   				break;
;;;8336   				}
;;;8337   			}
;;;8338   		 if(i==0) bat_hndl_t_razr=bat_hndl_t_razr_const[0];
;;;8339   		 else if((i>=1)&&(i<7))
;;;8340   		 	{
;;;8341   			short i1,i2;
;;;8342   			i1=I_from_t_table[i-1]-bat_hndl_i_temp;
;;;8343   			i2=I_from_t_table[i-1]-I_from_t_table[i];
;;;8344   			bat_hndl_t_razr=bat_hndl_t_razr_const[i]-bat_hndl_t_razr_const[i-1];
;;;8345   			bat_hndl_t_razr*=(long)i1;
;;;8346   			bat_hndl_t_razr/=(long)i2;
;;;8347   			bat_hndl_t_razr+=bat_hndl_t_razr_const[i-1];
;;;8348   			}
;;;8349   		else if(i>=7)
;;;8350   			{
;;;8351   			bat_hndl_t_razr=bat_hndl_t_razr_const[6];
;;;8352   			}
;;;8353   		bat_hndl_proc_razr=1000000L/bat_hndl_t_razr;
005558  f8df8098          LDR      r8,|L1.22004|
00555c  7a60              LDRB     r0,[r4,#9]            ;8297  ; bat_hndl_zvu_init
00555e  2700              MOVS     r7,#0                 ;8297
005560  f04f0901          MOV      r9,#1                 ;8304
005564  f1040680          ADD      r6,r4,#0x80           ;8300
005568  2800              CMP      r0,#0                 ;8297
00556a  d07e              BEQ      |L1.22122|
00556c  4923              LDR      r1,|L1.22012|
00556e  4822              LDR      r0,|L1.22008|
005570  f9b12000          LDRSH    r2,[r1,#0]            ;8308  ; IKB
005574  4631              MOV      r1,r6                 ;8300
005576  f9b00000          LDRSH    r0,[r0,#0]            ;8308  ; Ib_ips_termokompensat
00557a  4253              RSBS     r3,r2,#0              ;8308
00557c  6d89              LDR      r1,[r1,#0x58]         ;8300
00557e  4298              CMP      r0,r3                 ;8308
005580  da74              BGE      |L1.22124|
005582  72e7              STRB     r7,[r4,#0xb]          ;8310
005584  60f7              STR      r7,[r6,#0xc]          ;8311  ; bat_hndl_i_zar_price
005586  f1c00000          RSB      r0,r0,#0              ;8313
00558a  b200              SXTH     r0,r0                 ;8313
00558c  8030              STRH     r0,[r6,#0]            ;8313
00558e  9008              STR      r0,[sp,#0x20]         ;8313
005590  481b              LDR      r0,|L1.22016|
005592  4a1c              LDR      r2,|L1.22020|
005594  8800              LDRH     r0,[r0,#0]            ;8314  ; BAT_C_POINT_1_6
005596  eb000040          ADD      r0,r0,r0,LSL #1       ;8314
00559a  ea4f0040          LSL      r0,r0,#1              ;8314
00559e  fa0ffb80          SXTH     r11,r0                ;8314
0055a2  4819              LDR      r0,|L1.22024|
0055a4  8800              LDRH     r0,[r0,#0]            ;8315  ; BAT_C_POINT_1_2
0055a6  ea4f0040          LSL      r0,r0,#1              ;8315
0055aa  b203              SXTH     r3,r0                 ;8315
0055ac  4817              LDR      r0,|L1.22028|
0055ae  f9b0c000          LDRSH    r12,[r0,#0]           ;8316  ; BAT_C_POINT_1
0055b2  4817              LDR      r0,|L1.22032|
0055b4  e02e              B        |L1.22036|
0055b6  0000              DCW      0x0000
                  |L1.21944|
                          DCD      bat_u_old_cnt
                  |L1.21948|
                          DCD      0x40024020
                  |L1.21952|
                          DCD      ADR_EE_BAT_ZAR_CNT
                  |L1.21956|
                          DCD      BAT_C_REAL
                  |L1.21960|
                          DCD      BAT_C_NOM
                  |L1.21964|
                          DCD      0xffff7360
                  |L1.21968|
                          DCD      BAT_TYPE
                  |L1.21972|
                          DCD      lakb
                  |L1.21976|
                          DCD      t_ext
                  |L1.21980|
                          DCD      TBATSIGN
                  |L1.21984|
                          DCD      ND_EXT
                  |L1.21988|
                          DCD      TBATMAX
                  |L1.21992|
                          DCD      ADR_EE_BAT_RESURS
                  |L1.21996|
                          DCD      ||area_number.19||+0x20
                  |L1.22000|
                          DCD      ||area_number.25||
                  |L1.22004|
                          DCD      0x000f4240
                  |L1.22008|
                          DCD      Ib_ips_termokompensat
                  |L1.22012|
                          DCD      IKB
                  |L1.22016|
                          DCD      BAT_C_POINT_1_6
                  |L1.22020|
                          DCD      ||.bss||+0x44c
                  |L1.22024|
                          DCD      BAT_C_POINT_1_2
                  |L1.22028|
                          DCD      BAT_C_POINT_1
                  |L1.22032|
                          DCD      BAT_C_POINT_3
                  |L1.22036|
005614  f9b00000          LDRSH    r0,[r0,#0]            ;8317  ; BAT_C_POINT_3
005618  f04f0903          MOV      r9,#3                 ;8317
00561c  fb90f0f9          SDIV     r0,r0,r9              ;8317
005620  b200              SXTH     r0,r0                 ;8317
005622  9007              STR      r0,[sp,#0x1c]         ;8317
005624  48ff              LDR      r0,|L1.23076|
005626  f04f0905          MOV      r9,#5                 ;8318
00562a  f9b00000          LDRSH    r0,[r0,#0]            ;8318  ; BAT_C_POINT_5
00562e  fb90f0f9          SDIV     r0,r0,r9              ;8318
005632  fa0ff980          SXTH     r9,r0                 ;8318
005636  48fc              LDR      r0,|L1.23080|
005638  f9b0a000          LDRSH    r10,[r0,#0]           ;8319  ; BAT_C_POINT_10
00563c  f04f000a          MOV      r0,#0xa               ;8319
005640  fb9af0f0          SDIV     r0,r10,r0             ;8319
005644  fa0ffe80          SXTH     lr,r0                 ;8319
005648  48f8              LDR      r0,|L1.23084|
00564a  f04f0a14          MOV      r10,#0x14             ;8320
00564e  f9b00000          LDRSH    r0,[r0,#0]            ;8320  ; BAT_C_POINT_20
005652  fb90f0fa          SDIV     r0,r0,r10             ;8320
005656  fa0ffa80          SXTH     r10,r0                ;8320
00565a  48f5              LDR      r0,|L1.23088|
00565c  f9b00000          LDRSH    r0,[r0,#0]            ;8322  ; BAT_K_OLD
005660  fb0bfb00          MUL      r11,r11,r0            ;8322
005664  fb9bfbf5          SDIV     r11,r11,r5            ;8322
005668  e001              B        |L1.22126|
                  |L1.22122|
00566a  e04e              B        |L1.22282|
                  |L1.22124|
00566c  e082              B        |L1.22388|
                  |L1.22126|
00566e  f8a2b000          STRH     r11,[r2,#0]           ;8322
005672  fb03f300          MUL      r3,r3,r0              ;8323
005676  fb93f3f5          SDIV     r3,r3,r5              ;8323
00567a  8053              STRH     r3,[r2,#2]            ;8323
00567c  fb0cfc00          MUL      r12,r12,r0            ;8324
005680  fb9cf3f5          SDIV     r3,r12,r5             ;8324
005684  8093              STRH     r3,[r2,#4]            ;8324
005686  9b07              LDR      r3,[sp,#0x1c]         ;8325
005688  fb03f300          MUL      r3,r3,r0              ;8325
00568c  fb93f3f5          SDIV     r3,r3,r5              ;8325
005690  80d3              STRH     r3,[r2,#6]            ;8325
005692  fb09f900          MUL      r9,r9,r0              ;8326
005696  fb99f3f5          SDIV     r3,r9,r5              ;8326
00569a  8113              STRH     r3,[r2,#8]            ;8326
00569c  fb0efe00          MUL      lr,lr,r0              ;8327
0056a0  fb9ef3f5          SDIV     r3,lr,r5              ;8327
0056a4  8153              STRH     r3,[r2,#0xa]          ;8327
0056a6  fb0afa00          MUL      r10,r10,r0            ;8328
0056aa  fb9af0f5          SDIV     r0,r10,r5             ;8328
0056ae  8190              STRH     r0,[r2,#0xc]          ;8328
0056b0  9808              LDR      r0,[sp,#0x20]         ;8330
0056b2  f04f030a          MOV      r3,#0xa               ;8330
0056b6  fb90f0f3          SDIV     r0,r0,r3              ;8330
0056ba  b203              SXTH     r3,r0                 ;8330
0056bc  f04f0000          MOV      r0,#0                 ;8331
                  |L1.22208|
0056c0  f9325010          LDRSH    r5,[r2,r0,LSL #1]     ;8333
0056c4  429d              CMP      r5,r3                 ;8333
0056c6  dd04              BLE      |L1.22226|
0056c8  f1000001          ADD      r0,r0,#1              ;8331
0056cc  b2c0              UXTB     r0,r0                 ;8331
0056ce  2807              CMP      r0,#7                 ;8331
0056d0  d3f6              BCC      |L1.22208|
                  |L1.22226|
0056d2  b358              CBZ      r0,|L1.22316|
0056d4  1e45              SUBS     r5,r0,#1              ;8339
0056d6  2d06              CMP      r5,#6                 ;8339
0056d8  d22b              BCS      |L1.22322|
0056da  f832c015          LDRH     r12,[r2,r5,LSL #1]    ;8342
0056de  ebac0303          SUB      r3,r12,r3             ;8342
0056e2  b21b              SXTH     r3,r3                 ;8342
0056e4  f8322010          LDRH     r2,[r2,r0,LSL #1]     ;8343
0056e8  ebac0202          SUB      r2,r12,r2             ;8343
0056ec  fa0ffc82          SXTH     r12,r2                ;8343
0056f0  f85d9020          LDR      r9,[sp,r0,LSL #2]     ;8344
0056f4  f85d0025          LDR      r0,[sp,r5,LSL #2]     ;8344
0056f8  eba90200          SUB      r2,r9,r0              ;8344
0056fc  fb02f203          MUL      r2,r2,r3              ;8345
005700  fb92f2fc          SDIV     r2,r2,r12             ;8346
005704  4410              ADD      r0,r0,r2              ;8347
005706  6530              STR      r0,[r6,#0x50]         ;8347  ; bat_hndl_t_razr
005708  e017              B        |L1.22330|
                  |L1.22282|
00570a  f44f70ef          MOV      r0,#0x1de             ;8300
00570e  f7fffffe          BL       lc640_read_int
005712  65b0              STR      r0,[r6,#0x58]         ;8300  ; bat_hndl_zvu_Q
005714  2865              CMP      r0,#0x65              ;8301
005716  d300              BCC      |L1.22298|
005718  65b5              STR      r5,[r6,#0x58]         ;8301  ; bat_hndl_zvu_Q
                  |L1.22298|
00571a  6db0              LDR      r0,[r6,#0x58]         ;8302  ; bat_hndl_zvu_Q
00571c  f2427110          MOV      r1,#0x2710            ;8302
005720  fb00f001          MUL      r0,r0,r1              ;8302
005724  65b0              STR      r0,[r6,#0x58]         ;8302  ; bat_hndl_zvu_Q
005726  f8849009          STRB     r9,[r4,#9]            ;8304
00572a  e066              B        |L1.22522|
                  |L1.22316|
00572c  9800              LDR      r0,[sp,#0]            ;8338
00572e  6530              STR      r0,[r6,#0x50]         ;8338  ; bat_hndl_t_razr
005730  e003              B        |L1.22330|
                  |L1.22322|
005732  2807              CMP      r0,#7                 ;8349
005734  d301              BCC      |L1.22330|
005736  9806              LDR      r0,[sp,#0x18]         ;8351
005738  6530              STR      r0,[r6,#0x50]         ;8351  ; bat_hndl_t_razr
                  |L1.22330|
00573a  6d30              LDR      r0,[r6,#0x50]  ; bat_hndl_t_razr
00573c  fb98f0f0          SDIV     r0,r8,r0
005740  65f0              STR      r0,[r6,#0x5c]  ; bat_hndl_proc_razr
;;;8354   
;;;8355   		if(bat_hndl_zvu_Q>bat_hndl_proc_razr)bat_hndl_zvu_Q-=bat_hndl_proc_razr;
005742  4281              CMP      r1,r0
005744  dd03              BLE      |L1.22350|
005746  eba10000          SUB      r0,r1,r0
00574a  65b0              STR      r0,[r6,#0x58]  ; bat_hndl_zvu_Q
00574c  e000              B        |L1.22352|
                  |L1.22350|
;;;8356   		else bat_hndl_zvu_Q=0L;
00574e  65b7              STR      r7,[r6,#0x58]  ; bat_hndl_zvu_Q
                  |L1.22352|
;;;8357   
;;;8358   		bat_hndl_t_razr_hour=(short)(bat_hndl_remain_time/3600L);
005750  6e31              LDR      r1,[r6,#0x60]  ; bat_hndl_remain_time
005752  f44f6061          MOV      r0,#0xe10
005756  fb91f0f0          SDIV     r0,r1,r0
00575a  8070              STRH     r0,[r6,#2]
;;;8359   		bat_hndl_t_razr_min=(short)(bat_hndl_remain_time/60L);
00575c  f04f003c          MOV      r0,#0x3c
005760  fb91f1f0          SDIV     r1,r1,r0
005764  b209              SXTH     r1,r1
005766  80b1              STRH     r1,[r6,#4]
;;;8360   		bat_hndl_t_razr_mininhour=bat_hndl_t_razr_min%60L;
005768  fb91f2f0          SDIV     r2,r1,r0
00576c  fb001012          MLS      r0,r0,r2,r1
005770  80f0              STRH     r0,[r6,#6]
005772  e016              B        |L1.22434|
                  |L1.22388|
;;;8361   
;;;8362   		}
;;;8363   	else if(Ib_ips_termokompensat>IKB)
005774  4290              CMP      r0,r2
005776  dd14              BLE      |L1.22434|
;;;8364   		{
;;;8365   		bat_hndl_i_vector=1;
005778  f884900b          STRB     r9,[r4,#0xb]
;;;8366   
;;;8367   		bat_hndl_i=Ib_ips_termokompensat;
00577c  8030              STRH     r0,[r6,#0]
;;;8368   		bat_hndl_i_summ+=(long)bat_hndl_i;
00577e  6eb2              LDR      r2,[r6,#0x68]  ; bat_hndl_i_summ
005780  4410              ADD      r0,r0,r2
005782  66b0              STR      r0,[r6,#0x68]  ; bat_hndl_i_summ
;;;8369   		if(bat_hndl_i_summ>=36000L)
005784  f64842a0          MOV      r2,#0x8ca0
005788  4290              CMP      r0,r2
00578a  db0a              BLT      |L1.22434|
;;;8370   
;;;8371   		//bat_hndl_t_razr=BAT_C_POINT_20*36000L/bat_hndl_i;
;;;8372   		//bat_hndl_proc_razr=1000000L/bat_hndl_t_razr;
;;;8373   			{
;;;8374   			bat_hndl_i_summ-=36000L;
00578c  eba00002          SUB      r0,r0,r2
005790  66b0              STR      r0,[r6,#0x68]  ; bat_hndl_i_summ
;;;8375   			if(bat_hndl_zvu_Q<1000000L)bat_hndl_zvu_Q+=bat_hndl_i_zar_price;
005792  4541              CMP      r1,r8
005794  da03              BGE      |L1.22430|
005796  68f0              LDR      r0,[r6,#0xc]  ; bat_hndl_i_zar_price
005798  4408              ADD      r0,r0,r1
00579a  65b0              STR      r0,[r6,#0x58]  ; bat_hndl_zvu_Q
00579c  e001              B        |L1.22434|
                  |L1.22430|
;;;8376   			else bat_hndl_zvu_Q=1000000L; 
00579e  f8c68058          STR      r8,[r6,#0x58]  ; bat_hndl_zvu_Q
                  |L1.22434|
;;;8377   			}
;;;8378   		}
;;;8379   
;;;8380   
;;;8381   	if(bat_hndl_i_vector!=bat_hndl_i_vector_old)
0057a2  7ae0              LDRB     r0,[r4,#0xb]  ; bat_hndl_i_vector
0057a4  7b21              LDRB     r1,[r4,#0xc]  ; bat_hndl_i_vector_old
0057a6  4288              CMP      r0,r1
0057a8  d00d              BEQ      |L1.22470|
;;;8382   		{
;;;8383   		if(bat_hndl_i_vector==1)
0057aa  2801              CMP      r0,#1
0057ac  d10b              BNE      |L1.22470|
;;;8384   			{
;;;8385   			signed short tempSS;
;;;8386   			tempSS=lc640_read_int(EE_AMPER_CHAS_CNT);
0057ae  f44f70e4          MOV      r0,#0x1c8
0057b2  f7fffffe          BL       lc640_read_int
0057b6  b200              SXTH     r0,r0
;;;8387   			bat_hndl_i_zar_price=(bat_hndl_zvu_Q-1000000L)/((long)tempSS);
0057b8  4a9e              LDR      r2,|L1.23092|
0057ba  6db1              LDR      r1,[r6,#0x58]  ; bat_hndl_zvu_Q
0057bc  4411              ADD      r1,r1,r2
0057be  fb91f0f0          SDIV     r0,r1,r0
0057c2  60f0              STR      r0,[r6,#0xc]  ; bat_hndl_i_zar_price
;;;8388   			bat_hndl_i_summ=0;
0057c4  66b7              STR      r7,[r6,#0x68]  ; bat_hndl_i_summ
                  |L1.22470|
;;;8389   			}
;;;8390   		}
;;;8391   	bat_hndl_i_vector_old=bat_hndl_i_vector;
0057c6  7ae0              LDRB     r0,[r4,#0xb]  ; bat_hndl_i_vector
0057c8  7320              STRB     r0,[r4,#0xc]
;;;8392   
;;;8393   	if((bat_hndl_zvu_Q/10000L)!=lc640_read_int(EE_BAT1_ZAR_CNT)) lc640_write_int(EE_BAT1_ZAR_CNT,bat_hndl_zvu_Q/10000L);
0057ca  6db0              LDR      r0,[r6,#0x58]  ; bat_hndl_zvu_Q
0057cc  f2427a10          MOV      r10,#0x2710
0057d0  fb90f5fa          SDIV     r5,r0,r10
0057d4  f44f79ef          MOV      r9,#0x1de
0057d8  4648              MOV      r0,r9
0057da  f7fffffe          BL       lc640_read_int
0057de  4285              CMP      r5,r0
0057e0  d006              BEQ      |L1.22512|
0057e2  6db0              LDR      r0,[r6,#0x58]  ; bat_hndl_zvu_Q
0057e4  fb90f0fa          SDIV     r0,r0,r10
0057e8  b201              SXTH     r1,r0
0057ea  4648              MOV      r0,r9
0057ec  f7fffffe          BL       lc640_write_int
                  |L1.22512|
;;;8394   	bat_hndl_remain_time=bat_hndl_zvu_Q/bat_hndl_proc_razr;
0057f0  e9d60116          LDRD     r0,r1,[r6,#0x58]
0057f4  fb90f0f1          SDIV     r0,r0,r1
0057f8  6630              STR      r0,[r6,#0x60]  ; bat_hndl_remain_time
                  |L1.22522|
;;;8395   	}
;;;8396   
;;;8397   if(bat_hndl_zvu_Q>1000000L)	bat_hndl_zvu_Q=1000000L;
0057fa  6db0              LDR      r0,[r6,#0x58]  ; bat_hndl_zvu_Q
0057fc  4540              CMP      r0,r8
0057fe  dd02              BLE      |L1.22534|
005800  f8c68058          STR      r8,[r6,#0x58]  ; bat_hndl_zvu_Q
005804  e002              B        |L1.22540|
                  |L1.22534|
;;;8398   else if(bat_hndl_zvu_Q<0L)	bat_hndl_zvu_Q=0L;
005806  2800              CMP      r0,#0
005808  da00              BGE      |L1.22540|
00580a  65b7              STR      r7,[r6,#0x58]  ; bat_hndl_zvu_Q
                  |L1.22540|
;;;8399   
;;;8400   if((Ib_ips_termokompensat/10<(2*IKB))&&(Ib_ips_termokompensat/10>(-2*IKB))&&(!(bat[0]._av&0x01))&& (out_U<=u_necc_up) && (out_U>u_necc_dn) && (main_kb_cnt>=10) && (main_kb_cnt<=200) /*(main_kb_cnt==((TBAT*60)-10))*//*&& ((TVENTMAX!=0))*/ )
00580c  488a              LDR      r0,|L1.23096|
00580e  f9b01000          LDRSH    r1,[r0,#0]  ; Ib_ips_termokompensat
005812  200a              MOVS     r0,#0xa
005814  fb91f0f0          SDIV     r0,r1,r0
005818  4988              LDR      r1,|L1.23100|
00581a  f9b11000          LDRSH    r1,[r1,#0]  ; IKB
00581e  ebb00f41          CMP      r0,r1,LSL #1
005822  da30              BGE      |L1.22662|
005824  4249              RSBS     r1,r1,#0
005826  ebb00f41          CMP      r0,r1,LSL #1
00582a  dd2c              BLE      |L1.22662|
00582c  4884              LDR      r0,|L1.23104|
00582e  f890003d          LDRB     r0,[r0,#0x3d]  ; bat
005832  07c0              LSLS     r0,r0,#31
005834  d127              BNE      |L1.22662|
005836  4883              LDR      r0,|L1.23108|
005838  4983              LDR      r1,|L1.23112|
00583a  f9b00000          LDRSH    r0,[r0,#0]  ; out_U
00583e  f9b11000          LDRSH    r1,[r1,#0]  ; u_necc_up
005842  4288              CMP      r0,r1
005844  dc1f              BGT      |L1.22662|
005846  4981              LDR      r1,|L1.23116|
005848  f9b11000          LDRSH    r1,[r1,#0]  ; u_necc_dn
00584c  4288              CMP      r0,r1
00584e  dd1a              BLE      |L1.22662|
005850  f9b40052          LDRSH    r0,[r4,#0x52]  ; main_kb_cnt
005854  280a              CMP      r0,#0xa
005856  db16              BLT      |L1.22662|
005858  28c8              CMP      r0,#0xc8
00585a  dc14              BGT      |L1.22662|
;;;8401   	{
;;;8402   	if(bat_hndl_zvu_Q_cnt<60)
00585c  f8940030          LDRB     r0,[r4,#0x30]  ; bat_hndl_zvu_Q_cnt
005860  283c              CMP      r0,#0x3c
005862  d20d              BCS      |L1.22656|
;;;8403   		{
;;;8404   		bat_hndl_zvu_Q_cnt++;
005864  f1000001          ADD      r0,r0,#1
005868  b2c0              UXTB     r0,r0
00586a  f8840030          STRB     r0,[r4,#0x30]
;;;8405   		if(bat_hndl_zvu_Q_cnt>=60)
00586e  283c              CMP      r0,#0x3c
005870  d306              BCC      |L1.22656|
;;;8406   			{
;;;8407   			lc640_write_int(EE_BAT1_ZAR_CNT,100);
005872  2164              MOVS     r1,#0x64
005874  f44f70ef          MOV      r0,#0x1de
005878  f7fffffe          BL       lc640_write_int
;;;8408   			bat_hndl_zvu_Q=1000000L;
00587c  f8c68058          STR      r8,[r6,#0x58]  ; bat_hndl_zvu_Q
                  |L1.22656|
;;;8409   
;;;8410   
;;;8411   			}
;;;8412   		}
;;;8413   	}
;;;8414   else 
;;;8415   	{
;;;8416   	bat_hndl_zvu_Q_cnt=0;
;;;8417   	}
;;;8418   
;;;8419   
;;;8420   
;;;8421   };
005880  b009              ADD      sp,sp,#0x24
005882  e8bd8ff0          POP      {r4-r11,pc}
                  |L1.22662|
005886  f8847030          STRB     r7,[r4,#0x30]         ;8416
00588a  e7f9              B        |L1.22656|
;;;8422   #endif
                          ENDP

                  u_avt_set_hndl PROC
;;;8426   //Установка напряжения автономной работы в полуавтоматическом режиме
;;;8427   void u_avt_set_hndl(void)
00588c  e92d5fff          PUSH     {r0-r12,lr}
;;;8428   {
;;;8429   if(uavt_set_stat==uassSTEP1)
005890  4d6f              LDR      r5,|L1.23120|
;;;8430   	{
;;;8431   	char i,find_succes;
;;;8432   
;;;8433   	//u_max_temp=U_AVT+10;//(short)((((long)U_AVT)*101U)/100U);
;;;8434   	//u_min_temp=U_AVT-10;//(short)((((long)U_AVT)*99U)/100U);
;;;8435   	if(uavt_set_stat_old!=uavt_set_stat)
;;;8436   		{
;;;8437   		uavt_set_error_cnt=60;
005892  4e70              LDR      r6,|L1.23124|
005894  f8df81c0          LDR      r8,|L1.23128|
005898  7828              LDRB     r0,[r5,#0]            ;8429  ; uavt_set_stat
;;;8438   		}
;;;8439   	//mess_send(MESS2UNECC_HNDL,PARAM_UNECC_SET,U_AVT,10);
;;;8440   	mess_send(MESS2CNTRL_HNDL,PARAM_CNTRL_STAT_FAST_REG,0,10);
;;;8441   	find_succes=0;
;;;8442   /*	for(i=0;i<NUMIST;i++)
;;;8443   		{
;;;8444   		if((bps[i]._Uii<u_max_temp)&&(bps[i]._Uii>u_min_temp))continue;
;;;8445   		else
;;;8446   			{
;;;8447   			find_succes=0;
;;;8448   			break;
;;;8449   			}
;;;8450   		}*/
;;;8451   	if((bps_U>=U_AVT-1)&&(bps_U<=U_AVT+1))find_succes=1;
00589a  f8dfa1c0          LDR      r10,|L1.23132|
00589e  2400              MOVS     r4,#0                 ;8440
;;;8452   
;;;8453   	if(find_succes==1)
;;;8454   		{
;;;8455   		uavt_set_stat=uassSTEP2;
0058a0  f04f0902          MOV      r9,#2
;;;8456   		}
;;;8457   	if(uavt_set_error_cnt)
;;;8458   		{
;;;8459   		uavt_set_error_cnt--;
;;;8460   		if(!uavt_set_error_cnt)
;;;8461   			{
;;;8462   			uavt_set_stat=uassOFF;
;;;8463   			uavt_set_result_stat=uasrsERR;
;;;8464   			avt_error_bps=100;
0058a4  f04f0b64          MOV      r11,#0x64
0058a8  2801              CMP      r0,#1                 ;8429
0058aa  d12e              BNE      |L1.22794|
0058ac  f8980000          LDRB     r0,[r8,#0]            ;8435  ; uavt_set_stat_old
0058b0  2801              CMP      r0,#1                 ;8435
0058b2  d002              BEQ      |L1.22714|
0058b4  f04f003c          MOV      r0,#0x3c              ;8437
0058b8  7030              STRB     r0,[r6,#0]            ;8437
                  |L1.22714|
0058ba  230a              MOVS     r3,#0xa               ;8440
0058bc  2200              MOVS     r2,#0                 ;8440
0058be  21e6              MOVS     r1,#0xe6              ;8440
0058c0  20e1              MOVS     r0,#0xe1              ;8440
0058c2  f7fffffe          BL       mess_send
0058c6  f04f0000          MOV      r0,#0                 ;8441
0058ca  4965              LDR      r1,|L1.23136|
0058cc  f9b12000          LDRSH    r2,[r1,#0]            ;8451  ; bps_U
0058d0  f9ba1000          LDRSH    r1,[r10,#0]           ;8451  ; U_AVT
0058d4  f1a10301          SUB      r3,r1,#1              ;8451
0058d8  429a              CMP      r2,r3                 ;8451
0058da  db04              BLT      |L1.22758|
0058dc  1c49              ADDS     r1,r1,#1              ;8451
0058de  428a              CMP      r2,r1                 ;8451
0058e0  dc01              BGT      |L1.22758|
0058e2  f04f0001          MOV      r0,#1                 ;8451
                  |L1.22758|
0058e6  2801              CMP      r0,#1                 ;8453
0058e8  d101              BNE      |L1.22766|
0058ea  f8859000          STRB     r9,[r5,#0]            ;8455
                  |L1.22766|
0058ee  7830              LDRB     r0,[r6,#0]            ;8457  ; uavt_set_error_cnt
0058f0  b158              CBZ      r0,|L1.22794|
0058f2  f1a00001          SUB      r0,r0,#1              ;8459
0058f6  b2c0              UXTB     r0,r0                 ;8459
0058f8  7030              STRB     r0,[r6,#0]            ;8459
0058fa  b930              CBNZ     r0,|L1.22794|
0058fc  702c              STRB     r4,[r5,#0]            ;8462
0058fe  4859              LDR      r0,|L1.23140|
005900  f8809000          STRB     r9,[r0,#0]            ;8463
005904  4858              LDR      r0,|L1.23144|
005906  f880b000          STRB     r11,[r0,#0]
                  |L1.22794|
;;;8465   			}
;;;8466   		}
;;;8467   	}
;;;8468   if(uavt_set_stat==uassSTEP2)
00590a  782a              LDRB     r2,[r5,#0]  ; uavt_set_stat
;;;8469   	{
;;;8470   	char i,find_succes;
;;;8471   
;;;8472   	u_max_temp=(short)((((long)U_AVT)*101U)/100U);
00590c  4957              LDR      r1,|L1.23148|
;;;8473   	u_min_temp=(short)((((long)U_AVT)*99U)/100U);
00590e  4858              LDR      r0,|L1.23152|
;;;8474   
;;;8475   	if(uavt_set_stat_old!=uavt_set_stat)
;;;8476   		{
;;;8477   		uavt_set_error_cnt=60;
;;;8478   		}
;;;8479   
;;;8480   	mess_send(MESS2UNECC_HNDL,PARAM_UNECC_SET,U_AVT,10);
;;;8481   	mess_send(MESS2CNTRL_HNDL,PARAM_CNTRL_STAT_FAST_REG,0,10);
;;;8482   	find_succes=1;
;;;8483   
;;;8484   	for(i=0;i<NUMIST;i++)
;;;8485   		{
;;;8486   		if((bps[i]._Uii<u_max_temp)&&(bps[i]._Uii>u_min_temp))continue;
;;;8487   		else
;;;8488   			{
;;;8489   			find_succes=0;
;;;8490   			avt_error_bps=i+1;
;;;8491   			break;
;;;8492   			}
;;;8493   		}
;;;8494   
;;;8495   	if(find_succes==1)
;;;8496   		{
;;;8497   		uavt_set_stat=uassSTEP3;
;;;8498   		uavt_bps_pntr=0;
005910  4f58              LDR      r7,|L1.23156|
005912  2a02              CMP      r2,#2                 ;8468
005914  d002              BEQ      |L1.22812|
;;;8499   		avt_plazma=0;
;;;8500   		}
;;;8501   
;;;8502   	if(uavt_set_error_cnt)
;;;8503   		{
;;;8504   		uavt_set_error_cnt--;
;;;8505   		if(!uavt_set_error_cnt)
;;;8506   			{
;;;8507   			uavt_set_stat=uassOFF;
;;;8508   			uavt_set_result_stat=uasrsERR;
;;;8509   			}
;;;8510   		}
;;;8511   	}
;;;8512   else if(uavt_set_stat==uassSTEP3)
005916  2a03              CMP      r2,#3
005918  d05e              BEQ      |L1.23000|
00591a  e0fb              B        |L1.23316|
                  |L1.22812|
00591c  f9ba2000          LDRSH    r2,[r10,#0]           ;8472  ; U_AVT
005920  f04f0365          MOV      r3,#0x65              ;8472
005924  fb02f303          MUL      r3,r2,r3              ;8472
005928  fbb3f3fb          UDIV     r3,r3,r11             ;8472
00592c  468a              MOV      r10,r1                ;8472
00592e  800b              STRH     r3,[r1,#0]            ;8472
005930  eb021142          ADD      r1,r2,r2,LSL #5       ;8473
005934  eb010141          ADD      r1,r1,r1,LSL #1       ;8473
005938  fbb1f1fb          UDIV     r1,r1,r11             ;8473
00593c  4683              MOV      r11,r0                ;8473
00593e  8001              STRH     r1,[r0,#0]            ;8473
005940  f8980000          LDRB     r0,[r8,#0]            ;8475  ; uavt_set_stat_old
005944  2802              CMP      r0,#2                 ;8475
005946  d002              BEQ      |L1.22862|
005948  f04f003c          MOV      r0,#0x3c              ;8477
00594c  7030              STRB     r0,[r6,#0]            ;8477
                  |L1.22862|
00594e  230a              MOVS     r3,#0xa               ;8480
005950  21bf              MOVS     r1,#0xbf              ;8480
005952  20be              MOVS     r0,#0xbe              ;8480
005954  f7fffffe          BL       mess_send
005958  230a              MOVS     r3,#0xa               ;8481
00595a  2200              MOVS     r2,#0                 ;8481
00595c  21e6              MOVS     r1,#0xe6              ;8481
00595e  20e1              MOVS     r0,#0xe1              ;8481
005960  f7fffffe          BL       mess_send
005964  f04f0201          MOV      r2,#1                 ;8482
005968  f04f0000          MOV      r0,#0                 ;8484
00596c  4943              LDR      r1,|L1.23164|
00596e  f9ba3000          LDRSH    r3,[r10,#0]           ;8484
005972  f8dfe104          LDR      lr,|L1.23160|
005976  f9bbc000          LDRSH    r12,[r11,#0]          ;8486
00597a  f9b1a000          LDRSH    r10,[r1,#0]           ;8484
00597e  e00d              B        |L1.22940|
                  |L1.22912|
005980  eb0001c0          ADD      r1,r0,r0,LSL #3       ;8486
005984  eb011100          ADD      r1,r1,r0,LSL #4       ;8486
005988  eb0e0181          ADD      r1,lr,r1,LSL #2       ;8486
00598c  69c9              LDR      r1,[r1,#0x1c]         ;8486
00598e  4299              CMP      r1,r3                 ;8486
005990  da09              BGE      |L1.22950|
005992  4561              CMP      r1,r12                ;8486
005994  dd07              BLE      |L1.22950|
005996  f1000001          ADD      r0,r0,#1              ;8484
00599a  b2c0              UXTB     r0,r0                 ;8484
                  |L1.22940|
00599c  4550              CMP      r0,r10                ;8484
00599e  dbef              BLT      |L1.22912|
                  |L1.22944|
0059a0  2a01              CMP      r2,#1                 ;8495
0059a2  d007              BEQ      |L1.22964|
0059a4  e00c              B        |L1.22976|
                  |L1.22950|
0059a6  f04f0200          MOV      r2,#0                 ;8489
0059aa  492f              LDR      r1,|L1.23144|
0059ac  f1000001          ADD      r0,r0,#1              ;8490
0059b0  7008              STRB     r0,[r1,#0]            ;8490
0059b2  e7f5              B        |L1.22944|
                  |L1.22964|
0059b4  f04f0003          MOV      r0,#3                 ;8497
0059b8  7028              STRB     r0,[r5,#0]            ;8497
0059ba  703c              STRB     r4,[r7,#0]            ;8498
0059bc  4830              LDR      r0,|L1.23168|
0059be  7004              STRB     r4,[r0,#0]            ;8499
                  |L1.22976|
0059c0  7830              LDRB     r0,[r6,#0]            ;8502  ; uavt_set_error_cnt
0059c2  b370              CBZ      r0,|L1.23074|
0059c4  f1a00001          SUB      r0,r0,#1              ;8504
0059c8  b2c0              UXTB     r0,r0                 ;8504
0059ca  7030              STRB     r0,[r6,#0]            ;8504
0059cc  bb48              CBNZ     r0,|L1.23074|
0059ce  702c              STRB     r4,[r5,#0]            ;8507
0059d0  4824              LDR      r0,|L1.23140|
0059d2  f8809000          STRB     r9,[r0,#0]            ;8508
0059d6  e09d              B        |L1.23316|
                  |L1.23000|
;;;8513   	{
;;;8514   	char i,find_succes;
;;;8515   
;;;8516   	u_max_temp=(short)((((long)U_AVT)*101U)/100U);
0059d8  f9ba2000          LDRSH    r2,[r10,#0]  ; U_AVT
0059dc  f04f0365          MOV      r3,#0x65
0059e0  fb02f303          MUL      r3,r2,r3
0059e4  fbb3f3fb          UDIV     r3,r3,r11
0059e8  468a              MOV      r10,r1
0059ea  800b              STRH     r3,[r1,#0]
;;;8517   	u_min_temp=(short)((((long)U_AVT)*99U)/100U);
0059ec  eb021142          ADD      r1,r2,r2,LSL #5
0059f0  eb010141          ADD      r1,r1,r1,LSL #1
0059f4  fbb1f1fb          UDIV     r1,r1,r11
0059f8  4683              MOV      r11,r0
0059fa  8001              STRH     r1,[r0,#0]
;;;8518   	
;;;8519   	if(uavt_set_stat_old!=uavt_set_stat)
0059fc  f8980000          LDRB     r0,[r8,#0]  ; uavt_set_stat_old
005a00  2803              CMP      r0,#3
005a02  d000              BEQ      |L1.23046|
;;;8520   		{
;;;8521   		uavt_bps_pntr=0;
005a04  703c              STRB     r4,[r7,#0]
                  |L1.23046|
;;;8522   		}
;;;8523   
;;;8524   	mess_send(MESS2UNECC_HNDL,PARAM_UNECC_SET,U_AVT,10);
005a06  230a              MOVS     r3,#0xa
005a08  21bf              MOVS     r1,#0xbf
005a0a  20be              MOVS     r0,#0xbe
005a0c  f7fffffe          BL       mess_send
;;;8525   	mess_send(MESS2CNTRL_HNDL,PARAM_CNTRL_STAT_FAST_REG,0,10);
005a10  230a              MOVS     r3,#0xa
005a12  2200              MOVS     r2,#0
005a14  21e6              MOVS     r1,#0xe6
005a16  20e1              MOVS     r0,#0xe1
005a18  f7fffffe          BL       mess_send
;;;8526   
;;;8527   	find_succes=1;
005a1c  f04f0601          MOV      r6,#1
;;;8528   	for(i=0;i<NUMIST;i++)
005a20  e030              B        |L1.23172|
                  |L1.23074|
005a22  e077              B        |L1.23316|
                  |L1.23076|
                          DCD      BAT_C_POINT_5
                  |L1.23080|
                          DCD      BAT_C_POINT_10
                  |L1.23084|
                          DCD      BAT_C_POINT_20
                  |L1.23088|
                          DCD      BAT_K_OLD
                  |L1.23092|
                          DCD      0xfff0bdc0
                  |L1.23096|
                          DCD      Ib_ips_termokompensat
                  |L1.23100|
                          DCD      IKB
                  |L1.23104|
                          DCD      bat
                  |L1.23108|
                          DCD      out_U
                  |L1.23112|
                          DCD      u_necc_up
                  |L1.23116|
                          DCD      u_necc_dn
                  |L1.23120|
                          DCD      uavt_set_stat
                  |L1.23124|
                          DCD      uavt_set_error_cnt
                  |L1.23128|
                          DCD      uavt_set_stat_old
                  |L1.23132|
                          DCD      U_AVT
                  |L1.23136|
                          DCD      bps_U
                  |L1.23140|
                          DCD      uavt_set_result_stat
                  |L1.23144|
                          DCD      avt_error_bps
                  |L1.23148|
                          DCD      u_max_temp
                  |L1.23152|
                          DCD      u_min_temp
                  |L1.23156|
                          DCD      uavt_bps_pntr
                  |L1.23160|
                          DCD      bps
                  |L1.23164|
                          DCD      NUMIST
                  |L1.23168|
                          DCD      avt_plazma
                  |L1.23172|
005a84  f04f0000          MOV      r0,#0
005a88  f8df942c          LDR      r9,|L1.24248|
005a8c  f9ba2000          LDRSH    r2,[r10,#0]
005a90  f8dfc420          LDR      r12,|L1.24244|
005a94  f9bb3000          LDRSH    r3,[r11,#0]           ;8486
005a98  f9b9a000          LDRSH    r10,[r9,#0]           ;8484
005a9c  e00d              B        |L1.23226|
                  |L1.23198|
;;;8529   		{
;;;8530   		if((bps[i]._Uii<u_max_temp)&&(bps[i]._Uii>u_min_temp))continue;
005a9e  eb0001c0          ADD      r1,r0,r0,LSL #3
005aa2  eb011100          ADD      r1,r1,r0,LSL #4
005aa6  eb0c0181          ADD      r1,r12,r1,LSL #2
005aaa  69c9              LDR      r1,[r1,#0x1c]
005aac  4291              CMP      r1,r2
005aae  da0f              BGE      |L1.23248|
005ab0  4299              CMP      r1,r3
005ab2  dd0d              BLE      |L1.23248|
005ab4  f1000001          ADD      r0,r0,#1              ;8528
005ab8  b2c0              UXTB     r0,r0                 ;8528
                  |L1.23226|
005aba  4550              CMP      r0,r10                ;8528
005abc  dbef              BLT      |L1.23198|
                  |L1.23230|
;;;8531   		else
;;;8532   			{
;;;8533   			find_succes=0;
;;;8534   			break;
;;;8535   			}
;;;8536   		}
;;;8537   
;;;8538   	if(mess_find( (MESS2IND_HNDL)) && (mess_data[0]==PARAM_U_AVT_GOOD) )
005abe  20d7              MOVS     r0,#0xd7
005ac0  f7fffffe          BL       mess_find
005ac4  b1a0              CBZ      r0,|L1.23280|
005ac6  48fd              LDR      r0,|L1.24252|
005ac8  6800              LDR      r0,[r0,#0]  ; mess_data
005aca  28d9              CMP      r0,#0xd9
005acc  d003              BEQ      |L1.23254|
005ace  e00f              B        |L1.23280|
                  |L1.23248|
005ad0  f04f0600          MOV      r6,#0                 ;8533
005ad4  e7f3              B        |L1.23230|
                  |L1.23254|
;;;8539   		{
;;;8540   		if(++uavt_bps_pntr>=NUMIST)
005ad6  7838              LDRB     r0,[r7,#0]  ; uavt_bps_pntr
005ad8  1c40              ADDS     r0,r0,#1
005ada  b2c0              UXTB     r0,r0
005adc  7038              STRB     r0,[r7,#0]
005ade  f9b91000          LDRSH    r1,[r9,#0]  ; NUMIST
005ae2  4288              CMP      r0,r1
005ae4  db04              BLT      |L1.23280|
;;;8541   			{
;;;8542   			uavt_set_stat=uassOFF;
005ae6  702c              STRB     r4,[r5,#0]
;;;8543   			uavt_set_result_stat=uasrsSUCCESS;
005ae8  49f5              LDR      r1,|L1.24256|
005aea  f04f0003          MOV      r0,#3
005aee  7008              STRB     r0,[r1,#0]
                  |L1.23280|
;;;8544   			}
;;;8545   		//uavt_bps_pntr++;
;;;8546   		//if()
;;;8547   		}
;;;8548   	if(find_succes==1)
005af0  2e01              CMP      r6,#1
005af2  d10f              BNE      |L1.23316|
;;;8549   		{
;;;8550   		mcp2515_transmit(uavt_bps_pntr,uavt_bps_pntr,CMND,0xee,0xee,0,0,0);
005af4  20ee              MOVS     r0,#0xee
005af6  e9cd0400          STRD     r0,r4,[sp,#0]
005afa  9402              STR      r4,[sp,#8]
005afc  9403              STR      r4,[sp,#0xc]
005afe  7839              LDRB     r1,[r7,#0]  ; uavt_bps_pntr
005b00  4603              MOV      r3,r0
005b02  2216              MOVS     r2,#0x16
005b04  4608              MOV      r0,r1
005b06  f7fffffe          BL       mcp2515_transmit
;;;8551   		avt_plazma++;
005b0a  48ee              LDR      r0,|L1.24260|
005b0c  7801              LDRB     r1,[r0,#0]  ; avt_plazma
005b0e  f1010101          ADD      r1,r1,#1
005b12  7001              STRB     r1,[r0,#0]
                  |L1.23316|
;;;8552   		}
;;;8553   	}
;;;8554   
;;;8555   
;;;8556   
;;;8557   uavt_set_stat_old=uavt_set_stat;
005b14  7828              LDRB     r0,[r5,#0]  ; uavt_set_stat
005b16  f8880000          STRB     r0,[r8,#0]
;;;8558   
;;;8559   }
005b1a  e8bd9fff          POP      {r0-r12,pc}
;;;8560   
                          ENDP

                  u_necc_hndl PROC
;;;8635   //-----------------------------------------------
;;;8636   void u_necc_hndl(void)
005b1e  b5f8              PUSH     {r3-r7,lr}
;;;8637   {
;;;8638   signed long temp_L;
;;;8639   signed long temp_SL;
;;;8640   //signed short temp_SS;
;;;8641   
;;;8642   //char i;
;;;8643   
;;;8644   //temp_SS=0;
;;;8645   signed short t[2];
;;;8646   
;;;8647   
;;;8648   
;;;8649   
;;;8650   #ifdef UKU_220_IPS_TERMOKOMPENSAT
;;;8651   
;;;8652   if(!TERMOKOMPENS)
005b20  48e9              LDR      r0,|L1.24264|
;;;8653   	{
;;;8654   	//u_necc=U0B;
;;;8655   	u_necc=UB20;
;;;8656   	}
;;;8657   else
;;;8658   	{
;;;8659   	if(ND_EXT[0])t[0]=20;
;;;8660   	else t[0]=t_ext[0];
;;;8661   
;;;8662   	mat_temper=t[0];
;;;8663   			
;;;8664   	if(mat_temper<0)temp_SL=UB0; 
;;;8665   	else 
;;;8666   		{
;;;8667   		if(mat_temper>40)mat_temper=40; 
;;;8668   		temp_SL=(UB20-UB0)*10;
;;;8669   		temp_SL*=mat_temper;
;;;8670   		temp_SL/=200;
;;;8671   		temp_SL+=UB0;
;;;8672   		}
;;;8673   	if((spc_stat==spcVZ)&&((sk_stat[0]==1)||(VZ_CH_VENT_BLOK==0)))
005b22  4dec              LDR      r5,|L1.24276|
005b24  4cec              LDR      r4,|L1.24280|
005b26  8801              LDRH     r1,[r0,#0]            ;8652  ; TERMOKOMPENS
005b28  48e8              LDR      r0,|L1.24268|
005b2a  f9b03000          LDRSH    r3,[r0,#0]            ;8655
;;;8674   		{
;;;8675   		temp_SL=UVZ;
005b2e  48e8              LDR      r0,|L1.24272|
005b30  f9b02000          LDRSH    r2,[r0,#0]
005b34  b139              CBZ      r1,|L1.23366|
005b36  48e9              LDR      r0,|L1.24284|
005b38  7800              LDRB     r0,[r0,#0]            ;8659  ; ND_EXT
005b3a  b130              CBZ      r0,|L1.23370|
005b3c  f04f0014          MOV      r0,#0x14              ;8659
005b40  f8ad0000          STRH     r0,[sp,#0]            ;8659
005b44  e005              B        |L1.23378|
                  |L1.23366|
005b46  8023              STRH     r3,[r4,#0]            ;8655
005b48  e02c              B        |L1.23460|
                  |L1.23370|
005b4a  48e5              LDR      r0,|L1.24288|
005b4c  8800              LDRH     r0,[r0,#0]            ;8660  ; t_ext
005b4e  f8ad0000          STRH     r0,[sp,#0]            ;8660
                  |L1.23378|
005b52  4ee4              LDR      r6,|L1.24292|
005b54  f9bd1000          LDRSH    r1,[sp,#0]            ;8662
005b58  6031              STR      r1,[r6,#0]            ;8662  ; mat_temper
005b5a  48e3              LDR      r0,|L1.24296|
005b5c  2900              CMP      r1,#0                 ;8664
005b5e  f9b00000          LDRSH    r0,[r0,#0]            ;8664
005b62  db12              BLT      |L1.23434|
005b64  2928              CMP      r1,#0x28              ;8667
005b66  dd02              BLE      |L1.23406|
005b68  f04f0128          MOV      r1,#0x28              ;8667
005b6c  6031              STR      r1,[r6,#0]            ;8667  ; mat_temper
                  |L1.23406|
005b6e  eba30100          SUB      r1,r3,r0              ;8668
005b72  eb010181          ADD      r1,r1,r1,LSL #2       ;8668
005b76  ea4f0141          LSL      r1,r1,#1              ;8668
005b7a  6833              LDR      r3,[r6,#0]            ;8669  ; mat_temper
005b7c  fb01f103          MUL      r1,r1,r3              ;8669
005b80  f04f03c8          MOV      r3,#0xc8              ;8670
005b84  fb91f1f3          SDIV     r1,r1,r3              ;8670
005b88  4408              ADD      r0,r0,r1              ;8671
                  |L1.23434|
005b8a  f8951023          LDRB     r1,[r5,#0x23]         ;8673  ; spc_stat
005b8e  2902              CMP      r1,#2                 ;8673
005b90  d107              BNE      |L1.23458|
005b92  49d6              LDR      r1,|L1.24300|
005b94  7809              LDRB     r1,[r1,#0]            ;8673  ; sk_stat
005b96  2901              CMP      r1,#1                 ;8673
005b98  d002              BEQ      |L1.23456|
005b9a  49d5              LDR      r1,|L1.24304|
005b9c  8809              LDRH     r1,[r1,#0]            ;8673  ; VZ_CH_VENT_BLOK
005b9e  b901              CBNZ     r1,|L1.23458|
                  |L1.23456|
005ba0  4610              MOV      r0,r2
                  |L1.23458|
;;;8676   		}
;;;8677   	u_necc=(unsigned int)temp_SL;
005ba2  8020              STRH     r0,[r4,#0]
                  |L1.23460|
;;;8678   	///u_necc=3456;
;;;8679   	}  
;;;8680   
;;;8681   //u_necc=2355;
;;;8682   
;;;8683   if((speedChIsOn)||(sp_ch_stat==scsWRK))
005ba4  48d3              LDR      r0,|L1.24308|
005ba6  8800              LDRH     r0,[r0,#0]  ; speedChIsOn
005ba8  b918              CBNZ     r0,|L1.23474|
005baa  48d3              LDR      r0,|L1.24312|
005bac  7800              LDRB     r0,[r0,#0]  ; sp_ch_stat
005bae  2802              CMP      r0,#2
005bb0  d102              BNE      |L1.23480|
                  |L1.23474|
;;;8684   	{
;;;8685   	u_necc=speedChrgVolt;
005bb2  48d2              LDR      r0,|L1.24316|
005bb4  8800              LDRH     r0,[r0,#0]  ; speedChrgVolt
005bb6  8020              STRH     r0,[r4,#0]
                  |L1.23480|
;;;8686   	}
;;;8687   if(hv_vz_stat==hvsWRK)
005bb8  48d1              LDR      r0,|L1.24320|
005bba  7800              LDRB     r0,[r0,#0]  ; hv_vz_stat
005bbc  2805              CMP      r0,#5
005bbe  d100              BNE      |L1.23490|
;;;8688   	{
;;;8689   	u_necc=UVZ;
005bc0  8022              STRH     r2,[r4,#0]
                  |L1.23490|
;;;8690   	}
;;;8691   if(vz1_stat==vz1sWRK)
005bc2  7968              LDRB     r0,[r5,#5]  ; vz1_stat
005bc4  280a              CMP      r0,#0xa
005bc6  d102              BNE      |L1.23502|
;;;8692   	{
;;;8693   	u_necc=UZ_U;
005bc8  48ce              LDR      r0,|L1.24324|
005bca  8800              LDRH     r0,[r0,#0]  ; UZ_U
005bcc  8020              STRH     r0,[r4,#0]
                  |L1.23502|
;;;8694   	}
;;;8695   if(vz2_stat==vz2sWRK1)
005bce  79e8              LDRB     r0,[r5,#7]  ; vz2_stat
005bd0  280a              CMP      r0,#0xa
005bd2  d102              BNE      |L1.23514|
;;;8696   	{
;;;8697   	u_necc=FZ_U1;
005bd4  49cc              LDR      r1,|L1.24328|
005bd6  8809              LDRH     r1,[r1,#0]  ; FZ_U1
005bd8  8021              STRH     r1,[r4,#0]
                  |L1.23514|
;;;8698   	}
;;;8699   if(vz2_stat==vz2sWRK2)
005bda  280b              CMP      r0,#0xb
005bdc  d102              BNE      |L1.23524|
;;;8700   	{
;;;8701   	u_necc=FZ_U2;
005bde  48cb              LDR      r0,|L1.24332|
005be0  8800              LDRH     r0,[r0,#0]  ; FZ_U2
005be2  8020              STRH     r0,[r4,#0]
                  |L1.23524|
;;;8702   	}
;;;8703   
;;;8704   if((uavt_set_stat==uassSTEP1)||(uavt_set_stat==uassSTEP2))
005be4  48ca              LDR      r0,|L1.24336|
005be6  7800              LDRB     r0,[r0,#0]  ; uavt_set_stat
005be8  2801              CMP      r0,#1
005bea  d001              BEQ      |L1.23536|
005bec  2802              CMP      r0,#2
005bee  d102              BNE      |L1.23542|
                  |L1.23536|
;;;8705   	{
;;;8706   	u_necc=U_AVT;
005bf0  48c8              LDR      r0,|L1.24340|
005bf2  8800              LDRH     r0,[r0,#0]  ; U_AVT
005bf4  8020              STRH     r0,[r4,#0]
                  |L1.23542|
;;;8707   	}
;;;8708   
;;;8709   if(mess_find_unvol(MESS2UNECC_HNDL))
005bf6  20be              MOVS     r0,#0xbe
005bf8  f7fffffe          BL       mess_find_unvol
005bfc  b128              CBZ      r0,|L1.23562|
;;;8710   	{		
;;;8711   	if(mess_data[0]==PARAM_UNECC_SET)
005bfe  48af              LDR      r0,|L1.24252|
005c00  6801              LDR      r1,[r0,#0]  ; mess_data
005c02  29bf              CMP      r1,#0xbf
005c04  d101              BNE      |L1.23562|
;;;8712   		{
;;;8713   		u_necc=mess_data[1];
005c06  6840              LDR      r0,[r0,#4]  ; mess_data
005c08  8020              STRH     r0,[r4,#0]
                  |L1.23562|
;;;8714   		}		
;;;8715   	} 
;;;8716   
;;;8717   //if(ICA_EN)u_necc+=ica_u_necc;
;;;8718   #endif
;;;8719   
;;;8720   
;;;8721   #ifndef UKU_220_IPS_TERMOKOMPENSAT
;;;8722   
;;;8723   #ifndef UKU_TELECORE2015
;;;8724   #ifndef UKU_TELECORE2017
;;;8725   if(unh_cnt0<10)
;;;8726   	{
;;;8727   	unh_cnt0++;
;;;8728   	if(unh_cnt0>=10)
;;;8729   		{
;;;8730   		unh_cnt0=0;
;;;8731   		b1Hz_unh=1;
;;;8732   		}
;;;8733   	}
;;;8734   
;;;8735   if(unh_cnt1<5)
;;;8736   	{
;;;8737   	unh_cnt1++;
;;;8738   	if(unh_cnt1==5)
;;;8739   		{
;;;8740   		unh_cnt1=0;
;;;8741   //		b2Hz_unh=1;
;;;8742   		}
;;;8743   	} 
;;;8744   
;;;8745   
;;;8746   
;;;8747   if(mess_find_unvol(MESS2UNECC_HNDL))
;;;8748   	{		
;;;8749   	if(mess_data[0]==PARAM_UNECC_SET)
;;;8750   		{
;;;8751   		u_necc=mess_data[1];
;;;8752   		}		
;;;8753   	}
;;;8754   
;;;8755   
;;;8756   else if(b1Hz_unh)
;;;8757   	{
;;;8758   	
;;;8759   	if((BAT_IS_ON[0]!=bisON) && (BAT_IS_ON[1]!=bisON))
;;;8760   		{
;;;8761   		
;;;8762   		u_necc=U0B;
;;;8763   		#ifdef IPS_SGEP_GAZPROM
;;;8764   		u_necc=UB0;
;;;8765   		#endif
;;;8766   		}
;;;8767   	else 
;;;8768   		{
;;;8769   		if(BAT_TYPE==0) //если батарея обычная
;;;8770   			{
;;;8771   			for(i=0;i<2;i++)
;;;8772   				{
;;;8773   				if(BAT_IS_ON[i]==bisON)
;;;8774   					{
;;;8775   					if(bat[i]._nd)t[i]=20;
;;;8776   					else t[i]=bat[i]._Tb;
;;;8777   					}
;;;8778   				else
;;;8779   					{
;;;8780   					t[i]=-20;
;;;8781   					}
;;;8782   				}
;;;8783   			if(t[0]>t[1])mat_temper=t[0];
;;;8784   			else mat_temper=t[1];
;;;8785   			
;;;8786   		
;;;8787   			if(mat_temper<0)temp_SL=UB0; 
;;;8788   			else 
;;;8789   				{
;;;8790   				if(mat_temper>40)mat_temper=40; 
;;;8791   				temp_SL=(UB20-UB0)*10;
;;;8792   				temp_SL*=mat_temper;
;;;8793   				temp_SL/=200;
;;;8794   				temp_SL+=UB0;
;;;8795   				}
;;;8796   			if((spc_stat==spcVZ)&&(sk_stat[0]==1))
;;;8797   				{
;;;8798   				temp_SL=UVZ;
;;;8799   				}
;;;8800   			u_necc=(unsigned int)temp_SL;
;;;8801   			}
;;;8802   		else if(BAT_TYPE==1) //если батарея китайская
;;;8803   			{
;;;8804   			u_necc=U0B;
;;;8805   					
;;;8806   			u_necc=bat[0]._Ub+10;
;;;8807   
;;;8808   			
;;;8809   			if((spc_stat==spcVZ)&&(sk_stat[0]==1))
;;;8810   				{
;;;8811   				u_necc=UVZ;
;;;8812   				}
;;;8813   			if(u_necc>=UB0) u_necc=UB0;
;;;8814   			if(u_necc>=UB20) u_necc=UB20;
;;;8815   			}
;;;8816   		}  
;;;8817   	}
;;;8818   #endif
;;;8819   #endif
;;;8820   
;;;8821   #ifdef UKU_TELECORE2015
;;;8822   
;;;8823   if(unh_cnt0<10)
;;;8824   	{
;;;8825   	unh_cnt0++;
;;;8826   	if(unh_cnt0>=10)
;;;8827   		{
;;;8828   		unh_cnt0=0;
;;;8829   		b1Hz_unh=1;
;;;8830   		}
;;;8831   	}
;;;8832   
;;;8833   if(unh_cnt1<5)
;;;8834   	{
;;;8835   	unh_cnt1++;
;;;8836   	if(unh_cnt1==5)
;;;8837   		{
;;;8838   		unh_cnt1=0;
;;;8839   //		b2Hz_unh=1;
;;;8840   		}
;;;8841   	} 
;;;8842   
;;;8843   
;;;8844   
;;;8845   if(mess_find_unvol(MESS2UNECC_HNDL))
;;;8846   	{		
;;;8847   	if(mess_data[0]==PARAM_UNECC_SET)
;;;8848   		{
;;;8849   		u_necc=mess_data[1];
;;;8850   		}		
;;;8851   	}
;;;8852   
;;;8853   
;;;8854   else if(b1Hz_unh)
;;;8855   	{
;;;8856   	b1Hz_unh=0;
;;;8857   
;;;8858   	if(BAT_TYPE==0)
;;;8859   		{
;;;8860   		if(bat[0]._nd)mat_temper=20;
;;;8861   		else mat_temper=bat[0]._Tb;
;;;8862   
;;;8863   			
;;;8864   		if(mat_temper<0)temp_SL=UB0; 
;;;8865   		else 
;;;8866   			{
;;;8867   			if(mat_temper>40)mat_temper=40; 
;;;8868   			temp_SL=(UB20-UB0)*10;
;;;8869   			temp_SL*=mat_temper;
;;;8870   			temp_SL/=200;
;;;8871   			temp_SL+=UB0;
;;;8872   			}
;;;8873   		if((spc_stat==spcVZ)&&(sk_stat[0]==1))
;;;8874   			{
;;;8875   			temp_SL=UVZ;
;;;8876   			}
;;;8877   		u_necc=(unsigned int)temp_SL;
;;;8878   	///u_necc=3456;
;;;8879   		}
;;;8880   	else if(BAT_TYPE==1)
;;;8881   		{
;;;8882   		
;;;8883   		gran(&DU_LI_BAT,1,30);
;;;8884   		u_necc=li_bat._Ub+DU_LI_BAT;
;;;8885   		gran(&u_necc,0,UB0);
;;;8886   		gran(&u_necc,0,UB20);
;;;8887   		gran(&u_necc,0,540);		
;;;8888   
;;;8889   
;;;8890   		if(li_bat._batStat!=bsOK)
;;;8891   			{
;;;8892   			u_necc=U0B;
;;;8893   			}
;;;8894   		if((spc_stat==spcVZ)&&(sk_stat[0]==1))
;;;8895   			{
;;;8896   			u_necc=UVZ;
;;;8897   			}
;;;8898   		/* 
;;;8899   		u_necc=U0B;
;;;8900   		
;;;8901   
;;;8902   	
;;;8903   		u_necc=UB0;
;;;8904   		u_necc=li_bat._Ub+10;
;;;8905   		if((li_bat._Ub<450)||(li_bat._Ub>550))
;;;8906   			{
;;;8907   			lakb_error_cnt++;
;;;8908   			if(lakb_error_cnt>=30)
;;;8909   				{
;;;8910   				lakb_error_cnt=30;
;;;8911   				u_necc=U0B;
;;;8912   				}
;;;8913   			}
;;;8914   		else lakb_error_cnt=0;*/
;;;8915   		}
;;;8916   	else if(BAT_TYPE==2)
;;;8917   		{
;;;8918   		u_necc=U0B;
;;;8919   		
;;;8920   		if((spc_stat==spcVZ)&&(sk_stat[0]==1))
;;;8921   			{
;;;8922   			u_necc=UVZ;
;;;8923   			}
;;;8924   	
;;;8925   		u_necc=UB0;
;;;8926   		}
;;;8927   
;;;8928   	else if(BAT_TYPE==3)
;;;8929   		{
;;;8930   		u_necc=U0B;
;;;8931   		
;;;8932   		if((spc_stat==spcVZ)&&(sk_stat[0]==1))
;;;8933   			{
;;;8934   			u_necc=UVZ;
;;;8935   			}
;;;8936   
;;;8937   		gran(&DU_LI_BAT,1,30);
;;;8938   
;;;8939   
;;;8940   		if(lakbNotErrorNum==0)
;;;8941   			{
;;;8942   			u_necc=U0B;
;;;8943   			}
;;;8944   		else 
;;;8945   			{
;;;8946   			signed short i;
;;;8947   			//signed short u_necc_max;
;;;8948   			//u_necc_max=0;
;;;8949   			char soc_flag=0;
;;;8950   
;;;8951   			for(i=(NUMBAT_TELECORE-1);i>=0;i--)
;;;8952   				{
;;;8953   				if(lakb[i]._communicationFullErrorStat==0)u_necc=lakb[i]._tot_bat_volt+DU_LI_BAT;
;;;8954   				if(lakb[i]._s_o_c_percent<QSODERG_LI_BAT)soc_flag=1;
;;;8955   				}
;;;8956   
;;;8957   			if(soc_flag==0)u_necc=USODERG_LI_BAT;
;;;8958   			}
;;;8959   		gran(&u_necc,0,UB0);
;;;8960   		//gran(&u_necc,0,UB20);
;;;8961   		gran(&u_necc,0,540);
;;;8962   		}
;;;8963   	}
;;;8964   
;;;8965   #endif 
;;;8966   
;;;8967   #ifdef UKU_TELECORE2017
;;;8968   
;;;8969   if(unh_cnt0<10)
;;;8970   	{
;;;8971   	unh_cnt0++;
;;;8972   	if(unh_cnt0>=10)
;;;8973   		{
;;;8974   		unh_cnt0=0;
;;;8975   		b1Hz_unh=1;
;;;8976   		}
;;;8977   	}
;;;8978   
;;;8979   if(unh_cnt1<5)
;;;8980   	{
;;;8981   	unh_cnt1++;
;;;8982   	if(unh_cnt1==5)
;;;8983   		{
;;;8984   		unh_cnt1=0;
;;;8985   //		b2Hz_unh=1;
;;;8986   		}
;;;8987   	} 
;;;8988   
;;;8989   
;;;8990   
;;;8991   if(mess_find_unvol(MESS2UNECC_HNDL))
;;;8992   	{		
;;;8993   	if(mess_data[0]==PARAM_UNECC_SET)
;;;8994   		{
;;;8995   		u_necc=mess_data[1];
;;;8996   		}		
;;;8997   	}
;;;8998   
;;;8999   
;;;9000   else if(b1Hz_unh)
;;;9001   	{
;;;9002   	b1Hz_unh=0;
;;;9003   
;;;9004   	if(BAT_TYPE==0)
;;;9005   		{
;;;9006   		if(bat[0]._nd)mat_temper=20;
;;;9007   		else mat_temper=bat[0]._Tb;
;;;9008   
;;;9009   			
;;;9010   		if(mat_temper<0)temp_SL=UB0; 
;;;9011   		else 
;;;9012   			{
;;;9013   			if(mat_temper>40)mat_temper=40; 
;;;9014   			temp_SL=(UB20-UB0)*10;
;;;9015   			temp_SL*=mat_temper;
;;;9016   			temp_SL/=200;
;;;9017   			temp_SL+=UB0;
;;;9018   			}
;;;9019   		if((spc_stat==spcVZ)&&(sk_stat[0]==1))
;;;9020   			{
;;;9021   			temp_SL=UVZ;
;;;9022   			}
;;;9023   		u_necc=(unsigned int)temp_SL;
;;;9024   	///u_necc=3456;
;;;9025   		}
;;;9026   	else if(BAT_TYPE==1)
;;;9027   		{
;;;9028   		
;;;9029   		gran(&DU_LI_BAT,1,30);
;;;9030   		u_necc=li_bat._Ub+DU_LI_BAT;
;;;9031   		gran(&u_necc,0,UB0);
;;;9032   		gran(&u_necc,0,UB20);
;;;9033   		gran(&u_necc,0,540);		
;;;9034   
;;;9035   
;;;9036   		if(li_bat._batStat!=bsOK)
;;;9037   			{
;;;9038   			u_necc=U0B;
;;;9039   			}
;;;9040   		if((spc_stat==spcVZ)&&(sk_stat[0]==1))
;;;9041   			{
;;;9042   			u_necc=UVZ;
;;;9043   			}
;;;9044   		}
;;;9045   	else if(BAT_TYPE==2)
;;;9046   		{
;;;9047   		u_necc=U0B;
;;;9048   		
;;;9049   		if((spc_stat==spcVZ)&&(sk_stat[0]==1))
;;;9050   			{
;;;9051   			u_necc=UVZ;
;;;9052   			}
;;;9053   	
;;;9054   		u_necc=UB0;
;;;9055   		}
;;;9056   
;;;9057   	else if(BAT_TYPE==3)
;;;9058   		{
;;;9059   		u_necc=U0B;
;;;9060   		
;;;9061   		if((spc_stat==spcVZ)&&(sk_stat[0]==1))
;;;9062   			{
;;;9063   			u_necc=UVZ;
;;;9064   			}
;;;9065   
;;;9066   		gran(&DU_LI_BAT,1,30);
;;;9067   
;;;9068   
;;;9069   		if(lakbNotErrorNum==0)
;;;9070   			{
;;;9071   			u_necc=U0B;
;;;9072   			}
;;;9073   		else 
;;;9074   			{
;;;9075   			signed short i;
;;;9076   			//signed short u_necc_max;
;;;9077   			//u_necc_max=0;
;;;9078   			char soc_flag=0;
;;;9079   
;;;9080   			for(i=(NUMBAT_TELECORE-1);i>=0;i--)
;;;9081   				{
;;;9082   				if(lakb[i]._communicationFullErrorStat==0)u_necc=lakb[i]._tot_bat_volt+DU_LI_BAT;
;;;9083   				if(lakb[i]._s_o_c_percent<QSODERG_LI_BAT)soc_flag=1;
;;;9084   				}
;;;9085   
;;;9086   			if(soc_flag==0)u_necc=USODERG_LI_BAT;
;;;9087   			}
;;;9088   		gran(&u_necc,0,UB0);
;;;9089   		//gran(&u_necc,0,UB20);
;;;9090   		gran(&u_necc,0,540);
;;;9091   		}
;;;9092   	}
;;;9093   
;;;9094   #endif 
;;;9095   //u_necc=2356;
;;;9096   
;;;9097   if((speedChIsOn)||(sp_ch_stat==scsWRK))
;;;9098   	{
;;;9099   	u_necc=speedChrgVolt;
;;;9100   	}
;;;9101   #endif//gran(&u_necc,400,UMAX);
;;;9102   
;;;9103   
;;;9104   
;;;9105   temp_L=(signed long) u_necc;
005c0a  f9b40000          LDRSH    r0,[r4,#0]  ; u_necc
;;;9106   temp_L*=98L;
005c0e  f04f0162          MOV      r1,#0x62
005c12  fb00f101          MUL      r1,r0,r1
;;;9107   temp_L/=100L;
005c16  f04f0264          MOV      r2,#0x64
005c1a  fb91f1f2          SDIV     r1,r1,r2
;;;9108   u_necc_dn=(signed short)temp_L;
005c1e  4bbe              LDR      r3,|L1.24344|
005c20  8019              STRH     r1,[r3,#0]
;;;9109   
;;;9110   temp_L=(signed long) u_necc;
;;;9111   temp_L*=102L;
005c22  f04f0166          MOV      r1,#0x66
005c26  fb00f001          MUL      r0,r0,r1
;;;9112   temp_L/=100L;
005c2a  fb90f0f2          SDIV     r0,r0,r2
;;;9113   u_necc_up=(signed short)temp_L;
005c2e  49bb              LDR      r1,|L1.24348|
005c30  8008              STRH     r0,[r1,#0]
;;;9114   /*
;;;9115   #ifdef IPS_SGEP_GAZPROM
;;;9116   u_necc=248;
;;;9117   #endif */
;;;9118   }
005c32  bdf8              POP      {r3-r7,pc}
;;;9119   
                          ENDP

                  num_necc_hndl PROC
;;;9121   //-----------------------------------------------
;;;9122   void num_necc_hndl(void)
005c34  e92d41f0          PUSH     {r4-r8,lr}
;;;9123   {
;;;9124   
;;;9125   static short num_necc_block_cnt;
;;;9126   if(num_necc_block_cnt) num_necc_block_cnt--;
005c38  4ca6              LDR      r4,|L1.24276|
005c3a  f9b40038          LDRSH    r0,[r4,#0x38]  ; num_necc_block_cnt
005c3e  b110              CBZ      r0,|L1.23622|
005c40  f1a00001          SUB      r0,r0,#1
005c44  8720              STRH     r0,[r4,#0x38]
                  |L1.23622|
;;;9127   
;;;9128   Isumm_=Isumm;
005c46  48b6              LDR      r0,|L1.24352|
005c48  4db6              LDR      r5,|L1.24356|
005c4a  8800              LDRH     r0,[r0,#0]  ; Isumm
005c4c  8028              STRH     r0,[r5,#0]
;;;9129   
;;;9130   if(bat[0]._Ib<0) Isumm_+=(abs(bat[0]._Ib))/10;
005c4e  4eb6              LDR      r6,|L1.24360|
005c50  270a              MOVS     r7,#0xa
005c52  f9b60008          LDRSH    r0,[r6,#8]  ; bat
005c56  2800              CMP      r0,#0
005c58  da06              BGE      |L1.23656|
005c5a  f7fffffe          BL       abs
005c5e  fb90f0f7          SDIV     r0,r0,r7
005c62  8829              LDRH     r1,[r5,#0]  ; Isumm_
005c64  4408              ADD      r0,r0,r1
005c66  8028              STRH     r0,[r5,#0]
                  |L1.23656|
;;;9131   if(bat[1]._Ib<0) Isumm_+=(abs(bat[1]._Ib))/10;
005c68  f9b60054          LDRSH    r0,[r6,#0x54]  ; bat
005c6c  2800              CMP      r0,#0
005c6e  da06              BGE      |L1.23678|
005c70  f7fffffe          BL       abs
005c74  fb90f0f7          SDIV     r0,r0,r7
005c78  8829              LDRH     r1,[r5,#0]  ; Isumm_
005c7a  4408              ADD      r0,r0,r1
005c7c  8028              STRH     r0,[r5,#0]
                  |L1.23678|
;;;9132   
;;;9133   num_necc_up=(Isumm_/((signed short)IMAX))+1;
005c7e  49ab              LDR      r1,|L1.24364|
005c80  f9b50000          LDRSH    r0,[r5,#0]  ; Isumm_
005c84  f9b11000          LDRSH    r1,[r1,#0]  ; IMAX
005c88  fb90f1f1          SDIV     r1,r0,r1
005c8c  f1010101          ADD      r1,r1,#1
005c90  b2c9              UXTB     r1,r1
005c92  77e1              STRB     r1,[r4,#0x1f]
;;;9134   ////Isumm_+=(signed short)((IMAX*(10-KIMAX))/10);
;;;9135   ////Isumm_+=(signed short)(IMAX-IMIN);
;;;9136   
;;;9137   num_necc_down=(Isumm_/((signed short)IMIN))+1;
005c94  4aa6              LDR      r2,|L1.24368|
005c96  f9b22000          LDRSH    r2,[r2,#0]  ; IMIN
005c9a  fb90f0f2          SDIV     r0,r0,r2
005c9e  f1000001          ADD      r0,r0,#1
005ca2  b2c2              UXTB     r2,r0
005ca4  f8842020          STRB     r2,[r4,#0x20]
;;;9138   
;;;9139   if(num_necc_up>num_necc)
005ca8  48a2              LDR      r0,|L1.24372|
;;;9140   	{
;;;9141   	num_necc=num_necc_up;
;;;9142   	num_necc_block_cnt=60;
005caa  f04f053c          MOV      r5,#0x3c
005cae  f9b03000          LDRSH    r3,[r0,#0]            ;9139  ; num_necc
005cb2  4299              CMP      r1,r3                 ;9139
005cb4  dd02              BLE      |L1.23740|
005cb6  8001              STRH     r1,[r0,#0]            ;9141
005cb8  8725              STRH     r5,[r4,#0x38]
005cba  e005              B        |L1.23752|
                  |L1.23740|
;;;9143   	}
;;;9144   else if(num_necc_down<num_necc)
005cbc  429a              CMP      r2,r3
005cbe  da03              BGE      |L1.23752|
;;;9145   	{
;;;9146   	if(!num_necc_block_cnt)
005cc0  8f21              LDRH     r1,[r4,#0x38]  ; num_necc_block_cnt
005cc2  b909              CBNZ     r1,|L1.23752|
;;;9147   		{
;;;9148   		num_necc=num_necc_down;
005cc4  8002              STRH     r2,[r0,#0]
;;;9149   		num_necc_block_cnt=60;
005cc6  8725              STRH     r5,[r4,#0x38]
                  |L1.23752|
;;;9150   		}
;;;9151   	}
;;;9152   
;;;9153   if(PAR) num_necc=NUMIST;
005cc8  499b              LDR      r1,|L1.24376|
005cca  880a              LDRH     r2,[r1,#0]  ; PAR
005ccc  497a              LDR      r1,|L1.24248|
005cce  b10a              CBZ      r2,|L1.23764|
005cd0  880a              LDRH     r2,[r1,#0]  ; NUMIST
005cd2  8002              STRH     r2,[r0,#0]
                  |L1.23764|
;;;9154   #ifdef UKU_220_IPS_TERMOKOMPENSAT
;;;9155   if(bPARALLEL) num_necc=NUMIST;
005cd4  f894202d          LDRB     r2,[r4,#0x2d]  ; bPARALLEL
005cd8  b10a              CBZ      r2,|L1.23774|
005cda  880a              LDRH     r2,[r1,#0]  ; NUMIST
005cdc  8002              STRH     r2,[r0,#0]
                  |L1.23774|
;;;9156   if(vz1_stat==vz1sWRK)num_necc=NUMIST; //Включаем все источники если уравнительный заряд
005cde  7962              LDRB     r2,[r4,#5]  ; vz1_stat
005ce0  2a0a              CMP      r2,#0xa
005ce2  d101              BNE      |L1.23784|
005ce4  880a              LDRH     r2,[r1,#0]  ; NUMIST
005ce6  8002              STRH     r2,[r0,#0]
                  |L1.23784|
;;;9157   if((vz2_stat==vz2sWRK1)||(vz2_stat==vz2sWRK2))num_necc=NUMIST; //Включаем все источники если уравнительный заряд
005ce8  79e2              LDRB     r2,[r4,#7]  ; vz2_stat
005cea  2a0a              CMP      r2,#0xa
005cec  d001              BEQ      |L1.23794|
005cee  2a0b              CMP      r2,#0xb
005cf0  d101              BNE      |L1.23798|
                  |L1.23794|
005cf2  880a              LDRH     r2,[r1,#0]  ; NUMIST
005cf4  8002              STRH     r2,[r0,#0]
                  |L1.23798|
;;;9158   #endif
;;;9159   
;;;9160   gran(&num_necc,1,NUMIST);
005cf6  f9b12000          LDRSH    r2,[r1,#0]  ; NUMIST
005cfa  e8bd41f0          POP      {r4-r8,lr}
005cfe  2101              MOVS     r1,#1
005d00  488c              LDR      r0,|L1.24372|
005d02  f7ffbffe          B.W      gran
;;;9161   
;;;9162   }
;;;9163   
                          ENDP

                  cntrl_hndl PROC
;;;9166   //-----------------------------------------------
;;;9167   void cntrl_hndl(void)
005d06  e92d5ff0          PUSH     {r4-r12,lr}
;;;9168   {
;;;9169   
;;;9170   
;;;9171   
;;;9172   IZMAX_=IZMAX;
005d0a  488c              LDR      r0,|L1.24380|
005d0c  4c71              LDR      r4,|L1.24276|
005d0e  8800              LDRH     r0,[r0,#0]  ; IZMAX
005d10  f8a4004c          STRH     r0,[r4,#0x4c]
;;;9173   
;;;9174   //cntrl_hndl_plazma=10;
;;;9175   
;;;9176   if((speedChIsOn)||(sp_ch_stat==scsWRK))IZMAX_=speedChrgCurr;
005d14  4877              LDR      r0,|L1.24308|
005d16  8800              LDRH     r0,[r0,#0]  ; speedChIsOn
005d18  b918              CBNZ     r0,|L1.23842|
005d1a  4877              LDR      r0,|L1.24312|
005d1c  7800              LDRB     r0,[r0,#0]  ; sp_ch_stat
005d1e  2802              CMP      r0,#2
005d20  d103              BNE      |L1.23850|
                  |L1.23842|
005d22  4887              LDR      r0,|L1.24384|
005d24  8800              LDRH     r0,[r0,#0]  ; speedChrgCurr
005d26  f8a4004c          STRH     r0,[r4,#0x4c]
                  |L1.23850|
;;;9177   if(vz1_stat==vz1sWRK) IZMAX_=UZ_IMAX;
005d2a  7960              LDRB     r0,[r4,#5]  ; vz1_stat
005d2c  280a              CMP      r0,#0xa
005d2e  d103              BNE      |L1.23864|
005d30  4884              LDR      r0,|L1.24388|
005d32  8800              LDRH     r0,[r0,#0]  ; UZ_IMAX
005d34  f8a4004c          STRH     r0,[r4,#0x4c]
                  |L1.23864|
;;;9178   if(vz2_stat==vz2sWRK1) IZMAX_=FZ_IMAX1;
005d38  79e0              LDRB     r0,[r4,#7]  ; vz2_stat
005d3a  280a              CMP      r0,#0xa
005d3c  d103              BNE      |L1.23878|
005d3e  4982              LDR      r1,|L1.24392|
005d40  8809              LDRH     r1,[r1,#0]  ; FZ_IMAX1
005d42  f8a4104c          STRH     r1,[r4,#0x4c]
                  |L1.23878|
;;;9179   if(vz2_stat==vz2sWRK2) IZMAX_=FZ_IMAX2;
005d46  280b              CMP      r0,#0xb
005d48  d103              BNE      |L1.23890|
005d4a  4880              LDR      r0,|L1.24396|
005d4c  8800              LDRH     r0,[r0,#0]  ; FZ_IMAX2
005d4e  f8a4004c          STRH     r0,[r4,#0x4c]
                  |L1.23890|
;;;9180   //if(spc_stat==spcVZ) IZMAX_=IMAX_VZ;
;;;9181   
;;;9182   if(cntrl_stat_blok_cnt)cntrl_stat_blok_cnt--;
005d52  f9b40070          LDRSH    r0,[r4,#0x70]  ; cntrl_stat_blok_cnt
005d56  b118              CBZ      r0,|L1.23904|
005d58  f1a00001          SUB      r0,r0,#1
005d5c  f8a40070          STRH     r0,[r4,#0x70]
                  |L1.23904|
;;;9183   if(cntrl_stat_blok_cnt_)cntrl_stat_blok_cnt_--;
005d60  f9b40072          LDRSH    r0,[r4,#0x72]  ; cntrl_stat_blok_cnt_
005d64  b118              CBZ      r0,|L1.23918|
005d66  f1a00001          SUB      r0,r0,#1
005d6a  f8a40072          STRH     r0,[r4,#0x72]
                  |L1.23918|
;;;9184   
;;;9185   if((bat[0]._temper_stat&0x03)||(bat[1]._temper_stat&0x03))IZMAX_=IZMAX_/10;
005d6e  486e              LDR      r0,|L1.24360|
005d70  f04f080a          MOV      r8,#0xa               ;9177
005d74  f890103f          LDRB     r1,[r0,#0x3f]  ; bat
005d78  0789              LSLS     r1,r1,#30
005d7a  d103              BNE      |L1.23940|
005d7c  f890008b          LDRB     r0,[r0,#0x8b]  ; bat
005d80  0780              LSLS     r0,r0,#30
005d82  d005              BEQ      |L1.23952|
                  |L1.23940|
005d84  f8b4004c          LDRH     r0,[r4,#0x4c]  ; IZMAX_
005d88  fbb0f0f8          UDIV     r0,r0,r8
005d8c  f8a4004c          STRH     r0,[r4,#0x4c]
                  |L1.23952|
;;;9186   
;;;9187   
;;;9188   #ifdef UKU_220_IPS_TERMOKOMPENSAT
;;;9189   if((REG_SPEED<1)||(REG_SPEED>5)) REG_SPEED=1;
005d90  486f              LDR      r0,|L1.24400|
005d92  2601              MOVS     r6,#1
005d94  f9b01000          LDRSH    r1,[r0,#0]  ; REG_SPEED
005d98  1e49              SUBS     r1,r1,#1
005d9a  2905              CMP      r1,#5
005d9c  d300              BCC      |L1.23968|
005d9e  8006              STRH     r6,[r0,#0]
                  |L1.23968|
;;;9190   if(ch_cnt0<(10*REG_SPEED))
005da0  f9b00000          LDRSH    r0,[r0,#0]  ; REG_SPEED
005da4  2500              MOVS     r5,#0                 ;9176
005da6  eb000180          ADD      r1,r0,r0,LSL #2
005daa  7d60              LDRB     r0,[r4,#0x15]  ; ch_cnt0
005dac  ebb00f41          CMP      r0,r1,LSL #1
005db0  da08              BGE      |L1.24004|
;;;9191   	{
;;;9192   	ch_cnt0++;
005db2  f1000001          ADD      r0,r0,#1
005db6  b2c0              UXTB     r0,r0
005db8  7560              STRB     r0,[r4,#0x15]
;;;9193   	if(ch_cnt0>=10*REG_SPEED)
005dba  ebb00f41          CMP      r0,r1,LSL #1
005dbe  db01              BLT      |L1.24004|
;;;9194   		{
;;;9195   		ch_cnt0=0;
005dc0  7565              STRB     r5,[r4,#0x15]
;;;9196   		b1Hz_ch=1;
005dc2  75a6              STRB     r6,[r4,#0x16]
                  |L1.24004|
;;;9197   		}
;;;9198   	}
;;;9199   #endif
;;;9200   #ifndef UKU_220_IPS_TERMOKOMPENSAT
;;;9201   if(ch_cnt0<10)
;;;9202   	{
;;;9203   	ch_cnt0++;
;;;9204   	if(ch_cnt0>=10)
;;;9205   		{
;;;9206   		ch_cnt0=0;
;;;9207   		b1Hz_ch=1;
;;;9208   		}
;;;9209   	}
;;;9210   #endif
;;;9211   
;;;9212   
;;;9213   if(mess_find_unvol(MESS2CNTRL_HNDL))
005dc4  20e1              MOVS     r0,#0xe1
005dc6  f7fffffe          BL       mess_find_unvol
;;;9214   	{
;;;9215   	if(mess_data[0]==PARAM_CNTRL_STAT_PLUS)
;;;9216   		{
;;;9217   		cntrl_stat/*_new*/=cntrl_stat_old+mess_data[1];
;;;9218   		}
;;;9219   	else if(mess_data[0]==PARAM_CNTRL_STAT_MINUS)
;;;9220   		{
;;;9221   		cntrl_stat/*_new*/=cntrl_stat_old-mess_data[1];
;;;9222   		}
;;;9223   	else if(mess_data[0]==PARAM_CNTRL_STAT_STEP_DOWN)
;;;9224   		{
;;;9225   		static char cntrlStatIsDownCnt;
;;;9226   		cntrl_stat--;
;;;9227   
;;;9228   		if((cntrl_stat<=30)||(load_U<USIGN))
;;;9229   			{
;;;9230   			if(++cntrlStatIsDownCnt==250)mess_send(MESS2KB_HNDL,PARAM_CNTRL_IS_DOWN,0,10);
;;;9231   			}
;;;9232   		else 
;;;9233   			{
;;;9234   			cntrlStatIsDownCnt=0;
;;;9235   			}
;;;9236   
;;;9237   		}
;;;9238   	else if(mess_data[0]==PARAM_CNTRL_STAT_SET)
;;;9239   		{
;;;9240   		cntrl_stat/*_new*/=mess_data[1];
;;;9241   		}
;;;9242   
;;;9243   	else if(mess_data[0]==PARAM_CNTRL_STAT_FAST_REG)
;;;9244   		{
;;;9245   		#ifdef UKU_220_IPS_TERMOKOMPENSAT
;;;9246   		if(bps_U>u_necc)
005dca  f8dfc188          LDR      r12,|L1.24404|
005dce  4a42              LDR      r2,|L1.24280|
;;;9247   			{
;;;9248   			cntrl_hndl_plazma=11;
;;;9249   			if(((bps_U-u_necc)>40)&&(cntrl_stat/*_new*/>0))cntrl_stat/*_new*/-=5;
;;;9250   			else if((cntrl_stat/*_new*/)&&b1Hz_ch)cntrl_stat/*_new*/--;
;;;9251   			}
;;;9252   		else if(bps_U<u_necc)
;;;9253   			{
;;;9254   			cntrl_hndl_plazma=12;	
;;;9255   			if(((u_necc-bps_U)>40)&&(cntrl_stat/*_new*/<1015))cntrl_stat/*_new*/+=5;
;;;9256   			else	if((cntrl_stat/*_new*/<1020)&&b1Hz_ch)cntrl_stat/*_new*/++;
;;;9257   			}
;;;9258   		#elif defined(UKU_220)
;;;9259   		if(load_U>u_necc)
;;;9260   			{
;;;9261   			cntrl_hndl_plazma=13;
;;;9262   			if(((load_U-u_necc)>40)&&(cntrl_stat/*_new*/>0))cntrl_stat/*_new*/-=5;
;;;9263   			else if((cntrl_stat/*_new*/)&&b1Hz_ch)cntrl_stat/*_new*/--;
;;;9264   			}
;;;9265   		else if(load_U<u_necc)
;;;9266   			{
;;;9267   			cntrl_hndl_plazma=14;	
;;;9268   			if(((u_necc-load_U)>40)&&(cntrl_stat/*_new*/<1015))cntrl_stat/*_new*/+=5;
;;;9269   			else	if((cntrl_stat/*_new*/<1020)&&b1Hz_ch)cntrl_stat/*_new*/++;
;;;9270   			}
;;;9271   		#elif defined(UKU_220_V2)
;;;9272   		if(load_U>u_necc)
;;;9273   			{
;;;9274   			cntrl_hndl_plazma=15;
;;;9275   			if(((load_U-u_necc)>40)&&(cntrl_stat/*_new*/>0))cntrl_stat/*_new*/-=5;
;;;9276   			else if((cntrl_stat/*_new*/)&&b1Hz_ch)cntrl_stat/*_new*/--;
;;;9277   			}
;;;9278   		else if(load_U<u_necc)
;;;9279   			{
;;;9280   			cntrl_hndl_plazma=16;	
;;;9281   			if(((u_necc-load_U)>40)&&(cntrl_stat/*_new*/<1015))cntrl_stat/*_new*/+=5;
;;;9282   			else	if((cntrl_stat/*_new*/<1020)&&b1Hz_ch)cntrl_stat/*_new*/++;
;;;9283   			}
;;;9284   		#else
;;;9285   
;;;9286   		if(load_U>u_necc)
;;;9287   			{
;;;9288   			cntrl_hndl_plazma=17;
;;;9289   			if(((load_U-u_necc)>10)&&(cntrl_stat/*_new*/>0))cntrl_stat/*_new*/-=5;
;;;9290   			else if((cntrl_stat/*_new*/)&&b1Hz_ch)cntrl_stat/*_new*/--;
;;;9291   			}
;;;9292   		else if(load_U<u_necc)
;;;9293   			{
;;;9294   			cntrl_hndl_plazma=18;	
;;;9295   			if(((u_necc-load_U)>10)&&(cntrl_stat/*_new*/<1015))cntrl_stat/*_new*/+=5;
;;;9296   			else	if((cntrl_stat/*_new*/<1020)&&b1Hz_ch)cntrl_stat/*_new*/++;
;;;9297   			}
;;;9298   		#endif	
;;;9299   	 	}
;;;9300   
;;;9301   	/*gran(&cntrl_stat_new,10,1010);			
;;;9302   	cntrl_stat_old=cntrl_stat_new;
;;;9303   	cntrl_stat=cntrl_stat_new;*/
;;;9304   	}
;;;9305   
;;;9306   #ifdef UKU_220_IPS_TERMOKOMPENSAT
;;;9307   else if((b1Hz_ch)&&((!bIBAT_SMKLBR)||(bps[8]._cnt>40)))
005dd0  f8df90e0          LDR      r9,|L1.24244|
;;;9308   	{
;;;9309   	cntrl_stat_new=cntrl_stat_old;
;;;9310   	cntrl_hndl_plazma=19;
;;;9311   	if((Ibmax/10)>(2*IZMAX_))
;;;9312   		{
;;;9313   		cntrl_hndl_plazma=20;
;;;9314             if(cntrl_stat_blok_cnt)cntrl_stat_new--;
;;;9315   		else	cntrl_stat_new-=10;
;;;9316   		}		
;;;9317   	else if(((Ibmax/10)<(IZMAX_*2))&&(Ibmax>(IZMAX_*15)))
;;;9318   		{
;;;9319   		cntrl_hndl_plazma=21;
;;;9320             if(cntrl_stat_blok_cnt)cntrl_stat_new--;
;;;9321             else	cntrl_stat_new-=3;
;;;9322   		}   
;;;9323   	else if((Ibmax<(IZMAX_*15))&&((Ibmax/10)>IZMAX_))
;;;9324   		{
;;;9325   		cntrl_hndl_plazma=22;
;;;9326   		cntrl_stat_new--;
;;;9327   		}
;;;9328   		
;;;9329   	else if(bps_U<u_necc)
;;;9330   		{
;;;9331   		cntrl_hndl_plazma=23;
;;;9332   		if(bps_U<(u_necc-(UB0-UB20)))
;;;9333   			{
;;;9334   			cntrl_hndl_plazma=24;
;;;9335   			if(Ibmax<0)
;;;9336   				{
;;;9337   				cntrl_hndl_plazma=25;
;;;9338                       if(cntrl_stat_blok_cnt)cntrl_stat_new++;
;;;9339   				else cntrl_stat_new+=10;
;;;9340   				}
;;;9341   			else if(Ibmax<(IZMAX_*5))
;;;9342   				{
;;;9343   				cntrl_hndl_plazma=26;
;;;9344                       if(cntrl_stat_blok_cnt)cntrl_stat_new++;
;;;9345   				else	cntrl_stat_new+=2;
;;;9346   				}
;;;9347   			else if(Ibmax<((IZMAX_*10)/*-10*/))//(Ibmax<((IZMAX_*95)/10))
;;;9348   				{
;;;9349   				cntrl_hndl_plazma=27;
;;;9350   				cntrl_stat_new++;
;;;9351   				}					
;;;9352   			}
;;;9353   		else if(bps_U<(u_necc-((UB0-UB20)/4)))
;;;9354   			{
;;;9355   			cntrl_hndl_plazma=28;
;;;9356   			if(Ibmax<(IZMAX_*5))
;;;9357   				{
;;;9358   				cntrl_hndl_plazma=29;
;;;9359                       if(cntrl_stat_blok_cnt)cntrl_stat_new++;
;;;9360   				else	cntrl_stat_new+=2;
;;;9361   				}
;;;9362   			else if(Ibmax<((IZMAX_*10)/*-10*/))//(Ibmax<((IZMAX_*95)/10))
;;;9363   				{
;;;9364   				cntrl_hndl_plazma=30;
;;;9365   				cntrl_stat_new++;
;;;9366   				}					
;;;9367   			}	
;;;9368   		else if(bps_U<(u_necc-1))
;;;9369   			{
;;;9370   			cntrl_hndl_plazma=31;
;;;9371   			if(Ibmax<((IZMAX_*10)/*-10*/))//(Ibmax<((IZMAX_*95)/10))
;;;9372   				{
;;;9373   				cntrl_hndl_plazma=32;
;;;9374   				cntrl_stat_new++;
;;;9375   				}					
;;;9376   			}					
;;;9377   		}	
;;;9378   	else if((bps_U>u_necc)/*&&(!cntrl_blok)*/)
;;;9379   		{ 	
;;;9380   		cntrl_hndl_plazma=33;
;;;9381   		if(bps_U>(u_necc+(UB0-UB20)))
;;;9382   			{
;;;9383   			cntrl_hndl_plazma=34;
;;;9384                  if((cntrl_stat_blok_cnt)||(!TERMOKOMPENS))cntrl_stat_new--;
;;;9385   			else	cntrl_stat_new-=10;
;;;9386   			}
;;;9387   		else if(bps_U>(u_necc+((UB0-UB20)/4)))
;;;9388   			{
;;;9389   			cntrl_hndl_plazma=35;
;;;9390                  if(cntrl_stat_blok_cnt)cntrl_stat_new--;
;;;9391   			else cntrl_stat_new-=2;
;;;9392   			}	
;;;9393   		else if(bps_U>(u_necc+1))
;;;9394   			{
;;;9395   			cntrl_hndl_plazma=36;
;;;9396   			cntrl_stat_new--;
;;;9397   			}					
;;;9398   		}
;;;9399   
;;;9400   	if((hv_vz_stat==hvsOFF)&&(vz1_stat==vz1sOFF)&&(vz2_stat==vz2sOFF))
;;;9401   		{
;;;9402   		if(((sk_stat[1]==1)&&(sk_stat_old[1]==0))&&(VZ_KIND==1))cntrl_stat_new=50;
;;;9403   		}
;;;9404   
;;;9405   	gran(&cntrl_stat_new,10,1010);
;;;9406   	if(net_av_2min_timer)cntrl_stat_new=cntrl_stat_old;			
;;;9407   	cntrl_stat_old=cntrl_stat_new;
;;;9408   	cntrl_stat=cntrl_stat_new;
;;;9409   	
;;;9410   	if(ICA_EN==0)
;;;9411   		{
;;;9412   		if(ica_cntrl_hndl_cnt)
005dd4  4f60              LDR      r7,|L1.24408|
005dd6  b398              CBZ      r0,|L1.24128|
005dd8  4938              LDR      r1,|L1.24252|
005dda  6808              LDR      r0,[r1,#0]            ;9215  ; mess_data
005ddc  2864              CMP      r0,#0x64              ;9215
005dde  d008              BEQ      |L1.24050|
005de0  2869              CMP      r0,#0x69              ;9219
005de2  d00b              BEQ      |L1.24060|
005de4  286e              CMP      r0,#0x6e              ;9223
005de6  d00f              BEQ      |L1.24072|
005de8  28e5              CMP      r0,#0xe5              ;9238
005dea  d02c              BEQ      |L1.24134|
005dec  28e6              CMP      r0,#0xe6              ;9243
005dee  d02d              BEQ      |L1.24140|
                  |L1.24048|
005df0  e22b              B        |L1.25162|
                  |L1.24050|
005df2  6848              LDR      r0,[r1,#4]            ;9217  ; mess_data
005df4  8ea1              LDRH     r1,[r4,#0x34]         ;9217  ; cntrl_stat_old
005df6  4408              ADD      r0,r0,r1              ;9217
005df8  8660              STRH     r0,[r4,#0x32]         ;9217
005dfa  e226              B        |L1.25162|
                  |L1.24060|
005dfc  6848              LDR      r0,[r1,#4]            ;9221  ; mess_data
005dfe  8ea1              LDRH     r1,[r4,#0x34]         ;9221  ; cntrl_stat_old
005e00  eba10000          SUB      r0,r1,r0              ;9221
005e04  8660              STRH     r0,[r4,#0x32]         ;9221
005e06  e220              B        |L1.25162|
                  |L1.24072|
005e08  8e60              LDRH     r0,[r4,#0x32]         ;9226  ; cntrl_stat
005e0a  f1a00001          SUB      r0,r0,#1              ;9226
005e0e  b200              SXTH     r0,r0                 ;9226
005e10  8660              STRH     r0,[r4,#0x32]         ;9226
005e12  281e              CMP      r0,#0x1e              ;9228
005e14  dd07              BLE      |L1.24102|
005e16  4851              LDR      r0,|L1.24412|
005e18  4951              LDR      r1,|L1.24416|
005e1a  f9b00000          LDRSH    r0,[r0,#0]            ;9228  ; load_U
005e1e  f9b11000          LDRSH    r1,[r1,#0]            ;9228  ; USIGN
005e22  4288              CMP      r0,r1                 ;9228
005e24  da0d              BGE      |L1.24130|
                  |L1.24102|
005e26  7be0              LDRB     r0,[r4,#0xf]          ;9230  ; cntrlStatIsDownCnt
005e28  1c40              ADDS     r0,r0,#1              ;9230
005e2a  b2c0              UXTB     r0,r0                 ;9230
005e2c  73e0              STRB     r0,[r4,#0xf]          ;9230
005e2e  28fa              CMP      r0,#0xfa              ;9230
005e30  d1de              BNE      |L1.24048|
005e32  230a              MOVS     r3,#0xa               ;9230
005e34  2200              MOVS     r2,#0                 ;9230
005e36  21e7              MOVS     r1,#0xe7              ;9230
005e38  20e6              MOVS     r0,#0xe6              ;9230
005e3a  f7fffffe          BL       mess_send
005e3e  e204              B        |L1.25162|
                  |L1.24128|
005e40  e09c              B        |L1.24444|
                  |L1.24130|
005e42  73e5              STRB     r5,[r4,#0xf]          ;9234
005e44  e201              B        |L1.25162|
                  |L1.24134|
005e46  6848              LDR      r0,[r1,#4]            ;9240  ; mess_data
005e48  8660              STRH     r0,[r4,#0x32]         ;9240
005e4a  e1fe              B        |L1.25162|
                  |L1.24140|
005e4c  f9bc0000          LDRSH    r0,[r12,#0]           ;9246  ; bps_U
005e50  f9b21000          LDRSH    r1,[r2,#0]            ;9246  ; u_necc
005e54  4288              CMP      r0,r1                 ;9246
005e56  dd1a              BLE      |L1.24206|
005e58  f04f020b          MOV      r2,#0xb               ;9248
005e5c  f884202e          STRB     r2,[r4,#0x2e]         ;9248
005e60  eba00001          SUB      r0,r0,r1              ;9249
005e64  2828              CMP      r0,#0x28              ;9249
005e66  dd07              BLE      |L1.24184|
005e68  f9b40032          LDRSH    r0,[r4,#0x32]         ;9249  ; cntrl_stat
005e6c  2800              CMP      r0,#0                 ;9249
005e6e  dd03              BLE      |L1.24184|
005e70  f1a00005          SUB      r0,r0,#5              ;9249
005e74  8660              STRH     r0,[r4,#0x32]         ;9249
005e76  e1e8              B        |L1.25162|
                  |L1.24184|
005e78  f9b40032          LDRSH    r0,[r4,#0x32]         ;9250  ; cntrl_stat
005e7c  2800              CMP      r0,#0                 ;9250
005e7e  d0b7              BEQ      |L1.24048|
005e80  7da1              LDRB     r1,[r4,#0x16]         ;9250  ; b1Hz_ch
005e82  2900              CMP      r1,#0                 ;9250
005e84  d0b4              BEQ      |L1.24048|
005e86  f1a00001          SUB      r0,r0,#1              ;9250
005e8a  8660              STRH     r0,[r4,#0x32]         ;9250
                  |L1.24204|
005e8c  e1dd              B        |L1.25162|
                  |L1.24206|
005e8e  daaf              BGE      |L1.24048|
005e90  f04f020c          MOV      r2,#0xc               ;9254
005e94  f884202e          STRB     r2,[r4,#0x2e]         ;9254
005e98  eba10000          SUB      r0,r1,r0              ;9255
005e9c  2828              CMP      r0,#0x28              ;9255
005e9e  dd61              BLE      |L1.24420|
005ea0  f9b40032          LDRSH    r0,[r4,#0x32]         ;9255  ; cntrl_stat
005ea4  f24031f7          MOV      r1,#0x3f7             ;9255
005ea8  4288              CMP      r0,r1                 ;9255
005eaa  da5b              BGE      |L1.24420|
005eac  f1000005          ADD      r0,r0,#5              ;9255
005eb0  8660              STRH     r0,[r4,#0x32]         ;9255
                  |L1.24242|
005eb2  e1ca              B        |L1.25162|
                  |L1.24244|
                          DCD      bps
                  |L1.24248|
                          DCD      NUMIST
                  |L1.24252|
                          DCD      mess_data
                  |L1.24256|
                          DCD      uavt_set_result_stat
                  |L1.24260|
                          DCD      avt_plazma
                  |L1.24264|
                          DCD      TERMOKOMPENS
                  |L1.24268|
                          DCD      UB20
                  |L1.24272|
                          DCD      UVZ
                  |L1.24276|
                          DCD      ||area_number.25||
                  |L1.24280|
                          DCD      u_necc
                  |L1.24284|
                          DCD      ND_EXT
                  |L1.24288|
                          DCD      t_ext
                  |L1.24292|
                          DCD      mat_temper
                  |L1.24296|
                          DCD      UB0
                  |L1.24300|
                          DCD      sk_stat
                  |L1.24304|
                          DCD      VZ_CH_VENT_BLOK
                  |L1.24308|
                          DCD      speedChIsOn
                  |L1.24312|
                          DCD      sp_ch_stat
                  |L1.24316|
                          DCD      speedChrgVolt
                  |L1.24320|
                          DCD      hv_vz_stat
                  |L1.24324|
                          DCD      UZ_U
                  |L1.24328|
                          DCD      FZ_U1
                  |L1.24332|
                          DCD      FZ_U2
                  |L1.24336|
                          DCD      uavt_set_stat
                  |L1.24340|
                          DCD      U_AVT
                  |L1.24344|
                          DCD      u_necc_dn
                  |L1.24348|
                          DCD      u_necc_up
                  |L1.24352|
                          DCD      Isumm
                  |L1.24356|
                          DCD      Isumm_
                  |L1.24360|
                          DCD      bat
                  |L1.24364|
                          DCD      IMAX
                  |L1.24368|
                          DCD      IMIN
                  |L1.24372|
                          DCD      num_necc
                  |L1.24376|
                          DCD      PAR
                  |L1.24380|
                          DCD      IZMAX
                  |L1.24384|
                          DCD      speedChrgCurr
                  |L1.24388|
                          DCD      UZ_IMAX
                  |L1.24392|
                          DCD      FZ_IMAX1
                  |L1.24396|
                          DCD      FZ_IMAX2
                  |L1.24400|
                          DCD      REG_SPEED
                  |L1.24404|
                          DCD      bps_U
                  |L1.24408|
                          DCD      ica_cntrl_hndl_cnt
                  |L1.24412|
                          DCD      load_U
                  |L1.24416|
                          DCD      USIGN
                  |L1.24420|
005f64  f9b40032          LDRSH    r0,[r4,#0x32]         ;9256  ; cntrl_stat
005f68  f5b07f7f          CMP      r0,#0x3fc             ;9256
005f6c  da8e              BGE      |L1.24204|
005f6e  7da1              LDRB     r1,[r4,#0x16]         ;9256  ; b1Hz_ch
005f70  2900              CMP      r1,#0                 ;9256
005f72  d08b              BEQ      |L1.24204|
005f74  f1000001          ADD      r0,r0,#1              ;9256
005f78  8660              STRH     r0,[r4,#0x32]         ;9256
005f7a  e166              B        |L1.25162|
                  |L1.24444|
005f7c  7da0              LDRB     r0,[r4,#0x16]         ;9307  ; b1Hz_ch
005f7e  2800              CMP      r0,#0                 ;9307
005f80  d084              BEQ      |L1.24204|
005f82  48fd              LDR      r0,|L1.25464|
005f84  8800              LDRH     r0,[r0,#0]            ;9307  ; bIBAT_SMKLBR
005f86  b118              CBZ      r0,|L1.24464|
005f88  f8990323          LDRB     r0,[r9,#0x323]        ;9307  ; bps
005f8c  2828              CMP      r0,#0x28              ;9307
005f8e  d990              BLS      |L1.24242|
                  |L1.24464|
005f90  f104042e          ADD      r4,r4,#0x2e           ;9309
005f94  f9b40006          LDRSH    r0,[r4,#6]            ;9309  ; cntrl_stat_old
005f98  8360              STRH     r0,[r4,#0x1a]         ;9309
005f9a  f04f0113          MOV      r1,#0x13              ;9310
005f9e  7021              STRB     r1,[r4,#0]            ;9310
005fa0  f9b4101c          LDRSH    r1,[r4,#0x1c]         ;9311  ; Ibmax
005fa4  8be3              LDRH     r3,[r4,#0x1e]         ;9311  ; IZMAX_
005fa6  fb91f8f8          SDIV     r8,r1,r8              ;9311
005faa  f1a4042e          SUB      r4,r4,#0x2e           ;9311
005fae  ebb80f43          CMP      r8,r3,LSL #1          ;9311
005fb2  dd10              BLE      |L1.24534|
005fb4  f04f0114          MOV      r1,#0x14              ;9313
005fb8  f884102e          STRB     r1,[r4,#0x2e]         ;9313
005fbc  f8b41070          LDRH     r1,[r4,#0x70]         ;9314  ; cntrl_stat_blok_cnt
005fc0  b121              CBZ      r1,|L1.24524|
005fc2  f1a00001          SUB      r0,r0,#1              ;9314
005fc6  f8a40048          STRH     r0,[r4,#0x48]         ;9314
005fca  e102              B        |L1.25042|
                  |L1.24524|
005fcc  f1a0000a          SUB      r0,r0,#0xa            ;9315
005fd0  f8a40048          STRH     r0,[r4,#0x48]         ;9315
005fd4  e0fd              B        |L1.25042|
                  |L1.24534|
005fd6  da14              BGE      |L1.24578|
005fd8  ebc31a03          RSB      r10,r3,r3,LSL #4      ;9317
005fdc  458a              CMP      r10,r1                ;9317
005fde  da10              BGE      |L1.24578|
005fe0  f04f0115          MOV      r1,#0x15              ;9319
005fe4  f884102e          STRB     r1,[r4,#0x2e]         ;9319
005fe8  f8b41070          LDRH     r1,[r4,#0x70]         ;9320  ; cntrl_stat_blok_cnt
005fec  b121              CBZ      r1,|L1.24568|
005fee  f1a00001          SUB      r0,r0,#1              ;9320
005ff2  f8a40048          STRH     r0,[r4,#0x48]         ;9320
005ff6  e0ec              B        |L1.25042|
                  |L1.24568|
005ff8  f1a00003          SUB      r0,r0,#3              ;9321
005ffc  f8a40048          STRH     r0,[r4,#0x48]         ;9321
006000  e0e7              B        |L1.25042|
                  |L1.24578|
006002  ebc31a03          RSB      r10,r3,r3,LSL #4      ;9323
006006  458a              CMP      r10,r1                ;9323
006008  dd0a              BLE      |L1.24608|
00600a  4598              CMP      r8,r3                 ;9323
00600c  dd08              BLE      |L1.24608|
00600e  f04f0116          MOV      r1,#0x16              ;9325
006012  f884102e          STRB     r1,[r4,#0x2e]         ;9325
006016  f1a00001          SUB      r0,r0,#1              ;9326
00601a  f8a40048          STRH     r0,[r4,#0x48]         ;9326
00601e  e0d8              B        |L1.25042|
                  |L1.24608|
006020  f9bcc000          LDRSH    r12,[r12,#0]          ;9329  ; bps_U
006024  f9b22000          LDRSH    r2,[r2,#0]            ;9329  ; u_necc
006028  f8df8350          LDR      r8,|L1.25468|
00602c  f8dfb350          LDR      r11,|L1.25472|
006030  4594              CMP      r12,r2                ;9329
006032  da72              BGE      |L1.24858|
006034  f04f0a17          MOV      r10,#0x17             ;9331
006038  f884a02e          STRB     r10,[r4,#0x2e]        ;9331
00603c  f9b88000          LDRSH    r8,[r8,#0]            ;9332  ; UB0
006040  f9bba000          LDRSH    r10,[r11,#0]          ;9332  ; UB20
006044  eba8080a          SUB      r8,r8,r10             ;9332
006048  eba20a08          SUB      r10,r2,r8             ;9332
00604c  45e2              CMP      r10,r12               ;9332
00604e  dd37              BLE      |L1.24768|
006050  f04f0218          MOV      r2,#0x18              ;9334
006054  f884202e          STRB     r2,[r4,#0x2e]         ;9334
006058  2900              CMP      r1,#0                 ;9335
00605a  da10              BGE      |L1.24702|
00605c  f04f0119          MOV      r1,#0x19              ;9337
006060  f884102e          STRB     r1,[r4,#0x2e]         ;9337
006064  f8b41070          LDRH     r1,[r4,#0x70]         ;9338  ; cntrl_stat_blok_cnt
006068  b121              CBZ      r1,|L1.24692|
00606a  f1000001          ADD      r0,r0,#1              ;9338
00606e  f8a40048          STRH     r0,[r4,#0x48]         ;9338
006072  e0ae              B        |L1.25042|
                  |L1.24692|
006074  f100000a          ADD      r0,r0,#0xa            ;9339
006078  f8a40048          STRH     r0,[r4,#0x48]         ;9339
00607c  e0a9              B        |L1.25042|
                  |L1.24702|
00607e  eb030283          ADD      r2,r3,r3,LSL #2       ;9341
006082  428a              CMP      r2,r1                 ;9341
006084  dd10              BLE      |L1.24744|
006086  f04f011a          MOV      r1,#0x1a              ;9343
00608a  f884102e          STRB     r1,[r4,#0x2e]         ;9343
00608e  f8b41070          LDRH     r1,[r4,#0x70]         ;9344  ; cntrl_stat_blok_cnt
006092  b121              CBZ      r1,|L1.24734|
006094  f1000001          ADD      r0,r0,#1              ;9344
006098  f8a40048          STRH     r0,[r4,#0x48]         ;9344
00609c  e099              B        |L1.25042|
                  |L1.24734|
00609e  f1000002          ADD      r0,r0,#2              ;9345
0060a2  f8a40048          STRH     r0,[r4,#0x48]         ;9345
0060a6  e094              B        |L1.25042|
                  |L1.24744|
0060a8  ebb10f42          CMP      r1,r2,LSL #1          ;9347
0060ac  da07              BGE      |L1.24766|
0060ae  f04f011b          MOV      r1,#0x1b              ;9349
0060b2  f884102e          STRB     r1,[r4,#0x2e]         ;9349
0060b6  f1000001          ADD      r0,r0,#1              ;9350
0060ba  f8a40048          STRH     r0,[r4,#0x48]         ;9350
                  |L1.24766|
0060be  e088              B        |L1.25042|
                  |L1.24768|
0060c0  ea4f7ae8          ASR      r10,r8,#31            ;9353
0060c4  eb08789a          ADD      r8,r8,r10,LSR #30     ;9353
0060c8  eba208a8          SUB      r8,r2,r8,ASR #2       ;9353
0060cc  45e0              CMP      r8,r12                ;9353
0060ce  dd25              BLE      |L1.24860|
0060d0  f04f021c          MOV      r2,#0x1c              ;9355
0060d4  f884202e          STRB     r2,[r4,#0x2e]         ;9355
0060d8  eb030283          ADD      r2,r3,r3,LSL #2       ;9356
0060dc  428a              CMP      r2,r1                 ;9356
0060de  dd10              BLE      |L1.24834|
0060e0  f04f011d          MOV      r1,#0x1d              ;9358
0060e4  f884102e          STRB     r1,[r4,#0x2e]         ;9358
0060e8  f8b41070          LDRH     r1,[r4,#0x70]         ;9359  ; cntrl_stat_blok_cnt
0060ec  b121              CBZ      r1,|L1.24824|
0060ee  f1000001          ADD      r0,r0,#1              ;9359
0060f2  f8a40048          STRH     r0,[r4,#0x48]         ;9359
0060f6  e06c              B        |L1.25042|
                  |L1.24824|
0060f8  f1000002          ADD      r0,r0,#2              ;9360
0060fc  f8a40048          STRH     r0,[r4,#0x48]         ;9360
006100  e067              B        |L1.25042|
                  |L1.24834|
006102  ebb10f42          CMP      r1,r2,LSL #1          ;9362
006106  da64              BGE      |L1.25042|
006108  f04f011e          MOV      r1,#0x1e              ;9364
00610c  f884102e          STRB     r1,[r4,#0x2e]         ;9364
006110  f1000001          ADD      r0,r0,#1              ;9365
006114  f8a40048          STRH     r0,[r4,#0x48]         ;9365
006118  e05b              B        |L1.25042|
                  |L1.24858|
00611a  e014              B        |L1.24902|
                  |L1.24860|
00611c  1e52              SUBS     r2,r2,#1              ;9368
00611e  4594              CMP      r12,r2                ;9368
006120  da57              BGE      |L1.25042|
006122  f04f021f          MOV      r2,#0x1f              ;9370
006126  f884202e          STRB     r2,[r4,#0x2e]         ;9370
00612a  eb030283          ADD      r2,r3,r3,LSL #2       ;9371
00612e  ebb10f42          CMP      r1,r2,LSL #1          ;9371
006132  da4e              BGE      |L1.25042|
006134  f04f0120          MOV      r1,#0x20              ;9373
006138  f884102e          STRB     r1,[r4,#0x2e]         ;9373
00613c  f1000001          ADD      r0,r0,#1              ;9374
006140  f8a40048          STRH     r0,[r4,#0x48]         ;9374
006144  e045              B        |L1.25042|
                  |L1.24902|
006146  dd44              BLE      |L1.25042|
006148  f04f0121          MOV      r1,#0x21              ;9380
00614c  f884102e          STRB     r1,[r4,#0x2e]         ;9380
006150  f9b81000          LDRSH    r1,[r8,#0]            ;9381  ; UB0
006154  f9bb3000          LDRSH    r3,[r11,#0]           ;9381  ; UB20
006158  eba10103          SUB      r1,r1,r3              ;9381
00615c  eb010302          ADD      r3,r1,r2              ;9381
006160  4563              CMP      r3,r12                ;9381
006162  da13              BGE      |L1.24972|
006164  f04f0122          MOV      r1,#0x22              ;9383
006168  f884102e          STRB     r1,[r4,#0x2e]         ;9383
00616c  f8b41070          LDRH     r1,[r4,#0x70]         ;9384  ; cntrl_stat_blok_cnt
006170  b939              CBNZ     r1,|L1.24962|
006172  4984              LDR      r1,|L1.25476|
006174  8809              LDRH     r1,[r1,#0]            ;9384  ; TERMOKOMPENS
006176  b121              CBZ      r1,|L1.24962|
006178  f1a0000a          SUB      r0,r0,#0xa            ;9385
00617c  f8a40048          STRH     r0,[r4,#0x48]         ;9385
006180  e027              B        |L1.25042|
                  |L1.24962|
006182  f1a00001          SUB      r0,r0,#1              ;9384
006186  f8a40048          STRH     r0,[r4,#0x48]         ;9384
00618a  e022              B        |L1.25042|
                  |L1.24972|
00618c  17cb              ASRS     r3,r1,#31             ;9387
00618e  eb017193          ADD      r1,r1,r3,LSR #30      ;9387
006192  eb0201a1          ADD      r1,r2,r1,ASR #2       ;9387
006196  4561              CMP      r1,r12                ;9387
006198  da10              BGE      |L1.25020|
00619a  f04f0123          MOV      r1,#0x23              ;9389
00619e  f884102e          STRB     r1,[r4,#0x2e]         ;9389
0061a2  f8b41070          LDRH     r1,[r4,#0x70]         ;9390  ; cntrl_stat_blok_cnt
0061a6  b121              CBZ      r1,|L1.25010|
0061a8  f1a00001          SUB      r0,r0,#1              ;9390
0061ac  f8a40048          STRH     r0,[r4,#0x48]         ;9390
0061b0  e00f              B        |L1.25042|
                  |L1.25010|
0061b2  f1a00002          SUB      r0,r0,#2              ;9391
0061b6  f8a40048          STRH     r0,[r4,#0x48]         ;9391
0061ba  e00a              B        |L1.25042|
                  |L1.25020|
0061bc  1c52              ADDS     r2,r2,#1              ;9393
0061be  4594              CMP      r12,r2                ;9393
0061c0  dd07              BLE      |L1.25042|
0061c2  f04f0124          MOV      r1,#0x24              ;9395
0061c6  f884102e          STRB     r1,[r4,#0x2e]         ;9395
0061ca  f1a00001          SUB      r0,r0,#1              ;9396
0061ce  f8a40048          STRH     r0,[r4,#0x48]         ;9396
                  |L1.25042|
0061d2  486d              LDR      r0,|L1.25480|
0061d4  7961              LDRB     r1,[r4,#5]            ;9400  ; vz1_stat
0061d6  7800              LDRB     r0,[r0,#0]            ;9400  ; hv_vz_stat
0061d8  4308              ORRS     r0,r0,r1              ;9400
0061da  79e1              LDRB     r1,[r4,#7]            ;9400  ; vz2_stat
0061dc  4308              ORRS     r0,r0,r1              ;9400
0061de  d10e              BNE      |L1.25086|
0061e0  486a              LDR      r0,|L1.25484|
0061e2  7840              LDRB     r0,[r0,#1]            ;9402  ; sk_stat
0061e4  2801              CMP      r0,#1                 ;9402
0061e6  d10a              BNE      |L1.25086|
0061e8  4869              LDR      r0,|L1.25488|
0061ea  7840              LDRB     r0,[r0,#1]            ;9402  ; sk_stat_old
0061ec  b938              CBNZ     r0,|L1.25086|
0061ee  4869              LDR      r0,|L1.25492|
0061f0  8800              LDRH     r0,[r0,#0]            ;9402  ; VZ_KIND
0061f2  2801              CMP      r0,#1                 ;9402
0061f4  d103              BNE      |L1.25086|
0061f6  f04f0032          MOV      r0,#0x32              ;9402
0061fa  f8a40048          STRH     r0,[r4,#0x48]         ;9402
                  |L1.25086|
0061fe  f24032f2          MOV      r2,#0x3f2             ;9405
006202  210a              MOVS     r1,#0xa               ;9405
006204  4864              LDR      r0,|L1.25496|
006206  f7fffffe          BL       gran
00620a  4864              LDR      r0,|L1.25500|
00620c  8800              LDRH     r0,[r0,#0]            ;9406  ; net_av_2min_timer
00620e  b110              CBZ      r0,|L1.25110|
006210  8ea0              LDRH     r0,[r4,#0x34]         ;9406  ; cntrl_stat_old
006212  f8a40048          STRH     r0,[r4,#0x48]         ;9406
                  |L1.25110|
006216  f8b40048          LDRH     r0,[r4,#0x48]         ;9407  ; cntrl_stat_new
00621a  86a0              STRH     r0,[r4,#0x34]         ;9407
00621c  8660              STRH     r0,[r4,#0x32]         ;9408
00621e  4860              LDR      r0,|L1.25504|
006220  f9b00000          LDRSH    r0,[r0,#0]            ;9410  ; ICA_EN
006224  b938              CBNZ     r0,|L1.25142|
006226  8839              LDRH     r1,[r7,#0]  ; ica_cntrl_hndl_cnt
006228  b129              CBZ      r1,|L1.25142|
;;;9413   			{
;;;9414   			cntrl_stat = ica_cntrl_hndl;
00622a  495e              LDR      r1,|L1.25508|
00622c  8809              LDRH     r1,[r1,#0]  ; ica_cntrl_hndl
00622e  8661              STRH     r1,[r4,#0x32]
;;;9415   			cntrl_stat_new = ica_cntrl_hndl;//=10*PWM_START;
006230  f8a41048          STRH     r1,[r4,#0x48]
;;;9416   			cntrl_stat_old = ica_cntrl_hndl;//=10*PWM_START;
006234  86a1              STRH     r1,[r4,#0x34]
                  |L1.25142|
;;;9417   			}
;;;9418   		}
;;;9419   	
;;;9420   	if((ICA_EN==1)||(ICA_EN==2))
006236  2801              CMP      r0,#1
006238  d001              BEQ      |L1.25150|
00623a  2802              CMP      r0,#2
00623c  d105              BNE      |L1.25162|
                  |L1.25150|
;;;9421   		{
;;;9422   		cntrl_stat=cntrl_stat_new+ica_u_necc;
00623e  495a              LDR      r1,|L1.25512|
006240  f8b40048          LDRH     r0,[r4,#0x48]  ; cntrl_stat_new
006244  8809              LDRH     r1,[r1,#0]  ; ica_u_necc
006246  4408              ADD      r0,r0,r1
006248  8660              STRH     r0,[r4,#0x32]
                  |L1.25162|
;;;9423   		}			
;;;9424   	}
;;;9425   #else
;;;9426   else if((b1Hz_ch)&&((!bIBAT_SMKLBR)||(bps[8]._cnt>40)))
;;;9427   	{
;;;9428   	cntrl_hndl_plazma=37;
;;;9429   	cntrl_stat_new=cntrl_stat_old;
;;;9430   	
;;;9431   	if((Ibmax/10)>(2*IZMAX_))
;;;9432   		{
;;;9433   		cntrl_hndl_plazma=38;
;;;9434             if(cntrl_stat_blok_cnt)cntrl_stat_new--;
;;;9435   		else	cntrl_stat_new-=10;
;;;9436   		}		
;;;9437   	else if(((Ibmax/10)<(IZMAX_*2))&&(Ibmax>(IZMAX_*15)))
;;;9438   		{
;;;9439   		cntrl_hndl_plazma=39;
;;;9440             if(cntrl_stat_blok_cnt)cntrl_stat_new--;
;;;9441             else	cntrl_stat_new-=3;
;;;9442   		}   
;;;9443   	else if((Ibmax<(IZMAX_*15))&&((Ibmax/10)>IZMAX_))
;;;9444   		{
;;;9445   		cntrl_hndl_plazma=40;
;;;9446   		cntrl_stat_new--;
;;;9447   		}
;;;9448   		
;;;9449   	else if(load_U<u_necc)
;;;9450   		{
;;;9451   		cntrl_hndl_plazma=41;
;;;9452   		if(load_U<(u_necc-(UB0-UB20)))
;;;9453   			{
;;;9454   			cntrl_hndl_plazma=42;
;;;9455   			if(Ibmax<0)
;;;9456   				{
;;;9457   				cntrl_hndl_plazma=43;
;;;9458                       if(cntrl_stat_blok_cnt)cntrl_stat_new++;
;;;9459   				else cntrl_stat_new+=10;
;;;9460   				}
;;;9461   			else if(Ibmax<(IZMAX_*5))
;;;9462   				{
;;;9463   				cntrl_hndl_plazma=44;
;;;9464                       if(cntrl_stat_blok_cnt)cntrl_stat_new++;
;;;9465   				else	cntrl_stat_new+=2;
;;;9466   				}
;;;9467   			else if(Ibmax<((IZMAX_*95)/10))
;;;9468   				{
;;;9469   				cntrl_hndl_plazma=45;
;;;9470   				cntrl_stat_new++;
;;;9471   				}					
;;;9472   			}
;;;9473   		else if(load_U<(u_necc-((UB0-UB20)/4)))
;;;9474   			{
;;;9475   			cntrl_hndl_plazma=46;
;;;9476   			if(Ibmax<(IZMAX_*5))
;;;9477   				{
;;;9478   				cntrl_hndl_plazma=47;
;;;9479                       if(cntrl_stat_blok_cnt)cntrl_stat_new++;
;;;9480   				else	cntrl_stat_new+=2;
;;;9481   				}
;;;9482   			else if(Ibmax<((IZMAX_*95)/10))
;;;9483   				{
;;;9484   				cntrl_hndl_plazma=48;
;;;9485   				cntrl_stat_new++;
;;;9486   				}					
;;;9487   			}	
;;;9488   		else if(load_U<(u_necc-1))
;;;9489   			{
;;;9490   			cntrl_hndl_plazma=49;
;;;9491   			if(Ibmax<((IZMAX_*95)/10))
;;;9492   				{
;;;9493   				cntrl_hndl_plazma=50;
;;;9494   				cntrl_stat_new++;
;;;9495   				}					
;;;9496   			}					
;;;9497   		}	
;;;9498   	else if((load_U>u_necc)/*&&(!cntrl_blok)*/)
;;;9499   		{
;;;9500   		cntrl_hndl_plazma=51;
;;;9501   		if(load_U>(u_necc+(UB0-UB20)))
;;;9502   			{
;;;9503   			cntrl_hndl_plazma=52;
;;;9504                  if(cntrl_stat_blok_cnt)cntrl_stat_new--;
;;;9505   			else	cntrl_stat_new-=10;
;;;9506   			}
;;;9507   		else if(load_U>(u_necc+((UB0-UB20)/4)))
;;;9508   			{
;;;9509   			cntrl_hndl_plazma=53;
;;;9510                  if(cntrl_stat_blok_cnt)cntrl_stat_new--;
;;;9511   			else cntrl_stat_new-=2;
;;;9512   			}	
;;;9513   		else if(load_U>(u_necc+1))
;;;9514   			{
;;;9515   			cntrl_hndl_plazma=54;
;;;9516   			cntrl_stat_new--;
;;;9517   			}					
;;;9518   		}
;;;9519   
;;;9520   	gran(&cntrl_stat_new,10,1022);
;;;9521   				
;;;9522   	cntrl_stat_old=cntrl_stat_new;
;;;9523   	cntrl_stat=cntrl_stat_new;	
;;;9524   	}
;;;9525   #endif
;;;9526   
;;;9527   iiii=0;
00624a  7625              STRB     r5,[r4,#0x18]
;;;9528   for(i=0;i<NUMIST;i++)
00624c  75e5              STRB     r5,[r4,#0x17]
00624e  4857              LDR      r0,|L1.25516|
006250  f9b01000          LDRSH    r1,[r0,#0]
006254  e00c              B        |L1.25200|
                  |L1.25174|
;;;9529        {
;;;9530        if(bps[i]._cnt<30)iiii=1;
006256  eb0002c0          ADD      r2,r0,r0,LSL #3
00625a  eb021200          ADD      r2,r2,r0,LSL #4
00625e  eb090282          ADD      r2,r9,r2,LSL #2
006262  78d2              LDRB     r2,[r2,#3]
006264  2a1e              CMP      r2,#0x1e
006266  d200              BCS      |L1.25194|
006268  7626              STRB     r6,[r4,#0x18]
                  |L1.25194|
00626a  f1000001          ADD      r0,r0,#1              ;9528
00626e  75e0              STRB     r0,[r4,#0x17]         ;9528
                  |L1.25200|
006270  7de0              LDRB     r0,[r4,#0x17]         ;9528  ; i
006272  4288              CMP      r0,r1                 ;9528
006274  dbef              BLT      |L1.25174|
;;;9531        }
;;;9532   
;;;9533   if(iiii==0)
006276  7e20              LDRB     r0,[r4,#0x18]  ; iiii
006278  b948              CBNZ     r0,|L1.25230|
;;;9534   	{
;;;9535   	cntrl_stat=600;	
;;;9536   	cntrl_stat_old=600;
;;;9537   	cntrl_stat_new=600;
;;;9538   	cntrl_stat=10*PWM_START;
00627a  484d              LDR      r0,|L1.25520|
00627c  8800              LDRH     r0,[r0,#0]  ; PWM_START
00627e  eb000080          ADD      r0,r0,r0,LSL #2
006282  ea4f0040          LSL      r0,r0,#1
006286  8660              STRH     r0,[r4,#0x32]
;;;9539   	cntrl_stat_old=10*PWM_START;
006288  86a0              STRH     r0,[r4,#0x34]
;;;9540   	cntrl_stat_new=10*PWM_START;
00628a  f8a40048          STRH     r0,[r4,#0x48]
                  |L1.25230|
;;;9541   	}
;;;9542   
;;;9543   #ifdef UKU_220_IPS_TERMOKOMPENSAT
;;;9544   if(ica_cntrl_hndl_cnt)	ica_cntrl_hndl_cnt--;
00628e  f9b70000          LDRSH    r0,[r7,#0]  ; ica_cntrl_hndl_cnt
006292  b110              CBZ      r0,|L1.25242|
006294  f1a00001          SUB      r0,r0,#1
006298  8038              STRH     r0,[r7,#0]
                  |L1.25242|
;;;9545   
;;;9546   
;;;9547   
;;;9548   #endif
;;;9549   
;;;9550   
;;;9551   gran(&cntrl_stat,10,1022); 
00629a  483f              LDR      r0,|L1.25496|
00629c  f24032fe          MOV      r2,#0x3fe
0062a0  210a              MOVS     r1,#0xa
0062a2  3816              SUBS     r0,r0,#0x16
0062a4  f7fffffe          BL       gran
;;;9552   b1Hz_ch=0;
0062a8  75a5              STRB     r5,[r4,#0x16]
                  |L1.25258|
;;;9553   }
0062aa  e8bd9ff0          POP      {r4-r12,pc}
;;;9554   #endif
                          ENDP

                  ext_drv PROC
;;;10043  //-----------------------------------------------
;;;10044  void ext_drv(void)
0062ae  e92d5ff0          PUSH     {r4-r12,lr}
;;;10045  {
;;;10046  char i;
;;;10047  
;;;10048  
;;;10049  for(i=0;i<NUMSK;i++)
0062b2  f04f0000          MOV      r0,#0
0062b6  4a40              LDR      r2,|L1.25528|
;;;10050  	{
;;;10051  	#ifdef UKU_MGTS
;;;10052  	if(adc_buff_[sk_buff_RSTKM[i]]<2000)
;;;10053  	#endif
;;;10054  	#ifdef UKU_RSTKM
;;;10055  	if(adc_buff_[sk_buff_RSTKM[i]]<2000)
;;;10056  	#endif
;;;10057  	#ifdef UKU_3U
;;;10058  	if(adc_buff_[sk_buff_3U[i]]<2000)
;;;10059  	#endif
;;;10060  	#ifdef UKU_GLONASS
;;;10061  	if(adc_buff_[sk_buff_GLONASS[i]]<2000)
;;;10062  	#endif
;;;10063  	#ifdef UKU_KONTUR
;;;10064  	if(adc_buff_[sk_buff_KONTUR[i]]<2000)
;;;10065  	#endif
;;;10066  	#ifdef UKU_6U
;;;10067  	if(adc_buff_[sk_buff_6U[i]]<2000)
;;;10068  	#endif
;;;10069  	#ifdef UKU_220
;;;10070  	if(adc_buff_[sk_buff_220[i]]<2000)
;;;10071  	#endif
;;;10072  	#ifdef UKU_220_V2
;;;10073  	if(adc_buff_[sk_buff_220[i]]<2000)
;;;10074  	#endif
;;;10075  	#ifdef UKU_220_IPS_TERMOKOMPENSAT
;;;10076  	if(adc_buff_[sk_buff_220[i]]<2000)
;;;10077  	#endif
;;;10078  	#ifdef UKU_TELECORE2015	
;;;10079  	if(adc_buff_[sk_buff_TELECORE2015[i]]<2000)	 //TODO
;;;10080  	#endif
;;;10081  	#ifdef UKU_TELECORE2017
;;;10082  	if(adc_buff_[sk_buff_TELECORE2015[i]]<2000)	 //TODO
;;;10083  	#endif
;;;10084  	#ifdef IPS_SGEP_GAZPROM
;;;10085  	if(adc_buff_[sk_buff_6U[i]]<2000)
;;;10086  	#endif		
;;;10087  		{
;;;10088  		if(sk_cnt[i]<10)
0062b8  4b3e              LDR      r3,|L1.25524|
;;;10089  			{
;;;10090  			sk_cnt[i]++;
;;;10091  			if(sk_cnt[i]>=10)
;;;10092  				{
;;;10093  				sk_stat[i]=ssON;
0062ba  4d34              LDR      r5,|L1.25484|
0062bc  f04f0a01          MOV      r10,#1
;;;10094  				}
;;;10095  			}
;;;10096  		else 
;;;10097  			{
;;;10098  			sk_cnt[i]=10;
0062c0  f04f0b0a          MOV      r11,#0xa
0062c4  4606              MOV      r6,r0                 ;10049
0062c6  f9b24000          LDRSH    r4,[r2,#0]            ;10049
0062ca  e025              B        |L1.25368|
                  |L1.25292|
0062cc  493b              LDR      r1,|L1.25532|
0062ce  4f3c              LDR      r7,|L1.25536|
0062d0  5c09              LDRB     r1,[r1,r0]            ;10076
0062d2  f9371011          LDRSH    r1,[r7,r1,LSL #1]     ;10076
0062d6  f5b16ffa          CMP      r1,#0x7d0             ;10076
0062da  da0e              BGE      |L1.25338|
0062dc  5619              LDRSB    r1,[r3,r0]            ;10088
0062de  290a              CMP      r1,#0xa               ;10088
0062e0  da08              BGE      |L1.25332|
0062e2  f1010101          ADD      r1,r1,#1              ;10090
0062e6  b249              SXTB     r1,r1                 ;10090
0062e8  5419              STRB     r1,[r3,r0]            ;10090
0062ea  290a              CMP      r1,#0xa               ;10091
0062ec  db11              BLT      |L1.25362|
0062ee  f805a000          STRB     r10,[r5,r0]           ;10093
0062f2  e00e              B        |L1.25362|
                  |L1.25332|
0062f4  f803b000          STRB     r11,[r3,r0]
0062f8  e00b              B        |L1.25362|
                  |L1.25338|
;;;10099  			}
;;;10100                 
;;;10101  		}
;;;10102  	else
;;;10103  		{
;;;10104  		if(sk_cnt[i]>0)
0062fa  5619              LDRSB    r1,[r3,r0]
0062fc  2900              CMP      r1,#0
0062fe  dd07              BLE      |L1.25360|
;;;10105  			{
;;;10106  			sk_cnt[i]--;
006300  f1a10101          SUB      r1,r1,#1
006304  b249              SXTB     r1,r1
006306  5419              STRB     r1,[r3,r0]
;;;10107  			if(sk_cnt[i]<=0)
006308  2900              CMP      r1,#0
00630a  dc02              BGT      |L1.25362|
;;;10108  				{
;;;10109  				sk_stat[i]=ssOFF;
00630c  542e              STRB     r6,[r5,r0]
00630e  e000              B        |L1.25362|
                  |L1.25360|
;;;10110  				}
;;;10111  			}
;;;10112  		else 
;;;10113  			{
;;;10114  			sk_cnt[i]=0;
006310  541e              STRB     r6,[r3,r0]
                  |L1.25362|
006312  f1000001          ADD      r0,r0,#1              ;10049
006316  b2c0              UXTB     r0,r0                 ;10049
                  |L1.25368|
006318  42a0              CMP      r0,r4                 ;10049
00631a  dbd7              BLT      |L1.25292|
;;;10115  			}
;;;10116  		}
;;;10117  	}
;;;10118  
;;;10119  for(i=0;i<NUMSK;i++)
00631c  f04f0400          MOV      r4,#0
;;;10120  	{
;;;10121  	if(((SK_SIGN[i]==0)&&(sk_stat[i]==ssON))||((SK_SIGN[i])&&(sk_stat[i]==ssOFF)) )
;;;10122  		{
;;;10123  		if(sk_av_cnt[i]<10)
006320  f8df90a0          LDR      r9,|L1.25540|
;;;10124  			{
;;;10125  			sk_av_cnt[i]++;
;;;10126  			if(sk_av_cnt[i]>=10)
;;;10127  				{
;;;10128  				sk_av_stat[i]=sasON;
006324  4f28              LDR      r7,|L1.25544|
;;;10129  				}
;;;10130  			}
;;;10131  		else 
;;;10132  			{
;;;10133  			sk_av_cnt[i]=10;
;;;10134  			}
;;;10135  		}
;;;10136  	else
;;;10137  		{
;;;10138  		if(sk_av_cnt[i]>=0)
;;;10139  			{
;;;10140  			sk_av_cnt[i]--;
;;;10141  			if(sk_av_cnt[i]<=0)
;;;10142  				{
;;;10143  				sk_av_stat[i]=sasOFF;
;;;10144  				}
;;;10145  			}
;;;10146  		else 
;;;10147  			{
;;;10148  			sk_av_cnt[i]=0;
;;;10149  			}
;;;10150  		}
;;;10151  
;;;10152  #ifndef UKU_KONTUR
;;;10153  	if(sk_av_stat_old[i]!=sk_av_stat[i])
006326  f8df80a4          LDR      r8,|L1.25548|
00632a  e0b1              B        |L1.25744|
                  |L1.25388|
00632c  4828              LDR      r0,|L1.25552|
00632e  f9300014          LDRSH    r0,[r0,r4,LSL #1]     ;10121
006332  b910              CBNZ     r0,|L1.25402|
006334  5d29              LDRB     r1,[r5,r4]            ;10121
006336  2901              CMP      r1,#1                 ;10121
006338  d00f              BEQ      |L1.25434|
                  |L1.25402|
00633a  b108              CBZ      r0,|L1.25408|
00633c  5d28              LDRB     r0,[r5,r4]            ;10121
00633e  b160              CBZ      r0,|L1.25434|
                  |L1.25408|
006340  f9190004          LDRSB    r0,[r9,r4]            ;10138
006344  2800              CMP      r0,#0                 ;10138
006346  db48              BLT      |L1.25562|
006348  f1a00001          SUB      r0,r0,#1              ;10140
00634c  b240              SXTB     r0,r0                 ;10140
00634e  f8090004          STRB     r0,[r9,r4]            ;10140
006352  2800              CMP      r0,#0                 ;10141
006354  dc43              BGT      |L1.25566|
006356  553e              STRB     r6,[r7,r4]            ;10143
006358  e041              B        |L1.25566|
                  |L1.25434|
00635a  f9190004          LDRSB    r0,[r9,r4]            ;10123
00635e  280a              CMP      r0,#0xa               ;10123
006360  da38              BGE      |L1.25556|
006362  f1000001          ADD      r0,r0,#1              ;10125
006366  b240              SXTB     r0,r0                 ;10125
006368  f8090004          STRB     r0,[r9,r4]            ;10125
00636c  280a              CMP      r0,#0xa               ;10126
00636e  db36              BLT      |L1.25566|
006370  f807a004          STRB     r10,[r7,r4]           ;10128
006374  e033              B        |L1.25566|
006376  0000              DCW      0x0000
                  |L1.25464|
                          DCD      bIBAT_SMKLBR
                  |L1.25468|
                          DCD      UB0
                  |L1.25472|
                          DCD      UB20
                  |L1.25476|
                          DCD      TERMOKOMPENS
                  |L1.25480|
                          DCD      hv_vz_stat
                  |L1.25484|
                          DCD      sk_stat
                  |L1.25488|
                          DCD      sk_stat_old
                  |L1.25492|
                          DCD      VZ_KIND
                  |L1.25496|
                          DCD      ||area_number.25||+0x48
                  |L1.25500|
                          DCD      net_av_2min_timer
                  |L1.25504|
                          DCD      ICA_EN
                  |L1.25508|
                          DCD      ica_cntrl_hndl
                  |L1.25512|
                          DCD      ica_u_necc
                  |L1.25516|
                          DCD      NUMIST
                  |L1.25520|
                          DCD      PWM_START
                  |L1.25524|
                          DCD      sk_cnt
                  |L1.25528|
                          DCD      NUMSK
                  |L1.25532|
                          DCD      ||area_number.19||
                  |L1.25536|
                          DCD      ||.bss||+0x40c
                  |L1.25540|
                          DCD      sk_av_cnt
                  |L1.25544|
                          DCD      sk_av_stat
                  |L1.25548|
                          DCD      sk_av_stat_old
                  |L1.25552|
                          DCD      SK_SIGN
                  |L1.25556|
0063d4  f809b004          STRB     r11,[r9,r4]           ;10133
0063d8  e001              B        |L1.25566|
                  |L1.25562|
0063da  f8096004          STRB     r6,[r9,r4]            ;10148
                  |L1.25566|
0063de  f8181004          LDRB     r1,[r8,r4]
0063e2  5d38              LDRB     r0,[r7,r4]
0063e4  4281              CMP      r1,r0
0063e6  d04d              BEQ      |L1.25732|
;;;10154  		{
;;;10155  		plazma_sk++;
0063e8  4af8              LDR      r2,|L1.26572|
0063ea  8811              LDRH     r1,[r2,#0]  ; plazma_sk
0063ec  f1010101          ADD      r1,r1,#1
0063f0  8011              STRH     r1,[r2,#0]
;;;10156  		if(sk_av_stat[i]==sasON)
0063f2  2801              CMP      r0,#1
0063f4  d007              BEQ      |L1.25606|
;;;10157  			{
;;;10158  			if(i==0)snmp_trap_send("SK #1 Alarm",15,1,1);
;;;10159  			else if(i==1)
;;;10160  				{
;;;10161  				#ifndef UKU_TELEKORE2017
;;;10162  				snmp_trap_send("SK #2 Alarm",15,2,1);
;;;10163  				#endif
;;;10164  				#ifdef UKU_TELEKORE2017
;;;10165  				snmp_trap_send("Door open",15,2,1);
;;;10166  				#endif
;;;10167  				}
;;;10168  			else if(i==2)snmp_trap_send("SK #3 Alarm",15,3,1);
;;;10169  			else if(i==3)snmp_trap_send("SK #4 Alarm",15,4,1);
;;;10170  			}
;;;10171  		else 
;;;10172  			{
;;;10173  			if(i==0)snmp_trap_send("SK #1 Alarm is off",15,1,0);
0063f6  b354              CBZ      r4,|L1.25678|
;;;10174  			else if(i==1)
0063f8  2c01              CMP      r4,#1
0063fa  d02f              BEQ      |L1.25692|
;;;10175  				{
;;;10176  				#ifndef UKU_TELEKORE2017
;;;10177  				snmp_trap_send("SK #2 Alarm is off",15,2,0);
;;;10178  				#endif
;;;10179  				#ifdef UKU_TELEKORE2017
;;;10180  				snmp_trap_send("Door open clear",15,2,0);
;;;10181  				#endif
;;;10182  				}
;;;10183  			else if(i==2)snmp_trap_send("SK #3 Alarm is off",15,3,0);
0063fc  2c02              CMP      r4,#2
0063fe  d034              BEQ      |L1.25706|
;;;10184  			else if(i==3)snmp_trap_send("SK #4 Alarm is off",15,4,0);
006400  2c03              CMP      r4,#3
006402  d039              BEQ      |L1.25720|
006404  e03e              B        |L1.25732|
                  |L1.25606|
006406  b134              CBZ      r4,|L1.25622|
006408  2c01              CMP      r4,#1                 ;10159
00640a  d00b              BEQ      |L1.25636|
00640c  2c02              CMP      r4,#2                 ;10168
00640e  d010              BEQ      |L1.25650|
006410  2c03              CMP      r4,#3                 ;10169
006412  d015              BEQ      |L1.25664|
006414  e036              B        |L1.25732|
                  |L1.25622|
006416  2301              MOVS     r3,#1                 ;10158
006418  461a              MOV      r2,r3                 ;10158
00641a  210f              MOVS     r1,#0xf               ;10158
00641c  a0ec              ADR      r0,|L1.26576|
00641e  f7fffffe          BL       snmp_trap_send
006422  e02f              B        |L1.25732|
                  |L1.25636|
006424  2301              MOVS     r3,#1                 ;10162
006426  2202              MOVS     r2,#2                 ;10162
006428  210f              MOVS     r1,#0xf               ;10162
00642a  a0ec              ADR      r0,|L1.26588|
00642c  f7fffffe          BL       snmp_trap_send
006430  e028              B        |L1.25732|
                  |L1.25650|
006432  2301              MOVS     r3,#1                 ;10168
006434  2203              MOVS     r2,#3                 ;10168
006436  210f              MOVS     r1,#0xf               ;10168
006438  a0eb              ADR      r0,|L1.26600|
00643a  f7fffffe          BL       snmp_trap_send
00643e  e021              B        |L1.25732|
                  |L1.25664|
006440  2301              MOVS     r3,#1                 ;10169
006442  2204              MOVS     r2,#4                 ;10169
006444  210f              MOVS     r1,#0xf               ;10169
006446  a0eb              ADR      r0,|L1.26612|
006448  f7fffffe          BL       snmp_trap_send
00644c  e01a              B        |L1.25732|
                  |L1.25678|
00644e  2300              MOVS     r3,#0                 ;10173
006450  2201              MOVS     r2,#1                 ;10173
006452  210f              MOVS     r1,#0xf               ;10173
006454  a0ea              ADR      r0,|L1.26624|
006456  f7fffffe          BL       snmp_trap_send
00645a  e013              B        |L1.25732|
                  |L1.25692|
00645c  2300              MOVS     r3,#0                 ;10177
00645e  2202              MOVS     r2,#2                 ;10177
006460  210f              MOVS     r1,#0xf               ;10177
006462  a0ec              ADR      r0,|L1.26644|
006464  f7fffffe          BL       snmp_trap_send
006468  e00c              B        |L1.25732|
                  |L1.25706|
00646a  2300              MOVS     r3,#0                 ;10183
00646c  2203              MOVS     r2,#3                 ;10183
00646e  210f              MOVS     r1,#0xf               ;10183
006470  a0ed              ADR      r0,|L1.26664|
006472  f7fffffe          BL       snmp_trap_send
006476  e005              B        |L1.25732|
                  |L1.25720|
006478  2300              MOVS     r3,#0
00647a  2204              MOVS     r2,#4
00647c  210f              MOVS     r1,#0xf
00647e  a0ef              ADR      r0,|L1.26684|
006480  f7fffffe          BL       snmp_trap_send
                  |L1.25732|
;;;10185  			}
;;;10186  	 	}
;;;10187  #endif
;;;10188  
;;;10189  #ifdef UKU_KONTUR
;;;10190  	if(sk_av_stat_old[i]!=sk_av_stat[i])
;;;10191  		{
;;;10192  		plazma_sk++;
;;;10193  		if(sk_av_stat[i]==sasON)
;;;10194  			{
;;;10195  			if(i==0)snmp_trap_send("Door is opened",15,1,1);
;;;10196  			else if(i==1)snmp_trap_send("Smoke Alarm",15,2,1);
;;;10197  			else if(i==2)snmp_trap_send("Shock Sensor Alarm",15,3,1);
;;;10198  			else if(i==3)snmp_trap_send("SK #4 Alarm",15,4,1);
;;;10199  			}
;;;10200  		else 
;;;10201  			{
;;;10202  			if(i==0)snmp_trap_send("Door is closed",15,1,0);
;;;10203  			else if(i==1)snmp_trap_send("Smoke Alarm is off",15,2,0);
;;;10204  			else if(i==2)snmp_trap_send("Shock Sensor Alarm is off",15,3,0);
;;;10205  			else if(i==3)snmp_trap_send("SK #4 Alarm is off",15,4,0);
;;;10206  			}
;;;10207  	 	}
;;;10208  #endif
;;;10209  	sk_av_stat_old[i]=sk_av_stat[i];
006484  5d38              LDRB     r0,[r7,r4]
006486  f8080004          STRB     r0,[r8,r4]
00648a  f1040401          ADD      r4,r4,#1              ;10119
00648e  b2e4              UXTB     r4,r4                 ;10119
                  |L1.25744|
006490  48ef              LDR      r0,|L1.26704|
006492  f9b00000          LDRSH    r0,[r0,#0]            ;10119  ; NUMSK
006496  4284              CMP      r4,r0                 ;10119
006498  f6ffaf48          BLT      |L1.25388|
;;;10210  	}
;;;10211  }
00649c  e705              B        |L1.25258|
;;;10212  
                          ENDP

                  zar_superviser_start PROC
;;;10249  //-----------------------------------------------
;;;10250  void zar_superviser_start(void)
00649e  4aed              LDR      r2,|L1.26708|
;;;10251  {
;;;10252  sign_U[0]=1;
0064a0  f04f0001          MOV      r0,#1
0064a4  7010              STRB     r0,[r2,#0]
;;;10253  sign_I[0]=1;
0064a6  49ec              LDR      r1,|L1.26712|
0064a8  7008              STRB     r0,[r1,#0]
;;;10254  sign_U[1]=1;
0064aa  7050              STRB     r0,[r2,#1]
;;;10255  sign_I[1]=1;
0064ac  7048              STRB     r0,[r1,#1]
;;;10256  
;;;10257  }
0064ae  4770              BX       lr
;;;10258  
                          ENDP

                  zar_superviser_drv PROC
;;;10214  //-----------------------------------------------
;;;10215  void zar_superviser_drv(void)
0064b0  e92d5ff0          PUSH     {r4-r12,lr}
;;;10216  {
;;;10217  
;;;10218  if(((bat[0]._Ub>u_necc_up) || (bat[0]._Ub<u_necc_dn))&&(main_kb_cnt<((TBAT*60)-30))&&(main_kb_cnt>((TBAT*60)-150))) sign_U[0]=0;
0064b4  48ea              LDR      r0,|L1.26720|
0064b6  f8df93ac          LDR      r9,|L1.26724|
0064ba  f8df83a0          LDR      r8,|L1.26716|
0064be  f9b0c000          LDRSH    r12,[r0,#0]  ; u_necc_up
0064c2  f9b90000          LDRSH    r0,[r9,#0]
0064c6  4cc1              LDR      r4,|L1.26572|
0064c8  ebc01100          RSB      r1,r0,r0,LSL #4
0064cc  3c46              SUBS     r4,r4,#0x46
0064ce  f9b87002          LDRSH    r7,[r8,#2]  ; bat
0064d2  f06f0a1d          MVN      r10,#0x1d
0064d6  f06f0b95          MVN      r11,#0x95
0064da  2500              MOVS     r5,#0
0064dc  4edd              LDR      r6,|L1.26708|
0064de  f9b40052          LDRSH    r0,[r4,#0x52]
0064e2  eb0a0281          ADD      r2,r10,r1,LSL #2
0064e6  eb0b0381          ADD      r3,r11,r1,LSL #2
0064ea  4567              CMP      r7,r12
0064ec  dc05              BGT      |L1.25850|
0064ee  f8dfc378          LDR      r12,|L1.26728|
0064f2  f9bcc000          LDRSH    r12,[r12,#0]  ; u_necc_dn
0064f6  4567              CMP      r7,r12
0064f8  da04              BGE      |L1.25860|
                  |L1.25850|
0064fa  4282              CMP      r2,r0
0064fc  dd02              BLE      |L1.25860|
0064fe  4283              CMP      r3,r0
006500  da00              BGE      |L1.25860|
006502  7035              STRB     r5,[r6,#0]
                  |L1.25860|
;;;10219  
;;;10220  if(((bat[0]._Ib>(2*IKB)) || (bat[0]._Ib<(-IKB*2))) &&(main_kb_cnt<((TBAT*60)-30))&&(main_kb_cnt>((TBAT*60)-150))) sign_I[0]=0;
006504  4fd9              LDR      r7,|L1.26732|
006506  f9b8c008          LDRSH    r12,[r8,#8]  ; bat
00650a  f9b7e000          LDRSH    lr,[r7,#0]  ; IKB
00650e  4fd2              LDR      r7,|L1.26712|
006510  ebbc0f4e          CMP      r12,lr,LSL #1
006514  dc04              BGT      |L1.25888|
006516  f1ce0e00          RSB      lr,lr,#0
00651a  ebbc0f4e          CMP      r12,lr,LSL #1
00651e  da04              BGE      |L1.25898|
                  |L1.25888|
006520  4282              CMP      r2,r0
006522  dd02              BLE      |L1.25898|
006524  4283              CMP      r3,r0
006526  da00              BGE      |L1.25898|
006528  703d              STRB     r5,[r7,#0]
                  |L1.25898|
;;;10221  																 
;;;10222  if((main_kb_cnt==((TBAT*60)-10)) &&(spc_stat==spcOFF))
00652a  f06f0209          MVN      r2,#9
00652e  eb020181          ADD      r1,r2,r1,LSL #2
006532  4281              CMP      r1,r0
006534  d121              BNE      |L1.25978|
006536  f8940023          LDRB     r0,[r4,#0x23]  ; spc_stat
00653a  b9f0              CBNZ     r0,|L1.25978|
;;;10223  	{
;;;10224  	if((sign_U[0]==1) && (sign_I[0]==1) && (lc640_read_int(EE_BAT1_ZAR_CNT)!=BAT_C_REAL[0]) && (NUMBAT) && (!(bat[0]._av&1)))
00653c  7830              LDRB     r0,[r6,#0]  ; sign_U
00653e  2801              CMP      r0,#1
006540  d11b              BNE      |L1.25978|
006542  7838              LDRB     r0,[r7,#0]  ; sign_I
006544  2801              CMP      r0,#1
006546  d118              BNE      |L1.25978|
006548  f44f70ef          MOV      r0,#0x1de
00654c  f7fffffe          BL       lc640_read_int
006550  49c7              LDR      r1,|L1.26736|
006552  f9b11000          LDRSH    r1,[r1,#0]  ; BAT_C_REAL
006556  4288              CMP      r0,r1
006558  d00f              BEQ      |L1.25978|
00655a  48c6              LDR      r0,|L1.26740|
00655c  8800              LDRH     r0,[r0,#0]  ; NUMBAT
00655e  b160              CBZ      r0,|L1.25978|
006560  f898003d          LDRB     r0,[r8,#0x3d]  ; bat
006564  07c0              LSLS     r0,r0,#31
006566  d108              BNE      |L1.25978|
;;;10225  		{
;;;10226  		lc640_write_int(EE_BAT1_ZAR_CNT,BAT_C_REAL[0]);
006568  f44f70ef          MOV      r0,#0x1de
00656c  f7fffffe          BL       lc640_write_int
;;;10227  		superviser_cnt++;
006570  48c1              LDR      r0,|L1.26744|
006572  7801              LDRB     r1,[r0,#0]  ; superviser_cnt
006574  f1010101          ADD      r1,r1,#1
006578  7001              STRB     r1,[r0,#0]
                  |L1.25978|
;;;10228  		}
;;;10229  	
;;;10230  	}
;;;10231  
;;;10232  if(((bat[0]._Ub>u_necc_up) || (bat[1]._Ub<u_necc_dn))&&(main_kb_cnt<((TBAT*60)-30))&&(main_kb_cnt>((TBAT*60)-150))) sign_U[1]=0;
00657a  48b9              LDR      r0,|L1.26720|
00657c  f9b81002          LDRSH    r1,[r8,#2]  ; bat
006580  f9b00000          LDRSH    r0,[r0,#0]  ; u_necc_up
006584  4281              CMP      r1,r0
006586  dc06              BGT      |L1.26006|
006588  48b7              LDR      r0,|L1.26728|
00658a  f9b8104e          LDRSH    r1,[r8,#0x4e]  ; bat
00658e  f9b00000          LDRSH    r0,[r0,#0]  ; u_necc_dn
006592  4281              CMP      r1,r0
006594  da0e              BGE      |L1.26036|
                  |L1.26006|
006596  f9b90000          LDRSH    r0,[r9,#0]  ; TBAT
00659a  f9b41052          LDRSH    r1,[r4,#0x52]  ; main_kb_cnt
00659e  ebc01000          RSB      r0,r0,r0,LSL #4
0065a2  eb0a0280          ADD      r2,r10,r0,LSL #2
0065a6  428a              CMP      r2,r1
0065a8  dd04              BLE      |L1.26036|
0065aa  eb0b0080          ADD      r0,r11,r0,LSL #2
0065ae  4288              CMP      r0,r1
0065b0  da00              BGE      |L1.26036|
0065b2  7075              STRB     r5,[r6,#1]
                  |L1.26036|
;;;10233  
;;;10234  if(((bat[1]._Ib>(2*IKB)) || (bat[1]._Ib<(-IKB*2))) &&(main_kb_cnt<((TBAT*60)-30))&&(main_kb_cnt>((TBAT*60)-150))) sign_I[1]=0;
0065b4  49ad              LDR      r1,|L1.26732|
0065b6  f9b80054          LDRSH    r0,[r8,#0x54]  ; bat
0065ba  f9b11000          LDRSH    r1,[r1,#0]  ; IKB
0065be  ebb00f41          CMP      r0,r1,LSL #1
0065c2  dc03              BGT      |L1.26060|
0065c4  4249              RSBS     r1,r1,#0
0065c6  ebb00f41          CMP      r0,r1,LSL #1
0065ca  da0e              BGE      |L1.26090|
                  |L1.26060|
0065cc  f9b90000          LDRSH    r0,[r9,#0]  ; TBAT
0065d0  f9b41052          LDRSH    r1,[r4,#0x52]  ; main_kb_cnt
0065d4  ebc01000          RSB      r0,r0,r0,LSL #4
0065d8  eb0a0280          ADD      r2,r10,r0,LSL #2
0065dc  428a              CMP      r2,r1
0065de  dd04              BLE      |L1.26090|
0065e0  eb0b0080          ADD      r0,r11,r0,LSL #2
0065e4  4288              CMP      r0,r1
0065e6  da00              BGE      |L1.26090|
0065e8  707d              STRB     r5,[r7,#1]
                  |L1.26090|
;;;10235  																 
;;;10236  if((main_kb_cnt==((TBAT*60)-10)) &&(spc_stat==spcOFF))
0065ea  f9b90000          LDRSH    r0,[r9,#0]  ; TBAT
0065ee  ebc01100          RSB      r1,r0,r0,LSL #4
0065f2  f06f0009          MVN      r0,#9
0065f6  eb000081          ADD      r0,r0,r1,LSL #2
0065fa  f9b41052          LDRSH    r1,[r4,#0x52]  ; main_kb_cnt
0065fe  4288              CMP      r0,r1
006600  d122              BNE      |L1.26184|
006602  f8940023          LDRB     r0,[r4,#0x23]  ; spc_stat
006606  b9f8              CBNZ     r0,|L1.26184|
;;;10237  	{
;;;10238  	if((sign_U[1]==1) && (sign_I[1]==1) && (lc640_read_int(EE_BAT2_ZAR_CNT)!=BAT_C_REAL[1]) && (NUMBAT==2) && (!(bat[1]._av&1)))
006608  7870              LDRB     r0,[r6,#1]  ; sign_U
00660a  2801              CMP      r0,#1
00660c  d11c              BNE      |L1.26184|
00660e  7878              LDRB     r0,[r7,#1]  ; sign_I
006610  2801              CMP      r0,#1
006612  d119              BNE      |L1.26184|
006614  f44f75fe          MOV      r5,#0x1fc
006618  4628              MOV      r0,r5
00661a  f7fffffe          BL       lc640_read_int
00661e  4994              LDR      r1,|L1.26736|
006620  f9b11002          LDRSH    r1,[r1,#2]  ; BAT_C_REAL
006624  4288              CMP      r0,r1
006626  d00f              BEQ      |L1.26184|
006628  4892              LDR      r0,|L1.26740|
00662a  8800              LDRH     r0,[r0,#0]  ; NUMBAT
00662c  2802              CMP      r0,#2
00662e  d10b              BNE      |L1.26184|
006630  f8980089          LDRB     r0,[r8,#0x89]  ; bat
006634  07c0              LSLS     r0,r0,#31
006636  d107              BNE      |L1.26184|
;;;10239  		{
;;;10240  		lc640_write_int(EE_BAT2_ZAR_CNT,BAT_C_REAL[1]);
006638  4628              MOV      r0,r5
00663a  f7fffffe          BL       lc640_write_int
;;;10241  		superviser_cnt++;
00663e  488e              LDR      r0,|L1.26744|
006640  7801              LDRB     r1,[r0,#0]  ; superviser_cnt
006642  f1010101          ADD      r1,r1,#1
006646  7001              STRB     r1,[r0,#0]
                  |L1.26184|
;;;10242  		}
;;;10243  	
;;;10244  	}
;;;10245  
;;;10246  if(main_kb_cnt==((TBAT*60)-2)) zar_superviser_start();
006648  f9b90000          LDRSH    r0,[r9,#0]  ; TBAT
00664c  f06f0101          MVN      r1,#1
006650  ebc01000          RSB      r0,r0,r0,LSL #4
006654  eb010080          ADD      r0,r1,r0,LSL #2
006658  f9b41052          LDRSH    r1,[r4,#0x52]  ; main_kb_cnt
00665c  4288              CMP      r0,r1
00665e  d102              BNE      |L1.26214|
006660  e8bd5ff0          POP      {r4-r12,lr}
006664  e7fe              B        zar_superviser_start
                  |L1.26214|
;;;10247  }
006666  e620              B        |L1.25258|
;;;10248  
                          ENDP

                  npn_hndl PROC
;;;10259  //-----------------------------------------------
;;;10260  void npn_hndl(void)
006668  e92d03f0          PUSH     {r4-r9}
;;;10261  {
;;;10262  if(NPN_OUT!=npnoOFF)
00666c  4883              LDR      r0,|L1.26748|
;;;10263  	{
;;;10264  /*	if(NPN_SIGN==npnsAVNET)
;;;10265  		{
;;;10266  		if(net_av==1)
;;;10267  			{
;;;10268  			if(npn_tz_cnt<TZNPN)
;;;10269  				{
;;;10270  				npn_tz_cnt++;
;;;10271  				if(npn_tz_cnt==TZNPN)
;;;10272  					{
;;;10273  					npn_stat=npnsOFF;
;;;10274  					}
;;;10275  				}
;;;10276  			}
;;;10277  		else
;;;10278  			{
;;;10279  			if(npn_tz_cnt)
;;;10280  				{
;;;10281  				npn_tz_cnt--;
;;;10282  				if(npn_tz_cnt==0)
;;;10283  					{
;;;10284  					npn_stat=npnsON;
;;;10285  					}
;;;10286  				}
;;;10287  			}
;;;10288  		}*/
;;;10289  /*	if(NPN_SIGN==npnsULOAD)
;;;10290  		{
;;;10291  		if(load_U<UONPN)
;;;10292  			{
;;;10293  			if(npn_tz_cnt<TZNPN)
;;;10294  				{
;;;10295  				npn_tz_cnt++;
;;;10296  				if(npn_tz_cnt==TZNPN)
;;;10297  					{
;;;10298  					npn_stat=npnsOFF;
;;;10299  					}
;;;10300  				}
;;;10301  			}
;;;10302  		else if(load_U>UVNPN)
;;;10303  			{
;;;10304  			if(npn_tz_cnt)
;;;10305  				{
;;;10306  				npn_tz_cnt--;
;;;10307  				if(npn_tz_cnt==0)
;;;10308  					{
;;;10309  					npn_stat=npnsON;
;;;10310  					}
;;;10311  				}
;;;10312  			}
;;;10313  		}*/
;;;10314  
;;;10315  	if((load_U<UONPN)&&((net_Ua<UMN)||(net_Ub<UMN)||(net_Uc<UMN)))
;;;10316  		{
;;;10317  		if(npn_tz_cnt<TZNPN)
00666e  4f84              LDR      r7,|L1.26752|
;;;10318  			{
;;;10319  			npn_tz_cnt++;
;;;10320  			if(npn_tz_cnt==TZNPN)
;;;10321  				{
;;;10322  				npn_stat=npnsOFF;
006670  4e84              LDR      r6,|L1.26756|
006672  7800              LDRB     r0,[r0,#0]            ;10262  ; NPN_OUT
006674  f04f0c00          MOV      r12,#0                ;10262
;;;10323  				}
;;;10324  			}
;;;10325  		}
;;;10326  	else if((load_U>UVNPN)&&(net_Ua>UMN)&&(net_Ub>UMN)&&(net_Uc>UMN))
;;;10327  		{
;;;10328  		if(npn_tz_cnt)
;;;10329  			{
;;;10330  			npn_tz_cnt--;
;;;10331  			if(npn_tz_cnt==0)
;;;10332  				{
;;;10333  				npn_stat=npnsON;
006678  f04f0801          MOV      r8,#1
00667c  b3e8              CBZ      r0,|L1.26362|
00667e  4882              LDR      r0,|L1.26760|
006680  4639              MOV      r1,r7                 ;10317
006682  f9b05000          LDRSH    r5,[r0,#0]            ;10315  ; load_U
006686  4881              LDR      r0,|L1.26764|
006688  f9b11000          LDRSH    r1,[r1,#0]            ;10317
00668c  f9b09000          LDRSH    r9,[r0,#0]            ;10315  ; UONPN
006690  487f              LDR      r0,|L1.26768|
006692  454d              CMP      r5,r9                 ;10315
006694  f9b02000          LDRSH    r2,[r0,#0]            ;10315
006698  487e              LDR      r0,|L1.26772|
00669a  f9b03000          LDRSH    r3,[r0,#0]            ;10315
00669e  487e              LDR      r0,|L1.26776|
0066a0  f9b04000          LDRSH    r4,[r0,#0]            ;10315
0066a4  487d              LDR      r0,|L1.26780|
0066a6  f9b00000          LDRSH    r0,[r0,#0]            ;10315
0066aa  da13              BGE      |L1.26324|
0066ac  4282              CMP      r2,r0                 ;10315
0066ae  db03              BLT      |L1.26296|
0066b0  4283              CMP      r3,r0                 ;10315
0066b2  db01              BLT      |L1.26296|
0066b4  4284              CMP      r4,r0                 ;10315
0066b6  da0d              BGE      |L1.26324|
                  |L1.26296|
0066b8  4879              LDR      r0,|L1.26784|
0066ba  f9b02000          LDRSH    r2,[r0,#0]            ;10317  ; TZNPN
0066be  4291              CMP      r1,r2                 ;10317
0066c0  da23              BGE      |L1.26378|
0066c2  f1010101          ADD      r1,r1,#1              ;10319
0066c6  b208              SXTH     r0,r1                 ;10319
0066c8  8038              STRH     r0,[r7,#0]            ;10319
0066ca  4290              CMP      r0,r2                 ;10320
0066cc  d11d              BNE      |L1.26378|
0066ce  f886c000          STRB     r12,[r6,#0]           ;10322
0066d2  e01a              B        |L1.26378|
                  |L1.26324|
0066d4  f8dfc1cc          LDR      r12,|L1.26788|
0066d8  f9bcc000          LDRSH    r12,[r12,#0]          ;10326  ; UVNPN
0066dc  4565              CMP      r5,r12                ;10326
0066de  dd14              BLE      |L1.26378|
0066e0  4282              CMP      r2,r0                 ;10326
0066e2  dd12              BLE      |L1.26378|
0066e4  4283              CMP      r3,r0                 ;10326
0066e6  dd10              BLE      |L1.26378|
0066e8  4284              CMP      r4,r0                 ;10326
0066ea  dd0e              BLE      |L1.26378|
0066ec  b169              CBZ      r1,|L1.26378|
0066ee  f1a10101          SUB      r1,r1,#1              ;10330
0066f2  b208              SXTH     r0,r1                 ;10330
0066f4  8038              STRH     r0,[r7,#0]            ;10330
0066f6  b940              CBNZ     r0,|L1.26378|
0066f8  e000              B        |L1.26364|
                  |L1.26362|
0066fa  e002              B        |L1.26370|
                  |L1.26364|
0066fc  f8868000          STRB     r8,[r6,#0]
006700  e003              B        |L1.26378|
                  |L1.26370|
;;;10334  				}
;;;10335  			}
;;;10336  		}
;;;10337  	}
;;;10338  else
;;;10339  	{
;;;10340  	npn_tz_cnt=0;
006702  f8a7c000          STRH     r12,[r7,#0]
;;;10341  	npn_stat=npnsON;
006706  f8868000          STRB     r8,[r6,#0]
                  |L1.26378|
;;;10342  	}
;;;10343  
;;;10344  if(npn_stat==npnsOFF) mess_send(MESS2RELE_HNDL,PARAM_RELE_NPN,1,15);
00670a  7830              LDRB     r0,[r6,#0]  ; npn_stat
00670c  2800              CMP      r0,#0
00670e  d107              BNE      |L1.26400|
006710  e8bd03f0          POP      {r4-r9}
006714  230f              MOVS     r3,#0xf
006716  2201              MOVS     r2,#1
006718  216e              MOVS     r1,#0x6e
00671a  20d2              MOVS     r0,#0xd2
00671c  f7ffbffe          B.W      mess_send
                  |L1.26400|
;;;10345  
;;;10346  
;;;10347  }
006720  e8bd03f0          POP      {r4-r9}
006724  4770              BX       lr
;;;10348  
                          ENDP

                  loadoff_hndl PROC
;;;10350  //-----------------------------------------------
;;;10351  void loadoff_hndl(void)
006726  b5f0              PUSH     {r4-r7,lr}
;;;10352  {
;;;10353  if((load_U>UONPN)||(load_U<UVNPN))
006728  4857              LDR      r0,|L1.26760|
;;;10354  	{
;;;10355  	if(load_off_cnt<TZNPN)
00672a  4d5f              LDR      r5,|L1.26792|
;;;10356  		{
;;;10357  		load_off_cnt++;
;;;10358  		if(load_off_cnt>=TZNPN)
;;;10359  			{
;;;10360  			load_off_stat=npnsOFF;
00672c  2700              MOVS     r7,#0
00672e  f9b01000          LDRSH    r1,[r0,#0]            ;10353  ; load_U
006732  4856              LDR      r0,|L1.26764|
006734  4e5d              LDR      r6,|L1.26796|
006736  f9b02000          LDRSH    r2,[r0,#0]            ;10353  ; UONPN
00673a  f9b50000          LDRSH    r0,[r5,#0]            ;10355
00673e  4291              CMP      r1,r2                 ;10353
006740  dc04              BGT      |L1.26444|
006742  4b58              LDR      r3,|L1.26788|
006744  f9b33000          LDRSH    r3,[r3,#0]            ;10353  ; UVNPN
006748  4299              CMP      r1,r3                 ;10353
00674a  da0d              BGE      |L1.26472|
                  |L1.26444|
00674c  4954              LDR      r1,|L1.26784|
00674e  f9b11000          LDRSH    r1,[r1,#0]            ;10355  ; TZNPN
006752  4288              CMP      r0,r1                 ;10355
006754  da1c              BGE      |L1.26512|
006756  f1000001          ADD      r0,r0,#1              ;10357
00675a  b200              SXTH     r0,r0                 ;10357
00675c  8028              STRH     r0,[r5,#0]            ;10357
00675e  4288              CMP      r0,r1                 ;10358
006760  db16              BLT      |L1.26512|
006762  7037              STRB     r7,[r6,#0]
;;;10361  			load_off_cnt=TZNPN;
006764  8029              STRH     r1,[r5,#0]
006766  e013              B        |L1.26512|
                  |L1.26472|
;;;10362  			}
;;;10363  		}
;;;10364  	}
;;;10365  else if((load_U>(UVNPN+dUNPN))&&(load_U<(UONPN-dUNPN)))
006768  4c51              LDR      r4,|L1.26800|
00676a  f9b44000          LDRSH    r4,[r4,#0]  ; dUNPN
00676e  4423              ADD      r3,r3,r4
006770  428b              CMP      r3,r1
006772  da0d              BGE      |L1.26512|
006774  1b12              SUBS     r2,r2,r4
006776  428a              CMP      r2,r1
006778  dd0a              BLE      |L1.26512|
;;;10366  	{
;;;10367  	if(load_off_cnt)
00677a  b148              CBZ      r0,|L1.26512|
;;;10368  		{
;;;10369  		load_off_cnt--;
00677c  f1a00001          SUB      r0,r0,#1
006780  b200              SXTH     r0,r0
006782  8028              STRH     r0,[r5,#0]
;;;10370  		if(load_off_cnt<=0)
006784  2800              CMP      r0,#0
006786  dc03              BGT      |L1.26512|
;;;10371  			{
;;;10372  			load_off_stat=npnsON;
006788  f04f0001          MOV      r0,#1
00678c  7030              STRB     r0,[r6,#0]
;;;10373  			load_off_cnt=0;
00678e  802f              STRH     r7,[r5,#0]
                  |L1.26512|
;;;10374  			}
;;;10375  		}
;;;10376  	}
;;;10377  
;;;10378  
;;;10379  if(load_off_stat==npnsOFF) tloaddisable_cmnd=10;
006790  7830              LDRB     r0,[r6,#0]  ; load_off_stat
006792  2800              CMP      r0,#0
006794  d103              BNE      |L1.26526|
006796  4947              LDR      r1,|L1.26804|
006798  f04f000a          MOV      r0,#0xa
00679c  7008              STRB     r0,[r1,#0]
                  |L1.26526|
;;;10380  
;;;10381  
;;;10382  }
00679e  bdf0              POP      {r4-r7,pc}
;;;10383  
                          ENDP

                  speedChargeStartStop PROC
;;;10571  //-----------------------------------------------
;;;10572  void speedChargeStartStop(void)
0067a0  b538              PUSH     {r3-r5,lr}
;;;10573  {
;;;10574  spch_plazma[1]++;
0067a2  4c45              LDR      r4,|L1.26808|
0067a4  7860              LDRB     r0,[r4,#1]  ; spch_plazma
0067a6  f1000001          ADD      r0,r0,#1
0067aa  7060              STRB     r0,[r4,#1]
;;;10575  /*if(speedChIsOn)
;;;10576  	{
;;;10577  	speedChIsOn=0;
;;;10578  	}
;;;10579  
;;;10580  else
;;;10581  	{
;;;10582  	if(speedChrgBlckStat==0)
;;;10583  		{
;;;10584  		speedChIsOn=1;
;;;10585  		speedChTimeCnt=0;
;;;10586  		}
;;;10587  	else
;;;10588  		{
;;;10589  		show_mess(	"     Ускоренный     ",
;;;10590  	          		"       заряд        ",
;;;10591  	          		"    заблокирован!   ",
;;;10592  	          		"                    ",2000);	 
;;;10593  		}
;;;10594  	}*/
;;;10595  
;;;10596  if(sp_ch_stat!=scsOFF)
0067ac  4843              LDR      r0,|L1.26812|
0067ae  7801              LDRB     r1,[r0,#0]  ; sp_ch_stat
0067b0  b151              CBZ      r1,|L1.26568|
;;;10597  	{
;;;10598  	sp_ch_stat=scsOFF;
0067b2  f04f0100          MOV      r1,#0
0067b6  7001              STRB     r1,[r0,#0]
;;;10599  	speedz_mem_hndl(10);
0067b8  f04f000a          MOV      r0,#0xa
0067bc  f7fffffe          BL       speedz_mem_hndl
;;;10600  	spch_plazma[1]=10;
0067c0  f04f000a          MOV      r0,#0xa
0067c4  7060              STRB     r0,[r4,#1]
                  |L1.26566|
;;;10601  	}
;;;10602  
;;;10603  else
;;;10604  	{
;;;10605  	spch_plazma[1]=20;
;;;10606  	if((speedChrgBlckStat==0)&&(spc_stat==spcOFF)
;;;10607  		#ifdef UKU_220_IPS_TERMOKOMPENSAT
;;;10608  		&&(vz1_stat==vz1sOFF)&&(vz2_stat==vz2sOFF)
;;;10609  		#endif
;;;10610  		)
;;;10611  		{
;;;10612  		#ifdef UKU_220_IPS_TERMOKOMPENSAT
;;;10613  		sp_ch_stat=scsSTEP1;
;;;10614  		#else
;;;10615  		sp_ch_stat=scsWRK;
;;;10616  		#endif
;;;10617  		speedz_mem_hndl(1);
;;;10618  		}
;;;10619  	else 
;;;10620  		{
;;;10621  		show_mess(	"     Ускоренный     ",
;;;10622  	          		"       заряд        ",
;;;10623  	          		"    заблокирован!   ",
;;;10624  	          		"                    ",2000);
;;;10625  		}
;;;10626  	}
;;;10627  }
0067c6  bd38              POP      {r3-r5,pc}
                  |L1.26568|
0067c8  e07a              B        |L1.26816|
0067ca  0000              DCW      0x0000
                  |L1.26572|
                          DCD      ||area_number.25||+0x46
                  |L1.26576|
0067d0  534b2023          DCB      "SK #1 Alarm",0
0067d4  3120416c
0067d8  61726d00
                  |L1.26588|
0067dc  534b2023          DCB      "SK #2 Alarm",0
0067e0  3220416c
0067e4  61726d00
                  |L1.26600|
0067e8  534b2023          DCB      "SK #3 Alarm",0
0067ec  3320416c
0067f0  61726d00
                  |L1.26612|
0067f4  534b2023          DCB      "SK #4 Alarm",0
0067f8  3420416c
0067fc  61726d00
                  |L1.26624|
006800  534b2023          DCB      "SK #1 Alarm is off",0
006804  3120416c
006808  61726d20
00680c  6973206f
006810  666600  
006813  00                DCB      0
                  |L1.26644|
006814  534b2023          DCB      "SK #2 Alarm is off",0
006818  3220416c
00681c  61726d20
006820  6973206f
006824  666600  
006827  00                DCB      0
                  |L1.26664|
006828  534b2023          DCB      "SK #3 Alarm is off",0
00682c  3320416c
006830  61726d20
006834  6973206f
006838  666600  
00683b  00                DCB      0
                  |L1.26684|
00683c  534b2023          DCB      "SK #4 Alarm is off",0
006840  3420416c
006844  61726d20
006848  6973206f
00684c  666600  
00684f  00                DCB      0
                  |L1.26704|
                          DCD      NUMSK
                  |L1.26708|
                          DCD      sign_U
                  |L1.26712|
                          DCD      sign_I
                  |L1.26716|
                          DCD      bat
                  |L1.26720|
                          DCD      u_necc_up
                  |L1.26724|
                          DCD      TBAT
                  |L1.26728|
                          DCD      u_necc_dn
                  |L1.26732|
                          DCD      IKB
                  |L1.26736|
                          DCD      BAT_C_REAL
                  |L1.26740|
                          DCD      NUMBAT
                  |L1.26744|
                          DCD      superviser_cnt
                  |L1.26748|
                          DCD      NPN_OUT
                  |L1.26752|
                          DCD      npn_tz_cnt
                  |L1.26756|
                          DCD      npn_stat
                  |L1.26760|
                          DCD      load_U
                  |L1.26764|
                          DCD      UONPN
                  |L1.26768|
                          DCD      net_Ua
                  |L1.26772|
                          DCD      net_Ub
                  |L1.26776|
                          DCD      net_Uc
                  |L1.26780|
                          DCD      UMN
                  |L1.26784|
                          DCD      TZNPN
                  |L1.26788|
                          DCD      UVNPN
                  |L1.26792|
                          DCD      load_off_cnt
                  |L1.26796|
                          DCD      load_off_stat
                  |L1.26800|
                          DCD      dUNPN
                  |L1.26804|
                          DCD      tloaddisable_cmnd
                  |L1.26808|
                          DCD      spch_plazma
                  |L1.26812|
                          DCD      sp_ch_stat
                  |L1.26816|
0068c0  f04f0114          MOV      r1,#0x14              ;10605
0068c4  7061              STRB     r1,[r4,#1]            ;10605
0068c6  49fa              LDR      r1,|L1.27824|
0068c8  f9b12000          LDRSH    r2,[r1,#0]            ;10606  ; speedChrgBlckStat
0068cc  49f9              LDR      r1,|L1.27828|
0068ce  f8913023          LDRB     r3,[r1,#0x23]         ;10606  ; spc_stat
0068d2  ea420203          ORR      r2,r2,r3              ;10606
0068d6  794b              LDRB     r3,[r1,#5]            ;10606  ; vz1_stat
0068d8  79c9              LDRB     r1,[r1,#7]            ;10606  ; vz2_stat
0068da  ea420203          ORR      r2,r2,r3              ;10606
0068de  430a              ORRS     r2,r2,r1              ;10606
0068e0  d009              BEQ      |L1.26870|
0068e2  f44f60fa          MOV      r0,#0x7d0             ;10621
0068e6  9000              STR      r0,[sp,#0]            ;10621
0068e8  4bf3              LDR      r3,|L1.27832|
0068ea  a2f4              ADR      r2,|L1.27836|
0068ec  a1f9              ADR      r1,|L1.27860|
0068ee  a0ff              ADR      r0,|L1.27884|
0068f0  f7fffffe          BL       show_mess
0068f4  e767              B        |L1.26566|
                  |L1.26870|
0068f6  f04f0101          MOV      r1,#1                 ;10613
0068fa  7001              STRB     r1,[r0,#0]            ;10613
0068fc  e8bd4038          POP      {r3-r5,lr}            ;10617
006900  4608              MOV      r0,r1                 ;10617
006902  f7ffbffe          B.W      speedz_mem_hndl
;;;10628  
                          ENDP

                  speedChargeHndl PROC
;;;10384  //-----------------------------------------------
;;;10385  void speedChargeHndl(void)
006906  e92d4ff8          PUSH     {r3-r11,lr}
;;;10386  {
;;;10387  /*
;;;10388  if(sp_ch_stat==scsOFF)
;;;10389  	{
;;;10390  	if((sk_stat[1]==1)&&(sk_stat_old[1]=0))
;;;10391  	}*/
;;;10392  	 
;;;10393  if(sp_ch_stat==scsSTEP1)
00690a  4ffe              LDR      r7,|L1.27908|
;;;10394  	{
;;;10395  	if(sp_ch_stat_old!=sp_ch_stat)
;;;10396  		{
;;;10397  		sp_ch_stat_cnt=5;
;;;10398  		if(SP_CH_VENT_BLOK==0)
00690c  f8dfa3f8          LDR      r10,|L1.27912|
;;;10399  			{
;;;10400  			sp_ch_stat_cnt=0;
;;;10401  			sp_ch_stat=scsWRK;
;;;10402  			}
;;;10403  		}
;;;10404  	if(sp_ch_stat_cnt)
;;;10405  		{
;;;10406  		sp_ch_stat_cnt--;
;;;10407  		if(sp_ch_stat_cnt==0)
;;;10408  			{
;;;10409  			sp_ch_stat=scsERR1; 	//Не включилась вентиляция;
;;;10410  
;;;10411  			}
;;;10412  		}
;;;10413  	if(sk_stat[0]==1)sp_ch_stat=scsWRK;
006910  f8df93f8          LDR      r9,|L1.27916|
006914  7839              LDRB     r1,[r7,#0]            ;10393  ; sp_ch_stat
006916  f04f0802          MOV      r8,#2                 ;10401
00691a  4efd              LDR      r6,|L1.27920|
00691c  4cfd              LDR      r4,|L1.27924|
00691e  2500              MOVS     r5,#0                 ;10398
006920  7830              LDRB     r0,[r6,#0]            ;10395
006922  2901              CMP      r1,#1                 ;10393
006924  d11b              BNE      |L1.26974|
006926  2801              CMP      r0,#1                 ;10395
006928  d008              BEQ      |L1.26940|
00692a  f04f0105          MOV      r1,#5                 ;10397
00692e  8021              STRH     r1,[r4,#0]            ;10397
006930  f8ba1000          LDRH     r1,[r10,#0]           ;10398  ; SP_CH_VENT_BLOK
006934  b911              CBNZ     r1,|L1.26940|
006936  8025              STRH     r5,[r4,#0]            ;10400
006938  f8878000          STRB     r8,[r7,#0]            ;10401
                  |L1.26940|
00693c  f9b41000          LDRSH    r1,[r4,#0]            ;10404  ; sp_ch_stat_cnt
006940  b139              CBZ      r1,|L1.26962|
006942  f1a10101          SUB      r1,r1,#1              ;10406
006946  b209              SXTH     r1,r1                 ;10406
006948  8021              STRH     r1,[r4,#0]            ;10406
00694a  b911              CBNZ     r1,|L1.26962|
00694c  f04f0103          MOV      r1,#3                 ;10409
006950  7039              STRB     r1,[r7,#0]            ;10409
                  |L1.26962|
006952  f8991000          LDRB     r1,[r9,#0]  ; sk_stat
006956  2901              CMP      r1,#1
006958  d101              BNE      |L1.26974|
00695a  f8878000          STRB     r8,[r7,#0]
                  |L1.26974|
;;;10414  	}
;;;10415  
;;;10416  if(sp_ch_stat==scsWRK)
00695e  7839              LDRB     r1,[r7,#0]  ; sp_ch_stat
006960  2902              CMP      r1,#2
006962  d123              BNE      |L1.27052|
;;;10417  	{
;;;10418  	if(sp_ch_stat_old!=sp_ch_stat)
;;;10419  		{
;;;10420  		sp_ch_wrk_cnt=(signed long)speedChrgTimeInHour*3600L;
006964  4aec              LDR      r2,|L1.27928|
;;;10421  		hv_vz_up_cnt=0;
006966  49ed              LDR      r1,|L1.27932|
006968  2802              CMP      r0,#2                 ;10418
00696a  d008              BEQ      |L1.27006|
00696c  48ec              LDR      r0,|L1.27936|
00696e  f44f6361          MOV      r3,#0xe10             ;10420
006972  f9b00000          LDRSH    r0,[r0,#0]            ;10420  ; speedChrgTimeInHour
006976  fb00f003          MUL      r0,r0,r3              ;10420
00697a  6010              STR      r0,[r2,#0]            ;10420  ; sp_ch_wrk_cnt
00697c  600d              STR      r5,[r1,#0]  ; hv_vz_up_cnt
                  |L1.27006|
;;;10422  		}
;;;10423  	sp_ch_wrk_cnt--;
00697e  6810              LDR      r0,[r2,#0]  ; sp_ch_wrk_cnt
006980  f1a00001          SUB      r0,r0,#1
006984  6010              STR      r0,[r2,#0]  ; sp_ch_wrk_cnt
;;;10424  	hv_vz_up_cnt++;
006986  680a              LDR      r2,[r1,#0]  ; hv_vz_up_cnt
006988  f1020201          ADD      r2,r2,#1
00698c  600a              STR      r2,[r1,#0]  ; hv_vz_up_cnt
;;;10425  	if(sp_ch_wrk_cnt==0)
00698e  b918              CBNZ     r0,|L1.27032|
;;;10426  		{
;;;10427  		sp_ch_stat=scsOFF;
006990  703d              STRB     r5,[r7,#0]
;;;10428  		speedz_mem_hndl(0);
006992  2000              MOVS     r0,#0
006994  f7fffffe          BL       speedz_mem_hndl
                  |L1.27032|
;;;10429  		}
;;;10430  	#ifdef UKU_220_IPS_TERMOKOMPENSAT
;;;10431  	if((sk_stat[0]==0)&&(SP_CH_VENT_BLOK==1))sp_ch_stat=scsERR2;
006998  f8990000          LDRB     r0,[r9,#0]  ; sk_stat
00699c  b930              CBNZ     r0,|L1.27052|
00699e  f8ba0000          LDRH     r0,[r10,#0]  ; SP_CH_VENT_BLOK
0069a2  2801              CMP      r0,#1
0069a4  d102              BNE      |L1.27052|
0069a6  f04f0004          MOV      r0,#4
0069aa  7038              STRB     r0,[r7,#0]
                  |L1.27052|
;;;10432  	#endif
;;;10433  	}
;;;10434  
;;;10435  if(sp_ch_stat==scsERR1)		//Отсутствует вентиляция при включении
0069ac  7838              LDRB     r0,[r7,#0]  ; sp_ch_stat
;;;10436  	{
;;;10437  	if((sp_ch_stat_old!=sp_ch_stat)||(sp_ch_stat_cnt==0))
;;;10438  		{
;;;10439  		sp_ch_stat_cnt=10;
;;;10440  		}
;;;10441  	sp_ch_stat_cnt--;
;;;10442  	if((sp_ch_stat_cnt==10)||(sp_ch_stat_cnt==9))
;;;10443  		{
;;;10444  		show_mess(	"  УСКОРЕННЫЙ ЗАРЯД  ",
0069ae  f2413b88          MOV      r11,#0x1388
0069b2  f04f0a0a          MOV      r10,#0xa              ;10439
0069b6  2803              CMP      r0,#3                 ;10435
0069b8  d119              BNE      |L1.27118|
0069ba  7830              LDRB     r0,[r6,#0]            ;10437  ; sp_ch_stat_old
0069bc  2803              CMP      r0,#3                 ;10437
0069be  d101              BNE      |L1.27076|
0069c0  8820              LDRH     r0,[r4,#0]            ;10437  ; sp_ch_stat_cnt
0069c2  b908              CBNZ     r0,|L1.27080|
                  |L1.27076|
0069c4  f8a4a000          STRH     r10,[r4,#0]           ;10439
                  |L1.27080|
0069c8  8820              LDRH     r0,[r4,#0]            ;10441  ; sp_ch_stat_cnt
0069ca  f1a00001          SUB      r0,r0,#1              ;10441
0069ce  b200              SXTH     r0,r0                 ;10441
0069d0  8020              STRH     r0,[r4,#0]            ;10441
0069d2  280a              CMP      r0,#0xa               ;10442
0069d4  d001              BEQ      |L1.27098|
0069d6  2809              CMP      r0,#9                 ;10442
0069d8  d109              BNE      |L1.27118|
                  |L1.27098|
0069da  4bd2              LDR      r3,|L1.27940|
0069dc  a0d2              ADR      r0,|L1.27944|
0069de  f1030218          ADD      r2,r3,#0x18
0069e2  f1020118          ADD      r1,r2,#0x18
0069e6  f8cdb000          STR      r11,[sp,#0]
0069ea  f7fffffe          BL       show_mess
                  |L1.27118|
;;;10445  					"   НЕ МОЖЕТ БЫТЬ    ",
;;;10446  					"      ВКЛЮЧЕН       ",
;;;10447  					"  БЕЗ ВЕНТИЛЯЦИИ!!  ",
;;;10448  					5000);
;;;10449  		}
;;;10450  	}
;;;10451  if(sp_ch_stat==scsERR2)		//Пропала вентиляция при работе
0069ee  7838              LDRB     r0,[r7,#0]  ; sp_ch_stat
0069f0  2804              CMP      r0,#4
0069f2  d11f              BNE      |L1.27188|
;;;10452  	{
;;;10453  	if((sp_ch_stat_old!=sp_ch_stat)||(sp_ch_stat_cnt==0))
0069f4  7830              LDRB     r0,[r6,#0]  ; sp_ch_stat_old
0069f6  2804              CMP      r0,#4
0069f8  d101              BNE      |L1.27134|
0069fa  8820              LDRH     r0,[r4,#0]  ; sp_ch_stat_cnt
0069fc  b908              CBNZ     r0,|L1.27138|
                  |L1.27134|
;;;10454  		{
;;;10455  		sp_ch_stat_cnt=10;
0069fe  f8a4a000          STRH     r10,[r4,#0]
                  |L1.27138|
;;;10456  		}
;;;10457  	sp_ch_stat_cnt--;
006a02  8820              LDRH     r0,[r4,#0]  ; sp_ch_stat_cnt
006a04  f1a00001          SUB      r0,r0,#1
006a08  b200              SXTH     r0,r0
006a0a  8020              STRH     r0,[r4,#0]
;;;10458  	if((sp_ch_stat_cnt==10)||(sp_ch_stat_cnt==9))
006a0c  280a              CMP      r0,#0xa
006a0e  d001              BEQ      |L1.27156|
006a10  2809              CMP      r0,#9
006a12  d109              BNE      |L1.27176|
                  |L1.27156|
;;;10459  		{
;;;10460  		show_mess(	"  УСКОРЕННЫЙ ЗАРЯД  ",
006a14  4bca              LDR      r3,|L1.27968|
006a16  a0c4              ADR      r0,|L1.27944|
006a18  f1030218          ADD      r2,r3,#0x18
006a1c  f1020118          ADD      r1,r2,#0x18
006a20  f8cdb000          STR      r11,[sp,#0]
006a24  f7fffffe          BL       show_mess
                  |L1.27176|
;;;10461  					"    ЗАБЛОКИРОВАН    ",
;;;10462  					"     НЕИСПРАВНА     ",
;;;10463  					"    ВЕНТИЛЯЦИЯ!!!   ",
;;;10464  					5000);
;;;10465  		}
;;;10466  	if(sk_stat[0]==1)sp_ch_stat=scsWRK;
006a28  f8990000          LDRB     r0,[r9,#0]  ; sk_stat
006a2c  2801              CMP      r0,#1
006a2e  d101              BNE      |L1.27188|
006a30  f8878000          STRB     r8,[r7,#0]
                  |L1.27188|
;;;10467  	}
;;;10468  
;;;10469  
;;;10470  sp_ch_stat_old=sp_ch_stat;
006a34  7838              LDRB     r0,[r7,#0]  ; sp_ch_stat
006a36  7030              STRB     r0,[r6,#0]
;;;10471  
;;;10472  
;;;10473  
;;;10474  if(speedChrgAvtEn==1)
006a38  49c2              LDR      r1,|L1.27972|
;;;10475  	{
;;;10476  	if((sp_ch_stat==scsOFF)&&(spc_stat==spcOFF)
;;;10477  		#ifdef UKU_220_IPS_TERMOKOMPENSAT
;;;10478  		&&(vz1_stat==vz1sOFF)&&(vz2_stat==vz2sOFF)
;;;10479  		#endif
;;;10480  		)
;;;10481  		{
;;;10482  		if((load_U<u_necc)&&((u_necc-load_U)>speedChrgDU)
;;;10483  		#ifdef UKU_220_IPS_TERMOKOMPENSAT
;;;10484  		&&(abs(Ib_ips_termokompensat/10-IZMAX)<5)
;;;10485  		#endif
;;;10486  		#ifdef UKU_220_V2
;;;10487  		&&(abs(bat[0]._Ib/10-IZMAX)<10)
;;;10488  		#endif
;;;10489  		&&(!speedChrgBlckStat))
006a3a  4c9d              LDR      r4,|L1.27824|
006a3c  8809              LDRH     r1,[r1,#0]            ;10474  ; speedChrgAvtEn
006a3e  2901              CMP      r1,#1                 ;10474
006a40  d10a              BNE      |L1.27224|
006a42  499c              LDR      r1,|L1.27828|
;;;10490  			{
;;;10491  			speedChargeStartCnt++;
006a44  4ec0              LDR      r6,|L1.27976|
006a46  f8912023          LDRB     r2,[r1,#0x23]         ;10476  ; spc_stat
006a4a  4310              ORRS     r0,r0,r2              ;10476
006a4c  794a              LDRB     r2,[r1,#5]            ;10476  ; vz1_stat
006a4e  79c9              LDRB     r1,[r1,#7]            ;10476  ; vz2_stat
006a50  4310              ORRS     r0,r0,r2              ;10476
006a52  4308              ORRS     r0,r0,r1              ;10476
006a54  d007              BEQ      |L1.27238|
;;;10492  			if(speedChargeStartCnt>=60)
;;;10493  				{
;;;10494  				speedChargeStartStop();
;;;10495  				speedz_mem_hndl(5);
;;;10496  				}
;;;10497  			}
;;;10498  		else speedChargeStartCnt=0;
;;;10499  		}
;;;10500  	else speedChargeStartCnt=0;
006a56  7035              STRB     r5,[r6,#0]
                  |L1.27224|
;;;10501  	}
;;;10502  
;;;10503  
;;;10504  
;;;10505  /*
;;;10506  if(speedChIsOn)
;;;10507  	{
;;;10508  	speedChTimeCnt++;
;;;10509  	if(speedChTimeCnt>=((signed long)speedChrgTimeInHour*3600L))
;;;10510  		{
;;;10511  		speedChIsOn=0;
;;;10512  		}
;;;10513  	if(speedChrgBlckStat)
;;;10514  		{
;;;10515  		speedChIsOn=0;
;;;10516  		speedChTimeCnt=0;
;;;10517  		}
;;;10518  	}
;;;10519  
;;;10520  
;;;10521  
;;;10522  if(speedChrgAvtEn)
;;;10523  	{
;;;10524  	if(!speedChIsOn)
;;;10525  		{
;;;10526  		if((load_U<u_necc)&&((u_necc-load_U)>speedChrgDU)&&(abs(Ib_ips_termokompensat/10-IZMAX)<5)&&(!speedChrgBlckStat))
;;;10527  			{
;;;10528  			speedChIsOn=1;
;;;10529  			}
;;;10530  		}
;;;10531  	}
;;;10532  
;;;10533  
;;;10534  */
;;;10535  if(/*(speedChrgBlckSrc!=1)&&*/(speedChrgBlckSrc!=2)) speedChrgBlckStat=0;
006a58  48bc              LDR      r0,|L1.27980|
006a5a  8800              LDRH     r0,[r0,#0]  ; speedChrgBlckSrc
006a5c  2802              CMP      r0,#2
006a5e  d02e              BEQ      |L1.27326|
006a60  8025              STRH     r5,[r4,#0]
                  |L1.27234|
;;;10536  else
;;;10537  	{
;;;10538  	speedChrgBlckStat=0;
;;;10539  	if(speedChrgBlckSrc==1)
;;;10540  		{
;;;10541  		if(((speedChrgBlckLog==0)&&(adc_buff_[11]>2000)) || ((speedChrgBlckLog==1)&&(adc_buff_[11]<2000))) speedChrgBlckStat=1;
;;;10542  		}
;;;10543  	else if(speedChrgBlckSrc==2)
;;;10544  		{
;;;10545  		if(((speedChrgBlckLog==0)&&(adc_buff_[13]>2000)) || ((speedChrgBlckLog==1)&&(adc_buff_[13]<2000))) speedChrgBlckStat=1;
;;;10546  		}
;;;10547  	}
;;;10548  
;;;10549  /*
;;;10550  if(speedChrgBlckStat==1)
;;;10551  	{
;;;10552  
;;;10553  	//speedChargeStartStop();
;;;10554  
;;;10555  	speedChrgShowCnt++;
;;;10556  	if(speedChrgShowCnt>=30)	
;;;10557  		{
;;;10558  		speedChrgShowCnt=0;
;;;10559  		show_mess(	"     УСКОРЕННЫЙ     ",
;;;10560  					"       ЗАРЯД        ",
;;;10561  					"     ЗАПРЕЩЕН!!!    ",
;;;10562  					"                    ",
;;;10563  					5000);
;;;10564  		}
;;;10565  	} 
;;;10566  else speedChrgShowCnt=0;  */
;;;10567  
;;;10568  
;;;10569  }
006a62  e8bd8ff8          POP      {r3-r11,pc}
                  |L1.27238|
006a66  48ba              LDR      r0,|L1.27984|
006a68  49ba              LDR      r1,|L1.27988|
006a6a  f9b00000          LDRSH    r0,[r0,#0]            ;10482  ; load_U
006a6e  f9b11000          LDRSH    r1,[r1,#0]            ;10482  ; u_necc
006a72  4288              CMP      r0,r1                 ;10482
006a74  da14              BGE      |L1.27296|
006a76  1a08              SUBS     r0,r1,r0              ;10482
006a78  49b7              LDR      r1,|L1.27992|
006a7a  f9b11000          LDRSH    r1,[r1,#0]            ;10482  ; speedChrgDU
006a7e  4288              CMP      r0,r1                 ;10482
006a80  dd0e              BLE      |L1.27296|
006a82  48b6              LDR      r0,|L1.27996|
006a84  49b6              LDR      r1,|L1.28000|
006a86  f9b00000          LDRSH    r0,[r0,#0]            ;10484  ; Ib_ips_termokompensat
006a8a  8809              LDRH     r1,[r1,#0]            ;10484  ; IZMAX
006a8c  fb90f0fa          SDIV     r0,r0,r10             ;10484
006a90  1a40              SUBS     r0,r0,r1              ;10484
006a92  b200              SXTH     r0,r0                 ;10484
006a94  f7fffffe          BL       abs
006a98  2805              CMP      r0,#5                 ;10484
006a9a  da01              BGE      |L1.27296|
006a9c  8820              LDRH     r0,[r4,#0]            ;10489  ; speedChrgBlckStat
006a9e  b108              CBZ      r0,|L1.27300|
                  |L1.27296|
006aa0  7035              STRB     r5,[r6,#0]            ;10498
006aa2  e7d9              B        |L1.27224|
                  |L1.27300|
006aa4  7830              LDRB     r0,[r6,#0]            ;10491  ; speedChargeStartCnt
006aa6  f1000001          ADD      r0,r0,#1              ;10491
006aaa  b2c0              UXTB     r0,r0                 ;10491
006aac  7030              STRB     r0,[r6,#0]            ;10491
006aae  283c              CMP      r0,#0x3c              ;10492
006ab0  d3d2              BCC      |L1.27224|
006ab2  f7fffffe          BL       speedChargeStartStop
006ab6  2005              MOVS     r0,#5                 ;10495
006ab8  f7fffffe          BL       speedz_mem_hndl
006abc  e7cc              B        |L1.27224|
                  |L1.27326|
006abe  8025              STRH     r5,[r4,#0]            ;10538
006ac0  48a8              LDR      r0,|L1.28004|
006ac2  49a9              LDR      r1,|L1.28008|
006ac4  f44f63fa          MOV      r3,#0x7d0             ;10541
006ac8  f9b00000          LDRSH    r0,[r0,#0]            ;10545  ; speedChrgBlckLog
006acc  b918              CBNZ     r0,|L1.27350|
006ace  f9b1201a          LDRSH    r2,[r1,#0x1a]         ;10545  ; adc_buff_
006ad2  429a              CMP      r2,r3                 ;10545
006ad4  dc05              BGT      |L1.27362|
                  |L1.27350|
006ad6  2801              CMP      r0,#1                 ;10545
006ad8  d1c3              BNE      |L1.27234|
006ada  f9b1001a          LDRSH    r0,[r1,#0x1a]         ;10545  ; adc_buff_
006ade  4298              CMP      r0,r3                 ;10545
006ae0  dabf              BGE      |L1.27234|
                  |L1.27362|
006ae2  f04f0001          MOV      r0,#1                 ;10545
006ae6  8020              STRH     r0,[r4,#0]            ;10545
006ae8  e7bb              B        |L1.27234|
;;;10570  
                          ENDP

                  averageChargeHndl PROC
;;;10629  //-----------------------------------------------
;;;10630  void averageChargeHndl(void)
006aea  e92d4ff8          PUSH     {r3-r11,lr}
;;;10631  {
;;;10632  /*
;;;10633  if(hv_vz_stat==hvsOFF)
;;;10634  	{
;;;10635  	if((sk_stat[1]==1)&&(sk_stat_old[1]=0))
;;;10636  	} */
;;;10637  if(hv_vz_stat!=hvsOFF)
006aee  f8dfa27c          LDR      r10,|L1.28012|
006af2  f04f0b00          MOV      r11,#0
006af6  f89a0000          LDRB     r0,[r10,#0]  ; hv_vz_stat
006afa  b130              CBZ      r0,|L1.27402|
;;;10638  	{
;;;10639  	hv_vz_stat=hvsOFF; 	
006afc  f88ab000          STRB     r11,[r10,#0]
;;;10640  	lc640_write(EE_HV_VZ_STAT,hvsOFF);
006b00  2100              MOVS     r1,#0
006b02  f44f70b4          MOV      r0,#0x168
006b06  f7fffffe          BL       lc640_write
                  |L1.27402|
;;;10641  	}
;;;10642  
;;;10643  if(hv_vz_stat==hvsSTEP1)
006b0a  f89a0000          LDRB     r0,[r10,#0]  ; hv_vz_stat
;;;10644  	{
;;;10645  	if(hv_vz_stat_old!=hv_vz_stat)
;;;10646  		{
;;;10647  		hv_vz_stat_cnt=5;
;;;10648  		}
;;;10649  	if(hv_vz_stat_cnt)
;;;10650  		{
;;;10651  		hv_vz_stat_cnt--;
;;;10652  		if(hv_vz_stat_cnt==0)
;;;10653  			{
;;;10654  			hv_vz_stat=hvsERR1; 	//Не включилась вентиляция;
;;;10655  			lc640_write(EE_HV_VZ_STAT,hvsERR1);
;;;10656  			}
;;;10657  		}
;;;10658  	if(sk_stat[0]==1)
006b0e  4e7f              LDR      r6,|L1.27916|
006b10  4d97              LDR      r5,|L1.28016|
006b12  4c98              LDR      r4,|L1.28020|
006b14  f04f0905          MOV      r9,#5                 ;10647
006b18  2801              CMP      r0,#1                 ;10643
006b1a  d131              BNE      |L1.27520|
006b1c  7828              LDRB     r0,[r5,#0]            ;10645  ; hv_vz_stat_old
006b1e  2801              CMP      r0,#1                 ;10645
006b20  d001              BEQ      |L1.27430|
006b22  f8a49000          STRH     r9,[r4,#0]            ;10647
                  |L1.27430|
006b26  f9b40000          LDRSH    r0,[r4,#0]            ;10649  ; hv_vz_stat_cnt
006b2a  b168              CBZ      r0,|L1.27464|
006b2c  f1a00001          SUB      r0,r0,#1              ;10651
006b30  b200              SXTH     r0,r0                 ;10651
006b32  8020              STRH     r0,[r4,#0]            ;10651
006b34  b940              CBNZ     r0,|L1.27464|
006b36  f04f0006          MOV      r0,#6                 ;10654
006b3a  f88a0000          STRB     r0,[r10,#0]           ;10654
006b3e  4601              MOV      r1,r0                 ;10655
006b40  f44f70b4          MOV      r0,#0x168             ;10655
006b44  f7fffffe          BL       lc640_write
                  |L1.27464|
006b48  7830              LDRB     r0,[r6,#0]  ; sk_stat
006b4a  2801              CMP      r0,#1
006b4c  d118              BNE      |L1.27520|
;;;10659  		{
;;;10660  		hv_vz_stat=hvsSTEP2;
006b4e  f04f0002          MOV      r0,#2
006b52  f88a0000          STRB     r0,[r10,#0]
;;;10661  		lc640_write(EE_HV_VZ_STAT,hvsSTEP2);
006b56  4601              MOV      r1,r0
006b58  f44f70b4          MOV      r0,#0x168
006b5c  f7fffffe          BL       lc640_write
;;;10662  		tree_up(iHV_STEP2_2,1,0,0);
006b60  2300              MOVS     r3,#0
006b62  461a              MOV      r2,r3
006b64  2101              MOVS     r1,#1
006b66  20df              MOVS     r0,#0xdf
006b68  f7fffffe          BL       tree_up
;;;10663  		tree_up(iHV_STEP2_1,0,0,0);
006b6c  2300              MOVS     r3,#0
006b6e  461a              MOV      r2,r3
006b70  4619              MOV      r1,r3
006b72  20de              MOVS     r0,#0xde
006b74  f7fffffe          BL       tree_up
;;;10664  		ret(1200);
006b78  f44f6096          MOV      r0,#0x4b0
006b7c  f7fffffe          BL       ||ret||
                  |L1.27520|
;;;10665  		}
;;;10666  	}
;;;10667  
;;;10668  if(hv_vz_stat==hvsSTEP2)
006b80  f89a0000          LDRB     r0,[r10,#0]  ; hv_vz_stat
006b84  2802              CMP      r0,#2
006b86  d10b              BNE      |L1.27552|
;;;10669  	{
;;;10670  	if((hv_vz_stat_old!=hv_vz_stat)||(hv_vz_stat_cnt==0))
006b88  7829              LDRB     r1,[r5,#0]  ; hv_vz_stat_old
006b8a  2902              CMP      r1,#2
006b8c  d101              BNE      |L1.27538|
006b8e  8821              LDRH     r1,[r4,#0]  ; hv_vz_stat_cnt
006b90  b911              CBNZ     r1,|L1.27544|
                  |L1.27538|
;;;10671  		{
;;;10672  		hv_vz_stat_cnt=15;
006b92  f04f010f          MOV      r1,#0xf
006b96  8021              STRH     r1,[r4,#0]
                  |L1.27544|
;;;10673  		}
;;;10674  	hv_vz_stat_cnt--;
006b98  8821              LDRH     r1,[r4,#0]  ; hv_vz_stat_cnt
006b9a  f1a10101          SUB      r1,r1,#1
006b9e  8021              STRH     r1,[r4,#0]
                  |L1.27552|
;;;10675  	//if((hv_vz_stat_cnt==14)/*||(hv_vz_stat_cnt==13)||(hv_vz_stat_cnt==12)*/)
;;;10676  	//	{
;;;10677  //		show_mess_number(	"     ВНИМАНИЕ!!!    ",
;;;10678  	//				"  Напряжение будет  ",
;;;10679  	//				" увеличено до     @В",
;;;10680  	//				"ОТКЛЮЧИТЕ НАГРУЗКУ!!",
;;;10681  	//				4800,UVZ,1);
;;;10682  	//	}
;;;10683  	//if((hv_vz_stat_cnt==8)/*||(hv_vz_stat_cnt==7)||(hv_vz_stat_cnt==6)*/)
;;;10684  	//	{
;;;10685  	//	show_mess(	"    ПОДТВЕРДИТЕ     ",
;;;10686  	//				"     НАЖАТИЕМ       ",
;;;10687  	//				"    ЦЕНТРАЛЬНОЙ     ",
;;;10688  	//				"      КНОПКИ        ",
;;;10689  	//				4800);
;;;10690  	//	} 
;;;10691  /*	if(sk_stat[1]==1)
;;;10692  		{
;;;10693  		hv_vz_stat=hvsWRK;
;;;10694  		lc640_write(EE_HV_VZ_STAT,hvsWRK);
;;;10695  		}*/
;;;10696  	}
;;;10697  
;;;10698  if(hv_vz_stat==hvsSTEP3)
;;;10699  	{
;;;10700  	if((hv_vz_stat_old!=hv_vz_stat)||(hv_vz_stat_cnt==0))
;;;10701  		{
;;;10702  		hv_vz_stat_cnt=10;
006ba0  270a              MOVS     r7,#0xa
;;;10703  		}
;;;10704  	hv_vz_stat_cnt--;
;;;10705  	if((hv_vz_stat_cnt==10)||(hv_vz_stat_cnt==9))
;;;10706  		{
;;;10707  		show_mess(	"     ВКЛЮЧИТЕ       ",
006ba2  f2413888          MOV      r8,#0x1388
006ba6  2803              CMP      r0,#3                 ;10698
006ba8  d123              BNE      |L1.27634|
006baa  7828              LDRB     r0,[r5,#0]            ;10700  ; hv_vz_stat_old
006bac  2803              CMP      r0,#3                 ;10700
006bae  d101              BNE      |L1.27572|
006bb0  8820              LDRH     r0,[r4,#0]            ;10700  ; hv_vz_stat_cnt
006bb2  b900              CBNZ     r0,|L1.27574|
                  |L1.27572|
006bb4  8027              STRH     r7,[r4,#0]            ;10702
                  |L1.27574|
006bb6  8820              LDRH     r0,[r4,#0]            ;10704  ; hv_vz_stat_cnt
006bb8  f1a00001          SUB      r0,r0,#1              ;10704
006bbc  b200              SXTH     r0,r0                 ;10704
006bbe  8020              STRH     r0,[r4,#0]            ;10704
006bc0  280a              CMP      r0,#0xa               ;10705
006bc2  d001              BEQ      |L1.27592|
006bc4  2809              CMP      r0,#9                 ;10705
006bc6  d10a              BNE      |L1.27614|
                  |L1.27592|
006bc8  4b3b              LDR      r3,|L1.27832|
006bca  a26b              ADR      r2,|L1.28024|
006bcc  3b48              SUBS     r3,r3,#0x48
006bce  f5a361bf          SUB      r1,r3,#0x5f8
006bd2  f1010018          ADD      r0,r1,#0x18
006bd6  f8cd8000          STR      r8,[sp,#0]
006bda  f7fffffe          BL       show_mess
                  |L1.27614|
;;;10708  					"      ТУМБЛЕР       ",
;;;10709  					"   ВЫРАВНИВАЮЩИЙ    ",
;;;10710  					"       ЗАРЯД        ",
;;;10711  					5000);
;;;10712  		}
;;;10713  	if(sk_stat[1]==1)
006bde  7870              LDRB     r0,[r6,#1]  ; sk_stat
006be0  2801              CMP      r0,#1
006be2  d106              BNE      |L1.27634|
;;;10714  		{
;;;10715  		hv_vz_stat=hvsWRK;
006be4  f88a9000          STRB     r9,[r10,#0]
;;;10716  		lc640_write(EE_HV_VZ_STAT,hvsWRK);
006be8  2105              MOVS     r1,#5
006bea  f44f70b4          MOV      r0,#0x168
006bee  f7fffffe          BL       lc640_write
                  |L1.27634|
;;;10717  		}
;;;10718  	}
;;;10719  
;;;10720  if(hv_vz_stat==hvsWRK)
006bf2  f89a0000          LDRB     r0,[r10,#0]  ; hv_vz_stat
006bf6  2805              CMP      r0,#5
006bf8  d13a              BNE      |L1.27760|
;;;10721  	{
;;;10722  	if(hv_vz_stat_old!=hv_vz_stat)
006bfa  7828              LDRB     r0,[r5,#0]  ; hv_vz_stat_old
;;;10723  		{
;;;10724  		hv_vz_wrk_cnt=3600L/*100L*/*((long)VZ_HR);
006bfc  4a64              LDR      r2,|L1.28048|
;;;10725  		if(VZ_HR==0)  	hv_vz_wrk_cnt=1800L;
;;;10726  		hv_vz_up_cnt=0L;
006bfe  4947              LDR      r1,|L1.27932|
006c00  2805              CMP      r0,#5                 ;10722
006c02  d00d              BEQ      |L1.27680|
006c04  4863              LDR      r0,|L1.28052|
006c06  f44f6361          MOV      r3,#0xe10             ;10724
006c0a  f9b00000          LDRSH    r0,[r0,#0]            ;10724  ; VZ_HR
006c0e  fb00f303          MUL      r3,r0,r3              ;10724
006c12  6013              STR      r3,[r2,#0]            ;10724  ; hv_vz_wrk_cnt
006c14  b910              CBNZ     r0,|L1.27676|
006c16  f44f60e1          MOV      r0,#0x708             ;10725
006c1a  6010              STR      r0,[r2,#0]            ;10725  ; hv_vz_wrk_cnt
                  |L1.27676|
006c1c  f8c1b000          STR      r11,[r1,#0]  ; hv_vz_up_cnt
                  |L1.27680|
;;;10727  		}
;;;10728  	hv_vz_wrk_cnt--;
006c20  6810              LDR      r0,[r2,#0]  ; hv_vz_wrk_cnt
006c22  f1a00001          SUB      r0,r0,#1
006c26  6010              STR      r0,[r2,#0]  ; hv_vz_wrk_cnt
;;;10729  	hv_vz_up_cnt++;
006c28  680a              LDR      r2,[r1,#0]  ; hv_vz_up_cnt
006c2a  f1020201          ADD      r2,r2,#1
006c2e  600a              STR      r2,[r1,#0]  ; hv_vz_up_cnt
;;;10730  
;;;10731  	if(hv_vz_wrk_cnt==0)
006c30  b940              CBNZ     r0,|L1.27716|
;;;10732  		{
;;;10733  		hv_vz_stat=hvsERR4;
006c32  f04f0009          MOV      r0,#9
006c36  f88a0000          STRB     r0,[r10,#0]
;;;10734  		lc640_write(EE_HV_VZ_STAT,hvsERR4);
006c3a  4601              MOV      r1,r0
006c3c  f44f70b4          MOV      r0,#0x168
006c40  f7fffffe          BL       lc640_write
                  |L1.27716|
;;;10735  		}
;;;10736  	if(sk_stat[0]==0)
006c44  7830              LDRB     r0,[r6,#0]  ; sk_stat
006c46  b940              CBNZ     r0,|L1.27738|
;;;10737  		{
;;;10738  		hv_vz_stat=hvsERR2;
006c48  f04f0007          MOV      r0,#7
006c4c  f88a0000          STRB     r0,[r10,#0]
;;;10739  		lc640_write(EE_HV_VZ_STAT,hvsERR2);
006c50  4601              MOV      r1,r0
006c52  f44f70b4          MOV      r0,#0x168
006c56  f7fffffe          BL       lc640_write
                  |L1.27738|
;;;10740  		}
;;;10741  	if(sk_stat[1]==0)
006c5a  7870              LDRB     r0,[r6,#1]  ; sk_stat
006c5c  b940              CBNZ     r0,|L1.27760|
;;;10742  		{
;;;10743  		hv_vz_stat=hvsERR3;
006c5e  f04f0008          MOV      r0,#8
006c62  f88a0000          STRB     r0,[r10,#0]
;;;10744  		lc640_write(EE_HV_VZ_STAT,hvsERR3);
006c66  4601              MOV      r1,r0
006c68  f44f70b4          MOV      r0,#0x168
006c6c  f7fffffe          BL       lc640_write
                  |L1.27760|
;;;10745  		}
;;;10746  	}
;;;10747  
;;;10748  if(hv_vz_stat==hvsERR1)		//Отсутствует вентиляция при включении
006c70  f89a0000          LDRB     r0,[r10,#0]  ; hv_vz_stat
006c74  2806              CMP      r0,#6
006c76  d119              BNE      |L1.27820|
;;;10749  	{
;;;10750  	if((hv_vz_stat_old!=hv_vz_stat)||(hv_vz_stat_cnt==0))
006c78  7828              LDRB     r0,[r5,#0]  ; hv_vz_stat_old
006c7a  2806              CMP      r0,#6
006c7c  d101              BNE      |L1.27778|
006c7e  8820              LDRH     r0,[r4,#0]  ; hv_vz_stat_cnt
006c80  b900              CBNZ     r0,|L1.27780|
                  |L1.27778|
;;;10751  		{
;;;10752  		hv_vz_stat_cnt=10;
006c82  8027              STRH     r7,[r4,#0]
                  |L1.27780|
;;;10753  		}
;;;10754  	hv_vz_stat_cnt--;
006c84  8820              LDRH     r0,[r4,#0]  ; hv_vz_stat_cnt
006c86  f1a00001          SUB      r0,r0,#1
006c8a  b200              SXTH     r0,r0
006c8c  8020              STRH     r0,[r4,#0]
;;;10755  	if((hv_vz_stat_cnt==10)||(hv_vz_stat_cnt==9))
006c8e  280a              CMP      r0,#0xa
006c90  d001              BEQ      |L1.27798|
006c92  2809              CMP      r0,#9
006c94  d10a              BNE      |L1.27820|
                  |L1.27798|
;;;10756  		{
;;;10757  		show_mess(	"ВЫРАВНИВАЮЩИЙ ЗАРЯД ",
006c96  4b23              LDR      r3,|L1.27940|
006c98  f8cd8000          STR      r8,[sp,#0]
006c9c  f1030218          ADD      r2,r3,#0x18
006ca0  f1020118          ADD      r1,r2,#0x18
006ca4  f2a15084          SUB      r0,r1,#0x584
006ca8  f7fffffe          BL       show_mess
                  |L1.27820|
;;;10758  					"   НЕ МОЖЕТ БЫТЬ    ",
;;;10759  					"      ВКЛЮЧЕН       ",
;;;10760  					"  БЕЗ ВЕНТИЛЯЦИИ!!  ",
;;;10761  					5000);
;;;10762  		}
;;;10763  	}
;;;10764  if(hv_vz_stat==hvsERR2)		//Пропала вентиляция при работе
006cac  e074              B        |L1.28056|
006cae  0000              DCW      0x0000
                  |L1.27824|
                          DCD      speedChrgBlckStat
                  |L1.27828|
                          DCD      ||area_number.25||
                  |L1.27832|
                          DCD      ||.text||+0x1d4c
                  |L1.27836|
006cbc  20202020          DCB      "    ",231,224,225,235,238,234,232,240,238,226,224,237,"!"
006cc0  e7e0e1eb
006cc4  eeeae8f0
006cc8  eee2e0ed
006ccc  21      
006ccd  20202000          DCB      "   ",0
006cd1  00                DCB      0
006cd2  00                DCB      0
006cd3  00                DCB      0
                  |L1.27860|
006cd4  20202020          DCB      "       ",231,224,240,255,228,"        ",0
006cd8  202020e7
006cdc  e0f0ffe4
006ce0  20202020
006ce4  20202020
006ce8  00      
006ce9  00                DCB      0
006cea  00                DCB      0
006ceb  00                DCB      0
                  |L1.27884|
006cec  20202020          DCB      "     ",211,241,234,238,240,229,237,237,251,233,"     ",0
006cf0  20d3f1ea
006cf4  eef0e5ed
006cf8  edfbe920
006cfc  20202020
006d00  00      
006d01  00                DCB      0
006d02  00                DCB      0
006d03  00                DCB      0
                  |L1.27908|
                          DCD      sp_ch_stat
                  |L1.27912|
                          DCD      SP_CH_VENT_BLOK
                  |L1.27916|
                          DCD      sk_stat
                  |L1.27920|
                          DCD      sp_ch_stat_old
                  |L1.27924|
                          DCD      sp_ch_stat_cnt
                  |L1.27928|
                          DCD      sp_ch_wrk_cnt
                  |L1.27932|
                          DCD      hv_vz_up_cnt
                  |L1.27936|
                          DCD      speedChrgTimeInHour
                  |L1.27940|
                          DCD      ||.text||+0x1c14
                  |L1.27944|
006d28  2020d3d1          DCB      "  ",211,209,202,206,208,197,205,205,219,201," ",199,192
006d2c  caced0c5
006d30  cdcddbc9
006d34  20c7c0  
006d37  d0dfc420          DCB      208,223,196,"  ",0
006d3b  2000    
006d3d  00                DCB      0
006d3e  00                DCB      0
006d3f  00                DCB      0
                  |L1.27968|
                          DCD      ||.text||+0x1678
                  |L1.27972|
                          DCD      speedChrgAvtEn
                  |L1.27976|
                          DCD      speedChargeStartCnt
                  |L1.27980|
                          DCD      speedChrgBlckSrc
                  |L1.27984|
                          DCD      load_U
                  |L1.27988|
                          DCD      u_necc
                  |L1.27992|
                          DCD      speedChrgDU
                  |L1.27996|
                          DCD      Ib_ips_termokompensat
                  |L1.28000|
                          DCD      IZMAX
                  |L1.28004|
                          DCD      speedChrgBlckLog
                  |L1.28008|
                          DCD      ||.bss||+0x40c
                  |L1.28012|
                          DCD      hv_vz_stat
                  |L1.28016|
                          DCD      hv_vz_stat_old
                  |L1.28020|
                          DCD      hv_vz_stat_cnt
                  |L1.28024|
006d78  202020c2          DCB      "   ",194,219,208,192,194,205,200,194,192,222,217,200,201
006d7c  dbd0c0c2
006d80  cdc8c2c0
006d84  ded9c8c9
006d88  20202020          DCB      "    ",0
006d8c  00      
006d8d  00                DCB      0
006d8e  00                DCB      0
006d8f  00                DCB      0
                  |L1.28048|
                          DCD      hv_vz_wrk_cnt
                  |L1.28052|
                          DCD      VZ_HR
                  |L1.28056|
006d98  f89a0000          LDRB     r0,[r10,#0]  ; hv_vz_stat
006d9c  2807              CMP      r0,#7
006d9e  d123              BNE      |L1.28136|
;;;10765  	{
;;;10766  	if((hv_vz_stat_old!=hv_vz_stat)||(hv_vz_stat_cnt==0))
006da0  7828              LDRB     r0,[r5,#0]  ; hv_vz_stat_old
006da2  2807              CMP      r0,#7
006da4  d101              BNE      |L1.28074|
006da6  8820              LDRH     r0,[r4,#0]  ; hv_vz_stat_cnt
006da8  b900              CBNZ     r0,|L1.28076|
                  |L1.28074|
;;;10767  		{
;;;10768  		hv_vz_stat_cnt=10;
006daa  8027              STRH     r7,[r4,#0]
                  |L1.28076|
;;;10769  		}
;;;10770  	hv_vz_stat_cnt--;
006dac  8820              LDRH     r0,[r4,#0]  ; hv_vz_stat_cnt
006dae  f1a00001          SUB      r0,r0,#1
006db2  b200              SXTH     r0,r0
006db4  8020              STRH     r0,[r4,#0]
;;;10771  	if((hv_vz_stat_cnt==10)||(hv_vz_stat_cnt==9))
006db6  280a              CMP      r0,#0xa
006db8  d001              BEQ      |L1.28094|
006dba  2809              CMP      r0,#9
006dbc  d10a              BNE      |L1.28116|
                  |L1.28094|
;;;10772  		{
;;;10773  		show_mess(	"ВЫРАВНИВАЮЩИЙ ЗАРЯД ",
006dbe  4bff              LDR      r3,|L1.29116|
006dc0  f8cd8000          STR      r8,[sp,#0]
006dc4  f1030218          ADD      r2,r3,#0x18
006dc8  f1020118          ADD      r1,r2,#0x18
006dcc  f1010018          ADD      r0,r1,#0x18
006dd0  f7fffffe          BL       show_mess
                  |L1.28116|
;;;10774  					"    ЗАБЛОКИРОВАН    ",
;;;10775  					"     НЕИСПРАВНА     ",
;;;10776  					"    ВЕНТИЛЯЦИЯ!!!   ",
;;;10777  					5000);
;;;10778  		}
;;;10779  	if(sk_stat[0]==1)
006dd4  7830              LDRB     r0,[r6,#0]  ; sk_stat
006dd6  2801              CMP      r0,#1
006dd8  d106              BNE      |L1.28136|
;;;10780  		{
;;;10781  		hv_vz_stat=hvsWRK;
006dda  f88a9000          STRB     r9,[r10,#0]
;;;10782  		lc640_write(EE_HV_VZ_STAT,hvsWRK);
006dde  2105              MOVS     r1,#5
006de0  f44f70b4          MOV      r0,#0x168
006de4  f7fffffe          BL       lc640_write
                  |L1.28136|
;;;10783  		}
;;;10784  	}
;;;10785  
;;;10786  if(hv_vz_stat==hvsERR3)		//Отключен тумблер "Выравнивающий заряд"
006de8  f89a0000          LDRB     r0,[r10,#0]  ; hv_vz_stat
006dec  2808              CMP      r0,#8
006dee  d123              BNE      |L1.28216|
;;;10787  	{
;;;10788  	if((hv_vz_stat_old!=hv_vz_stat)||(hv_vz_stat_cnt==0))
006df0  7828              LDRB     r0,[r5,#0]  ; hv_vz_stat_old
006df2  2808              CMP      r0,#8
006df4  d101              BNE      |L1.28154|
006df6  8820              LDRH     r0,[r4,#0]  ; hv_vz_stat_cnt
006df8  b900              CBNZ     r0,|L1.28156|
                  |L1.28154|
;;;10789  		{
;;;10790  		hv_vz_stat_cnt=10;
006dfa  8027              STRH     r7,[r4,#0]
                  |L1.28156|
;;;10791  		}
;;;10792  	hv_vz_stat_cnt--;
006dfc  8820              LDRH     r0,[r4,#0]  ; hv_vz_stat_cnt
006dfe  f1a00001          SUB      r0,r0,#1
006e02  b200              SXTH     r0,r0
006e04  8020              STRH     r0,[r4,#0]
;;;10793  	if((hv_vz_stat_cnt==10)||(hv_vz_stat_cnt==9))
006e06  280a              CMP      r0,#0xa
006e08  d001              BEQ      |L1.28174|
006e0a  2809              CMP      r0,#9
006e0c  d10a              BNE      |L1.28196|
                  |L1.28174|
;;;10794  		{
;;;10795  		show_mess(	"ВЫРАВНИВАЮЩИЙ ЗАРЯД ",
006e0e  4bec              LDR      r3,|L1.29120|
006e10  f8cd8000          STR      r8,[sp,#0]
006e14  f2a35254          SUB      r2,r3,#0x554
006e18  f1020118          ADD      r1,r2,#0x18
006e1c  f2a150e4          SUB      r0,r1,#0x5e4
006e20  f7fffffe          BL       show_mess
                  |L1.28196|
;;;10796  					"  БУДЕТ ПРОДОЛЖЕН   ",
;;;10797  					"  ПОСЛЕ ВКЛЮЧЕНИЯ   ",
;;;10798  					"    ТУМБЛЕРА!!!     ",
;;;10799  					5000);
;;;10800  		}
;;;10801  	if(sk_stat[1]==1)
006e24  7870              LDRB     r0,[r6,#1]  ; sk_stat
006e26  2801              CMP      r0,#1
006e28  d106              BNE      |L1.28216|
;;;10802  		{
;;;10803  		hv_vz_stat=hvsWRK;
006e2a  f88a9000          STRB     r9,[r10,#0]
;;;10804  		lc640_write(EE_HV_VZ_STAT,hvsWRK);
006e2e  2105              MOVS     r1,#5
006e30  f44f70b4          MOV      r0,#0x168
006e34  f7fffffe          BL       lc640_write
                  |L1.28216|
;;;10805  		}
;;;10806  	}
;;;10807  if(hv_vz_stat==hvsERR4)		//ВЗ закончился а тумблер включен
006e38  f89a0000          LDRB     r0,[r10,#0]  ; hv_vz_stat
006e3c  2809              CMP      r0,#9
006e3e  d124              BNE      |L1.28298|
;;;10808  	{
;;;10809  	if((hv_vz_stat_old!=hv_vz_stat)||(hv_vz_stat_cnt==0))
006e40  7828              LDRB     r0,[r5,#0]  ; hv_vz_stat_old
006e42  2809              CMP      r0,#9
006e44  d101              BNE      |L1.28234|
006e46  8820              LDRH     r0,[r4,#0]  ; hv_vz_stat_cnt
006e48  b900              CBNZ     r0,|L1.28236|
                  |L1.28234|
;;;10810  		{
;;;10811  		hv_vz_stat_cnt=10;
006e4a  8027              STRH     r7,[r4,#0]
                  |L1.28236|
;;;10812  		}
;;;10813  	hv_vz_stat_cnt--;
006e4c  8820              LDRH     r0,[r4,#0]  ; hv_vz_stat_cnt
006e4e  f1a00001          SUB      r0,r0,#1
006e52  b200              SXTH     r0,r0
006e54  8020              STRH     r0,[r4,#0]
;;;10814  	if((hv_vz_stat_cnt==10)||(hv_vz_stat_cnt==9))
006e56  280a              CMP      r0,#0xa
006e58  d001              BEQ      |L1.28254|
006e5a  2809              CMP      r0,#9
006e5c  d10a              BNE      |L1.28276|
                  |L1.28254|
;;;10815  		{
;;;10816  		show_mess(	"     ВЫКЛЮЧИТЕ      ",
006e5e  4bd9              LDR      r3,|L1.29124|
006e60  f2af02ec          ADR      r2,|L1.28024|
006e64  f5a361bf          SUB      r1,r3,#0x5f8
006e68  f50160c5          ADD      r0,r1,#0x628
006e6c  f8cd8000          STR      r8,[sp,#0]
006e70  f7fffffe          BL       show_mess
                  |L1.28276|
;;;10817  					"      ТУМБЛЕР       ",
;;;10818  					"   ВЫРАВНИВАЮЩИЙ    ",
;;;10819  					"       ЗАРЯД        ",
;;;10820  					5000);
;;;10821  		}
;;;10822  	if(sk_stat[1]==0)
006e74  7870              LDRB     r0,[r6,#1]  ; sk_stat
006e76  b940              CBNZ     r0,|L1.28298|
;;;10823  		{
;;;10824  		hv_vz_stat=hvsOFF;
006e78  f88ab000          STRB     r11,[r10,#0]
;;;10825  		lc640_write(EE_HV_VZ_STAT,hvsOFF);
006e7c  2100              MOVS     r1,#0
006e7e  f44f70b4          MOV      r0,#0x168
006e82  f7fffffe          BL       lc640_write
;;;10826  		vz_stop();
006e86  f7fffffe          BL       vz_stop
                  |L1.28298|
;;;10827  
;;;10828  		}
;;;10829  	}
;;;10830  hv_vz_stat_old=hv_vz_stat;
006e8a  f89a0000          LDRB     r0,[r10,#0]  ; hv_vz_stat
006e8e  7028              STRB     r0,[r5,#0]
;;;10831  /*
;;;10832  if(speedChIsOn)
;;;10833  	{
;;;10834  	speedChTimeCnt++;
;;;10835  	if(speedChTimeCnt>=((signed long)speedChrgTimeInHour*3600L))
;;;10836  		{
;;;10837  		speedChIsOn=0;
;;;10838  		}
;;;10839  	if(speedChrgBlckStat)
;;;10840  		{
;;;10841  		speedChIsOn=0;
;;;10842  		speedChTimeCnt=0;
;;;10843  		}
;;;10844  	}
;;;10845  
;;;10846  
;;;10847  
;;;10848  if(speedChrgAvtEn)
;;;10849  	{
;;;10850  	if(!speedChIsOn)
;;;10851  		{
;;;10852  		if((load_U<u_necc)&&((u_necc-load_U)>speedChrgDU)&&(abs(Ib_ips_termokompensat/10-IZMAX)<5)&&(!speedChrgBlckStat))
;;;10853  			{
;;;10854  			speedChIsOn=1;
;;;10855  			}
;;;10856  		}
;;;10857  	}
;;;10858  
;;;10859  
;;;10860  
;;;10861  if((speedChrgBlckSrc!=1)&&(speedChrgBlckSrc!=2)) speedChrgBlckStat=0;
;;;10862  else
;;;10863  	{
;;;10864  	speedChrgBlckStat=0;
;;;10865  	if(speedChrgBlckSrc==1)
;;;10866  		{
;;;10867  		if(((speedChrgBlckLog==0)&&(adc_buff_[11]>2000)) || ((speedChrgBlckLog==1)&&(adc_buff_[11]<2000))) speedChrgBlckStat=1;
;;;10868  		}
;;;10869  	else if(speedChrgBlckSrc==2)
;;;10870  		{
;;;10871  		if(((speedChrgBlckLog==0)&&(adc_buff_[13]>2000)) || ((speedChrgBlckLog==1)&&(adc_buff_[13]<2000))) speedChrgBlckStat=1;
;;;10872  		}
;;;10873  	}
;;;10874  
;;;10875  
;;;10876  if(speedChrgBlckStat==1)
;;;10877  	{
;;;10878  
;;;10879  	//speedChargeStartStop();
;;;10880  
;;;10881  	speedChrgShowCnt++;
;;;10882  	if(speedChrgShowCnt>=30)	
;;;10883  		{
;;;10884  		speedChrgShowCnt=0;
;;;10885  		show_mess(	"     УСКОРЕННЫЙ     ",
;;;10886  					"       ЗАРЯД        ",
;;;10887  					"     ЗАПРЕЩЕН!!!    ",
;;;10888  					"                    ",
;;;10889  					5000);
;;;10890  		}
;;;10891  	}
;;;10892  else speedChrgShowCnt=0;
;;;10893  
;;;10894  */
;;;10895  }
006e90  e5e7              B        |L1.27234|
;;;10896  
                          ENDP

                  numOfForvardBps_hndl PROC
;;;10913  //-----------------------------------------------
;;;10914  void	numOfForvardBps_hndl(void)			//Программа смены первого источника для равномерного износа БПСов
006e92  e92d41f0          PUSH     {r4-r8,lr}
;;;10915  {
;;;10916  
;;;10917  numOfForvardBps_old=numOfForvardBps;
006e96  4ccc              LDR      r4,|L1.29128|
006e98  7820              LDRB     r0,[r4,#0]  ; numOfForvardBps
006e9a  7060              STRB     r0,[r4,#1]
;;;10918  
;;;10919  numOfForvardBps=0;
006e9c  f04f0500          MOV      r5,#0
006ea0  f8045928          STRB     r5,[r4],#-0x28
;;;10920  
;;;10921  //FORVARDBPSCHHOUR=10;
;;;10922  
;;;10923  if((FORVARDBPSCHHOUR<=0)||(FORVARDBPSCHHOUR>500))
006ea4  4ec9              LDR      r6,|L1.29132|
006ea6  f9b60000          LDRSH    r0,[r6,#0]  ; FORVARDBPSCHHOUR
006eaa  2800              CMP      r0,#0
006eac  dd02              BLE      |L1.28340|
006eae  f5b07ffa          CMP      r0,#0x1f4
006eb2  dd02              BLE      |L1.28346|
                  |L1.28340|
;;;10924  	{
;;;10925  	FORVARDBPSCHHOUR=0;
006eb4  8035              STRH     r5,[r6,#0]
                  |L1.28342|
;;;10926  	return;
;;;10927  	}
;;;10928  
;;;10929  numOfForvardBps_minCnt++;
;;;10930  
;;;10931  
;;;10932  if(numOfForvardBps_minCnt>=60)
;;;10933  	{
;;;10934  	numOfForvardBps_minCnt=0;
;;;10935  	numOfForvardBps_hourCnt=lc640_read_int(EE_FORVBPSHOURCNT);
;;;10936  	numOfForvardBps_hourCnt++;
;;;10937  	if(numOfForvardBps_hourCnt>=(FORVARDBPSCHHOUR*NUMIST))
;;;10938  		{
;;;10939  		numOfForvardBps_hourCnt=0;
;;;10940  		}
;;;10941  	lc640_write_int(EE_FORVBPSHOURCNT,numOfForvardBps_hourCnt);
;;;10942  	}
;;;10943  
;;;10944  numOfForvardBps=numOfForvardBps_hourCnt/FORVARDBPSCHHOUR;
;;;10945  
;;;10946  //if(numOfForvardBps)
;;;10947  //numOfForvardBps_old=numOfForvardBps; 
;;;10948  }
006eb6  e8bd81f0          POP      {r4-r8,pc}
                  |L1.28346|
006eba  f894002a          LDRB     r0,[r4,#0x2a]         ;10929  ; numOfForvardBps_minCnt
006ebe  f1000001          ADD      r0,r0,#1              ;10929
006ec2  b2c0              UXTB     r0,r0                 ;10929
006ec4  f884002a          STRB     r0,[r4,#0x2a]         ;10929
006ec8  283c              CMP      r0,#0x3c              ;10932
006eca  d31b              BCC      |L1.28420|
006ecc  f884502a          STRB     r5,[r4,#0x2a]         ;10934
006ed0  f44f7794          MOV      r7,#0x128             ;10935
006ed4  4638              MOV      r0,r7                 ;10935
006ed6  f7fffffe          BL       lc640_read_int
006eda  f1000001          ADD      r0,r0,#1              ;10936
006ede  b200              SXTH     r0,r0                 ;10936
006ee0  f8a40074          STRH     r0,[r4,#0x74]         ;10936
006ee4  4aba              LDR      r2,|L1.29136|
006ee6  f9b61000          LDRSH    r1,[r6,#0]            ;10937  ; FORVARDBPSCHHOUR
006eea  f9b22000          LDRSH    r2,[r2,#0]            ;10937  ; NUMIST
006eee  fb01f102          MUL      r1,r1,r2              ;10937
006ef2  4281              CMP      r1,r0                 ;10937
006ef4  dc01              BGT      |L1.28410|
006ef6  f8a45074          STRH     r5,[r4,#0x74]         ;10939
                  |L1.28410|
006efa  f9b41074          LDRSH    r1,[r4,#0x74]         ;10941  ; numOfForvardBps_hourCnt
006efe  4638              MOV      r0,r7                 ;10941
006f00  f7fffffe          BL       lc640_write_int
                  |L1.28420|
006f04  f9b40074          LDRSH    r0,[r4,#0x74]         ;10944  ; numOfForvardBps_hourCnt
006f08  f9b61000          LDRSH    r1,[r6,#0]            ;10944  ; FORVARDBPSCHHOUR
006f0c  fb90f0f1          SDIV     r0,r0,r1              ;10944
006f10  f8840028          STRB     r0,[r4,#0x28]         ;10944
006f14  e7cf              B        |L1.28342|
;;;10949  
                          ENDP

                  numOfForvardBps_init PROC
;;;10950  //-----------------------------------------------
;;;10951  void	numOfForvardBps_init(void)			//Программа сброса системы смены первого источника для равномерного износа БПСов
006f16  b510              PUSH     {r4,lr}
;;;10952  {									//Должна вызываться при изменении кол-ва источников в структуре
;;;10953  lc640_write_int(EE_FORVBPSHOURCNT,0);
006f18  2100              MOVS     r1,#0
006f1a  f44f7094          MOV      r0,#0x128
006f1e  f7fffffe          BL       lc640_write_int
;;;10954  numOfForvardBps_minCnt=58;
006f22  49a9              LDR      r1,|L1.29128|
006f24  f04f003a          MOV      r0,#0x3a
006f28  f1a10128          SUB      r1,r1,#0x28
006f2c  f881002a          STRB     r0,[r1,#0x2a]
;;;10955  }
006f30  bd10              POP      {r4,pc}
;;;10956  
                          ENDP

                  outVoltContrHndl PROC
;;;10957  //-----------------------------------------------
;;;10958  void outVoltContrHndl(void)
006f32  b570              PUSH     {r4-r6,lr}
;;;10959  { 
;;;10960  if((load_U>U_OUT_KONTR_MAX)||(load_U<U_OUT_KONTR_MIN))
006f34  4ca7              LDR      r4,|L1.29140|
006f36  48a8              LDR      r0,|L1.29144|
;;;10961  	{
;;;10962  	outVoltContrHndlCnt_=0;
;;;10963  	if(outVoltContrHndlCnt<U_OUT_KONTR_DELAY)
006f38  4aa8              LDR      r2,|L1.29148|
006f3a  f9b41000          LDRSH    r1,[r4,#0]            ;10960  ; load_U
006f3e  f9b06000          LDRSH    r6,[r0,#0]            ;10960  ; U_OUT_KONTR_MAX
006f42  2500              MOVS     r5,#0                 ;10962
006f44  f9b20000          LDRSH    r0,[r2,#0]
006f48  4ba5              LDR      r3,|L1.29152|
006f4a  42b1              CMP      r1,r6                 ;10960
006f4c  dc04              BGT      |L1.28504|
006f4e  4ea5              LDR      r6,|L1.29156|
006f50  f9b66000          LDRSH    r6,[r6,#0]            ;10960  ; U_OUT_KONTR_MIN
006f54  42b1              CMP      r1,r6                 ;10960
006f56  da0f              BGE      |L1.28536|
                  |L1.28504|
006f58  801d              STRH     r5,[r3,#0]            ;10962
006f5a  49a3              LDR      r1,|L1.29160|
006f5c  f9b11000          LDRSH    r1,[r1,#0]  ; U_OUT_KONTR_DELAY
006f60  4288              CMP      r0,r1
006f62  da1b              BGE      |L1.28572|
;;;10964  		{
;;;10965  		outVoltContrHndlCnt++;
006f64  f1000001          ADD      r0,r0,#1
006f68  b200              SXTH     r0,r0
006f6a  8010              STRH     r0,[r2,#0]
;;;10966  		if(outVoltContrHndlCnt==U_OUT_KONTR_DELAY)
006f6c  4288              CMP      r0,r1
006f6e  d115              BNE      |L1.28572|
;;;10967  			{
;;;10968  			avar_uout_hndl(1);
006f70  2001              MOVS     r0,#1
006f72  f7fffffe          BL       avar_uout_hndl
006f76  e011              B        |L1.28572|
                  |L1.28536|
;;;10969  			}
;;;10970  		}
;;;10971  	}
;;;10972  else
;;;10973  	{
;;;10974  	if(outVoltContrHndlCnt)
006f78  b180              CBZ      r0,|L1.28572|
;;;10975  		{
;;;10976  		if(outVoltContrHndlCnt_<5)
006f7a  f9b30000          LDRSH    r0,[r3,#0]  ; outVoltContrHndlCnt_
006f7e  2805              CMP      r0,#5
006f80  da0c              BGE      |L1.28572|
;;;10977  			{
;;;10978  			outVoltContrHndlCnt_++;
006f82  f1000001          ADD      r0,r0,#1
006f86  b200              SXTH     r0,r0
006f88  8018              STRH     r0,[r3,#0]
;;;10979  			if(outVoltContrHndlCnt_>=5)
006f8a  2805              CMP      r0,#5
006f8c  db06              BLT      |L1.28572|
;;;10980  				{
;;;10981  				outVoltContrHndlCnt=0;
006f8e  8015              STRH     r5,[r2,#0]
;;;10982  				if(uout_av)avar_uout_hndl(0);
006f90  4896              LDR      r0,|L1.29164|
006f92  7800              LDRB     r0,[r0,#0]  ; uout_av
006f94  b110              CBZ      r0,|L1.28572|
006f96  2000              MOVS     r0,#0
006f98  f7fffffe          BL       avar_uout_hndl
                  |L1.28572|
;;;10983  				}
;;;10984  			}
;;;10985  		}
;;;10986  	}
;;;10987  
;;;10988  if (load_U<(USIGN*10)) 
006f9c  4894              LDR      r0,|L1.29168|
006f9e  f9b41000          LDRSH    r1,[r4,#0]  ; load_U
006fa2  f9b00000          LDRSH    r0,[r0,#0]  ; USIGN
006fa6  eb000080          ADD      r0,r0,r0,LSL #2
006faa  ebb10f40          CMP      r1,r0,LSL #1
006fae  da0b              BGE      |L1.28616|
;;;10989  	{
;;;10990  	if(!bSILENT)
006fb0  4890              LDR      r0,|L1.29172|
006fb2  6800              LDR      r0,[r0,#0]  ; bSILENT
006fb4  2800              CMP      r0,#0
006fb6  d107              BNE      |L1.28616|
;;;10991  		{
;;;10992  		mess_send(MESS2RELE_HNDL,PARAM_RELE_BAT_IS_DISCHARGED,1,20);
006fb8  e8bd4070          POP      {r4-r6,lr}
006fbc  2314              MOVS     r3,#0x14
006fbe  2201              MOVS     r2,#1
006fc0  2172              MOVS     r1,#0x72
006fc2  20d2              MOVS     r0,#0xd2
006fc4  f7ffbffe          B.W      mess_send
                  |L1.28616|
;;;10993  		}
;;;10994  
;;;10995  	//bU_BAT2REL_AV_BAT=1;
;;;10996  	}
;;;10997  
;;;10998  
;;;10999  }
006fc8  bd70              POP      {r4-r6,pc}
;;;11000  
                          ENDP

                  vent_resurs_hndl PROC
;;;11001  //-----------------------------------------------
;;;11002  void vent_resurs_hndl(void)
006fca  e92d47f0          PUSH     {r4-r10,lr}
;;;11003  {
;;;11004  char i;
;;;11005  char crc_in,crc_eval;
;;;11006  
;;;11007  for(i=0;i<NUMIST;i++)
006fce  f04f0200          MOV      r2,#0
;;;11008  	{
;;;11009  	if((bps[i]._buff[7]&0xc0)==0x00)
;;;11010  		{
;;;11011  		bps[i]._vent_resurs_temp[0]=bps[i]._buff[7];
;;;11012  		}
;;;11013  	else if((bps[i]._buff[7]&0xc0)==0x40)
;;;11014  		{
;;;11015  		bps[i]._vent_resurs_temp[1]=bps[i]._buff[7];
;;;11016  		}
;;;11017  	else if((bps[i]._buff[7]&0xc0)==0x80)
;;;11018  		{
;;;11019  		bps[i]._vent_resurs_temp[2]=bps[i]._buff[7];
;;;11020  		}
;;;11021  	else if((bps[i]._buff[7]&0xc0)==0xc0)
;;;11022  		{
;;;11023  		bps[i]._vent_resurs_temp[3]=bps[i]._buff[7];
;;;11024  		}
;;;11025  	crc_in=0;
;;;11026  	crc_in|=(bps[i]._vent_resurs_temp[0]&0x30)>>4;
;;;11027  	crc_in|=(bps[i]._vent_resurs_temp[1]&0x30)>>2;
;;;11028  	crc_in|=(bps[i]._vent_resurs_temp[2]&0x30);
;;;11029  	crc_in|=(bps[i]._vent_resurs_temp[3]&0x30)<<2;
;;;11030  
;;;11031  	crc_eval =bps[i]._vent_resurs_temp[0]&0x0f;
;;;11032  	crc_eval^=bps[i]._vent_resurs_temp[1]&0x0f;
;;;11033  	crc_eval^=bps[i]._vent_resurs_temp[2]&0x0f;
;;;11034  	crc_eval^=bps[i]._vent_resurs_temp[3]&0x0f;
;;;11035  
;;;11036  	if(crc_eval==crc_in)
;;;11037  		{
;;;11038  		unsigned short temp_US;
;;;11039  		temp_US=0;
;;;11040  
;;;11041  		temp_US|=(bps[i]._vent_resurs_temp[3]&0x0f);
;;;11042  		temp_US<<=4;
;;;11043  		temp_US|=(bps[i]._vent_resurs_temp[2]&0x0f);
;;;11044  		temp_US<<=4;
;;;11045  		temp_US|=(bps[i]._vent_resurs_temp[1]&0x0f);
;;;11046  		temp_US<<=4;
;;;11047  		temp_US|=(bps[i]._vent_resurs_temp[0]&0x0f);
;;;11048  
;;;11049  		if(bps[i]._vent_resurs!=temp_US)bps[i]._vent_resurs=temp_US;
;;;11050  		}
;;;11051  
;;;11052  	if((bps[i]._vent_resurs>TVENTMAX*10)&&(TVENTMAX>0))
006fd2  4889              LDR      r0,|L1.29176|
006fd4  f8dfc224          LDR      r12,|L1.29180|
006fd8  f9b06000          LDRSH    r6,[r0,#0]
006fdc  487c              LDR      r0,|L1.29136|
006fde  f9b07000          LDRSH    r7,[r0,#0]            ;11007
006fe2  e06e              B        |L1.28866|
                  |L1.28644|
006fe4  eb0200c2          ADD      r0,r2,r2,LSL #3       ;11009
006fe8  eb001002          ADD      r0,r0,r2,LSL #4       ;11009
006fec  eb0c0080          ADD      r0,r12,r0,LSL #2      ;11009
006ff0  7b41              LDRB     r1,[r0,#0xd]          ;11009
006ff2  098b              LSRS     r3,r1,#6              ;11009
006ff4  d006              BEQ      |L1.28676|
006ff6  2301              MOVS     r3,#1                 ;11013
006ff8  ebb31f91          CMP      r3,r1,LSR #6          ;11013
006ffc  d105              BNE      |L1.28682|
006ffe  f8801059          STRB     r1,[r0,#0x59]         ;11015
007002  e00f              B        |L1.28708|
                  |L1.28676|
007004  f8801058          STRB     r1,[r0,#0x58]         ;11011
007008  e00c              B        |L1.28708|
                  |L1.28682|
00700a  2302              MOVS     r3,#2                 ;11017
00700c  ebb31f91          CMP      r3,r1,LSR #6          ;11017
007010  d102              BNE      |L1.28696|
007012  f880105a          STRB     r1,[r0,#0x5a]         ;11019
007016  e005              B        |L1.28708|
                  |L1.28696|
007018  2303              MOVS     r3,#3                 ;11021
00701a  ebb31f91          CMP      r3,r1,LSR #6          ;11021
00701e  d101              BNE      |L1.28708|
007020  f880105b          STRB     r1,[r0,#0x5b]         ;11023
                  |L1.28708|
007024  f8101f58          LDRB     r1,[r0,#0x58]!        ;11026
007028  f3c11401          UBFX     r4,r1,#4,#2           ;11026
00702c  7843              LDRB     r3,[r0,#1]            ;11027
00702e  f0030530          AND      r5,r3,#0x30           ;11027
007032  ea440495          ORR      r4,r4,r5,LSR #2       ;11027
007036  f8909002          LDRB     r9,[r0,#2]            ;11028
00703a  f0090830          AND      r8,r9,#0x30           ;11028
00703e  ea480804          ORR      r8,r8,r4              ;11028
007042  78c5              LDRB     r5,[r0,#3]            ;11029
007044  f1a00058          SUB      r0,r0,#0x58           ;11029
007048  f0050430          AND      r4,r5,#0x30           ;11029
00704c  ea480884          ORR      r8,r8,r4,LSL #2       ;11029
007050  f001010f          AND      r1,r1,#0xf            ;11031
007054  f003040f          AND      r4,r3,#0xf            ;11032
007058  ea840a01          EOR      r10,r4,r1             ;11032
00705c  f009030f          AND      r3,r9,#0xf            ;11033
007060  ea83090a          EOR      r9,r3,r10             ;11033
007064  f005050f          AND      r5,r5,#0xf            ;11034
007068  ea850909          EOR      r9,r5,r9              ;11034
00706c  45c1              CMP      r9,r8                 ;11036
00706e  d113              BNE      |L1.28824|
007070  ea4f1505          LSL      r5,r5,#4              ;11042
007074  ea430305          ORR      r3,r3,r5              ;11043
007078  ea4f1303          LSL      r3,r3,#4              ;11044
00707c  ea440403          ORR      r4,r4,r3              ;11045
007080  ea4f5304          LSL      r3,r4,#20             ;11046
007084  ea4f4313          LSR      r3,r3,#16             ;11046
007088  ea410103          ORR      r1,r1,r3              ;11047
00708c  f8b0305c          LDRH     r3,[r0,#0x5c]         ;11049
007090  428b              CMP      r3,r1                 ;11049
007092  d001              BEQ      |L1.28824|
007094  f8a0105c          STRH     r1,[r0,#0x5c]         ;11049
                  |L1.28824|
007098  f8b0105c          LDRH     r1,[r0,#0x5c]
00709c  eb060386          ADD      r3,r6,r6,LSL #2
0070a0  ebb10f43          CMP      r1,r3,LSL #1
0070a4  dd06              BLE      |L1.28852|
0070a6  2e00              CMP      r6,#0
0070a8  dd04              BLE      |L1.28852|
;;;11053  		{
;;;11054  		bps[i]._av|=(1<<4);
0070aa  7841              LDRB     r1,[r0,#1]
0070ac  f0410110          ORR      r1,r1,#0x10
0070b0  7041              STRB     r1,[r0,#1]
0070b2  e003              B        |L1.28860|
                  |L1.28852|
;;;11055  		}
;;;11056  	else bps[i]._av&=~(1<<4);
0070b4  7841              LDRB     r1,[r0,#1]
0070b6  f0210110          BIC      r1,r1,#0x10
0070ba  7041              STRB     r1,[r0,#1]
                  |L1.28860|
0070bc  f1020201          ADD      r2,r2,#1              ;11007
0070c0  b2d2              UXTB     r2,r2                 ;11007
                  |L1.28866|
0070c2  42ba              CMP      r2,r7                 ;11007
0070c4  db8e              BLT      |L1.28644|
;;;11057  	}
;;;11058  }
0070c6  e8bd87f0          POP      {r4-r10,pc}
;;;11059  
                          ENDP

                  vent_hndl PROC
;;;11060  //-----------------------------------------------
;;;11061  void vent_hndl(void)
0070ca  e92d4ff0          PUSH     {r4-r11,lr}
;;;11062  {
0070ce  b087              SUB      sp,sp,#0x1c
;;;11063  if(RELEVENTSIGN==rvsAKB)
;;;11064  	{
;;;11065  	if(vent_stat==0)
0070d0  4c3d              LDR      r4,|L1.29128|
0070d2  484b              LDR      r0,|L1.29184|
;;;11066  		{
;;;11067  		if	(
;;;11068  			(BAT_IS_ON[0]==bisON)&&((bat[0]._Tb>TVENTON)||(bat[0]._nd))
0070d4  494b              LDR      r1,|L1.29188|
;;;11069  			||
;;;11070  			(BAT_IS_ON[1]==bisON)&&((bat[1]._Tb>TVENTON)||(bat[1]._nd))
;;;11071  			)
;;;11072  			{
;;;11073  			vent_stat=1;
;;;11074  			}
;;;11075  		}
;;;11076  	else if(vent_stat==1)
;;;11077  		{
;;;11078  		if	(
;;;11079  			((BAT_IS_ON[0]!=bisON)||((BAT_IS_ON[0]==bisON)&&(bat[0]._Tb<TVENTOFF)&&(!bat[0]._nd)))
0070d6  4a4c              LDR      r2,|L1.29192|
0070d8  3c28              SUBS     r4,r4,#0x28           ;11065
0070da  7800              LDRB     r0,[r0,#0]            ;11063  ; RELEVENTSIGN
0070dc  f9943000          LDRSB    r3,[r4,#0]            ;11065
0070e0  f9b11000          LDRSH    r1,[r1,#0]            ;11068
0070e4  f9b22000          LDRSH    r2,[r2,#0]
0070e8  b148              CBZ      r0,|L1.28926|
;;;11080  			&&
;;;11081  			((BAT_IS_ON[1]!=bisON)||((BAT_IS_ON[1]==bisON)&&(bat[1]._Tb<TVENTOFF)&&(!bat[1]._nd)))
;;;11082  			)
;;;11083  			{
;;;11084  			vent_stat=0;
;;;11085  			}
;;;11086  		}
;;;11087  	}
;;;11088  else if(RELEVENTSIGN==rvsBPS)
0070ea  2802              CMP      r0,#2
0070ec  d03c              BEQ      |L1.29032|
;;;11089  	{
;;;11090  /*	if	(
;;;11091  		(((bps[0]._flags_tm&0x06)||(bps[0]._cnt>=30)))||
;;;11092  		(((bps[1]._flags_tm&0x06)||(bps[1]._cnt>=30))&&(NUMIST>1))||
;;;11093  		(((bps[2]._flags_tm&0x06)||(bps[2]._cnt>=30))&&(NUMIST>2))||
;;;11094  		(((bps[3]._flags_tm&0x06)||(bps[3]._cnt>=30))&&(NUMIST>3))||
;;;11095  		(((bps[4]._flags_tm&0x06)||(bps[4]._cnt>=30))&&(NUMIST>4))||
;;;11096  		(((bps[5]._flags_tm&0x06)||(bps[5]._cnt>=30))&&(NUMIST>5))||
;;;11097  		(((bps[6]._flags_tm&0x06)||(bps[6]._cnt>=30))&&(NUMIST>6))
;;;11098  		)
;;;11099  		{
;;;11100  		vent_stat=1;
;;;11101  		}
;;;11102  	else vent_stat=0;
;;;11103  	*/
;;;11104  
;;;11105  	if	(
;;;11106  		((NUMIST)&&((bps[0]._Ti>TVENTON)||(bps[0]._cnt>=30)))
;;;11107  		||
;;;11108  		((NUMIST>1)&&((bps[1]._Ti>TVENTON)||(bps[1]._cnt>=30)))
;;;11109  		||
;;;11110  		((NUMIST>2)&&((bps[2]._Ti>TVENTON)||(bps[2]._cnt>=30)))
;;;11111  		||
;;;11112  		((NUMIST>3)&&((bps[3]._Ti>TVENTON)||(bps[3]._cnt>=30)))
;;;11113  		||
;;;11114  		((NUMIST>4)&&((bps[4]._Ti>TVENTON)||(bps[4]._cnt>=30)))
;;;11115  		||
;;;11116  		((NUMIST>5)&&((bps[5]._Ti>TVENTON)||(bps[5]._cnt>=30)))
;;;11117  		||
;;;11118  		((NUMIST>6)&&((bps[6]._Ti>TVENTON)||(bps[6]._cnt>=30)))
;;;11119  		||
;;;11120  		((NUMIST>7)&&((bps[7]._Ti>TVENTON)||(bps[7]._cnt>=30)))
;;;11121  		)
;;;11122  		{
;;;11123  		vent_stat=1;
;;;11124  		}
;;;11125  	else if(vent_stat==1)
;;;11126  		{
;;;11127  		if	(
;;;11128  			((!NUMIST)||((NUMIST)&&(bps[0]._Ti<TVENTOFF)&&(bps[0]._cnt<10)))
;;;11129  			&&
;;;11130  			((NUMIST<2)||((NUMIST>=2)&&(bps[1]._Ti<TVENTOFF)&&(bps[1]._cnt<10)))
;;;11131  			&&
;;;11132  			((NUMIST<3)||((NUMIST>=3)&&(bps[2]._Ti<TVENTOFF)&&(bps[2]._cnt<10)))
;;;11133  			&&
;;;11134  			((NUMIST<4)||((NUMIST>=4)&&(bps[3]._Ti<TVENTOFF)&&(bps[3]._cnt<10)))
;;;11135  			&&
;;;11136  			((NUMIST<5)||((NUMIST>=5)&&(bps[4]._Ti<TVENTOFF)&&(bps[4]._cnt<10)))
;;;11137  			&&
;;;11138  			((NUMIST<6)||((NUMIST>=6)&&(bps[5]._Ti<TVENTOFF)&&(bps[5]._cnt<10)))
;;;11139  			&&
;;;11140  			((NUMIST<7)||((NUMIST>=7)&&(bps[6]._Ti<TVENTOFF)&&(bps[6]._cnt<10)))
;;;11141  			&&
;;;11142  			((NUMIST<8)||((NUMIST>=8)&&(bps[7]._Ti<TVENTOFF)&&(bps[7]._cnt<10)))
;;;11143  			)
;;;11144  			{
;;;11145  			vent_stat=0;
;;;11146  			}
;;;11147  		}
;;;11148  	}
;;;11149  else if(RELEVENTSIGN==rvsEXT)
0070ee  2801              CMP      r0,#1
0070f0  d063              BEQ      |L1.29114|
;;;11150  	{
;;;11151  	if	(
;;;11152  		((NUMDT)&&((t_ext[0]>TVENTON)||(ND_EXT[0])))
;;;11153  		||
;;;11154  		((NUMDT>1)&&((t_ext[1]>TVENTON)||(ND_EXT[1])))
;;;11155  		||
;;;11156  		((NUMDT>2)&&((t_ext[2]>TVENTON)||(ND_EXT[2])))
;;;11157  		)
;;;11158  		{
;;;11159  		vent_stat=1;
;;;11160  		}
;;;11161  	else if(vent_stat==1)
;;;11162  		{
;;;11163  		if	(
;;;11164  			((!NUMDT)||((NUMDT)&&(t_ext[0]<TVENTOFF)&&(!ND_EXT[0])))
;;;11165  			&&
;;;11166  			((NUMDT<2)||((NUMDT>=2)&&(t_ext[1]<TVENTOFF)&&(!ND_EXT[1])))
;;;11167  			&&
;;;11168  			((NUMDT<3)||((NUMDT>=3)&&(t_ext[2]<TVENTOFF)&&(!ND_EXT[2])))
;;;11169  			)
;;;11170  			{
;;;11171  			vent_stat=0;
;;;11172  			}
;;;11173  		}
;;;11174  	}
;;;11175  else vent_stat=1;
0070f2  f04f0001          MOV      r0,#1
0070f6  7020              STRB     r0,[r4,#0]
                  |L1.28920|
;;;11176  }
0070f8  b007              ADD      sp,sp,#0x1c
0070fa  e8bd8ff0          POP      {r4-r11,pc}
                  |L1.28926|
0070fe  4f43              LDR      r7,|L1.29196|
007100  f8df810c          LDR      r8,|L1.29200|
007104  f9b7000a          LDRSH    r0,[r7,#0xa]          ;11068
007108  7b3d              LDRB     r5,[r7,#0xc]          ;11068
00710a  f9b76056          LDRSH    r6,[r7,#0x56]         ;11070
00710e  f898c000          LDRB     r12,[r8,#0]           ;11067
007112  f8977058          LDRB     r7,[r7,#0x58]         ;11070
007116  f8988001          LDRB     r8,[r8,#1]            ;11070
00711a  b12b              CBZ      r3,|L1.28968|
00711c  2b01              CMP      r3,#1                 ;11076
00711e  d1eb              BNE      |L1.28920|
007120  f1bc0f55          CMP      r12,#0x55             ;11078
007124  d115              BNE      |L1.29010|
007126  e010              B        |L1.29002|
                  |L1.28968|
007128  f1bc0f55          CMP      r12,#0x55             ;11067
00712c  d102              BNE      |L1.28980|
00712e  4288              CMP      r0,r1                 ;11068
007130  dc07              BGT      |L1.28994|
007132  b935              CBNZ     r5,|L1.28994|
                  |L1.28980|
007134  f1b80f55          CMP      r8,#0x55              ;11070
007138  d1de              BNE      |L1.28920|
00713a  428e              CMP      r6,r1                 ;11070
00713c  dc01              BGT      |L1.28994|
00713e  2f00              CMP      r7,#0                 ;11070
007140  d0da              BEQ      |L1.28920|
                  |L1.28994|
007142  f04f0001          MOV      r0,#1                 ;11073
007146  7020              STRB     r0,[r4,#0]            ;11073
007148  e7d6              B        |L1.28920|
                  |L1.29002|
00714a  4290              CMP      r0,r2                 ;11079
00714c  dad4              BGE      |L1.28920|
00714e  2d00              CMP      r5,#0                 ;11079
007150  d1d2              BNE      |L1.28920|
                  |L1.29010|
007152  f1b80f55          CMP      r8,#0x55              ;11081
007156  d103              BNE      |L1.29024|
007158  4296              CMP      r6,r2                 ;11081
00715a  dacd              BGE      |L1.28920|
00715c  2f00              CMP      r7,#0                 ;11081
00715e  d1cb              BNE      |L1.28920|
                  |L1.29024|
007160  f04f0000          MOV      r0,#0                 ;11084
007164  7020              STRB     r0,[r4,#0]            ;11084
007166  e7c7              B        |L1.28920|
                  |L1.29032|
007168  4e24              LDR      r6,|L1.29180|
00716a  4819              LDR      r0,|L1.29136|
00716c  6ab5              LDR      r5,[r6,#0x28]         ;11106
00716e  f9b00000          LDRSH    r0,[r0,#0]            ;11105  ; NUMIST
007172  78f6              LDRB     r6,[r6,#3]            ;11106
007174  b118              CBZ      r0,|L1.29054|
007176  428d              CMP      r5,r1                 ;11106
007178  dc7e              BGT      |L1.29304|
00717a  2e1e              CMP      r6,#0x1e              ;11106
00717c  d27c              BCS      |L1.29304|
                  |L1.29054|
00717e  f8dfc07c          LDR      r12,|L1.29180|
007182  2801              CMP      r0,#1                 ;11108
007184  f8dc708c          LDR      r7,[r12,#0x8c]        ;11108
007188  f89cc067          LDRB     r12,[r12,#0x67]       ;11108
00718c  f8cdc018          STR      r12,[sp,#0x18]        ;11108
007190  dd06              BLE      |L1.29088|
007192  428f              CMP      r7,r1                 ;11108
007194  dc70              BGT      |L1.29304|
007196  f8ddc018          LDR      r12,[sp,#0x18]        ;11108
00719a  f1bc0f1e          CMP      r12,#0x1e             ;11108
00719e  d26b              BCS      |L1.29304|
                  |L1.29088|
0071a0  f8dfc058          LDR      r12,|L1.29180|
0071a4  2802              CMP      r0,#2                 ;11110
0071a6  f8dc80f0          LDR      r8,[r12,#0xf0]        ;11110
0071aa  f8cd8014          STR      r8,[sp,#0x14]         ;11110
0071ae  f89cc0cb          LDRB     r12,[r12,#0xcb]       ;11110
0071b2  f8cdc010          STR      r12,[sp,#0x10]        ;11110
0071b6  dd36              BLE      |L1.29222|
0071b8  e02c              B        |L1.29204|
                  |L1.29114|
0071ba  e0c9              B        |L1.29520|
                  |L1.29116|
                          DCD      ||.text||+0x1678
                  |L1.29120|
                          DCD      ||.text||+0x21e0
                  |L1.29124|
                          DCD      ||.text||+0x1d04
                  |L1.29128|
                          DCD      ||area_number.25||+0x28
                  |L1.29132|
                          DCD      FORVARDBPSCHHOUR
                  |L1.29136|
                          DCD      NUMIST
                  |L1.29140|
                          DCD      load_U
                  |L1.29144|
                          DCD      U_OUT_KONTR_MAX
                  |L1.29148|
                          DCD      outVoltContrHndlCnt
                  |L1.29152|
                          DCD      outVoltContrHndlCnt_
                  |L1.29156|
                          DCD      U_OUT_KONTR_MIN
                  |L1.29160|
                          DCD      U_OUT_KONTR_DELAY
                  |L1.29164|
                          DCD      uout_av
                  |L1.29168|
                          DCD      USIGN
                  |L1.29172|
                          DCD      bSILENT
                  |L1.29176|
                          DCD      TVENTMAX
                  |L1.29180|
                          DCD      bps
                  |L1.29184|
                          DCD      RELEVENTSIGN
                  |L1.29188|
                          DCD      TVENTON
                  |L1.29192|
                          DCD      TVENTOFF
                  |L1.29196|
                          DCD      bat
                  |L1.29200|
                          DCD      BAT_IS_ON
                  |L1.29204|
007214  f8ddc014          LDR      r12,[sp,#0x14]        ;11110
007218  458c              CMP      r12,r1                ;11110
00721a  dc57              BGT      |L1.29388|
00721c  f8ddc010          LDR      r12,[sp,#0x10]        ;11110
007220  f1bc0f1e          CMP      r12,#0x1e             ;11110
007224  d252              BCS      |L1.29388|
                  |L1.29222|
007226  f8dfc1b4          LDR      r12,|L1.29660|
00722a  2803              CMP      r0,#3                 ;11112
00722c  f8dc8154          LDR      r8,[r12,#0x154]       ;11112
007230  f8cd800c          STR      r8,[sp,#0xc]          ;11112
007234  f89cc12f          LDRB     r12,[r12,#0x12f]      ;11112
007238  f8cdc008          STR      r12,[sp,#8]           ;11112
00723c  dd08              BLE      |L1.29264|
00723e  f8ddc00c          LDR      r12,[sp,#0xc]         ;11112
007242  458c              CMP      r12,r1                ;11112
007244  dc42              BGT      |L1.29388|
007246  f8ddc008          LDR      r12,[sp,#8]           ;11112
00724a  f1bc0f1e          CMP      r12,#0x1e             ;11112
00724e  d23d              BCS      |L1.29388|
                  |L1.29264|
007250  f8df8188          LDR      r8,|L1.29660|
007254  2804              CMP      r0,#4                 ;11114
007256  f8d8c1b8          LDR      r12,[r8,#0x1b8]       ;11114
00725a  f8988193          LDRB     r8,[r8,#0x193]        ;11114
00725e  f8cd8004          STR      r8,[sp,#4]            ;11114
007262  dd06              BLE      |L1.29298|
007264  458c              CMP      r12,r1                ;11114
007266  dc31              BGT      |L1.29388|
007268  f8dd8004          LDR      r8,[sp,#4]            ;11114
00726c  f1b80f1e          CMP      r8,#0x1e              ;11114
007270  d22c              BCS      |L1.29388|
                  |L1.29298|
007272  f8df9168          LDR      r9,|L1.29660|
007276  e000              B        |L1.29306|
                  |L1.29304|
007278  e028              B        |L1.29388|
                  |L1.29306|
00727a  f8d9821c          LDR      r8,[r9,#0x21c]        ;11116
00727e  f89991f7          LDRB     r9,[r9,#0x1f7]        ;11116
007282  f8cd9000          STR      r9,[sp,#0]            ;11116
007286  2805              CMP      r0,#5                 ;11116
007288  dd06              BLE      |L1.29336|
00728a  4588              CMP      r8,r1                 ;11116
00728c  dc1e              BGT      |L1.29388|
00728e  f8dd9000          LDR      r9,[sp,#0]            ;11116
007292  f1b90f1e          CMP      r9,#0x1e              ;11116
007296  d219              BCS      |L1.29388|
                  |L1.29336|
007298  f8dfa140          LDR      r10,|L1.29660|
00729c  2806              CMP      r0,#6                 ;11118
00729e  f89ae25b          LDRB     lr,[r10,#0x25b]       ;11118
0072a2  f8da9280          LDR      r9,[r10,#0x280]       ;11118
0072a6  dd04              BLE      |L1.29362|
0072a8  4589              CMP      r9,r1                 ;11118
0072aa  dc0f              BGT      |L1.29388|
0072ac  f1be0f1e          CMP      lr,#0x1e              ;11118
0072b0  d20c              BCS      |L1.29388|
                  |L1.29362|
0072b2  f8dfb128          LDR      r11,|L1.29660|
0072b6  2807              CMP      r0,#7                 ;11120
0072b8  f8dba2e4          LDR      r10,[r11,#0x2e4]      ;11120
0072bc  f89bb2bf          LDRB     r11,[r11,#0x2bf]      ;11120
0072c0  dd08              BLE      |L1.29396|
0072c2  458a              CMP      r10,r1                ;11120
0072c4  dc02              BGT      |L1.29388|
0072c6  f1bb0f1e          CMP      r11,#0x1e             ;11120
0072ca  d303              BCC      |L1.29396|
                  |L1.29388|
0072cc  f04f0001          MOV      r0,#1                 ;11123
0072d0  7020              STRB     r0,[r4,#0]            ;11123
                  |L1.29394|
0072d2  e711              B        |L1.28920|
                  |L1.29396|
0072d4  2b01              CMP      r3,#1                 ;11125
0072d6  d1fc              BNE      |L1.29394|
0072d8  b118              CBZ      r0,|L1.29410|
0072da  4295              CMP      r5,r2                 ;11128
0072dc  daf9              BGE      |L1.29394|
0072de  2e0a              CMP      r6,#0xa               ;11128
0072e0  d2f7              BCS      |L1.29394|
                  |L1.29410|
0072e2  2802              CMP      r0,#2                 ;11130
0072e4  db04              BLT      |L1.29424|
0072e6  4297              CMP      r7,r2                 ;11130
0072e8  daf3              BGE      |L1.29394|
0072ea  9906              LDR      r1,[sp,#0x18]         ;11130
0072ec  290a              CMP      r1,#0xa               ;11130
0072ee  d2f0              BCS      |L1.29394|
                  |L1.29424|
0072f0  2803              CMP      r0,#3                 ;11132
0072f2  db05              BLT      |L1.29440|
0072f4  9905              LDR      r1,[sp,#0x14]         ;11132
0072f6  4291              CMP      r1,r2                 ;11132
0072f8  daeb              BGE      |L1.29394|
0072fa  9904              LDR      r1,[sp,#0x10]         ;11132
0072fc  290a              CMP      r1,#0xa               ;11132
0072fe  d2e8              BCS      |L1.29394|
                  |L1.29440|
007300  2804              CMP      r0,#4                 ;11134
007302  db05              BLT      |L1.29456|
007304  9903              LDR      r1,[sp,#0xc]          ;11134
007306  4291              CMP      r1,r2                 ;11134
007308  dae3              BGE      |L1.29394|
00730a  9902              LDR      r1,[sp,#8]            ;11134
00730c  290a              CMP      r1,#0xa               ;11134
00730e  d2e0              BCS      |L1.29394|
                  |L1.29456|
007310  2805              CMP      r0,#5                 ;11136
007312  db04              BLT      |L1.29470|
007314  4594              CMP      r12,r2                ;11136
007316  dadc              BGE      |L1.29394|
007318  9901              LDR      r1,[sp,#4]            ;11136
00731a  290a              CMP      r1,#0xa               ;11136
00731c  d2d9              BCS      |L1.29394|
                  |L1.29470|
00731e  2806              CMP      r0,#6                 ;11138
007320  db04              BLT      |L1.29484|
007322  4590              CMP      r8,r2                 ;11138
007324  dad5              BGE      |L1.29394|
007326  9900              LDR      r1,[sp,#0]            ;11138
007328  290a              CMP      r1,#0xa               ;11138
00732a  d2d2              BCS      |L1.29394|
                  |L1.29484|
00732c  2807              CMP      r0,#7                 ;11140
00732e  db04              BLT      |L1.29498|
007330  4591              CMP      r9,r2                 ;11140
007332  dace              BGE      |L1.29394|
007334  f1be0f0a          CMP      lr,#0xa               ;11140
007338  d2cb              BCS      |L1.29394|
                  |L1.29498|
00733a  2808              CMP      r0,#8                 ;11142
00733c  db04              BLT      |L1.29512|
00733e  4592              CMP      r10,r2                ;11142
007340  dac7              BGE      |L1.29394|
007342  f1bb0f0a          CMP      r11,#0xa              ;11142
007346  d2c4              BCS      |L1.29394|
                  |L1.29512|
007348  f04f0000          MOV      r0,#0                 ;11145
00734c  7020              STRB     r0,[r4,#0]            ;11145
                  |L1.29518|
00734e  e6d3              B        |L1.28920|
                  |L1.29520|
007350  4823              LDR      r0,|L1.29664|
007352  4d24              LDR      r5,|L1.29668|
007354  4e24              LDR      r6,|L1.29672|
007356  f9b00000          LDRSH    r0,[r0,#0]            ;11151  ; NUMDT
00735a  f9b55000          LDRSH    r5,[r5,#0]            ;11152
00735e  7836              LDRB     r6,[r6,#0]            ;11152
007360  b110              CBZ      r0,|L1.29544|
007362  428d              CMP      r5,r1                 ;11152
007364  dc1d              BGT      |L1.29602|
007366  b9e6              CBNZ     r6,|L1.29602|
                  |L1.29544|
007368  4f1e              LDR      r7,|L1.29668|
00736a  f8dfc07c          LDR      r12,|L1.29672|
00736e  2801              CMP      r0,#1                 ;11154
007370  f9b77002          LDRSH    r7,[r7,#2]            ;11154
007374  f89cc001          LDRB     r12,[r12,#1]          ;11154
007378  dd04              BLE      |L1.29572|
00737a  428f              CMP      r7,r1                 ;11154
00737c  dc11              BGT      |L1.29602|
00737e  f1bc0f00          CMP      r12,#0                ;11154
007382  d10e              BNE      |L1.29602|
                  |L1.29572|
007384  f8df805c          LDR      r8,|L1.29668|
007388  f8df905c          LDR      r9,|L1.29672|
00738c  2802              CMP      r0,#2                 ;11156
00738e  f9b88004          LDRSH    r8,[r8,#4]            ;11156
007392  f8999002          LDRB     r9,[r9,#2]            ;11156
007396  dd08              BLE      |L1.29610|
007398  4588              CMP      r8,r1                 ;11156
00739a  dc02              BGT      |L1.29602|
00739c  f1b90f00          CMP      r9,#0                 ;11156
0073a0  d003              BEQ      |L1.29610|
                  |L1.29602|
0073a2  f04f0001          MOV      r0,#1                 ;11159
0073a6  7020              STRB     r0,[r4,#0]            ;11159
0073a8  e6a6              B        |L1.28920|
                  |L1.29610|
0073aa  2b01              CMP      r3,#1                 ;11161
0073ac  d191              BNE      |L1.29394|
0073ae  b118              CBZ      r0,|L1.29624|
0073b0  4295              CMP      r5,r2                 ;11164
0073b2  da8e              BGE      |L1.29394|
0073b4  2e00              CMP      r6,#0                 ;11164
0073b6  d18c              BNE      |L1.29394|
                  |L1.29624|
0073b8  2802              CMP      r0,#2                 ;11166
0073ba  db04              BLT      |L1.29638|
0073bc  4297              CMP      r7,r2                 ;11166
0073be  da88              BGE      |L1.29394|
0073c0  f1bc0f00          CMP      r12,#0                ;11166
0073c4  d185              BNE      |L1.29394|
                  |L1.29638|
0073c6  2803              CMP      r0,#3                 ;11168
0073c8  db04              BLT      |L1.29652|
0073ca  4590              CMP      r8,r2                 ;11168
0073cc  dabf              BGE      |L1.29518|
0073ce  f1b90f00          CMP      r9,#0                 ;11168
0073d2  d1bc              BNE      |L1.29518|
                  |L1.29652|
0073d4  f04f0000          MOV      r0,#0                 ;11171
0073d8  7020              STRB     r0,[r4,#0]            ;11171
0073da  e68d              B        |L1.28920|
;;;11177  
                          ENDP

                  |L1.29660|
                          DCD      bps
                  |L1.29664|
                          DCD      NUMDT
                  |L1.29668|
                          DCD      t_ext
                  |L1.29672|
                          DCD      ND_EXT

                          AREA ||area_number.2||, CODE, READONLY, ALIGN=2

                          EXPORTAS ||area_number.2||, ||.text||
                  samokalibr_init PROC
;;;326    // заполнение флагов для АКБ
;;;327    void bat_flag (void)
000000  4902              LDR      r1,|L2.12|
;;;328    {  
000002  f24060f9          MOV      r0,#0x6f9
;;;329    if(spc_stat!=spcVZ) 
;;;330    	{
;;;331    	vz_error=0;
000006  f8a10050          STRH     r0,[r1,#0x50]
00000a  4770              BX       lr                    ;329
;;;332    	sp_ch_error=0;
;;;333    	vz1_error=0;
;;;334    	vz2_error=0;
;;;335    	}
;;;336    
;;;337    if(!snmp_bat_status[0])	 			//Батарея №1
;;;338    	{
;;;339    	if((bat[0]._Ub<(USIGN*10)))		//Снижение напряжения батареи ниже Uбсигн 
;;;340    		{
;;;341    		snmp_bat_flag[0]|=0x0001; 
;;;342    		if((snmp_bat_flag_puts[0]&0x0001)==0) 
;;;343    			{
;;;344    			snmp_trap_send("BAT #1 Alarm, battery is low",5,8,0); 
;;;345    			snmp_bat_flag_puts[0]|=0x0001;
;;;346    			}
;;;347    		}
;;;348    	else 
;;;349    		{
;;;350    		snmp_bat_flag[0]&=~0x0001; 
;;;351    		if(snmp_bat_flag_puts[0]&0x0001) 
;;;352    			{
;;;353    			snmp_trap_send("BAT #1 Alarm clear, battery is not low",5,8,1);
;;;354    			snmp_bat_flag_puts[0]&=~0x0001;
;;;355    			}
;;;356    		}
;;;357    
;;;358    	if(bat[0]._temper_stat&0x01)	//Повышенная температура батареи, первый порог - предупреждение
;;;359    		{
;;;360    		snmp_bat_flag[0]|=0x0002;
;;;361    		if((snmp_bat_flag_puts[0]&0x0002)==0) 
;;;362    			{
;;;363    			//snmp_trap_send("BAT #1 Warning, high battery temperature",5,8,2); 
;;;364    			snmp_bat_flag_puts[0]|=0x0002;
;;;365    			}
;;;366    		}
;;;367    	else 
;;;368    		{
;;;369    		snmp_bat_flag[0]&=~0x0002;
;;;370    		if(snmp_bat_flag_puts[0]&0x0002) 
;;;371    			{
;;;372    			//snmp_trap_send("BAT #1 Warning clear, battery temperature is normal",5,8,3);
;;;373    			snmp_bat_flag_puts[0]&=~0x02;
;;;374    			}
;;;375    		}
;;;376    
;;;377    	if(bat[0]._temper_stat&0x02)  	//Повышенная температура батареи, второй порог - авария
;;;378    		{
;;;379    		snmp_bat_flag[0]|=0x0004;
;;;380    		if((snmp_bat_flag_puts[0]&0x0004)==0) 
;;;381    			{
;;;382    			//snmp_trap_send("BAT #1 Alarm, high battery temperature",5,8,4); 
;;;383    			snmp_bat_flag_puts[0]|=0x0004;
;;;384    			}
;;;385    		}
;;;386    	else 
;;;387    		{
;;;388    		snmp_bat_flag[0]&=~0x0004;
;;;389    		if(snmp_bat_flag_puts[0]&0x0004) 
;;;390    			{
;;;391    			//snmp_trap_send("BAT #1 Alarm clear, battery temperature is normal",5,8,5);
;;;392    			snmp_bat_flag_puts[0]&=~0x0004;
;;;393    			}
;;;394    		}
;;;395    
;;;396    	if(bat[0]._Ib<(-IKB)) snmp_bat_flag[0]|=0x0008;		//Разряд батареи
;;;397    	else if(bat[0]._Ib>IKB) snmp_bat_flag[0]&=~0x0008;	//Заряд батареи
;;;398    
;;;399    	if((spc_stat==spcKE)&&(spc_bat==0))					//Контроль емкости батареи №1 
;;;400    		{
;;;401    		snmp_bat_flag[0]|=0x0010;
;;;402    		if((snmp_bat_flag_puts[0]&0x0010)==0) 
;;;403    			{
;;;404    			snmp_trap_send("BAT #1, capacity test started",5,8,6); 
;;;405    			snmp_bat_flag_puts[0]|=0x0010;
;;;406    			}
;;;407    		}
;;;408    	else 
;;;409    		{
;;;410    		snmp_bat_flag[0]&=~0x0010;
;;;411    		if(snmp_bat_flag_puts[0]&0x0010) 
;;;412    			{
;;;413    			snmp_trap_send("BAT #1, capacity test stopped",5,8,7);
;;;414    			snmp_bat_flag_puts[0]&=~0x0010;
;;;415    			}
;;;416    		}
;;;417    		
;;;418    	if(spc_stat==spcVZ)									//Выравнивающий заряд 
;;;419    		{
;;;420    		snmp_bat_flag[0]|=0x0020;
;;;421    		if((snmp_bat_flag_puts[0]&0x0020)==0) 
;;;422    			{
;;;423    			snmp_trap_send("BAT #1,leveling charge is started",5,8,8); 
;;;424    			snmp_bat_flag_puts[0]|=0x0020;
;;;425    			}
;;;426    		}
;;;427    	else 
;;;428    		{
;;;429    		snmp_bat_flag[0]&=~0x0020;
;;;430    		if(snmp_bat_flag_puts[0]&0x0020) 
;;;431    			{
;;;432    			snmp_trap_send("BAT #1,leveling charge is stopped",5,8,9);
;;;433    			snmp_bat_flag_puts[0]&=~0x0020;
;;;434    			}
;;;435    		}
;;;436    
;;;437    	if(vz_error)										 //Выравнивающий заряд заблокирован по вентиляции
;;;438    		{
;;;439    		snmp_bat_flag[0]|=0x0040;
;;;440    		if((snmp_bat_flag_puts[0]&0x0040)==0) 
;;;441    			{
;;;442    			snmp_trap_send("BAT #1,leveling charge is blocked",5,8,10); 
;;;443    			snmp_bat_flag_puts[0]|=0x0040;
;;;444    			}
;;;445    		}
;;;446    	else 
;;;447    		{
;;;448    		snmp_bat_flag[0]&=~0x0040;
;;;449    		if(snmp_bat_flag_puts[0]&0x0040) 
;;;450    			{
;;;451    			snmp_trap_send("BAT #1,leveling charge is unblocked",5,8,11);
;;;452    			snmp_bat_flag_puts[0]&=~0x0040;
;;;453    			} 
;;;454    		}
;;;455    
;;;456    	if(sp_ch_stat==scsWRK) 								//Ускореннный заряд
;;;457    		{
;;;458    		snmp_bat_flag[0]|=0x0080;
;;;459    		if((snmp_bat_flag_puts[0]&0x0080)==0) 
;;;460    			{
;;;461    			snmp_trap_send("BAT #1,speed charge is started",5,8,10); 
;;;462    			snmp_bat_flag_puts[0]|=0x0080;
;;;463    			}
;;;464    		}
;;;465    	else 
;;;466    		{
;;;467    		snmp_bat_flag[0]&=~0x0080;
;;;468    		if(snmp_bat_flag_puts[0]&0x0080) 
;;;469    			{
;;;470    			snmp_trap_send("BAT #1,speed charge is stopped",5,8,11);
;;;471    			snmp_bat_flag_puts[0]&=~0x0080;
;;;472    			}
;;;473    		}
;;;474    
;;;475    	if(sp_ch_error) 									//Ускореннный заряд заблокирован по вентиляции
;;;476    		{
;;;477    		snmp_bat_flag[0]|=0x0100;
;;;478    		if((snmp_bat_flag_puts[0]&0x0100)==0) 
;;;479    			{
;;;480    			snmp_trap_send("BAT #1,speed charge is blocked",5,8,12); 
;;;481    			snmp_bat_flag_puts[0]|=0x0100;
;;;482    			}
;;;483    		}
;;;484    	else 
;;;485    		{
;;;486    		snmp_bat_flag[0]&=~0x0100;
;;;487    		if(snmp_bat_flag_puts[0]&0x0100) 
;;;488    			{
;;;489    			snmp_trap_send("BAT #1,speed charge is unblocked",5,8,13);
;;;490    			snmp_bat_flag_puts[0]&=~0x0100;
;;;491    			} 
;;;492    		}
;;;493    
;;;494    	if(vz1_stat!=vz1sOFF)								//Уравнительный заряд 
;;;495    		{
;;;496    		snmp_bat_flag[0]|=0x0200;
;;;497    		if((snmp_bat_flag_puts[0]&0x0200)==0) 
;;;498    			{
;;;499    			snmp_trap_send("BAT #1,equalising charge is on",5,8,14); 
;;;500    			snmp_bat_flag_puts[0]|=0x0200;
;;;501    			}
;;;502    		}
;;;503    	else 
;;;504    		{
;;;505    		snmp_bat_flag[0]&=~0x0200;
;;;506    		if(snmp_bat_flag_puts[0]&0x0200) 
;;;507    			{
;;;508    			snmp_trap_send("BAT #1,equalising charge is off",5,8,15);
;;;509    			snmp_bat_flag_puts[0]&=~0x0200;
;;;510    			}
;;;511    		}
;;;512    
;;;513    	if(vz1_error)										//Уравнительный заряд заблокирован по вентиляции 
;;;514    		{
;;;515    		snmp_bat_flag[0]|=0x0400;
;;;516    		if((snmp_bat_flag_puts[0]&0x0400)==0) 
;;;517    			{
;;;518    			snmp_trap_send("BAT #1,equalising charge is blocked",5,8,16); 
;;;519    			snmp_bat_flag_puts[0]|=0x0400;
;;;520    			}
;;;521    		}
;;;522    	else 
;;;523    		{
;;;524    		snmp_bat_flag[0]&=~0x0400;
;;;525    		if(snmp_bat_flag_puts[0]&0x0400) 
;;;526    			{
;;;527    			snmp_trap_send("BAT #1,equalising charge is unblocked",5,8,17);
;;;528    			snmp_bat_flag_puts[0]&=~0x0400;
;;;529    			} 
;;;530    		}
;;;531    
;;;532    	if(vz2_stat!=vz2sOFF)								//Формовочный заряд 
;;;533    		{
;;;534    		snmp_bat_flag[0]|=0x0800;
;;;535    		if((snmp_bat_flag_puts[0]&0x0800)==0) 
;;;536    			{
;;;537    			snmp_trap_send("BAT #1,molding charge is on",5,8,18); 
;;;538    			snmp_bat_flag_puts[0]|=0x0800;
;;;539    			}
;;;540    		}
;;;541    	else 
;;;542    		{
;;;543    		snmp_bat_flag[0]&=~0x0800;
;;;544    		if(snmp_bat_flag_puts[0]&0x0800) 
;;;545    			{
;;;546    			snmp_trap_send("BAT #1,molding charge is off",5,8,19);
;;;547    			snmp_bat_flag_puts[0]&=~0x0800;
;;;548    			}
;;;549    		}
;;;550    
;;;551    	if(vz2_error) 										//Формовочный заряд заблокирован по вентиляции
;;;552    		{
;;;553    		snmp_bat_flag[0]|=0x1000;
;;;554    		if((snmp_bat_flag_puts[0]&0x1000)==0) 
;;;555    			{
;;;556    			snmp_trap_send("BAT #1,molding charge is blocked",5,8,20); 
;;;557    			snmp_bat_flag_puts[0]|=0x1000;
;;;558    			}
;;;559    		}
;;;560    	else 
;;;561    		{
;;;562    		snmp_bat_flag[0]&=~0x1000;
;;;563    		if(snmp_bat_flag_puts[0]&0x1000) 
;;;564    			{
;;;565    			snmp_trap_send("BAT #1,molding charge is unblocked",5,8,21);
;;;566    			snmp_bat_flag_puts[0]&=~0x1000;
;;;567    			} 
;;;568    		}
;;;569    	}
;;;570    else 
;;;571    	{
;;;572    	snmp_bat_flag[0]=0; 
;;;573    	snmp_bat_flag_puts[0]=0;
;;;574    	}
;;;575    
;;;576    if(!snmp_bat_status[1])	 			//Батарея №2
;;;577    	{
;;;578    	if((bat[1]._Ub<(USIGN*10)))		//Снижение напряжения батареи ниже Uбсигн 
;;;579    		{
;;;580    		snmp_bat_flag[1]|=0x0001; 
;;;581    		if((snmp_bat_flag_puts[1]&0x0001)==0) 
;;;582    			{
;;;583    			snmp_trap_send("BAT #2 Alarm, battery is low",5,8,22); 
;;;584    			snmp_bat_flag_puts[1]|=0x0001;
;;;585    			}
;;;586    		}
;;;587    	else 
;;;588    		{
;;;589    		snmp_bat_flag[1]&=~0x0001; 
;;;590    		if(snmp_bat_flag_puts[1]&0x0001) 
;;;591    			{
;;;592    			snmp_trap_send("BAT #2 Alarm clear, battery is not low",5,8,23);
;;;593    			snmp_bat_flag_puts[1]&=~0x0001;
;;;594    			}
;;;595    		}
;;;596    
;;;597    	if(bat[1]._temper_stat&0x01)	//Повышенная температура батареи, первый порог - предупреждение
;;;598    		{
;;;599    		snmp_bat_flag[1]|=0x0002;
;;;600    		if((snmp_bat_flag_puts[0]&0x0002)==0) 
;;;601    			{
;;;602    			//snmp_trap_send("BAT #2 Warning, high battery temperature",5,8,24); 
;;;603    			snmp_bat_flag_puts[1]|=0x0002;
;;;604    			}
;;;605    		}
;;;606    	else 
;;;607    		{
;;;608    		snmp_bat_flag[1]&=~0x0002;
;;;609    		if(snmp_bat_flag_puts[1]&0x0002) 
;;;610    			{
;;;611    			//snmp_trap_send("BAT #2 Warning clear, battery temperature is normal",5,8,25);
;;;612    			snmp_bat_flag_puts[1]&=~0x02;
;;;613    			}
;;;614    		}
;;;615    
;;;616    	if(bat[1]._temper_stat&0x02)  	//Повышенная температура батареи, второй порог - авария
;;;617    		{
;;;618    		snmp_bat_flag[1]|=0x0004;
;;;619    		if((snmp_bat_flag_puts[1]&0x0004)==0) 
;;;620    			{
;;;621    			//snmp_trap_send("BAT #2 Alarm, high battery temperature",5,8,26); 
;;;622    			snmp_bat_flag_puts[1]|=0x0004;
;;;623    			}
;;;624    		}
;;;625    	else 
;;;626    		{
;;;627    		snmp_bat_flag[1]&=~0x0004;
;;;628    		if(snmp_bat_flag_puts[1]&0x0004) 
;;;629    			{
;;;630    			//snmp_trap_send("BAT #2 Alarm clear, battery temperature is normal",5,8,27);
;;;631    			snmp_bat_flag_puts[1]&=~0x0004;
;;;632    			}
;;;633    		}
;;;634    
;;;635    	if(bat[1]._Ib<(-IKB)) snmp_bat_flag[1]|=0x0008;		//Разряд батареи
;;;636    	else if(bat[1]._Ib>IKB) snmp_bat_flag[1]&=~0x0008;	//Заряд батареи
;;;637    
;;;638    	if((spc_stat==spcKE)&&(spc_bat==0))					//Контроль емкости батареи №1 
;;;639    		{
;;;640    		snmp_bat_flag[1]|=0x0010;
;;;641    		if((snmp_bat_flag_puts[1]&0x0010)==0) 
;;;642    			{
;;;643    			snmp_trap_send("BAT #2, capacity test started",5,8,28); 
;;;644    			snmp_bat_flag_puts[1]|=0x0010;
;;;645    			}
;;;646    		}
;;;647    	else 
;;;648    		{
;;;649    		snmp_bat_flag[1]&=~0x0010;
;;;650    		if(snmp_bat_flag_puts[1]&0x0010) 
;;;651    			{
;;;652    			snmp_trap_send("BAT #2, capacity test stopped",5,8,29);
;;;653    			snmp_bat_flag_puts[1]&=~0x0010;
;;;654    			}
;;;655    		}
;;;656    		
;;;657    	if(spc_stat==spcVZ)									//Выравнивающий заряд 
;;;658    		{
;;;659    		snmp_bat_flag[1]|=0x0020;
;;;660    		if((snmp_bat_flag_puts[1]&0x0020)==0) 
;;;661    			{
;;;662    			snmp_trap_send("BAT #2,leveling charge is started",5,8,30); 
;;;663    			snmp_bat_flag_puts[1]|=0x0020;
;;;664    			}
;;;665    		}
;;;666    	else 
;;;667    		{
;;;668    		snmp_bat_flag[1]&=~0x0020;
;;;669    		if(snmp_bat_flag_puts[1]&0x0020) 
;;;670    			{
;;;671    			snmp_trap_send("BAT #2,leveling charge is stopped",5,8,31);
;;;672    			snmp_bat_flag_puts[1]&=~0x0020;
;;;673    			}
;;;674    		}
;;;675    
;;;676    	if(vz_error)										 //Выравнивающий заряд заблокирован по вентиляции
;;;677    		{
;;;678    		snmp_bat_flag[1]|=0x0040;
;;;679    		if((snmp_bat_flag_puts[1]&0x0040)==0) 
;;;680    			{
;;;681    			snmp_trap_send("BAT #2,leveling charge is blocked",5,8,32); 
;;;682    			snmp_bat_flag_puts[1]|=0x0040;
;;;683    			}
;;;684    		}
;;;685    	else 
;;;686    		{
;;;687    		snmp_bat_flag[1]&=~0x0040;
;;;688    		if(snmp_bat_flag_puts[1]&0x0040) 
;;;689    			{
;;;690    			snmp_trap_send("BAT #2,leveling charge is unblocked",5,8,33);
;;;691    			snmp_bat_flag_puts[1]&=~0x0040;
;;;692    			} 
;;;693    		}
;;;694    
;;;695    	if(sp_ch_stat==scsWRK) 								//Ускореннный заряд
;;;696    		{
;;;697    		snmp_bat_flag[1]|=0x0080;
;;;698    		if((snmp_bat_flag_puts[1]&0x0080)==0) 
;;;699    			{
;;;700    			snmp_trap_send("BAT #2,speed charge is started",5,8,34); 
;;;701    			snmp_bat_flag_puts[1]|=0x0080;
;;;702    			}
;;;703    		}
;;;704    	else 
;;;705    		{
;;;706    		snmp_bat_flag[1]&=~0x0080;
;;;707    		if(snmp_bat_flag_puts[1]&0x0080) 
;;;708    			{
;;;709    			snmp_trap_send("BAT #2,speed charge is stopped",5,8,35);
;;;710    			snmp_bat_flag_puts[1]&=~0x0080;
;;;711    			}
;;;712    		}
;;;713    
;;;714    	if(sp_ch_error) 									//Ускореннный заряд заблокирован по вентиляции
;;;715    		{
;;;716    		snmp_bat_flag[1]|=0x0100;
;;;717    		if((snmp_bat_flag_puts[1]&0x0100)==0) 
;;;718    			{
;;;719    			snmp_trap_send("BAT #2,speed charge is blocked",5,8,36); 
;;;720    			snmp_bat_flag_puts[1]|=0x0100;
;;;721    			}
;;;722    		}
;;;723    	else 
;;;724    		{
;;;725    		snmp_bat_flag[1]&=~0x0100;
;;;726    		if(snmp_bat_flag_puts[1]&0x0100) 
;;;727    			{
;;;728    			snmp_trap_send("BAT #2,speed charge is unblocked",5,8,37);
;;;729    			snmp_bat_flag_puts[1]&=~0x0100;
;;;730    			} 
;;;731    		}
;;;732    
;;;733    	if(vz1_stat!=vz1sOFF)								//Уравнительный заряд 
;;;734    		{
;;;735    		snmp_bat_flag[1]|=0x0200;
;;;736    		if((snmp_bat_flag_puts[1]&0x0200)==0) 
;;;737    			{
;;;738    			snmp_trap_send("BAT #2,equalising charge is on",5,8,38); 
;;;739    			snmp_bat_flag_puts[1]|=0x0200;
;;;740    			}
;;;741    		}
;;;742    	else 
;;;743    		{
;;;744    		snmp_bat_flag[1]&=~0x0200;
;;;745    		if(snmp_bat_flag_puts[1]&0x0200) 
;;;746    			{
;;;747    			snmp_trap_send("BAT #2,equalising charge is off",5,8,39);
;;;748    			snmp_bat_flag_puts[1]&=~0x0200;
;;;749    			}
;;;750    		}
;;;751    
;;;752    	if(vz1_error)										//Уравнительный заряд заблокирован по вентиляции 
;;;753    		{
;;;754    		snmp_bat_flag[1]|=0x0400;
;;;755    		if((snmp_bat_flag_puts[1]&0x0400)==0) 
;;;756    			{
;;;757    			snmp_trap_send("BAT #2,equalising charge is blocked",5,8,40); 
;;;758    			snmp_bat_flag_puts[1]|=0x0400;
;;;759    			}
;;;760    		}
;;;761    	else 
;;;762    		{
;;;763    		snmp_bat_flag[1]&=~0x0400;
;;;764    		if(snmp_bat_flag_puts[1]&0x0400) 
;;;765    			{
;;;766    			snmp_trap_send("BAT #2,equalising charge is unblocked",5,8,41);
;;;767    			snmp_bat_flag_puts[1]&=~0x0400;
;;;768    			} 
;;;769    		}
;;;770    
;;;771    	if(vz2_stat!=vz2sOFF)								//Формовочный заряд 
;;;772    		{
;;;773    		snmp_bat_flag[1]|=0x0800;
;;;774    		if((snmp_bat_flag_puts[1]&0x0800)==0) 
;;;775    			{
;;;776    			snmp_trap_send("BAT #2,molding charge is on",5,8,42); 
;;;777    			snmp_bat_flag_puts[1]|=0x0800;
;;;778    			}
;;;779    		}
;;;780    	else 
;;;781    		{
;;;782    		snmp_bat_flag[1]&=~0x0800;
;;;783    		if(snmp_bat_flag_puts[1]&0x0800) 
;;;784    			{
;;;785    			snmp_trap_send("BAT #2,molding charge is off",5,8,43);
;;;786    			snmp_bat_flag_puts[1]&=~0x0800;
;;;787    			}
;;;788    		}
;;;789    
;;;790    	if(vz2_error) 										//Формовочный заряд заблокирован по вентиляции
;;;791    		{
;;;792    		snmp_bat_flag[1]|=0x1000;
;;;793    		if((snmp_bat_flag_puts[1]&0x1000)==0) 
;;;794    			{
;;;795    			snmp_trap_send("BAT #2,molding charge is blocked",5,8,44); 
;;;796    			snmp_bat_flag_puts[1]|=0x1000;
;;;797    			}
;;;798    		}
;;;799    	else 
;;;800    		{
;;;801    		snmp_bat_flag[1]&=~0x1000;
;;;802    		if(snmp_bat_flag_puts[1]&0x1000) 
;;;803    			{
;;;804    			snmp_trap_send("BAT #2,molding charge is unblocked",5,8,45);
;;;805    			snmp_bat_flag_puts[1]&=~0x1000;
;;;806    			} 
;;;807    		}
;;;808    	}
;;;809    else 
;;;810    	{
;;;811    	snmp_bat_flag[1]=0; 
;;;812    	snmp_bat_flag_puts[1]=0;
;;;813    	}
;;;814    /*
;;;815    if(!snmp_bat_status[1])
;;;816    	{
;;;817    	if((bat[1]._Ub<(USIGN*10))) 
;;;818    		{
;;;819    		snmp_bat_flag[1]|=0x01; 
;;;820    		if((snmp_bat_flag_puts[1]&0x01)==0) 
;;;821    			{
;;;822    			snmp_trap_send("BAT #2 Alarm, battery is low",5,8,0); 
;;;823    			snmp_bat_flag_puts[1]|=0x01;
;;;824    			}
;;;825    		}
;;;826    	else 
;;;827    		{
;;;828    		snmp_bat_flag[1]&=~0x01; 
;;;829    		if(snmp_bat_flag_puts[1]&0x01) 
;;;830    			{
;;;831    			snmp_trap_send("BAT #2 Alarm clear, battery is not low",5,8,1);
;;;832    			snmp_bat_flag_puts[1]&=~0x01;
;;;833    			}
;;;834    		}
;;;835    	if(bat[1]._temper_stat&0x01) 
;;;836    		{
;;;837    		snmp_bat_flag[1]|=0x02;
;;;838    		if((snmp_bat_flag_puts[1]&0x02)==0) 
;;;839    			{
;;;840    			snmp_trap_send("BAT #2 Alarm, high battery temperature",5,8,2); 
;;;841    			snmp_bat_flag_puts[1]|=0x02;
;;;842    			}
;;;843    		}
;;;844    	else 
;;;845    		{
;;;846    		snmp_bat_flag[1]&=~0x02;
;;;847    		if(snmp_bat_flag_puts[1]&0x02) 
;;;848    			{
;;;849    			snmp_trap_send("BAT #2 Alarm clear, battery temperature is normal",5,8,3);
;;;850    			snmp_bat_flag_puts[1]&=~0x02;
;;;851    			}
;;;852    		}
;;;853    	if(bat[1]._temper_stat&0x02) 
;;;854    		{
;;;855    		snmp_bat_flag[1]|=0x04;
;;;856    		if((snmp_bat_flag_puts[1]&0x04)==0) 
;;;857    			{
;;;858    			snmp_trap_send("BAT #2 Alarm, maximum battery temperature",5,8,4); 
;;;859    			snmp_bat_flag_puts[1]|=0x04;
;;;860    			}
;;;861    		}
;;;862    	else 
;;;863    		{
;;;864    		snmp_bat_flag[1]&=~0x04;
;;;865    		if(snmp_bat_flag_puts[1]&0x04) 
;;;866    			{
;;;867    			snmp_trap_send("BAT #2 Alarm clear, battery temperature is normal",5,8,5);
;;;868    			snmp_bat_flag_puts[1]&=~0x04;
;;;869    			}
;;;870    		}
;;;871    		
;;;872    	if(bat[1]._Ib<(-IKB))	snmp_bat_flag[1]|=0x80;
;;;873    	else if(bat[1]._Ib>IKB)snmp_bat_flag[1]&=~0x80;
;;;874    
;;;875    	if((spc_stat==spcKE)&&(spc_bat==1)) 
;;;876    		{
;;;877    		snmp_bat_flag[1]|=0x10;
;;;878    		if((snmp_bat_flag_puts[1]&0x10)==0) 
;;;879    			{
;;;880    			snmp_trap_send("BAT #2, capacity check enabled",5,8,6); 
;;;881    			snmp_bat_flag_puts[1]|=0x10;
;;;882    			}
;;;883    		}
;;;884    	else 
;;;885    		{
;;;886    		snmp_bat_flag[1]&=~0x10;
;;;887    		if(snmp_bat_flag_puts[1]&0x10) 
;;;888    			{
;;;889    			snmp_trap_send("BAT #2, capacity check disabled",5,8,7);
;;;890    			snmp_bat_flag_puts[1]&=~0x10;
;;;891    			}
;;;892    		}
;;;893    		
;;;894    	if(spc_stat==spcVZ) 
;;;895    		{
;;;896    		snmp_bat_flag[1]|=0x20;
;;;897    		if((snmp_bat_flag_puts[1]&0x20)==0) 
;;;898    			{
;;;899    			snmp_trap_send("BAT #2,equalizing charge is on",5,8,8); 
;;;900    			snmp_bat_flag_puts[1]|=0x20;
;;;901    			}
;;;902    		}
;;;903    	else 
;;;904    		{
;;;905    		snmp_bat_flag[1]&=~0x20;
;;;906    		if(snmp_bat_flag_puts[1]&0x20) 
;;;907    			{
;;;908    			snmp_trap_send("BAT #2,equalizing charge is off",5,8,9);
;;;909    			snmp_bat_flag_puts[1]&=~0x20;
;;;910    			}
;;;911    		}
;;;912    
;;;913    	if(vz_error) 
;;;914    		{
;;;915    		snmp_bat_flag[1]|=0x40;
;;;916    		if((snmp_bat_flag_puts[1]&0x40)==0) 
;;;917    			{
;;;918    			snmp_trap_send("BAT #2,equalizing charge blocked",5,8,10); 
;;;919    			snmp_bat_flag_puts[1]|=0x40;
;;;920    			}
;;;921    		}
;;;922    	else 
;;;923    		{
;;;924    		snmp_bat_flag[1]&=~0x40;
;;;925    		if(snmp_bat_flag_puts[1]&0x40) 
;;;926    			{
;;;927    			snmp_trap_send("BAT #2,equalizing charge is not blocked",5,8,11);
;;;928    			snmp_bat_flag_puts[1]&=~0x40;
;;;929    			} 
;;;930    		}
;;;931       }
;;;932    else 
;;;933    	{
;;;934    	snmp_bat_flag[1]=0; 
;;;935    	snmp_bat_flag_puts[1]=0;
;;;936    	} */
;;;937    }
;;;938    
                          ENDP

                  |L2.12|
                          DCD      ||area_number.25||

                          AREA ||area_number.3||, CODE, READONLY, ALIGN=2

                          EXPORTAS ||area_number.3||, ||.text||
                  adc_drv6 PROC
;;;326    // заполнение флагов для АКБ
;;;327    void bat_flag (void)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;328    {  
;;;329    if(spc_stat!=spcVZ) 
000004  4c82              LDR      r4,|L3.528|
;;;330    	{
;;;331    	vz_error=0;
000006  8860              LDRH     r0,[r4,#2]  ; adc_self_ch_buff
000008  8821              LDRH     r1,[r4,#0]            ;329  ; adc_self_ch_buff
00000a  1a40              SUBS     r0,r0,r1              ;329
00000c  b200              SXTH     r0,r0                 ;329
00000e  f7fffffe          BL       abs_pal
;;;332    	sp_ch_error=0;
000012  1da5              ADDS     r5,r4,#6
;;;333    	vz1_error=0;
000014  8028              STRH     r0,[r5,#0]
;;;334    	vz2_error=0;
000016  88a0              LDRH     r0,[r4,#4]  ; adc_self_ch_buff
;;;335    	}
;;;336    
;;;337    if(!snmp_bat_status[0])	 			//Батарея №1
000018  8861              LDRH     r1,[r4,#2]  ; adc_self_ch_buff
00001a  1a40              SUBS     r0,r0,r1
;;;338    	{
;;;339    	if((bat[0]._Ub<(USIGN*10)))		//Снижение напряжения батареи ниже Uбсигн 
00001c  b200              SXTH     r0,r0
00001e  f7fffffe          BL       abs_pal
000022  8068              STRH     r0,[r5,#2]
000024  88a0              LDRH     r0,[r4,#4]            ;337  ; adc_self_ch_buff
000026  8821              LDRH     r1,[r4,#0]            ;337  ; adc_self_ch_buff
;;;340    		{
;;;341    		snmp_bat_flag[0]|=0x0001; 
;;;342    		if((snmp_bat_flag_puts[0]&0x0001)==0) 
;;;343    			{
;;;344    			snmp_trap_send("BAT #1 Alarm, battery is low",5,8,0); 
;;;345    			snmp_bat_flag_puts[0]|=0x0001;
;;;346    			}
;;;347    		}
;;;348    	else 
;;;349    		{
;;;350    		snmp_bat_flag[0]&=~0x0001; 
;;;351    		if(snmp_bat_flag_puts[0]&0x0001) 
;;;352    			{
;;;353    			snmp_trap_send("BAT #1 Alarm clear, battery is not low",5,8,1);
;;;354    			snmp_bat_flag_puts[0]&=~0x0001;
;;;355    			}
;;;356    		}
;;;357    
;;;358    	if(bat[0]._temper_stat&0x01)	//Повышенная температура батареи, первый порог - предупреждение
;;;359    		{
;;;360    		snmp_bat_flag[0]|=0x0002;
;;;361    		if((snmp_bat_flag_puts[0]&0x0002)==0) 
;;;362    			{
;;;363    			//snmp_trap_send("BAT #1 Warning, high battery temperature",5,8,2); 
;;;364    			snmp_bat_flag_puts[0]|=0x0002;
;;;365    			}
;;;366    		}
;;;367    	else 
;;;368    		{
;;;369    		snmp_bat_flag[0]&=~0x0002;
;;;370    		if(snmp_bat_flag_puts[0]&0x0002) 
;;;371    			{
;;;372    			//snmp_trap_send("BAT #1 Warning clear, battery temperature is normal",5,8,3);
;;;373    			snmp_bat_flag_puts[0]&=~0x02;
;;;374    			}
;;;375    		}
;;;376    
;;;377    	if(bat[0]._temper_stat&0x02)  	//Повышенная температура батареи, второй порог - авария
;;;378    		{
;;;379    		snmp_bat_flag[0]|=0x0004;
;;;380    		if((snmp_bat_flag_puts[0]&0x0004)==0) 
;;;381    			{
;;;382    			//snmp_trap_send("BAT #1 Alarm, high battery temperature",5,8,4); 
;;;383    			snmp_bat_flag_puts[0]|=0x0004;
;;;384    			}
;;;385    		}
;;;386    	else 
;;;387    		{
;;;388    		snmp_bat_flag[0]&=~0x0004;
;;;389    		if(snmp_bat_flag_puts[0]&0x0004) 
;;;390    			{
;;;391    			//snmp_trap_send("BAT #1 Alarm clear, battery temperature is normal",5,8,5);
;;;392    			snmp_bat_flag_puts[0]&=~0x0004;
;;;393    			}
;;;394    		}
;;;395    
;;;396    	if(bat[0]._Ib<(-IKB)) snmp_bat_flag[0]|=0x0008;		//Разряд батареи
000028  1a40              SUBS     r0,r0,r1
00002a  b200              SXTH     r0,r0
00002c  f7fffffe          BL       abs_pal
000030  80a8              STRH     r0,[r5,#4]            ;337
;;;397    	else if(bat[0]._Ib>IKB) snmp_bat_flag[0]&=~0x0008;	//Заряд батареи
;;;398    
;;;399    	if((spc_stat==spcKE)&&(spc_bat==0))					//Контроль емкости батареи №1 
;;;400    		{
;;;401    		snmp_bat_flag[0]|=0x0010;
;;;402    		if((snmp_bat_flag_puts[0]&0x0010)==0) 
;;;403    			{
;;;404    			snmp_trap_send("BAT #1, capacity test started",5,8,6); 
;;;405    			snmp_bat_flag_puts[0]|=0x0010;
;;;406    			}
;;;407    		}
;;;408    	else 
;;;409    		{
;;;410    		snmp_bat_flag[0]&=~0x0010;
;;;411    		if(snmp_bat_flag_puts[0]&0x0010) 
;;;412    			{
;;;413    			snmp_trap_send("BAT #1, capacity test stopped",5,8,7);
;;;414    			snmp_bat_flag_puts[0]&=~0x0010;
;;;415    			}
;;;416    		}
;;;417    		
;;;418    	if(spc_stat==spcVZ)									//Выравнивающий заряд 
;;;419    		{
;;;420    		snmp_bat_flag[0]|=0x0020;
;;;421    		if((snmp_bat_flag_puts[0]&0x0020)==0) 
;;;422    			{
;;;423    			snmp_trap_send("BAT #1,leveling charge is started",5,8,8); 
;;;424    			snmp_bat_flag_puts[0]|=0x0020;
;;;425    			}
;;;426    		}
;;;427    	else 
;;;428    		{
;;;429    		snmp_bat_flag[0]&=~0x0020;
;;;430    		if(snmp_bat_flag_puts[0]&0x0020) 
;;;431    			{
;;;432    			snmp_trap_send("BAT #1,leveling charge is stopped",5,8,9);
;;;433    			snmp_bat_flag_puts[0]&=~0x0020;
;;;434    			}
;;;435    		}
;;;436    
;;;437    	if(vz_error)										 //Выравнивающий заряд заблокирован по вентиляции
;;;438    		{
;;;439    		snmp_bat_flag[0]|=0x0040;
;;;440    		if((snmp_bat_flag_puts[0]&0x0040)==0) 
;;;441    			{
;;;442    			snmp_trap_send("BAT #1,leveling charge is blocked",5,8,10); 
;;;443    			snmp_bat_flag_puts[0]|=0x0040;
;;;444    			}
;;;445    		}
;;;446    	else 
;;;447    		{
;;;448    		snmp_bat_flag[0]&=~0x0040;
;;;449    		if(snmp_bat_flag_puts[0]&0x0040) 
;;;450    			{
;;;451    			snmp_trap_send("BAT #1,leveling charge is unblocked",5,8,11);
;;;452    			snmp_bat_flag_puts[0]&=~0x0040;
;;;453    			} 
;;;454    		}
;;;455    
;;;456    	if(sp_ch_stat==scsWRK) 								//Ускореннный заряд
;;;457    		{
;;;458    		snmp_bat_flag[0]|=0x0080;
;;;459    		if((snmp_bat_flag_puts[0]&0x0080)==0) 
;;;460    			{
;;;461    			snmp_trap_send("BAT #1,speed charge is started",5,8,10); 
;;;462    			snmp_bat_flag_puts[0]|=0x0080;
;;;463    			}
;;;464    		}
;;;465    	else 
;;;466    		{
;;;467    		snmp_bat_flag[0]&=~0x0080;
;;;468    		if(snmp_bat_flag_puts[0]&0x0080) 
;;;469    			{
;;;470    			snmp_trap_send("BAT #1,speed charge is stopped",5,8,11);
;;;471    			snmp_bat_flag_puts[0]&=~0x0080;
;;;472    			}
;;;473    		}
;;;474    
;;;475    	if(sp_ch_error) 									//Ускореннный заряд заблокирован по вентиляции
;;;476    		{
;;;477    		snmp_bat_flag[0]|=0x0100;
;;;478    		if((snmp_bat_flag_puts[0]&0x0100)==0) 
;;;479    			{
;;;480    			snmp_trap_send("BAT #1,speed charge is blocked",5,8,12); 
;;;481    			snmp_bat_flag_puts[0]|=0x0100;
;;;482    			}
;;;483    		}
;;;484    	else 
;;;485    		{
;;;486    		snmp_bat_flag[0]&=~0x0100;
;;;487    		if(snmp_bat_flag_puts[0]&0x0100) 
;;;488    			{
;;;489    			snmp_trap_send("BAT #1,speed charge is unblocked",5,8,13);
;;;490    			snmp_bat_flag_puts[0]&=~0x0100;
;;;491    			} 
;;;492    		}
;;;493    
;;;494    	if(vz1_stat!=vz1sOFF)								//Уравнительный заряд 
;;;495    		{
;;;496    		snmp_bat_flag[0]|=0x0200;
;;;497    		if((snmp_bat_flag_puts[0]&0x0200)==0) 
;;;498    			{
;;;499    			snmp_trap_send("BAT #1,equalising charge is on",5,8,14); 
;;;500    			snmp_bat_flag_puts[0]|=0x0200;
;;;501    			}
;;;502    		}
;;;503    	else 
;;;504    		{
;;;505    		snmp_bat_flag[0]&=~0x0200;
;;;506    		if(snmp_bat_flag_puts[0]&0x0200) 
;;;507    			{
;;;508    			snmp_trap_send("BAT #1,equalising charge is off",5,8,15);
;;;509    			snmp_bat_flag_puts[0]&=~0x0200;
;;;510    			}
;;;511    		}
;;;512    
;;;513    	if(vz1_error)										//Уравнительный заряд заблокирован по вентиляции 
;;;514    		{
;;;515    		snmp_bat_flag[0]|=0x0400;
;;;516    		if((snmp_bat_flag_puts[0]&0x0400)==0) 
;;;517    			{
;;;518    			snmp_trap_send("BAT #1,equalising charge is blocked",5,8,16); 
;;;519    			snmp_bat_flag_puts[0]|=0x0400;
;;;520    			}
;;;521    		}
;;;522    	else 
;;;523    		{
;;;524    		snmp_bat_flag[0]&=~0x0400;
;;;525    		if(snmp_bat_flag_puts[0]&0x0400) 
;;;526    			{
;;;527    			snmp_trap_send("BAT #1,equalising charge is unblocked",5,8,17);
;;;528    			snmp_bat_flag_puts[0]&=~0x0400;
;;;529    			} 
;;;530    		}
;;;531    
;;;532    	if(vz2_stat!=vz2sOFF)								//Формовочный заряд 
;;;533    		{
;;;534    		snmp_bat_flag[0]|=0x0800;
;;;535    		if((snmp_bat_flag_puts[0]&0x0800)==0) 
;;;536    			{
;;;537    			snmp_trap_send("BAT #1,molding charge is on",5,8,18); 
;;;538    			snmp_bat_flag_puts[0]|=0x0800;
;;;539    			}
;;;540    		}
;;;541    	else 
;;;542    		{
;;;543    		snmp_bat_flag[0]&=~0x0800;
;;;544    		if(snmp_bat_flag_puts[0]&0x0800) 
;;;545    			{
;;;546    			snmp_trap_send("BAT #1,molding charge is off",5,8,19);
;;;547    			snmp_bat_flag_puts[0]&=~0x0800;
;;;548    			}
;;;549    		}
;;;550    
;;;551    	if(vz2_error) 										//Формовочный заряд заблокирован по вентиляции
;;;552    		{
;;;553    		snmp_bat_flag[0]|=0x1000;
;;;554    		if((snmp_bat_flag_puts[0]&0x1000)==0) 
;;;555    			{
;;;556    			snmp_trap_send("BAT #1,molding charge is blocked",5,8,20); 
;;;557    			snmp_bat_flag_puts[0]|=0x1000;
;;;558    			}
;;;559    		}
;;;560    	else 
;;;561    		{
;;;562    		snmp_bat_flag[0]&=~0x1000;
;;;563    		if(snmp_bat_flag_puts[0]&0x1000) 
;;;564    			{
;;;565    			snmp_trap_send("BAT #1,molding charge is unblocked",5,8,21);
;;;566    			snmp_bat_flag_puts[0]&=~0x1000;
;;;567    			} 
;;;568    		}
;;;569    	}
;;;570    else 
;;;571    	{
;;;572    	snmp_bat_flag[0]=0; 
000032  f44f7196          MOV      r1,#0x12c
;;;573    	snmp_bat_flag_puts[0]=0;
;;;574    	}
;;;575    
;;;576    if(!snmp_bat_status[1])	 			//Батарея №2
000036  f1a406f2          SUB      r6,r4,#0xf2
00003a  4288              CMP      r0,r1
00003c  da02              BGE      |L3.68|
;;;577    	{
;;;578    	if((bat[1]._Ub<(USIGN*10)))		//Снижение напряжения батареи ниже Uбсигн 
;;;579    		{
;;;580    		snmp_bat_flag[1]|=0x0001; 
;;;581    		if((snmp_bat_flag_puts[1]&0x0001)==0) 
;;;582    			{
;;;583    			snmp_trap_send("BAT #2 Alarm, battery is low",5,8,22); 
;;;584    			snmp_bat_flag_puts[1]|=0x0001;
;;;585    			}
;;;586    		}
;;;587    	else 
;;;588    		{
;;;589    		snmp_bat_flag[1]&=~0x0001; 
;;;590    		if(snmp_bat_flag_puts[1]&0x0001) 
;;;591    			{
;;;592    			snmp_trap_send("BAT #2 Alarm clear, battery is not low",5,8,23);
;;;593    			snmp_bat_flag_puts[1]&=~0x0001;
;;;594    			}
;;;595    		}
;;;596    
;;;597    	if(bat[1]._temper_stat&0x01)	//Повышенная температура батареи, первый порог - предупреждение
;;;598    		{
;;;599    		snmp_bat_flag[1]|=0x0002;
;;;600    		if((snmp_bat_flag_puts[0]&0x0002)==0) 
;;;601    			{
;;;602    			//snmp_trap_send("BAT #2 Warning, high battery temperature",5,8,24); 
;;;603    			snmp_bat_flag_puts[1]|=0x0002;
;;;604    			}
;;;605    		}
;;;606    	else 
;;;607    		{
;;;608    		snmp_bat_flag[1]&=~0x0002;
;;;609    		if(snmp_bat_flag_puts[1]&0x0002) 
;;;610    			{
;;;611    			//snmp_trap_send("BAT #2 Warning clear, battery temperature is normal",5,8,25);
;;;612    			snmp_bat_flag_puts[1]&=~0x02;
;;;613    			}
;;;614    		}
;;;615    
;;;616    	if(bat[1]._temper_stat&0x02)  	//Повышенная температура батареи, второй порог - авария
;;;617    		{
;;;618    		snmp_bat_flag[1]|=0x0004;
;;;619    		if((snmp_bat_flag_puts[1]&0x0004)==0) 
;;;620    			{
;;;621    			//snmp_trap_send("BAT #2 Alarm, high battery temperature",5,8,26); 
;;;622    			snmp_bat_flag_puts[1]|=0x0004;
;;;623    			}
;;;624    		}
;;;625    	else 
;;;626    		{
;;;627    		snmp_bat_flag[1]&=~0x0004;
;;;628    		if(snmp_bat_flag_puts[1]&0x0004) 
;;;629    			{
;;;630    			//snmp_trap_send("BAT #2 Alarm clear, battery temperature is normal",5,8,27);
;;;631    			snmp_bat_flag_puts[1]&=~0x0004;
;;;632    			}
;;;633    		}
;;;634    
;;;635    	if(bat[1]._Ib<(-IKB)) snmp_bat_flag[1]|=0x0008;		//Разряд батареи
;;;636    	else if(bat[1]._Ib>IKB) snmp_bat_flag[1]&=~0x0008;	//Заряд батареи
;;;637    
;;;638    	if((spc_stat==spcKE)&&(spc_bat==0))					//Контроль емкости батареи №1 
;;;639    		{
;;;640    		snmp_bat_flag[1]|=0x0010;
;;;641    		if((snmp_bat_flag_puts[1]&0x0010)==0) 
;;;642    			{
;;;643    			snmp_trap_send("BAT #2, capacity test started",5,8,28); 
;;;644    			snmp_bat_flag_puts[1]|=0x0010;
;;;645    			}
;;;646    		}
;;;647    	else 
;;;648    		{
;;;649    		snmp_bat_flag[1]&=~0x0010;
;;;650    		if(snmp_bat_flag_puts[1]&0x0010) 
;;;651    			{
;;;652    			snmp_trap_send("BAT #2, capacity test stopped",5,8,29);
;;;653    			snmp_bat_flag_puts[1]&=~0x0010;
;;;654    			}
;;;655    		}
;;;656    		
;;;657    	if(spc_stat==spcVZ)									//Выравнивающий заряд 
;;;658    		{
;;;659    		snmp_bat_flag[1]|=0x0020;
;;;660    		if((snmp_bat_flag_puts[1]&0x0020)==0) 
;;;661    			{
;;;662    			snmp_trap_send("BAT #2,leveling charge is started",5,8,30); 
;;;663    			snmp_bat_flag_puts[1]|=0x0020;
;;;664    			}
;;;665    		}
;;;666    	else 
;;;667    		{
;;;668    		snmp_bat_flag[1]&=~0x0020;
;;;669    		if(snmp_bat_flag_puts[1]&0x0020) 
;;;670    			{
;;;671    			snmp_trap_send("BAT #2,leveling charge is stopped",5,8,31);
;;;672    			snmp_bat_flag_puts[1]&=~0x0020;
;;;673    			}
;;;674    		}
;;;675    
;;;676    	if(vz_error)										 //Выравнивающий заряд заблокирован по вентиляции
;;;677    		{
;;;678    		snmp_bat_flag[1]|=0x0040;
;;;679    		if((snmp_bat_flag_puts[1]&0x0040)==0) 
;;;680    			{
;;;681    			snmp_trap_send("BAT #2,leveling charge is blocked",5,8,32); 
;;;682    			snmp_bat_flag_puts[1]|=0x0040;
;;;683    			}
;;;684    		}
;;;685    	else 
;;;686    		{
;;;687    		snmp_bat_flag[1]&=~0x0040;
;;;688    		if(snmp_bat_flag_puts[1]&0x0040) 
;;;689    			{
;;;690    			snmp_trap_send("BAT #2,leveling charge is unblocked",5,8,33);
;;;691    			snmp_bat_flag_puts[1]&=~0x0040;
;;;692    			} 
;;;693    		}
;;;694    
;;;695    	if(sp_ch_stat==scsWRK) 								//Ускореннный заряд
;;;696    		{
;;;697    		snmp_bat_flag[1]|=0x0080;
;;;698    		if((snmp_bat_flag_puts[1]&0x0080)==0) 
;;;699    			{
;;;700    			snmp_trap_send("BAT #2,speed charge is started",5,8,34); 
;;;701    			snmp_bat_flag_puts[1]|=0x0080;
;;;702    			}
;;;703    		}
;;;704    	else 
;;;705    		{
;;;706    		snmp_bat_flag[1]&=~0x0080;
;;;707    		if(snmp_bat_flag_puts[1]&0x0080) 
;;;708    			{
;;;709    			snmp_trap_send("BAT #2,speed charge is stopped",5,8,35);
;;;710    			snmp_bat_flag_puts[1]&=~0x0080;
;;;711    			}
;;;712    		}
;;;713    
;;;714    	if(sp_ch_error) 									//Ускореннный заряд заблокирован по вентиляции
;;;715    		{
;;;716    		snmp_bat_flag[1]|=0x0100;
;;;717    		if((snmp_bat_flag_puts[1]&0x0100)==0) 
;;;718    			{
;;;719    			snmp_trap_send("BAT #2,speed charge is blocked",5,8,36); 
;;;720    			snmp_bat_flag_puts[1]|=0x0100;
;;;721    			}
;;;722    		}
;;;723    	else 
;;;724    		{
;;;725    		snmp_bat_flag[1]&=~0x0100;
;;;726    		if(snmp_bat_flag_puts[1]&0x0100) 
;;;727    			{
;;;728    			snmp_trap_send("BAT #2,speed charge is unblocked",5,8,37);
;;;729    			snmp_bat_flag_puts[1]&=~0x0100;
;;;730    			} 
;;;731    		}
;;;732    
;;;733    	if(vz1_stat!=vz1sOFF)								//Уравнительный заряд 
;;;734    		{
;;;735    		snmp_bat_flag[1]|=0x0200;
;;;736    		if((snmp_bat_flag_puts[1]&0x0200)==0) 
;;;737    			{
;;;738    			snmp_trap_send("BAT #2,equalising charge is on",5,8,38); 
;;;739    			snmp_bat_flag_puts[1]|=0x0200;
;;;740    			}
;;;741    		}
;;;742    	else 
;;;743    		{
;;;744    		snmp_bat_flag[1]&=~0x0200;
;;;745    		if(snmp_bat_flag_puts[1]&0x0200) 
;;;746    			{
;;;747    			snmp_trap_send("BAT #2,equalising charge is off",5,8,39);
;;;748    			snmp_bat_flag_puts[1]&=~0x0200;
;;;749    			}
;;;750    		}
;;;751    
;;;752    	if(vz1_error)										//Уравнительный заряд заблокирован по вентиляции 
;;;753    		{
;;;754    		snmp_bat_flag[1]|=0x0400;
;;;755    		if((snmp_bat_flag_puts[1]&0x0400)==0) 
;;;756    			{
;;;757    			snmp_trap_send("BAT #2,equalising charge is blocked",5,8,40); 
;;;758    			snmp_bat_flag_puts[1]|=0x0400;
;;;759    			}
;;;760    		}
;;;761    	else 
;;;762    		{
;;;763    		snmp_bat_flag[1]&=~0x0400;
;;;764    		if(snmp_bat_flag_puts[1]&0x0400) 
;;;765    			{
;;;766    			snmp_trap_send("BAT #2,equalising charge is unblocked",5,8,41);
;;;767    			snmp_bat_flag_puts[1]&=~0x0400;
;;;768    			} 
;;;769    		}
;;;770    
;;;771    	if(vz2_stat!=vz2sOFF)								//Формовочный заряд 
;;;772    		{
;;;773    		snmp_bat_flag[1]|=0x0800;
;;;774    		if((snmp_bat_flag_puts[1]&0x0800)==0) 
;;;775    			{
;;;776    			snmp_trap_send("BAT #2,molding charge is on",5,8,42); 
;;;777    			snmp_bat_flag_puts[1]|=0x0800;
;;;778    			}
;;;779    		}
;;;780    	else 
;;;781    		{
;;;782    		snmp_bat_flag[1]&=~0x0800;
;;;783    		if(snmp_bat_flag_puts[1]&0x0800) 
;;;784    			{
;;;785    			snmp_trap_send("BAT #2,molding charge is off",5,8,43);
;;;786    			snmp_bat_flag_puts[1]&=~0x0800;
;;;787    			}
;;;788    		}
;;;789    
;;;790    	if(vz2_error) 										//Формовочный заряд заблокирован по вентиляции
;;;791    		{
;;;792    		snmp_bat_flag[1]|=0x1000;
;;;793    		if((snmp_bat_flag_puts[1]&0x1000)==0) 
;;;794    			{
;;;795    			snmp_trap_send("BAT #2,molding charge is blocked",5,8,44); 
;;;796    			snmp_bat_flag_puts[1]|=0x1000;
;;;797    			}
;;;798    		}
;;;799    	else 
;;;800    		{
;;;801    		snmp_bat_flag[1]&=~0x1000;
;;;802    		if(snmp_bat_flag_puts[1]&0x1000) 
;;;803    			{
;;;804    			snmp_trap_send("BAT #2,molding charge is unblocked",5,8,45);
;;;805    			snmp_bat_flag_puts[1]&=~0x1000;
;;;806    			} 
;;;807    		}
;;;808    	}
;;;809    else 
;;;810    	{
;;;811    	snmp_bat_flag[1]=0; 
00003e  88a0              LDRH     r0,[r4,#4]  ; adc_self_ch_buff
;;;812    	snmp_bat_flag_puts[1]=0;
000040  87b0              STRH     r0,[r6,#0x3c]
;;;813    	}
;;;814    /*
;;;815    if(!snmp_bat_status[1])
;;;816    	{
;;;817    	if((bat[1]._Ub<(USIGN*10))) 
;;;818    		{
;;;819    		snmp_bat_flag[1]|=0x01; 
;;;820    		if((snmp_bat_flag_puts[1]&0x01)==0) 
;;;821    			{
;;;822    			snmp_trap_send("BAT #2 Alarm, battery is low",5,8,0); 
;;;823    			snmp_bat_flag_puts[1]|=0x01;
;;;824    			}
;;;825    		}
;;;826    	else 
;;;827    		{
;;;828    		snmp_bat_flag[1]&=~0x01; 
;;;829    		if(snmp_bat_flag_puts[1]&0x01) 
;;;830    			{
;;;831    			snmp_trap_send("BAT #2 Alarm clear, battery is not low",5,8,1);
;;;832    			snmp_bat_flag_puts[1]&=~0x01;
;;;833    			}
;;;834    		}
;;;835    	if(bat[1]._temper_stat&0x01) 
;;;836    		{
;;;837    		snmp_bat_flag[1]|=0x02;
;;;838    		if((snmp_bat_flag_puts[1]&0x02)==0) 
;;;839    			{
;;;840    			snmp_trap_send("BAT #2 Alarm, high battery temperature",5,8,2); 
;;;841    			snmp_bat_flag_puts[1]|=0x02;
;;;842    			}
;;;843    		}
;;;844    	else 
;;;845    		{
;;;846    		snmp_bat_flag[1]&=~0x02;
;;;847    		if(snmp_bat_flag_puts[1]&0x02) 
;;;848    			{
;;;849    			snmp_trap_send("BAT #2 Alarm clear, battery temperature is normal",5,8,3);
;;;850    			snmp_bat_flag_puts[1]&=~0x02;
;;;851    			}
;;;852    		}
;;;853    	if(bat[1]._temper_stat&0x02) 
;;;854    		{
;;;855    		snmp_bat_flag[1]|=0x04;
;;;856    		if((snmp_bat_flag_puts[1]&0x04)==0) 
;;;857    			{
;;;858    			snmp_trap_send("BAT #2 Alarm, maximum battery temperature",5,8,4); 
;;;859    			snmp_bat_flag_puts[1]|=0x04;
;;;860    			}
;;;861    		}
;;;862    	else 
;;;863    		{
;;;864    		snmp_bat_flag[1]&=~0x04;
;;;865    		if(snmp_bat_flag_puts[1]&0x04) 
;;;866    			{
;;;867    			snmp_trap_send("BAT #2 Alarm clear, battery temperature is normal",5,8,5);
;;;868    			snmp_bat_flag_puts[1]&=~0x04;
;;;869    			}
;;;870    		}
;;;871    		
;;;872    	if(bat[1]._Ib<(-IKB))	snmp_bat_flag[1]|=0x80;
;;;873    	else if(bat[1]._Ib>IKB)snmp_bat_flag[1]&=~0x80;
;;;874    
;;;875    	if((spc_stat==spcKE)&&(spc_bat==1)) 
;;;876    		{
;;;877    		snmp_bat_flag[1]|=0x10;
;;;878    		if((snmp_bat_flag_puts[1]&0x10)==0) 
;;;879    			{
;;;880    			snmp_trap_send("BAT #2, capacity check enabled",5,8,6); 
;;;881    			snmp_bat_flag_puts[1]|=0x10;
;;;882    			}
;;;883    		}
;;;884    	else 
;;;885    		{
;;;886    		snmp_bat_flag[1]&=~0x10;
;;;887    		if(snmp_bat_flag_puts[1]&0x10) 
;;;888    			{
;;;889    			snmp_trap_send("BAT #2, capacity check disabled",5,8,7);
;;;890    			snmp_bat_flag_puts[1]&=~0x10;
;;;891    			}
;;;892    		}
;;;893    		
;;;894    	if(spc_stat==spcVZ) 
;;;895    		{
;;;896    		snmp_bat_flag[1]|=0x20;
;;;897    		if((snmp_bat_flag_puts[1]&0x20)==0) 
;;;898    			{
;;;899    			snmp_trap_send("BAT #2,equalizing charge is on",5,8,8); 
;;;900    			snmp_bat_flag_puts[1]|=0x20;
;;;901    			}
;;;902    		}
;;;903    	else 
;;;904    		{
;;;905    		snmp_bat_flag[1]&=~0x20;
;;;906    		if(snmp_bat_flag_puts[1]&0x20) 
;;;907    			{
;;;908    			snmp_trap_send("BAT #2,equalizing charge is off",5,8,9);
;;;909    			snmp_bat_flag_puts[1]&=~0x20;
;;;910    			}
;;;911    		}
;;;912    
;;;913    	if(vz_error) 
;;;914    		{
;;;915    		snmp_bat_flag[1]|=0x40;
;;;916    		if((snmp_bat_flag_puts[1]&0x40)==0) 
;;;917    			{
;;;918    			snmp_trap_send("BAT #2,equalizing charge blocked",5,8,10); 
;;;919    			snmp_bat_flag_puts[1]|=0x40;
;;;920    			}
;;;921    		}
;;;922    	else 
;;;923    		{
;;;924    		snmp_bat_flag[1]&=~0x40;
;;;925    		if(snmp_bat_flag_puts[1]&0x40) 
;;;926    			{
;;;927    			snmp_trap_send("BAT #2,equalizing charge is not blocked",5,8,11);
;;;928    			snmp_bat_flag_puts[1]&=~0x40;
;;;929    			} 
;;;930    		}
;;;931       }
;;;932    else 
;;;933    	{
;;;934    	snmp_bat_flag[1]=0; 
;;;935    	snmp_bat_flag_puts[1]=0;
;;;936    	} */
;;;937    }
000042  e00c              B        |L3.94|
                  |L3.68|
000044  f9b50002          LDRSH    r0,[r5,#2]  ; adc_self_ch_disp
000048  4288              CMP      r0,r1                 ;339
00004a  da02              BGE      |L3.82|
00004c  8860              LDRH     r0,[r4,#2]            ;339  ; adc_self_ch_buff
00004e  87b0              STRH     r0,[r6,#0x3c]         ;339
000050  e005              B        |L3.94|
                  |L3.82|
000052  f9b50000          LDRSH    r0,[r5,#0]            ;341  ; adc_self_ch_disp
000056  4288              CMP      r0,r1                 ;339
000058  da01              BGE      |L3.94|
00005a  8820              LDRH     r0,[r4,#0]            ;341  ; adc_self_ch_buff
00005c  87b0              STRH     r0,[r6,#0x3c]         ;342
                  |L3.94|
00005e  7c77              LDRB     r7,[r6,#0x11]         ;342  ; adc_ch_net
000060  2200              MOVS     r2,#0                 ;342
000062  b3ef              CBZ      r7,|L3.224|
000064  7d33              LDRB     r3,[r6,#0x14]         ;341  ; adc_window_flag
000066  486b              LDR      r0,|L3.532|
000068  b18b              CBZ      r3,|L3.142|
00006a  f9b6103c          LDRSH    r1,[r6,#0x3c]         ;342  ; adc_result
00006e  6804              LDR      r4,[r0,#0]            ;344  ; main_power_buffer
000070  eb0404a1          ADD      r4,r4,r1,ASR #2       ;344
000074  6004              STR      r4,[r0,#0]            ;344  ; main_power_buffer
000076  6844              LDR      r4,[r0,#4]            ;344  ; main_power_buffer
000078  eb0404a1          ADD      r4,r4,r1,ASR #2       ;344
00007c  6044              STR      r4,[r0,#4]            ;345  ; main_power_buffer
00007e  6884              LDR      r4,[r0,#8]            ;345  ; main_power_buffer
000080  eb0404a1          ADD      r4,r4,r1,ASR #2       ;345
000084  6084              STR      r4,[r0,#8]            ;350  ; main_power_buffer
000086  68c4              LDR      r4,[r0,#0xc]          ;350  ; main_power_buffer
000088  eb0401a1          ADD      r1,r4,r1,ASR #2       ;350
00008c  60c1              STR      r1,[r0,#0xc]          ;351  ; main_power_buffer
                  |L3.142|
00008e  f9b6103c          LDRSH    r1,[r6,#0x3c]         ;353  ; adc_result
000092  2964              CMP      r1,#0x64              ;353
000094  da06              BGE      |L3.164|
000096  f8b61040          LDRH     r1,[r6,#0x40]         ;353  ; adc_zero_cnt
00009a  f1010101          ADD      r1,r1,#1              ;354
00009e  f8a61040          STRH     r1,[r6,#0x40]         ;354
0000a2  e001              B        |L3.168|
                  |L3.164|
0000a4  f8a62040          STRH     r2,[r6,#0x40]         ;358
                  |L3.168|
0000a8  f9b64040          LDRSH    r4,[r6,#0x40]         ;358  ; adc_zero_cnt
0000ac  f44f61fa          MOV      r1,#0x7d0             ;360
0000b0  428c              CMP      r4,r1                 ;360
0000b2  db06              BLT      |L3.194|
0000b4  f8a61040          STRH     r1,[r6,#0x40]         ;361
0000b8  6002              STR      r2,[r0,#0]            ;361  ; main_power_buffer
0000ba  6042              STR      r2,[r0,#4]            ;364  ; main_power_buffer
0000bc  6082              STR      r2,[r0,#8]            ;364  ; main_power_buffer
0000be  60c2              STR      r2,[r0,#0xc]          ;364  ; main_power_buffer
0000c0  8772              STRH     r2,[r6,#0x3a]         ;364
                  |L3.194|
0000c2  f8b61040          LDRH     r1,[r6,#0x40]         ;369  ; adc_zero_cnt
0000c6  2905              CMP      r1,#5                 ;369
0000c8  d14f              BNE      |L3.362|
0000ca  b1bb              CBZ      r3,|L3.252|
0000cc  8ff1              LDRH     r1,[r6,#0x3e]         ;370  ; adc_gorb_cnt
0000ce  f1010101          ADD      r1,r1,#1              ;370
0000d2  b209              SXTH     r1,r1                 ;373
0000d4  87f1              STRH     r1,[r6,#0x3e]         ;373
0000d6  f5b17f00          CMP      r1,#0x200             ;373
0000da  db00              BLT      |L3.222|
0000dc  87f2              STRH     r2,[r6,#0x3e]         ;379
                  |L3.222|
0000de  e000              B        |L3.226|
                  |L3.224|
0000e0  e01b              B        |L3.282|
                  |L3.226|
0000e2  f9b6103e          LDRSH    r1,[r6,#0x3e]         ;379  ; adc_gorb_cnt
0000e6  064c              LSLS     r4,r1,#25             ;380
0000e8  d108              BNE      |L3.252|
0000ea  ea4f11e1          ASR      r1,r1,#7              ;380
0000ee  f8504021          LDR      r4,[r0,r1,LSL #2]     ;383
0000f2  ea4f2424          ASR      r4,r4,#8              ;383
0000f6  8774              STRH     r4,[r6,#0x3a]         ;388
0000f8  f8402021          STR      r2,[r0,r1,LSL #2]     ;388
                  |L3.252|
0000fc  f9b60042          LDRSH    r0,[r6,#0x42]         ;389  ; adc_window_cnt
000100  2896              CMP      r0,#0x96              ;389
000102  dd01              BLE      |L3.264|
000104  b103              CBZ      r3,|L3.264|
000106  7532              STRB     r2,[r6,#0x14]         ;392
                  |L3.264|
000108  381f              SUBS     r0,r0,#0x1f           ;392
00010a  2827              CMP      r0,#0x27              ;396
00010c  d22d              BCS      |L3.362|
00010e  7d30              LDRB     r0,[r6,#0x14]         ;396  ; adc_window_flag
000110  bb58              CBNZ     r0,|L3.362|
000112  f04f0001          MOV      r0,#1                 ;396
000116  7530              STRB     r0,[r6,#0x14]         ;396
000118  e027              B        |L3.362|
                  |L3.282|
00011a  483f              LDR      r0,|L3.536|
00011c  7cb5              LDRB     r5,[r6,#0x12]         ;396  ; adc_ch
00011e  7cf3              LDRB     r3,[r6,#0x13]         ;396  ; adc_ch_cnt
000120  eb001485          ADD      r4,r0,r5,LSL #6       ;396
000124  f9b6103c          LDRSH    r1,[r6,#0x3c]         ;397  ; adc_result
000128  f8441023          STR      r1,[r4,r3,LSL #2]     ;397
00012c  0798              LSLS     r0,r3,#30             ;397
00012e  d10f              BNE      |L3.336|
000130  4601              MOV      r1,r0                 ;399
                  |L3.306|
000132  f854c020          LDR      r12,[r4,r0,LSL #2]    ;399
000136  4461              ADD      r1,r1,r12             ;399
000138  f1000001          ADD      r0,r0,#1              ;399
00013c  b2c0              UXTB     r0,r0                 ;399
00013e  2810              CMP      r0,#0x10              ;399
000140  d3f7              BCC      |L3.306|
000142  ea4f1021          ASR      r0,r1,#4              ;410
000146  4933              LDR      r1,|L3.532|
000148  f1a10120          SUB      r1,r1,#0x20           ;411
00014c  f8210015          STRH     r0,[r1,r5,LSL #1]     ;411
                  |L3.336|
000150  1c6d              ADDS     r5,r5,#1              ;413
000152  b2e8              UXTB     r0,r5                 ;413
000154  74b0              STRB     r0,[r6,#0x12]         ;413
000156  2810              CMP      r0,#0x10              ;413
000158  d307              BCC      |L3.362|
00015a  74b2              STRB     r2,[r6,#0x12]         ;414
00015c  f1030301          ADD      r3,r3,#1              ;414
000160  b2d8              UXTB     r0,r3                 ;414
000162  74f0              STRB     r0,[r6,#0x13]         ;418
000164  2810              CMP      r0,#0x10              ;418
000166  d300              BCC      |L3.362|
000168  74f2              STRB     r2,[r6,#0x13]         ;418
                  |L3.362|
00016a  7432              STRB     r2,[r6,#0x10]         ;429
00016c  f1070701          ADD      r7,r7,#1              ;429
000170  f0070001          AND      r0,r7,#1              ;429
000174  7470              STRB     r0,[r6,#0x11]         ;430
000176  4a29              LDR      r2,|L3.540|
000178  b130              CBZ      r0,|L3.392|
00017a  6810              LDR      r0,[r2,#0]            ;432
00017c  f02000ff          BIC      r0,r0,#0xff           ;432
000180  f1000004          ADD      r0,r0,#4              ;432
000184  6010              STR      r0,[r2,#0]            ;433
000186  e03d              B        |L3.516|
                  |L3.392|
000188  7cb1              LDRB     r1,[r6,#0x12]         ;433  ; adc_ch
00018a  0708              LSLS     r0,r1,#28             ;433
00018c  d406              BMI      |L3.412|
00018e  6810              LDR      r0,[r2,#0]            ;437
000190  f02000ff          BIC      r0,r0,#0xff           ;437
000194  f1000001          ADD      r0,r0,#1              ;439
000198  6010              STR      r0,[r2,#0]            ;439
00019a  e005              B        |L3.424|
                  |L3.412|
00019c  6810              LDR      r0,[r2,#0]            ;440
00019e  f02000ff          BIC      r0,r0,#0xff           ;440
0001a2  f1000002          ADD      r0,r0,#2              ;442
0001a6  6010              STR      r0,[r2,#0]            ;442
                  |L3.424|
0001a8  481d              LDR      r0,|L3.544|
0001aa  6803              LDR      r3,[r0,#0]            ;442
0001ac  f0435380          ORR      r3,r3,#0x10000000     ;443
0001b0  6003              STR      r3,[r0,#0]            ;443
0001b2  6a03              LDR      r3,[r0,#0x20]         ;443
0001b4  f0434380          ORR      r3,r3,#0x40000000     ;443
0001b8  6203              STR      r3,[r0,#0x20]         ;401
0001ba  6e03              LDR      r3,[r0,#0x60]         ;401
0001bc  f0436380          ORR      r3,r3,#0x4000000      ;401
0001c0  6603              STR      r3,[r0,#0x60]         ;402
0001c2  07cb              LSLS     r3,r1,#31             ;402
0001c4  d00a              BEQ      |L3.476|
0001c6  6943              LDR      r3,[r0,#0x14]         ;404
0001c8  f0435380          ORR      r3,r3,#0x10000000     ;404
0001cc  6143              STR      r3,[r0,#0x14]         ;404
                  |L3.462|
0001ce  078b              LSLS     r3,r1,#30             ;404
0001d0  d409              BMI      |L3.486|
0001d2  6b43              LDR      r3,[r0,#0x34]         ;405
0001d4  f0234380          BIC      r3,r3,#0x40000000     ;405
0001d8  6343              STR      r3,[r0,#0x34]         ;405
0001da  e008              B        |L3.494|
                  |L3.476|
0001dc  6943              LDR      r3,[r0,#0x14]         ;420
0001de  f0235380          BIC      r3,r3,#0x10000000     ;420
0001e2  6143              STR      r3,[r0,#0x14]         ;421
0001e4  e7f3              B        |L3.462|
                  |L3.486|
0001e6  6b43              LDR      r3,[r0,#0x34]         ;421
0001e8  f0434380          ORR      r3,r3,#0x40000000     ;423
0001ec  6343              STR      r3,[r0,#0x34]         ;423
                  |L3.494|
0001ee  0749              LSLS     r1,r1,#29             ;423
0001f0  d404              BMI      |L3.508|
0001f2  6f41              LDR      r1,[r0,#0x74]         ;423
0001f4  f0216180          BIC      r1,r1,#0x4000000      ;424
0001f8  6741              STR      r1,[r0,#0x74]         ;424
0001fa  e003              B        |L3.516|
                  |L3.508|
0001fc  6f41              LDR      r1,[r0,#0x74]         ;424
0001fe  f0416180          ORR      r1,r1,#0x4000000      ;448
000202  6741              STR      r1,[r0,#0x74]         ;448
                  |L3.516|
000204  6810              LDR      r0,[r2,#0]            ;448
000206  f0407080          ORR      r0,r0,#0x1000000      ;449
00020a  6010              STR      r0,[r2,#0]            ;449
00020c  e8bd81f0          POP      {r4-r8,pc}            ;451
;;;938    
                          ENDP

                  |L3.528|
                          DCD      ||area_number.25||+0xf2
                  |L3.532|
                          DCD      ||.bss||+0x42c
                  |L3.536|
                          DCD      ||.bss||+0xc
                  |L3.540|
                          DCD      0x40034000
                  |L3.544|
                          DCD      0x2009c000

                          AREA ||area_number.4||, CODE, READONLY, ALIGN=2

                          EXPORTAS ||area_number.4||, ||.text||
                  ips_current_average_hndl_ PROC
;;;326    // заполнение флагов для АКБ
;;;327    void bat_flag (void)
000000  e92d43f0          PUSH     {r4-r9,lr}
;;;328    {  
;;;329    if(spc_stat!=spcVZ) 
000004  b085              SUB      sp,sp,#0x14
;;;330    	{
;;;331    	vz_error=0;
000006  4c64              LDR      r4,|L4.408|
000008  4e64              LDR      r6,|L4.412|
00000a  2500              MOVS     r5,#0                 ;329
00000c  7820              LDRB     r0,[r4,#0]            ;329  ; ica_timer_cnt
00000e  1c40              ADDS     r0,r0,#1              ;329
000010  b2c0              UXTB     r0,r0
;;;332    	sp_ch_error=0;
000012  7020              STRB     r0,[r4,#0]
;;;333    	vz1_error=0;
000014  280a              CMP      r0,#0xa
;;;334    	vz2_error=0;
000016  d340              BCC      |L4.154|
;;;335    	}
;;;336    
;;;337    if(!snmp_bat_status[0])	 			//Батарея №1
000018  7025              STRB     r5,[r4,#0]
00001a  f8dfc184          LDR      r12,|L4.416|
;;;338    	{
;;;339    	if((bat[0]._Ub<(USIGN*10)))		//Снижение напряжения батареи ниже Uбсигн 
00001e  f89c0000          LDRB     r0,[r12,#0]  ; ica_plazma
000022  f1000001          ADD      r0,r0,#1
000026  f88c0000          STRB     r0,[r12,#0]           ;337
;;;340    		{
;;;341    		snmp_bat_flag[0]|=0x0001; 
;;;342    		if((snmp_bat_flag_puts[0]&0x0001)==0) 
;;;343    			{
;;;344    			snmp_trap_send("BAT #1 Alarm, battery is low",5,8,0); 
;;;345    			snmp_bat_flag_puts[0]|=0x0001;
;;;346    			}
;;;347    		}
;;;348    	else 
;;;349    		{
;;;350    		snmp_bat_flag[0]&=~0x0001; 
;;;351    		if(snmp_bat_flag_puts[0]&0x0001) 
;;;352    			{
;;;353    			snmp_trap_send("BAT #1 Alarm clear, battery is not low",5,8,1);
;;;354    			snmp_bat_flag_puts[0]&=~0x0001;
;;;355    			}
;;;356    		}
;;;357    
;;;358    	if(bat[0]._temper_stat&0x01)	//Повышенная температура батареи, первый порог - предупреждение
;;;359    		{
;;;360    		snmp_bat_flag[0]|=0x0002;
;;;361    		if((snmp_bat_flag_puts[0]&0x0002)==0) 
;;;362    			{
;;;363    			//snmp_trap_send("BAT #1 Warning, high battery temperature",5,8,2); 
;;;364    			snmp_bat_flag_puts[0]|=0x0002;
;;;365    			}
;;;366    		}
;;;367    	else 
;;;368    		{
;;;369    		snmp_bat_flag[0]&=~0x0002;
;;;370    		if(snmp_bat_flag_puts[0]&0x0002) 
;;;371    			{
;;;372    			//snmp_trap_send("BAT #1 Warning clear, battery temperature is normal",5,8,3);
;;;373    			snmp_bat_flag_puts[0]&=~0x02;
;;;374    			}
;;;375    		}
;;;376    
;;;377    	if(bat[0]._temper_stat&0x02)  	//Повышенная температура батареи, второй порог - авария
;;;378    		{
;;;379    		snmp_bat_flag[0]|=0x0004;
;;;380    		if((snmp_bat_flag_puts[0]&0x0004)==0) 
;;;381    			{
;;;382    			//snmp_trap_send("BAT #1 Alarm, high battery temperature",5,8,4); 
;;;383    			snmp_bat_flag_puts[0]|=0x0004;
;;;384    			}
;;;385    		}
;;;386    	else 
;;;387    		{
;;;388    		snmp_bat_flag[0]&=~0x0004;
;;;389    		if(snmp_bat_flag_puts[0]&0x0004) 
;;;390    			{
;;;391    			//snmp_trap_send("BAT #1 Alarm clear, battery temperature is normal",5,8,5);
;;;392    			snmp_bat_flag_puts[0]&=~0x0004;
;;;393    			}
;;;394    		}
;;;395    
;;;396    	if(bat[0]._Ib<(-IKB)) snmp_bat_flag[0]|=0x0008;		//Разряд батареи
00002a  485e              LDR      r0,|L4.420|
00002c  495e              LDR      r1,|L4.424|
00002e  f9b00000          LDRSH    r0,[r0,#0]            ;342  ; bps_I
;;;397    	else if(bat[0]._Ib>IKB) snmp_bat_flag[0]&=~0x0008;	//Заряд батареи
;;;398    
;;;399    	if((spc_stat==spcKE)&&(spc_bat==0))					//Контроль емкости батареи №1 
;;;400    		{
;;;401    		snmp_bat_flag[0]|=0x0010;
;;;402    		if((snmp_bat_flag_puts[0]&0x0010)==0) 
;;;403    			{
;;;404    			snmp_trap_send("BAT #1, capacity test started",5,8,6); 
;;;405    			snmp_bat_flag_puts[0]|=0x0010;
;;;406    			}
;;;407    		}
;;;408    	else 
;;;409    		{
;;;410    		snmp_bat_flag[0]&=~0x0010;
;;;411    		if(snmp_bat_flag_puts[0]&0x0010) 
;;;412    			{
;;;413    			snmp_trap_send("BAT #1, capacity test stopped",5,8,7);
;;;414    			snmp_bat_flag_puts[0]&=~0x0010;
;;;415    			}
;;;416    		}
;;;417    		
;;;418    	if(spc_stat==spcVZ)									//Выравнивающий заряд 
;;;419    		{
;;;420    		snmp_bat_flag[0]|=0x0020;
;;;421    		if((snmp_bat_flag_puts[0]&0x0020)==0) 
;;;422    			{
;;;423    			snmp_trap_send("BAT #1,leveling charge is started",5,8,8); 
;;;424    			snmp_bat_flag_puts[0]|=0x0020;
;;;425    			}
;;;426    		}
;;;427    	else 
;;;428    		{
;;;429    		snmp_bat_flag[0]&=~0x0020;
;;;430    		if(snmp_bat_flag_puts[0]&0x0020) 
;;;431    			{
;;;432    			snmp_trap_send("BAT #1,leveling charge is stopped",5,8,9);
;;;433    			snmp_bat_flag_puts[0]&=~0x0020;
;;;434    			}
;;;435    		}
;;;436    
;;;437    	if(vz_error)										 //Выравнивающий заряд заблокирован по вентиляции
;;;438    		{
;;;439    		snmp_bat_flag[0]|=0x0040;
;;;440    		if((snmp_bat_flag_puts[0]&0x0040)==0) 
;;;441    			{
;;;442    			snmp_trap_send("BAT #1,leveling charge is blocked",5,8,10); 
;;;443    			snmp_bat_flag_puts[0]|=0x0040;
;;;444    			}
;;;445    		}
;;;446    	else 
;;;447    		{
;;;448    		snmp_bat_flag[0]&=~0x0040;
;;;449    		if(snmp_bat_flag_puts[0]&0x0040) 
;;;450    			{
;;;451    			snmp_trap_send("BAT #1,leveling charge is unblocked",5,8,11);
;;;452    			snmp_bat_flag_puts[0]&=~0x0040;
;;;453    			} 
;;;454    		}
;;;455    
;;;456    	if(sp_ch_stat==scsWRK) 								//Ускореннный заряд
;;;457    		{
;;;458    		snmp_bat_flag[0]|=0x0080;
;;;459    		if((snmp_bat_flag_puts[0]&0x0080)==0) 
;;;460    			{
;;;461    			snmp_trap_send("BAT #1,speed charge is started",5,8,10); 
;;;462    			snmp_bat_flag_puts[0]|=0x0080;
;;;463    			}
;;;464    		}
;;;465    	else 
;;;466    		{
;;;467    		snmp_bat_flag[0]&=~0x0080;
;;;468    		if(snmp_bat_flag_puts[0]&0x0080) 
;;;469    			{
;;;470    			snmp_trap_send("BAT #1,speed charge is stopped",5,8,11);
;;;471    			snmp_bat_flag_puts[0]&=~0x0080;
;;;472    			}
;;;473    		}
;;;474    
;;;475    	if(sp_ch_error) 									//Ускореннный заряд заблокирован по вентиляции
;;;476    		{
;;;477    		snmp_bat_flag[0]|=0x0100;
;;;478    		if((snmp_bat_flag_puts[0]&0x0100)==0) 
;;;479    			{
;;;480    			snmp_trap_send("BAT #1,speed charge is blocked",5,8,12); 
;;;481    			snmp_bat_flag_puts[0]|=0x0100;
;;;482    			}
;;;483    		}
;;;484    	else 
;;;485    		{
;;;486    		snmp_bat_flag[0]&=~0x0100;
;;;487    		if(snmp_bat_flag_puts[0]&0x0100) 
;;;488    			{
;;;489    			snmp_trap_send("BAT #1,speed charge is unblocked",5,8,13);
;;;490    			snmp_bat_flag_puts[0]&=~0x0100;
;;;491    			} 
;;;492    		}
;;;493    
;;;494    	if(vz1_stat!=vz1sOFF)								//Уравнительный заряд 
;;;495    		{
;;;496    		snmp_bat_flag[0]|=0x0200;
;;;497    		if((snmp_bat_flag_puts[0]&0x0200)==0) 
;;;498    			{
;;;499    			snmp_trap_send("BAT #1,equalising charge is on",5,8,14); 
;;;500    			snmp_bat_flag_puts[0]|=0x0200;
;;;501    			}
;;;502    		}
;;;503    	else 
;;;504    		{
;;;505    		snmp_bat_flag[0]&=~0x0200;
;;;506    		if(snmp_bat_flag_puts[0]&0x0200) 
;;;507    			{
;;;508    			snmp_trap_send("BAT #1,equalising charge is off",5,8,15);
;;;509    			snmp_bat_flag_puts[0]&=~0x0200;
;;;510    			}
;;;511    		}
;;;512    
;;;513    	if(vz1_error)										//Уравнительный заряд заблокирован по вентиляции 
;;;514    		{
;;;515    		snmp_bat_flag[0]|=0x0400;
;;;516    		if((snmp_bat_flag_puts[0]&0x0400)==0) 
;;;517    			{
;;;518    			snmp_trap_send("BAT #1,equalising charge is blocked",5,8,16); 
;;;519    			snmp_bat_flag_puts[0]|=0x0400;
;;;520    			}
;;;521    		}
;;;522    	else 
;;;523    		{
;;;524    		snmp_bat_flag[0]&=~0x0400;
;;;525    		if(snmp_bat_flag_puts[0]&0x0400) 
;;;526    			{
;;;527    			snmp_trap_send("BAT #1,equalising charge is unblocked",5,8,17);
;;;528    			snmp_bat_flag_puts[0]&=~0x0400;
;;;529    			} 
;;;530    		}
;;;531    
;;;532    	if(vz2_stat!=vz2sOFF)								//Формовочный заряд 
;;;533    		{
;;;534    		snmp_bat_flag[0]|=0x0800;
;;;535    		if((snmp_bat_flag_puts[0]&0x0800)==0) 
;;;536    			{
;;;537    			snmp_trap_send("BAT #1,molding charge is on",5,8,18); 
;;;538    			snmp_bat_flag_puts[0]|=0x0800;
;;;539    			}
;;;540    		}
;;;541    	else 
;;;542    		{
;;;543    		snmp_bat_flag[0]&=~0x0800;
;;;544    		if(snmp_bat_flag_puts[0]&0x0800) 
;;;545    			{
;;;546    			snmp_trap_send("BAT #1,molding charge is off",5,8,19);
;;;547    			snmp_bat_flag_puts[0]&=~0x0800;
;;;548    			}
;;;549    		}
;;;550    
;;;551    	if(vz2_error) 										//Формовочный заряд заблокирован по вентиляции
;;;552    		{
;;;553    		snmp_bat_flag[0]|=0x1000;
;;;554    		if((snmp_bat_flag_puts[0]&0x1000)==0) 
;;;555    			{
;;;556    			snmp_trap_send("BAT #1,molding charge is blocked",5,8,20); 
;;;557    			snmp_bat_flag_puts[0]|=0x1000;
;;;558    			}
;;;559    		}
;;;560    	else 
;;;561    		{
;;;562    		snmp_bat_flag[0]&=~0x1000;
;;;563    		if(snmp_bat_flag_puts[0]&0x1000) 
;;;564    			{
;;;565    			snmp_trap_send("BAT #1,molding charge is unblocked",5,8,21);
;;;566    			snmp_bat_flag_puts[0]&=~0x1000;
;;;567    			} 
;;;568    		}
;;;569    	}
;;;570    else 
;;;571    	{
;;;572    	snmp_bat_flag[0]=0; 
000032  8008              STRH     r0,[r1,#0]
;;;573    	snmp_bat_flag_puts[0]=0;
000034  495d              LDR      r1,|L4.428|
;;;574    	}
;;;575    
;;;576    if(!snmp_bat_status[1])	 			//Батарея №2
000036  f8df8178          LDR      r8,|L4.432|
00003a  4662              MOV      r2,r12
00003c  4637              MOV      r7,r6
;;;577    	{
;;;578    	if((bat[1]._Ub<(USIGN*10)))		//Снижение напряжения батареи ниже Uбсигн 
;;;579    		{
;;;580    		snmp_bat_flag[1]|=0x0001; 
;;;581    		if((snmp_bat_flag_puts[1]&0x0001)==0) 
;;;582    			{
;;;583    			snmp_trap_send("BAT #2 Alarm, battery is low",5,8,22); 
;;;584    			snmp_bat_flag_puts[1]|=0x0001;
;;;585    			}
;;;586    		}
;;;587    	else 
;;;588    		{
;;;589    		snmp_bat_flag[1]&=~0x0001; 
;;;590    		if(snmp_bat_flag_puts[1]&0x0001) 
;;;591    			{
;;;592    			snmp_trap_send("BAT #2 Alarm clear, battery is not low",5,8,23);
;;;593    			snmp_bat_flag_puts[1]&=~0x0001;
;;;594    			}
;;;595    		}
;;;596    
;;;597    	if(bat[1]._temper_stat&0x01)	//Повышенная температура батареи, первый порог - предупреждение
;;;598    		{
;;;599    		snmp_bat_flag[1]|=0x0002;
;;;600    		if((snmp_bat_flag_puts[0]&0x0002)==0) 
;;;601    			{
;;;602    			//snmp_trap_send("BAT #2 Warning, high battery temperature",5,8,24); 
;;;603    			snmp_bat_flag_puts[1]|=0x0002;
;;;604    			}
;;;605    		}
;;;606    	else 
;;;607    		{
;;;608    		snmp_bat_flag[1]&=~0x0002;
;;;609    		if(snmp_bat_flag_puts[1]&0x0002) 
;;;610    			{
;;;611    			//snmp_trap_send("BAT #2 Warning clear, battery temperature is normal",5,8,25);
;;;612    			snmp_bat_flag_puts[1]&=~0x02;
;;;613    			}
;;;614    		}
;;;615    
;;;616    	if(bat[1]._temper_stat&0x02)  	//Повышенная температура батареи, второй порог - авария
;;;617    		{
;;;618    		snmp_bat_flag[1]|=0x0004;
;;;619    		if((snmp_bat_flag_puts[1]&0x0004)==0) 
;;;620    			{
;;;621    			//snmp_trap_send("BAT #2 Alarm, high battery temperature",5,8,26); 
;;;622    			snmp_bat_flag_puts[1]|=0x0004;
;;;623    			}
;;;624    		}
;;;625    	else 
;;;626    		{
;;;627    		snmp_bat_flag[1]&=~0x0004;
;;;628    		if(snmp_bat_flag_puts[1]&0x0004) 
;;;629    			{
;;;630    			//snmp_trap_send("BAT #2 Alarm clear, battery temperature is normal",5,8,27);
;;;631    			snmp_bat_flag_puts[1]&=~0x0004;
;;;632    			}
;;;633    		}
;;;634    
;;;635    	if(bat[1]._Ib<(-IKB)) snmp_bat_flag[1]|=0x0008;		//Разряд батареи
;;;636    	else if(bat[1]._Ib>IKB) snmp_bat_flag[1]&=~0x0008;	//Заряд батареи
;;;637    
;;;638    	if((spc_stat==spcKE)&&(spc_bat==0))					//Контроль емкости батареи №1 
;;;639    		{
;;;640    		snmp_bat_flag[1]|=0x0010;
;;;641    		if((snmp_bat_flag_puts[1]&0x0010)==0) 
;;;642    			{
;;;643    			snmp_trap_send("BAT #2, capacity test started",5,8,28); 
;;;644    			snmp_bat_flag_puts[1]|=0x0010;
;;;645    			}
;;;646    		}
;;;647    	else 
;;;648    		{
;;;649    		snmp_bat_flag[1]&=~0x0010;
;;;650    		if(snmp_bat_flag_puts[1]&0x0010) 
;;;651    			{
;;;652    			snmp_trap_send("BAT #2, capacity test stopped",5,8,29);
;;;653    			snmp_bat_flag_puts[1]&=~0x0010;
;;;654    			}
;;;655    		}
;;;656    		
;;;657    	if(spc_stat==spcVZ)									//Выравнивающий заряд 
;;;658    		{
;;;659    		snmp_bat_flag[1]|=0x0020;
;;;660    		if((snmp_bat_flag_puts[1]&0x0020)==0) 
;;;661    			{
;;;662    			snmp_trap_send("BAT #2,leveling charge is started",5,8,30); 
;;;663    			snmp_bat_flag_puts[1]|=0x0020;
;;;664    			}
;;;665    		}
;;;666    	else 
;;;667    		{
;;;668    		snmp_bat_flag[1]&=~0x0020;
;;;669    		if(snmp_bat_flag_puts[1]&0x0020) 
;;;670    			{
;;;671    			snmp_trap_send("BAT #2,leveling charge is stopped",5,8,31);
;;;672    			snmp_bat_flag_puts[1]&=~0x0020;
;;;673    			}
;;;674    		}
;;;675    
;;;676    	if(vz_error)										 //Выравнивающий заряд заблокирован по вентиляции
;;;677    		{
;;;678    		snmp_bat_flag[1]|=0x0040;
;;;679    		if((snmp_bat_flag_puts[1]&0x0040)==0) 
;;;680    			{
;;;681    			snmp_trap_send("BAT #2,leveling charge is blocked",5,8,32); 
;;;682    			snmp_bat_flag_puts[1]|=0x0040;
;;;683    			}
;;;684    		}
;;;685    	else 
;;;686    		{
;;;687    		snmp_bat_flag[1]&=~0x0040;
;;;688    		if(snmp_bat_flag_puts[1]&0x0040) 
;;;689    			{
;;;690    			snmp_trap_send("BAT #2,leveling charge is unblocked",5,8,33);
;;;691    			snmp_bat_flag_puts[1]&=~0x0040;
;;;692    			} 
;;;693    		}
;;;694    
;;;695    	if(sp_ch_stat==scsWRK) 								//Ускореннный заряд
;;;696    		{
;;;697    		snmp_bat_flag[1]|=0x0080;
;;;698    		if((snmp_bat_flag_puts[1]&0x0080)==0) 
;;;699    			{
;;;700    			snmp_trap_send("BAT #2,speed charge is started",5,8,34); 
;;;701    			snmp_bat_flag_puts[1]|=0x0080;
;;;702    			}
;;;703    		}
;;;704    	else 
;;;705    		{
;;;706    		snmp_bat_flag[1]&=~0x0080;
;;;707    		if(snmp_bat_flag_puts[1]&0x0080) 
;;;708    			{
;;;709    			snmp_trap_send("BAT #2,speed charge is stopped",5,8,35);
;;;710    			snmp_bat_flag_puts[1]&=~0x0080;
;;;711    			}
;;;712    		}
;;;713    
;;;714    	if(sp_ch_error) 									//Ускореннный заряд заблокирован по вентиляции
;;;715    		{
;;;716    		snmp_bat_flag[1]|=0x0100;
;;;717    		if((snmp_bat_flag_puts[1]&0x0100)==0) 
;;;718    			{
;;;719    			snmp_trap_send("BAT #2,speed charge is blocked",5,8,36); 
;;;720    			snmp_bat_flag_puts[1]|=0x0100;
;;;721    			}
;;;722    		}
;;;723    	else 
;;;724    		{
;;;725    		snmp_bat_flag[1]&=~0x0100;
;;;726    		if(snmp_bat_flag_puts[1]&0x0100) 
;;;727    			{
;;;728    			snmp_trap_send("BAT #2,speed charge is unblocked",5,8,37);
;;;729    			snmp_bat_flag_puts[1]&=~0x0100;
;;;730    			} 
;;;731    		}
;;;732    
;;;733    	if(vz1_stat!=vz1sOFF)								//Уравнительный заряд 
;;;734    		{
;;;735    		snmp_bat_flag[1]|=0x0200;
;;;736    		if((snmp_bat_flag_puts[1]&0x0200)==0) 
;;;737    			{
;;;738    			snmp_trap_send("BAT #2,equalising charge is on",5,8,38); 
;;;739    			snmp_bat_flag_puts[1]|=0x0200;
;;;740    			}
;;;741    		}
;;;742    	else 
;;;743    		{
;;;744    		snmp_bat_flag[1]&=~0x0200;
;;;745    		if(snmp_bat_flag_puts[1]&0x0200) 
;;;746    			{
;;;747    			snmp_trap_send("BAT #2,equalising charge is off",5,8,39);
;;;748    			snmp_bat_flag_puts[1]&=~0x0200;
;;;749    			}
;;;750    		}
;;;751    
;;;752    	if(vz1_error)										//Уравнительный заряд заблокирован по вентиляции 
;;;753    		{
;;;754    		snmp_bat_flag[1]|=0x0400;
;;;755    		if((snmp_bat_flag_puts[1]&0x0400)==0) 
;;;756    			{
;;;757    			snmp_trap_send("BAT #2,equalising charge is blocked",5,8,40); 
;;;758    			snmp_bat_flag_puts[1]|=0x0400;
;;;759    			}
;;;760    		}
;;;761    	else 
;;;762    		{
;;;763    		snmp_bat_flag[1]&=~0x0400;
;;;764    		if(snmp_bat_flag_puts[1]&0x0400) 
;;;765    			{
;;;766    			snmp_trap_send("BAT #2,equalising charge is unblocked",5,8,41);
;;;767    			snmp_bat_flag_puts[1]&=~0x0400;
;;;768    			} 
;;;769    		}
;;;770    
;;;771    	if(vz2_stat!=vz2sOFF)								//Формовочный заряд 
;;;772    		{
;;;773    		snmp_bat_flag[1]|=0x0800;
;;;774    		if((snmp_bat_flag_puts[1]&0x0800)==0) 
;;;775    			{
;;;776    			snmp_trap_send("BAT #2,molding charge is on",5,8,42); 
;;;777    			snmp_bat_flag_puts[1]|=0x0800;
;;;778    			}
;;;779    		}
;;;780    	else 
;;;781    		{
;;;782    		snmp_bat_flag[1]&=~0x0800;
;;;783    		if(snmp_bat_flag_puts[1]&0x0800) 
;;;784    			{
;;;785    			snmp_trap_send("BAT #2,molding charge is off",5,8,43);
;;;786    			snmp_bat_flag_puts[1]&=~0x0800;
;;;787    			}
;;;788    		}
;;;789    
;;;790    	if(vz2_error) 										//Формовочный заряд заблокирован по вентиляции
;;;791    		{
;;;792    		snmp_bat_flag[1]|=0x1000;
;;;793    		if((snmp_bat_flag_puts[1]&0x1000)==0) 
;;;794    			{
;;;795    			snmp_trap_send("BAT #2,molding charge is blocked",5,8,44); 
;;;796    			snmp_bat_flag_puts[1]|=0x1000;
;;;797    			}
;;;798    		}
;;;799    	else 
;;;800    		{
;;;801    		snmp_bat_flag[1]&=~0x1000;
;;;802    		if(snmp_bat_flag_puts[1]&0x1000) 
;;;803    			{
;;;804    			snmp_trap_send("BAT #2,molding charge is unblocked",5,8,45);
;;;805    			snmp_bat_flag_puts[1]&=~0x1000;
;;;806    			} 
;;;807    		}
;;;808    	}
;;;809    else 
;;;810    	{
;;;811    	snmp_bat_flag[1]=0; 
00003e  f9b11000          LDRSH    r1,[r1,#0]  ; ica_your_current
;;;812    	snmp_bat_flag_puts[1]=0;
;;;813    	}
;;;814    /*
;;;815    if(!snmp_bat_status[1])
;;;816    	{
;;;817    	if((bat[1]._Ub<(USIGN*10))) 
;;;818    		{
;;;819    		snmp_bat_flag[1]|=0x01; 
;;;820    		if((snmp_bat_flag_puts[1]&0x01)==0) 
;;;821    			{
;;;822    			snmp_trap_send("BAT #2 Alarm, battery is low",5,8,0); 
;;;823    			snmp_bat_flag_puts[1]|=0x01;
;;;824    			}
;;;825    		}
;;;826    	else 
;;;827    		{
;;;828    		snmp_bat_flag[1]&=~0x01; 
;;;829    		if(snmp_bat_flag_puts[1]&0x01) 
;;;830    			{
;;;831    			snmp_trap_send("BAT #2 Alarm clear, battery is not low",5,8,1);
;;;832    			snmp_bat_flag_puts[1]&=~0x01;
;;;833    			}
;;;834    		}
;;;835    	if(bat[1]._temper_stat&0x01) 
;;;836    		{
;;;837    		snmp_bat_flag[1]|=0x02;
;;;838    		if((snmp_bat_flag_puts[1]&0x02)==0) 
;;;839    			{
;;;840    			snmp_trap_send("BAT #2 Alarm, high battery temperature",5,8,2); 
;;;841    			snmp_bat_flag_puts[1]|=0x02;
;;;842    			}
;;;843    		}
;;;844    	else 
;;;845    		{
;;;846    		snmp_bat_flag[1]&=~0x02;
;;;847    		if(snmp_bat_flag_puts[1]&0x02) 
;;;848    			{
;;;849    			snmp_trap_send("BAT #2 Alarm clear, battery temperature is normal",5,8,3);
;;;850    			snmp_bat_flag_puts[1]&=~0x02;
;;;851    			}
;;;852    		}
;;;853    	if(bat[1]._temper_stat&0x02) 
;;;854    		{
;;;855    		snmp_bat_flag[1]|=0x04;
;;;856    		if((snmp_bat_flag_puts[1]&0x04)==0) 
;;;857    			{
;;;858    			snmp_trap_send("BAT #2 Alarm, maximum battery temperature",5,8,4); 
;;;859    			snmp_bat_flag_puts[1]|=0x04;
;;;860    			}
;;;861    		}
;;;862    	else 
;;;863    		{
;;;864    		snmp_bat_flag[1]&=~0x04;
;;;865    		if(snmp_bat_flag_puts[1]&0x04) 
;;;866    			{
;;;867    			snmp_trap_send("BAT #2 Alarm clear, battery temperature is normal",5,8,5);
;;;868    			snmp_bat_flag_puts[1]&=~0x04;
;;;869    			}
;;;870    		}
;;;871    		
;;;872    	if(bat[1]._Ib<(-IKB))	snmp_bat_flag[1]|=0x80;
;;;873    	else if(bat[1]._Ib>IKB)snmp_bat_flag[1]&=~0x80;
;;;874    
;;;875    	if((spc_stat==spcKE)&&(spc_bat==1)) 
;;;876    		{
;;;877    		snmp_bat_flag[1]|=0x10;
;;;878    		if((snmp_bat_flag_puts[1]&0x10)==0) 
;;;879    			{
;;;880    			snmp_trap_send("BAT #2, capacity check enabled",5,8,6); 
;;;881    			snmp_bat_flag_puts[1]|=0x10;
;;;882    			}
;;;883    		}
;;;884    	else 
;;;885    		{
;;;886    		snmp_bat_flag[1]&=~0x10;
;;;887    		if(snmp_bat_flag_puts[1]&0x10) 
;;;888    			{
;;;889    			snmp_trap_send("BAT #2, capacity check disabled",5,8,7);
;;;890    			snmp_bat_flag_puts[1]&=~0x10;
;;;891    			}
;;;892    		}
;;;893    		
;;;894    	if(spc_stat==spcVZ) 
;;;895    		{
;;;896    		snmp_bat_flag[1]|=0x20;
;;;897    		if((snmp_bat_flag_puts[1]&0x20)==0) 
;;;898    			{
;;;899    			snmp_trap_send("BAT #2,equalizing charge is on",5,8,8); 
;;;900    			snmp_bat_flag_puts[1]|=0x20;
;;;901    			}
;;;902    		}
;;;903    	else 
;;;904    		{
;;;905    		snmp_bat_flag[1]&=~0x20;
;;;906    		if(snmp_bat_flag_puts[1]&0x20) 
;;;907    			{
;;;908    			snmp_trap_send("BAT #2,equalizing charge is off",5,8,9);
;;;909    			snmp_bat_flag_puts[1]&=~0x20;
;;;910    			}
;;;911    		}
;;;912    
;;;913    	if(vz_error) 
;;;914    		{
;;;915    		snmp_bat_flag[1]|=0x40;
;;;916    		if((snmp_bat_flag_puts[1]&0x40)==0) 
;;;917    			{
;;;918    			snmp_trap_send("BAT #2,equalizing charge blocked",5,8,10); 
;;;919    			snmp_bat_flag_puts[1]|=0x40;
;;;920    			}
;;;921    		}
;;;922    	else 
;;;923    		{
;;;924    		snmp_bat_flag[1]&=~0x40;
;;;925    		if(snmp_bat_flag_puts[1]&0x40) 
;;;926    			{
;;;927    			snmp_trap_send("BAT #2,equalizing charge is not blocked",5,8,11);
;;;928    			snmp_bat_flag_puts[1]&=~0x40;
;;;929    			} 
;;;930    		}
;;;931       }
;;;932    else 
;;;933    	{
;;;934    	snmp_bat_flag[1]=0; 
;;;935    	snmp_bat_flag_puts[1]=0;
;;;936    	} */
;;;937    }
000042  7852              LDRB     r2,[r2,#1]
000044  f9b83000          LDRSH    r3,[r8,#0]
000048  f9b77000          LDRSH    r7,[r7,#0]            ;339
00004c  4288              CMP      r0,r1                 ;339
00004e  dd06              BLE      |L4.94|
000050  eba00901          SUB      r9,r0,r1              ;339
000054  f1b90f0a          CMP      r9,#0xa               ;339
000058  db01              BLT      |L4.94|
00005a  2f01              CMP      r7,#1                 ;341
00005c  d007              BEQ      |L4.110|
                  |L4.94|
00005e  4288              CMP      r0,r1                 ;342
000060  da16              BGE      |L4.144|
000062  1a08              SUBS     r0,r1,r0              ;339
000064  280a              CMP      r0,#0xa               ;341
000066  db13              BLT      |L4.144|
000068  2f01              CMP      r7,#1                 ;341
00006a  d009              BEQ      |L4.128|
00006c  e010              B        |L4.144|
                  |L4.110|
00006e  f1020201          ADD      r2,r2,#1              ;344
000072  f88c2001          STRB     r2,[r12,#1]           ;344
000076  f1a30301          SUB      r3,r3,#1              ;344
00007a  f8a83000          STRH     r3,[r8,#0]            ;345
00007e  e007              B        |L4.144|
                  |L4.128|
000080  f1a20201          SUB      r2,r2,#1              ;345
000084  f88c2001          STRB     r2,[r12,#1]           ;350
000088  f1030301          ADD      r3,r3,#1              ;350
00008c  f8a83000          STRH     r3,[r8,#0]            ;351
                  |L4.144|
000090  2214              MOVS     r2,#0x14              ;353
000092  4251              RSBS     r1,r2,#0              ;353
000094  4846              LDR      r0,|L4.432|
000096  f7fffffe          BL       gran
                  |L4.154|
00009a  7820              LDRB     r0,[r4,#0]            ;354  ; ica_timer_cnt
00009c  f8df8114          LDR      r8,|L4.436|
0000a0  4f45              LDR      r7,|L4.440|
0000a2  2808              CMP      r0,#8                 ;358
0000a4  d125              BNE      |L4.242|
0000a6  8830              LDRH     r0,[r6,#0]            ;358  ; ICA_EN
0000a8  2801              CMP      r0,#1                 ;358
0000aa  d122              BNE      |L4.242|
0000ac  f8b80000          LDRH     r0,[r8,#0]            ;360  ; ICA_MODBUS_ADDRESS
0000b0  f88d0000          STRB     r0,[sp,#0]            ;360
0000b4  f04f0004          MOV      r0,#4                 ;361
0000b8  f88d0001          STRB     r0,[sp,#1]            ;361
0000bc  f88d5002          STRB     r5,[sp,#2]            ;364
0000c0  f04f0002          MOV      r0,#2                 ;364
0000c4  f88d0003          STRB     r0,[sp,#3]            ;369
0000c8  f88d5004          STRB     r5,[sp,#4]            ;369
0000cc  f04f0001          MOV      r0,#1                 ;370
0000d0  f88d0005          STRB     r0,[sp,#5]            ;370
0000d4  f04f0106          MOV      r1,#6                 ;373
0000d8  4668              MOV      r0,sp                 ;377
0000da  f7fffffe          BL       CRC16_2
0000de  f88d0006          STRB     r0,[sp,#6]            ;379
0000e2  ea4f2020          ASR      r0,r0,#8              ;379
0000e6  f88d0007          STRB     r0,[sp,#7]            ;380
0000ea  f9b70000          LDRSH    r0,[r7,#0]            ;380  ; ICA_CH
0000ee  b3e8              CBZ      r0,|L4.364|
0000f0  2801              CMP      r0,#1                 ;383
                  |L4.242|
0000f2  4832              LDR      r0,|L4.444|
0000f4  f06f0214          MVN      r2,#0x14              ;388
0000f8  f9b00000          LDRSH    r0,[r0,#0]            ;388  ; TBAT
0000fc  ebc01100          RSB      r1,r0,r0,LSL #4       ;389
000100  eb020181          ADD      r1,r2,r1,LSL #2       ;389
000104  4a2e              LDR      r2,|L4.448|
000106  f9b22052          LDRSH    r2,[r2,#0x52]         ;392  ; main_kb_cnt
00010a  4291              CMP      r1,r2                 ;396
00010c  d134              BNE      |L4.376|
00010e  8831              LDRH     r1,[r6,#0]            ;396  ; ICA_EN
000110  2901              CMP      r1,#1                 ;396
000112  d131              BNE      |L4.376|
000114  f8b81000          LDRH     r1,[r8,#0]            ;396  ; ICA_MODBUS_ADDRESS
000118  f88d1000          STRB     r1,[sp,#0]            ;396
00011c  f04f0106          MOV      r1,#6                 ;396
000120  f88d1001          STRB     r1,[sp,#1]            ;396
000124  f88d5002          STRB     r5,[sp,#2]            ;397
000128  f04f011e          MOV      r1,#0x1e              ;397
00012c  f88d1003          STRB     r1,[sp,#3]            ;397
000130  ea4f71e0          ASR      r1,r0,#31             ;399
000134  eb006111          ADD      r1,r0,r1,LSR #24      ;399
000138  ea4f2221          ASR      r2,r1,#8              ;399
00013c  f88d2004          STRB     r2,[sp,#4]            ;399
000140  f88d0005          STRB     r0,[sp,#5]            ;410
000144  f04f0106          MOV      r1,#6                 ;410
000148  4668              MOV      r0,sp                 ;411
00014a  f7fffffe          BL       CRC16_2
00014e  f88d0006          STRB     r0,[sp,#6]            ;413
000152  ea4f2020          ASR      r0,r0,#8              ;413
000156  f88d0007          STRB     r0,[sp,#7]            ;413
00015a  8838              LDRH     r0,[r7,#0]            ;414  ; ICA_CH
00015c  2800              CMP      r0,#0                 ;414
00015e  d10b              BNE      |L4.376|
000160  4604              MOV      r4,r0                 ;414
000162  466d              MOV      r5,sp                 ;418
                  |L4.356|
000164  5d28              LDRB     r0,[r5,r4]            ;418
000166  f7fffffe          BL       putchar_sc16is700
00016a  e000              B        |L4.366|
                  |L4.364|
00016c  e007              B        |L4.382|
                  |L4.366|
00016e  f1040401          ADD      r4,r4,#1              ;429
000172  b2e4              UXTB     r4,r4                 ;430
000174  2c08              CMP      r4,#8                 ;430
000176  d3f5              BCC      |L4.356|
                  |L4.376|
000178  b005              ADD      sp,sp,#0x14           ;432
00017a  e8bd83f0          POP      {r4-r9,pc}            ;432
                  |L4.382|
00017e  f04f0400          MOV      r4,#0                 ;432
000182  46e9              MOV      r9,sp                 ;432
                  |L4.388|
000184  f8190004          LDRB     r0,[r9,r4]            ;433
000188  f7fffffe          BL       putchar_sc16is700
00018c  f1040401          ADD      r4,r4,#1              ;437
000190  b2e4              UXTB     r4,r4                 ;437
000192  2c08              CMP      r4,#8                 ;439
000194  d3f6              BCC      |L4.388|
000196  e7ac              B        |L4.242|
;;;938    
                          ENDP

                  |L4.408|
                          DCD      ica_timer_cnt
                  |L4.412|
                          DCD      ICA_EN
                  |L4.416|
                          DCD      ica_plazma
                  |L4.420|
                          DCD      bps_I
                  |L4.424|
                          DCD      ica_my_current
                  |L4.428|
                          DCD      ica_your_current
                  |L4.432|
                          DCD      ica_u_necc
                  |L4.436|
                          DCD      ICA_MODBUS_ADDRESS
                  |L4.440|
                          DCD      ICA_CH
                  |L4.444|
                          DCD      TBAT
                  |L4.448|
                          DCD      ||area_number.25||

                          AREA ||area_number.5||, CODE, READONLY, ALIGN=2

                          EXPORTAS ||area_number.5||, ||.text||
                  inv_drv PROC
;;;326    // заполнение флагов для АКБ
;;;327    void bat_flag (void)
000000  b570              PUSH     {r4-r6,lr}
;;;328    {  
000002  4604              MOV      r4,r0
;;;329    if(spc_stat!=spcVZ) 
000004  f04f0207          MOV      r2,#7
000008  f04f0101          MOV      r1,#1
00000c  48a4              LDR      r0,|L5.672|
00000e  f7fffffe          BL       gran_char
;;;330    	{
;;;331    	vz_error=0;
;;;332    	sp_ch_error=0;
000012  48a4              LDR      r0,|L5.676|
;;;333    	vz1_error=0;
000014  eb040144          ADD      r1,r4,r4,LSL #1
;;;334    	vz2_error=0;
;;;335    	}
;;;336    
;;;337    if(!snmp_bat_status[0])	 			//Батарея №1
000018  eb001541          ADD      r5,r0,r1,LSL #5
;;;338    	{
;;;339    	if((bat[0]._Ub<(USIGN*10)))		//Снижение напряжения батареи ниже Uбсигн 
00001c  f8950047          LDRB     r0,[r5,#0x47]
000020  f8951046          LDRB     r1,[r5,#0x46]
000024  ea800001          EOR      r0,r0,r1              ;337
;;;340    		{
;;;341    		snmp_bat_flag[0]|=0x0001; 
;;;342    		if((snmp_bat_flag_puts[0]&0x0001)==0) 
;;;343    			{
;;;344    			snmp_trap_send("BAT #1 Alarm, battery is low",5,8,0); 
;;;345    			snmp_bat_flag_puts[0]|=0x0001;
;;;346    			}
;;;347    		}
;;;348    	else 
;;;349    		{
;;;350    		snmp_bat_flag[0]&=~0x0001; 
;;;351    		if(snmp_bat_flag_puts[0]&0x0001) 
;;;352    			{
;;;353    			snmp_trap_send("BAT #1 Alarm clear, battery is not low",5,8,1);
;;;354    			snmp_bat_flag_puts[0]&=~0x0001;
;;;355    			}
;;;356    		}
;;;357    
;;;358    	if(bat[0]._temper_stat&0x01)	//Повышенная температура батареи, первый порог - предупреждение
;;;359    		{
;;;360    		snmp_bat_flag[0]|=0x0002;
;;;361    		if((snmp_bat_flag_puts[0]&0x0002)==0) 
;;;362    			{
;;;363    			//snmp_trap_send("BAT #1 Warning, high battery temperature",5,8,2); 
;;;364    			snmp_bat_flag_puts[0]|=0x0002;
;;;365    			}
;;;366    		}
;;;367    	else 
;;;368    		{
;;;369    		snmp_bat_flag[0]&=~0x0002;
;;;370    		if(snmp_bat_flag_puts[0]&0x0002) 
;;;371    			{
;;;372    			//snmp_trap_send("BAT #1 Warning clear, battery temperature is normal",5,8,3);
;;;373    			snmp_bat_flag_puts[0]&=~0x02;
;;;374    			}
;;;375    		}
;;;376    
;;;377    	if(bat[0]._temper_stat&0x02)  	//Повышенная температура батареи, второй порог - авария
;;;378    		{
;;;379    		snmp_bat_flag[0]|=0x0004;
;;;380    		if((snmp_bat_flag_puts[0]&0x0004)==0) 
;;;381    			{
;;;382    			//snmp_trap_send("BAT #1 Alarm, high battery temperature",5,8,4); 
;;;383    			snmp_bat_flag_puts[0]|=0x0004;
;;;384    			}
;;;385    		}
;;;386    	else 
;;;387    		{
;;;388    		snmp_bat_flag[0]&=~0x0004;
;;;389    		if(snmp_bat_flag_puts[0]&0x0004) 
;;;390    			{
;;;391    			//snmp_trap_send("BAT #1 Alarm clear, battery temperature is normal",5,8,5);
;;;392    			snmp_bat_flag_puts[0]&=~0x0004;
;;;393    			}
;;;394    		}
;;;395    
;;;396    	if(bat[0]._Ib<(-IKB)) snmp_bat_flag[0]|=0x0008;		//Разряд батареи
000028  4a9f              LDR      r2,|L5.680|
00002a  b100              CBZ      r0,|L5.46|
00002c  7050              STRB     r0,[r2,#1]            ;341
                  |L5.46|
00002e  ea010100          AND      r1,r1,r0              ;342
;;;397    	else if(bat[0]._Ib>IKB) snmp_bat_flag[0]&=~0x0008;	//Заряд батареи
;;;398    
;;;399    	if((spc_stat==spcKE)&&(spc_bat==0))					//Контроль емкости батареи №1 
;;;400    		{
;;;401    		snmp_bat_flag[0]|=0x0010;
;;;402    		if((snmp_bat_flag_puts[0]&0x0010)==0) 
;;;403    			{
;;;404    			snmp_trap_send("BAT #1, capacity test started",5,8,6); 
;;;405    			snmp_bat_flag_puts[0]|=0x0010;
;;;406    			}
;;;407    		}
;;;408    	else 
;;;409    		{
;;;410    		snmp_bat_flag[0]&=~0x0010;
;;;411    		if(snmp_bat_flag_puts[0]&0x0010) 
;;;412    			{
;;;413    			snmp_trap_send("BAT #1, capacity test stopped",5,8,7);
;;;414    			snmp_bat_flag_puts[0]&=~0x0010;
;;;415    			}
;;;416    		}
;;;417    		
;;;418    	if(spc_stat==spcVZ)									//Выравнивающий заряд 
;;;419    		{
;;;420    		snmp_bat_flag[0]|=0x0020;
;;;421    		if((snmp_bat_flag_puts[0]&0x0020)==0) 
;;;422    			{
;;;423    			snmp_trap_send("BAT #1,leveling charge is started",5,8,8); 
;;;424    			snmp_bat_flag_puts[0]|=0x0020;
;;;425    			}
;;;426    		}
;;;427    	else 
;;;428    		{
;;;429    		snmp_bat_flag[0]&=~0x0020;
;;;430    		if(snmp_bat_flag_puts[0]&0x0020) 
;;;431    			{
;;;432    			snmp_trap_send("BAT #1,leveling charge is stopped",5,8,9);
;;;433    			snmp_bat_flag_puts[0]&=~0x0020;
;;;434    			}
;;;435    		}
;;;436    
;;;437    	if(vz_error)										 //Выравнивающий заряд заблокирован по вентиляции
;;;438    		{
;;;439    		snmp_bat_flag[0]|=0x0040;
;;;440    		if((snmp_bat_flag_puts[0]&0x0040)==0) 
;;;441    			{
;;;442    			snmp_trap_send("BAT #1,leveling charge is blocked",5,8,10); 
;;;443    			snmp_bat_flag_puts[0]|=0x0040;
;;;444    			}
;;;445    		}
;;;446    	else 
;;;447    		{
;;;448    		snmp_bat_flag[0]&=~0x0040;
;;;449    		if(snmp_bat_flag_puts[0]&0x0040) 
;;;450    			{
;;;451    			snmp_trap_send("BAT #1,leveling charge is unblocked",5,8,11);
;;;452    			snmp_bat_flag_puts[0]&=~0x0040;
;;;453    			} 
;;;454    		}
;;;455    
;;;456    	if(sp_ch_stat==scsWRK) 								//Ускореннный заряд
;;;457    		{
;;;458    		snmp_bat_flag[0]|=0x0080;
;;;459    		if((snmp_bat_flag_puts[0]&0x0080)==0) 
;;;460    			{
;;;461    			snmp_trap_send("BAT #1,speed charge is started",5,8,10); 
;;;462    			snmp_bat_flag_puts[0]|=0x0080;
;;;463    			}
;;;464    		}
;;;465    	else 
;;;466    		{
;;;467    		snmp_bat_flag[0]&=~0x0080;
;;;468    		if(snmp_bat_flag_puts[0]&0x0080) 
;;;469    			{
;;;470    			snmp_trap_send("BAT #1,speed charge is stopped",5,8,11);
;;;471    			snmp_bat_flag_puts[0]&=~0x0080;
;;;472    			}
;;;473    		}
;;;474    
;;;475    	if(sp_ch_error) 									//Ускореннный заряд заблокирован по вентиляции
;;;476    		{
;;;477    		snmp_bat_flag[0]|=0x0100;
;;;478    		if((snmp_bat_flag_puts[0]&0x0100)==0) 
;;;479    			{
;;;480    			snmp_trap_send("BAT #1,speed charge is blocked",5,8,12); 
;;;481    			snmp_bat_flag_puts[0]|=0x0100;
;;;482    			}
;;;483    		}
;;;484    	else 
;;;485    		{
;;;486    		snmp_bat_flag[0]&=~0x0100;
;;;487    		if(snmp_bat_flag_puts[0]&0x0100) 
;;;488    			{
;;;489    			snmp_trap_send("BAT #1,speed charge is unblocked",5,8,13);
;;;490    			snmp_bat_flag_puts[0]&=~0x0100;
;;;491    			} 
;;;492    		}
;;;493    
;;;494    	if(vz1_stat!=vz1sOFF)								//Уравнительный заряд 
;;;495    		{
;;;496    		snmp_bat_flag[0]|=0x0200;
;;;497    		if((snmp_bat_flag_puts[0]&0x0200)==0) 
;;;498    			{
;;;499    			snmp_trap_send("BAT #1,equalising charge is on",5,8,14); 
;;;500    			snmp_bat_flag_puts[0]|=0x0200;
;;;501    			}
;;;502    		}
;;;503    	else 
;;;504    		{
;;;505    		snmp_bat_flag[0]&=~0x0200;
;;;506    		if(snmp_bat_flag_puts[0]&0x0200) 
;;;507    			{
;;;508    			snmp_trap_send("BAT #1,equalising charge is off",5,8,15);
;;;509    			snmp_bat_flag_puts[0]&=~0x0200;
;;;510    			}
;;;511    		}
;;;512    
;;;513    	if(vz1_error)										//Уравнительный заряд заблокирован по вентиляции 
;;;514    		{
;;;515    		snmp_bat_flag[0]|=0x0400;
;;;516    		if((snmp_bat_flag_puts[0]&0x0400)==0) 
;;;517    			{
;;;518    			snmp_trap_send("BAT #1,equalising charge is blocked",5,8,16); 
;;;519    			snmp_bat_flag_puts[0]|=0x0400;
;;;520    			}
;;;521    		}
;;;522    	else 
;;;523    		{
;;;524    		snmp_bat_flag[0]&=~0x0400;
;;;525    		if(snmp_bat_flag_puts[0]&0x0400) 
;;;526    			{
;;;527    			snmp_trap_send("BAT #1,equalising charge is unblocked",5,8,17);
;;;528    			snmp_bat_flag_puts[0]&=~0x0400;
;;;529    			} 
;;;530    		}
;;;531    
;;;532    	if(vz2_stat!=vz2sOFF)								//Формовочный заряд 
;;;533    		{
;;;534    		snmp_bat_flag[0]|=0x0800;
;;;535    		if((snmp_bat_flag_puts[0]&0x0800)==0) 
;;;536    			{
;;;537    			snmp_trap_send("BAT #1,molding charge is on",5,8,18); 
;;;538    			snmp_bat_flag_puts[0]|=0x0800;
;;;539    			}
;;;540    		}
;;;541    	else 
;;;542    		{
;;;543    		snmp_bat_flag[0]&=~0x0800;
;;;544    		if(snmp_bat_flag_puts[0]&0x0800) 
;;;545    			{
;;;546    			snmp_trap_send("BAT #1,molding charge is off",5,8,19);
;;;547    			snmp_bat_flag_puts[0]&=~0x0800;
;;;548    			}
;;;549    		}
;;;550    
;;;551    	if(vz2_error) 										//Формовочный заряд заблокирован по вентиляции
;;;552    		{
;;;553    		snmp_bat_flag[0]|=0x1000;
;;;554    		if((snmp_bat_flag_puts[0]&0x1000)==0) 
;;;555    			{
;;;556    			snmp_trap_send("BAT #1,molding charge is blocked",5,8,20); 
;;;557    			snmp_bat_flag_puts[0]|=0x1000;
;;;558    			}
;;;559    		}
;;;560    	else 
;;;561    		{
;;;562    		snmp_bat_flag[0]&=~0x1000;
;;;563    		if(snmp_bat_flag_puts[0]&0x1000) 
;;;564    			{
;;;565    			snmp_trap_send("BAT #1,molding charge is unblocked",5,8,21);
;;;566    			snmp_bat_flag_puts[0]&=~0x1000;
;;;567    			} 
;;;568    		}
;;;569    	}
;;;570    else 
;;;571    	{
;;;572    	snmp_bat_flag[0]=0; 
000032  b101              CBZ      r1,|L5.54|
;;;573    	snmp_bat_flag_puts[0]=0;
000034  7091              STRB     r1,[r2,#2]
                  |L5.54|
;;;574    	}
;;;575    
;;;576    if(!snmp_bat_status[1])	 			//Батарея №2
000036  ea000301          AND      r3,r0,r1
00003a  07db              LSLS     r3,r3,#31
00003c  d027              BEQ      |L5.142|
;;;577    	{
;;;578    	if((bat[1]._Ub<(USIGN*10)))		//Снижение напряжения батареи ниже Uбсигн 
;;;579    		{
;;;580    		snmp_bat_flag[1]|=0x0001; 
;;;581    		if((snmp_bat_flag_puts[1]&0x0001)==0) 
;;;582    			{
;;;583    			snmp_trap_send("BAT #2 Alarm, battery is low",5,8,22); 
;;;584    			snmp_bat_flag_puts[1]|=0x0001;
;;;585    			}
;;;586    		}
;;;587    	else 
;;;588    		{
;;;589    		snmp_bat_flag[1]&=~0x0001; 
;;;590    		if(snmp_bat_flag_puts[1]&0x0001) 
;;;591    			{
;;;592    			snmp_trap_send("BAT #2 Alarm clear, battery is not low",5,8,23);
;;;593    			snmp_bat_flag_puts[1]&=~0x0001;
;;;594    			}
;;;595    		}
;;;596    
;;;597    	if(bat[1]._temper_stat&0x01)	//Повышенная температура батареи, первый порог - предупреждение
;;;598    		{
;;;599    		snmp_bat_flag[1]|=0x0002;
;;;600    		if((snmp_bat_flag_puts[0]&0x0002)==0) 
;;;601    			{
;;;602    			//snmp_trap_send("BAT #2 Warning, high battery temperature",5,8,24); 
;;;603    			snmp_bat_flag_puts[1]|=0x0002;
;;;604    			}
;;;605    		}
;;;606    	else 
;;;607    		{
;;;608    		snmp_bat_flag[1]&=~0x0002;
;;;609    		if(snmp_bat_flag_puts[1]&0x0002) 
;;;610    			{
;;;611    			//snmp_trap_send("BAT #2 Warning clear, battery temperature is normal",5,8,25);
;;;612    			snmp_bat_flag_puts[1]&=~0x02;
;;;613    			}
;;;614    		}
;;;615    
;;;616    	if(bat[1]._temper_stat&0x02)  	//Повышенная температура батареи, второй порог - авария
;;;617    		{
;;;618    		snmp_bat_flag[1]|=0x0004;
;;;619    		if((snmp_bat_flag_puts[1]&0x0004)==0) 
;;;620    			{
;;;621    			//snmp_trap_send("BAT #2 Alarm, high battery temperature",5,8,26); 
;;;622    			snmp_bat_flag_puts[1]|=0x0004;
;;;623    			}
;;;624    		}
;;;625    	else 
;;;626    		{
;;;627    		snmp_bat_flag[1]&=~0x0004;
;;;628    		if(snmp_bat_flag_puts[1]&0x0004) 
;;;629    			{
;;;630    			//snmp_trap_send("BAT #2 Alarm clear, battery temperature is normal",5,8,27);
;;;631    			snmp_bat_flag_puts[1]&=~0x0004;
;;;632    			}
;;;633    		}
;;;634    
;;;635    	if(bat[1]._Ib<(-IKB)) snmp_bat_flag[1]|=0x0008;		//Разряд батареи
;;;636    	else if(bat[1]._Ib>IKB) snmp_bat_flag[1]&=~0x0008;	//Заряд батареи
;;;637    
;;;638    	if((spc_stat==spcKE)&&(spc_bat==0))					//Контроль емкости батареи №1 
;;;639    		{
;;;640    		snmp_bat_flag[1]|=0x0010;
;;;641    		if((snmp_bat_flag_puts[1]&0x0010)==0) 
;;;642    			{
;;;643    			snmp_trap_send("BAT #2, capacity test started",5,8,28); 
;;;644    			snmp_bat_flag_puts[1]|=0x0010;
;;;645    			}
;;;646    		}
;;;647    	else 
;;;648    		{
;;;649    		snmp_bat_flag[1]&=~0x0010;
;;;650    		if(snmp_bat_flag_puts[1]&0x0010) 
;;;651    			{
;;;652    			snmp_trap_send("BAT #2, capacity test stopped",5,8,29);
;;;653    			snmp_bat_flag_puts[1]&=~0x0010;
;;;654    			}
;;;655    		}
;;;656    		
;;;657    	if(spc_stat==spcVZ)									//Выравнивающий заряд 
;;;658    		{
;;;659    		snmp_bat_flag[1]|=0x0020;
;;;660    		if((snmp_bat_flag_puts[1]&0x0020)==0) 
;;;661    			{
;;;662    			snmp_trap_send("BAT #2,leveling charge is started",5,8,30); 
;;;663    			snmp_bat_flag_puts[1]|=0x0020;
;;;664    			}
;;;665    		}
;;;666    	else 
;;;667    		{
;;;668    		snmp_bat_flag[1]&=~0x0020;
;;;669    		if(snmp_bat_flag_puts[1]&0x0020) 
;;;670    			{
;;;671    			snmp_trap_send("BAT #2,leveling charge is stopped",5,8,31);
;;;672    			snmp_bat_flag_puts[1]&=~0x0020;
;;;673    			}
;;;674    		}
;;;675    
;;;676    	if(vz_error)										 //Выравнивающий заряд заблокирован по вентиляции
;;;677    		{
;;;678    		snmp_bat_flag[1]|=0x0040;
;;;679    		if((snmp_bat_flag_puts[1]&0x0040)==0) 
;;;680    			{
;;;681    			snmp_trap_send("BAT #2,leveling charge is blocked",5,8,32); 
;;;682    			snmp_bat_flag_puts[1]|=0x0040;
;;;683    			}
;;;684    		}
;;;685    	else 
;;;686    		{
;;;687    		snmp_bat_flag[1]&=~0x0040;
;;;688    		if(snmp_bat_flag_puts[1]&0x0040) 
;;;689    			{
;;;690    			snmp_trap_send("BAT #2,leveling charge is unblocked",5,8,33);
;;;691    			snmp_bat_flag_puts[1]&=~0x0040;
;;;692    			} 
;;;693    		}
;;;694    
;;;695    	if(sp_ch_stat==scsWRK) 								//Ускореннный заряд
;;;696    		{
;;;697    		snmp_bat_flag[1]|=0x0080;
;;;698    		if((snmp_bat_flag_puts[1]&0x0080)==0) 
;;;699    			{
;;;700    			snmp_trap_send("BAT #2,speed charge is started",5,8,34); 
;;;701    			snmp_bat_flag_puts[1]|=0x0080;
;;;702    			}
;;;703    		}
;;;704    	else 
;;;705    		{
;;;706    		snmp_bat_flag[1]&=~0x0080;
;;;707    		if(snmp_bat_flag_puts[1]&0x0080) 
;;;708    			{
;;;709    			snmp_trap_send("BAT #2,speed charge is stopped",5,8,35);
;;;710    			snmp_bat_flag_puts[1]&=~0x0080;
;;;711    			}
;;;712    		}
;;;713    
;;;714    	if(sp_ch_error) 									//Ускореннный заряд заблокирован по вентиляции
;;;715    		{
;;;716    		snmp_bat_flag[1]|=0x0100;
;;;717    		if((snmp_bat_flag_puts[1]&0x0100)==0) 
;;;718    			{
;;;719    			snmp_trap_send("BAT #2,speed charge is blocked",5,8,36); 
;;;720    			snmp_bat_flag_puts[1]|=0x0100;
;;;721    			}
;;;722    		}
;;;723    	else 
;;;724    		{
;;;725    		snmp_bat_flag[1]&=~0x0100;
;;;726    		if(snmp_bat_flag_puts[1]&0x0100) 
;;;727    			{
;;;728    			snmp_trap_send("BAT #2,speed charge is unblocked",5,8,37);
;;;729    			snmp_bat_flag_puts[1]&=~0x0100;
;;;730    			} 
;;;731    		}
;;;732    
;;;733    	if(vz1_stat!=vz1sOFF)								//Уравнительный заряд 
;;;734    		{
;;;735    		snmp_bat_flag[1]|=0x0200;
;;;736    		if((snmp_bat_flag_puts[1]&0x0200)==0) 
;;;737    			{
;;;738    			snmp_trap_send("BAT #2,equalising charge is on",5,8,38); 
;;;739    			snmp_bat_flag_puts[1]|=0x0200;
;;;740    			}
;;;741    		}
;;;742    	else 
;;;743    		{
;;;744    		snmp_bat_flag[1]&=~0x0200;
;;;745    		if(snmp_bat_flag_puts[1]&0x0200) 
;;;746    			{
;;;747    			snmp_trap_send("BAT #2,equalising charge is off",5,8,39);
;;;748    			snmp_bat_flag_puts[1]&=~0x0200;
;;;749    			}
;;;750    		}
;;;751    
;;;752    	if(vz1_error)										//Уравнительный заряд заблокирован по вентиляции 
;;;753    		{
;;;754    		snmp_bat_flag[1]|=0x0400;
;;;755    		if((snmp_bat_flag_puts[1]&0x0400)==0) 
;;;756    			{
;;;757    			snmp_trap_send("BAT #2,equalising charge is blocked",5,8,40); 
;;;758    			snmp_bat_flag_puts[1]|=0x0400;
;;;759    			}
;;;760    		}
;;;761    	else 
;;;762    		{
;;;763    		snmp_bat_flag[1]&=~0x0400;
;;;764    		if(snmp_bat_flag_puts[1]&0x0400) 
;;;765    			{
;;;766    			snmp_trap_send("BAT #2,equalising charge is unblocked",5,8,41);
;;;767    			snmp_bat_flag_puts[1]&=~0x0400;
;;;768    			} 
;;;769    		}
;;;770    
;;;771    	if(vz2_stat!=vz2sOFF)								//Формовочный заряд 
;;;772    		{
;;;773    		snmp_bat_flag[1]|=0x0800;
;;;774    		if((snmp_bat_flag_puts[1]&0x0800)==0) 
;;;775    			{
;;;776    			snmp_trap_send("BAT #2,molding charge is on",5,8,42); 
;;;777    			snmp_bat_flag_puts[1]|=0x0800;
;;;778    			}
;;;779    		}
;;;780    	else 
;;;781    		{
;;;782    		snmp_bat_flag[1]&=~0x0800;
;;;783    		if(snmp_bat_flag_puts[1]&0x0800) 
;;;784    			{
;;;785    			snmp_trap_send("BAT #2,molding charge is off",5,8,43);
;;;786    			snmp_bat_flag_puts[1]&=~0x0800;
;;;787    			}
;;;788    		}
;;;789    
;;;790    	if(vz2_error) 										//Формовочный заряд заблокирован по вентиляции
;;;791    		{
;;;792    		snmp_bat_flag[1]|=0x1000;
;;;793    		if((snmp_bat_flag_puts[1]&0x1000)==0) 
;;;794    			{
;;;795    			snmp_trap_send("BAT #2,molding charge is blocked",5,8,44); 
;;;796    			snmp_bat_flag_puts[1]|=0x1000;
;;;797    			}
;;;798    		}
;;;799    	else 
;;;800    		{
;;;801    		snmp_bat_flag[1]&=~0x1000;
;;;802    		if(snmp_bat_flag_puts[1]&0x1000) 
;;;803    			{
;;;804    			snmp_trap_send("BAT #2,molding charge is unblocked",5,8,45);
;;;805    			snmp_bat_flag_puts[1]&=~0x1000;
;;;806    			} 
;;;807    		}
;;;808    	}
;;;809    else 
;;;810    	{
;;;811    	snmp_bat_flag[1]=0; 
00003e  78d0              LDRB     r0,[r2,#3]  ; plazma_inv
;;;812    	snmp_bat_flag_puts[1]=0;
000040  f1000001          ADD      r0,r0,#1
;;;813    	}
;;;814    /*
;;;815    if(!snmp_bat_status[1])
;;;816    	{
;;;817    	if((bat[1]._Ub<(USIGN*10))) 
;;;818    		{
;;;819    		snmp_bat_flag[1]|=0x01; 
;;;820    		if((snmp_bat_flag_puts[1]&0x01)==0) 
;;;821    			{
;;;822    			snmp_trap_send("BAT #2 Alarm, battery is low",5,8,0); 
;;;823    			snmp_bat_flag_puts[1]|=0x01;
;;;824    			}
;;;825    		}
;;;826    	else 
;;;827    		{
;;;828    		snmp_bat_flag[1]&=~0x01; 
;;;829    		if(snmp_bat_flag_puts[1]&0x01) 
;;;830    			{
;;;831    			snmp_trap_send("BAT #2 Alarm clear, battery is not low",5,8,1);
;;;832    			snmp_bat_flag_puts[1]&=~0x01;
;;;833    			}
;;;834    		}
;;;835    	if(bat[1]._temper_stat&0x01) 
;;;836    		{
;;;837    		snmp_bat_flag[1]|=0x02;
;;;838    		if((snmp_bat_flag_puts[1]&0x02)==0) 
;;;839    			{
;;;840    			snmp_trap_send("BAT #2 Alarm, high battery temperature",5,8,2); 
;;;841    			snmp_bat_flag_puts[1]|=0x02;
;;;842    			}
;;;843    		}
;;;844    	else 
;;;845    		{
;;;846    		snmp_bat_flag[1]&=~0x02;
;;;847    		if(snmp_bat_flag_puts[1]&0x02) 
;;;848    			{
;;;849    			snmp_trap_send("BAT #2 Alarm clear, battery temperature is normal",5,8,3);
;;;850    			snmp_bat_flag_puts[1]&=~0x02;
;;;851    			}
;;;852    		}
;;;853    	if(bat[1]._temper_stat&0x02) 
;;;854    		{
;;;855    		snmp_bat_flag[1]|=0x04;
;;;856    		if((snmp_bat_flag_puts[1]&0x04)==0) 
;;;857    			{
;;;858    			snmp_trap_send("BAT #2 Alarm, maximum battery temperature",5,8,4); 
;;;859    			snmp_bat_flag_puts[1]|=0x04;
;;;860    			}
;;;861    		}
;;;862    	else 
;;;863    		{
;;;864    		snmp_bat_flag[1]&=~0x04;
;;;865    		if(snmp_bat_flag_puts[1]&0x04) 
;;;866    			{
;;;867    			snmp_trap_send("BAT #2 Alarm clear, battery temperature is normal",5,8,5);
;;;868    			snmp_bat_flag_puts[1]&=~0x04;
;;;869    			}
;;;870    		}
;;;871    		
;;;872    	if(bat[1]._Ib<(-IKB))	snmp_bat_flag[1]|=0x80;
;;;873    	else if(bat[1]._Ib>IKB)snmp_bat_flag[1]&=~0x80;
;;;874    
;;;875    	if((spc_stat==spcKE)&&(spc_bat==1)) 
;;;876    		{
;;;877    		snmp_bat_flag[1]|=0x10;
;;;878    		if((snmp_bat_flag_puts[1]&0x10)==0) 
;;;879    			{
;;;880    			snmp_trap_send("BAT #2, capacity check enabled",5,8,6); 
;;;881    			snmp_bat_flag_puts[1]|=0x10;
;;;882    			}
;;;883    		}
;;;884    	else 
;;;885    		{
;;;886    		snmp_bat_flag[1]&=~0x10;
;;;887    		if(snmp_bat_flag_puts[1]&0x10) 
;;;888    			{
;;;889    			snmp_trap_send("BAT #2, capacity check disabled",5,8,7);
;;;890    			snmp_bat_flag_puts[1]&=~0x10;
;;;891    			}
;;;892    		}
;;;893    		
;;;894    	if(spc_stat==spcVZ) 
;;;895    		{
;;;896    		snmp_bat_flag[1]|=0x20;
;;;897    		if((snmp_bat_flag_puts[1]&0x20)==0) 
;;;898    			{
;;;899    			snmp_trap_send("BAT #2,equalizing charge is on",5,8,8); 
;;;900    			snmp_bat_flag_puts[1]|=0x20;
;;;901    			}
;;;902    		}
;;;903    	else 
;;;904    		{
;;;905    		snmp_bat_flag[1]&=~0x20;
;;;906    		if(snmp_bat_flag_puts[1]&0x20) 
;;;907    			{
;;;908    			snmp_trap_send("BAT #2,equalizing charge is off",5,8,9);
;;;909    			snmp_bat_flag_puts[1]&=~0x20;
;;;910    			}
;;;911    		}
;;;912    
;;;913    	if(vz_error) 
;;;914    		{
;;;915    		snmp_bat_flag[1]|=0x40;
;;;916    		if((snmp_bat_flag_puts[1]&0x40)==0) 
;;;917    			{
;;;918    			snmp_trap_send("BAT #2,equalizing charge blocked",5,8,10); 
;;;919    			snmp_bat_flag_puts[1]|=0x40;
;;;920    			}
;;;921    		}
;;;922    	else 
;;;923    		{
;;;924    		snmp_bat_flag[1]&=~0x40;
;;;925    		if(snmp_bat_flag_puts[1]&0x40) 
;;;926    			{
;;;927    			snmp_trap_send("BAT #2,equalizing charge is not blocked",5,8,11);
;;;928    			snmp_bat_flag_puts[1]&=~0x40;
;;;929    			} 
;;;930    		}
;;;931       }
;;;932    else 
;;;933    	{
;;;934    	snmp_bat_flag[1]=0; 
;;;935    	snmp_bat_flag_puts[1]=0;
;;;936    	} */
;;;937    }
000044  70d0              STRB     r0,[r2,#3]
000046  b134              CBZ      r4,|L5.86|
000048  2c01              CMP      r4,#1                 ;339
00004a  d00b              BEQ      |L5.100|
00004c  2c02              CMP      r4,#2                 ;339
00004e  d010              BEQ      |L5.114|
000050  2c03              CMP      r4,#3                 ;339
000052  d015              BEQ      |L5.128|
000054  e120              B        |L5.664|
                  |L5.86|
000056  2301              MOVS     r3,#1                 ;339
000058  461a              MOV      r2,r3                 ;341
00005a  210e              MOVS     r1,#0xe               ;341
00005c  a093              ADR      r0,|L5.684|
00005e  f7fffffe          BL       snmp_trap_send
000062  e119              B        |L5.664|
                  |L5.100|
000064  2301              MOVS     r3,#1                 ;341
000066  2202              MOVS     r2,#2                 ;341
000068  210e              MOVS     r1,#0xe               ;341
00006a  a097              ADR      r0,|L5.712|
00006c  f7fffffe          BL       snmp_trap_send
000070  e112              B        |L5.664|
                  |L5.114|
000072  2301              MOVS     r3,#1                 ;344
000074  2203              MOVS     r2,#3                 ;344
000076  210e              MOVS     r1,#0xe               ;344
000078  a09a              ADR      r0,|L5.740|
00007a  f7fffffe          BL       snmp_trap_send
00007e  e10b              B        |L5.664|
                  |L5.128|
000080  2301              MOVS     r3,#1                 ;345
000082  2204              MOVS     r2,#4                 ;345
000084  210e              MOVS     r1,#0xe               ;350
000086  a09e              ADR      r0,|L5.768|
000088  f7fffffe          BL       snmp_trap_send
00008c  e104              B        |L5.664|
                  |L5.142|
00008e  0783              LSLS     r3,r0,#30             ;353
000090  d529              BPL      |L5.230|
000092  078b              LSLS     r3,r1,#30             ;353
000094  d527              BPL      |L5.230|
000096  78d0              LDRB     r0,[r2,#3]            ;353  ; plazma_inv
000098  f1000001          ADD      r0,r0,#1              ;353
00009c  70d0              STRB     r0,[r2,#3]            ;354
00009e  b134              CBZ      r4,|L5.174|
0000a0  2c01              CMP      r4,#1                 ;354
0000a2  d00b              BEQ      |L5.188|
0000a4  2c02              CMP      r4,#2                 ;358
0000a6  d010              BEQ      |L5.202|
0000a8  2c03              CMP      r4,#3                 ;358
0000aa  d015              BEQ      |L5.216|
0000ac  e0f4              B        |L5.664|
                  |L5.174|
0000ae  2302              MOVS     r3,#2                 ;360
0000b0  2201              MOVS     r2,#1                 ;360
0000b2  210e              MOVS     r1,#0xe               ;361
0000b4  a099              ADR      r0,|L5.796|
0000b6  f7fffffe          BL       snmp_trap_send
0000ba  e0ed              B        |L5.664|
                  |L5.188|
0000bc  2302              MOVS     r3,#2                 ;364
0000be  461a              MOV      r2,r3                 ;364
0000c0  210e              MOVS     r1,#0xe               ;364
0000c2  a09d              ADR      r0,|L5.824|
0000c4  f7fffffe          BL       snmp_trap_send
0000c8  e0e6              B        |L5.664|
                  |L5.202|
0000ca  2302              MOVS     r3,#2                 ;370
0000cc  2203              MOVS     r2,#3                 ;370
0000ce  210e              MOVS     r1,#0xe               ;370
0000d0  a0a0              ADR      r0,|L5.852|
0000d2  f7fffffe          BL       snmp_trap_send
0000d6  e0df              B        |L5.664|
                  |L5.216|
0000d8  2302              MOVS     r3,#2                 ;377
0000da  2204              MOVS     r2,#4                 ;377
0000dc  210e              MOVS     r1,#0xe               ;379
0000de  a0a4              ADR      r0,|L5.880|
0000e0  f7fffffe          BL       snmp_trap_send
0000e4  e0d8              B        |L5.664|
                  |L5.230|
0000e6  0743              LSLS     r3,r0,#29             ;380
0000e8  d529              BPL      |L5.318|
0000ea  074b              LSLS     r3,r1,#29             ;380
0000ec  d527              BPL      |L5.318|
0000ee  78d0              LDRB     r0,[r2,#3]            ;383  ; plazma_inv
0000f0  f1000001          ADD      r0,r0,#1              ;383
0000f4  70d0              STRB     r0,[r2,#3]            ;388
0000f6  b134              CBZ      r4,|L5.262|
0000f8  2c01              CMP      r4,#1                 ;388
0000fa  d00b              BEQ      |L5.276|
0000fc  2c02              CMP      r4,#2                 ;389
0000fe  d010              BEQ      |L5.290|
000100  2c03              CMP      r4,#3                 ;389
000102  d015              BEQ      |L5.304|
000104  e0c8              B        |L5.664|
                  |L5.262|
000106  2303              MOVS     r3,#3                 ;392
000108  2201              MOVS     r2,#1                 ;392
00010a  210e              MOVS     r1,#0xe               ;396
00010c  a09f              ADR      r0,|L5.908|
00010e  f7fffffe          BL       snmp_trap_send
000112  e0c1              B        |L5.664|
                  |L5.276|
000114  2303              MOVS     r3,#3                 ;396
000116  2202              MOVS     r2,#2                 ;396
000118  210e              MOVS     r1,#0xe               ;396
00011a  a0a3              ADR      r0,|L5.936|
00011c  f7fffffe          BL       snmp_trap_send
000120  e0ba              B        |L5.664|
                  |L5.290|
000122  2303              MOVS     r3,#3                 ;396
000124  461a              MOV      r2,r3                 ;397
000126  210e              MOVS     r1,#0xe               ;397
000128  a0a6              ADR      r0,|L5.964|
00012a  f7fffffe          BL       snmp_trap_send
00012e  e0b3              B        |L5.664|
                  |L5.304|
000130  2303              MOVS     r3,#3                 ;399
000132  2204              MOVS     r2,#4                 ;399
000134  210e              MOVS     r1,#0xe               ;399
000136  a0aa              ADR      r0,|L5.992|
000138  f7fffffe          BL       snmp_trap_send
00013c  e0ac              B        |L5.664|
                  |L5.318|
00013e  0703              LSLS     r3,r0,#28             ;399
000140  d529              BPL      |L5.406|
000142  070b              LSLS     r3,r1,#28             ;410
000144  d527              BPL      |L5.406|
000146  78d0              LDRB     r0,[r2,#3]            ;410  ; plazma_inv
000148  f1000001          ADD      r0,r0,#1              ;411
00014c  70d0              STRB     r0,[r2,#3]            ;411
00014e  b134              CBZ      r4,|L5.350|
000150  2c01              CMP      r4,#1                 ;413
000152  d00b              BEQ      |L5.364|
000154  2c02              CMP      r4,#2                 ;413
000156  d010              BEQ      |L5.378|
000158  2c03              CMP      r4,#3                 ;413
00015a  d015              BEQ      |L5.392|
00015c  e09c              B        |L5.664|
                  |L5.350|
00015e  2304              MOVS     r3,#4                 ;414
000160  2201              MOVS     r2,#1                 ;414
000162  210e              MOVS     r1,#0xe               ;418
000164  a0a5              ADR      r0,|L5.1020|
000166  f7fffffe          BL       snmp_trap_send
00016a  e095              B        |L5.664|
                  |L5.364|
00016c  2304              MOVS     r3,#4                 ;429
00016e  2202              MOVS     r2,#2                 ;429
000170  210e              MOVS     r1,#0xe               ;429
000172  a0ab              ADR      r0,|L5.1056|
000174  f7fffffe          BL       snmp_trap_send
000178  e08e              B        |L5.664|
                  |L5.378|
00017a  2304              MOVS     r3,#4                 ;432
00017c  2203              MOVS     r2,#3                 ;432
00017e  210e              MOVS     r1,#0xe               ;432
000180  a0b0              ADR      r0,|L5.1092|
000182  f7fffffe          BL       snmp_trap_send
000186  e087              B        |L5.664|
                  |L5.392|
000188  2304              MOVS     r3,#4                 ;433
00018a  461a              MOV      r2,r3                 ;433
00018c  210e              MOVS     r1,#0xe               ;437
00018e  a0b6              ADR      r0,|L5.1128|
000190  f7fffffe          BL       snmp_trap_send
000194  e080              B        |L5.664|
                  |L5.406|
000196  06c3              LSLS     r3,r0,#27             ;439
000198  d529              BPL      |L5.494|
00019a  06cb              LSLS     r3,r1,#27             ;440
00019c  d527              BPL      |L5.494|
00019e  78d0              LDRB     r0,[r2,#3]            ;440  ; plazma_inv
0001a0  f1000001          ADD      r0,r0,#1              ;442
0001a4  70d0              STRB     r0,[r2,#3]            ;442
0001a6  b134              CBZ      r4,|L5.438|
0001a8  2c01              CMP      r4,#1                 ;442
0001aa  d00b              BEQ      |L5.452|
0001ac  2c02              CMP      r4,#2                 ;443
0001ae  d010              BEQ      |L5.466|
0001b0  2c03              CMP      r4,#3                 ;443
0001b2  d015              BEQ      |L5.480|
0001b4  e070              B        |L5.664|
                  |L5.438|
0001b6  2305              MOVS     r3,#5                 ;401
0001b8  2201              MOVS     r2,#1                 ;401
0001ba  210e              MOVS     r1,#0xe               ;401
0001bc  a0b3              ADR      r0,|L5.1164|
0001be  f7fffffe          BL       snmp_trap_send
0001c2  e069              B        |L5.664|
                  |L5.452|
0001c4  2305              MOVS     r3,#5                 ;404
0001c6  2202              MOVS     r2,#2                 ;404
0001c8  210e              MOVS     r1,#0xe               ;404
0001ca  a0b9              ADR      r0,|L5.1200|
0001cc  f7fffffe          BL       snmp_trap_send
0001d0  e062              B        |L5.664|
                  |L5.466|
0001d2  2305              MOVS     r3,#5                 ;405
0001d4  2203              MOVS     r2,#3                 ;405
0001d6  210e              MOVS     r1,#0xe               ;405
0001d8  a0be              ADR      r0,|L5.1236|
0001da  f7fffffe          BL       snmp_trap_send
0001de  e05b              B        |L5.664|
                  |L5.480|
0001e0  2305              MOVS     r3,#5                 ;420
0001e2  2204              MOVS     r2,#4                 ;421
0001e4  210e              MOVS     r1,#0xe               ;421
0001e6  a0c4              ADR      r0,|L5.1272|
0001e8  f7fffffe          BL       snmp_trap_send
0001ec  e054              B        |L5.664|
                  |L5.494|
0001ee  0683              LSLS     r3,r0,#26             ;423
0001f0  d529              BPL      |L5.582|
0001f2  068b              LSLS     r3,r1,#26             ;423
0001f4  d527              BPL      |L5.582|
0001f6  78d0              LDRB     r0,[r2,#3]            ;424  ; plazma_inv
0001f8  f1000001          ADD      r0,r0,#1              ;424
0001fc  70d0              STRB     r0,[r2,#3]            ;424
0001fe  b134              CBZ      r4,|L5.526|
000200  2c01              CMP      r4,#1                 ;448
000202  d00b              BEQ      |L5.540|
000204  2c02              CMP      r4,#2                 ;448
000206  d010              BEQ      |L5.554|
000208  2c03              CMP      r4,#3                 ;449
00020a  d015              BEQ      |L5.568|
00020c  e044              B        |L5.664|
                  |L5.526|
00020e  2306              MOVS     r3,#6                 ;451
000210  2201              MOVS     r2,#1                 ;451
000212  210e              MOVS     r1,#0xe               ;451
000214  a0c1              ADR      r0,|L5.1308|
000216  f7fffffe          BL       snmp_trap_send
00021a  e03d              B        |L5.664|
                  |L5.540|
00021c  2306              MOVS     r3,#6                 ;452
00021e  2202              MOVS     r2,#2                 ;452
000220  210e              MOVS     r1,#0xe               ;456
000222  a0c7              ADR      r0,|L5.1344|
000224  f7fffffe          BL       snmp_trap_send
000228  e036              B        |L5.664|
                  |L5.554|
00022a  2306              MOVS     r3,#6                 ;467
00022c  2203              MOVS     r2,#3                 ;467
00022e  210e              MOVS     r1,#0xe               ;467
000230  a0cc              ADR      r0,|L5.1380|
000232  f7fffffe          BL       snmp_trap_send
000236  e02f              B        |L5.664|
                  |L5.568|
000238  2306              MOVS     r3,#6                 ;470
00023a  2204              MOVS     r2,#4                 ;470
00023c  210e              MOVS     r1,#0xe               ;470
00023e  a0d2              ADR      r0,|L5.1416|
000240  f7fffffe          BL       snmp_trap_send
000244  e028              B        |L5.664|
                  |L5.582|
000246  b300              CBZ      r0,|L5.650|
000248  b9f9              CBNZ     r1,|L5.650|
00024a  78d0              LDRB     r0,[r2,#3]            ;475  ; plazma_inv
00024c  f1000001          ADD      r0,r0,#1              ;475
000250  70d0              STRB     r0,[r2,#3]            ;477
000252  b134              CBZ      r4,|L5.610|
000254  2c01              CMP      r4,#1                 ;477
000256  d00b              BEQ      |L5.624|
000258  2c02              CMP      r4,#2                 ;478
00025a  d010              BEQ      |L5.638|
00025c  2c03              CMP      r4,#3                 ;480
00025e  d015              BEQ      |L5.652|
000260  e01a              B        |L5.664|
                  |L5.610|
000262  2300              MOVS     r3,#0                 ;480
000264  2201              MOVS     r2,#1                 ;480
000266  210e              MOVS     r1,#0xe               ;480
000268  a0d0              ADR      r0,|L5.1452|
00026a  f7fffffe          BL       snmp_trap_send
00026e  e013              B        |L5.664|
                  |L5.624|
000270  2300              MOVS     r3,#0                 ;481
000272  2202              MOVS     r2,#2                 ;458
000274  210e              MOVS     r1,#0xe               ;458
000276  a0d2              ADR      r0,|L5.1472|
000278  f7fffffe          BL       snmp_trap_send
00027c  e00c              B        |L5.664|
                  |L5.638|
00027e  2300              MOVS     r3,#0                 ;459
000280  2203              MOVS     r2,#3                 ;461
000282  210e              MOVS     r1,#0xe               ;461
000284  a0d3              ADR      r0,|L5.1492|
000286  f7fffffe          BL       snmp_trap_send
                  |L5.650|
00028a  e005              B        |L5.664|
                  |L5.652|
00028c  2300              MOVS     r3,#0                 ;462
00028e  2204              MOVS     r2,#4                 ;462
000290  210e              MOVS     r1,#0xe               ;462
000292  a0d5              ADR      r0,|L5.1512|
000294  f7fffffe          BL       snmp_trap_send
                  |L5.664|
000298  f8150f46          LDRB     r0,[r5,#0x46]!        ;486
00029c  7068              STRB     r0,[r5,#1]            ;486
00029e  bd70              POP      {r4-r6,pc}            ;487
;;;938    
                          ENDP

                  |L5.672|
                          DCD      first_inv_slot
                  |L5.676|
                          DCD      inv
                  |L5.680|
                          DCD      ||area_number.25||+0xbc
                  |L5.684|
0002ac  496e7665          DCB      "Invertor #1 Alarm, overload",0
0002b0  72746f72
0002b4  20233120
0002b8  416c6172
0002bc  6d2c206f
0002c0  7665726c
0002c4  6f616400
                  |L5.712|
0002c8  496e7665          DCB      "Invertor #2 Alarm, overload",0
0002cc  72746f72
0002d0  20233220
0002d4  416c6172
0002d8  6d2c206f
0002dc  7665726c
0002e0  6f616400
                  |L5.740|
0002e4  496e7665          DCB      "Invertor #3 Alarm, overload",0
0002e8  72746f72
0002ec  20233320
0002f0  416c6172
0002f4  6d2c206f
0002f8  7665726c
0002fc  6f616400
                  |L5.768|
000300  496e7665          DCB      "Invertor #4 Alarm, overload",0
000304  72746f72
000308  20233420
00030c  416c6172
000310  6d2c206f
000314  7665726c
000318  6f616400
                  |L5.796|
00031c  496e7665          DCB      "Invertor #1 Alarm, overheat",0
000320  72746f72
000324  20233120
000328  416c6172
00032c  6d2c206f
000330  76657268
000334  65617400
                  |L5.824|
000338  496e7665          DCB      "Invertor #2 Alarm, overheat",0
00033c  72746f72
000340  20233220
000344  416c6172
000348  6d2c206f
00034c  76657268
000350  65617400
                  |L5.852|
000354  496e7665          DCB      "Invertor #3 Alarm, overheat",0
000358  72746f72
00035c  20233320
000360  416c6172
000364  6d2c206f
000368  76657268
00036c  65617400
                  |L5.880|
000370  496e7665          DCB      "Invertor #4 Alarm, overheat",0
000374  72746f72
000378  20233420
00037c  416c6172
000380  6d2c206f
000384  76657268
000388  65617400
                  |L5.908|
00038c  496e7665          DCB      "Invertor #1 Alarm, is warm",0
000390  72746f72
000394  20233120
000398  416c6172
00039c  6d2c2069
0003a0  73207761
0003a4  726d00  
0003a7  00                DCB      0
                  |L5.936|
0003a8  496e7665          DCB      "Invertor #2 Alarm, is warm",0
0003ac  72746f72
0003b0  20233220
0003b4  416c6172
0003b8  6d2c2069
0003bc  73207761
0003c0  726d00  
0003c3  00                DCB      0
                  |L5.964|
0003c4  496e7665          DCB      "Invertor #3 Alarm, is warm",0
0003c8  72746f72
0003cc  20233320
0003d0  416c6172
0003d4  6d2c2069
0003d8  73207761
0003dc  726d00  
0003df  00                DCB      0
                  |L5.992|
0003e0  496e7665          DCB      "Invertor #4 Alarm, is warm",0
0003e4  72746f72
0003e8  20233420
0003ec  416c6172
0003f0  6d2c2069
0003f4  73207761
0003f8  726d00  
0003fb  00                DCB      0
                  |L5.1020|
0003fc  496e7665          DCB      "Invertor #1 Alarm, voltage is up",0
000400  72746f72
000404  20233120
000408  416c6172
00040c  6d2c2076
000410  6f6c7461
000414  67652069
000418  73207570
00041c  00      
00041d  00                DCB      0
00041e  00                DCB      0
00041f  00                DCB      0
                  |L5.1056|
000420  496e7665          DCB      "Invertor #2 Alarm, voltage is up",0
000424  72746f72
000428  20233220
00042c  416c6172
000430  6d2c2076
000434  6f6c7461
000438  67652069
00043c  73207570
000440  00      
000441  00                DCB      0
000442  00                DCB      0
000443  00                DCB      0
                  |L5.1092|
000444  496e7665          DCB      "Invertor #3 Alarm, voltage is up",0
000448  72746f72
00044c  20233320
000450  416c6172
000454  6d2c2076
000458  6f6c7461
00045c  67652069
000460  73207570
000464  00      
000465  00                DCB      0
000466  00                DCB      0
000467  00                DCB      0
                  |L5.1128|
000468  496e7665          DCB      "Invertor #4 Alarm, voltage is up",0
00046c  72746f72
000470  20233420
000474  416c6172
000478  6d2c2076
00047c  6f6c7461
000480  67652069
000484  73207570
000488  00      
000489  00                DCB      0
00048a  00                DCB      0
00048b  00                DCB      0
                  |L5.1164|
00048c  496e7665          DCB      "Invertor #1 Alarm, voltage is down",0
000490  72746f72
000494  20233120
000498  416c6172
00049c  6d2c2076
0004a0  6f6c7461
0004a4  67652069
0004a8  7320646f
0004ac  776e00  
0004af  00                DCB      0
                  |L5.1200|
0004b0  496e7665          DCB      "Invertor #2 Alarm, voltage is down",0
0004b4  72746f72
0004b8  20233220
0004bc  416c6172
0004c0  6d2c2076
0004c4  6f6c7461
0004c8  67652069
0004cc  7320646f
0004d0  776e00  
0004d3  00                DCB      0
                  |L5.1236|
0004d4  496e7665          DCB      "Invertor #3 Alarm, voltage is down",0
0004d8  72746f72
0004dc  20233320
0004e0  416c6172
0004e4  6d2c2076
0004e8  6f6c7461
0004ec  67652069
0004f0  7320646f
0004f4  776e00  
0004f7  00                DCB      0
                  |L5.1272|
0004f8  496e7665          DCB      "Invertor #4 Alarm, voltage is down",0
0004fc  72746f72
000500  20233420
000504  416c6172
000508  6d2c2076
00050c  6f6c7461
000510  67652069
000514  7320646f
000518  776e00  
00051b  00                DCB      0
                  |L5.1308|
00051c  496e7665          DCB      "Invertor #1 Alarm, output is offed",0
000520  72746f72
000524  20233120
000528  416c6172
00052c  6d2c206f
000530  75747075
000534  74206973
000538  206f6666
00053c  656400  
00053f  00                DCB      0
                  |L5.1344|
000540  496e7665          DCB      "Invertor #2 Alarm, output is offed",0
000544  72746f72
000548  20233220
00054c  416c6172
000550  6d2c206f
000554  75747075
000558  74206973
00055c  206f6666
000560  656400  
000563  00                DCB      0
                  |L5.1380|
000564  496e7665          DCB      "Invertor #3 Alarm, output is offed",0
000568  72746f72
00056c  20233320
000570  416c6172
000574  6d2c206f
000578  75747075
00057c  74206973
000580  206f6666
000584  656400  
000587  00                DCB      0
                  |L5.1416|
000588  496e7665          DCB      "Invertor #4 Alarm, output is offed",0
00058c  72746f72
000590  20233420
000594  416c6172
000598  6d2c206f
00059c  75747075
0005a0  74206973
0005a4  206f6666
0005a8  656400  
0005ab  00                DCB      0
                  |L5.1452|
0005ac  496e7665          DCB      "Invertor #1 is norm",0
0005b0  72746f72
0005b4  20233120
0005b8  6973206e
0005bc  6f726d00
                  |L5.1472|
0005c0  496e7665          DCB      "Invertor #2 is norm",0
0005c4  72746f72
0005c8  20233220
0005cc  6973206e
0005d0  6f726d00
                  |L5.1492|
0005d4  496e7665          DCB      "Invertor #3 is norm",0
0005d8  72746f72
0005dc  20233320
0005e0  6973206e
0005e4  6f726d00
                  |L5.1512|
0005e8  496e7665          DCB      "Invertor #4 is norm",0
0005ec  72746f72
0005f0  20233420
0005f4  6973206e
0005f8  6f726d00

                          AREA ||area_number.6||, CODE, READONLY, ALIGN=2

                          EXPORTAS ||area_number.6||, ||.text||
                  klimat_hndl PROC
;;;326    // заполнение флагов для АКБ
;;;327    void bat_flag (void)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;328    {  
;;;329    if(spc_stat!=spcVZ) 
000004  4d66              LDR      r5,|L6.416|
;;;330    	{
;;;331    	vz_error=0;
000006  4867              LDR      r0,|L6.420|
000008  4c67              LDR      r4,|L6.424|
00000a  f9b51000          LDRSH    r1,[r5,#0]            ;329  ; t_box
00000e  f9b02000          LDRSH    r2,[r0,#0]            ;329  ; TBOXMAX
;;;332    	sp_ch_error=0;
000012  f9b40000          LDRSH    r0,[r4,#0]
;;;333    	vz1_error=0;
;;;334    	vz2_error=0;
000016  4291              CMP      r1,r2
;;;335    	}
;;;336    
;;;337    if(!snmp_bat_status[0])	 			//Батарея №1
000018  dd03              BLE      |L6.34|
00001a  f1000001          ADD      r0,r0,#1
;;;338    	{
;;;339    	if((bat[0]._Ub<(USIGN*10)))		//Снижение напряжения батареи ниже Uбсигн 
00001e  8020              STRH     r0,[r4,#0]
000020  e003              B        |L6.42|
                  |L6.34|
000022  da02              BGE      |L6.42|
000024  f1a00001          SUB      r0,r0,#1              ;337
;;;340    		{
;;;341    		snmp_bat_flag[0]|=0x0001; 
;;;342    		if((snmp_bat_flag_puts[0]&0x0001)==0) 
;;;343    			{
;;;344    			snmp_trap_send("BAT #1 Alarm, battery is low",5,8,0); 
;;;345    			snmp_bat_flag_puts[0]|=0x0001;
;;;346    			}
;;;347    		}
;;;348    	else 
;;;349    		{
;;;350    		snmp_bat_flag[0]&=~0x0001; 
;;;351    		if(snmp_bat_flag_puts[0]&0x0001) 
;;;352    			{
;;;353    			snmp_trap_send("BAT #1 Alarm clear, battery is not low",5,8,1);
;;;354    			snmp_bat_flag_puts[0]&=~0x0001;
;;;355    			}
;;;356    		}
;;;357    
;;;358    	if(bat[0]._temper_stat&0x01)	//Повышенная температура батареи, первый порог - предупреждение
;;;359    		{
;;;360    		snmp_bat_flag[0]|=0x0002;
;;;361    		if((snmp_bat_flag_puts[0]&0x0002)==0) 
;;;362    			{
;;;363    			//snmp_trap_send("BAT #1 Warning, high battery temperature",5,8,2); 
;;;364    			snmp_bat_flag_puts[0]|=0x0002;
;;;365    			}
;;;366    		}
;;;367    	else 
;;;368    		{
;;;369    		snmp_bat_flag[0]&=~0x0002;
;;;370    		if(snmp_bat_flag_puts[0]&0x0002) 
;;;371    			{
;;;372    			//snmp_trap_send("BAT #1 Warning clear, battery temperature is normal",5,8,3);
;;;373    			snmp_bat_flag_puts[0]&=~0x02;
;;;374    			}
;;;375    		}
;;;376    
;;;377    	if(bat[0]._temper_stat&0x02)  	//Повышенная температура батареи, второй порог - авария
;;;378    		{
;;;379    		snmp_bat_flag[0]|=0x0004;
;;;380    		if((snmp_bat_flag_puts[0]&0x0004)==0) 
;;;381    			{
;;;382    			//snmp_trap_send("BAT #1 Alarm, high battery temperature",5,8,4); 
;;;383    			snmp_bat_flag_puts[0]|=0x0004;
;;;384    			}
;;;385    		}
;;;386    	else 
;;;387    		{
;;;388    		snmp_bat_flag[0]&=~0x0004;
;;;389    		if(snmp_bat_flag_puts[0]&0x0004) 
;;;390    			{
;;;391    			//snmp_trap_send("BAT #1 Alarm clear, battery temperature is normal",5,8,5);
;;;392    			snmp_bat_flag_puts[0]&=~0x0004;
;;;393    			}
;;;394    		}
;;;395    
;;;396    	if(bat[0]._Ib<(-IKB)) snmp_bat_flag[0]|=0x0008;		//Разряд батареи
000028  8020              STRH     r0,[r4,#0]
                  |L6.42|
00002a  2206              MOVS     r2,#6
00002c  2100              MOVS     r1,#0                 ;341
00002e  485e              LDR      r0,|L6.424|
000030  f7fffffe          BL       gran
;;;397    	else if(bat[0]._Ib>IKB) snmp_bat_flag[0]&=~0x0008;	//Заряд батареи
;;;398    
;;;399    	if((spc_stat==spcKE)&&(spc_bat==0))					//Контроль емкости батареи №1 
;;;400    		{
;;;401    		snmp_bat_flag[0]|=0x0010;
;;;402    		if((snmp_bat_flag_puts[0]&0x0010)==0) 
;;;403    			{
;;;404    			snmp_trap_send("BAT #1, capacity test started",5,8,6); 
;;;405    			snmp_bat_flag_puts[0]|=0x0010;
;;;406    			}
;;;407    		}
;;;408    	else 
;;;409    		{
;;;410    		snmp_bat_flag[0]&=~0x0010;
;;;411    		if(snmp_bat_flag_puts[0]&0x0010) 
;;;412    			{
;;;413    			snmp_trap_send("BAT #1, capacity test stopped",5,8,7);
;;;414    			snmp_bat_flag_puts[0]&=~0x0010;
;;;415    			}
;;;416    		}
;;;417    		
;;;418    	if(spc_stat==spcVZ)									//Выравнивающий заряд 
;;;419    		{
;;;420    		snmp_bat_flag[0]|=0x0020;
;;;421    		if((snmp_bat_flag_puts[0]&0x0020)==0) 
;;;422    			{
;;;423    			snmp_trap_send("BAT #1,leveling charge is started",5,8,8); 
;;;424    			snmp_bat_flag_puts[0]|=0x0020;
;;;425    			}
;;;426    		}
;;;427    	else 
;;;428    		{
;;;429    		snmp_bat_flag[0]&=~0x0020;
;;;430    		if(snmp_bat_flag_puts[0]&0x0020) 
;;;431    			{
;;;432    			snmp_trap_send("BAT #1,leveling charge is stopped",5,8,9);
;;;433    			snmp_bat_flag_puts[0]&=~0x0020;
;;;434    			}
;;;435    		}
;;;436    
;;;437    	if(vz_error)										 //Выравнивающий заряд заблокирован по вентиляции
;;;438    		{
;;;439    		snmp_bat_flag[0]|=0x0040;
;;;440    		if((snmp_bat_flag_puts[0]&0x0040)==0) 
;;;441    			{
;;;442    			snmp_trap_send("BAT #1,leveling charge is blocked",5,8,10); 
;;;443    			snmp_bat_flag_puts[0]|=0x0040;
;;;444    			}
;;;445    		}
;;;446    	else 
;;;447    		{
;;;448    		snmp_bat_flag[0]&=~0x0040;
;;;449    		if(snmp_bat_flag_puts[0]&0x0040) 
;;;450    			{
;;;451    			snmp_trap_send("BAT #1,leveling charge is unblocked",5,8,11);
;;;452    			snmp_bat_flag_puts[0]&=~0x0040;
;;;453    			} 
;;;454    		}
;;;455    
;;;456    	if(sp_ch_stat==scsWRK) 								//Ускореннный заряд
;;;457    		{
;;;458    		snmp_bat_flag[0]|=0x0080;
;;;459    		if((snmp_bat_flag_puts[0]&0x0080)==0) 
;;;460    			{
;;;461    			snmp_trap_send("BAT #1,speed charge is started",5,8,10); 
;;;462    			snmp_bat_flag_puts[0]|=0x0080;
;;;463    			}
;;;464    		}
;;;465    	else 
;;;466    		{
;;;467    		snmp_bat_flag[0]&=~0x0080;
;;;468    		if(snmp_bat_flag_puts[0]&0x0080) 
;;;469    			{
;;;470    			snmp_trap_send("BAT #1,speed charge is stopped",5,8,11);
;;;471    			snmp_bat_flag_puts[0]&=~0x0080;
;;;472    			}
;;;473    		}
;;;474    
;;;475    	if(sp_ch_error) 									//Ускореннный заряд заблокирован по вентиляции
;;;476    		{
;;;477    		snmp_bat_flag[0]|=0x0100;
;;;478    		if((snmp_bat_flag_puts[0]&0x0100)==0) 
;;;479    			{
;;;480    			snmp_trap_send("BAT #1,speed charge is blocked",5,8,12); 
;;;481    			snmp_bat_flag_puts[0]|=0x0100;
;;;482    			}
;;;483    		}
;;;484    	else 
;;;485    		{
;;;486    		snmp_bat_flag[0]&=~0x0100;
;;;487    		if(snmp_bat_flag_puts[0]&0x0100) 
;;;488    			{
;;;489    			snmp_trap_send("BAT #1,speed charge is unblocked",5,8,13);
;;;490    			snmp_bat_flag_puts[0]&=~0x0100;
;;;491    			} 
;;;492    		}
;;;493    
;;;494    	if(vz1_stat!=vz1sOFF)								//Уравнительный заряд 
;;;495    		{
;;;496    		snmp_bat_flag[0]|=0x0200;
;;;497    		if((snmp_bat_flag_puts[0]&0x0200)==0) 
;;;498    			{
;;;499    			snmp_trap_send("BAT #1,equalising charge is on",5,8,14); 
;;;500    			snmp_bat_flag_puts[0]|=0x0200;
;;;501    			}
;;;502    		}
;;;503    	else 
;;;504    		{
;;;505    		snmp_bat_flag[0]&=~0x0200;
;;;506    		if(snmp_bat_flag_puts[0]&0x0200) 
;;;507    			{
;;;508    			snmp_trap_send("BAT #1,equalising charge is off",5,8,15);
;;;509    			snmp_bat_flag_puts[0]&=~0x0200;
;;;510    			}
;;;511    		}
;;;512    
;;;513    	if(vz1_error)										//Уравнительный заряд заблокирован по вентиляции 
;;;514    		{
;;;515    		snmp_bat_flag[0]|=0x0400;
;;;516    		if((snmp_bat_flag_puts[0]&0x0400)==0) 
;;;517    			{
;;;518    			snmp_trap_send("BAT #1,equalising charge is blocked",5,8,16); 
;;;519    			snmp_bat_flag_puts[0]|=0x0400;
;;;520    			}
;;;521    		}
;;;522    	else 
;;;523    		{
;;;524    		snmp_bat_flag[0]&=~0x0400;
;;;525    		if(snmp_bat_flag_puts[0]&0x0400) 
;;;526    			{
;;;527    			snmp_trap_send("BAT #1,equalising charge is unblocked",5,8,17);
;;;528    			snmp_bat_flag_puts[0]&=~0x0400;
;;;529    			} 
;;;530    		}
;;;531    
;;;532    	if(vz2_stat!=vz2sOFF)								//Формовочный заряд 
;;;533    		{
;;;534    		snmp_bat_flag[0]|=0x0800;
;;;535    		if((snmp_bat_flag_puts[0]&0x0800)==0) 
;;;536    			{
;;;537    			snmp_trap_send("BAT #1,molding charge is on",5,8,18); 
;;;538    			snmp_bat_flag_puts[0]|=0x0800;
;;;539    			}
;;;540    		}
;;;541    	else 
;;;542    		{
;;;543    		snmp_bat_flag[0]&=~0x0800;
;;;544    		if(snmp_bat_flag_puts[0]&0x0800) 
;;;545    			{
;;;546    			snmp_trap_send("BAT #1,molding charge is off",5,8,19);
;;;547    			snmp_bat_flag_puts[0]&=~0x0800;
;;;548    			}
;;;549    		}
;;;550    
;;;551    	if(vz2_error) 										//Формовочный заряд заблокирован по вентиляции
;;;552    		{
;;;553    		snmp_bat_flag[0]|=0x1000;
;;;554    		if((snmp_bat_flag_puts[0]&0x1000)==0) 
;;;555    			{
;;;556    			snmp_trap_send("BAT #1,molding charge is blocked",5,8,20); 
;;;557    			snmp_bat_flag_puts[0]|=0x1000;
;;;558    			}
;;;559    		}
;;;560    	else 
;;;561    		{
;;;562    		snmp_bat_flag[0]&=~0x1000;
;;;563    		if(snmp_bat_flag_puts[0]&0x1000) 
;;;564    			{
;;;565    			snmp_trap_send("BAT #1,molding charge is unblocked",5,8,21);
;;;566    			snmp_bat_flag_puts[0]&=~0x1000;
;;;567    			} 
;;;568    		}
;;;569    	}
;;;570    else 
;;;571    	{
;;;572    	snmp_bat_flag[0]=0; 
;;;573    	snmp_bat_flag_puts[0]=0;
000034  f9b40000          LDRSH    r0,[r4,#0]  ; av_tbox_cnt
;;;574    	}
;;;575    
;;;576    if(!snmp_bat_status[1])	 			//Батарея №2
000038  495c              LDR      r1,|L6.428|
00003a  2601              MOVS     r6,#1
00003c  2805              CMP      r0,#5
;;;577    	{
;;;578    	if((bat[1]._Ub<(USIGN*10)))		//Снижение напряжения батареи ниже Uбсигн 
;;;579    		{
;;;580    		snmp_bat_flag[1]|=0x0001; 
;;;581    		if((snmp_bat_flag_puts[1]&0x0001)==0) 
;;;582    			{
;;;583    			snmp_trap_send("BAT #2 Alarm, battery is low",5,8,22); 
;;;584    			snmp_bat_flag_puts[1]|=0x0001;
;;;585    			}
;;;586    		}
;;;587    	else 
;;;588    		{
;;;589    		snmp_bat_flag[1]&=~0x0001; 
;;;590    		if(snmp_bat_flag_puts[1]&0x0001) 
;;;591    			{
;;;592    			snmp_trap_send("BAT #2 Alarm clear, battery is not low",5,8,23);
;;;593    			snmp_bat_flag_puts[1]&=~0x0001;
;;;594    			}
;;;595    		}
;;;596    
;;;597    	if(bat[1]._temper_stat&0x01)	//Повышенная температура батареи, первый порог - предупреждение
;;;598    		{
;;;599    		snmp_bat_flag[1]|=0x0002;
;;;600    		if((snmp_bat_flag_puts[0]&0x0002)==0) 
;;;601    			{
;;;602    			//snmp_trap_send("BAT #2 Warning, high battery temperature",5,8,24); 
;;;603    			snmp_bat_flag_puts[1]|=0x0002;
;;;604    			}
;;;605    		}
;;;606    	else 
;;;607    		{
;;;608    		snmp_bat_flag[1]&=~0x0002;
;;;609    		if(snmp_bat_flag_puts[1]&0x0002) 
;;;610    			{
;;;611    			//snmp_trap_send("BAT #2 Warning clear, battery temperature is normal",5,8,25);
;;;612    			snmp_bat_flag_puts[1]&=~0x02;
;;;613    			}
;;;614    		}
;;;615    
;;;616    	if(bat[1]._temper_stat&0x02)  	//Повышенная температура батареи, второй порог - авария
;;;617    		{
;;;618    		snmp_bat_flag[1]|=0x0004;
;;;619    		if((snmp_bat_flag_puts[1]&0x0004)==0) 
;;;620    			{
;;;621    			//snmp_trap_send("BAT #2 Alarm, high battery temperature",5,8,26); 
;;;622    			snmp_bat_flag_puts[1]|=0x0004;
;;;623    			}
;;;624    		}
;;;625    	else 
;;;626    		{
;;;627    		snmp_bat_flag[1]&=~0x0004;
;;;628    		if(snmp_bat_flag_puts[1]&0x0004) 
;;;629    			{
;;;630    			//snmp_trap_send("BAT #2 Alarm clear, battery temperature is normal",5,8,27);
;;;631    			snmp_bat_flag_puts[1]&=~0x0004;
;;;632    			}
;;;633    		}
;;;634    
;;;635    	if(bat[1]._Ib<(-IKB)) snmp_bat_flag[1]|=0x0008;		//Разряд батареи
;;;636    	else if(bat[1]._Ib>IKB) snmp_bat_flag[1]&=~0x0008;	//Заряд батареи
;;;637    
;;;638    	if((spc_stat==spcKE)&&(spc_bat==0))					//Контроль емкости батареи №1 
;;;639    		{
;;;640    		snmp_bat_flag[1]|=0x0010;
;;;641    		if((snmp_bat_flag_puts[1]&0x0010)==0) 
;;;642    			{
;;;643    			snmp_trap_send("BAT #2, capacity test started",5,8,28); 
;;;644    			snmp_bat_flag_puts[1]|=0x0010;
;;;645    			}
;;;646    		}
;;;647    	else 
;;;648    		{
;;;649    		snmp_bat_flag[1]&=~0x0010;
;;;650    		if(snmp_bat_flag_puts[1]&0x0010) 
;;;651    			{
;;;652    			snmp_trap_send("BAT #2, capacity test stopped",5,8,29);
;;;653    			snmp_bat_flag_puts[1]&=~0x0010;
;;;654    			}
;;;655    		}
;;;656    		
;;;657    	if(spc_stat==spcVZ)									//Выравнивающий заряд 
;;;658    		{
;;;659    		snmp_bat_flag[1]|=0x0020;
;;;660    		if((snmp_bat_flag_puts[1]&0x0020)==0) 
;;;661    			{
;;;662    			snmp_trap_send("BAT #2,leveling charge is started",5,8,30); 
;;;663    			snmp_bat_flag_puts[1]|=0x0020;
;;;664    			}
;;;665    		}
;;;666    	else 
;;;667    		{
;;;668    		snmp_bat_flag[1]&=~0x0020;
;;;669    		if(snmp_bat_flag_puts[1]&0x0020) 
;;;670    			{
;;;671    			snmp_trap_send("BAT #2,leveling charge is stopped",5,8,31);
;;;672    			snmp_bat_flag_puts[1]&=~0x0020;
;;;673    			}
;;;674    		}
;;;675    
;;;676    	if(vz_error)										 //Выравнивающий заряд заблокирован по вентиляции
;;;677    		{
;;;678    		snmp_bat_flag[1]|=0x0040;
;;;679    		if((snmp_bat_flag_puts[1]&0x0040)==0) 
;;;680    			{
;;;681    			snmp_trap_send("BAT #2,leveling charge is blocked",5,8,32); 
;;;682    			snmp_bat_flag_puts[1]|=0x0040;
;;;683    			}
;;;684    		}
;;;685    	else 
;;;686    		{
;;;687    		snmp_bat_flag[1]&=~0x0040;
;;;688    		if(snmp_bat_flag_puts[1]&0x0040) 
;;;689    			{
;;;690    			snmp_trap_send("BAT #2,leveling charge is unblocked",5,8,33);
;;;691    			snmp_bat_flag_puts[1]&=~0x0040;
;;;692    			} 
;;;693    		}
;;;694    
;;;695    	if(sp_ch_stat==scsWRK) 								//Ускореннный заряд
;;;696    		{
;;;697    		snmp_bat_flag[1]|=0x0080;
;;;698    		if((snmp_bat_flag_puts[1]&0x0080)==0) 
;;;699    			{
;;;700    			snmp_trap_send("BAT #2,speed charge is started",5,8,34); 
;;;701    			snmp_bat_flag_puts[1]|=0x0080;
;;;702    			}
;;;703    		}
;;;704    	else 
;;;705    		{
;;;706    		snmp_bat_flag[1]&=~0x0080;
;;;707    		if(snmp_bat_flag_puts[1]&0x0080) 
;;;708    			{
;;;709    			snmp_trap_send("BAT #2,speed charge is stopped",5,8,35);
;;;710    			snmp_bat_flag_puts[1]&=~0x0080;
;;;711    			}
;;;712    		}
;;;713    
;;;714    	if(sp_ch_error) 									//Ускореннный заряд заблокирован по вентиляции
;;;715    		{
;;;716    		snmp_bat_flag[1]|=0x0100;
;;;717    		if((snmp_bat_flag_puts[1]&0x0100)==0) 
;;;718    			{
;;;719    			snmp_trap_send("BAT #2,speed charge is blocked",5,8,36); 
;;;720    			snmp_bat_flag_puts[1]|=0x0100;
;;;721    			}
;;;722    		}
;;;723    	else 
;;;724    		{
;;;725    		snmp_bat_flag[1]&=~0x0100;
;;;726    		if(snmp_bat_flag_puts[1]&0x0100) 
;;;727    			{
;;;728    			snmp_trap_send("BAT #2,speed charge is unblocked",5,8,37);
;;;729    			snmp_bat_flag_puts[1]&=~0x0100;
;;;730    			} 
;;;731    		}
;;;732    
;;;733    	if(vz1_stat!=vz1sOFF)								//Уравнительный заряд 
;;;734    		{
;;;735    		snmp_bat_flag[1]|=0x0200;
;;;736    		if((snmp_bat_flag_puts[1]&0x0200)==0) 
;;;737    			{
;;;738    			snmp_trap_send("BAT #2,equalising charge is on",5,8,38); 
;;;739    			snmp_bat_flag_puts[1]|=0x0200;
;;;740    			}
;;;741    		}
;;;742    	else 
;;;743    		{
;;;744    		snmp_bat_flag[1]&=~0x0200;
;;;745    		if(snmp_bat_flag_puts[1]&0x0200) 
;;;746    			{
;;;747    			snmp_trap_send("BAT #2,equalising charge is off",5,8,39);
;;;748    			snmp_bat_flag_puts[1]&=~0x0200;
;;;749    			}
;;;750    		}
;;;751    
;;;752    	if(vz1_error)										//Уравнительный заряд заблокирован по вентиляции 
;;;753    		{
;;;754    		snmp_bat_flag[1]|=0x0400;
;;;755    		if((snmp_bat_flag_puts[1]&0x0400)==0) 
;;;756    			{
;;;757    			snmp_trap_send("BAT #2,equalising charge is blocked",5,8,40); 
;;;758    			snmp_bat_flag_puts[1]|=0x0400;
;;;759    			}
;;;760    		}
;;;761    	else 
;;;762    		{
;;;763    		snmp_bat_flag[1]&=~0x0400;
;;;764    		if(snmp_bat_flag_puts[1]&0x0400) 
;;;765    			{
;;;766    			snmp_trap_send("BAT #2,equalising charge is unblocked",5,8,41);
;;;767    			snmp_bat_flag_puts[1]&=~0x0400;
;;;768    			} 
;;;769    		}
;;;770    
;;;771    	if(vz2_stat!=vz2sOFF)								//Формовочный заряд 
;;;772    		{
;;;773    		snmp_bat_flag[1]|=0x0800;
;;;774    		if((snmp_bat_flag_puts[1]&0x0800)==0) 
;;;775    			{
;;;776    			snmp_trap_send("BAT #2,molding charge is on",5,8,42); 
;;;777    			snmp_bat_flag_puts[1]|=0x0800;
;;;778    			}
;;;779    		}
;;;780    	else 
;;;781    		{
;;;782    		snmp_bat_flag[1]&=~0x0800;
;;;783    		if(snmp_bat_flag_puts[1]&0x0800) 
;;;784    			{
;;;785    			snmp_trap_send("BAT #2,molding charge is off",5,8,43);
;;;786    			snmp_bat_flag_puts[1]&=~0x0800;
;;;787    			}
;;;788    		}
;;;789    
;;;790    	if(vz2_error) 										//Формовочный заряд заблокирован по вентиляции
;;;791    		{
;;;792    		snmp_bat_flag[1]|=0x1000;
;;;793    		if((snmp_bat_flag_puts[1]&0x1000)==0) 
;;;794    			{
;;;795    			snmp_trap_send("BAT #2,molding charge is blocked",5,8,44); 
;;;796    			snmp_bat_flag_puts[1]|=0x1000;
;;;797    			}
;;;798    		}
;;;799    	else 
;;;800    		{
;;;801    		snmp_bat_flag[1]&=~0x1000;
;;;802    		if(snmp_bat_flag_puts[1]&0x1000) 
;;;803    			{
;;;804    			snmp_trap_send("BAT #2,molding charge is unblocked",5,8,45);
;;;805    			snmp_bat_flag_puts[1]&=~0x1000;
;;;806    			} 
;;;807    		}
;;;808    	}
;;;809    else 
;;;810    	{
;;;811    	snmp_bat_flag[1]=0; 
00003e  dd00              BLE      |L6.66|
;;;812    	snmp_bat_flag_puts[1]=0;
000040  700e              STRB     r6,[r1,#0]
                  |L6.66|
;;;813    	}
;;;814    /*
;;;815    if(!snmp_bat_status[1])
;;;816    	{
;;;817    	if((bat[1]._Ub<(USIGN*10))) 
;;;818    		{
;;;819    		snmp_bat_flag[1]|=0x01; 
;;;820    		if((snmp_bat_flag_puts[1]&0x01)==0) 
;;;821    			{
;;;822    			snmp_trap_send("BAT #2 Alarm, battery is low",5,8,0); 
;;;823    			snmp_bat_flag_puts[1]|=0x01;
;;;824    			}
;;;825    		}
;;;826    	else 
;;;827    		{
;;;828    		snmp_bat_flag[1]&=~0x01; 
;;;829    		if(snmp_bat_flag_puts[1]&0x01) 
;;;830    			{
;;;831    			snmp_trap_send("BAT #2 Alarm clear, battery is not low",5,8,1);
;;;832    			snmp_bat_flag_puts[1]&=~0x01;
;;;833    			}
;;;834    		}
;;;835    	if(bat[1]._temper_stat&0x01) 
;;;836    		{
;;;837    		snmp_bat_flag[1]|=0x02;
;;;838    		if((snmp_bat_flag_puts[1]&0x02)==0) 
;;;839    			{
;;;840    			snmp_trap_send("BAT #2 Alarm, high battery temperature",5,8,2); 
;;;841    			snmp_bat_flag_puts[1]|=0x02;
;;;842    			}
;;;843    		}
;;;844    	else 
;;;845    		{
;;;846    		snmp_bat_flag[1]&=~0x02;
;;;847    		if(snmp_bat_flag_puts[1]&0x02) 
;;;848    			{
;;;849    			snmp_trap_send("BAT #2 Alarm clear, battery temperature is normal",5,8,3);
;;;850    			snmp_bat_flag_puts[1]&=~0x02;
;;;851    			}
;;;852    		}
;;;853    	if(bat[1]._temper_stat&0x02) 
;;;854    		{
;;;855    		snmp_bat_flag[1]|=0x04;
;;;856    		if((snmp_bat_flag_puts[1]&0x04)==0) 
;;;857    			{
;;;858    			snmp_trap_send("BAT #2 Alarm, maximum battery temperature",5,8,4); 
;;;859    			snmp_bat_flag_puts[1]|=0x04;
;;;860    			}
;;;861    		}
;;;862    	else 
;;;863    		{
;;;864    		snmp_bat_flag[1]&=~0x04;
;;;865    		if(snmp_bat_flag_puts[1]&0x04) 
;;;866    			{
;;;867    			snmp_trap_send("BAT #2 Alarm clear, battery temperature is normal",5,8,5);
;;;868    			snmp_bat_flag_puts[1]&=~0x04;
;;;869    			}
;;;870    		}
;;;871    		
;;;872    	if(bat[1]._Ib<(-IKB))	snmp_bat_flag[1]|=0x80;
;;;873    	else if(bat[1]._Ib>IKB)snmp_bat_flag[1]&=~0x80;
;;;874    
;;;875    	if((spc_stat==spcKE)&&(spc_bat==1)) 
;;;876    		{
;;;877    		snmp_bat_flag[1]|=0x10;
;;;878    		if((snmp_bat_flag_puts[1]&0x10)==0) 
;;;879    			{
;;;880    			snmp_trap_send("BAT #2, capacity check enabled",5,8,6); 
;;;881    			snmp_bat_flag_puts[1]|=0x10;
;;;882    			}
;;;883    		}
;;;884    	else 
;;;885    		{
;;;886    		snmp_bat_flag[1]&=~0x10;
;;;887    		if(snmp_bat_flag_puts[1]&0x10) 
;;;888    			{
;;;889    			snmp_trap_send("BAT #2, capacity check disabled",5,8,7);
;;;890    			snmp_bat_flag_puts[1]&=~0x10;
;;;891    			}
;;;892    		}
;;;893    		
;;;894    	if(spc_stat==spcVZ) 
;;;895    		{
;;;896    		snmp_bat_flag[1]|=0x20;
;;;897    		if((snmp_bat_flag_puts[1]&0x20)==0) 
;;;898    			{
;;;899    			snmp_trap_send("BAT #2,equalizing charge is on",5,8,8); 
;;;900    			snmp_bat_flag_puts[1]|=0x20;
;;;901    			}
;;;902    		}
;;;903    	else 
;;;904    		{
;;;905    		snmp_bat_flag[1]&=~0x20;
;;;906    		if(snmp_bat_flag_puts[1]&0x20) 
;;;907    			{
;;;908    			snmp_trap_send("BAT #2,equalizing charge is off",5,8,9);
;;;909    			snmp_bat_flag_puts[1]&=~0x20;
;;;910    			}
;;;911    		}
;;;912    
;;;913    	if(vz_error) 
;;;914    		{
;;;915    		snmp_bat_flag[1]|=0x40;
;;;916    		if((snmp_bat_flag_puts[1]&0x40)==0) 
;;;917    			{
;;;918    			snmp_trap_send("BAT #2,equalizing charge blocked",5,8,10); 
;;;919    			snmp_bat_flag_puts[1]|=0x40;
;;;920    			}
;;;921    		}
;;;922    	else 
;;;923    		{
;;;924    		snmp_bat_flag[1]&=~0x40;
;;;925    		if(snmp_bat_flag_puts[1]&0x40) 
;;;926    			{
;;;927    			snmp_trap_send("BAT #2,equalizing charge is not blocked",5,8,11);
;;;928    			snmp_bat_flag_puts[1]&=~0x40;
;;;929    			} 
;;;930    		}
;;;931       }
;;;932    else 
;;;933    	{
;;;934    	snmp_bat_flag[1]=0; 
;;;935    	snmp_bat_flag_puts[1]=0;
;;;936    	} */
;;;937    }
000042  2400              MOVS     r4,#0
000044  2801              CMP      r0,#1
000046  da00              BGE      |L6.74|
000048  700c              STRB     r4,[r1,#0]            ;339
                  |L6.74|
00004a  4959              LDR      r1,|L6.432|
00004c  f9b50000          LDRSH    r0,[r5,#0]            ;339  ; t_box
000050  4a58              LDR      r2,|L6.436|
000052  f9b11000          LDRSH    r1,[r1,#0]            ;341  ; TBOXREG
000056  4f58              LDR      r7,|L6.440|
000058  1e8b              SUBS     r3,r1,#2              ;341
00005a  4298              CMP      r0,r3                 ;341
00005c  da0f              BGE      |L6.126|
00005e  f9921000          LDRSB    r1,[r2,#0]            ;342  ; t_box_cnt
000062  291e              CMP      r1,#0x1e              ;339
000064  da1e              BGE      |L6.164|
000066  f1010101          ADD      r1,r1,#1              ;341
00006a  b249              SXTB     r1,r1                 ;342
00006c  7011              STRB     r1,[r2,#0]            ;342
00006e  291e              CMP      r1,#0x1e              ;344
000070  db18              BLT      |L6.164|
000072  8839              LDRH     r1,[r7,#0]            ;344  ; main_vent_pos
000074  f1a10101          SUB      r1,r1,#1              ;344
000078  8039              STRH     r1,[r7,#0]            ;344
00007a  7014              STRB     r4,[r2,#0]            ;345
00007c  e012              B        |L6.164|
                  |L6.126|
00007e  4288              CMP      r0,r1                 ;345
000080  dd0f              BLE      |L6.162|
000082  f9921000          LDRSB    r1,[r2,#0]            ;345  ; t_box_cnt
000086  291e              CMP      r1,#0x1e              ;350
000088  da0c              BGE      |L6.164|
00008a  f1010101          ADD      r1,r1,#1              ;351
00008e  b249              SXTB     r1,r1                 ;353
000090  7011              STRB     r1,[r2,#0]            ;353
000092  291e              CMP      r1,#0x1e              ;353
000094  db06              BLT      |L6.164|
000096  8839              LDRH     r1,[r7,#0]            ;353  ; main_vent_pos
000098  f1010101          ADD      r1,r1,#1              ;353
00009c  8039              STRH     r1,[r7,#0]            ;354
00009e  7014              STRB     r4,[r2,#0]            ;354
0000a0  e000              B        |L6.164|
                  |L6.162|
0000a2  7014              STRB     r4,[r2,#0]            ;358
                  |L6.164|
0000a4  4945              LDR      r1,|L6.444|
0000a6  f9b11000          LDRSH    r1,[r1,#0]            ;358  ; TBOXVENTMAX
0000aa  4288              CMP      r0,r1                 ;360
0000ac  dd05              BLE      |L6.186|
0000ae  2214              MOVS     r2,#0x14              ;360
0000b0  2100              MOVS     r1,#0                 ;360
0000b2  4841              LDR      r0,|L6.440|
0000b4  f7fffffe          BL       gran
0000b8  e007              B        |L6.202|
                  |L6.186|
0000ba  4841              LDR      r0,|L6.448|
0000bc  2100              MOVS     r1,#0                 ;364
0000be  8800              LDRH     r0,[r0,#0]            ;364  ; pos_vent
0000c0  3009              ADDS     r0,r0,#9              ;364
0000c2  b202              SXTH     r2,r0                 ;369
0000c4  483c              LDR      r0,|L6.440|
0000c6  f7fffffe          BL       gran
                  |L6.202|
0000ca  20f0              MOVS     r0,#0xf0              ;370
0000cc  f7fffffe          BL       mess_find_unvol
0000d0  b128              CBZ      r0,|L6.222|
0000d2  483c              LDR      r0,|L6.452|
0000d4  6801              LDR      r1,[r0,#0]            ;373  ; mess_data
0000d6  29f1              CMP      r1,#0xf1              ;373
0000d8  d101              BNE      |L6.222|
0000da  6840              LDR      r0,[r0,#4]            ;377  ; mess_data
0000dc  8038              STRH     r0,[r7,#0]            ;379
                  |L6.222|
0000de  f9b71000          LDRSH    r1,[r7,#0]            ;379  ; main_vent_pos
0000e2  4839              LDR      r0,|L6.456|
0000e4  2901              CMP      r1,#1                 ;380
0000e6  dc01              BGT      |L6.236|
0000e8  7006              STRB     r6,[r0,#0]            ;380
0000ea  e000              B        |L6.238|
                  |L6.236|
0000ec  7004              STRB     r4,[r0,#0]            ;383
                  |L6.238|
0000ee  4837              LDR      r0,|L6.460|
0000f0  f8df80dc          LDR      r8,|L6.464|
0000f4  f9b00000          LDRSH    r0,[r0,#0]            ;388  ; TBATDISABLE
0000f8  f1a00132          SUB      r1,r0,#0x32           ;388
0000fc  2928              CMP      r1,#0x28              ;389
0000fe  d821              BHI      |L6.324|
000100  f9b51000          LDRSH    r1,[r5,#0]            ;389  ; t_box
000104  4f33              LDR      r7,|L6.468|
000106  4281              CMP      r1,r0                 ;392
000108  dd03              BLE      |L6.274|
00010a  8838              LDRH     r0,[r7,#0]            ;396  ; tbatdisable_cnt
00010c  f1000001          ADD      r0,r0,#1              ;396
000110  8038              STRH     r0,[r7,#0]            ;396
                  |L6.274|
000112  4831              LDR      r0,|L6.472|
000114  f9b00000          LDRSH    r0,[r0,#0]            ;396  ; TBATENABLE
000118  4281              CMP      r1,r0                 ;396
00011a  da03              BGE      |L6.292|
00011c  8838              LDRH     r0,[r7,#0]            ;396  ; tbatdisable_cnt
00011e  f1a00001          SUB      r0,r0,#1              ;396
000122  8038              STRH     r0,[r7,#0]            ;396
                  |L6.292|
000124  2206              MOVS     r2,#6                 ;397
000126  2100              MOVS     r1,#0                 ;397
000128  482a              LDR      r0,|L6.468|
00012a  f7fffffe          BL       gran
00012e  f9b70000          LDRSH    r0,[r7,#0]            ;397  ; tbatdisable_cnt
000132  2805              CMP      r0,#5                 ;399
000134  dd01              BLE      |L6.314|
000136  f8886000          STRB     r6,[r8,#0]            ;399
                  |L6.314|
00013a  2801              CMP      r0,#1                 ;399
00013c  da04              BGE      |L6.328|
00013e  f8884000          STRB     r4,[r8,#0]            ;399
000142  e001              B        |L6.328|
                  |L6.324|
000144  f8884000          STRB     r4,[r8,#0]            ;410
                  |L6.328|
000148  4824              LDR      r0,|L6.476|
00014a  4f25              LDR      r7,|L6.480|
00014c  f9b00000          LDRSH    r0,[r0,#0]            ;411  ; TLOADDISABLE
000150  f1a00132          SUB      r1,r0,#0x32           ;413
000154  291e              CMP      r1,#0x1e              ;413
000156  d820              BHI      |L6.410|
000158  f9b51000          LDRSH    r1,[r5,#0]            ;413  ; t_box
00015c  4d21              LDR      r5,|L6.484|
00015e  4281              CMP      r1,r0                 ;414
000160  dd03              BLE      |L6.362|
000162  8828              LDRH     r0,[r5,#0]            ;418  ; tloaddisable_cnt
000164  f1000001          ADD      r0,r0,#1              ;418
000168  8028              STRH     r0,[r5,#0]            ;418
                  |L6.362|
00016a  481f              LDR      r0,|L6.488|
00016c  f9b00000          LDRSH    r0,[r0,#0]            ;429  ; TLOADENABLE
000170  4281              CMP      r1,r0                 ;429
000172  da03              BGE      |L6.380|
000174  8828              LDRH     r0,[r5,#0]            ;430  ; tloaddisable_cnt
000176  f1a00001          SUB      r0,r0,#1              ;430
00017a  8028              STRH     r0,[r5,#0]            ;432
                  |L6.380|
00017c  2206              MOVS     r2,#6                 ;432
00017e  2100              MOVS     r1,#0                 ;432
000180  4818              LDR      r0,|L6.484|
000182  f7fffffe          BL       gran
000186  f9b50000          LDRSH    r0,[r5,#0]            ;433  ; tloaddisable_cnt
00018a  2805              CMP      r0,#5                 ;433
00018c  dd00              BLE      |L6.400|
00018e  703e              STRB     r6,[r7,#0]            ;437
                  |L6.400|
000190  2801              CMP      r0,#1                 ;437
000192  da00              BGE      |L6.406|
000194  703c              STRB     r4,[r7,#0]            ;439
                  |L6.406|
000196  e8bd81f0          POP      {r4-r8,pc}            ;439
                  |L6.410|
00019a  703c              STRB     r4,[r7,#0]            ;440
00019c  e7fb              B        |L6.406|
;;;938    
                          ENDP

00019e  0000              DCW      0x0000
                  |L6.416|
                          DCD      t_box
                  |L6.420|
                          DCD      TBOXMAX
                  |L6.424|
                          DCD      av_tbox_cnt
                  |L6.428|
                          DCD      av_tbox_stat
                  |L6.432|
                          DCD      TBOXREG
                  |L6.436|
                          DCD      t_box_cnt
                  |L6.440|
                          DCD      main_vent_pos
                  |L6.444|
                          DCD      TBOXVENTMAX
                  |L6.448|
                          DCD      pos_vent
                  |L6.452|
                          DCD      mess_data
                  |L6.456|
                          DCD      mixer_vent_stat
                  |L6.460|
                          DCD      TBATDISABLE
                  |L6.464|
                          DCD      tbatdisable_stat
                  |L6.468|
                          DCD      tbatdisable_cnt
                  |L6.472|
                          DCD      TBATENABLE
                  |L6.476|
                          DCD      TLOADDISABLE
                  |L6.480|
                          DCD      tloaddisable_stat
                  |L6.484|
                          DCD      tloaddisable_cnt
                  |L6.488|
                          DCD      TLOADENABLE

                          AREA ||area_number.7||, CODE, READONLY, ALIGN=2

                          EXPORTAS ||area_number.7||, ||.text||
                  u_avt_set_hndl1 PROC
;;;326    // заполнение флагов для АКБ
;;;327    void bat_flag (void)
000000  e92d5fff          PUSH     {r0-r12,lr}
;;;328    {  
;;;329    if(spc_stat!=spcVZ) 
000004  484e              LDR      r0,|L7.320|
;;;330    	{
;;;331    	vz_error=0;
000006  2165              MOVS     r1,#0x65
000008  2564              MOVS     r5,#0x64              ;329
00000a  f9b00000          LDRSH    r0,[r0,#0]            ;329
00000e  4c4b              LDR      r4,|L7.316|
000010  4341              MULS     r1,r0,r1
;;;332    	sp_ch_error=0;
000012  eb001040          ADD      r0,r0,r0,LSL #5
;;;333    	vz1_error=0;
;;;334    	vz2_error=0;
000016  fbb1f1f5          UDIV     r1,r1,r5
;;;335    	}
;;;336    
;;;337    if(!snmp_bat_status[0])	 			//Батарея №1
00001a  eb000040          ADD      r0,r0,r0,LSL #1
;;;338    	{
;;;339    	if((bat[0]._Ub<(USIGN*10)))		//Снижение напряжения батареи ниже Uбсигн 
00001e  fbb0f0f5          UDIV     r0,r0,r5
000022  f8dfb120          LDR      r11,|L7.324|
000026  b20a              SXTH     r2,r1                 ;337
;;;340    		{
;;;341    		snmp_bat_flag[0]|=0x0001; 
;;;342    		if((snmp_bat_flag_puts[0]&0x0001)==0) 
;;;343    			{
;;;344    			snmp_trap_send("BAT #1 Alarm, battery is low",5,8,0); 
;;;345    			snmp_bat_flag_puts[0]|=0x0001;
;;;346    			}
;;;347    		}
;;;348    	else 
;;;349    		{
;;;350    		snmp_bat_flag[0]&=~0x0001; 
;;;351    		if(snmp_bat_flag_puts[0]&0x0001) 
;;;352    			{
;;;353    			snmp_trap_send("BAT #1 Alarm clear, battery is not low",5,8,1);
;;;354    			snmp_bat_flag_puts[0]&=~0x0001;
;;;355    			}
;;;356    		}
;;;357    
;;;358    	if(bat[0]._temper_stat&0x01)	//Повышенная температура батареи, первый порог - предупреждение
;;;359    		{
;;;360    		snmp_bat_flag[0]|=0x0002;
;;;361    		if((snmp_bat_flag_puts[0]&0x0002)==0) 
;;;362    			{
;;;363    			//snmp_trap_send("BAT #1 Warning, high battery temperature",5,8,2); 
;;;364    			snmp_bat_flag_puts[0]|=0x0002;
;;;365    			}
;;;366    		}
;;;367    	else 
;;;368    		{
;;;369    		snmp_bat_flag[0]&=~0x0002;
;;;370    		if(snmp_bat_flag_puts[0]&0x0002) 
;;;371    			{
;;;372    			//snmp_trap_send("BAT #1 Warning clear, battery temperature is normal",5,8,3);
;;;373    			snmp_bat_flag_puts[0]&=~0x02;
;;;374    			}
;;;375    		}
;;;376    
;;;377    	if(bat[0]._temper_stat&0x02)  	//Повышенная температура батареи, второй порог - авария
;;;378    		{
;;;379    		snmp_bat_flag[0]|=0x0004;
;;;380    		if((snmp_bat_flag_puts[0]&0x0004)==0) 
;;;381    			{
;;;382    			//snmp_trap_send("BAT #1 Alarm, high battery temperature",5,8,4); 
;;;383    			snmp_bat_flag_puts[0]|=0x0004;
;;;384    			}
;;;385    		}
;;;386    	else 
;;;387    		{
;;;388    		snmp_bat_flag[0]&=~0x0004;
;;;389    		if(snmp_bat_flag_puts[0]&0x0004) 
;;;390    			{
;;;391    			//snmp_trap_send("BAT #1 Alarm clear, battery temperature is normal",5,8,5);
;;;392    			snmp_bat_flag_puts[0]&=~0x0004;
;;;393    			}
;;;394    		}
;;;395    
;;;396    	if(bat[0]._Ib<(-IKB)) snmp_bat_flag[0]|=0x0008;		//Разряд батареи
000028  7823              LDRB     r3,[r4,#0]  ; uavt_set_stat
00002a  b201              SXTH     r1,r0
00002c  f89b0000          LDRB     r0,[r11,#0]           ;341
000030  4e45              LDR      r6,|L7.328|
;;;397    	else if(bat[0]._Ib>IKB) snmp_bat_flag[0]&=~0x0008;	//Заряд батареи
;;;398    
;;;399    	if((spc_stat==spcKE)&&(spc_bat==0))					//Контроль емкости батареи №1 
;;;400    		{
;;;401    		snmp_bat_flag[0]|=0x0010;
;;;402    		if((snmp_bat_flag_puts[0]&0x0010)==0) 
;;;403    			{
;;;404    			snmp_trap_send("BAT #1, capacity test started",5,8,6); 
;;;405    			snmp_bat_flag_puts[0]|=0x0010;
;;;406    			}
;;;407    		}
;;;408    	else 
;;;409    		{
;;;410    		snmp_bat_flag[0]&=~0x0010;
;;;411    		if(snmp_bat_flag_puts[0]&0x0010) 
;;;412    			{
;;;413    			snmp_trap_send("BAT #1, capacity test stopped",5,8,7);
;;;414    			snmp_bat_flag_puts[0]&=~0x0010;
;;;415    			}
;;;416    		}
;;;417    		
;;;418    	if(spc_stat==spcVZ)									//Выравнивающий заряд 
;;;419    		{
;;;420    		snmp_bat_flag[0]|=0x0020;
;;;421    		if((snmp_bat_flag_puts[0]&0x0020)==0) 
;;;422    			{
;;;423    			snmp_trap_send("BAT #1,leveling charge is started",5,8,8); 
;;;424    			snmp_bat_flag_puts[0]|=0x0020;
;;;425    			}
;;;426    		}
;;;427    	else 
;;;428    		{
;;;429    		snmp_bat_flag[0]&=~0x0020;
;;;430    		if(snmp_bat_flag_puts[0]&0x0020) 
;;;431    			{
;;;432    			snmp_trap_send("BAT #1,leveling charge is stopped",5,8,9);
;;;433    			snmp_bat_flag_puts[0]&=~0x0020;
;;;434    			}
;;;435    		}
;;;436    
;;;437    	if(vz_error)										 //Выравнивающий заряд заблокирован по вентиляции
;;;438    		{
;;;439    		snmp_bat_flag[0]|=0x0040;
;;;440    		if((snmp_bat_flag_puts[0]&0x0040)==0) 
;;;441    			{
;;;442    			snmp_trap_send("BAT #1,leveling charge is blocked",5,8,10); 
;;;443    			snmp_bat_flag_puts[0]|=0x0040;
;;;444    			}
;;;445    		}
;;;446    	else 
;;;447    		{
;;;448    		snmp_bat_flag[0]&=~0x0040;
;;;449    		if(snmp_bat_flag_puts[0]&0x0040) 
;;;450    			{
;;;451    			snmp_trap_send("BAT #1,leveling charge is unblocked",5,8,11);
;;;452    			snmp_bat_flag_puts[0]&=~0x0040;
;;;453    			} 
;;;454    		}
;;;455    
;;;456    	if(sp_ch_stat==scsWRK) 								//Ускореннный заряд
;;;457    		{
;;;458    		snmp_bat_flag[0]|=0x0080;
;;;459    		if((snmp_bat_flag_puts[0]&0x0080)==0) 
;;;460    			{
;;;461    			snmp_trap_send("BAT #1,speed charge is started",5,8,10); 
;;;462    			snmp_bat_flag_puts[0]|=0x0080;
;;;463    			}
;;;464    		}
;;;465    	else 
;;;466    		{
;;;467    		snmp_bat_flag[0]&=~0x0080;
;;;468    		if(snmp_bat_flag_puts[0]&0x0080) 
;;;469    			{
;;;470    			snmp_trap_send("BAT #1,speed charge is stopped",5,8,11);
;;;471    			snmp_bat_flag_puts[0]&=~0x0080;
;;;472    			}
;;;473    		}
;;;474    
;;;475    	if(sp_ch_error) 									//Ускореннный заряд заблокирован по вентиляции
;;;476    		{
;;;477    		snmp_bat_flag[0]|=0x0100;
;;;478    		if((snmp_bat_flag_puts[0]&0x0100)==0) 
;;;479    			{
;;;480    			snmp_trap_send("BAT #1,speed charge is blocked",5,8,12); 
;;;481    			snmp_bat_flag_puts[0]|=0x0100;
;;;482    			}
;;;483    		}
;;;484    	else 
;;;485    		{
;;;486    		snmp_bat_flag[0]&=~0x0100;
;;;487    		if(snmp_bat_flag_puts[0]&0x0100) 
;;;488    			{
;;;489    			snmp_trap_send("BAT #1,speed charge is unblocked",5,8,13);
;;;490    			snmp_bat_flag_puts[0]&=~0x0100;
;;;491    			} 
;;;492    		}
;;;493    
;;;494    	if(vz1_stat!=vz1sOFF)								//Уравнительный заряд 
;;;495    		{
;;;496    		snmp_bat_flag[0]|=0x0200;
;;;497    		if((snmp_bat_flag_puts[0]&0x0200)==0) 
;;;498    			{
;;;499    			snmp_trap_send("BAT #1,equalising charge is on",5,8,14); 
;;;500    			snmp_bat_flag_puts[0]|=0x0200;
;;;501    			}
;;;502    		}
;;;503    	else 
;;;504    		{
;;;505    		snmp_bat_flag[0]&=~0x0200;
;;;506    		if(snmp_bat_flag_puts[0]&0x0200) 
;;;507    			{
;;;508    			snmp_trap_send("BAT #1,equalising charge is off",5,8,15);
;;;509    			snmp_bat_flag_puts[0]&=~0x0200;
;;;510    			}
;;;511    		}
;;;512    
;;;513    	if(vz1_error)										//Уравнительный заряд заблокирован по вентиляции 
;;;514    		{
;;;515    		snmp_bat_flag[0]|=0x0400;
;;;516    		if((snmp_bat_flag_puts[0]&0x0400)==0) 
;;;517    			{
;;;518    			snmp_trap_send("BAT #1,equalising charge is blocked",5,8,16); 
;;;519    			snmp_bat_flag_puts[0]|=0x0400;
;;;520    			}
;;;521    		}
;;;522    	else 
;;;523    		{
;;;524    		snmp_bat_flag[0]&=~0x0400;
;;;525    		if(snmp_bat_flag_puts[0]&0x0400) 
;;;526    			{
;;;527    			snmp_trap_send("BAT #1,equalising charge is unblocked",5,8,17);
;;;528    			snmp_bat_flag_puts[0]&=~0x0400;
;;;529    			} 
;;;530    		}
;;;531    
;;;532    	if(vz2_stat!=vz2sOFF)								//Формовочный заряд 
;;;533    		{
;;;534    		snmp_bat_flag[0]|=0x0800;
;;;535    		if((snmp_bat_flag_puts[0]&0x0800)==0) 
;;;536    			{
;;;537    			snmp_trap_send("BAT #1,molding charge is on",5,8,18); 
;;;538    			snmp_bat_flag_puts[0]|=0x0800;
;;;539    			}
;;;540    		}
;;;541    	else 
;;;542    		{
;;;543    		snmp_bat_flag[0]&=~0x0800;
;;;544    		if(snmp_bat_flag_puts[0]&0x0800) 
;;;545    			{
;;;546    			snmp_trap_send("BAT #1,molding charge is off",5,8,19);
;;;547    			snmp_bat_flag_puts[0]&=~0x0800;
;;;548    			}
;;;549    		}
;;;550    
;;;551    	if(vz2_error) 										//Формовочный заряд заблокирован по вентиляции
;;;552    		{
;;;553    		snmp_bat_flag[0]|=0x1000;
;;;554    		if((snmp_bat_flag_puts[0]&0x1000)==0) 
;;;555    			{
;;;556    			snmp_trap_send("BAT #1,molding charge is blocked",5,8,20); 
;;;557    			snmp_bat_flag_puts[0]|=0x1000;
;;;558    			}
;;;559    		}
;;;560    	else 
;;;561    		{
;;;562    		snmp_bat_flag[0]&=~0x1000;
;;;563    		if(snmp_bat_flag_puts[0]&0x1000) 
;;;564    			{
;;;565    			snmp_trap_send("BAT #1,molding charge is unblocked",5,8,21);
;;;566    			snmp_bat_flag_puts[0]&=~0x1000;
;;;567    			} 
;;;568    		}
;;;569    	}
;;;570    else 
;;;571    	{
;;;572    	snmp_bat_flag[0]=0; 
000032  4f46              LDR      r7,|L7.332|
;;;573    	snmp_bat_flag_puts[0]=0;
000034  f8df8118          LDR      r8,|L7.336|
;;;574    	}
;;;575    
;;;576    if(!snmp_bat_status[1])	 			//Батарея №2
000038  f8df9118          LDR      r9,|L7.340|
00003c  f8dfa118          LDR      r10,|L7.344|
;;;577    	{
;;;578    	if((bat[1]._Ub<(USIGN*10)))		//Снижение напряжения батареи ниже Uбсигн 
;;;579    		{
;;;580    		snmp_bat_flag[1]|=0x0001; 
;;;581    		if((snmp_bat_flag_puts[1]&0x0001)==0) 
;;;582    			{
;;;583    			snmp_trap_send("BAT #2 Alarm, battery is low",5,8,22); 
;;;584    			snmp_bat_flag_puts[1]|=0x0001;
;;;585    			}
;;;586    		}
;;;587    	else 
;;;588    		{
;;;589    		snmp_bat_flag[1]&=~0x0001; 
;;;590    		if(snmp_bat_flag_puts[1]&0x0001) 
;;;591    			{
;;;592    			snmp_trap_send("BAT #2 Alarm clear, battery is not low",5,8,23);
;;;593    			snmp_bat_flag_puts[1]&=~0x0001;
;;;594    			}
;;;595    		}
;;;596    
;;;597    	if(bat[1]._temper_stat&0x01)	//Повышенная температура батареи, первый порог - предупреждение
;;;598    		{
;;;599    		snmp_bat_flag[1]|=0x0002;
;;;600    		if((snmp_bat_flag_puts[0]&0x0002)==0) 
;;;601    			{
;;;602    			//snmp_trap_send("BAT #2 Warning, high battery temperature",5,8,24); 
;;;603    			snmp_bat_flag_puts[1]|=0x0002;
;;;604    			}
;;;605    		}
;;;606    	else 
;;;607    		{
;;;608    		snmp_bat_flag[1]&=~0x0002;
;;;609    		if(snmp_bat_flag_puts[1]&0x0002) 
;;;610    			{
;;;611    			//snmp_trap_send("BAT #2 Warning clear, battery temperature is normal",5,8,25);
;;;612    			snmp_bat_flag_puts[1]&=~0x02;
;;;613    			}
;;;614    		}
;;;615    
;;;616    	if(bat[1]._temper_stat&0x02)  	//Повышенная температура батареи, второй порог - авария
;;;617    		{
;;;618    		snmp_bat_flag[1]|=0x0004;
;;;619    		if((snmp_bat_flag_puts[1]&0x0004)==0) 
;;;620    			{
;;;621    			//snmp_trap_send("BAT #2 Alarm, high battery temperature",5,8,26); 
;;;622    			snmp_bat_flag_puts[1]|=0x0004;
;;;623    			}
;;;624    		}
;;;625    	else 
;;;626    		{
;;;627    		snmp_bat_flag[1]&=~0x0004;
;;;628    		if(snmp_bat_flag_puts[1]&0x0004) 
;;;629    			{
;;;630    			//snmp_trap_send("BAT #2 Alarm clear, battery temperature is normal",5,8,27);
;;;631    			snmp_bat_flag_puts[1]&=~0x0004;
;;;632    			}
;;;633    		}
;;;634    
;;;635    	if(bat[1]._Ib<(-IKB)) snmp_bat_flag[1]|=0x0008;		//Разряд батареи
;;;636    	else if(bat[1]._Ib>IKB) snmp_bat_flag[1]&=~0x0008;	//Заряд батареи
;;;637    
;;;638    	if((spc_stat==spcKE)&&(spc_bat==0))					//Контроль емкости батареи №1 
;;;639    		{
;;;640    		snmp_bat_flag[1]|=0x0010;
;;;641    		if((snmp_bat_flag_puts[1]&0x0010)==0) 
;;;642    			{
;;;643    			snmp_trap_send("BAT #2, capacity test started",5,8,28); 
;;;644    			snmp_bat_flag_puts[1]|=0x0010;
;;;645    			}
;;;646    		}
;;;647    	else 
;;;648    		{
;;;649    		snmp_bat_flag[1]&=~0x0010;
;;;650    		if(snmp_bat_flag_puts[1]&0x0010) 
;;;651    			{
;;;652    			snmp_trap_send("BAT #2, capacity test stopped",5,8,29);
;;;653    			snmp_bat_flag_puts[1]&=~0x0010;
;;;654    			}
;;;655    		}
;;;656    		
;;;657    	if(spc_stat==spcVZ)									//Выравнивающий заряд 
;;;658    		{
;;;659    		snmp_bat_flag[1]|=0x0020;
;;;660    		if((snmp_bat_flag_puts[1]&0x0020)==0) 
;;;661    			{
;;;662    			snmp_trap_send("BAT #2,leveling charge is started",5,8,30); 
;;;663    			snmp_bat_flag_puts[1]|=0x0020;
;;;664    			}
;;;665    		}
;;;666    	else 
;;;667    		{
;;;668    		snmp_bat_flag[1]&=~0x0020;
;;;669    		if(snmp_bat_flag_puts[1]&0x0020) 
;;;670    			{
;;;671    			snmp_trap_send("BAT #2,leveling charge is stopped",5,8,31);
;;;672    			snmp_bat_flag_puts[1]&=~0x0020;
;;;673    			}
;;;674    		}
;;;675    
;;;676    	if(vz_error)										 //Выравнивающий заряд заблокирован по вентиляции
;;;677    		{
;;;678    		snmp_bat_flag[1]|=0x0040;
;;;679    		if((snmp_bat_flag_puts[1]&0x0040)==0) 
;;;680    			{
;;;681    			snmp_trap_send("BAT #2,leveling charge is blocked",5,8,32); 
;;;682    			snmp_bat_flag_puts[1]|=0x0040;
;;;683    			}
;;;684    		}
;;;685    	else 
;;;686    		{
;;;687    		snmp_bat_flag[1]&=~0x0040;
;;;688    		if(snmp_bat_flag_puts[1]&0x0040) 
;;;689    			{
;;;690    			snmp_trap_send("BAT #2,leveling charge is unblocked",5,8,33);
;;;691    			snmp_bat_flag_puts[1]&=~0x0040;
;;;692    			} 
;;;693    		}
;;;694    
;;;695    	if(sp_ch_stat==scsWRK) 								//Ускореннный заряд
;;;696    		{
;;;697    		snmp_bat_flag[1]|=0x0080;
;;;698    		if((snmp_bat_flag_puts[1]&0x0080)==0) 
;;;699    			{
;;;700    			snmp_trap_send("BAT #2,speed charge is started",5,8,34); 
;;;701    			snmp_bat_flag_puts[1]|=0x0080;
;;;702    			}
;;;703    		}
;;;704    	else 
;;;705    		{
;;;706    		snmp_bat_flag[1]&=~0x0080;
;;;707    		if(snmp_bat_flag_puts[1]&0x0080) 
;;;708    			{
;;;709    			snmp_trap_send("BAT #2,speed charge is stopped",5,8,35);
;;;710    			snmp_bat_flag_puts[1]&=~0x0080;
;;;711    			}
;;;712    		}
;;;713    
;;;714    	if(sp_ch_error) 									//Ускореннный заряд заблокирован по вентиляции
;;;715    		{
;;;716    		snmp_bat_flag[1]|=0x0100;
;;;717    		if((snmp_bat_flag_puts[1]&0x0100)==0) 
;;;718    			{
;;;719    			snmp_trap_send("BAT #2,speed charge is blocked",5,8,36); 
;;;720    			snmp_bat_flag_puts[1]|=0x0100;
;;;721    			}
;;;722    		}
;;;723    	else 
;;;724    		{
;;;725    		snmp_bat_flag[1]&=~0x0100;
;;;726    		if(snmp_bat_flag_puts[1]&0x0100) 
;;;727    			{
;;;728    			snmp_trap_send("BAT #2,speed charge is unblocked",5,8,37);
;;;729    			snmp_bat_flag_puts[1]&=~0x0100;
;;;730    			} 
;;;731    		}
;;;732    
;;;733    	if(vz1_stat!=vz1sOFF)								//Уравнительный заряд 
;;;734    		{
;;;735    		snmp_bat_flag[1]|=0x0200;
;;;736    		if((snmp_bat_flag_puts[1]&0x0200)==0) 
;;;737    			{
;;;738    			snmp_trap_send("BAT #2,equalising charge is on",5,8,38); 
;;;739    			snmp_bat_flag_puts[1]|=0x0200;
;;;740    			}
;;;741    		}
;;;742    	else 
;;;743    		{
;;;744    		snmp_bat_flag[1]&=~0x0200;
;;;745    		if(snmp_bat_flag_puts[1]&0x0200) 
;;;746    			{
;;;747    			snmp_trap_send("BAT #2,equalising charge is off",5,8,39);
;;;748    			snmp_bat_flag_puts[1]&=~0x0200;
;;;749    			}
;;;750    		}
;;;751    
;;;752    	if(vz1_error)										//Уравнительный заряд заблокирован по вентиляции 
;;;753    		{
;;;754    		snmp_bat_flag[1]|=0x0400;
;;;755    		if((snmp_bat_flag_puts[1]&0x0400)==0) 
;;;756    			{
;;;757    			snmp_trap_send("BAT #2,equalising charge is blocked",5,8,40); 
;;;758    			snmp_bat_flag_puts[1]|=0x0400;
;;;759    			}
;;;760    		}
;;;761    	else 
;;;762    		{
;;;763    		snmp_bat_flag[1]&=~0x0400;
;;;764    		if(snmp_bat_flag_puts[1]&0x0400) 
;;;765    			{
;;;766    			snmp_trap_send("BAT #2,equalising charge is unblocked",5,8,41);
;;;767    			snmp_bat_flag_puts[1]&=~0x0400;
;;;768    			} 
;;;769    		}
;;;770    
;;;771    	if(vz2_stat!=vz2sOFF)								//Формовочный заряд 
;;;772    		{
;;;773    		snmp_bat_flag[1]|=0x0800;
;;;774    		if((snmp_bat_flag_puts[1]&0x0800)==0) 
;;;775    			{
;;;776    			snmp_trap_send("BAT #2,molding charge is on",5,8,42); 
;;;777    			snmp_bat_flag_puts[1]|=0x0800;
;;;778    			}
;;;779    		}
;;;780    	else 
;;;781    		{
;;;782    		snmp_bat_flag[1]&=~0x0800;
;;;783    		if(snmp_bat_flag_puts[1]&0x0800) 
;;;784    			{
;;;785    			snmp_trap_send("BAT #2,molding charge is off",5,8,43);
;;;786    			snmp_bat_flag_puts[1]&=~0x0800;
;;;787    			}
;;;788    		}
;;;789    
;;;790    	if(vz2_error) 										//Формовочный заряд заблокирован по вентиляции
;;;791    		{
;;;792    		snmp_bat_flag[1]|=0x1000;
;;;793    		if((snmp_bat_flag_puts[1]&0x1000)==0) 
;;;794    			{
;;;795    			snmp_trap_send("BAT #2,molding charge is blocked",5,8,44); 
;;;796    			snmp_bat_flag_puts[1]|=0x1000;
;;;797    			}
;;;798    		}
;;;799    	else 
;;;800    		{
;;;801    		snmp_bat_flag[1]&=~0x1000;
;;;802    		if(snmp_bat_flag_puts[1]&0x1000) 
;;;803    			{
;;;804    			snmp_trap_send("BAT #2,molding charge is unblocked",5,8,45);
;;;805    			snmp_bat_flag_puts[1]&=~0x1000;
;;;806    			} 
;;;807    		}
;;;808    	}
;;;809    else 
;;;810    	{
;;;811    	snmp_bat_flag[1]=0; 
;;;812    	snmp_bat_flag_puts[1]=0;
000040  2500              MOVS     r5,#0
;;;813    	}
;;;814    /*
;;;815    if(!snmp_bat_status[1])
;;;816    	{
;;;817    	if((bat[1]._Ub<(USIGN*10))) 
;;;818    		{
;;;819    		snmp_bat_flag[1]|=0x01; 
;;;820    		if((snmp_bat_flag_puts[1]&0x01)==0) 
;;;821    			{
;;;822    			snmp_trap_send("BAT #2 Alarm, battery is low",5,8,0); 
;;;823    			snmp_bat_flag_puts[1]|=0x01;
;;;824    			}
;;;825    		}
;;;826    	else 
;;;827    		{
;;;828    		snmp_bat_flag[1]&=~0x01; 
;;;829    		if(snmp_bat_flag_puts[1]&0x01) 
;;;830    			{
;;;831    			snmp_trap_send("BAT #2 Alarm clear, battery is not low",5,8,1);
;;;832    			snmp_bat_flag_puts[1]&=~0x01;
;;;833    			}
;;;834    		}
;;;835    	if(bat[1]._temper_stat&0x01) 
;;;836    		{
;;;837    		snmp_bat_flag[1]|=0x02;
;;;838    		if((snmp_bat_flag_puts[1]&0x02)==0) 
;;;839    			{
;;;840    			snmp_trap_send("BAT #2 Alarm, high battery temperature",5,8,2); 
;;;841    			snmp_bat_flag_puts[1]|=0x02;
;;;842    			}
;;;843    		}
;;;844    	else 
;;;845    		{
;;;846    		snmp_bat_flag[1]&=~0x02;
;;;847    		if(snmp_bat_flag_puts[1]&0x02) 
;;;848    			{
;;;849    			snmp_trap_send("BAT #2 Alarm clear, battery temperature is normal",5,8,3);
;;;850    			snmp_bat_flag_puts[1]&=~0x02;
;;;851    			}
;;;852    		}
;;;853    	if(bat[1]._temper_stat&0x02) 
;;;854    		{
;;;855    		snmp_bat_flag[1]|=0x04;
;;;856    		if((snmp_bat_flag_puts[1]&0x04)==0) 
;;;857    			{
;;;858    			snmp_trap_send("BAT #2 Alarm, maximum battery temperature",5,8,4); 
;;;859    			snmp_bat_flag_puts[1]|=0x04;
;;;860    			}
;;;861    		}
;;;862    	else 
;;;863    		{
;;;864    		snmp_bat_flag[1]&=~0x04;
;;;865    		if(snmp_bat_flag_puts[1]&0x04) 
;;;866    			{
;;;867    			snmp_trap_send("BAT #2 Alarm clear, battery temperature is normal",5,8,5);
;;;868    			snmp_bat_flag_puts[1]&=~0x04;
;;;869    			}
;;;870    		}
;;;871    		
;;;872    	if(bat[1]._Ib<(-IKB))	snmp_bat_flag[1]|=0x80;
;;;873    	else if(bat[1]._Ib>IKB)snmp_bat_flag[1]&=~0x80;
;;;874    
;;;875    	if((spc_stat==spcKE)&&(spc_bat==1)) 
;;;876    		{
;;;877    		snmp_bat_flag[1]|=0x10;
;;;878    		if((snmp_bat_flag_puts[1]&0x10)==0) 
;;;879    			{
;;;880    			snmp_trap_send("BAT #2, capacity check enabled",5,8,6); 
;;;881    			snmp_bat_flag_puts[1]|=0x10;
;;;882    			}
;;;883    		}
;;;884    	else 
;;;885    		{
;;;886    		snmp_bat_flag[1]&=~0x10;
;;;887    		if(snmp_bat_flag_puts[1]&0x10) 
;;;888    			{
;;;889    			snmp_trap_send("BAT #2, capacity check disabled",5,8,7);
;;;890    			snmp_bat_flag_puts[1]&=~0x10;
;;;891    			}
;;;892    		}
;;;893    		
;;;894    	if(spc_stat==spcVZ) 
;;;895    		{
;;;896    		snmp_bat_flag[1]|=0x20;
;;;897    		if((snmp_bat_flag_puts[1]&0x20)==0) 
;;;898    			{
;;;899    			snmp_trap_send("BAT #2,equalizing charge is on",5,8,8); 
;;;900    			snmp_bat_flag_puts[1]|=0x20;
;;;901    			}
;;;902    		}
;;;903    	else 
;;;904    		{
;;;905    		snmp_bat_flag[1]&=~0x20;
;;;906    		if(snmp_bat_flag_puts[1]&0x20) 
;;;907    			{
;;;908    			snmp_trap_send("BAT #2,equalizing charge is off",5,8,9);
;;;909    			snmp_bat_flag_puts[1]&=~0x20;
;;;910    			}
;;;911    		}
;;;912    
;;;913    	if(vz_error) 
;;;914    		{
;;;915    		snmp_bat_flag[1]|=0x40;
;;;916    		if((snmp_bat_flag_puts[1]&0x40)==0) 
;;;917    			{
;;;918    			snmp_trap_send("BAT #2,equalizing charge blocked",5,8,10); 
;;;919    			snmp_bat_flag_puts[1]|=0x40;
;;;920    			}
;;;921    		}
;;;922    	else 
;;;923    		{
;;;924    		snmp_bat_flag[1]&=~0x40;
;;;925    		if(snmp_bat_flag_puts[1]&0x40) 
;;;926    			{
;;;927    			snmp_trap_send("BAT #2,equalizing charge is not blocked",5,8,11);
;;;928    			snmp_bat_flag_puts[1]&=~0x40;
;;;929    			} 
;;;930    		}
;;;931       }
;;;932    else 
;;;933    	{
;;;934    	snmp_bat_flag[1]=0; 
;;;935    	snmp_bat_flag_puts[1]=0;
;;;936    	} */
;;;937    }
000042  2b01              CMP      r3,#1
000044  d002              BEQ      |L7.76|
000046  2b02              CMP      r3,#2                 ;339
000048  d031              BEQ      |L7.174|
00004a  e071              B        |L7.304|
                  |L7.76|
00004c  803a              STRH     r2,[r7,#0]            ;339
00004e  f8a81000          STRH     r1,[r8,#0]            ;339
000052  2801              CMP      r0,#1                 ;341
000054  d000              BEQ      |L7.88|
000056  7035              STRB     r5,[r6,#0]            ;339
                  |L7.88|
000058  230a              MOVS     r3,#0xa               ;341
00005a  2200              MOVS     r2,#0                 ;341
00005c  21e6              MOVS     r1,#0xe6              ;342
00005e  20e1              MOVS     r0,#0xe1              ;342
000060  f7fffffe          BL       mess_send
000064  f04f0201          MOV      r2,#1                 ;341
000068  f04f0000          MOV      r0,#0                 ;341
00006c  f9b73000          LDRSH    r3,[r7,#0]            ;342
000070  f9b85000          LDRSH    r5,[r8,#0]            ;344
000074  f9ba6000          LDRSH    r6,[r10,#0]           ;344
000078  e00d              B        |L7.150|
                  |L7.122|
00007a  eb0001c0          ADD      r1,r0,r0,LSL #3       ;345
00007e  eb011100          ADD      r1,r1,r0,LSL #4       ;345
000082  eb090181          ADD      r1,r9,r1,LSL #2       ;345
000086  69c9              LDR      r1,[r1,#0x1c]         ;350
000088  4299              CMP      r1,r3                 ;350
00008a  da09              BGE      |L7.160|
00008c  42a9              CMP      r1,r5                 ;351
00008e  dd07              BLE      |L7.160|
000090  f1000001          ADD      r0,r0,#1              ;353
000094  b2c0              UXTB     r0,r0                 ;353
                  |L7.150|
000096  42b0              CMP      r0,r6                 ;353
000098  dbef              BLT      |L7.122|
                  |L7.154|
00009a  2a01              CMP      r2,#1                 ;354
00009c  d003              BEQ      |L7.166|
00009e  e047              B        |L7.304|
                  |L7.160|
0000a0  f04f0200          MOV      r2,#0                 ;354
0000a4  e7f9              B        |L7.154|
                  |L7.166|
0000a6  f04f0002          MOV      r0,#2                 ;358
0000aa  7020              STRB     r0,[r4,#0]            ;360
0000ac  e040              B        |L7.304|
                  |L7.174|
0000ae  803a              STRH     r2,[r7,#0]            ;360
0000b0  f8a81000          STRH     r1,[r8,#0]            ;360
0000b4  2802              CMP      r0,#2                 ;361
0000b6  d000              BEQ      |L7.186|
0000b8  7035              STRB     r5,[r6,#0]            ;361
                  |L7.186|
0000ba  230a              MOVS     r3,#0xa               ;364
0000bc  2200              MOVS     r2,#0                 ;364
0000be  21e6              MOVS     r1,#0xe6              ;364
0000c0  20e1              MOVS     r0,#0xe1              ;364
0000c2  f7fffffe          BL       mess_send
0000c6  f04f0201          MOV      r2,#1                 ;369
0000ca  f04f0000          MOV      r0,#0                 ;370
0000ce  f9b73000          LDRSH    r3,[r7,#0]            ;370
0000d2  f9b87000          LDRSH    r7,[r8,#0]            ;373
0000d6  f9bac000          LDRSH    r12,[r10,#0]          ;373
0000da  e00d              B        |L7.248|
                  |L7.220|
0000dc  eb0001c0          ADD      r1,r0,r0,LSL #3       ;379
0000e0  eb011100          ADD      r1,r1,r0,LSL #4       ;379
0000e4  eb090181          ADD      r1,r9,r1,LSL #2       ;380
0000e8  69c9              LDR      r1,[r1,#0x1c]         ;380
0000ea  4299              CMP      r1,r3                 ;380
0000ec  da09              BGE      |L7.258|
0000ee  42b9              CMP      r1,r7                 ;383
0000f0  dd07              BLE      |L7.258|
0000f2  f1000001          ADD      r0,r0,#1              ;383
0000f6  b2c0              UXTB     r0,r0                 ;388
                  |L7.248|
0000f8  4560              CMP      r0,r12                ;388
0000fa  dbef              BLT      |L7.220|
                  |L7.252|
0000fc  2a01              CMP      r2,#1                 ;389
0000fe  d003              BEQ      |L7.264|
000100  e016              B        |L7.304|
                  |L7.258|
000102  f04f0200          MOV      r2,#0                 ;389
000106  e7f9              B        |L7.252|
                  |L7.264|
000108  20ee              MOVS     r0,#0xee              ;392
00010a  e9cd0500          STRD     r0,r5,[sp,#0]         ;396
00010e  9502              STR      r5,[sp,#8]            ;396
000110  9503              STR      r5,[sp,#0xc]          ;396
000112  7831              LDRB     r1,[r6,#0]            ;396  ; uavt_bps_pntr
000114  4603              MOV      r3,r0                 ;396
000116  2216              MOVS     r2,#0x16              ;396
000118  4608              MOV      r0,r1                 ;396
00011a  f7fffffe          BL       mcp2515_transmit
00011e  7830              LDRB     r0,[r6,#0]            ;396  ; uavt_bps_pntr
000120  1c40              ADDS     r0,r0,#1              ;396
000122  b2c0              UXTB     r0,r0                 ;396
000124  7030              STRB     r0,[r6,#0]            ;397
000126  f9ba1000          LDRSH    r1,[r10,#0]           ;397  ; NUMIST
00012a  4288              CMP      r0,r1                 ;397
00012c  db00              BLT      |L7.304|
00012e  7025              STRB     r5,[r4,#0]            ;397
                  |L7.304|
000130  7820              LDRB     r0,[r4,#0]            ;399  ; uavt_set_stat
000132  f88b0000          STRB     r0,[r11,#0]           ;399
000136  e8bd9fff          POP      {r0-r12,pc}           ;399
;;;938    
                          ENDP

00013a  0000              DCW      0x0000
                  |L7.316|
                          DCD      uavt_set_stat
                  |L7.320|
                          DCD      U_AVT
                  |L7.324|
                          DCD      uavt_set_stat_old
                  |L7.328|
                          DCD      uavt_bps_pntr
                  |L7.332|
                          DCD      u_max_temp
                  |L7.336|
                          DCD      u_min_temp
                  |L7.340|
                          DCD      bps
                  |L7.344|
                          DCD      NUMIST

                          AREA ||area_number.8||, CODE, READONLY, ALIGN=2

                          EXPORTAS ||area_number.8||, ||.text||
                  averageChargeStartStop PROC
;;;326    // заполнение флагов для АКБ
;;;327    void bat_flag (void)
000000  4908              LDR      r1,|L8.36|
;;;328    {  
000002  f44f70b4          MOV      r0,#0x168
;;;329    if(spc_stat!=spcVZ) 
;;;330    	{
;;;331    	vz_error=0;
000006  780a              LDRB     r2,[r1,#0]  ; hv_vz_stat
000008  b132              CBZ      r2,|L8.24|
00000a  f04f0200          MOV      r2,#0                 ;329
00000e  700a              STRB     r2,[r1,#0]            ;329
000010  f04f0100          MOV      r1,#0
;;;332    	sp_ch_error=0;
;;;333    	vz1_error=0;
000014  f7ffbffe          B.W      lc640_write
                  |L8.24|
;;;334    	vz2_error=0;
;;;335    	}
;;;336    
;;;337    if(!snmp_bat_status[0])	 			//Батарея №1
000018  f04f0201          MOV      r2,#1
;;;338    	{
;;;339    	if((bat[0]._Ub<(USIGN*10)))		//Снижение напряжения батареи ниже Uбсигн 
00001c  700a              STRB     r2,[r1,#0]
00001e  4611              MOV      r1,r2
000020  f7ffbffe          B.W      lc640_write
;;;340    		{
;;;341    		snmp_bat_flag[0]|=0x0001; 
;;;342    		if((snmp_bat_flag_puts[0]&0x0001)==0) 
;;;343    			{
;;;344    			snmp_trap_send("BAT #1 Alarm, battery is low",5,8,0); 
;;;345    			snmp_bat_flag_puts[0]|=0x0001;
;;;346    			}
;;;347    		}
;;;348    	else 
;;;349    		{
;;;350    		snmp_bat_flag[0]&=~0x0001; 
;;;351    		if(snmp_bat_flag_puts[0]&0x0001) 
;;;352    			{
;;;353    			snmp_trap_send("BAT #1 Alarm clear, battery is not low",5,8,1);
;;;354    			snmp_bat_flag_puts[0]&=~0x0001;
;;;355    			}
;;;356    		}
;;;357    
;;;358    	if(bat[0]._temper_stat&0x01)	//Повышенная температура батареи, первый порог - предупреждение
;;;359    		{
;;;360    		snmp_bat_flag[0]|=0x0002;
;;;361    		if((snmp_bat_flag_puts[0]&0x0002)==0) 
;;;362    			{
;;;363    			//snmp_trap_send("BAT #1 Warning, high battery temperature",5,8,2); 
;;;364    			snmp_bat_flag_puts[0]|=0x0002;
;;;365    			}
;;;366    		}
;;;367    	else 
;;;368    		{
;;;369    		snmp_bat_flag[0]&=~0x0002;
;;;370    		if(snmp_bat_flag_puts[0]&0x0002) 
;;;371    			{
;;;372    			//snmp_trap_send("BAT #1 Warning clear, battery temperature is normal",5,8,3);
;;;373    			snmp_bat_flag_puts[0]&=~0x02;
;;;374    			}
;;;375    		}
;;;376    
;;;377    	if(bat[0]._temper_stat&0x02)  	//Повышенная температура батареи, второй порог - авария
;;;378    		{
;;;379    		snmp_bat_flag[0]|=0x0004;
;;;380    		if((snmp_bat_flag_puts[0]&0x0004)==0) 
;;;381    			{
;;;382    			//snmp_trap_send("BAT #1 Alarm, high battery temperature",5,8,4); 
;;;383    			snmp_bat_flag_puts[0]|=0x0004;
;;;384    			}
;;;385    		}
;;;386    	else 
;;;387    		{
;;;388    		snmp_bat_flag[0]&=~0x0004;
;;;389    		if(snmp_bat_flag_puts[0]&0x0004) 
;;;390    			{
;;;391    			//snmp_trap_send("BAT #1 Alarm clear, battery temperature is normal",5,8,5);
;;;392    			snmp_bat_flag_puts[0]&=~0x0004;
;;;393    			}
;;;394    		}
;;;395    
;;;396    	if(bat[0]._Ib<(-IKB)) snmp_bat_flag[0]|=0x0008;		//Разряд батареи
;;;397    	else if(bat[0]._Ib>IKB) snmp_bat_flag[0]&=~0x0008;	//Заряд батареи
;;;398    
;;;399    	if((spc_stat==spcKE)&&(spc_bat==0))					//Контроль емкости батареи №1 
;;;400    		{
;;;401    		snmp_bat_flag[0]|=0x0010;
;;;402    		if((snmp_bat_flag_puts[0]&0x0010)==0) 
;;;403    			{
;;;404    			snmp_trap_send("BAT #1, capacity test started",5,8,6); 
;;;405    			snmp_bat_flag_puts[0]|=0x0010;
;;;406    			}
;;;407    		}
;;;408    	else 
;;;409    		{
;;;410    		snmp_bat_flag[0]&=~0x0010;
;;;411    		if(snmp_bat_flag_puts[0]&0x0010) 
;;;412    			{
;;;413    			snmp_trap_send("BAT #1, capacity test stopped",5,8,7);
;;;414    			snmp_bat_flag_puts[0]&=~0x0010;
;;;415    			}
;;;416    		}
;;;417    		
;;;418    	if(spc_stat==spcVZ)									//Выравнивающий заряд 
;;;419    		{
;;;420    		snmp_bat_flag[0]|=0x0020;
;;;421    		if((snmp_bat_flag_puts[0]&0x0020)==0) 
;;;422    			{
;;;423    			snmp_trap_send("BAT #1,leveling charge is started",5,8,8); 
;;;424    			snmp_bat_flag_puts[0]|=0x0020;
;;;425    			}
;;;426    		}
;;;427    	else 
;;;428    		{
;;;429    		snmp_bat_flag[0]&=~0x0020;
;;;430    		if(snmp_bat_flag_puts[0]&0x0020) 
;;;431    			{
;;;432    			snmp_trap_send("BAT #1,leveling charge is stopped",5,8,9);
;;;433    			snmp_bat_flag_puts[0]&=~0x0020;
;;;434    			}
;;;435    		}
;;;436    
;;;437    	if(vz_error)										 //Выравнивающий заряд заблокирован по вентиляции
;;;438    		{
;;;439    		snmp_bat_flag[0]|=0x0040;
;;;440    		if((snmp_bat_flag_puts[0]&0x0040)==0) 
;;;441    			{
;;;442    			snmp_trap_send("BAT #1,leveling charge is blocked",5,8,10); 
;;;443    			snmp_bat_flag_puts[0]|=0x0040;
;;;444    			}
;;;445    		}
;;;446    	else 
;;;447    		{
;;;448    		snmp_bat_flag[0]&=~0x0040;
;;;449    		if(snmp_bat_flag_puts[0]&0x0040) 
;;;450    			{
;;;451    			snmp_trap_send("BAT #1,leveling charge is unblocked",5,8,11);
;;;452    			snmp_bat_flag_puts[0]&=~0x0040;
;;;453    			} 
;;;454    		}
;;;455    
;;;456    	if(sp_ch_stat==scsWRK) 								//Ускореннный заряд
;;;457    		{
;;;458    		snmp_bat_flag[0]|=0x0080;
;;;459    		if((snmp_bat_flag_puts[0]&0x0080)==0) 
;;;460    			{
;;;461    			snmp_trap_send("BAT #1,speed charge is started",5,8,10); 
;;;462    			snmp_bat_flag_puts[0]|=0x0080;
;;;463    			}
;;;464    		}
;;;465    	else 
;;;466    		{
;;;467    		snmp_bat_flag[0]&=~0x0080;
;;;468    		if(snmp_bat_flag_puts[0]&0x0080) 
;;;469    			{
;;;470    			snmp_trap_send("BAT #1,speed charge is stopped",5,8,11);
;;;471    			snmp_bat_flag_puts[0]&=~0x0080;
;;;472    			}
;;;473    		}
;;;474    
;;;475    	if(sp_ch_error) 									//Ускореннный заряд заблокирован по вентиляции
;;;476    		{
;;;477    		snmp_bat_flag[0]|=0x0100;
;;;478    		if((snmp_bat_flag_puts[0]&0x0100)==0) 
;;;479    			{
;;;480    			snmp_trap_send("BAT #1,speed charge is blocked",5,8,12); 
;;;481    			snmp_bat_flag_puts[0]|=0x0100;
;;;482    			}
;;;483    		}
;;;484    	else 
;;;485    		{
;;;486    		snmp_bat_flag[0]&=~0x0100;
;;;487    		if(snmp_bat_flag_puts[0]&0x0100) 
;;;488    			{
;;;489    			snmp_trap_send("BAT #1,speed charge is unblocked",5,8,13);
;;;490    			snmp_bat_flag_puts[0]&=~0x0100;
;;;491    			} 
;;;492    		}
;;;493    
;;;494    	if(vz1_stat!=vz1sOFF)								//Уравнительный заряд 
;;;495    		{
;;;496    		snmp_bat_flag[0]|=0x0200;
;;;497    		if((snmp_bat_flag_puts[0]&0x0200)==0) 
;;;498    			{
;;;499    			snmp_trap_send("BAT #1,equalising charge is on",5,8,14); 
;;;500    			snmp_bat_flag_puts[0]|=0x0200;
;;;501    			}
;;;502    		}
;;;503    	else 
;;;504    		{
;;;505    		snmp_bat_flag[0]&=~0x0200;
;;;506    		if(snmp_bat_flag_puts[0]&0x0200) 
;;;507    			{
;;;508    			snmp_trap_send("BAT #1,equalising charge is off",5,8,15);
;;;509    			snmp_bat_flag_puts[0]&=~0x0200;
;;;510    			}
;;;511    		}
;;;512    
;;;513    	if(vz1_error)										//Уравнительный заряд заблокирован по вентиляции 
;;;514    		{
;;;515    		snmp_bat_flag[0]|=0x0400;
;;;516    		if((snmp_bat_flag_puts[0]&0x0400)==0) 
;;;517    			{
;;;518    			snmp_trap_send("BAT #1,equalising charge is blocked",5,8,16); 
;;;519    			snmp_bat_flag_puts[0]|=0x0400;
;;;520    			}
;;;521    		}
;;;522    	else 
;;;523    		{
;;;524    		snmp_bat_flag[0]&=~0x0400;
;;;525    		if(snmp_bat_flag_puts[0]&0x0400) 
;;;526    			{
;;;527    			snmp_trap_send("BAT #1,equalising charge is unblocked",5,8,17);
;;;528    			snmp_bat_flag_puts[0]&=~0x0400;
;;;529    			} 
;;;530    		}
;;;531    
;;;532    	if(vz2_stat!=vz2sOFF)								//Формовочный заряд 
;;;533    		{
;;;534    		snmp_bat_flag[0]|=0x0800;
;;;535    		if((snmp_bat_flag_puts[0]&0x0800)==0) 
;;;536    			{
;;;537    			snmp_trap_send("BAT #1,molding charge is on",5,8,18); 
;;;538    			snmp_bat_flag_puts[0]|=0x0800;
;;;539    			}
;;;540    		}
;;;541    	else 
;;;542    		{
;;;543    		snmp_bat_flag[0]&=~0x0800;
;;;544    		if(snmp_bat_flag_puts[0]&0x0800) 
;;;545    			{
;;;546    			snmp_trap_send("BAT #1,molding charge is off",5,8,19);
;;;547    			snmp_bat_flag_puts[0]&=~0x0800;
;;;548    			}
;;;549    		}
;;;550    
;;;551    	if(vz2_error) 										//Формовочный заряд заблокирован по вентиляции
;;;552    		{
;;;553    		snmp_bat_flag[0]|=0x1000;
;;;554    		if((snmp_bat_flag_puts[0]&0x1000)==0) 
;;;555    			{
;;;556    			snmp_trap_send("BAT #1,molding charge is blocked",5,8,20); 
;;;557    			snmp_bat_flag_puts[0]|=0x1000;
;;;558    			}
;;;559    		}
;;;560    	else 
;;;561    		{
;;;562    		snmp_bat_flag[0]&=~0x1000;
;;;563    		if(snmp_bat_flag_puts[0]&0x1000) 
;;;564    			{
;;;565    			snmp_trap_send("BAT #1,molding charge is unblocked",5,8,21);
;;;566    			snmp_bat_flag_puts[0]&=~0x1000;
;;;567    			} 
;;;568    		}
;;;569    	}
;;;570    else 
;;;571    	{
;;;572    	snmp_bat_flag[0]=0; 
;;;573    	snmp_bat_flag_puts[0]=0;
;;;574    	}
;;;575    
;;;576    if(!snmp_bat_status[1])	 			//Батарея №2
;;;577    	{
;;;578    	if((bat[1]._Ub<(USIGN*10)))		//Снижение напряжения батареи ниже Uбсигн 
;;;579    		{
;;;580    		snmp_bat_flag[1]|=0x0001; 
;;;581    		if((snmp_bat_flag_puts[1]&0x0001)==0) 
;;;582    			{
;;;583    			snmp_trap_send("BAT #2 Alarm, battery is low",5,8,22); 
;;;584    			snmp_bat_flag_puts[1]|=0x0001;
;;;585    			}
;;;586    		}
;;;587    	else 
;;;588    		{
;;;589    		snmp_bat_flag[1]&=~0x0001; 
;;;590    		if(snmp_bat_flag_puts[1]&0x0001) 
;;;591    			{
;;;592    			snmp_trap_send("BAT #2 Alarm clear, battery is not low",5,8,23);
;;;593    			snmp_bat_flag_puts[1]&=~0x0001;
;;;594    			}
;;;595    		}
;;;596    
;;;597    	if(bat[1]._temper_stat&0x01)	//Повышенная температура батареи, первый порог - предупреждение
;;;598    		{
;;;599    		snmp_bat_flag[1]|=0x0002;
;;;600    		if((snmp_bat_flag_puts[0]&0x0002)==0) 
;;;601    			{
;;;602    			//snmp_trap_send("BAT #2 Warning, high battery temperature",5,8,24); 
;;;603    			snmp_bat_flag_puts[1]|=0x0002;
;;;604    			}
;;;605    		}
;;;606    	else 
;;;607    		{
;;;608    		snmp_bat_flag[1]&=~0x0002;
;;;609    		if(snmp_bat_flag_puts[1]&0x0002) 
;;;610    			{
;;;611    			//snmp_trap_send("BAT #2 Warning clear, battery temperature is normal",5,8,25);
;;;612    			snmp_bat_flag_puts[1]&=~0x02;
;;;613    			}
;;;614    		}
;;;615    
;;;616    	if(bat[1]._temper_stat&0x02)  	//Повышенная температура батареи, второй порог - авария
;;;617    		{
;;;618    		snmp_bat_flag[1]|=0x0004;
;;;619    		if((snmp_bat_flag_puts[1]&0x0004)==0) 
;;;620    			{
;;;621    			//snmp_trap_send("BAT #2 Alarm, high battery temperature",5,8,26); 
;;;622    			snmp_bat_flag_puts[1]|=0x0004;
;;;623    			}
;;;624    		}
;;;625    	else 
;;;626    		{
;;;627    		snmp_bat_flag[1]&=~0x0004;
;;;628    		if(snmp_bat_flag_puts[1]&0x0004) 
;;;629    			{
;;;630    			//snmp_trap_send("BAT #2 Alarm clear, battery temperature is normal",5,8,27);
;;;631    			snmp_bat_flag_puts[1]&=~0x0004;
;;;632    			}
;;;633    		}
;;;634    
;;;635    	if(bat[1]._Ib<(-IKB)) snmp_bat_flag[1]|=0x0008;		//Разряд батареи
;;;636    	else if(bat[1]._Ib>IKB) snmp_bat_flag[1]&=~0x0008;	//Заряд батареи
;;;637    
;;;638    	if((spc_stat==spcKE)&&(spc_bat==0))					//Контроль емкости батареи №1 
;;;639    		{
;;;640    		snmp_bat_flag[1]|=0x0010;
;;;641    		if((snmp_bat_flag_puts[1]&0x0010)==0) 
;;;642    			{
;;;643    			snmp_trap_send("BAT #2, capacity test started",5,8,28); 
;;;644    			snmp_bat_flag_puts[1]|=0x0010;
;;;645    			}
;;;646    		}
;;;647    	else 
;;;648    		{
;;;649    		snmp_bat_flag[1]&=~0x0010;
;;;650    		if(snmp_bat_flag_puts[1]&0x0010) 
;;;651    			{
;;;652    			snmp_trap_send("BAT #2, capacity test stopped",5,8,29);
;;;653    			snmp_bat_flag_puts[1]&=~0x0010;
;;;654    			}
;;;655    		}
;;;656    		
;;;657    	if(spc_stat==spcVZ)									//Выравнивающий заряд 
;;;658    		{
;;;659    		snmp_bat_flag[1]|=0x0020;
;;;660    		if((snmp_bat_flag_puts[1]&0x0020)==0) 
;;;661    			{
;;;662    			snmp_trap_send("BAT #2,leveling charge is started",5,8,30); 
;;;663    			snmp_bat_flag_puts[1]|=0x0020;
;;;664    			}
;;;665    		}
;;;666    	else 
;;;667    		{
;;;668    		snmp_bat_flag[1]&=~0x0020;
;;;669    		if(snmp_bat_flag_puts[1]&0x0020) 
;;;670    			{
;;;671    			snmp_trap_send("BAT #2,leveling charge is stopped",5,8,31);
;;;672    			snmp_bat_flag_puts[1]&=~0x0020;
;;;673    			}
;;;674    		}
;;;675    
;;;676    	if(vz_error)										 //Выравнивающий заряд заблокирован по вентиляции
;;;677    		{
;;;678    		snmp_bat_flag[1]|=0x0040;
;;;679    		if((snmp_bat_flag_puts[1]&0x0040)==0) 
;;;680    			{
;;;681    			snmp_trap_send("BAT #2,leveling charge is blocked",5,8,32); 
;;;682    			snmp_bat_flag_puts[1]|=0x0040;
;;;683    			}
;;;684    		}
;;;685    	else 
;;;686    		{
;;;687    		snmp_bat_flag[1]&=~0x0040;
;;;688    		if(snmp_bat_flag_puts[1]&0x0040) 
;;;689    			{
;;;690    			snmp_trap_send("BAT #2,leveling charge is unblocked",5,8,33);
;;;691    			snmp_bat_flag_puts[1]&=~0x0040;
;;;692    			} 
;;;693    		}
;;;694    
;;;695    	if(sp_ch_stat==scsWRK) 								//Ускореннный заряд
;;;696    		{
;;;697    		snmp_bat_flag[1]|=0x0080;
;;;698    		if((snmp_bat_flag_puts[1]&0x0080)==0) 
;;;699    			{
;;;700    			snmp_trap_send("BAT #2,speed charge is started",5,8,34); 
;;;701    			snmp_bat_flag_puts[1]|=0x0080;
;;;702    			}
;;;703    		}
;;;704    	else 
;;;705    		{
;;;706    		snmp_bat_flag[1]&=~0x0080;
;;;707    		if(snmp_bat_flag_puts[1]&0x0080) 
;;;708    			{
;;;709    			snmp_trap_send("BAT #2,speed charge is stopped",5,8,35);
;;;710    			snmp_bat_flag_puts[1]&=~0x0080;
;;;711    			}
;;;712    		}
;;;713    
;;;714    	if(sp_ch_error) 									//Ускореннный заряд заблокирован по вентиляции
;;;715    		{
;;;716    		snmp_bat_flag[1]|=0x0100;
;;;717    		if((snmp_bat_flag_puts[1]&0x0100)==0) 
;;;718    			{
;;;719    			snmp_trap_send("BAT #2,speed charge is blocked",5,8,36); 
;;;720    			snmp_bat_flag_puts[1]|=0x0100;
;;;721    			}
;;;722    		}
;;;723    	else 
;;;724    		{
;;;725    		snmp_bat_flag[1]&=~0x0100;
;;;726    		if(snmp_bat_flag_puts[1]&0x0100) 
;;;727    			{
;;;728    			snmp_trap_send("BAT #2,speed charge is unblocked",5,8,37);
;;;729    			snmp_bat_flag_puts[1]&=~0x0100;
;;;730    			} 
;;;731    		}
;;;732    
;;;733    	if(vz1_stat!=vz1sOFF)								//Уравнительный заряд 
;;;734    		{
;;;735    		snmp_bat_flag[1]|=0x0200;
;;;736    		if((snmp_bat_flag_puts[1]&0x0200)==0) 
;;;737    			{
;;;738    			snmp_trap_send("BAT #2,equalising charge is on",5,8,38); 
;;;739    			snmp_bat_flag_puts[1]|=0x0200;
;;;740    			}
;;;741    		}
;;;742    	else 
;;;743    		{
;;;744    		snmp_bat_flag[1]&=~0x0200;
;;;745    		if(snmp_bat_flag_puts[1]&0x0200) 
;;;746    			{
;;;747    			snmp_trap_send("BAT #2,equalising charge is off",5,8,39);
;;;748    			snmp_bat_flag_puts[1]&=~0x0200;
;;;749    			}
;;;750    		}
;;;751    
;;;752    	if(vz1_error)										//Уравнительный заряд заблокирован по вентиляции 
;;;753    		{
;;;754    		snmp_bat_flag[1]|=0x0400;
;;;755    		if((snmp_bat_flag_puts[1]&0x0400)==0) 
;;;756    			{
;;;757    			snmp_trap_send("BAT #2,equalising charge is blocked",5,8,40); 
;;;758    			snmp_bat_flag_puts[1]|=0x0400;
;;;759    			}
;;;760    		}
;;;761    	else 
;;;762    		{
;;;763    		snmp_bat_flag[1]&=~0x0400;
;;;764    		if(snmp_bat_flag_puts[1]&0x0400) 
;;;765    			{
;;;766    			snmp_trap_send("BAT #2,equalising charge is unblocked",5,8,41);
;;;767    			snmp_bat_flag_puts[1]&=~0x0400;
;;;768    			} 
;;;769    		}
;;;770    
;;;771    	if(vz2_stat!=vz2sOFF)								//Формовочный заряд 
;;;772    		{
;;;773    		snmp_bat_flag[1]|=0x0800;
;;;774    		if((snmp_bat_flag_puts[1]&0x0800)==0) 
;;;775    			{
;;;776    			snmp_trap_send("BAT #2,molding charge is on",5,8,42); 
;;;777    			snmp_bat_flag_puts[1]|=0x0800;
;;;778    			}
;;;779    		}
;;;780    	else 
;;;781    		{
;;;782    		snmp_bat_flag[1]&=~0x0800;
;;;783    		if(snmp_bat_flag_puts[1]&0x0800) 
;;;784    			{
;;;785    			snmp_trap_send("BAT #2,molding charge is off",5,8,43);
;;;786    			snmp_bat_flag_puts[1]&=~0x0800;
;;;787    			}
;;;788    		}
;;;789    
;;;790    	if(vz2_error) 										//Формовочный заряд заблокирован по вентиляции
;;;791    		{
;;;792    		snmp_bat_flag[1]|=0x1000;
;;;793    		if((snmp_bat_flag_puts[1]&0x1000)==0) 
;;;794    			{
;;;795    			snmp_trap_send("BAT #2,molding charge is blocked",5,8,44); 
;;;796    			snmp_bat_flag_puts[1]|=0x1000;
;;;797    			}
;;;798    		}
;;;799    	else 
;;;800    		{
;;;801    		snmp_bat_flag[1]&=~0x1000;
;;;802    		if(snmp_bat_flag_puts[1]&0x1000) 
;;;803    			{
;;;804    			snmp_trap_send("BAT #2,molding charge is unblocked",5,8,45);
;;;805    			snmp_bat_flag_puts[1]&=~0x1000;
;;;806    			} 
;;;807    		}
;;;808    	}
;;;809    else 
;;;810    	{
;;;811    	snmp_bat_flag[1]=0; 
;;;812    	snmp_bat_flag_puts[1]=0;
;;;813    	}
;;;814    /*
;;;815    if(!snmp_bat_status[1])
;;;816    	{
;;;817    	if((bat[1]._Ub<(USIGN*10))) 
;;;818    		{
;;;819    		snmp_bat_flag[1]|=0x01; 
;;;820    		if((snmp_bat_flag_puts[1]&0x01)==0) 
;;;821    			{
;;;822    			snmp_trap_send("BAT #2 Alarm, battery is low",5,8,0); 
;;;823    			snmp_bat_flag_puts[1]|=0x01;
;;;824    			}
;;;825    		}
;;;826    	else 
;;;827    		{
;;;828    		snmp_bat_flag[1]&=~0x01; 
;;;829    		if(snmp_bat_flag_puts[1]&0x01) 
;;;830    			{
;;;831    			snmp_trap_send("BAT #2 Alarm clear, battery is not low",5,8,1);
;;;832    			snmp_bat_flag_puts[1]&=~0x01;
;;;833    			}
;;;834    		}
;;;835    	if(bat[1]._temper_stat&0x01) 
;;;836    		{
;;;837    		snmp_bat_flag[1]|=0x02;
;;;838    		if((snmp_bat_flag_puts[1]&0x02)==0) 
;;;839    			{
;;;840    			snmp_trap_send("BAT #2 Alarm, high battery temperature",5,8,2); 
;;;841    			snmp_bat_flag_puts[1]|=0x02;
;;;842    			}
;;;843    		}
;;;844    	else 
;;;845    		{
;;;846    		snmp_bat_flag[1]&=~0x02;
;;;847    		if(snmp_bat_flag_puts[1]&0x02) 
;;;848    			{
;;;849    			snmp_trap_send("BAT #2 Alarm clear, battery temperature is normal",5,8,3);
;;;850    			snmp_bat_flag_puts[1]&=~0x02;
;;;851    			}
;;;852    		}
;;;853    	if(bat[1]._temper_stat&0x02) 
;;;854    		{
;;;855    		snmp_bat_flag[1]|=0x04;
;;;856    		if((snmp_bat_flag_puts[1]&0x04)==0) 
;;;857    			{
;;;858    			snmp_trap_send("BAT #2 Alarm, maximum battery temperature",5,8,4); 
;;;859    			snmp_bat_flag_puts[1]|=0x04;
;;;860    			}
;;;861    		}
;;;862    	else 
;;;863    		{
;;;864    		snmp_bat_flag[1]&=~0x04;
;;;865    		if(snmp_bat_flag_puts[1]&0x04) 
;;;866    			{
;;;867    			snmp_trap_send("BAT #2 Alarm clear, battery temperature is normal",5,8,5);
;;;868    			snmp_bat_flag_puts[1]&=~0x04;
;;;869    			}
;;;870    		}
;;;871    		
;;;872    	if(bat[1]._Ib<(-IKB))	snmp_bat_flag[1]|=0x80;
;;;873    	else if(bat[1]._Ib>IKB)snmp_bat_flag[1]&=~0x80;
;;;874    
;;;875    	if((spc_stat==spcKE)&&(spc_bat==1)) 
;;;876    		{
;;;877    		snmp_bat_flag[1]|=0x10;
;;;878    		if((snmp_bat_flag_puts[1]&0x10)==0) 
;;;879    			{
;;;880    			snmp_trap_send("BAT #2, capacity check enabled",5,8,6); 
;;;881    			snmp_bat_flag_puts[1]|=0x10;
;;;882    			}
;;;883    		}
;;;884    	else 
;;;885    		{
;;;886    		snmp_bat_flag[1]&=~0x10;
;;;887    		if(snmp_bat_flag_puts[1]&0x10) 
;;;888    			{
;;;889    			snmp_trap_send("BAT #2, capacity check disabled",5,8,7);
;;;890    			snmp_bat_flag_puts[1]&=~0x10;
;;;891    			}
;;;892    		}
;;;893    		
;;;894    	if(spc_stat==spcVZ) 
;;;895    		{
;;;896    		snmp_bat_flag[1]|=0x20;
;;;897    		if((snmp_bat_flag_puts[1]&0x20)==0) 
;;;898    			{
;;;899    			snmp_trap_send("BAT #2,equalizing charge is on",5,8,8); 
;;;900    			snmp_bat_flag_puts[1]|=0x20;
;;;901    			}
;;;902    		}
;;;903    	else 
;;;904    		{
;;;905    		snmp_bat_flag[1]&=~0x20;
;;;906    		if(snmp_bat_flag_puts[1]&0x20) 
;;;907    			{
;;;908    			snmp_trap_send("BAT #2,equalizing charge is off",5,8,9);
;;;909    			snmp_bat_flag_puts[1]&=~0x20;
;;;910    			}
;;;911    		}
;;;912    
;;;913    	if(vz_error) 
;;;914    		{
;;;915    		snmp_bat_flag[1]|=0x40;
;;;916    		if((snmp_bat_flag_puts[1]&0x40)==0) 
;;;917    			{
;;;918    			snmp_trap_send("BAT #2,equalizing charge blocked",5,8,10); 
;;;919    			snmp_bat_flag_puts[1]|=0x40;
;;;920    			}
;;;921    		}
;;;922    	else 
;;;923    		{
;;;924    		snmp_bat_flag[1]&=~0x40;
;;;925    		if(snmp_bat_flag_puts[1]&0x40) 
;;;926    			{
;;;927    			snmp_trap_send("BAT #2,equalizing charge is not blocked",5,8,11);
;;;928    			snmp_bat_flag_puts[1]&=~0x40;
;;;929    			} 
;;;930    		}
;;;931       }
;;;932    else 
;;;933    	{
;;;934    	snmp_bat_flag[1]=0; 
;;;935    	snmp_bat_flag_puts[1]=0;
;;;936    	} */
;;;937    }
;;;938    
                          ENDP

                  |L8.36|
                          DCD      hv_vz_stat

                          AREA ||.bss||, DATA, NOINIT, ALIGN=2

                  i_bat_buff
                          %        12
                  adc_buff
                          %        1024
                  adc_buff_
                          %        32
                  main_power_buffer
                          %        32
                  I_from_t_table
                          %        14
                  U_end_from_i_table
                          %        14
                  bat_hndl_plazma
                          %        20

                          AREA ||area_number.11||, DATA, NOINIT, ALIGN=1

                          EXPORTAS ||area_number.11||, ||.bss||
                  adc_buff_max
                          %        24

                          AREA ||area_number.12||, DATA, NOINIT, ALIGN=1

                          EXPORTAS ||area_number.12||, ||.bss||
                  net_buff
                          %        64

                          AREA ||.constdata||, DATA, READONLY, ALIGN=0

                  sk_buff_KONTUR
000000  0d0b0f0e          DCB      0x0d,0x0b,0x0f,0x0e

                          AREA ||area_number.15||, DATA, READONLY, ALIGN=0

                          EXPORTAS ||area_number.15||, ||.constdata||
                  sk_buff_RSTKM
000000  0d0b0f0e          DCB      0x0d,0x0b,0x0f,0x0e

                          AREA ||area_number.16||, DATA, READONLY, ALIGN=0

                          EXPORTAS ||area_number.16||, ||.constdata||
                  sk_buff_GLONASS
000000  0b0d0f0e          DCB      0x0b,0x0d,0x0f,0x0e

                          AREA ||area_number.17||, DATA, READONLY, ALIGN=0

                          EXPORTAS ||area_number.17||, ||.constdata||
                  sk_buff_3U
000000  0b0d0f0e          DCB      0x0b,0x0d,0x0f,0x0e

                          AREA ||area_number.18||, DATA, READONLY, ALIGN=0

                          EXPORTAS ||area_number.18||, ||.constdata||
                  sk_buff_6U
000000  0b0d0f0e          DCB      0x0b,0x0d,0x0f,0x0e

                          AREA ||area_number.19||, DATA, READONLY, ALIGN=2

                          EXPORTAS ||area_number.19||, ||.constdata||
                  sk_buff_220
000000  0b0d0f0e          DCB      0x0b,0x0d,0x0f,0x0e
                          DCD      0x00000258
                          DCD      0x00000708
                          DCD      0x00000e10
                          DCD      0x00002a30
                          DCD      0x00004650
                          DCD      0x00008ca0
                          DCD      0x00011940
                          DCD      0x00000258
                          DCD      0x00000708
                          DCD      0x00000e10
                          DCD      0x00002a30
                          DCD      0x00004650
                          DCD      0x00008ca0
                          DCD      0x00011940

                          AREA ||area_number.20||, DATA, READONLY, ALIGN=0

                          EXPORTAS ||area_number.20||, ||.constdata||
                  sk_buff_TELECORE2015
000000  0b0d0f0e          DCB      0x0b,0x0d,0x0f,0x0e

                          AREA ||.data||, DATA, ALIGN=1

                  adc_buff_min
000000  13881388          DCW      0x1388,0x1388
000004  13881388          DCW      0x1388,0x1388
000008  13881388          DCW      0x1388,0x1388
00000c  13881388          DCW      0x1388,0x1388
000010  13881388          DCW      0x1388,0x1388
                          DCDU     0x00000000

                          AREA ||area_number.22||, DATA, ALIGN=1

                          EXPORTAS ||area_number.22||, ||.data||
                  unet_buff_min
000000  1388              DCW      0x1388

                          AREA ||area_number.23||, DATA, ALIGN=0

                          EXPORTAS ||area_number.23||, ||.data||
                  adc_stat
000000  01                DCB      0x01

                          AREA ||area_number.24||, DATA, ALIGN=1

                          EXPORTAS ||area_number.24||, ||.data||
                  bat_ver_cnt
000000  0096              DCW      0x0096

                          AREA ||area_number.25||, DATA, ALIGN=2

                          EXPORTAS ||area_number.25||, ||.data||
                  vent_stat
000000  00                DCB      0x00
                  vz_error
000001  00                DCB      0x00
                  sp_ch_error
000002  00                DCB      0x00
                  vz1_error
000003  00                DCB      0x00
                  vz2_error
000004  00                DCB      0x00
                  vz1_stat
000005  00                DCB      0x00
                  vz1_stat_old
000006  00                DCB      0x00
                  vz2_stat
000007  00                DCB      0x00
                  vz2_stat_old
000008  00                DCB      0x00
                  bat_hndl_zvu_init
000009  00                DCB      0x00
                  bat_hndl_zvu_ke_init
00000a  00                DCB      0x00
                  bat_hndl_i_vector
00000b  00                DCB      0x00
                  bat_hndl_i_vector_old
00000c  00                DCB      0x00
                  ke_drv_cnt_10s
00000d  00                DCB      0x00
                  i_bat_buff_cnt
00000e  00                DCB      0x00
                  cntrlStatIsDownCnt
00000f  00                DCB      0x00
                  adc_self_ch_cnt
000010  00                DCB      0x00
                  adc_ch_net
000011  00                DCB      0x00
                  adc_ch
000012  00                DCB      0x00
                  adc_ch_cnt
000013  00                DCB      0x00
                  adc_window_flag
000014  00                DCB      0x00
                  ch_cnt0
000015  00                DCB      0x00
                  b1Hz_ch
000016  00                DCB      0x00
                  i
000017  00                DCB      0x00
                  iiii
000018  00                DCB      0x00
                  bAVG
000019  00                DCB      0x00
                  avg_num
00001a  00                DCB      0x00
                  avg_vektor
00001b  00                DCB      0x00
                  kb_full_ver
00001c  00                DCB      0x00
                  kb_start_ips
00001d  00                DCB      0x00
                  num_of_wrks_bps
00001e  00                DCB      0x00
                  num_necc_up
00001f  00                DCB      0x00
                  num_necc_down
000020  00                DCB      0x00
                  sh_cnt0
000021  00                DCB      0x00
                  b1Hz_sh
000022  00                DCB      0x00
                  spc_stat
000023  00                DCB      0x00
                  spc_bat
000024  00                DCB      0x00
                  spc_phase
000025  00                DCB      0x00
                  bAVZ
000026  00                DCB      0x00
                  ke_start_stat
000027  00                DCB      0x00
                  numOfForvardBps
000028  00                DCB      0x00
                  numOfForvardBps_old
000029  00                DCB      0x00
                  numOfForvardBps_minCnt
00002a  00                DCB      0x00
                  bPARALLEL_NOT_ENOUG
00002b  00                DCB      0x00
                  bPARALLEL_ENOUG
00002c  00                DCB      0x00
                  bPARALLEL
00002d  00                DCB      0x00
                  cntrl_hndl_plazma
00002e  00                DCB      0x00
                  volt_region
00002f  00                DCB      0x00
                  bat_hndl_zvu_Q_cnt
000030  00                DCB      0x00
                  avar_bps_reset_cnt
000031  00                DCB      0x00
                  cntrl_stat
000032  0258              DCW      0x0258
                  cntrl_stat_old
000034  0258              DCW      0x0258
                  avg_main_cnt
000036  0014              DCW      0x0014
                  num_necc_block_cnt
000038  0000              DCB      0x00,0x00
                  net_buff_
00003a  0000              DCB      0x00,0x00
                  adc_result
00003c  0000              DCB      0x00,0x00
                  adc_gorb_cnt
00003e  0000              DCB      0x00,0x00
                  adc_zero_cnt
000040  0000              DCB      0x00,0x00
                  adc_window_cnt
000042  0000              DCB      0x00,0x00
                  adc_net_buff_cnt
000044  0000              DCB      0x00,0x00
                  plazma_sk
000046  0000              DCB      0x00,0x00
                  cntrl_stat_new
000048  0000              DCB      0x00,0x00
                  Ibmax
00004a  0000              DCB      0x00,0x00
                  IZMAX_
00004c  0000              DCB      0x00,0x00
                  Ubpsmax
00004e  0000              DCB      0x00,0x00
                  samokalibr_cnt
000050  0000              DCB      0x00,0x00
                  main_kb_cnt
000052  0000              DCB      0x00,0x00
                  kb_cnt_1lev
000054  0000              DCB      0x00,0x00
                  kb_cnt_2lev
000056  0000              DCB      0x00,0x00
                  kb_start
000058  0000              DCB      0x00,0x00
                  ibat_ips
00005a  0000              DCB      0x00,0x00
                  ibat_ips_
00005c  0000              DCB      0x00,0x00
                  vz_cnt_s
00005e  0000              DCB      0x00,0x00
                  vz_cnt_s_
000060  0000              DCB      0x00,0x00
                  vz_cnt_h
000062  0000              DCB      0x00,0x00
                  vz_cnt_h_
000064  0000              DCB      0x00,0x00
                  cnt_end_ke
000066  0000              DCB      0x00,0x00
                  __ee_vz_cnt
000068  0000              DCB      0x00,0x00
                  __ee_spc_stat
00006a  0000              DCB      0x00,0x00
                  __ee_spc_bat
00006c  0000              DCB      0x00,0x00
                  __ee_spc_phase
00006e  0000              DCB      0x00,0x00
                  cntrl_stat_blok_cnt
000070  0000              DCB      0x00,0x00
                  cntrl_stat_blok_cnt_
000072  0000              DCB      0x00,0x00
                  numOfForvardBps_hourCnt
000074  0000              DCB      0x00,0x00
                  vz1_stat_cnt
000076  0000              DCB      0x00,0x00
                  volt_region_cnt
000078  0000              DCB      0x00,0x00
                  vz2_stat_cnt
00007a  0000              DCB      0x00,0x00
                  vz2_stat_ph2_cnt
00007c  0000              DCB      0x00,0x00
                  plazma_ica1
00007e  0000              DCB      0x00,0x00
                  bat_hndl_i
000080  0000              DCB      0x00,0x00
                  bat_hndl_t_razr_hour
000082  0000              DCB      0x00,0x00
                  bat_hndl_t_razr_min
000084  0000              DCB      0x00,0x00
                  bat_hndl_t_razr_mininhour
000086  0000              DCB      0x00,0x00
                  bat_hndl_i_temp
000088  0000              DCB      0x00,0x00
                  bat_hndl_u_end
00008a  0000              DCB      0x00,0x00
                  bat_hndl_i_zar_price
                          DCD      0x00000000
                  ibat
                          DCD      0x00000000
                  ibat_
                          DCD      0x00000000
                  i_avg_max
                          DCD      0x00000000
                  i_avg_min
                          DCD      0x00000000
                  i_avg_summ
                          DCD      0x00000000
                  i_avg
                          DCD      0x00000000
                  avg
                          DCD      0x00000000
                  bps_on_mask
                          DCD      0x00000000
                  bps_off_mask
                          DCD      0x00000000
                  cntrl_stat_blok_cnt_plus
                          DCD      0x00000000
                  cntrl_stat_blok_cnt_minus
                          DCD      0x00000000
                  plazma_inv
                          DCD      0x00000000
                  vz1_wrk_cnt
                          DCD      0x00000000
                  vz1_up_cnt
                          DCD      0x00000000
                  vz2_wrk_cnt
                          DCD      0x00000000
                  vz2_up_cnt
                          DCD      0x00000000
                  bat_hndl_t_razr
                          DCD      0x00000000
                  bat_hndl_t_razr_ke
                          DCD      0x00000000
                  bat_hndl_zvu_Q
                          DCD      0x00000000
                  bat_hndl_proc_razr
                          DCD      0x00000000
                  bat_hndl_remain_time
                          DCD      0x00000000
                  amper_chas_cnt_drv_summ
                          DCD      0x00000000
                  bat_hndl_i_summ
                          DCD      0x00000000
                  net_metr_buff_
                          DCD      0x00000000
0000f0  0000              DCB      0x00,0x00
                  adc_self_ch_buff
0000f2  0000              DCB      0x00,0x00
                          DCD      0x00000000
                  adc_self_ch_disp
                          DCD      0x00000000
0000fc  00000000          DCB      0x00,0x00,0x00,0x00
                  ke_date
                          %        8

                          AREA ||area_number.26||, DATA, ALIGN=0

                          EXPORTAS ||area_number.26||, ||.data||
                  rx_read_power_cnt_phase
000000  0f                DCB      0x0f

                          AREA ||area_number.27||, DATA, ALIGN=1

                          EXPORTAS ||area_number.27||, ||.data||
                  read_power_cnt_main_cnt
000000  0064              DCW      0x0064

                          AREA ||area_number.28||, DATA, ALIGN=0

                          EXPORTAS ||area_number.28||, ||.data||
                  rx_read_power_cnt_plazma
000000  00                DCB      0x00

                          AREA ||area_number.29||, DATA, ALIGN=0

                          EXPORTAS ||area_number.29||, ||.data||
                  rx_read_power_cnt_flag
000000  00                DCB      0x00

                          AREA ||area_number.30||, DATA, ALIGN=0

                          EXPORTAS ||area_number.30||, ||.data||
                  bENERGOMETR_UIP
000000  00                DCB      0x00

                          AREA ||area_number.31||, DATA, ALIGN=1

                          EXPORTAS ||area_number.31||, ||.data||
                  unet_buff_max
000000  0000              DCB      0x00,0x00

                          AREA ||area_number.32||, DATA, ALIGN=0

                          EXPORTAS ||area_number.32||, ||.data||
                  adc_cnt
000000  00                DCB      0x00

                          AREA ||area_number.33||, DATA, ALIGN=0

                          EXPORTAS ||area_number.33||, ||.data||
                  adc_cnt1
000000  00                DCB      0x00

                          AREA ||area_number.34||, DATA, ALIGN=1

                          EXPORTAS ||area_number.34||, ||.data||
                  zero_cnt
000000  0000              DCB      0x00,0x00

                          AREA ||area_number.35||, DATA, ALIGN=0

                          EXPORTAS ||area_number.35||, ||.data||
                  net_buff_cnt
000000  00                DCB      0x00

                          AREA ||area_number.36||, DATA, ALIGN=1

                          EXPORTAS ||area_number.36||, ||.data||
                  ADWR
000000  0000              DCB      0x00,0x00

                          AREA ||area_number.37||, DATA, ALIGN=1

                          EXPORTAS ||area_number.37||, ||.data||
                  period_cnt
000000  0000              DCB      0x00,0x00

                          AREA ||area_number.38||, DATA, ALIGN=1

                          EXPORTAS ||area_number.38||, ||.data||
                  non_zero_cnt
000000  0000              DCB      0x00,0x00

                          AREA ||area_number.39||, DATA, ALIGN=0

                          EXPORTAS ||area_number.39||, ||.data||
                  rele_stat
000000  00                DCB      0x00

                          AREA ||area_number.40||, DATA, ALIGN=0

                          EXPORTAS ||area_number.40||, ||.data||
                  bRELE_OUT
000000  00                DCB      0x00

                          AREA ||area_number.41||, DATA, ALIGN=2

                          EXPORTAS ||area_number.41||, ||.data||
                  main_power_buffer_
                          DCD      0x00000000

                          AREA ||area_number.42||, DATA, ALIGN=1

                          EXPORTAS ||area_number.42||, ||.data||
                  main_power_buffer_cnt
000000  0000              DCB      0x00,0x00

                          AREA ||area_number.43||, DATA, ALIGN=1

                          EXPORTAS ||area_number.43||, ||.data||
                  adc_buff_out_
                          DCDU     0x00000000
000004  0000              DCB      0x00,0x00

                          AREA ||area_number.44||, DATA, ALIGN=1

                          EXPORTAS ||area_number.44||, ||.data||
                  plazma_adc_cnt
000000  0000              DCB      0x00,0x00

                          AREA ||area_number.45||, DATA, ALIGN=0

                          EXPORTAS ||area_number.45||, ||.data||
                  unh_cnt0
000000  00                DCB      0x00

                          AREA ||area_number.46||, DATA, ALIGN=0

                          EXPORTAS ||area_number.46||, ||.data||
                  unh_cnt1
000000  00                DCB      0x00

                          AREA ||area_number.47||, DATA, ALIGN=0

                          EXPORTAS ||area_number.47||, ||.data||
                  b1Hz_unh
000000  00                DCB      0x00

                          AREA ||area_number.48||, DATA, ALIGN=0

                          EXPORTAS ||area_number.48||, ||.data||
                  ch_cnt1
000000  00                DCB      0x00

                          AREA ||area_number.49||, DATA, ALIGN=0

                          EXPORTAS ||area_number.49||, ||.data||
                  b1_30Hz_ch
000000  00                DCB      0x00

                          AREA ||area_number.50||, DATA, ALIGN=0

                          EXPORTAS ||area_number.50||, ||.data||
                  ch_cnt2
000000  00                DCB      0x00

                          AREA ||area_number.51||, DATA, ALIGN=0

                          EXPORTAS ||area_number.51||, ||.data||
                  b1_10Hz_ch
000000  00                DCB      0x00

                          AREA ||area_number.52||, DATA, ALIGN=1

                          EXPORTAS ||area_number.52||, ||.data||
                  IZMAX_70
000000  0000              DCB      0x00,0x00

                          AREA ||area_number.53||, DATA, ALIGN=1

                          EXPORTAS ||area_number.53||, ||.data||
                  IZMAX_130
000000  0000              DCB      0x00,0x00

                          AREA ||area_number.54||, DATA, ALIGN=1

                          EXPORTAS ||area_number.54||, ||.data||
                  cntrl_stat_blck_cnt
000000  0000              DCB      0x00,0x00

                          AREA ||area_number.55||, DATA, ALIGN=0

                          EXPORTAS ||area_number.55||, ||.data||
                  avg_cnt
000000  00                DCB      0x00

                          AREA ||area_number.56||, DATA, ALIGN=0

                          EXPORTAS ||area_number.56||, ||.data||
                  bps_all_off_cnt
000000  00                DCB      0x00

                          AREA ||area_number.57||, DATA, ALIGN=0

                          EXPORTAS ||area_number.57||, ||.data||
                  bps_mask_off_cnt
000000  00                DCB      0x00

                          AREA ||area_number.58||, DATA, ALIGN=0

                          EXPORTAS ||area_number.58||, ||.data||
                  bps_mask_on_off_cnt
000000  00                DCB      0x00

                          AREA ||area_number.59||, DATA, ALIGN=0

                          EXPORTAS ||area_number.59||, ||.data||
                  bps_hndl_2sec_cnt
000000  00                DCB      0x00

                          AREA ||area_number.60||, DATA, ALIGN=0

                          EXPORTAS ||area_number.60||, ||.data||
                  plazma_bat
000000  00                DCB      0x00

                          AREA ||area_number.61||, DATA, ALIGN=0

                          EXPORTAS ||area_number.61||, ||.data||
                  plazma_cntrl_stat
000000  00                DCB      0x00

                          AREA ||area_number.62||, DATA, ALIGN=1

                          EXPORTAS ||area_number.62||, ||.data||
                  ce102m_delayCnt
000000  0000              DCB      0x00,0x00

                          AREA ||area_number.63||, DATA, ALIGN=1

                          EXPORTAS ||area_number.63||, ||.data||
                  volta_short
000000  0000              DCB      0x00,0x00

                          AREA ||area_number.64||, DATA, ALIGN=1

                          EXPORTAS ||area_number.64||, ||.data||
                  curr_short
000000  0000              DCB      0x00,0x00

                          AREA ||area_number.65||, DATA, ALIGN=2

                          EXPORTAS ||area_number.65||, ||.data||
                  power_int
                          DCD      0x00000000

                          AREA ||area_number.66||, DATA, ALIGN=1

                          EXPORTAS ||area_number.66||, ||.data||
                  plazma_ica2
000000  0000              DCB      0x00,0x00

                          AREA ||area_number.67||, DATA, ALIGN=0

                          EXPORTAS ||area_number.67||, ||.data||
                  rele_hndl_plazma
000000  000000            DCB      0x00,0x00,0x00

                          AREA ||area_number.68||, DATA, ALIGN=1

                          EXPORTAS ||area_number.68||, ||.data||
                  spirit_wrk_cnt
000000  0000              DCB      0x00,0x00
