; generated by ARM C/C++ Compiler, 4.1 [Build 481]
; commandline ArmCC [--debug -c --asm --interleave -o.\EXE\system_lpc17xx.o --depend=.\EXE\system_lpc17xx.d --feedback=.\EXE\UKU_220_IPS_TERMOKOMPENSAT.fed --cpu=Cortex-M3 --apcs=interwork -O1 -IC:\Keil\ARM\INC -IC:\Keil\ARM\INC\NXP\LPC17xx -D__MICROLIB -DUKU_220_IPS_TERMOKOMPENSAT -DUKU2071x --omf_browse=.\EXE\system_lpc17xx.crf system_LPC17xx.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  SystemInit PROC
;;;408     */
;;;409    void SystemInit (void)
000000  b530              PUSH     {r4,r5,lr}
;;;410    {
;;;411    #if (CLOCK_SETUP)                       /* Clock Setup                        */
;;;412      LPC_SC->SCS       = SCS_Val;
000002  495c              LDR      r1,|L1.372|
000004  2020              MOVS     r0,#0x20
000006  f8c101a0          STR      r0,[r1,#0x1a0]
                  |L1.10|
;;;413      if (SCS_Val & (1 << 5)) {             /* If Main Oscillator is enabled      */
;;;414        while ((LPC_SC->SCS & (1<<6)) == 0);/* Wait for Oscillator to be ready    */
00000a  f8d101a0          LDR      r0,[r1,#0x1a0]
00000e  0640              LSLS     r0,r0,#25
000010  d5fb              BPL      |L1.10|
;;;415      }
;;;416    
;;;417      LPC_SC->CCLKCFG   = CCLKCFG_Val;      /* Setup Clock Divider                */
000012  f1010180          ADD      r1,r1,#0x80
000016  2303              MOVS     r3,#3
000018  f8c13084          STR      r3,[r1,#0x84]
;;;418    
;;;419      LPC_SC->PCLKSEL0  = PCLKSEL0_Val;     /* Peripheral Clock Selection         */
00001c  f44f3000          MOV      r0,#0x20000
000020  f8c10128          STR      r0,[r1,#0x128]
;;;420      LPC_SC->PCLKSEL1  = PCLKSEL1_Val;
000024  f04f0200          MOV      r2,#0
000028  f8c1212c          STR      r2,[r1,#0x12c]
;;;421    
;;;422    #if (PLL0_SETUP)
;;;423      LPC_SC->CLKSRCSEL = CLKSRCSEL_Val;    /* Select Clock Source for PLL0       */
00002c  f04f0001          MOV      r0,#1
000030  f8c1008c          STR      r0,[r1,#0x8c]
;;;424      LPC_SC->PLL0CFG   = PLL0CFG_Val;
000034  4c50              LDR      r4,|L1.376|
000036  604c              STR      r4,[r1,#4]
;;;425      LPC_SC->PLL0CON   = 0x01;             /* PLL0 Enable                        */
000038  6008              STR      r0,[r1,#0]
;;;426      LPC_SC->PLL0FEED  = 0xAA;
00003a  f04f05aa          MOV      r5,#0xaa
00003e  60cd              STR      r5,[r1,#0xc]
;;;427      LPC_SC->PLL0FEED  = 0x55;
000040  f04f0455          MOV      r4,#0x55
000044  60cc              STR      r4,[r1,#0xc]
000046  f1a10180          SUB      r1,r1,#0x80
                  |L1.74|
;;;428      while (!(LPC_SC->PLL0STAT & (1<<26)));/* Wait for PLOCK0                    */
00004a  f8d10088          LDR      r0,[r1,#0x88]
00004e  0140              LSLS     r0,r0,#5
000050  d5fb              BPL      |L1.74|
;;;429    
;;;430      LPC_SC->PLL0CON   = 0x03;             /* PLL0 Enable & Connect              */
000052  f8413f80          STR      r3,[r1,#0x80]!
;;;431      LPC_SC->PLL0FEED  = 0xAA;
000056  60cd              STR      r5,[r1,#0xc]
;;;432      LPC_SC->PLL0FEED  = 0x55;
000058  60cc              STR      r4,[r1,#0xc]
;;;433    #endif
;;;434    
;;;435    #if (PLL1_SETUP)
;;;436      LPC_SC->PLL1CFG   = PLL1CFG_Val;
;;;437      LPC_SC->PLL1CON   = 0x01;             /* PLL1 Enable                        */
;;;438      LPC_SC->PLL1FEED  = 0xAA;
;;;439      LPC_SC->PLL1FEED  = 0x55;
;;;440      while (!(LPC_SC->PLL1STAT & (1<<10)));/* Wait for PLOCK1                    */
;;;441    
;;;442      LPC_SC->PLL1CON   = 0x03;             /* PLL1 Enable & Connect              */
;;;443      LPC_SC->PLL1FEED  = 0xAA;
;;;444      LPC_SC->PLL1FEED  = 0x55;
;;;445    #else
;;;446      LPC_SC->USBCLKCFG = USBCLKCFG_Val;    /* Setup USB Clock Divider            */
00005a  f8c12088          STR      r2,[r1,#0x88]
;;;447    #endif
;;;448    
;;;449      LPC_SC->PCONP     = PCONP_Val;        /* Power Control for Peripherals      */
00005e  4847              LDR      r0,|L1.380|
000060  6448              STR      r0,[r1,#0x44]
;;;450    
;;;451      LPC_SC->CLKOUTCFG = CLKOUTCFG_Val;    /* Clock Output Configuration         */
000062  f8c12148          STR      r2,[r1,#0x148]
;;;452    #endif
;;;453    
;;;454      /* Determine clock frequency according to clock register values             */
;;;455      if (((LPC_SC->PLL0STAT >> 24)&3)==3) {/* If PLL0 enabled and connected      */
000066  6888              LDR      r0,[r1,#8]
;;;456        switch (LPC_SC->CLKSRCSEL & 0x03) {
;;;457          case 0:                           /* Internal RC oscillator => PLL0     */
;;;458          case 3:                           /* Reserved, default to Internal RC   */
;;;459            SystemFrequency = (IRC_OSC * 
000068  4a45              LDR      r2,|L1.384|
00006a  ea6f6010          MVN      r0,r0,LSR #24         ;455
00006e  f1a10180          SUB      r1,r1,#0x80           ;455
000072  0780              LSLS     r0,r0,#30             ;455
000074  d00b              BEQ      |L1.142|
;;;460                              (((2 * ((LPC_SC->PLL0STAT & 0x7FFF) + 1))) /
;;;461                              (((LPC_SC->PLL0STAT >> 16) & 0xFF) + 1))   /
;;;462                              ((LPC_SC->CCLKCFG & 0xFF)+ 1));
;;;463            break;
;;;464          case 1:                           /* Main oscillator => PLL0            */
;;;465            SystemFrequency = (OSC_CLK * 
;;;466                              (((2 * ((LPC_SC->PLL0STAT & 0x7FFF) + 1))) /
;;;467                              (((LPC_SC->PLL0STAT >> 16) & 0xFF) + 1))   /
;;;468                              ((LPC_SC->CCLKCFG & 0xFF)+ 1));
;;;469            break;
;;;470          case 2:                           /* RTC oscillator => PLL0             */
;;;471            SystemFrequency = (RTC_CLK * 
;;;472                              (((2 * ((LPC_SC->PLL0STAT & 0x7FFF) + 1))) /
;;;473                              (((LPC_SC->PLL0STAT >> 16) & 0xFF) + 1))   /
;;;474                              ((LPC_SC->CCLKCFG & 0xFF)+ 1));
;;;475            break;
;;;476        }
;;;477      } else {
;;;478        switch (LPC_SC->CLKSRCSEL & 0x03) {
000076  f8d1010c          LDR      r0,[r1,#0x10c]
00007a  f0100003          ANDS     r0,r0,#3
00007e  d05a              BEQ      |L1.310|
000080  2801              CMP      r0,#1
000082  d061              BEQ      |L1.328|
000084  2802              CMP      r0,#2
000086  d068              BEQ      |L1.346|
000088  2803              CMP      r0,#3
00008a  d16f              BNE      |L1.364|
00008c  e053              B        |L1.310|
                  |L1.142|
00008e  f8d1010c          LDR      r0,[r1,#0x10c]        ;456
000092  f0100003          ANDS     r0,r0,#3              ;456
000096  d005              BEQ      |L1.164|
000098  2801              CMP      r0,#1                 ;456
00009a  d01b              BEQ      |L1.212|
00009c  2802              CMP      r0,#2                 ;456
00009e  d031              BEQ      |L1.260|
0000a0  2803              CMP      r0,#3                 ;456
0000a2  d163              BNE      |L1.364|
                  |L1.164|
0000a4  f8510f88          LDR      r0,[r1,#0x88]!        ;459
0000a8  f3c0000e          UBFX     r0,r0,#0,#15          ;459
0000ac  1c40              ADDS     r0,r0,#1              ;459
0000ae  0043              LSLS     r3,r0,#1              ;459
0000b0  6808              LDR      r0,[r1,#0]            ;459
0000b2  f3c04007          UBFX     r0,r0,#16,#8          ;459
0000b6  1c40              ADDS     r0,r0,#1              ;459
0000b8  fbb3f0f0          UDIV     r0,r3,r0              ;459
0000bc  4b31              LDR      r3,|L1.388|
0000be  4358              MULS     r0,r3,r0              ;459
0000c0  6fcb              LDR      r3,[r1,#0x7c]         ;459
0000c2  f1a10188          SUB      r1,r1,#0x88           ;459
0000c6  b2db              UXTB     r3,r3                 ;459
0000c8  f1030301          ADD      r3,r3,#1              ;459
0000cc  fbb0f0f3          UDIV     r0,r0,r3              ;459
0000d0  6010              STR      r0,[r2,#0]            ;459  ; SystemFrequency
0000d2  e04b              B        |L1.364|
                  |L1.212|
0000d4  f8510f88          LDR      r0,[r1,#0x88]!        ;465
0000d8  f3c0000e          UBFX     r0,r0,#0,#15          ;465
0000dc  1c40              ADDS     r0,r0,#1              ;465
0000de  0043              LSLS     r3,r0,#1              ;465
0000e0  6808              LDR      r0,[r1,#0]            ;465
0000e2  f3c04007          UBFX     r0,r0,#16,#8          ;465
0000e6  1c40              ADDS     r0,r0,#1              ;465
0000e8  fbb3f0f0          UDIV     r0,r3,r0              ;465
0000ec  4b26              LDR      r3,|L1.392|
0000ee  4358              MULS     r0,r3,r0              ;465
0000f0  6fcb              LDR      r3,[r1,#0x7c]         ;465
0000f2  f1a10188          SUB      r1,r1,#0x88           ;465
0000f6  b2db              UXTB     r3,r3                 ;465
0000f8  f1030301          ADD      r3,r3,#1              ;465
0000fc  fbb0f0f3          UDIV     r0,r0,r3              ;465
000100  6010              STR      r0,[r2,#0]            ;465  ; SystemFrequency
000102  e033              B        |L1.364|
                  |L1.260|
000104  f8510f88          LDR      r0,[r1,#0x88]!        ;471
000108  f3c0000e          UBFX     r0,r0,#0,#15          ;471
00010c  1c40              ADDS     r0,r0,#1              ;471
00010e  0043              LSLS     r3,r0,#1              ;471
000110  6808              LDR      r0,[r1,#0]            ;471
000112  f3c04007          UBFX     r0,r0,#16,#8          ;471
000116  1c40              ADDS     r0,r0,#1              ;471
000118  fbb3f0f0          UDIV     r0,r3,r0              ;471
00011c  f44f43fa          MOV      r3,#0x7d00            ;471
000120  4358              MULS     r0,r3,r0              ;471
000122  6fcb              LDR      r3,[r1,#0x7c]         ;471
000124  f1a10188          SUB      r1,r1,#0x88           ;471
000128  b2db              UXTB     r3,r3                 ;471
00012a  f1030301          ADD      r3,r3,#1              ;471
00012e  fbb0f0f3          UDIV     r0,r0,r3              ;471
000132  6010              STR      r0,[r2,#0]            ;471  ; SystemFrequency
000134  e01a              B        |L1.364|
                  |L1.310|
;;;479          case 0:                           /* Internal RC oscillator => PLL0     */
;;;480          case 3:                           /* Reserved, default to Internal RC   */
;;;481            SystemFrequency = IRC_OSC / ((LPC_SC->CCLKCFG & 0xFF)+ 1);
000136  f8d10104          LDR      r0,[r1,#0x104]
00013a  4b12              LDR      r3,|L1.388|
00013c  b2c0              UXTB     r0,r0
00013e  1c40              ADDS     r0,r0,#1
000140  fbb3f0f0          UDIV     r0,r3,r0
000144  6010              STR      r0,[r2,#0]  ; SystemFrequency
;;;482            break;
000146  e011              B        |L1.364|
                  |L1.328|
;;;483          case 1:                           /* Main oscillator => PLL0            */
;;;484            SystemFrequency = OSC_CLK / ((LPC_SC->CCLKCFG & 0xFF)+ 1);
000148  f8d10104          LDR      r0,[r1,#0x104]
00014c  4b0e              LDR      r3,|L1.392|
00014e  b2c0              UXTB     r0,r0
000150  1c40              ADDS     r0,r0,#1
000152  fbb3f0f0          UDIV     r0,r3,r0
000156  6010              STR      r0,[r2,#0]  ; SystemFrequency
;;;485            break;
000158  e008              B        |L1.364|
                  |L1.346|
;;;486          case 2:                           /* RTC oscillator => PLL0             */
;;;487            SystemFrequency = RTC_CLK / ((LPC_SC->CCLKCFG & 0xFF)+ 1);
00015a  f8d10104          LDR      r0,[r1,#0x104]
00015e  f44f43fa          MOV      r3,#0x7d00
000162  b2c0              UXTB     r0,r0
000164  1c40              ADDS     r0,r0,#1
000166  fbb3f0f0          UDIV     r0,r3,r0
00016a  6010              STR      r0,[r2,#0]  ; SystemFrequency
                  |L1.364|
;;;488            break;
;;;489        }
;;;490      }
;;;491    
;;;492    #if (FLASH_SETUP == 1)                  /* Flash Accelerator Setup            */
;;;493      LPC_SC->FLASHCFG  = FLASHCFG_Val;
00016c  f243003a          MOV      r0,#0x303a
000170  6008              STR      r0,[r1,#0]
;;;494    #endif
;;;495    }
000172  bd30              POP      {r4,r5,pc}
                          ENDP

                  |L1.372|
                          DCD      0x400fc000
                  |L1.376|
                          DCD      0x0003004f
                  |L1.380|
                          DCD      0x4100f14a
                  |L1.384|
                          DCD      ||.data||
                  |L1.388|
                          DCD      0x003d0900
                  |L1.392|
                          DCD      0x00989680

                          AREA ||.data||, DATA, ALIGN=2

                  SystemFrequency
                          DCD      0x003d0900
